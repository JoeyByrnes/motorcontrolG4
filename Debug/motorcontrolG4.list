
motorcontrolG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015f0  08013060  08013060  00023060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014650  08014650  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08014650  08014650  00024650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014658  08014658  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014658  08014658  00024658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801465c  0801465c  0002465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08014660  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009234  20000200  08014860  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009434  08014860  00039434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028050  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005424  00000000  00000000  00058280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec8  00000000  00000000  0005d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c98  00000000  00000000  0005f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e711  00000000  00000000  00061208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002767e  00000000  00000000  0008f919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e3a5  00000000  00000000  000b6f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d533c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c28  00000000  00000000  001d538c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013044 	.word	0x08013044

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08013044 	.word	0x08013044

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00c ff7d 	bl	800df60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010d2:	f005 fb9f 	bl	8006814 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010dc:	f003 ffd3 	bl	8005086 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ec:	f006 fc14 	bl	8007918 <HAL_ADCEx_MultiModeConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f6:	f003 ffc6 	bl	8005086 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_ADC1_Init+0xec>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001106:	237f      	movs	r3, #127	; 0x7f
 8001108:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001118:	f005 ff36 	bl	8006f88 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001122:	f003 ffb0 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000021c 	.word	0x2000021c
 8001134:	32601000 	.word	0x32601000

08001138 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00c ff0b 	bl	800df60 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <MX_ADC2_Init+0xc4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001172:	2204      	movs	r2, #4
 8001174:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011b4:	f005 fb2e 	bl	8006814 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011be:	f003 ff62 	bl	8005086 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC2_Init+0xc8>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	; 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011e0:	f005 fed2 	bl	8006f88 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011ea:	f003 ff4c 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000288 	.word	0x20000288
 80011fc:	50000100 	.word	0x50000100
 8001200:	32601000 	.word	0x32601000

08001204 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00c fe9f 	bl	800df60 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <MX_ADC3_Init+0xe8>)
 8001226:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800122a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800122e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800124a:	2204      	movs	r2, #4
 800124c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800125c:	2201      	movs	r2, #1
 800125e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800128c:	f005 fac2 	bl	8006814 <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001296:	f003 fef6 	bl	8005086 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012a6:	f006 fb37 	bl	8007918 <HAL_ADCEx_MultiModeConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f003 fee9 	bl	8005086 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_ADC3_Init+0xec>)
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c0:	237f      	movs	r3, #127	; 0x7f
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012d2:	f005 fe59 	bl	8006f88 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012dc:	f003 fed3 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200002f4 	.word	0x200002f4
 80012ec:	50000400 	.word	0x50000400
 80012f0:	32601000 	.word	0x32601000

080012f4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00c fe2d 	bl	800df60 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <MX_ADC4_Init+0xc4>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800130e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001312:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800132e:	2204      	movs	r2, #4
 8001330:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001340:	2201      	movs	r2, #1
 8001342:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001370:	f005 fa50 	bl	8006814 <HAL_ADC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800137a:	f003 fe84 	bl	8005086 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_ADC4_Init+0xc8>)
 8001380:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001382:	2306      	movs	r3, #6
 8001384:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138a:	237f      	movs	r3, #127	; 0x7f
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138e:	2304      	movs	r3, #4
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800139c:	f005 fdf4 	bl	8006f88 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80013a6:	f003 fe6e 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000360 	.word	0x20000360
 80013b8:	50000500 	.word	0x50000500
 80013bc:	0c900008 	.word	0x0c900008

080013c0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00c fdc7 	bl	800df60 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <MX_ADC5_Init+0xc4>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013de:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001400:	2200      	movs	r2, #0
 8001402:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001406:	2200      	movs	r2, #0
 8001408:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC5_Init+0xc0>)
 800140c:	2201      	movs	r2, #1
 800140e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_ADC5_Init+0xc0>)
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC5_Init+0xc0>)
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_ADC5_Init+0xc0>)
 800143c:	f005 f9ea 	bl	8006814 <HAL_ADC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001446:	f003 fe1e 	bl	8005086 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC5_Init+0xc8>)
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144e:	2306      	movs	r3, #6
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001456:	237f      	movs	r3, #127	; 0x7f
 8001458:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145a:	2304      	movs	r3, #4
 800145c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001468:	f005 fd8e 	bl	8006f88 <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001472:	f003 fe08 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003cc 	.word	0x200003cc
 8001484:	50000600 	.word	0x50000600
 8001488:	04300002 	.word	0x04300002

0800148c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a6      	sub	sp, #152	; 0x98
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2254      	movs	r2, #84	; 0x54
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c fd57 	bl	800df60 <memset>
  if(adcHandle->Instance==ADC1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ba:	d16b      	bne.n	8001594 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 fa91 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014d8:	f003 fdd5 	bl	8005086 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014dc:	4b9f      	ldr	r3, [pc, #636]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a9e      	ldr	r2, [pc, #632]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014e6:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014ee:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a9b      	ldr	r2, [pc, #620]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b99      	ldr	r3, [pc, #612]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a95      	ldr	r2, [pc, #596]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001534:	4619      	mov	r1, r3
 8001536:	488b      	ldr	r0, [pc, #556]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 8001538:	f007 faea 	bl	8008b10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800153e:	4a8b      	ldr	r2, [pc, #556]	; (800176c <HAL_ADC_MspInit+0x2e0>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001544:	2205      	movs	r2, #5
 8001546:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001548:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001576:	487c      	ldr	r0, [pc, #496]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001578:	f006 fbe6 	bl	8007d48 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001582:	f003 fd80 	bl	8005086 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
 800158c:	4a76      	ldr	r2, [pc, #472]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001592:	e1b4      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a75      	ldr	r2, [pc, #468]	; (8001770 <HAL_ADC_MspInit+0x2e4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d16b      	bne.n	8001676 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015a8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 fa20 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0x132>
      Error_Handler();
 80015ba:	f003 fd64 	bl	8005086 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10b      	bne.n	80015e8 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a62      	ldr	r2, [pc, #392]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a5c      	ldr	r2, [pc, #368]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001616:	4619      	mov	r1, r3
 8001618:	4852      	ldr	r0, [pc, #328]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 800161a:	f007 fa79 	bl	8008b10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_ADC_MspInit+0x2ec>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001658:	4846      	ldr	r0, [pc, #280]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800165a:	f006 fb75 	bl	8007d48 <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001664:	f003 fd0f 	bl	8005086 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a42      	ldr	r2, [pc, #264]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
 800166e:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001674:	e143      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_ADC_MspInit+0x2f0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 8085 	bne.w	800178c <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f008 f9ae 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800169e:	f003 fcf2 	bl	8005086 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016fa:	4619      	mov	r1, r3
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 80016fe:	f007 fa07 	bl	8008b10 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_ADC_MspInit+0x2fc>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800170a:	2225      	movs	r2, #37	; 0x25
 800170c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800173e:	f006 fb03 	bl	8007d48 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_ADC_MspInit+0x2c0>
      Error_Handler();
 8001748:	f003 fc9d 	bl	8005086 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001758:	e0d1      	b.n	80018fe <HAL_ADC_MspInit+0x472>
 800175a:	bf00      	nop
 800175c:	200005b8 	.word	0x200005b8
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400
 8001768:	20000438 	.word	0x20000438
 800176c:	40020008 	.word	0x40020008
 8001770:	50000100 	.word	0x50000100
 8001774:	20000498 	.word	0x20000498
 8001778:	4002001c 	.word	0x4002001c
 800177c:	50000400 	.word	0x50000400
 8001780:	200005bc 	.word	0x200005bc
 8001784:	200004f8 	.word	0x200004f8
 8001788:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_ADC_MspInit+0x47c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d16c      	bne.n	8001870 <HAL_ADC_MspInit+0x3e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800179c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 f924 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80017b2:	f003 fc68 	bl	8005086 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001810:	4619      	mov	r1, r3
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <HAL_ADC_MspInit+0x488>)
 8001814:	f007 f97c 	bl	8008b10 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800181a:	4a40      	ldr	r2, [pc, #256]	; (800191c <HAL_ADC_MspInit+0x490>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001820:	2226      	movs	r2, #38	; 0x26
 8001822:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001852:	4831      	ldr	r0, [pc, #196]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001854:	f006 fa78 	bl	8007d48 <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 800185e:	f003 fc12 	bl	8005086 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800186e:	e046      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC5)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x494>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d141      	bne.n	80018fe <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001884:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188a:	4618      	mov	r0, r3
 800188c:	f008 f8b2 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_ADC_MspInit+0x40e>
      Error_Handler();
 8001896:	f003 fbf6 	bl	8005086 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_ADC_MspInit+0x480>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0x438>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f007 f909 	bl	8008b10 <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3798      	adds	r7, #152	; 0x98
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	50000500 	.word	0x50000500
 800190c:	200005bc 	.word	0x200005bc
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400
 8001918:	20000558 	.word	0x20000558
 800191c:	40020044 	.word	0x40020044
 8001920:	50000600 	.word	0x50000600

08001924 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <order_phases+0x1e8>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 8001940:	4873      	ldr	r0, [pc, #460]	; (8001b10 <order_phases+0x1ec>)
 8001942:	f00d fa15 	bl	800ed70 <puts>
		cal->started = 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001b14 <order_phases+0x1f0>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 7a05 	vldr	s15, [r3, #20]
 8001976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d529      	bpl.n	80019d8 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001996:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        cal->cal_position.elec_velocity = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019a0:	461a      	mov	r2, r3
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <order_phases+0x1f4>)
 80019ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80019c4:	332c      	adds	r3, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f001 fc9b 	bl	8003304 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
    	return;
 80019d6:	e096      	b.n	8001b06 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a05 	vldr	s15, [r3, #20]
 80019de:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b1c <order_phases+0x1f8>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d51d      	bpl.n	8001a28 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80019f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a12:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a1c:	332c      	adds	r3, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f001 fc6f 	bl	8003304 <commutate>
    	return;
 8001a26:	e06e      	b.n	8001b06 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f001 fb83 	bl	8003134 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	eef0 7ae7 	vabs.f32	s15, s15
 8001a46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b20 <order_phases+0x1fc>
 8001a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a4e:	ee16 0a90 	vmov	r0, s13
 8001a52:	f7fe fda1 	bl	8000598 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f010 ff8d 	bl	801297c <round>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8c5 	bl	8000bf8 <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd07      	ble.n	8001a9a <order_phases+0x176>
		cal->phase_order = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <order_phases+0x200>)
 8001a94:	f00d f96c 	bl	800ed70 <puts>
 8001a98:	e006      	b.n	8001aa8 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001aa2:	4821      	ldr	r0, [pc, #132]	; (8001b28 <order_phases+0x204>)
 8001aa4:	f00d f964 	bl	800ed70 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	481f      	ldr	r0, [pc, #124]	; (8001b2c <order_phases+0x208>)
 8001ab0:	f00d f8d8 	bl	800ec64 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd6d 	bl	8000598 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7fe fd68 	bl	8000598 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	4816      	ldr	r0, [pc, #88]	; (8001b30 <order_phases+0x20c>)
 8001ad6:	f00d f8c5 	bl	800ec64 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <order_phases+0x1e8>)
 8001ae4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <order_phases+0x1f4>)
 8001af4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	200006c4 	.word	0x200006c4
 8001b10:	08013060 	.word	0x08013060
 8001b14:	37d1b717 	.word	0x37d1b717
 8001b18:	20000624 	.word	0x20000624
 8001b1c:	3fd06cbe 	.word	0x3fd06cbe
 8001b20:	40c90fdb 	.word	0x40c90fdb
 8001b24:	08013084 	.word	0x08013084
 8001b28:	0801309c 	.word	0x0801309c
 8001b2c:	080130b4 	.word	0x080130b4
 8001b30:	080130c8 	.word	0x080130c8

08001b34 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7c1b      	ldrb	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001b4a:	489e      	ldr	r0, [pc, #632]	; (8001dc4 <calibrate_encoder+0x290>)
 8001b4c:	f00d f910 	bl	800ed70 <puts>
			cal->started = 1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001dc8 <calibrate_encoder+0x294>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d525      	bpl.n	8001be8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bae:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        controller->i_d_des = I_CAL;
 8001bb2:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <calibrate_encoder+0x298>)
 8001bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001bcc:	332c      	adds	r3, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f001 fb97 	bl	8003304 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001be6:	e258      	b.n	800209a <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <calibrate_encoder+0x298>)
 8001bf0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bf4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001dd0 <calibrate_encoder+0x29c>
 8001bf8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bfc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001c00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	f140 808f 	bpl.w	8001d36 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001c36:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001c40:	332c      	adds	r3, #44	; 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f001 fb5d 	bl	8003304 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dc00      	bgt.n	8001c62 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001c60:	e21b      	b.n	800209a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001de8 <calibrate_encoder+0x2b4>
 8001c6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c70:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <calibrate_encoder+0x298>)
 8001c72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c76:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001dd0 <calibrate_encoder+0x29c>
 8001c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c86:	ee17 3a90 	vmov	r3, s15
 8001c8a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	145b      	asrs	r3, r3, #17
 8001c9a:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	f100 030a 	add.w	r3, r0, #10
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cb8:	461d      	mov	r5, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	685c      	ldr	r4, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc63 	bl	8000598 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4623      	mov	r3, r4
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4629      	mov	r1, r5
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <calibrate_encoder+0x2a4>)
 8001ce2:	f00c ffbf 	bl	800ec64 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ddc <calibrate_encoder+0x2a8>
 8001cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <calibrate_encoder+0x298>)
 8001d08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d0c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001de0 <calibrate_encoder+0x2ac>
 8001d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	f000 81b6 	beq.w	8002094 <calibrate_encoder+0x560>
			cal->sample_count++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001d34:	e1b1      	b.n	800209a <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <calibrate_encoder+0x298>)
 8001d3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d42:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001de4 <calibrate_encoder+0x2b0>
 8001d46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d4a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001d4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	f140 80a9 	bpl.w	8001eb8 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d6c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <calibrate_encoder+0x298>)
 8001d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001d98:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001da2:	332c      	adds	r3, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f001 faac 	bl	8003304 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dc14      	bgt.n	8001dec <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001dc2:	e169      	b.n	8002098 <calibrate_encoder+0x564>
 8001dc4:	080130e4 	.word	0x080130e4
 8001dc8:	37d1b717 	.word	0x37d1b717
 8001dcc:	20000624 	.word	0x20000624
 8001dd0:	40c90fdb 	.word	0x40c90fdb
 8001dd4:	3983126e 	.word	0x3983126e
 8001dd8:	0801310c 	.word	0x0801310c
 8001ddc:	3ba0d97c 	.word	0x3ba0d97c
 8001de0:	43000000 	.word	0x43000000
 8001de4:	41490fdb 	.word	0x41490fdb
 8001de8:	46800000 	.word	0x46800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8151 	beq.w	8002098 <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfc:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001de8 <calibrate_encoder+0x2b4>
 8001e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e04:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <calibrate_encoder+0x56c>)
 8001e06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e0a:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80020a4 <calibrate_encoder+0x570>
 8001e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1a:	ee17 3a90 	vmov	r3, s15
 8001e1e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	145b      	asrs	r3, r3, #17
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001e4e:	4610      	mov	r0, r2
 8001e50:	0fda      	lsrs	r2, r3, #31
 8001e52:	4413      	add	r3, r2
 8001e54:	105b      	asrs	r3, r3, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	f100 030a 	add.w	r3, r0, #10
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e68:	461d      	mov	r5, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	330a      	adds	r3, #10
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	685c      	ldr	r4, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb8b 	bl	8000598 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9cd 2300 	strd	r2, r3, [sp]
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4885      	ldr	r0, [pc, #532]	; (80020a8 <calibrate_encoder+0x574>)
 8001e92:	f00c fee7 	bl	800ec64 <iprintf>
			cal->sample_count--;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ea8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80020ac <calibrate_encoder+0x578>
 8001eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001eb6:	e0ef      	b.n	8002098 <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f001 f93b 	bl	8003134 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec6:	e00b      	b.n	8001ee0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ecc:	330a      	adds	r3, #10
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed6:	4413      	add	r3, r2
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001edc:	3301      	adds	r3, #1
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <calibrate_encoder+0x56c>)
 8001ee2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbe8      	blt.n	8001ec8 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f00:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <calibrate_encoder+0x56c>)
 8001f02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f06:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80020b0 <calibrate_encoder+0x57c>
 8001f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	ee17 2a90 	vmov	r2, s15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da00      	bge.n	8001f30 <calibrate_encoder+0x3fc>
 8001f2e:	337f      	adds	r3, #127	; 0x7f
 8001f30:	11db      	asrs	r3, r3, #7
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f38:	e0a0      	b.n	800207c <calibrate_encoder+0x548>
			int moving_avg = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	0fda      	lsrs	r2, r3, #31
 8001f42:	4413      	add	r3, r2
 8001f44:	105b      	asrs	r3, r3, #1
 8001f46:	425b      	negs	r3, r3
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4a:	e068      	b.n	800201e <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <calibrate_encoder+0x56c>)
 8001f58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f60:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80020b0 <calibrate_encoder+0x57c>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	eddf 6a51 	vldr	s13, [pc, #324]	; 80020b0 <calibrate_encoder+0x57c>
 8001f6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f82:	ee17 3a90 	vmov	r3, s15
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da13      	bge.n	8001fb6 <calibrate_encoder+0x482>
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <calibrate_encoder+0x56c>)
 8001f9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f9e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80020b0 <calibrate_encoder+0x57c>
 8001fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fae:	ee17 3a90 	vmov	r3, s15
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb4:	e027      	b.n	8002006 <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc0:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <calibrate_encoder+0x56c>)
 8001fc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fc6:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80020b0 <calibrate_encoder+0x57c>
 8001fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	dd12      	ble.n	8002006 <calibrate_encoder+0x4d2>
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <calibrate_encoder+0x56c>)
 8001fec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ff0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80020b0 <calibrate_encoder+0x57c>
 8001ff4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	330a      	adds	r3, #10
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002014:	4413      	add	r3, r2
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	3301      	adds	r3, #1
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	0fda      	lsrs	r2, r3, #31
 8002022:	4413      	add	r3, r2
 8002024:	105b      	asrs	r3, r3, #1
 8002026:	461a      	mov	r2, r3
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	4293      	cmp	r3, r2
 800202c:	db8e      	blt.n	8001f4c <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 800202e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	fb92 f3f3 	sdiv	r3, r2, r3
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203c:	4413      	add	r3, r2
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	2b7f      	cmp	r3, #127	; 0x7f
 8002044:	dd02      	ble.n	800204c <calibrate_encoder+0x518>
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	3b80      	subs	r3, #128	; 0x80
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800205c:	330a      	adds	r3, #10
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002070:	4810      	ldr	r0, [pc, #64]	; (80020b4 <calibrate_encoder+0x580>)
 8002072:	f00c fdf7 	bl	800ec64 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	3301      	adds	r3, #1
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	2b7f      	cmp	r3, #127	; 0x7f
 8002080:	f77f af5b 	ble.w	8001f3a <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002092:	e002      	b.n	800209a <calibrate_encoder+0x566>
				return;
 8002094:	bf00      	nop
 8002096:	e000      	b.n	800209a <calibrate_encoder+0x566>
		return;
 8002098:	bf00      	nop
}
 800209a:	3748      	adds	r7, #72	; 0x48
 800209c:	46bd      	mov	sp, r7
 800209e:	bdb0      	pop	{r4, r5, r7, pc}
 80020a0:	20000624 	.word	0x20000624
 80020a4:	40c90fdb 	.word	0x40c90fdb
 80020a8:	0801310c 	.word	0x0801310c
 80020ac:	3ba0d97c 	.word	0x3ba0d97c
 80020b0:	43000000 	.word	0x43000000
 80020b4:	0801311c 	.word	0x0801311c

080020b8 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
//	msg->filter.FilterMaskIdLow=0;
//	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
//	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
//	msg->filter.FilterActivation=ENABLE;
//	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
//	msg->tx_header.DLC = 6; 			// message size of 8 byte
//	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
//	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
//	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <MX_DMA_Init+0x80>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <MX_DMA_Init+0x80>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6493      	str	r3, [r2, #72]	; 0x48
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <MX_DMA_Init+0x80>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_DMA_Init+0x80>)
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <MX_DMA_Init+0x80>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6493      	str	r3, [r2, #72]	; 0x48
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_DMA_Init+0x80>)
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	200b      	movs	r0, #11
 800211c:	f005 fddf 	bl	8007cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002120:	200b      	movs	r0, #11
 8002122:	f005 fdf6 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	200c      	movs	r0, #12
 800212c:	f005 fdd7 	bl	8007cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002130:	200c      	movs	r0, #12
 8002132:	f005 fdee 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	200d      	movs	r0, #13
 800213c:	f005 fdcf 	bl	8007cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002140:	200d      	movs	r0, #13
 8002142:	f005 fde6 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	200e      	movs	r0, #14
 800214c:	f005 fdc7 	bl	8007cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002150:	200e      	movs	r0, #14
 8002152:	f005 fdde 	bl	8007d12 <HAL_NVIC_EnableIRQ>

}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <drv_spi_write>:
//	SPI1->CR1 &= ~(SPI_CR1_SPE);
//	DRV_CS_HIGH;
//	return (result);
//}

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
//	return drv_spi_write_cmsis(drv, val);
	drv->spi_tx_word = val;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8002176:	2200      	movs	r2, #0
 8002178:	2110      	movs	r1, #16
 800217a:	480f      	ldr	r0, [pc, #60]	; (80021b8 <drv_spi_write+0x54>)
 800217c:	f006 fe4a 	bl	8008e14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	1c9a      	adds	r2, r3, #2
 8002186:	2364      	movs	r3, #100	; 0x64
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <drv_spi_write+0x58>)
 800218e:	f007 ff2a 	bl	8009fe6 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8002192:	bf00      	nop
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <drv_spi_write+0x58>)
 8002196:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d0f9      	beq.n	8002194 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80021a0:	2201      	movs	r2, #1
 80021a2:	2110      	movs	r1, #16
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <drv_spi_write+0x54>)
 80021a6:	f006 fe35 	bl	8008e14 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	885b      	ldrh	r3, [r3, #2]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	48000800 	.word	0x48000800
 80021bc:	20009278 	.word	0x20009278

080021c0 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	463b      	mov	r3, r7
 80021c8:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 80021cc:	463b      	mov	r3, r7
 80021ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffc6 	bl	8002164 <drv_spi_write>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	463b      	mov	r3, r7
 80021ea:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 80021ee:	463b      	mov	r3, r7
 80021f0:	f248 0101 	movw	r1, #32769	; 0x8001
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ffb5 	bl	8002164 <drv_spi_write>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002212:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	02db      	lsls	r3, r3, #11
 8002218:	b21b      	sxth	r3, r3
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b21b      	sxth	r3, r3
 8002224:	b29a      	uxth	r2, r3
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff99 	bl	8002164 <drv_spi_write>
 8002232:	4603      	mov	r3, r0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	f107 0408 	add.w	r4, r7, #8
 8002246:	e884 0003 	stmia.w	r4, {r0, r1}
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	02db      	lsls	r3, r3, #11
 8002252:	b21a      	sxth	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21b      	sxth	r3, r3
 800225c:	b29a      	uxth	r2, r3
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff7d 	bl	8002164 <drv_spi_write>
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}

08002272 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8002272:	b590      	push	{r4, r7, lr}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	f107 0408 	add.w	r4, r7, #8
 800227c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	b21b      	sxth	r3, r3
 800228a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800228e:	b21a      	sxth	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21a      	sxth	r2, r3
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	01db      	lsls	r3, r3, #7
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	015b      	lsls	r3, r3, #5
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d8:	b21b      	sxth	r3, r3
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21b      	sxth	r3, r3
 80022de:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80022e0:	8afa      	ldrh	r2, [r7, #22]
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff3b 	bl	8002164 <drv_spi_write>
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}

080022f6 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80022f6:	b590      	push	{r4, r7, lr}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	f107 0408 	add.w	r4, r7, #8
 8002300:	e884 0003 	stmia.w	r4, {r0, r1}
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	b21b      	sxth	r3, r3
 800230e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002312:	b21a      	sxth	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	019b      	lsls	r3, r3, #6
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b21a      	sxth	r2, r3
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	b21b      	sxth	r3, r3
 800232e:	4313      	orrs	r3, r2
 8002330:	b21a      	sxth	r2, r3
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21b      	sxth	r3, r3
 800233a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800233c:	8afa      	ldrh	r2, [r7, #22]
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff0d 	bl	8002164 <drv_spi_write>
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}

08002352 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	f107 0408 	add.w	r4, r7, #8
 800235c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	b21b      	sxth	r3, r3
 800236a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800236e:	b21a      	sxth	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	025b      	lsls	r3, r3, #9
 8002374:	b21b      	sxth	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b21a      	sxth	r2, r3
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21a      	sxth	r2, r3
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b21b      	sxth	r3, r3
 80023be:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80023c0:	8afa      	ldrh	r2, [r7, #22]
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fecb 	bl	8002164 <drv_spi_write>
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}

080023d6 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	463b      	mov	r3, r7
 80023de:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80023e2:	2202      	movs	r2, #2
 80023e4:	463b      	mov	r3, r7
 80023e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023ea:	f7ff ff0b 	bl	8002204 <drv_read_register>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4639      	mov	r1, r7
 80023fc:	c903      	ldmia	r1, {r0, r1}
 80023fe:	f7ff ff1d 	bl	800223c <drv_write_register>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	463b      	mov	r3, r7
 8002412:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002416:	2202      	movs	r2, #2
 8002418:	463b      	mov	r3, r7
 800241a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800241e:	f7ff fef1 	bl	8002204 <drv_read_register>
 8002422:	4603      	mov	r3, r0
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	2202      	movs	r2, #2
 800242e:	4639      	mov	r1, r7
 8002430:	c903      	ldmia	r1, {r0, r1}
 8002432:	f7ff ff03 	bl	800223c <drv_write_register>
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	463b      	mov	r3, r7
 8002448:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 800244c:	463b      	mov	r3, r7
 800244e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002452:	f7ff feb5 	bl	80021c0 <drv_read_FSR1>
 8002456:	4603      	mov	r3, r0
 8002458:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 800245a:	463b      	mov	r3, r7
 800245c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002460:	f7ff febf 	bl	80021e2 <drv_read_FSR2>
 8002464:	4603      	mov	r3, r0
 8002466:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <drv_print_faults+0x38>
 8002472:	4857      	ldr	r0, [pc, #348]	; (80025d0 <drv_print_faults+0x190>)
 8002474:	f00c fbf6 	bl	800ec64 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <drv_print_faults+0x48>
 8002482:	4854      	ldr	r0, [pc, #336]	; (80025d4 <drv_print_faults+0x194>)
 8002484:	f00c fbee 	bl	800ec64 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <drv_print_faults+0x58>
 8002492:	4851      	ldr	r0, [pc, #324]	; (80025d8 <drv_print_faults+0x198>)
 8002494:	f00c fbe6 	bl	800ec64 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <drv_print_faults+0x68>
 80024a2:	484e      	ldr	r0, [pc, #312]	; (80025dc <drv_print_faults+0x19c>)
 80024a4:	f00c fbde 	bl	800ec64 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <drv_print_faults+0x78>
 80024b2:	484b      	ldr	r0, [pc, #300]	; (80025e0 <drv_print_faults+0x1a0>)
 80024b4:	f00c fbd6 	bl	800ec64 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <drv_print_faults+0x88>
 80024c2:	4848      	ldr	r0, [pc, #288]	; (80025e4 <drv_print_faults+0x1a4>)
 80024c4:	f00c fbce 	bl	800ec64 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80024c8:	89fb      	ldrh	r3, [r7, #14]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <drv_print_faults+0x98>
 80024d2:	4845      	ldr	r0, [pc, #276]	; (80025e8 <drv_print_faults+0x1a8>)
 80024d4:	f00c fbc6 	bl	800ec64 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <drv_print_faults+0xa8>
 80024e2:	4842      	ldr	r0, [pc, #264]	; (80025ec <drv_print_faults+0x1ac>)
 80024e4:	f00c fbbe 	bl	800ec64 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <drv_print_faults+0xb8>
 80024f2:	483f      	ldr	r0, [pc, #252]	; (80025f0 <drv_print_faults+0x1b0>)
 80024f4:	f00c fbb6 	bl	800ec64 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <drv_print_faults+0xc8>
 8002502:	483c      	ldr	r0, [pc, #240]	; (80025f4 <drv_print_faults+0x1b4>)
 8002504:	f00c fbae 	bl	800ec64 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <drv_print_faults+0xd8>
 8002512:	4839      	ldr	r0, [pc, #228]	; (80025f8 <drv_print_faults+0x1b8>)
 8002514:	f00c fba6 	bl	800ec64 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002518:	89bb      	ldrh	r3, [r7, #12]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <drv_print_faults+0xe8>
 8002522:	4836      	ldr	r0, [pc, #216]	; (80025fc <drv_print_faults+0x1bc>)
 8002524:	f00c fb9e 	bl	800ec64 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <drv_print_faults+0xf8>
 8002532:	4833      	ldr	r0, [pc, #204]	; (8002600 <drv_print_faults+0x1c0>)
 8002534:	f00c fb96 	bl	800ec64 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8002538:	89bb      	ldrh	r3, [r7, #12]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <drv_print_faults+0x108>
 8002542:	4830      	ldr	r0, [pc, #192]	; (8002604 <drv_print_faults+0x1c4>)
 8002544:	f00c fb8e 	bl	800ec64 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8002548:	89bb      	ldrh	r3, [r7, #12]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <drv_print_faults+0x118>
 8002552:	482d      	ldr	r0, [pc, #180]	; (8002608 <drv_print_faults+0x1c8>)
 8002554:	f00c fb86 	bl	800ec64 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8002558:	89bb      	ldrh	r3, [r7, #12]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <drv_print_faults+0x128>
 8002562:	482a      	ldr	r0, [pc, #168]	; (800260c <drv_print_faults+0x1cc>)
 8002564:	f00c fb7e 	bl	800ec64 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8002568:	89bb      	ldrh	r3, [r7, #12]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <drv_print_faults+0x138>
 8002572:	4827      	ldr	r0, [pc, #156]	; (8002610 <drv_print_faults+0x1d0>)
 8002574:	f00c fb76 	bl	800ec64 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8002578:	89bb      	ldrh	r3, [r7, #12]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <drv_print_faults+0x148>
 8002582:	4824      	ldr	r0, [pc, #144]	; (8002614 <drv_print_faults+0x1d4>)
 8002584:	f00c fb6e 	bl	800ec64 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002588:	89bb      	ldrh	r3, [r7, #12]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <drv_print_faults+0x158>
 8002592:	4821      	ldr	r0, [pc, #132]	; (8002618 <drv_print_faults+0x1d8>)
 8002594:	f00c fb66 	bl	800ec64 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8002598:	89bb      	ldrh	r3, [r7, #12]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <drv_print_faults+0x168>
 80025a2:	481e      	ldr	r0, [pc, #120]	; (800261c <drv_print_faults+0x1dc>)
 80025a4:	f00c fb5e 	bl	800ec64 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <drv_print_faults+0x178>
 80025b2:	481b      	ldr	r0, [pc, #108]	; (8002620 <drv_print_faults+0x1e0>)
 80025b4:	f00c fb56 	bl	800ec64 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80025b8:	89bb      	ldrh	r3, [r7, #12]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <drv_print_faults+0x188>
 80025c2:	4818      	ldr	r0, [pc, #96]	; (8002624 <drv_print_faults+0x1e4>)
 80025c4:	f00c fb4e 	bl	800ec64 <iprintf>

}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	08013128 	.word	0x08013128
 80025d4:	08013134 	.word	0x08013134
 80025d8:	08013140 	.word	0x08013140
 80025dc:	08013148 	.word	0x08013148
 80025e0:	08013150 	.word	0x08013150
 80025e4:	08013158 	.word	0x08013158
 80025e8:	08013164 	.word	0x08013164
 80025ec:	08013170 	.word	0x08013170
 80025f0:	0801317c 	.word	0x0801317c
 80025f4:	08013188 	.word	0x08013188
 80025f8:	08013194 	.word	0x08013194
 80025fc:	080131a0 	.word	0x080131a0
 8002600:	080131a8 	.word	0x080131a8
 8002604:	080131b0 	.word	0x080131b0
 8002608:	080131b8 	.word	0x080131b8
 800260c:	080131c0 	.word	0x080131c0
 8002610:	080131c8 	.word	0x080131c8
 8002614:	080131d4 	.word	0x080131d4
 8002618:	080131e0 	.word	0x080131e0
 800261c:	080131ec 	.word	0x080131ec
 8002620:	080131f8 	.word	0x080131f8
 8002624:	08013204 	.word	0x08013204

08002628 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800262e:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <MX_FDCAN1_Init+0x88>)
 8002630:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002646:	2200      	movs	r2, #0
 8002648:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800264c:	2200      	movs	r2, #0
 800264e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002652:	2200      	movs	r2, #0
 8002654:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002658:	2210      	movs	r2, #16
 800265a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800265e:	2201      	movs	r2, #1
 8002660:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002664:	2202      	movs	r2, #2
 8002666:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800266a:	2202      	movs	r2, #2
 800266c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002670:	2201      	movs	r2, #1
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002676:	2201      	movs	r2, #1
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800267c:	2201      	movs	r2, #1
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002682:	2201      	movs	r2, #1
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002688:	2200      	movs	r2, #0
 800268a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800268e:	2200      	movs	r2, #0
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_FDCAN1_Init+0x84>)
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <MX_FDCAN1_Init+0x84>)
 800269a:	f005 fdcf 	bl	800823c <HAL_FDCAN_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80026a4:	f002 fcef 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200005c0 	.word	0x200005c0
 80026b0:	40006400 	.word	0x40006400

080026b4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b09e      	sub	sp, #120	; 0x78
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	2254      	movs	r2, #84	; 0x54
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00b fc43 	bl	800df60 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a20      	ldr	r2, [pc, #128]	; (8002760 <HAL_FDCAN_MspInit+0xac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d139      	bne.n	8002758 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80026ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f007 f97d 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002700:	f002 fcc1 	bl	8005086 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_FDCAN_MspInit+0xb0>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_FDCAN_MspInit+0xb0>)
 800270a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270e:	6593      	str	r3, [r2, #88]	; 0x58
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_FDCAN_MspInit+0xb0>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_FDCAN_MspInit+0xb0>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <HAL_FDCAN_MspInit+0xb0>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_FDCAN_MspInit+0xb0>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002734:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002738:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002746:	2309      	movs	r3, #9
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f006 f9dc 	bl	8008b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002758:	bf00      	nop
 800275a:	3778      	adds	r7, #120	; 0x78
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40006400 	.word	0x40006400
 8002764:	40021000 	.word	0x40021000

08002768 <g4_flash_erase>:

    address -= FLASH_BANK1_BASE;
    *sector = address / FLASH_PAGE_SIZE;
}

void g4_flash_erase(uint8_t page){
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
    uint32_t page_err = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitTypeDef erase_conf;
    erase_conf.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8002776:	2301      	movs	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
    erase_conf.Banks = FLASH_BANK_2;
 800277a:	2302      	movs	r3, #2
 800277c:	613b      	str	r3, [r7, #16]

    if (HAL_FLASHEx_Erase(&erase_conf, &page_err) != HAL_OK)
 800277e:	f107 021c 	add.w	r2, r7, #28
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f006 f85f 	bl	800884c <HAL_FLASHEx_Erase>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <g4_flash_erase+0x34>
    {
    	printf("\r\nErasing Flash Failed, Please Reboot Manually.\r\n");
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <g4_flash_erase+0x44>)
 8002796:	f00c faeb 	bl	800ed70 <puts>

    }
    else{
    	printf("\r\nFlash Erase Successful\r\n");
    }
  }
 800279a:	e002      	b.n	80027a2 <g4_flash_erase+0x3a>
    	printf("\r\nFlash Erase Successful\r\n");
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <g4_flash_erase+0x48>)
 800279e:	f00c fae7 	bl	800ed70 <puts>
  }
 80027a2:	bf00      	nop
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	08013210 	.word	0x08013210
 80027b0:	08013244 	.word	0x08013244

080027b4 <flash_writer_init>:

// STM32G4 FUNCTIONS ABOVE =======================================================

// STANDARD FUNCTIONS BELOW ======================================================

void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	d901      	bls.n	80027c8 <flash_writer_init+0x14>
 80027c4:	2307      	movs	r3, #7
 80027c6:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	609a      	str	r2, [r3, #8]
	fw->base = PW_BASE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <flash_writer_init+0x34>)
 80027d2:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	08040000 	.word	0x08040000

080027ec <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}


void flash_writer_open(FlashWriter * fw) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80027f4:	f005 ff3e 	bl	8008674 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <flash_writer_open+0x28>)
 80027fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027fe:	611a      	str	r2, [r3, #16]
    g4_flash_erase(0);
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff ffb1 	bl	8002768 <g4_flash_erase>
    fw->ready = true;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40022000 	.word	0x40022000

08002818 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002818:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	1d3c      	adds	r4, r7, #4
 8002822:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002826:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, PW_BASE + SIZE_OFFSET * index, un.b); //JB
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002832:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002836:	0119      	lsls	r1, r3, #4
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	4698      	mov	r8, r3
 800283e:	4691      	mov	r9, r2
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	2000      	movs	r0, #0
 8002846:	f005 febf 	bl	80085c8 <HAL_FLASH_Program>
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002854 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, PW_BASE + SIZE_OFFSET * index, x); //JB
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002854:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002858:	b089      	sub	sp, #36	; 0x24
 800285a:	af00      	add	r7, sp, #0
 800285c:	f107 040c 	add.w	r4, r7, #12
 8002860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, PW_BASE + SIZE_OFFSET * index, un.b); //JB
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002874:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002878:	0119      	lsls	r1, r3, #4
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2200      	movs	r2, #0
 800287e:	4698      	mov	r8, r3
 8002880:	4691      	mov	r9, r2
 8002882:	4642      	mov	r2, r8
 8002884:	464b      	mov	r3, r9
 8002886:	2000      	movs	r0, #0
 8002888:	f005 fe9e 	bl	80085c8 <HAL_FLASH_Program>
}
 800288c:	bf00      	nop
 800288e:	3724      	adds	r7, #36	; 0x24
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002896 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Lock(); //JB
 800289e:	f005 ff0b 	bl	80086b8 <HAL_FLASH_Lock>
    fw->ready = false;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 80028b0:	b490      	push	{r4, r7}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	1d3c      	adds	r4, r7, #4
 80028b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028bc:	603b      	str	r3, [r7, #0]
    return *(int*) (PW_BASE + SIZE_OFFSET * index);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80028c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc90      	pop	{r4, r7}
 80028d4:	4770      	bx	lr

080028d6 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (PW_BASE + SIZE_OFFSET * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80028d6:	b490      	push	{r4, r7}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	1d3c      	adds	r4, r7, #4
 80028de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028e2:	603b      	str	r3, [r7, #0]
    return *(float*) (PW_BASE + SIZE_OFFSET * index);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80028ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	ee07 3a90 	vmov	s15, r3
}
 80028f6:	eeb0 0a67 	vmov.f32	s0, s15
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc90      	pop	{r4, r7}
 8002900:	4770      	bx	lr
	...

08002904 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291c:	60fb      	str	r3, [r7, #12]

	//printf("dtc_u: %f, \tdtc_v: %f, \tdtc_w: %f\r\n",controller->dtc_u,controller->dtc_v,controller->dtc_w);
	//printf("ia: %f, \tib: %f, \tic: %f\r\n",controller->i_a,controller->i_b,controller->i_c);

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800294c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002950:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <set_dtc+0x140>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d136      	bne.n	80029ca <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <set_dtc+0x144>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800296a:	edd7 7a05 	vldr	s15, [r7, #20]
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <set_dtc+0x144>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297a:	ee17 2a90 	vmov	r2, s15
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <set_dtc+0x144>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <set_dtc+0x144>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299e:	ee17 2a90 	vmov	r2, s15
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <set_dtc+0x144>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <set_dtc+0x144>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c2:	ee17 2a90 	vmov	r2, s15
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34
//	else{
//		TIM2->CCR2 = (TIM_PWM.Instance->ARR)*(1.0f-controller->dtc_u);
//		TIM2->CCR1 = (TIM_PWM.Instance->ARR)*(1.0f-controller->dtc_v);
//		TIM2->CCR3 =  (TIM_PWM.Instance->ARR)*(1.0f-controller->dtc_w);
//	}
}
 80029c8:	e035      	b.n	8002a36 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <set_dtc+0x144>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <set_dtc+0x144>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e8:	ee17 2a90 	vmov	r2, s15
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <set_dtc+0x144>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <set_dtc+0x144>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0c:	ee17 2a90 	vmov	r2, s15
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <set_dtc+0x144>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <set_dtc+0x144>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a30:	ee17 2a90 	vmov	r2, s15
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200006c4 	.word	0x200006c4
 8002a48:	20009344 	.word	0x20009344
 8002a4c:	00000000 	.word	0x00000000

08002a50 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <analog_sample+0x140>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d115      	bne.n	8002a8c <analog_sample+0x3c>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002a60:	484c      	ldr	r0, [pc, #304]	; (8002b94 <analog_sample+0x144>)
 8002a62:	f004 fa83 	bl	8006f6c <HAL_ADC_GetValue>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002a6e:	484a      	ldr	r0, [pc, #296]	; (8002b98 <analog_sample+0x148>)
 8002a70:	f004 fa7c 	bl	8006f6c <HAL_ADC_GetValue>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = HAL_ADC_GetValue(&ADC_CH_IC);
 8002a7c:	4847      	ldr	r0, [pc, #284]	; (8002b9c <analog_sample+0x14c>)
 8002a7e:	f004 fa75 	bl	8006f6c <HAL_ADC_GetValue>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	e014      	b.n	8002ab6 <analog_sample+0x66>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002a8c:	4842      	ldr	r0, [pc, #264]	; (8002b98 <analog_sample+0x148>)
 8002a8e:	f004 fa6d 	bl	8006f6c <HAL_ADC_GetValue>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002a9a:	483e      	ldr	r0, [pc, #248]	; (8002b94 <analog_sample+0x144>)
 8002a9c:	f004 fa66 	bl	8006f6c <HAL_ADC_GetValue>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = HAL_ADC_GetValue(&ADC_CH_IC);
 8002aa8:	483c      	ldr	r0, [pc, #240]	; (8002b9c <analog_sample+0x14c>)
 8002aaa:	f004 fa5f 	bl	8006f6c <HAL_ADC_GetValue>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002ab6:	4837      	ldr	r0, [pc, #220]	; (8002b94 <analog_sample+0x144>)
 8002ab8:	f004 f86e 	bl	8006b98 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	4834      	ldr	r0, [pc, #208]	; (8002b94 <analog_sample+0x144>)
 8002ac2:	f004 f94d 	bl	8006d60 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002ac6:	4836      	ldr	r0, [pc, #216]	; (8002ba0 <analog_sample+0x150>)
 8002ac8:	f004 fa50 	bl	8006f6c <HAL_ADC_GetValue>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae0:	ee17 0a90 	vmov	r0, s15
 8002ae4:	f7fd fd58 	bl	8000598 <__aeabi_f2d>
 8002ae8:	a325      	add	r3, pc, #148	; (adr r3, 8002b80 <analog_sample+0x130>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fdab 	bl	8000648 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	a323      	add	r3, pc, #140	; (adr r3, 8002b88 <analog_sample+0x138>)
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f7fd fda2 	bl	8000648 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fe f894 	bl	8000c38 <__aeabi_d2f>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	621a      	str	r2, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	edc3 7a06 	vstr	s15, [r3, #24]
    //controller->i_c = controller->i_scale*(float)(controller->adc_c_raw - controller->adc_c_offset);
    controller->i_c = -controller->i_a - controller->i_b;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b64:	eeb1 7a67 	vneg.f32	s14, s15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	fdf3b646 	.word	0xfdf3b646
 8002b84:	3ff978d4 	.word	0x3ff978d4
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	3f8a6663 	.word	0x3f8a6663
 8002b90:	200006c4 	.word	0x200006c4
 8002b94:	2000021c 	.word	0x2000021c
 8002b98:	20000288 	.word	0x20000288
 8002b9c:	200002f4 	.word	0x200002f4
 8002ba0:	20000360 	.word	0x20000360

08002ba4 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bae:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bb2:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bb6:	60b8      	str	r0, [r7, #8]
 8002bb8:	6079      	str	r1, [r7, #4]
 8002bba:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002bbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bc0:	f002 fb8c 	bl	80052dc <cos_lut>
 8002bc4:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002bc8:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bcc:	f002 fb4c 	bl	8005268 <sin_lut>
 8002bd0:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002bd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be0:	edd7 6a06 	vldr	s13, [r7, #24]
 8002be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002bf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bfa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002ca4 <abc+0x100>
 8002bfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c02:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002ca8 <abc+0x104>
 8002c22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c26:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c2a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002c48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c4c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002ca8 <abc+0x104>
 8002c50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c54:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c58:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c70:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002ca4 <abc+0x100>
 8002c74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c7c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c80:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	edc3 7a00 	vstr	s15, [r3]
    }
 8002c9a:	bf00      	nop
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	3f5db3d7 	.word	0x3f5db3d7
 8002ca8:	bf5db3d7 	.word	0xbf5db3d7

08002cac <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002cb6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002cba:	ed87 1a03 	vstr	s2, [r7, #12]
 8002cbe:	edc7 1a02 	vstr	s3, [r7, #8]
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002cc6:	ed97 0a05 	vldr	s0, [r7, #20]
 8002cca:	f002 fb07 	bl	80052dc <cos_lut>
 8002cce:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002cd2:	ed97 0a05 	vldr	s0, [r7, #20]
 8002cd6:	f002 fac7 	bl	8005268 <sin_lut>
 8002cda:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002cde:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cee:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002dc0 <dq0+0x114>
 8002cf2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002cf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cfa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002cfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d16:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002dc4 <dq0+0x118>
 8002d1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d22:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002dc8 <dq0+0x11c>
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002d48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d4c:	eeb1 7a67 	vneg.f32	s14, s15
 8002d50:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d5c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002dc4 <dq0+0x118>
 8002d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d80:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d84:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002dc0 <dq0+0x114>
 8002d88:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d90:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d98:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002dc8 <dq0+0x11c>
 8002dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	edc3 7a00 	vstr	s15, [r3]

    }
 8002db6:	bf00      	nop
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	3f5db3d7 	.word	0x3f5db3d7
 8002dc4:	bf5db3d7 	.word	0xbf5db3d7
 8002dc8:	3f2aaaab 	.word	0x3f2aaaab

08002dcc <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	ed2d 8b02 	vpush	{d8}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	ed87 0a07 	vstr	s0, [r7, #28]
 8002dda:	edc7 0a06 	vstr	s1, [r7, #24]
 8002dde:	ed87 1a05 	vstr	s2, [r7, #20]
 8002de2:	edc7 1a04 	vstr	s3, [r7, #16]
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002dec:	ed97 1a04 	vldr	s2, [r7, #16]
 8002df0:	edd7 0a05 	vldr	s1, [r7, #20]
 8002df4:	ed97 0a06 	vldr	s0, [r7, #24]
 8002df8:	f002 f9b8 	bl	800516c <fminf3>
 8002dfc:	eeb0 8a40 	vmov.f32	s16, s0
 8002e00:	ed97 1a04 	vldr	s2, [r7, #16]
 8002e04:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e08:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e0c:	f002 f97a 	bl	8005104 <fmaxf3>
 8002e10:	eef0 7a40 	vmov.f32	s15, s0
 8002e14:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <svm+0x160>)
 8002e26:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002e28:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002f30 <svm+0x164>
 8002e40:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e44:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002f34 <svm+0x168>
 8002e58:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5c:	f002 f91a 	bl	8005094 <fast_fmaxf>
 8002e60:	eef0 7a40 	vmov.f32	s15, s0
 8002e64:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002f38 <svm+0x16c>
 8002e68:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6c:	f002 f92e 	bl	80050cc <fast_fminf>
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f30 <svm+0x164>
 8002e92:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea6:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002f34 <svm+0x168>
 8002eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8002eae:	f002 f8f1 	bl	8005094 <fast_fmaxf>
 8002eb2:	eef0 7a40 	vmov.f32	s15, s0
 8002eb6:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002f38 <svm+0x16c>
 8002eba:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebe:	f002 f905 	bl	80050cc <fast_fminf>
 8002ec2:	eef0 7a40 	vmov.f32	s15, s0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ecc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ed0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002f30 <svm+0x164>
 8002ee4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ee8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002f34 <svm+0x168>
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	f002 f8c8 	bl	8005094 <fast_fmaxf>
 8002f04:	eef0 7a40 	vmov.f32	s15, s0
 8002f08:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002f38 <svm+0x16c>
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	f002 f8dc 	bl	80050cc <fast_fminf>
 8002f14:	eef0 7a40 	vmov.f32	s15, s0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	ecbd 8b02 	vpop	{d8}
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	3ef0a3d7 	.word	0x3ef0a3d7
 8002f30:	3f933333 	.word	0x3f933333
 8002f34:	00000000 	.word	0x00000000
 8002f38:	3f70a3d7 	.word	0x3f70a3d7

08002f3c <zero_current>:

void zero_current(ControllerStruct *controller){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f50:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fcca 	bl	8002904 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e00f      	b.n	8002f96 <zero_current+0x5a>
    	analog_sample(controller);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fd6a 	bl	8002a50 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	dbeb      	blt.n	8002f76 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	fb92 f2f3 	sdiv	r2, r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	fb92 f2f3 	sdiv	r2, r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a4b      	ldr	r2, [pc, #300]	; (80030fc <init_controller_params+0x138>)
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a49      	ldr	r2, [pc, #292]	; (80030fc <init_controller_params+0x138>)
 8002fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 8002fda:	4b49      	ldr	r3, [pc, #292]	; (8003100 <init_controller_params+0x13c>)
 8002fdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fe0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003104 <init_controller_params+0x140>
 8002fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <init_controller_params+0x13c>)
 8002ff0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ff4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003104 <init_controller_params+0x140>
 8002ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <init_controller_params+0x13c>)
 8003004:	edd3 7a02 	vldr	s15, [r3, #8]
 8003008:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003108 <init_controller_params+0x144>
 800300c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003010:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800310c <init_controller_params+0x148>
 8003014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800301c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800302c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800303c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003110 <init_controller_params+0x14c>
 8003040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 800304a:	4b32      	ldr	r3, [pc, #200]	; (8003114 <init_controller_params+0x150>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <init_controller_params+0x13c>)
 8003056:	edd3 7a03 	vldr	s15, [r3, #12]
 800305a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003118 <init_controller_params+0x154>
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d803      	bhi.n	8003070 <init_controller_params+0xac>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <init_controller_params+0x158>)
 800306c:	671a      	str	r2, [r3, #112]	; 0x70
 800306e:	e002      	b.n	8003076 <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <init_controller_params+0x15c>)
 8003074:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e037      	b.n	80030ec <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003086:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003124 <init_controller_params+0x160>
 800308a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003128 <init_controller_params+0x164>
 8003092:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003096:	ee16 0a90 	vmov	r0, s13
 800309a:	f7fd fa7d 	bl	8000598 <__aeabi_f2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	ec43 2b10 	vmov	d0, r2, r3
 80030a6:	f00f fd03 	bl	8012ab0 <exp>
 80030aa:	ec51 0b10 	vmov	r0, r1, d0
 80030ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <init_controller_params+0x168>)
 80030b4:	f7fd fac8 	bl	8000648 <__aeabi_dmul>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <init_controller_params+0x16c>)
 80030c6:	f7fd f909 	bl	80002dc <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f7fd fdb1 	bl	8000c38 <__aeabi_d2f>
 80030d6:	4601      	mov	r1, r0
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	333c      	adds	r3, #60	; 0x3c
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b7f      	cmp	r3, #127	; 0x7f
 80030f0:	ddc4      	ble.n	800307c <init_controller_params+0xb8>
    }

    }
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	3d3851ec 	.word	0x3d3851ec
 8003100:	20000624 	.word	0x20000624
 8003104:	38d1b717 	.word	0x38d1b717
 8003108:	37d1b717 	.word	0x37d1b717
 800310c:	40c90fdb 	.word	0x40c90fdb
 8003110:	3dcccccd 	.word	0x3dcccccd
 8003114:	200006c4 	.word	0x200006c4
 8003118:	42200000 	.word	0x42200000
 800311c:	3ca4ffff 	.word	0x3ca4ffff
 8003120:	3d24ffff 	.word	0x3d24ffff
 8003124:	bc000000 	.word	0xbc000000
 8003128:	3d03126f 	.word	0x3d03126f
 800312c:	3ff33333 	.word	0x3ff33333
 8003130:	3ff00000 	.word	0x3ff00000

08003134 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <reset_foc+0xe4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800314e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <reset_foc+0xe4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315a:	ee17 2a90 	vmov	r2, s15
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <reset_foc+0xe4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003176:	4b28      	ldr	r3, [pc, #160]	; (8003218 <reset_foc+0xe4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317e:	ee17 2a90 	vmov	r2, s15
 8003182:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <reset_foc+0xe4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <reset_foc+0xe4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a2:	ee17 2a90 	vmov	r2, s15
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20009344 	.word	0x20009344

0800321c <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - controller->v_ref);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	ed93 6a38 	vldr	s12, [r3, #224]	; 0xe0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800323c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8003254:	eddf 0a29 	vldr	s1, [pc, #164]	; 80032fc <field_weaken+0xe0>
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	f001 ff36 	bl	80050cc <fast_fminf>
 8003260:	eeb0 7a40 	vmov.f32	s14, s0
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <field_weaken+0xe4>)
 8003266:	edd3 7a06 	vldr	s15, [r3, #24]
 800326a:	eef1 7a67 	vneg.f32	s15, s15
 800326e:	eef0 0a67 	vmov.f32	s1, s15
 8003272:	eeb0 0a47 	vmov.f32	s0, s14
 8003276:	f001 ff0d 	bl	8005094 <fast_fmaxf>
 800327a:	eef0 7a40 	vmov.f32	s15, s0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->i_d_des = controller->fw_int;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800329c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80032ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	f00f fc62 	bl	8012b80 <sqrtf>
 80032bc:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80032c6:	edd7 0a03 	vldr	s1, [r7, #12]
 80032ca:	eeb0 0a67 	vmov.f32	s0, s15
 80032ce:	f001 fefd 	bl	80050cc <fast_fminf>
 80032d2:	eeb0 7a40 	vmov.f32	s14, s0
 80032d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80032da:	eef1 7a67 	vneg.f32	s15, s15
 80032de:	eef0 0a67 	vmov.f32	s1, s15
 80032e2:	eeb0 0a47 	vmov.f32	s0, s14
 80032e6:	f001 fed5 	bl	8005094 <fast_fmaxf>
 80032ea:	eef0 7a40 	vmov.f32	s15, s0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8


}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00000000 	.word	0x00000000
 8003300:	20000624 	.word	0x20000624

08003304 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003324:	4bd7      	ldr	r3, [pc, #860]	; (8003684 <commutate+0x380>)
 8003326:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800332a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	edd3 6a03 	vldr	s13, [r3, #12]
 800333a:	4bd2      	ldr	r3, [pc, #840]	; (8003684 <commutate+0x380>)
 800333c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	ed93 7a05 	vldr	s14, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	edd3 6a06 	vldr	s13, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	ed93 6a07 	vldr	s12, [r3, #28]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3340      	adds	r3, #64	; 0x40
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	eef0 1a46 	vmov.f32	s3, s12
 8003374:	eeb0 1a66 	vmov.f32	s2, s13
 8003378:	eef0 0a47 	vmov.f32	s1, s14
 800337c:	eeb0 0a67 	vmov.f32	s0, s15
 8003380:	f7ff fc94 	bl	8002cac <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800338a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003688 <commutate+0x384>
 800338e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003398:	eddf 6abc 	vldr	s13, [pc, #752]	; 800368c <commutate+0x388>
 800339c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80033b0:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003688 <commutate+0x384>
 80033b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80033be:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800368c <commutate+0x388>
 80033c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033d6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003688 <commutate+0x384>
 80033da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80033e4:	eddf 6aa9 	vldr	s13, [pc, #676]	; 800368c <commutate+0x388>
 80033e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033fc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003690 <commutate+0x38c>
 8003400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003404:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003694 <commutate+0x390>
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003698 <commutate+0x394>
 8003410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 800341a:	4b9a      	ldr	r3, [pc, #616]	; (8003684 <commutate+0x380>)
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003436:	eeb0 0a67 	vmov.f32	s0, s15
 800343a:	4610      	mov	r0, r2
 800343c:	f001 feca 	bl	80051d4 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800344c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003450:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003464:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800347a:	edd7 7a07 	vldr	s15, [r7, #28]
 800347e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80034a6:	eef0 0a47 	vmov.f32	s1, s14
 80034aa:	eeb0 0a67 	vmov.f32	s0, s15
 80034ae:	f001 fe0d 	bl	80050cc <fast_fminf>
 80034b2:	eeb0 7a40 	vmov.f32	s14, s0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80034bc:	eef1 7a67 	vneg.f32	s15, s15
 80034c0:	eef0 0a67 	vmov.f32	s1, s15
 80034c4:	eeb0 0a47 	vmov.f32	s0, s14
 80034c8:	f001 fde4 	bl	8005094 <fast_fmaxf>
 80034cc:	eef0 7a40 	vmov.f32	s15, s0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80034e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800350a:	eef0 0a47 	vmov.f32	s1, s14
 800350e:	eeb0 0a67 	vmov.f32	s0, s15
 8003512:	f001 fddb 	bl	80050cc <fast_fminf>
 8003516:	eeb0 7a40 	vmov.f32	s14, s0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003520:	eef1 7a67 	vneg.f32	s15, s15
 8003524:	eef0 0a67 	vmov.f32	s1, s15
 8003528:	eeb0 0a47 	vmov.f32	s0, s14
 800352c:	f001 fdb2 	bl	8005094 <fast_fmaxf>
 8003530:	eef0 7a40 	vmov.f32	s15, s0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	eeb0 0a67 	vmov.f32	s0, s15
 8003562:	f00f fb0d 	bl	8012b80 <sqrtf>
 8003566:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003570:	edd7 7a06 	vldr	s15, [r7, #24]
 8003574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800357e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003582:	edd7 7a04 	vldr	s15, [r7, #16]
 8003586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80035a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80035aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80035c4:	eef0 0a47 	vmov.f32	s1, s14
 80035c8:	eeb0 0a67 	vmov.f32	s0, s15
 80035cc:	f001 fd7e 	bl	80050cc <fast_fminf>
 80035d0:	eeb0 7a40 	vmov.f32	s14, s0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80035da:	eef1 7a67 	vneg.f32	s15, s15
 80035de:	eef0 0a67 	vmov.f32	s1, s15
 80035e2:	eeb0 0a47 	vmov.f32	s0, s14
 80035e6:	f001 fd55 	bl	8005094 <fast_fmaxf>
 80035ea:	eef0 7a40 	vmov.f32	s15, s0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003618:	eeb0 0a67 	vmov.f32	s0, s15
 800361c:	f00f fab0 	bl	8012b80 <sqrtf>
 8003620:	eef0 7a40 	vmov.f32	s15, s0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003630:	edd7 0a03 	vldr	s1, [r7, #12]
 8003634:	eeb0 0a67 	vmov.f32	s0, s15
 8003638:	f001 fd48 	bl	80050cc <fast_fminf>
 800363c:	eeb0 7a40 	vmov.f32	s14, s0
 8003640:	edd7 7a03 	vldr	s15, [r7, #12]
 8003644:	eef1 7a67 	vneg.f32	s15, s15
 8003648:	eef0 0a67 	vmov.f32	s1, s15
 800364c:	eeb0 0a47 	vmov.f32	s0, s14
 8003650:	f001 fd20 	bl	8005094 <fast_fmaxf>
 8003654:	eef0 7a40 	vmov.f32	s15, s0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003670:	eeb0 0a67 	vmov.f32	s0, s15
 8003674:	4610      	mov	r0, r2
 8003676:	f001 fdad 	bl	80051d4 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	e00d      	b.n	80036a0 <commutate+0x39c>
 8003684:	20000624 	.word	0x20000624
 8003688:	3f666666 	.word	0x3f666666
 800368c:	3dcccccd 	.word	0x3dcccccd
 8003690:	3f933333 	.word	0x3f933333
 8003694:	3f70a3d7 	.word	0x3f70a3d7
 8003698:	3f13cd3a 	.word	0x3f13cd3a
 800369c:	381d4951 	.word	0x381d4951
 80036a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80036a4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800369c <commutate+0x398>
 80036a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	336c      	adds	r3, #108	; 0x6c
 80036cc:	461a      	mov	r2, r3
 80036ce:	eeb0 1a66 	vmov.f32	s2, s13
 80036d2:	eef0 0a47 	vmov.f32	s1, s14
 80036d6:	eeb0 0a67 	vmov.f32	s0, s15
 80036da:	f7ff fa63 	bl	8002ba4 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3360      	adds	r3, #96	; 0x60
 8003706:	461a      	mov	r2, r3
 8003708:	eef0 1a46 	vmov.f32	s3, s12
 800370c:	eeb0 1a66 	vmov.f32	s2, s13
 8003710:	eef0 0a47 	vmov.f32	s1, s14
 8003714:	eeb0 0a67 	vmov.f32	s0, s15
 8003718:	f7ff fb58 	bl	8002dcc <svm>

       set_dtc(controller);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff f8f1 	bl	8002904 <set_dtc>

    }
 8003722:	bf00      	nop
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop

0800372c <torque_control>:


void torque_control(ControllerStruct *controller){
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003746:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800374a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800376a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800376e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003776:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <torque_control+0xb0>)
 800377c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <torque_control+0xb0>)
 8003782:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	ed97 7a03 	vldr	s14, [r7, #12]
 800378e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003798:	eef0 0a67 	vmov.f32	s1, s15
 800379c:	eeb0 0a66 	vmov.f32	s0, s13
 80037a0:	f001 fc94 	bl	80050cc <fast_fminf>
 80037a4:	eeb0 7a40 	vmov.f32	s14, s0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80037ae:	eef1 7a67 	vneg.f32	s15, s15
 80037b2:	eef0 0a67 	vmov.f32	s1, s15
 80037b6:	eeb0 0a47 	vmov.f32	s0, s14
 80037ba:	f001 fc6b 	bl	8005094 <fast_fmaxf>
 80037be:	eef0 7a40 	vmov.f32	s15, s0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000624 	.word	0x20000624

080037e0 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <run_fsm>:
#include "drv8323.h"

#define DISABLE_MOTOR HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
#define ENABLE_MOTOR HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);

 void run_fsm(FSMStruct * fsmstate){
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af02      	add	r7, sp, #8
 8003836:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	785a      	ldrb	r2, [r3, #1]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d00d      	beq.n	8003860 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f941 	bl	8003acc <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	78db      	ldrb	r3, [r3, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	785a      	ldrb	r2, [r3, #1]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8d2 	bl	8003a04 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b06      	cmp	r3, #6
 8003866:	f200 80b8 	bhi.w	80039da <run_fsm+0x1aa>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <run_fsm+0x40>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	080039d9 	.word	0x080039d9
 8003874:	0800388d 	.word	0x0800388d
 8003878:	0800398d 	.word	0x0800398d
 800387c:	080039db 	.word	0x080039db
 8003880:	080039d9 	.word	0x080039d9
 8003884:	080039cf 	.word	0x080039cf
 8003888:	080039d9 	.word	0x080039d9
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 800388c:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <run_fsm+0x1b4>)
 800388e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003896:	4b54      	ldr	r3, [pc, #336]	; (80039e8 <run_fsm+0x1b8>)
 8003898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800389c:	4a51      	ldr	r2, [pc, #324]	; (80039e4 <run_fsm+0x1b4>)
 800389e:	4952      	ldr	r1, [pc, #328]	; (80039e8 <run_fsm+0x1b8>)
 80038a0:	4852      	ldr	r0, [pc, #328]	; (80039ec <run_fsm+0x1bc>)
 80038a2:	f7fe f83f 	bl	8001924 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 80038a6:	e098      	b.n	80039da <run_fsm+0x1aa>
			 else if(!comm_encoder_cal.done_cal){
 80038a8:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <run_fsm+0x1b4>)
 80038aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d108      	bne.n	80038c4 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80038b2:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <run_fsm+0x1b8>)
 80038b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038b8:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <run_fsm+0x1b4>)
 80038ba:	494b      	ldr	r1, [pc, #300]	; (80039e8 <run_fsm+0x1b8>)
 80038bc:	484b      	ldr	r0, [pc, #300]	; (80039ec <run_fsm+0x1bc>)
 80038be:	f7fe f939 	bl	8001b34 <calibrate_encoder>
			 break;
 80038c2:	e08a      	b.n	80039da <run_fsm+0x1aa>
				 E_ZERO = comm_encoder_cal.ezero;
 80038c4:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <run_fsm+0x1b4>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4a49      	ldr	r2, [pc, #292]	; (80039f0 <run_fsm+0x1c0>)
 80038ca:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80038cc:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <run_fsm+0x1c0>)
 80038ce:	695c      	ldr	r4, [r3, #20]
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <run_fsm+0x1bc>)
 80038d2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80038d6:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <run_fsm+0x1c0>)
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	425b      	negs	r3, r3
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80039f4 <run_fsm+0x1c4>
 80038ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80038f4:	eeb0 0a47 	vmov.f32	s0, s14
 80038f8:	f00f f922 	bl	8012b40 <fmodf>
 80038fc:	eef0 7a40 	vmov.f32	s15, s0
 8003900:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80039f8 <run_fsm+0x1c8>
 8003904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003908:	ee17 0a90 	vmov	r0, s15
 800390c:	f7fc fe44 	bl	8000598 <__aeabi_f2d>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4621      	mov	r1, r4
 8003916:	4839      	ldr	r0, [pc, #228]	; (80039fc <run_fsm+0x1cc>)
 8003918:	f00b f9a4 	bl	800ec64 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 800391c:	4b33      	ldr	r3, [pc, #204]	; (80039ec <run_fsm+0x1bc>)
 800391e:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <run_fsm+0x1b4>)
 8003920:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003924:	33dc      	adds	r3, #220	; 0xdc
 8003926:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 800392a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392e:	4618      	mov	r0, r3
 8003930:	f00a fb08 	bl	800df44 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003934:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <run_fsm+0x1c0>)
 8003936:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <run_fsm+0x1b4>)
 8003938:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800393c:	3318      	adds	r3, #24
 800393e:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003946:	4618      	mov	r0, r3
 8003948:	f00a fafc 	bl	800df44 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <run_fsm+0x1d0>)
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	9200      	str	r2, [sp, #0]
 8003952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003954:	f001 ff10 	bl	8005778 <preference_writer_ready>
 8003958:	4603      	mov	r3, r0
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <run_fsm+0x13a>
 8003964:	4826      	ldr	r0, [pc, #152]	; (8003a00 <run_fsm+0x1d0>)
 8003966:	f001 fef8 	bl	800575a <preference_writer_open>
				 preference_writer_flush(&prefs);
 800396a:	4825      	ldr	r0, [pc, #148]	; (8003a00 <run_fsm+0x1d0>)
 800396c:	f001 ff12 	bl	8005794 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003970:	4823      	ldr	r0, [pc, #140]	; (8003a00 <run_fsm+0x1d0>)
 8003972:	f001 ff89 	bl	8005888 <preference_writer_close>
				 preference_writer_load(prefs);
 8003976:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <run_fsm+0x1d0>)
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	9200      	str	r2, [sp, #0]
 800397c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800397e:	f001 ff43 	bl	8005808 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003982:	211b      	movs	r1, #27
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f8f9 	bl	8003b7c <update_fsm>
			 break;
 800398a:	e026      	b.n	80039da <run_fsm+0x1aa>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <run_fsm+0x1c0>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	dd0a      	ble.n	80039aa <run_fsm+0x17a>
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <run_fsm+0x1b8>)
 8003996:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <run_fsm+0x1c0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	429a      	cmp	r2, r3
 80039a0:	dd03      	ble.n	80039aa <run_fsm+0x17a>
				 zero_commands(&controller);
 80039a2:	4811      	ldr	r0, [pc, #68]	; (80039e8 <run_fsm+0x1b8>)
 80039a4:	f7ff ff1c 	bl	80037e0 <zero_commands>
 80039a8:	e009      	b.n	80039be <run_fsm+0x18e>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 80039aa:	480f      	ldr	r0, [pc, #60]	; (80039e8 <run_fsm+0x1b8>)
 80039ac:	f7ff febe 	bl	800372c <torque_control>
				 field_weaken(&controller);
 80039b0:	480d      	ldr	r0, [pc, #52]	; (80039e8 <run_fsm+0x1b8>)
 80039b2:	f7ff fc33 	bl	800321c <field_weaken>
				 commutate(&controller, &comm_encoder);
 80039b6:	490d      	ldr	r1, [pc, #52]	; (80039ec <run_fsm+0x1bc>)
 80039b8:	480b      	ldr	r0, [pc, #44]	; (80039e8 <run_fsm+0x1b8>)
 80039ba:	f7ff fca3 	bl	8003304 <commutate>
			 }
			 controller.timeout ++;
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <run_fsm+0x1b8>)
 80039c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <run_fsm+0x1b8>)
 80039c8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 80039cc:	e005      	b.n	80039da <run_fsm+0x1aa>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 80039ce:	2164      	movs	r1, #100	; 0x64
 80039d0:	4806      	ldr	r0, [pc, #24]	; (80039ec <run_fsm+0x1bc>)
 80039d2:	f001 fe6b 	bl	80056ac <ps_print>
			 break;
 80039d6:	e000      	b.n	80039da <run_fsm+0x1aa>
			 break;
 80039d8:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000cf0 	.word	0x20000cf0
 80039e8:	20000700 	.word	0x20000700
 80039ec:	20000a08 	.word	0x20000a08
 80039f0:	200006c4 	.word	0x200006c4
 80039f4:	46800000 	.word	0x46800000
 80039f8:	40c90fdb 	.word	0x40c90fdb
 80039fc:	08013260 	.word	0x08013260
 8003a00:	200006ec 	.word	0x200006ec

08003a04 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d84b      	bhi.n	8003aac <fsm_enter_state+0xa8>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <fsm_enter_state+0x18>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a35 	.word	0x08003a35
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	08003aad 	.word	0x08003aad
 8003a2c:	08003a3b 	.word	0x08003a3b
 8003a30:	08003aab 	.word	0x08003aab
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003a34:	f000 f978 	bl	8003d28 <enter_menu_state>
				break;
 8003a38:	e038      	b.n	8003aac <fsm_enter_state+0xa8>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003a3a:	f000 f9a1 	bl	8003d80 <enter_setup_state>
				break;
 8003a3e:	e035      	b.n	8003aac <fsm_enter_state+0xa8>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
				// printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003a40:	2201      	movs	r2, #1
 8003a42:	2120      	movs	r1, #32
 8003a44:	481b      	ldr	r0, [pc, #108]	; (8003ab4 <fsm_enter_state+0xb0>)
 8003a46:	f005 f9e5 	bl	8008e14 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003a4a:	481b      	ldr	r0, [pc, #108]	; (8003ab8 <fsm_enter_state+0xb4>)
 8003a4c:	f7ff fb72 	bl	8003134 <reset_foc>
				drv_enable_gd(drv);
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <fsm_enter_state+0xb8>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4611      	mov	r1, r2
 8003a56:	889a      	ldrh	r2, [r3, #4]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f362 030f 	bfi	r3, r2, #0, #16
 8003a5e:	4608      	mov	r0, r1
 8003a60:	4619      	mov	r1, r3
 8003a62:	f7fe fcb8 	bl	80023d6 <drv_enable_gd>
				break;
 8003a66:	e021      	b.n	8003aac <fsm_enter_state+0xa8>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <fsm_enter_state+0xbc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <fsm_enter_state+0xbc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <fsm_enter_state+0xbc>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <fsm_enter_state+0xc0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <fsm_enter_state+0xc4>)
 8003a8e:	f00a fa67 	bl	800df60 <memset>
				drv_enable_gd(drv);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <fsm_enter_state+0xb8>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4611      	mov	r1, r2
 8003a98:	889a      	ldrh	r2, [r3, #4]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f362 030f 	bfi	r3, r2, #0, #16
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7fe fc97 	bl	80023d6 <drv_enable_gd>
				break;
 8003aa8:	e000      	b.n	8003aac <fsm_enter_state+0xa8>
				break;
 8003aaa:	bf00      	nop

		}
 }
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	48000800 	.word	0x48000800
 8003ab8:	20000700 	.word	0x20000700
 8003abc:	20000ce8 	.word	0x20000ce8
 8003ac0:	20000cf0 	.word	0x20000cf0
 8003ac4:	20000a08 	.word	0x20000a08
 8003ac8:	20000ae4 	.word	0x20000ae4

08003acc <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d844      	bhi.n	8003b66 <fsm_exit_state+0x9a>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <fsm_exit_state+0x18>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003afd 	.word	0x08003afd
 8003ae8:	08003b49 	.word	0x08003b49
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b67 	.word	0x08003b67
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b0d 	.word	0x08003b0d
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	70da      	strb	r2, [r3, #3]
				break;
 8003b02:	e030      	b.n	8003b66 <fsm_exit_state+0x9a>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	70da      	strb	r2, [r3, #3]
				break;
 8003b0a:	e02c      	b.n	8003b66 <fsm_exit_state+0x9a>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	70da      	strb	r2, [r3, #3]
				break;
 8003b12:	e028      	b.n	8003b66 <fsm_exit_state+0x9a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <fsm_exit_state+0xa4>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	889a      	ldrh	r2, [r3, #4]
 8003b22:	2300      	movs	r3, #0
 8003b24:	f362 030f 	bfi	r3, r2, #0, #16
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f7fe fc6d 	bl	800240a <drv_disable_gd>
					reset_foc(&controller);
 8003b30:	4810      	ldr	r0, [pc, #64]	; (8003b74 <fsm_exit_state+0xa8>)
 8003b32:	f7ff faff 	bl	8003134 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003b36:	2200      	movs	r2, #0
 8003b38:	2120      	movs	r1, #32
 8003b3a:	480f      	ldr	r0, [pc, #60]	; (8003b78 <fsm_exit_state+0xac>)
 8003b3c:	f005 f96a 	bl	8008e14 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <fsm_exit_state+0xa8>)
 8003b42:	f7ff fe4d 	bl	80037e0 <zero_commands>
				break;
 8003b46:	e00e      	b.n	8003b66 <fsm_exit_state+0x9a>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <fsm_exit_state+0xa4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	889a      	ldrh	r2, [r3, #4]
 8003b50:	2300      	movs	r3, #0
 8003b52:	f362 030f 	bfi	r3, r2, #0, #16
 8003b56:	4608      	mov	r0, r1
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f7fe fc56 	bl	800240a <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	70da      	strb	r2, [r3, #3]
				break;
 8003b64:	bf00      	nop
		}

 }
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000ce8 	.word	0x20000ce8
 8003b74:	20000700 	.word	0x20000700
 8003b78:	48000800 	.word	0x48000800

08003b7c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	2b1b      	cmp	r3, #27
 8003b8c:	d106      	bne.n	8003b9c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	70da      	strb	r2, [r3, #3]
		return;
 8003b9a:	e0b7      	b.n	8003d0c <update_fsm+0x190>
	}
	switch(fsmstate->state){
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	f200 80b3 	bhi.w	8003d0c <update_fsm+0x190>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <update_fsm+0x30>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bc5 	.word	0x08003bc5
 8003bb0:	08003d0d 	.word	0x08003d0d
 8003bb4:	08003d0d 	.word	0x08003d0d
 8003bb8:	08003d0d 	.word	0x08003d0d
 8003bbc:	08003cd1 	.word	0x08003cd1
 8003bc0:	08003d0d 	.word	0x08003d0d
		case MENU_MODE:
			switch (fsm_input){
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	3b63      	subs	r3, #99	; 0x63
 8003bc8:	2b17      	cmp	r3, #23
 8003bca:	f200 809e 	bhi.w	8003d0a <update_fsm+0x18e>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <update_fsm+0x58>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c35 	.word	0x08003c35
 8003bd8:	08003d0b 	.word	0x08003d0b
 8003bdc:	08003c51 	.word	0x08003c51
 8003be0:	08003d0b 	.word	0x08003d0b
 8003be4:	08003d0b 	.word	0x08003d0b
 8003be8:	08003d0b 	.word	0x08003d0b
 8003bec:	08003d0b 	.word	0x08003d0b
 8003bf0:	08003d0b 	.word	0x08003d0b
 8003bf4:	08003d0b 	.word	0x08003d0b
 8003bf8:	08003d0b 	.word	0x08003d0b
 8003bfc:	08003c43 	.word	0x08003c43
 8003c00:	08003d0b 	.word	0x08003d0b
 8003c04:	08003d0b 	.word	0x08003d0b
 8003c08:	08003d0b 	.word	0x08003d0b
 8003c0c:	08003d0b 	.word	0x08003d0b
 8003c10:	08003d0b 	.word	0x08003d0b
 8003c14:	08003c5f 	.word	0x08003c5f
 8003c18:	08003d0b 	.word	0x08003d0b
 8003c1c:	08003d0b 	.word	0x08003d0b
 8003c20:	08003d0b 	.word	0x08003d0b
 8003c24:	08003d0b 	.word	0x08003d0b
 8003c28:	08003d0b 	.word	0x08003d0b
 8003c2c:	08003d0b 	.word	0x08003d0b
 8003c30:	08003c6d 	.word	0x08003c6d
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	70da      	strb	r2, [r3, #3]
					break;
 8003c40:	e045      	b.n	8003cce <update_fsm+0x152>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	70da      	strb	r2, [r3, #3]
					break;
 8003c4e:	e03e      	b.n	8003cce <update_fsm+0x152>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2205      	movs	r2, #5
 8003c54:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	70da      	strb	r2, [r3, #3]
					break;
 8003c5c:	e037      	b.n	8003cce <update_fsm+0x152>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2204      	movs	r2, #4
 8003c62:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	70da      	strb	r2, [r3, #3]
					break;
 8003c6a:	e030      	b.n	8003cce <update_fsm+0x152>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003c6c:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <update_fsm+0x198>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003c74:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003d18 <update_fsm+0x19c>
 8003c78:	4826      	ldr	r0, [pc, #152]	; (8003d14 <update_fsm+0x198>)
 8003c7a:	f001 fbc7 	bl	800540c <ps_sample>
					int zero_count = comm_encoder.count;
 8003c7e:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <update_fsm+0x198>)
 8003c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c82:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003c84:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <update_fsm+0x1a0>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs))
 8003c8a:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <update_fsm+0x1a4>)
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	9200      	str	r2, [sp, #0]
 8003c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c92:	f001 fd71 	bl	8005778 <preference_writer_ready>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f083 0301 	eor.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <update_fsm+0x12c>
					{
						preference_writer_open(&prefs);
 8003ca2:	481f      	ldr	r0, [pc, #124]	; (8003d20 <update_fsm+0x1a4>)
 8003ca4:	f001 fd59 	bl	800575a <preference_writer_open>
					}
					preference_writer_flush(&prefs);
 8003ca8:	481d      	ldr	r0, [pc, #116]	; (8003d20 <update_fsm+0x1a4>)
 8003caa:	f001 fd73 	bl	8005794 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003cae:	481c      	ldr	r0, [pc, #112]	; (8003d20 <update_fsm+0x1a4>)
 8003cb0:	f001 fdea 	bl	8005888 <preference_writer_close>
					preference_writer_load(prefs);
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <update_fsm+0x1a4>)
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	9200      	str	r2, [sp, #0]
 8003cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbc:	f001 fda4 	bl	8005808 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <update_fsm+0x1a0>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4817      	ldr	r0, [pc, #92]	; (8003d24 <update_fsm+0x1a8>)
 8003cc8:	f00a ffcc 	bl	800ec64 <iprintf>
					break;
 8003ccc:	bf00      	nop
			}
			break;
 8003cce:	e01c      	b.n	8003d0a <update_fsm+0x18e>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b0d      	cmp	r3, #13
 8003cd4:	d103      	bne.n	8003cde <update_fsm+0x162>
				process_user_input(fsmstate);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f9c8 	bl	800406c <process_user_input>
				break;
 8003cdc:	e016      	b.n	8003d0c <update_fsm+0x190>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7b1b      	ldrb	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <update_fsm+0x172>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	735a      	strb	r2, [r3, #13]
 8003cec:	e006      	b.n	8003cfc <update_fsm+0x180>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7b1b      	ldrb	r3, [r3, #12]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7b1b      	ldrb	r3, [r3, #12]
 8003d00:	3301      	adds	r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003d08:	e000      	b.n	8003d0c <update_fsm+0x190>
			break;
 8003d0a:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000a08 	.word	0x20000a08
 8003d18:	37d1b717 	.word	0x37d1b717
 8003d1c:	200006c4 	.word	0x200006c4
 8003d20:	200006ec 	.word	0x200006ec
 8003d24:	08013274 	.word	0x08013274

08003d28 <enter_menu_state>:


 void enter_menu_state(void){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003d2c:	480c      	ldr	r0, [pc, #48]	; (8003d60 <enter_menu_state+0x38>)
 8003d2e:	f00a ff99 	bl	800ec64 <iprintf>
	    printf(" Commands:\n\r");
 8003d32:	480c      	ldr	r0, [pc, #48]	; (8003d64 <enter_menu_state+0x3c>)
 8003d34:	f00a ff96 	bl	800ec64 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003d38:	480b      	ldr	r0, [pc, #44]	; (8003d68 <enter_menu_state+0x40>)
 8003d3a:	f00a ff93 	bl	800ec64 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003d3e:	480b      	ldr	r0, [pc, #44]	; (8003d6c <enter_menu_state+0x44>)
 8003d40:	f00a ff90 	bl	800ec64 <iprintf>
	    printf(" s - Setup\n\r");
 8003d44:	480a      	ldr	r0, [pc, #40]	; (8003d70 <enter_menu_state+0x48>)
 8003d46:	f00a ff8d 	bl	800ec64 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003d4a:	480a      	ldr	r0, [pc, #40]	; (8003d74 <enter_menu_state+0x4c>)
 8003d4c:	f00a ff8a 	bl	800ec64 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003d50:	4809      	ldr	r0, [pc, #36]	; (8003d78 <enter_menu_state+0x50>)
 8003d52:	f00a ff87 	bl	800ec64 <iprintf>
	    //printf(" r - Reboot Controller\n\r");
	    printf(" esc - Exit to Menu\n\r");
 8003d56:	4809      	ldr	r0, [pc, #36]	; (8003d7c <enter_menu_state+0x54>)
 8003d58:	f00a ff84 	bl	800ec64 <iprintf>

	    //gpio.led->write(0);
 }
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0801329c 	.word	0x0801329c
 8003d64:	080132a4 	.word	0x080132a4
 8003d68:	080132b4 	.word	0x080132b4
 8003d6c:	080132c8 	.word	0x080132c8
 8003d70:	080132e4 	.word	0x080132e4
 8003d74:	080132f4 	.word	0x080132f4
 8003d78:	0801330c 	.word	0x0801330c
 8003d7c:	08013328 	.word	0x08013328

08003d80 <enter_setup_state>:

 void enter_setup_state(void){
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003d86:	487d      	ldr	r0, [pc, #500]	; (8003f7c <enter_setup_state+0x1fc>)
 8003d88:	f00a ff6c 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003d8c:	4b7c      	ldr	r3, [pc, #496]	; (8003f80 <enter_setup_state+0x200>)
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <enter_setup_state+0x204>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <enter_setup_state+0x208>)
 8003d96:	4a7d      	ldr	r2, [pc, #500]	; (8003f8c <enter_setup_state+0x20c>)
 8003d98:	497d      	ldr	r1, [pc, #500]	; (8003f90 <enter_setup_state+0x210>)
 8003d9a:	487e      	ldr	r0, [pc, #504]	; (8003f94 <enter_setup_state+0x214>)
 8003d9c:	f00a ff62 	bl	800ec64 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003da0:	487d      	ldr	r0, [pc, #500]	; (8003f98 <enter_setup_state+0x218>)
 8003da2:	f00a ffe5 	bl	800ed70 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003da6:	4b7d      	ldr	r3, [pc, #500]	; (8003f9c <enter_setup_state+0x21c>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fbf4 	bl	8000598 <__aeabi_f2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003db8:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <enter_setup_state+0x220>)
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4b79      	ldr	r3, [pc, #484]	; (8003fa4 <enter_setup_state+0x224>)
 8003dbe:	4a7a      	ldr	r2, [pc, #488]	; (8003fa8 <enter_setup_state+0x228>)
 8003dc0:	497a      	ldr	r1, [pc, #488]	; (8003fac <enter_setup_state+0x22c>)
 8003dc2:	487b      	ldr	r0, [pc, #492]	; (8003fb0 <enter_setup_state+0x230>)
 8003dc4:	f00a ff4e 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003dc8:	4b74      	ldr	r3, [pc, #464]	; (8003f9c <enter_setup_state+0x21c>)
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fbe3 	bl	8000598 <__aeabi_f2d>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dda:	4b71      	ldr	r3, [pc, #452]	; (8003fa0 <enter_setup_state+0x220>)
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <enter_setup_state+0x224>)
 8003de0:	4a74      	ldr	r2, [pc, #464]	; (8003fb4 <enter_setup_state+0x234>)
 8003de2:	4975      	ldr	r1, [pc, #468]	; (8003fb8 <enter_setup_state+0x238>)
 8003de4:	4875      	ldr	r0, [pc, #468]	; (8003fbc <enter_setup_state+0x23c>)
 8003de6:	f00a ff3d 	bl	800ec64 <iprintf>
	    printf("\r\n Control:\r\n");
 8003dea:	4875      	ldr	r0, [pc, #468]	; (8003fc0 <enter_setup_state+0x240>)
 8003dec:	f00a ffc0 	bl	800ed70 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <enter_setup_state+0x21c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc fbcf 	bl	8000598 <__aeabi_f2d>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <enter_setup_state+0x244>)
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4b70      	ldr	r3, [pc, #448]	; (8003fc8 <enter_setup_state+0x248>)
 8003e08:	4a70      	ldr	r2, [pc, #448]	; (8003fcc <enter_setup_state+0x24c>)
 8003e0a:	4971      	ldr	r1, [pc, #452]	; (8003fd0 <enter_setup_state+0x250>)
 8003e0c:	4871      	ldr	r0, [pc, #452]	; (8003fd4 <enter_setup_state+0x254>)
 8003e0e:	f00a ff29 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003e12:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <enter_setup_state+0x21c>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc fbbe 	bl	8000598 <__aeabi_f2d>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e24:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <enter_setup_state+0x258>)
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4b6c      	ldr	r3, [pc, #432]	; (8003fdc <enter_setup_state+0x25c>)
 8003e2a:	4a6d      	ldr	r2, [pc, #436]	; (8003fe0 <enter_setup_state+0x260>)
 8003e2c:	496d      	ldr	r1, [pc, #436]	; (8003fe4 <enter_setup_state+0x264>)
 8003e2e:	4869      	ldr	r0, [pc, #420]	; (8003fd4 <enter_setup_state+0x254>)
 8003e30:	f00a ff18 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <enter_setup_state+0x21c>)
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fbad 	bl	8000598 <__aeabi_f2d>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e46:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <enter_setup_state+0x220>)
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	4b55      	ldr	r3, [pc, #340]	; (8003fa0 <enter_setup_state+0x220>)
 8003e4c:	4a66      	ldr	r2, [pc, #408]	; (8003fe8 <enter_setup_state+0x268>)
 8003e4e:	4967      	ldr	r1, [pc, #412]	; (8003fec <enter_setup_state+0x26c>)
 8003e50:	4860      	ldr	r0, [pc, #384]	; (8003fd4 <enter_setup_state+0x254>)
 8003e52:	f00a ff07 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003e56:	4b51      	ldr	r3, [pc, #324]	; (8003f9c <enter_setup_state+0x21c>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb9c 	bl	8000598 <__aeabi_f2d>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e68:	4b4d      	ldr	r3, [pc, #308]	; (8003fa0 <enter_setup_state+0x220>)
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <enter_setup_state+0x220>)
 8003e6e:	4a60      	ldr	r2, [pc, #384]	; (8003ff0 <enter_setup_state+0x270>)
 8003e70:	4960      	ldr	r1, [pc, #384]	; (8003ff4 <enter_setup_state+0x274>)
 8003e72:	4858      	ldr	r0, [pc, #352]	; (8003fd4 <enter_setup_state+0x254>)
 8003e74:	f00a fef6 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003e78:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <enter_setup_state+0x21c>)
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fb8b 	bl	8000598 <__aeabi_f2d>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <enter_setup_state+0x278>)
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <enter_setup_state+0x25c>)
 8003e90:	4a5a      	ldr	r2, [pc, #360]	; (8003ffc <enter_setup_state+0x27c>)
 8003e92:	495b      	ldr	r1, [pc, #364]	; (8004000 <enter_setup_state+0x280>)
 8003e94:	484f      	ldr	r0, [pc, #316]	; (8003fd4 <enter_setup_state+0x254>)
 8003e96:	f00a fee5 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003e9a:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <enter_setup_state+0x21c>)
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fb7a 	bl	8000598 <__aeabi_f2d>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <enter_setup_state+0x284>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <enter_setup_state+0x25c>)
 8003eb2:	4a55      	ldr	r2, [pc, #340]	; (8004008 <enter_setup_state+0x288>)
 8003eb4:	4955      	ldr	r1, [pc, #340]	; (800400c <enter_setup_state+0x28c>)
 8003eb6:	4847      	ldr	r0, [pc, #284]	; (8003fd4 <enter_setup_state+0x254>)
 8003eb8:	f00a fed4 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <enter_setup_state+0x21c>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fc fb69 	bl	8000598 <__aeabi_f2d>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ece:	4b50      	ldr	r3, [pc, #320]	; (8004010 <enter_setup_state+0x290>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <enter_setup_state+0x25c>)
 8003ed4:	4a4f      	ldr	r2, [pc, #316]	; (8004014 <enter_setup_state+0x294>)
 8003ed6:	4950      	ldr	r1, [pc, #320]	; (8004018 <enter_setup_state+0x298>)
 8003ed8:	483e      	ldr	r0, [pc, #248]	; (8003fd4 <enter_setup_state+0x254>)
 8003eda:	f00a fec3 	bl	800ec64 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <enter_setup_state+0x21c>)
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc fb58 	bl	8000598 <__aeabi_f2d>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ef0:	4b4a      	ldr	r3, [pc, #296]	; (800401c <enter_setup_state+0x29c>)
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <enter_setup_state+0x25c>)
 8003ef6:	4a4a      	ldr	r2, [pc, #296]	; (8004020 <enter_setup_state+0x2a0>)
 8003ef8:	494a      	ldr	r1, [pc, #296]	; (8004024 <enter_setup_state+0x2a4>)
 8003efa:	4836      	ldr	r0, [pc, #216]	; (8003fd4 <enter_setup_state+0x254>)
 8003efc:	f00a feb2 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <enter_setup_state+0x21c>)
 8003f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc fb47 	bl	8000598 <__aeabi_f2d>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f12:	4b45      	ldr	r3, [pc, #276]	; (8004028 <enter_setup_state+0x2a8>)
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <enter_setup_state+0x25c>)
 8003f18:	4a44      	ldr	r2, [pc, #272]	; (800402c <enter_setup_state+0x2ac>)
 8003f1a:	4945      	ldr	r1, [pc, #276]	; (8004030 <enter_setup_state+0x2b0>)
 8003f1c:	482d      	ldr	r0, [pc, #180]	; (8003fd4 <enter_setup_state+0x254>)
 8003f1e:	f00a fea1 	bl	800ec64 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003f22:	4844      	ldr	r0, [pc, #272]	; (8004034 <enter_setup_state+0x2b4>)
 8003f24:	f00a ff24 	bl	800ed70 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003f28:	4b43      	ldr	r3, [pc, #268]	; (8004038 <enter_setup_state+0x2b8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	4b43      	ldr	r3, [pc, #268]	; (800403c <enter_setup_state+0x2bc>)
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <enter_setup_state+0x224>)
 8003f34:	4a42      	ldr	r2, [pc, #264]	; (8004040 <enter_setup_state+0x2c0>)
 8003f36:	4943      	ldr	r1, [pc, #268]	; (8004044 <enter_setup_state+0x2c4>)
 8003f38:	4843      	ldr	r0, [pc, #268]	; (8004048 <enter_setup_state+0x2c8>)
 8003f3a:	f00a fe93 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <enter_setup_state+0x2b8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	4b3d      	ldr	r3, [pc, #244]	; (800403c <enter_setup_state+0x2bc>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <enter_setup_state+0x224>)
 8003f4a:	4a40      	ldr	r2, [pc, #256]	; (800404c <enter_setup_state+0x2cc>)
 8003f4c:	4940      	ldr	r1, [pc, #256]	; (8004050 <enter_setup_state+0x2d0>)
 8003f4e:	483e      	ldr	r0, [pc, #248]	; (8004048 <enter_setup_state+0x2c8>)
 8003f50:	f00a fe88 	bl	800ec64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003f54:	4b38      	ldr	r3, [pc, #224]	; (8004038 <enter_setup_state+0x2b8>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <enter_setup_state+0x2d4>)
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <enter_setup_state+0x224>)
 8003f60:	4a3d      	ldr	r2, [pc, #244]	; (8004058 <enter_setup_state+0x2d8>)
 8003f62:	493e      	ldr	r1, [pc, #248]	; (800405c <enter_setup_state+0x2dc>)
 8003f64:	483e      	ldr	r0, [pc, #248]	; (8004060 <enter_setup_state+0x2e0>)
 8003f66:	f00a fe7d 	bl	800ec64 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003f6a:	483e      	ldr	r0, [pc, #248]	; (8004064 <enter_setup_state+0x2e4>)
 8003f6c:	f00a fe7a 	bl	800ec64 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003f70:	483d      	ldr	r0, [pc, #244]	; (8004068 <enter_setup_state+0x2e8>)
 8003f72:	f00a fe77 	bl	800ec64 <iprintf>
 }
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	08013340 	.word	0x08013340
 8003f80:	08013394 	.word	0x08013394
 8003f84:	080133a4 	.word	0x080133a4
 8003f88:	0801335c 	.word	0x0801335c
 8003f8c:	08013360 	.word	0x08013360
 8003f90:	0801336c 	.word	0x0801336c
 8003f94:	08013374 	.word	0x08013374
 8003f98:	080133a8 	.word	0x080133a8
 8003f9c:	20000624 	.word	0x20000624
 8003fa0:	080133e8 	.word	0x080133e8
 8003fa4:	080133b4 	.word	0x080133b4
 8003fa8:	080133b8 	.word	0x080133b8
 8003fac:	080133c4 	.word	0x080133c4
 8003fb0:	080133c8 	.word	0x080133c8
 8003fb4:	080133ec 	.word	0x080133ec
 8003fb8:	08013404 	.word	0x08013404
 8003fbc:	08013408 	.word	0x08013408
 8003fc0:	08013428 	.word	0x08013428
 8003fc4:	08013478 	.word	0x08013478
 8003fc8:	08013438 	.word	0x08013438
 8003fcc:	0801343c 	.word	0x0801343c
 8003fd0:	08013454 	.word	0x08013454
 8003fd4:	08013458 	.word	0x08013458
 8003fd8:	0801349c 	.word	0x0801349c
 8003fdc:	08013480 	.word	0x08013480
 8003fe0:	08013484 	.word	0x08013484
 8003fe4:	08013498 	.word	0x08013498
 8003fe8:	080134a4 	.word	0x080134a4
 8003fec:	080134c0 	.word	0x080134c0
 8003ff0:	080134c4 	.word	0x080134c4
 8003ff4:	080134e4 	.word	0x080134e4
 8003ff8:	08013508 	.word	0x08013508
 8003ffc:	080134e8 	.word	0x080134e8
 8004000:	08013504 	.word	0x08013504
 8004004:	08013534 	.word	0x08013534
 8004008:	08013510 	.word	0x08013510
 800400c:	08013530 	.word	0x08013530
 8004010:	08013554 	.word	0x08013554
 8004014:	08013538 	.word	0x08013538
 8004018:	08013550 	.word	0x08013550
 800401c:	08013578 	.word	0x08013578
 8004020:	0801355c 	.word	0x0801355c
 8004024:	08013574 	.word	0x08013574
 8004028:	0801359c 	.word	0x0801359c
 800402c:	08013580 	.word	0x08013580
 8004030:	08013598 	.word	0x08013598
 8004034:	080135a4 	.word	0x080135a4
 8004038:	200006c4 	.word	0x200006c4
 800403c:	080135dc 	.word	0x080135dc
 8004040:	080135b0 	.word	0x080135b0
 8004044:	080135b8 	.word	0x080135b8
 8004048:	080135bc 	.word	0x080135bc
 800404c:	080135e0 	.word	0x080135e0
 8004050:	080135ec 	.word	0x080135ec
 8004054:	08013630 	.word	0x08013630
 8004058:	080135f0 	.word	0x080135f0
 800405c:	08013610 	.word	0x08013610
 8004060:	08013614 	.word	0x08013614
 8004064:	08013638 	.word	0x08013638
 8004068:	08013684 	.word	0x08013684

0800406c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af02      	add	r7, sp, #8
 8004072:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7b5b      	ldrb	r3, [r3, #13]
 8004078:	3b61      	subs	r3, #97	; 0x61
 800407a:	2b17      	cmp	r3, #23
 800407c:	f200 8268 	bhi.w	8004550 <process_user_input+0x4e4>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <process_user_input+0x1c>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080042e7 	.word	0x080042e7
 800408c:	080040e9 	.word	0x080040e9
 8004090:	08004293 	.word	0x08004293
 8004094:	08004465 	.word	0x08004465
 8004098:	08004551 	.word	0x08004551
 800409c:	080041cd 	.word	0x080041cd
 80040a0:	0800433b 	.word	0x0800433b
 80040a4:	0800423f 	.word	0x0800423f
 80040a8:	0800413d 	.word	0x0800413d
 80040ac:	08004551 	.word	0x08004551
 80040b0:	0800437f 	.word	0x0800437f
 80040b4:	08004179 	.word	0x08004179
 80040b8:	0800415b 	.word	0x0800415b
 80040bc:	08004551 	.word	0x08004551
 80040c0:	08004551 	.word	0x08004551
 80040c4:	080044a9 	.word	0x080044a9
 80040c8:	08004551 	.word	0x08004551
 80040cc:	08004551 	.word	0x08004551
 80040d0:	08004551 	.word	0x08004551
 80040d4:	08004221 	.word	0x08004221
 80040d8:	08004551 	.word	0x08004551
 80040dc:	080044fd 	.word	0x080044fd
 80040e0:	08004551 	.word	0x08004551
 80040e4:	080043c3 	.word	0x080043c3
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f009 fef7 	bl	800dee0 <atof>
 80040f2:	ec53 2b10 	vmov	r2, r3, d0
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	f7fc fd9d 	bl	8000c38 <__aeabi_d2f>
 80040fe:	4603      	mov	r3, r0
 8004100:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8004408 <process_user_input+0x39c>
 8004104:	ee00 3a10 	vmov	s0, r3
 8004108:	f00e fc99 	bl	8012a3e <fminf>
 800410c:	eef0 7a40 	vmov.f32	s15, s0
 8004110:	eddf 0abe 	vldr	s1, [pc, #760]	; 800440c <process_user_input+0x3a0>
 8004114:	eeb0 0a67 	vmov.f32	s0, s15
 8004118:	f00e fc76 	bl	8012a08 <fmaxf>
 800411c:	eef0 7a40 	vmov.f32	s15, s0
 8004120:	4bbb      	ldr	r3, [pc, #748]	; (8004410 <process_user_input+0x3a4>)
 8004122:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8004126:	4bba      	ldr	r3, [pc, #744]	; (8004410 <process_user_input+0x3a4>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc fa34 	bl	8000598 <__aeabi_f2d>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	48b7      	ldr	r0, [pc, #732]	; (8004414 <process_user_input+0x3a8>)
 8004136:	f00a fd95 	bl	800ec64 <iprintf>
			 break;
 800413a:	e210      	b.n	800455e <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f009 fed0 	bl	800dee6 <atoi>
 8004146:	4603      	mov	r3, r0
 8004148:	4ab3      	ldr	r2, [pc, #716]	; (8004418 <process_user_input+0x3ac>)
 800414a:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 800414c:	4bb2      	ldr	r3, [pc, #712]	; (8004418 <process_user_input+0x3ac>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4619      	mov	r1, r3
 8004152:	48b2      	ldr	r0, [pc, #712]	; (800441c <process_user_input+0x3b0>)
 8004154:	f00a fd86 	bl	800ec64 <iprintf>
			 break;
 8004158:	e201      	b.n	800455e <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f009 fec1 	bl	800dee6 <atoi>
 8004164:	4603      	mov	r3, r0
 8004166:	4aac      	ldr	r2, [pc, #688]	; (8004418 <process_user_input+0x3ac>)
 8004168:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 800416a:	4bab      	ldr	r3, [pc, #684]	; (8004418 <process_user_input+0x3ac>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4619      	mov	r1, r3
 8004170:	48ab      	ldr	r0, [pc, #684]	; (8004420 <process_user_input+0x3b4>)
 8004172:	f00a fd77 	bl	800ec64 <iprintf>
			 break;
 8004176:	e1f2      	b.n	800455e <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f009 feaf 	bl	800dee0 <atof>
 8004182:	ec53 2b10 	vmov	r2, r3, d0
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	f7fc fd55 	bl	8000c38 <__aeabi_d2f>
 800418e:	4603      	mov	r3, r0
 8004190:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8004424 <process_user_input+0x3b8>
 8004194:	ee00 3a10 	vmov	s0, r3
 8004198:	f00e fc51 	bl	8012a3e <fminf>
 800419c:	eef0 7a40 	vmov.f32	s15, s0
 80041a0:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8004460 <process_user_input+0x3f4>
 80041a4:	eeb0 0a67 	vmov.f32	s0, s15
 80041a8:	f00e fc2e 	bl	8012a08 <fmaxf>
 80041ac:	eef0 7a40 	vmov.f32	s15, s0
 80041b0:	4b97      	ldr	r3, [pc, #604]	; (8004410 <process_user_input+0x3a4>)
 80041b2:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 80041b6:	4b96      	ldr	r3, [pc, #600]	; (8004410 <process_user_input+0x3a4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f9ec 	bl	8000598 <__aeabi_f2d>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4898      	ldr	r0, [pc, #608]	; (8004428 <process_user_input+0x3bc>)
 80041c6:	f00a fd4d 	bl	800ec64 <iprintf>
			 break;
 80041ca:	e1c8      	b.n	800455e <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f009 fe85 	bl	800dee0 <atof>
 80041d6:	ec53 2b10 	vmov	r2, r3, d0
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f7fc fd2b 	bl	8000c38 <__aeabi_d2f>
 80041e2:	4603      	mov	r3, r0
 80041e4:	eddf 0a91 	vldr	s1, [pc, #580]	; 800442c <process_user_input+0x3c0>
 80041e8:	ee00 3a10 	vmov	s0, r3
 80041ec:	f00e fc27 	bl	8012a3e <fminf>
 80041f0:	eef0 7a40 	vmov.f32	s15, s0
 80041f4:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8004460 <process_user_input+0x3f4>
 80041f8:	eeb0 0a67 	vmov.f32	s0, s15
 80041fc:	f00e fc04 	bl	8012a08 <fmaxf>
 8004200:	eef0 7a40 	vmov.f32	s15, s0
 8004204:	4b82      	ldr	r3, [pc, #520]	; (8004410 <process_user_input+0x3a4>)
 8004206:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800420a:	4b81      	ldr	r3, [pc, #516]	; (8004410 <process_user_input+0x3a4>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc f9c2 	bl	8000598 <__aeabi_f2d>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4885      	ldr	r0, [pc, #532]	; (8004430 <process_user_input+0x3c4>)
 800421a:	f00a fd23 	bl	800ec64 <iprintf>
			 break;
 800421e:	e19e      	b.n	800455e <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f009 fe5e 	bl	800dee6 <atoi>
 800422a:	4603      	mov	r3, r0
 800422c:	4a7a      	ldr	r2, [pc, #488]	; (8004418 <process_user_input+0x3ac>)
 800422e:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8004230:	4b79      	ldr	r3, [pc, #484]	; (8004418 <process_user_input+0x3ac>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4619      	mov	r1, r3
 8004236:	487f      	ldr	r0, [pc, #508]	; (8004434 <process_user_input+0x3c8>)
 8004238:	f00a fd14 	bl	800ec64 <iprintf>
			 break;
 800423c:	e18f      	b.n	800455e <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f009 fe4c 	bl	800dee0 <atof>
 8004248:	ec53 2b10 	vmov	r2, r3, d0
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	f7fc fcf2 	bl	8000c38 <__aeabi_d2f>
 8004254:	4603      	mov	r3, r0
 8004256:	eddf 0a78 	vldr	s1, [pc, #480]	; 8004438 <process_user_input+0x3cc>
 800425a:	ee00 3a10 	vmov	s0, r3
 800425e:	f00e fbee 	bl	8012a3e <fminf>
 8004262:	eef0 7a40 	vmov.f32	s15, s0
 8004266:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8004460 <process_user_input+0x3f4>
 800426a:	eeb0 0a67 	vmov.f32	s0, s15
 800426e:	f00e fbcb 	bl	8012a08 <fmaxf>
 8004272:	eef0 7a40 	vmov.f32	s15, s0
 8004276:	4b66      	ldr	r3, [pc, #408]	; (8004410 <process_user_input+0x3a4>)
 8004278:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 800427c:	4b64      	ldr	r3, [pc, #400]	; (8004410 <process_user_input+0x3a4>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc f989 	bl	8000598 <__aeabi_f2d>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	486c      	ldr	r0, [pc, #432]	; (800443c <process_user_input+0x3d0>)
 800428c:	f00a fcea 	bl	800ec64 <iprintf>
			 break;
 8004290:	e165      	b.n	800455e <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f009 fe22 	bl	800dee0 <atof>
 800429c:	ec53 2b10 	vmov	r2, r3, d0
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fc fcc8 	bl	8000c38 <__aeabi_d2f>
 80042a8:	4603      	mov	r3, r0
 80042aa:	eddf 0a65 	vldr	s1, [pc, #404]	; 8004440 <process_user_input+0x3d4>
 80042ae:	ee00 3a10 	vmov	s0, r3
 80042b2:	f00e fbc4 	bl	8012a3e <fminf>
 80042b6:	eef0 7a40 	vmov.f32	s15, s0
 80042ba:	eddf 0a69 	vldr	s1, [pc, #420]	; 8004460 <process_user_input+0x3f4>
 80042be:	eeb0 0a67 	vmov.f32	s0, s15
 80042c2:	f00e fba1 	bl	8012a08 <fmaxf>
 80042c6:	eef0 7a40 	vmov.f32	s15, s0
 80042ca:	4b51      	ldr	r3, [pc, #324]	; (8004410 <process_user_input+0x3a4>)
 80042cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 80042d0:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <process_user_input+0x3a4>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fc f95f 	bl	8000598 <__aeabi_f2d>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4859      	ldr	r0, [pc, #356]	; (8004444 <process_user_input+0x3d8>)
 80042e0:	f00a fcc0 	bl	800ec64 <iprintf>
			 break;
 80042e4:	e13b      	b.n	800455e <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f009 fdf8 	bl	800dee0 <atof>
 80042f0:	ec53 2b10 	vmov	r2, r3, d0
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	f7fc fc9e 	bl	8000c38 <__aeabi_d2f>
 80042fc:	4603      	mov	r3, r0
 80042fe:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004302:	ee00 3a10 	vmov	s0, r3
 8004306:	f00e fb9a 	bl	8012a3e <fminf>
 800430a:	eef0 7a40 	vmov.f32	s15, s0
 800430e:	eddf 0a54 	vldr	s1, [pc, #336]	; 8004460 <process_user_input+0x3f4>
 8004312:	eeb0 0a67 	vmov.f32	s0, s15
 8004316:	f00e fb77 	bl	8012a08 <fmaxf>
 800431a:	eef0 7a40 	vmov.f32	s15, s0
 800431e:	4b3c      	ldr	r3, [pc, #240]	; (8004410 <process_user_input+0x3a4>)
 8004320:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004324:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <process_user_input+0x3a4>)
 8004326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc f935 	bl	8000598 <__aeabi_f2d>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4845      	ldr	r0, [pc, #276]	; (8004448 <process_user_input+0x3dc>)
 8004334:	f00a fc96 	bl	800ec64 <iprintf>
			 break;
 8004338:	e111      	b.n	800455e <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f009 fdce 	bl	800dee0 <atof>
 8004344:	ec53 2b10 	vmov	r2, r3, d0
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	f7fc fc74 	bl	8000c38 <__aeabi_d2f>
 8004350:	4603      	mov	r3, r0
 8004352:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800444c <process_user_input+0x3e0>
 8004356:	ee00 3a10 	vmov	s0, r3
 800435a:	f00e fb55 	bl	8012a08 <fmaxf>
 800435e:	eef0 7a40 	vmov.f32	s15, s0
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <process_user_input+0x3a4>)
 8004364:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <process_user_input+0x3a4>)
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc f913 	bl	8000598 <__aeabi_f2d>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4836      	ldr	r0, [pc, #216]	; (8004450 <process_user_input+0x3e4>)
 8004378:	f00a fc74 	bl	800ec64 <iprintf>
			 break;
 800437c:	e0ef      	b.n	800455e <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4618      	mov	r0, r3
 8004384:	f009 fdac 	bl	800dee0 <atof>
 8004388:	ec53 2b10 	vmov	r2, r3, d0
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	f7fc fc52 	bl	8000c38 <__aeabi_d2f>
 8004394:	4603      	mov	r3, r0
 8004396:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8004454 <process_user_input+0x3e8>
 800439a:	ee00 3a10 	vmov	s0, r3
 800439e:	f00e fb33 	bl	8012a08 <fmaxf>
 80043a2:	eef0 7a40 	vmov.f32	s15, s0
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <process_user_input+0x3a4>)
 80043a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <process_user_input+0x3a4>)
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc f8f1 	bl	8000598 <__aeabi_f2d>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4827      	ldr	r0, [pc, #156]	; (8004458 <process_user_input+0x3ec>)
 80043bc:	f00a fc52 	bl	800ec64 <iprintf>
			 break;
 80043c0:	e0cd      	b.n	800455e <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f009 fd8a 	bl	800dee0 <atof>
 80043cc:	ec53 2b10 	vmov	r2, r3, d0
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7fc fc30 	bl	8000c38 <__aeabi_d2f>
 80043d8:	4603      	mov	r3, r0
 80043da:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004460 <process_user_input+0x3f4>
 80043de:	ee00 3a10 	vmov	s0, r3
 80043e2:	f00e fb11 	bl	8012a08 <fmaxf>
 80043e6:	eef0 7a40 	vmov.f32	s15, s0
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <process_user_input+0x3a4>)
 80043ec:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <process_user_input+0x3a4>)
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc f8cf 	bl	8000598 <__aeabi_f2d>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4817      	ldr	r0, [pc, #92]	; (800445c <process_user_input+0x3f0>)
 8004400:	f00a fc30 	bl	800ec64 <iprintf>
			 break;
 8004404:	e0ab      	b.n	800455e <process_user_input+0x4f2>
 8004406:	bf00      	nop
 8004408:	44fa0000 	.word	0x44fa0000
 800440c:	42c80000 	.word	0x42c80000
 8004410:	20000624 	.word	0x20000624
 8004414:	080136b0 	.word	0x080136b0
 8004418:	200006c4 	.word	0x200006c4
 800441c:	080136c4 	.word	0x080136c4
 8004420:	080136d8 	.word	0x080136d8
 8004424:	42700000 	.word	0x42700000
 8004428:	080136f0 	.word	0x080136f0
 800442c:	42040000 	.word	0x42040000
 8004430:	08013704 	.word	0x08013704
 8004434:	0801371c 	.word	0x0801371c
 8004438:	43160000 	.word	0x43160000
 800443c:	08013734 	.word	0x08013734
 8004440:	42200000 	.word	0x42200000
 8004444:	0801374c 	.word	0x0801374c
 8004448:	08013764 	.word	0x08013764
 800444c:	3a83126f 	.word	0x3a83126f
 8004450:	08013778 	.word	0x08013778
 8004454:	38d1b717 	.word	0x38d1b717
 8004458:	08013788 	.word	0x08013788
 800445c:	08013798 	.word	0x08013798
 8004460:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f009 fd39 	bl	800dee0 <atof>
 800446e:	ec53 2b10 	vmov	r2, r3, d0
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f7fc fbdf 	bl	8000c38 <__aeabi_d2f>
 800447a:	4603      	mov	r3, r0
 800447c:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004460 <process_user_input+0x3f4>
 8004480:	ee00 3a10 	vmov	s0, r3
 8004484:	f00e fac0 	bl	8012a08 <fmaxf>
 8004488:	eef0 7a40 	vmov.f32	s15, s0
 800448c:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <process_user_input+0x550>)
 800448e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8004492:	4b4a      	ldr	r3, [pc, #296]	; (80045bc <process_user_input+0x550>)
 8004494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc f87e 	bl	8000598 <__aeabi_f2d>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4847      	ldr	r0, [pc, #284]	; (80045c0 <process_user_input+0x554>)
 80044a2:	f00a fbdf 	bl	800ec64 <iprintf>
			 break;
 80044a6:	e05a      	b.n	800455e <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f009 fd17 	bl	800dee0 <atof>
 80044b2:	ec53 2b10 	vmov	r2, r3, d0
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f7fc fbbd 	bl	8000c38 <__aeabi_d2f>
 80044be:	4603      	mov	r3, r0
 80044c0:	eddf 0a40 	vldr	s1, [pc, #256]	; 80045c4 <process_user_input+0x558>
 80044c4:	ee00 3a10 	vmov	s0, r3
 80044c8:	f00e fa9e 	bl	8012a08 <fmaxf>
 80044cc:	eef0 7a40 	vmov.f32	s15, s0
 80044d0:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <process_user_input+0x550>)
 80044d2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <process_user_input+0x550>)
 80044d8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80044dc:	eef1 7a67 	vneg.f32	s15, s15
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <process_user_input+0x550>)
 80044e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 80044e6:	4b35      	ldr	r3, [pc, #212]	; (80045bc <process_user_input+0x550>)
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fc f854 	bl	8000598 <__aeabi_f2d>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4834      	ldr	r0, [pc, #208]	; (80045c8 <process_user_input+0x55c>)
 80044f6:	f00a fbb5 	bl	800ec64 <iprintf>
			 break;
 80044fa:	e030      	b.n	800455e <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f009 fced 	bl	800dee0 <atof>
 8004506:	ec53 2b10 	vmov	r2, r3, d0
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f7fc fb93 	bl	8000c38 <__aeabi_d2f>
 8004512:	4603      	mov	r3, r0
 8004514:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80045c4 <process_user_input+0x558>
 8004518:	ee00 3a10 	vmov	s0, r3
 800451c:	f00e fa74 	bl	8012a08 <fmaxf>
 8004520:	eef0 7a40 	vmov.f32	s15, s0
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <process_user_input+0x550>)
 8004526:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <process_user_input+0x550>)
 800452c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004530:	eef1 7a67 	vneg.f32	s15, s15
 8004534:	4b21      	ldr	r3, [pc, #132]	; (80045bc <process_user_input+0x550>)
 8004536:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <process_user_input+0x550>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	4618      	mov	r0, r3
 8004540:	f7fc f82a 	bl	8000598 <__aeabi_f2d>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4820      	ldr	r0, [pc, #128]	; (80045cc <process_user_input+0x560>)
 800454a:	f00a fb8b 	bl	800ec64 <iprintf>
			 break;
 800454e:	e006      	b.n	800455e <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	481e      	ldr	r0, [pc, #120]	; (80045d0 <process_user_input+0x564>)
 8004558:	f00a fb84 	bl	800ec64 <iprintf>
			 break;
 800455c:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <process_user_input+0x568>)
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	9200      	str	r2, [sp, #0]
 8004564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004566:	f001 f907 	bl	8005778 <preference_writer_ready>
 800456a:	4603      	mov	r3, r0
 800456c:	f083 0301 	eor.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <process_user_input+0x510>
 8004576:	4817      	ldr	r0, [pc, #92]	; (80045d4 <process_user_input+0x568>)
 8004578:	f001 f8ef 	bl	800575a <preference_writer_open>
	 preference_writer_flush(&prefs);
 800457c:	4815      	ldr	r0, [pc, #84]	; (80045d4 <process_user_input+0x568>)
 800457e:	f001 f909 	bl	8005794 <preference_writer_flush>
	 preference_writer_close(&prefs);
 8004582:	4814      	ldr	r0, [pc, #80]	; (80045d4 <process_user_input+0x568>)
 8004584:	f001 f980 	bl	8005888 <preference_writer_close>
	 preference_writer_load(prefs);
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <process_user_input+0x568>)
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	9200      	str	r2, [sp, #0]
 800458e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004590:	f001 f93a 	bl	8005808 <preference_writer_load>

	 enter_setup_state();
 8004594:	f7ff fbf4 	bl	8003d80 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	2208      	movs	r2, #8
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f009 fcd7 	bl	800df60 <memset>
 }
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000624 	.word	0x20000624
 80045c0:	080137ac 	.word	0x080137ac
 80045c4:	00000000 	.word	0x00000000
 80045c8:	080137c0 	.word	0x080137c0
 80045cc:	080137d4 	.word	0x080137d4
 80045d0:	080137e8 	.word	0x080137e8
 80045d4:	200006ec 	.word	0x200006ec

080045d8 <MX_GPIO_Init>:

/** Configure pins
     PA4   ------> COMP_DAC11_group
*/
void MX_GPIO_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	609a      	str	r2, [r3, #8]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ee:	4b5a      	ldr	r3, [pc, #360]	; (8004758 <MX_GPIO_Init+0x180>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	4a59      	ldr	r2, [pc, #356]	; (8004758 <MX_GPIO_Init+0x180>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045fa:	4b57      	ldr	r3, [pc, #348]	; (8004758 <MX_GPIO_Init+0x180>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004606:	4b54      	ldr	r3, [pc, #336]	; (8004758 <MX_GPIO_Init+0x180>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	4a53      	ldr	r2, [pc, #332]	; (8004758 <MX_GPIO_Init+0x180>)
 800460c:	f043 0320 	orr.w	r3, r3, #32
 8004610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <MX_GPIO_Init+0x180>)
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	4b4e      	ldr	r3, [pc, #312]	; (8004758 <MX_GPIO_Init+0x180>)
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	4a4d      	ldr	r2, [pc, #308]	; (8004758 <MX_GPIO_Init+0x180>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <MX_GPIO_Init+0x180>)
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004636:	4b48      	ldr	r3, [pc, #288]	; (8004758 <MX_GPIO_Init+0x180>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	4a47      	ldr	r2, [pc, #284]	; (8004758 <MX_GPIO_Init+0x180>)
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004642:	4b45      	ldr	r3, [pc, #276]	; (8004758 <MX_GPIO_Init+0x180>)
 8004644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 800464e:	2200      	movs	r2, #0
 8004650:	f24c 0110 	movw	r1, #49168	; 0xc010
 8004654:	4841      	ldr	r0, [pc, #260]	; (800475c <MX_GPIO_Init+0x184>)
 8004656:	f004 fbdd 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800465a:	2200      	movs	r2, #0
 800465c:	2103      	movs	r1, #3
 800465e:	4840      	ldr	r0, [pc, #256]	; (8004760 <MX_GPIO_Init+0x188>)
 8004660:	f004 fbd8 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8004664:	2201      	movs	r2, #1
 8004666:	2108      	movs	r1, #8
 8004668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800466c:	f004 fbd2 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 8004670:	2200      	movs	r2, #0
 8004672:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8004676:	483b      	ldr	r0, [pc, #236]	; (8004764 <MX_GPIO_Init+0x18c>)
 8004678:	f004 fbcc 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 800467c:	f24c 0310 	movw	r3, #49168	; 0xc010
 8004680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004682:	2301      	movs	r3, #1
 8004684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468e:	f107 0314 	add.w	r3, r7, #20
 8004692:	4619      	mov	r1, r3
 8004694:	4831      	ldr	r0, [pc, #196]	; (800475c <MX_GPIO_Init+0x184>)
 8004696:	f004 fa3b 	bl	8008b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800469a:	2303      	movs	r3, #3
 800469c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800469e:	2301      	movs	r3, #1
 80046a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	2300      	movs	r3, #0
 80046a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046aa:	f107 0314 	add.w	r3, r7, #20
 80046ae:	4619      	mov	r1, r3
 80046b0:	482b      	ldr	r0, [pc, #172]	; (8004760 <MX_GPIO_Init+0x188>)
 80046b2:	f004 fa2d 	bl	8008b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046b6:	2308      	movs	r3, #8
 80046b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4619      	mov	r1, r3
 80046cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046d0:	f004 fa1e 	bl	8008b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046d4:	2310      	movs	r3, #16
 80046d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046d8:	2303      	movs	r3, #3
 80046da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	4619      	mov	r1, r3
 80046e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ea:	f004 fa11 	bl	8008b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80046ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046f4:	2301      	movs	r3, #1
 80046f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fc:	2300      	movs	r3, #0
 80046fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4619      	mov	r1, r3
 8004706:	4817      	ldr	r0, [pc, #92]	; (8004764 <MX_GPIO_Init+0x18c>)
 8004708:	f004 fa02 	bl	8008b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800470c:	2370      	movs	r3, #112	; 0x70
 800470e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	4619      	mov	r1, r3
 800471e:	4811      	ldr	r0, [pc, #68]	; (8004764 <MX_GPIO_Init+0x18c>)
 8004720:	f004 f9f6 	bl	8008b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004736:	f107 0314 	add.w	r3, r7, #20
 800473a:	4619      	mov	r1, r3
 800473c:	4809      	ldr	r0, [pc, #36]	; (8004764 <MX_GPIO_Init+0x18c>)
 800473e:	f004 f9e7 	bl	8008b10 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <MX_GPIO_Init+0x190>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <MX_GPIO_Init+0x190>)
 8004748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800474c:	6053      	str	r3, [r2, #4]

}
 800474e:	bf00      	nop
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	48000800 	.word	0x48000800
 8004760:	48001400 	.word	0x48001400
 8004764:	48000400 	.word	0x48000400
 8004768:	40010000 	.word	0x40010000

0800476c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004772:	f001 fd8c 	bl	800628e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004776:	f000 fc3b 	bl	8004ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800477a:	f7ff ff2d 	bl	80045d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800477e:	f7fd fcaf 	bl	80020e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8004782:	f7fc fc61 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004786:	f7fc fcd7 	bl	8001138 <MX_ADC2_Init>
  MX_ADC3_Init();
 800478a:	f7fc fd3b 	bl	8001204 <MX_ADC3_Init>
  MX_ADC5_Init();
 800478e:	f7fc fe17 	bl	80013c0 <MX_ADC5_Init>
  MX_SPI1_Init();
 8004792:	f001 f889 	bl	80058a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004796:	f001 f8c5 	bl	8005924 <MX_SPI2_Init>
  MX_TIM2_Init();
 800479a:	f001 fb99 	bl	8005ed0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800479e:	f001 fc7b 	bl	8006098 <MX_USART3_UART_Init>
  MX_ADC4_Init();
 80047a2:	f7fc fda7 	bl	80012f4 <MX_ADC4_Init>
  MX_FDCAN1_Init();
 80047a6:	f7fd ff3f 	bl	8002628 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 0);
 80047aa:	2100      	movs	r1, #0
 80047ac:	48ad      	ldr	r0, [pc, #692]	; (8004a64 <main+0x2f8>)
 80047ae:	f000 ffc3 	bl	8005738 <preference_writer_init>
  preference_writer_load(prefs);
 80047b2:	4bac      	ldr	r3, [pc, #688]	; (8004a64 <main+0x2f8>)
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	9200      	str	r2, [sp, #0]
 80047b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047ba:	f001 f825 	bl	8005808 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80047be:	4baa      	ldr	r3, [pc, #680]	; (8004a68 <main+0x2fc>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d102      	bne.n	80047ce <main+0x62>
 80047c8:	4ba7      	ldr	r3, [pc, #668]	; (8004a68 <main+0x2fc>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80047ce:	4ba6      	ldr	r3, [pc, #664]	; (8004a68 <main+0x2fc>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d102      	bne.n	80047de <main+0x72>
 80047d8:	4ba3      	ldr	r3, [pc, #652]	; (8004a68 <main+0x2fc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80047de:	4ba3      	ldr	r3, [pc, #652]	; (8004a6c <main+0x300>)
 80047e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80047e4:	eef4 7a67 	vcmp.f32	s15, s15
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	d609      	bvs.n	8004802 <main+0x96>
 80047ee:	4b9f      	ldr	r3, [pc, #636]	; (8004a6c <main+0x300>)
 80047f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80047f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047f8:	eef4 7a47 	vcmp.f32	s15, s14
 80047fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004800:	d102      	bne.n	8004808 <main+0x9c>
 8004802:	4b9a      	ldr	r3, [pc, #616]	; (8004a6c <main+0x300>)
 8004804:	4a9a      	ldr	r2, [pc, #616]	; (8004a70 <main+0x304>)
 8004806:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004808:	4b98      	ldr	r3, [pc, #608]	; (8004a6c <main+0x300>)
 800480a:	edd3 7a03 	vldr	s15, [r3, #12]
 800480e:	eef4 7a67 	vcmp.f32	s15, s15
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	d609      	bvs.n	800482c <main+0xc0>
 8004818:	4b94      	ldr	r3, [pc, #592]	; (8004a6c <main+0x300>)
 800481a:	edd3 7a03 	vldr	s15, [r3, #12]
 800481e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004822:	eef4 7a47 	vcmp.f32	s15, s14
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	d102      	bne.n	8004832 <main+0xc6>
 800482c:	4b8f      	ldr	r3, [pc, #572]	; (8004a6c <main+0x300>)
 800482e:	4a91      	ldr	r2, [pc, #580]	; (8004a74 <main+0x308>)
 8004830:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004832:	4b8e      	ldr	r3, [pc, #568]	; (8004a6c <main+0x300>)
 8004834:	edd3 7a06 	vldr	s15, [r3, #24]
 8004838:	eef4 7a67 	vcmp.f32	s15, s15
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	d609      	bvs.n	8004856 <main+0xea>
 8004842:	4b8a      	ldr	r3, [pc, #552]	; (8004a6c <main+0x300>)
 8004844:	edd3 7a06 	vldr	s15, [r3, #24]
 8004848:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800484c:	eef4 7a47 	vcmp.f32	s15, s14
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d103      	bne.n	800485e <main+0xf2>
 8004856:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <main+0x300>)
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 800485e:	4b82      	ldr	r3, [pc, #520]	; (8004a68 <main+0x2fc>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d102      	bne.n	800486e <main+0x102>
 8004868:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <main+0x2fc>)
 800486a:	2201      	movs	r2, #1
 800486c:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 800486e:	4b7e      	ldr	r3, [pc, #504]	; (8004a68 <main+0x2fc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d102      	bne.n	800487e <main+0x112>
 8004878:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <main+0x2fc>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 800487e:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <main+0x2fc>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d103      	bne.n	8004890 <main+0x124>
 8004888:	4b77      	ldr	r3, [pc, #476]	; (8004a68 <main+0x2fc>)
 800488a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800488e:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004890:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <main+0x300>)
 8004892:	edd3 7a07 	vldr	s15, [r3, #28]
 8004896:	eef4 7a67 	vcmp.f32	s15, s15
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	d609      	bvs.n	80048b4 <main+0x148>
 80048a0:	4b72      	ldr	r3, [pc, #456]	; (8004a6c <main+0x300>)
 80048a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80048a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80048aa:	eef4 7a47 	vcmp.f32	s15, s14
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	d103      	bne.n	80048bc <main+0x150>
 80048b4:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <main+0x300>)
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80048bc:	4b6b      	ldr	r3, [pc, #428]	; (8004a6c <main+0x300>)
 80048be:	edd3 7a08 	vldr	s15, [r3, #32]
 80048c2:	eef4 7a67 	vcmp.f32	s15, s15
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	d609      	bvs.n	80048e0 <main+0x174>
 80048cc:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <main+0x300>)
 80048ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80048d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80048d6:	eef4 7a47 	vcmp.f32	s15, s14
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	d102      	bne.n	80048e6 <main+0x17a>
 80048e0:	4b62      	ldr	r3, [pc, #392]	; (8004a6c <main+0x300>)
 80048e2:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <main+0x30c>)
 80048e4:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80048e6:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <main+0x300>)
 80048e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80048ec:	eef4 7a67 	vcmp.f32	s15, s15
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	d609      	bvs.n	800490a <main+0x19e>
 80048f6:	4b5d      	ldr	r3, [pc, #372]	; (8004a6c <main+0x300>)
 80048f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80048fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004900:	eef4 7a47 	vcmp.f32	s15, s14
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	d102      	bne.n	8004910 <main+0x1a4>
 800490a:	4b58      	ldr	r3, [pc, #352]	; (8004a6c <main+0x300>)
 800490c:	4a5b      	ldr	r2, [pc, #364]	; (8004a7c <main+0x310>)
 800490e:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004910:	4b56      	ldr	r3, [pc, #344]	; (8004a6c <main+0x300>)
 8004912:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004916:	eef4 7a67 	vcmp.f32	s15, s15
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d609      	bvs.n	8004934 <main+0x1c8>
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <main+0x300>)
 8004922:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004926:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800492a:	eef4 7a47 	vcmp.f32	s15, s14
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d102      	bne.n	800493a <main+0x1ce>
 8004934:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <main+0x300>)
 8004936:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <main+0x314>)
 8004938:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 14.0f;}
 800493a:	4b4c      	ldr	r3, [pc, #304]	; (8004a6c <main+0x300>)
 800493c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004940:	eef4 7a67 	vcmp.f32	s15, s15
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	d609      	bvs.n	800495e <main+0x1f2>
 800494a:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <main+0x300>)
 800494c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004950:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004954:	eef4 7a47 	vcmp.f32	s15, s14
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	d102      	bne.n	8004964 <main+0x1f8>
 800495e:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <main+0x300>)
 8004960:	4a46      	ldr	r2, [pc, #280]	; (8004a7c <main+0x310>)
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004964:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <main+0x300>)
 8004966:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800496a:	eef4 7a67 	vcmp.f32	s15, s15
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d609      	bvs.n	8004988 <main+0x21c>
 8004974:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <main+0x300>)
 8004976:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800497a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800497e:	eef4 7a47 	vcmp.f32	s15, s14
 8004982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004986:	d103      	bne.n	8004990 <main+0x224>
 8004988:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <main+0x300>)
 800498a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004990:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <main+0x300>)
 8004992:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004996:	eef4 7a67 	vcmp.f32	s15, s15
 800499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499e:	d609      	bvs.n	80049b4 <main+0x248>
 80049a0:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <main+0x300>)
 80049a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80049a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049aa:	eef4 7a47 	vcmp.f32	s15, s14
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	d103      	bne.n	80049bc <main+0x250>
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <main+0x300>)
 80049b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <main+0x300>)
 80049be:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80049c2:	eef4 7a67 	vcmp.f32	s15, s15
 80049c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ca:	d609      	bvs.n	80049e0 <main+0x274>
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <main+0x300>)
 80049ce:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80049d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049d6:	eef4 7a47 	vcmp.f32	s15, s14
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	d102      	bne.n	80049e6 <main+0x27a>
 80049e0:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <main+0x300>)
 80049e2:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <main+0x318>)
 80049e4:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80049e6:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <main+0x300>)
 80049e8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049ec:	eef4 7a67 	vcmp.f32	s15, s15
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	d609      	bvs.n	8004a0a <main+0x29e>
 80049f6:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <main+0x300>)
 80049f8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a00:	eef4 7a47 	vcmp.f32	s15, s14
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	d102      	bne.n	8004a10 <main+0x2a4>
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <main+0x300>)
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <main+0x314>)
 8004a0e:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <main+0x300>)
 8004a12:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004a16:	eef4 7a67 	vcmp.f32	s15, s15
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	d702      	bvc.n	8004a26 <main+0x2ba>
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <main+0x300>)
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <main+0x31c>)
 8004a24:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <main+0x300>)
 8004a28:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004a2c:	eef4 7a67 	vcmp.f32	s15, s15
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	d702      	bvc.n	8004a3c <main+0x2d0>
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <main+0x300>)
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <main+0x320>)
 8004a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <main+0x300>)
 8004a3e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004a42:	eef4 7a67 	vcmp.f32	s15, s15
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	d702      	bvc.n	8004a52 <main+0x2e6>
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <main+0x300>)
 8004a4e:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <main+0x324>)
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <main+0x300>)
 8004a54:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004a58:	eef4 7a67 	vcmp.f32	s15, s15
 8004a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a60:	d71b      	bvc.n	8004a9a <main+0x32e>
 8004a62:	e017      	b.n	8004a94 <main+0x328>
 8004a64:	200006ec 	.word	0x200006ec
 8004a68:	200006c4 	.word	0x200006c4
 8004a6c:	20000624 	.word	0x20000624
 8004a70:	447a0000 	.word	0x447a0000
 8004a74:	42200000 	.word	0x42200000
 8004a78:	42fa0000 	.word	0x42fa0000
 8004a7c:	41600000 	.word	0x41600000
 8004a80:	40a00000 	.word	0x40a00000
 8004a84:	43fa0000 	.word	0x43fa0000
 8004a88:	41480000 	.word	0x41480000
 8004a8c:	c1480000 	.word	0xc1480000
 8004a90:	42820000 	.word	0x42820000
 8004a94:	4baf      	ldr	r3, [pc, #700]	; (8004d54 <main+0x5e8>)
 8004a96:	4ab0      	ldr	r2, [pc, #704]	; (8004d58 <main+0x5ec>)
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\n", VERSION_NUM);
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aa2:	48ae      	ldr	r0, [pc, #696]	; (8004d5c <main+0x5f0>)
 8004aa4:	f00a f8de 	bl	800ec64 <iprintf>
  printf("\r\nPorted to STM32G4 by RoboDesign Lab UIUC\r\n\n");
 8004aa8:	48ad      	ldr	r0, [pc, #692]	; (8004d60 <main+0x5f4>)
 8004aaa:	f00a f961 	bl	800ed70 <puts>
  }
  else{

  }

  init_controller_params(&controller);
 8004aae:	48ad      	ldr	r0, [pc, #692]	; (8004d64 <main+0x5f8>)
 8004ab0:	f7fe fa88 	bl	8002fc4 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004ab4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004ab8:	2100      	movs	r1, #0
 8004aba:	48ab      	ldr	r0, [pc, #684]	; (8004d68 <main+0x5fc>)
 8004abc:	f009 fa50 	bl	800df60 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004ac0:	4baa      	ldr	r3, [pc, #680]	; (8004d6c <main+0x600>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	4aaa      	ldr	r2, [pc, #680]	; (8004d70 <main+0x604>)
 8004ac6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004aca:	4ba8      	ldr	r3, [pc, #672]	; (8004d6c <main+0x600>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	4aa8      	ldr	r2, [pc, #672]	; (8004d70 <main+0x604>)
 8004ad0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  PPAIRS = 14.0f; //JB
 8004ad4:	4b9f      	ldr	r3, [pc, #636]	; (8004d54 <main+0x5e8>)
 8004ad6:	4aa7      	ldr	r2, [pc, #668]	; (8004d74 <main+0x608>)
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
  comm_encoder.ppairs = PPAIRS;
 8004ada:	4b9e      	ldr	r3, [pc, #632]	; (8004d54 <main+0x5e8>)
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	4aa4      	ldr	r2, [pc, #656]	; (8004d70 <main+0x604>)
 8004ae0:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004ae2:	2164      	movs	r1, #100	; 0x64
 8004ae4:	48a2      	ldr	r0, [pc, #648]	; (8004d70 <main+0x604>)
 8004ae6:	f000 fc11 	bl	800530c <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aee:	49a2      	ldr	r1, [pc, #648]	; (8004d78 <main+0x60c>)
 8004af0:	48a2      	ldr	r0, [pc, #648]	; (8004d7c <main+0x610>)
 8004af2:	f009 fa27 	bl	800df44 <memcpy>
//  HAL_ADC_Start(&hadc2);
//  HAL_ADC_Start(&hadc3);
//  HAL_ADC_Start(&hadc4);//JB

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004af6:	2201      	movs	r2, #1
 8004af8:	2110      	movs	r1, #16
 8004afa:	48a1      	ldr	r0, [pc, #644]	; (8004d80 <main+0x614>)
 8004afc:	f004 f98a 	bl	8008e14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004b00:	2201      	movs	r2, #1
 8004b02:	2108      	movs	r1, #8
 8004b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b08:	f004 f984 	bl	8008e14 <HAL_GPIO_WritePin>
 //drv_enable_gd(drv);


  //=======================================================================================================================================
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f001 fc2f 	bl	8006370 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004b12:	499c      	ldr	r1, [pc, #624]	; (8004d84 <main+0x618>)
 8004b14:	2301      	movs	r3, #1
 8004b16:	9306      	str	r3, [sp, #24]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	2300      	movs	r3, #0
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	2301      	movs	r3, #1
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2301      	movs	r3, #1
 8004b32:	2200      	movs	r2, #0
 8004b34:	c903      	ldmia	r1, {r0, r1}
 8004b36:	f7fd fb9c 	bl	8002272 <drv_write_DCR>
  HAL_Delay(1);
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f001 fc18 	bl	8006370 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x1, 0x0, 0x1);
 8004b40:	4990      	ldr	r1, [pc, #576]	; (8004d84 <main+0x618>)
 8004b42:	2301      	movs	r3, #1
 8004b44:	9306      	str	r3, [sp, #24]
 8004b46:	2300      	movs	r3, #0
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	2301      	movs	r3, #1
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2301      	movs	r3, #1
 8004b60:	2200      	movs	r2, #0
 8004b62:	c903      	ldmia	r1, {r0, r1}
 8004b64:	f7fd fb85 	bl	8002272 <drv_write_DCR>
  HAL_Delay(1);
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f001 fc01 	bl	8006370 <HAL_Delay>

  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);   // calibrate shunt amplifiers
 8004b6e:	4985      	ldr	r1, [pc, #532]	; (8004d84 <main+0x618>)
 8004b70:	2303      	movs	r3, #3
 8004b72:	9306      	str	r3, [sp, #24]
 8004b74:	2301      	movs	r3, #1
 8004b76:	9305      	str	r3, [sp, #20]
 8004b78:	2301      	movs	r3, #1
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	9303      	str	r3, [sp, #12]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	2303      	movs	r3, #3
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	2200      	movs	r2, #0
 8004b90:	c903      	ldmia	r1, {r0, r1}
 8004b92:	f7fd fbde 	bl	8002352 <drv_write_CSACR>
  HAL_Delay(1);
 8004b96:	2001      	movs	r0, #1
 8004b98:	f001 fbea 	bl	8006370 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004b9c:	4979      	ldr	r1, [pc, #484]	; (8004d84 <main+0x618>)
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	9306      	str	r3, [sp, #24]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9305      	str	r3, [sp, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9304      	str	r3, [sp, #16]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	2301      	movs	r3, #1
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	c903      	ldmia	r1, {r0, r1}
 8004bc0:	f7fd fbc7 	bl	8002352 <drv_write_CSACR>
  HAL_Delay(1);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f001 fbd3 	bl	8006370 <HAL_Delay>
  zero_current(&controller);
 8004bca:	4866      	ldr	r0, [pc, #408]	; (8004d64 <main+0x5f8>)
 8004bcc:	f7fe f9b6 	bl	8002f3c <zero_current>
  HAL_Delay(1);
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f001 fbcd 	bl	8006370 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_NONE, OCP_DEG_8US, VDS_LVL_1_88);
 8004bd6:	496b      	ldr	r1, [pc, #428]	; (8004d84 <main+0x618>)
 8004bd8:	230f      	movs	r3, #15
 8004bda:	9302      	str	r3, [sp, #8]
 8004bdc:	2303      	movs	r3, #3
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	2303      	movs	r3, #3
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	2201      	movs	r2, #1
 8004be8:	c903      	ldmia	r1, {r0, r1}
 8004bea:	f7fd fb84 	bl	80022f6 <drv_write_OCPCR>
  HAL_Delay(1);
 8004bee:	2001      	movs	r0, #1
 8004bf0:	f001 fbbe 	bl	8006370 <HAL_Delay>

  HAL_Delay(1);
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f001 fbbb 	bl	8006370 <HAL_Delay>
  drv_disable_gd(drv);
 8004bfa:	4b62      	ldr	r3, [pc, #392]	; (8004d84 <main+0x618>)
 8004bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c00:	f7fd fc03 	bl	800240a <drv_disable_gd>
  HAL_Delay(1);
 8004c04:	2001      	movs	r0, #1
 8004c06:	f001 fbb3 	bl	8006370 <HAL_Delay>


  ADC1->CR &= ~ADC_CR_DEEPPWD;
 8004c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c18:	6093      	str	r3, [r2, #8]
  ADC2->CR &= ~ADC_CR_DEEPPWD;
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <main+0x61c>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4a5a      	ldr	r2, [pc, #360]	; (8004d88 <main+0x61c>)
 8004c20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c24:	6093      	str	r3, [r2, #8]
  ADC3->CR &= ~ADC_CR_DEEPPWD;
 8004c26:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <main+0x620>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <main+0x620>)
 8004c2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c30:	6093      	str	r3, [r2, #8]
  ADC4->CR &= ~ADC_CR_DEEPPWD;
 8004c32:	4b57      	ldr	r3, [pc, #348]	; (8004d90 <main+0x624>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4a56      	ldr	r2, [pc, #344]	; (8004d90 <main+0x624>)
 8004c38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c3c:	6093      	str	r3, [r2, #8]

  ADC1->CR |= ADC_CR_ADVREGEN;
 8004c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6093      	str	r3, [r2, #8]
  ADC2->CR |= ADC_CR_ADVREGEN;
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <main+0x61c>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4a4d      	ldr	r2, [pc, #308]	; (8004d88 <main+0x61c>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6093      	str	r3, [r2, #8]
  ADC3->CR |= ADC_CR_ADVREGEN;
 8004c5a:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <main+0x620>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	4a4b      	ldr	r2, [pc, #300]	; (8004d8c <main+0x620>)
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6093      	str	r3, [r2, #8]
  ADC4->CR |= ADC_CR_ADVREGEN;
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <main+0x624>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4a49      	ldr	r2, [pc, #292]	; (8004d90 <main+0x624>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8004c72:	2001      	movs	r0, #1
 8004c74:	f001 fb7c 	bl	8006370 <HAL_Delay>

  ADC1->CR |= ADC_CR_ADCAL;
 8004c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	6093      	str	r3, [r2, #8]
  ADC2->CR |= ADC_CR_ADCAL;
 8004c88:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <main+0x61c>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a3e      	ldr	r2, [pc, #248]	; (8004d88 <main+0x61c>)
 8004c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c92:	6093      	str	r3, [r2, #8]
  ADC3->CR |= ADC_CR_ADCAL;
 8004c94:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <main+0x620>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a3c      	ldr	r2, [pc, #240]	; (8004d8c <main+0x620>)
 8004c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	6093      	str	r3, [r2, #8]
  ADC4->CR |= ADC_CR_ADCAL;
 8004ca0:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <main+0x624>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <main+0x624>)
 8004ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004caa:	6093      	str	r3, [r2, #8]

  while ((ADC1->CR & ADC_CR_ADCAL) ||
 8004cac:	bf00      	nop
 8004cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dbfa      	blt.n	8004cae <main+0x542>
		  (ADC2->CR & ADC_CR_ADCAL) ||
 8004cb8:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <main+0x61c>)
 8004cba:	689b      	ldr	r3, [r3, #8]
  while ((ADC1->CR & ADC_CR_ADCAL) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dbf6      	blt.n	8004cae <main+0x542>
		  (ADC3->CR & ADC_CR_ADCAL) ||
 8004cc0:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <main+0x620>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
		  (ADC2->CR & ADC_CR_ADCAL) ||
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dbf2      	blt.n	8004cae <main+0x542>
		  (ADC4->CR & ADC_CR_ADCAL));
 8004cc8:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <main+0x624>)
 8004cca:	689b      	ldr	r3, [r3, #8]
		  (ADC3->CR & ADC_CR_ADCAL) ||
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dbee      	blt.n	8004cae <main+0x542>

  HAL_Delay(1);
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f001 fb4d 	bl	8006370 <HAL_Delay>

  ADC1->ISR |= ADC_ISR_ADRDY;
 8004cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]
  ADC2->ISR |= ADC_ISR_ADRDY;
 8004ce6:	4b28      	ldr	r3, [pc, #160]	; (8004d88 <main+0x61c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <main+0x61c>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6013      	str	r3, [r2, #0]
  ADC3->ISR |= ADC_ISR_ADRDY;
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <main+0x620>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <main+0x620>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]
  ADC4->ISR |= ADC_ISR_ADRDY;
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <main+0x624>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a23      	ldr	r2, [pc, #140]	; (8004d90 <main+0x624>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6013      	str	r3, [r2, #0]

  ADC1->CR |= ADC_CR_ADEN;
 8004d0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6093      	str	r3, [r2, #8]
  ADC2->CR |= ADC_CR_ADEN;
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <main+0x61c>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <main+0x61c>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6093      	str	r3, [r2, #8]
  ADC3->CR |= ADC_CR_ADEN;
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <main+0x620>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <main+0x620>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6093      	str	r3, [r2, #8]
  ADC4->CR |= ADC_CR_ADEN;
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <main+0x624>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <main+0x624>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6093      	str	r3, [r2, #8]

  while (!(ADC1->ISR & ADC_ISR_ADRDY) ||
 8004d3e:	bf00      	nop
 8004d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f8      	beq.n	8004d40 <main+0x5d4>
		  !(ADC2->ISR & ADC_ISR_ADRDY) ||
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <main+0x61c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	e01f      	b.n	8004d94 <main+0x628>
 8004d54:	20000624 	.word	0x20000624
 8004d58:	c2820000 	.word	0xc2820000
 8004d5c:	08013810 	.word	0x08013810
 8004d60:	08013834 	.word	0x08013834
 8004d64:	20000700 	.word	0x20000700
 8004d68:	20008f1c 	.word	0x20008f1c
 8004d6c:	200006c4 	.word	0x200006c4
 8004d70:	20000a08 	.word	0x20000a08
 8004d74:	41600000 	.word	0x41600000
 8004d78:	200006dc 	.word	0x200006dc
 8004d7c:	20000ae4 	.word	0x20000ae4
 8004d80:	48000800 	.word	0x48000800
 8004d84:	20000ce8 	.word	0x20000ce8
 8004d88:	50000100 	.word	0x50000100
 8004d8c:	50000400 	.word	0x50000400
 8004d90:	50000500 	.word	0x50000500
 8004d94:	f003 0301 	and.w	r3, r3, #1
  while (!(ADC1->ISR & ADC_ISR_ADRDY) ||
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0d1      	beq.n	8004d40 <main+0x5d4>
		  !(ADC3->ISR & ADC_ISR_ADRDY) ||
 8004d9c:	4b86      	ldr	r3, [pc, #536]	; (8004fb8 <main+0x84c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
		  !(ADC2->ISR & ADC_ISR_ADRDY) ||
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0cb      	beq.n	8004d40 <main+0x5d4>
		  !(ADC4->ISR & ADC_ISR_ADRDY));
 8004da8:	4b84      	ldr	r3, [pc, #528]	; (8004fbc <main+0x850>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
		  !(ADC3->ISR & ADC_ISR_ADRDY) ||
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0c5      	beq.n	8004d40 <main+0x5d4>

  ADC1->ISR |= ADC_ISR_ADRDY;
 8004db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6013      	str	r3, [r2, #0]
  ADC2->ISR |= ADC_ISR_ADRDY;
 8004dc4:	4b7e      	ldr	r3, [pc, #504]	; (8004fc0 <main+0x854>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a7d      	ldr	r2, [pc, #500]	; (8004fc0 <main+0x854>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6013      	str	r3, [r2, #0]
  ADC3->ISR |= ADC_ISR_ADRDY;
 8004dd0:	4b79      	ldr	r3, [pc, #484]	; (8004fb8 <main+0x84c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a78      	ldr	r2, [pc, #480]	; (8004fb8 <main+0x84c>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6013      	str	r3, [r2, #0]
  ADC4->ISR |= ADC_ISR_ADRDY;
 8004ddc:	4b77      	ldr	r3, [pc, #476]	; (8004fbc <main+0x850>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a76      	ldr	r2, [pc, #472]	; (8004fbc <main+0x850>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6013      	str	r3, [r2, #0]

  ADC1->CFGR &= ~(ADC_CFGR_CONT);
 8004de8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df6:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~(ADC_CFGR_CONT);
 8004df8:	4b71      	ldr	r3, [pc, #452]	; (8004fc0 <main+0x854>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a70      	ldr	r2, [pc, #448]	; (8004fc0 <main+0x854>)
 8004dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e02:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~(ADC_CFGR_CONT);
 8004e04:	4b6c      	ldr	r3, [pc, #432]	; (8004fb8 <main+0x84c>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a6b      	ldr	r2, [pc, #428]	; (8004fb8 <main+0x84c>)
 8004e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0e:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~(ADC_CFGR_CONT);
 8004e10:	4b6a      	ldr	r3, [pc, #424]	; (8004fbc <main+0x850>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a69      	ldr	r2, [pc, #420]	; (8004fbc <main+0x850>)
 8004e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e1a:	60d3      	str	r3, [r2, #12]

  // START ANALOG CALIBRATION:

  ADC1->CR |= 1; // Enable ADC1
 8004e1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6093      	str	r3, [r2, #8]
  ADC2->CR |= 1; // Enable ADC2
 8004e2c:	4b64      	ldr	r3, [pc, #400]	; (8004fc0 <main+0x854>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a63      	ldr	r2, [pc, #396]	; (8004fc0 <main+0x854>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6093      	str	r3, [r2, #8]
  ADC3->CR |= 1; // Enable ADC3
 8004e38:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <main+0x84c>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a5e      	ldr	r2, [pc, #376]	; (8004fb8 <main+0x84c>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6093      	str	r3, [r2, #8]
  ADC4->CR |= 1; // Enable ADC4
 8004e44:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <main+0x850>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a5c      	ldr	r2, [pc, #368]	; (8004fbc <main+0x850>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8004e50:	2001      	movs	r0, #1
 8004e52:	f001 fa8d 	bl	8006370 <HAL_Delay>

  printf("Calculating ADC Offsets...\n");
 8004e56:	485b      	ldr	r0, [pc, #364]	; (8004fc4 <main+0x858>)
 8004e58:	f009 ff8a 	bl	800ed70 <puts>
  uint32_t offset1=0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  uint32_t offset2=0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  uint32_t offset3=0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	607b      	str	r3, [r7, #4]

  for(int c=0;c<100;c++){
 8004e68:	2300      	movs	r3, #0
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	e029      	b.n	8004ec2 <main+0x756>
	  ADC1->CR |= 0x0004;
 8004e6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	6093      	str	r3, [r2, #8]
	  ADC2->CR |= 0x0004;
 8004e7e:	4b50      	ldr	r3, [pc, #320]	; (8004fc0 <main+0x854>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a4f      	ldr	r2, [pc, #316]	; (8004fc0 <main+0x854>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6093      	str	r3, [r2, #8]
	  ADC3->CR |= 0x0004;
 8004e8a:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <main+0x84c>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4a4a      	ldr	r2, [pc, #296]	; (8004fb8 <main+0x84c>)
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	6093      	str	r3, [r2, #8]
	  HAL_Delay(1);
 8004e96:	2001      	movs	r0, #1
 8004e98:	f001 fa6a 	bl	8006370 <HAL_Delay>
	  offset3 += ADC3->DR;
 8004e9c:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <main+0x84c>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	607b      	str	r3, [r7, #4]
	  offset2 += ADC2->DR;
 8004ea6:	4b46      	ldr	r3, [pc, #280]	; (8004fc0 <main+0x854>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
	  offset1 += ADC1->DR;
 8004eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  for(int c=0;c<100;c++){
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b63      	cmp	r3, #99	; 0x63
 8004ec6:	ddd2      	ble.n	8004e6e <main+0x702>
  }

  controller.adc_c_offset = (int)((double)offset3/100.0f);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fb fb43 	bl	8000554 <__aeabi_ui2d>
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	4b3d      	ldr	r3, [pc, #244]	; (8004fc8 <main+0x85c>)
 8004ed4:	f7fb fce2 	bl	800089c <__aeabi_ddiv>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f7fb fe62 	bl	8000ba8 <__aeabi_d2iz>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4a39      	ldr	r2, [pc, #228]	; (8004fcc <main+0x860>)
 8004ee8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  controller.adc_b_offset = (int)((double)offset2/100.0f);
 8004eec:	68b8      	ldr	r0, [r7, #8]
 8004eee:	f7fb fb31 	bl	8000554 <__aeabi_ui2d>
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <main+0x85c>)
 8004ef8:	f7fb fcd0 	bl	800089c <__aeabi_ddiv>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7fb fe50 	bl	8000ba8 <__aeabi_d2iz>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <main+0x860>)
 8004f0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  controller.adc_a_offset = (int)((double)offset1/100.0f);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7fb fb1f 	bl	8000554 <__aeabi_ui2d>
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <main+0x85c>)
 8004f1c:	f7fb fcbe 	bl	800089c <__aeabi_ddiv>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f7fb fe3e 	bl	8000ba8 <__aeabi_d2iz>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <main+0x860>)
 8004f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  //=======================================================================================================================================

  printf("ADC A OFFSET: %d, \tADC B OFFSET: %d \tADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <main+0x860>)
 8004f36:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <main+0x860>)
 8004f3c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <main+0x860>)
 8004f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f46:	4822      	ldr	r0, [pc, #136]	; (8004fd0 <main+0x864>)
 8004f48:	f009 fe8c 	bl	800ec64 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4821      	ldr	r0, [pc, #132]	; (8004fd4 <main+0x868>)
 8004f50:	f005 fcf2 	bl	800a938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004f54:	2104      	movs	r1, #4
 8004f56:	481f      	ldr	r0, [pc, #124]	; (8004fd4 <main+0x868>)
 8004f58:	f005 fcee 	bl	800a938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	481d      	ldr	r0, [pc, #116]	; (8004fd4 <main+0x868>)
 8004f60:	f005 fcea 	bl	800a938 <HAL_TIM_PWM_Start>
//  {
//	  Error_Handler();
//  }

  /* CAN setup */
  can_rx_init(&can_rx);//JB
 8004f64:	481c      	ldr	r0, [pc, #112]	; (8004fd8 <main+0x86c>)
 8004f66:	f7fd f8a7 	bl	80020b8 <can_rx_init>
  can_tx_init(&can_tx);
 8004f6a:	481c      	ldr	r0, [pc, #112]	; (8004fdc <main+0x870>)
 8004f6c:	f7fd f8ae 	bl	80020cc <can_tx_init>
  //HAL_CAN_Start(&CAN_H); //start CAN//JB
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt//JB

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004f70:	2200      	movs	r2, #0
 8004f72:	2100      	movs	r1, #0
 8004f74:	201c      	movs	r0, #28
 8004f76:	f002 feb2 	bl	8007cde <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	2015      	movs	r0, #21
 8004f80:	f002 fead 	bl	8007cde <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <main+0x874>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <main+0x874>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <main+0x874>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 8004f96:	2201      	movs	r2, #1
 8004f98:	4912      	ldr	r1, [pc, #72]	; (8004fe4 <main+0x878>)
 8004f9a:	4813      	ldr	r0, [pc, #76]	; (8004fe8 <main+0x87c>)
 8004f9c:	f007 f810 	bl	800bfc0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8004fa0:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <main+0x868>)
 8004fa2:	f005 fbef 	bl	800a784 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  HAL_Delay(100);
 8004fa6:	2064      	movs	r0, #100	; 0x64
 8004fa8:	f001 f9e2 	bl	8006370 <HAL_Delay>
	  drv_print_faults(drv);
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <main+0x880>)
 8004fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004fb2:	f7fd fa45 	bl	8002440 <drv_print_faults>
	  HAL_Delay(100);
 8004fb6:	e7f6      	b.n	8004fa6 <main+0x83a>
 8004fb8:	50000400 	.word	0x50000400
 8004fbc:	50000500 	.word	0x50000500
 8004fc0:	50000100 	.word	0x50000100
 8004fc4:	08013864 	.word	0x08013864
 8004fc8:	40590000 	.word	0x40590000
 8004fcc:	20000700 	.word	0x20000700
 8004fd0:	08013880 	.word	0x08013880
 8004fd4:	20009344 	.word	0x20009344
 8004fd8:	20009228 	.word	0x20009228
 8004fdc:	200091fc 	.word	0x200091fc
 8004fe0:	200009f8 	.word	0x200009f8
 8004fe4:	20009274 	.word	0x20009274
 8004fe8:	20009390 	.word	0x20009390
 8004fec:	20000ce8 	.word	0x20000ce8

08004ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b094      	sub	sp, #80	; 0x50
 8004ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ff6:	f107 0318 	add.w	r3, r7, #24
 8004ffa:	2238      	movs	r2, #56	; 0x38
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f008 ffae 	bl	800df60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	605a      	str	r2, [r3, #4]
 800500c:	609a      	str	r2, [r3, #8]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005012:	2000      	movs	r0, #0
 8005014:	f003 ff16 	bl	8008e44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005018:	2302      	movs	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800501c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005026:	2302      	movs	r3, #2
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800502a:	2302      	movs	r3, #2
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800502e:	2304      	movs	r3, #4
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8005032:	2355      	movs	r3, #85	; 0x55
 8005034:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005036:	2302      	movs	r3, #2
 8005038:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800503a:	2302      	movs	r3, #2
 800503c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800503e:	2302      	movs	r3, #2
 8005040:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005042:	f107 0318 	add.w	r3, r7, #24
 8005046:	4618      	mov	r0, r3
 8005048:	f003 ffa0 	bl	8008f8c <HAL_RCC_OscConfig>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005052:	f000 f818 	bl	8005086 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005056:	230f      	movs	r3, #15
 8005058:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800505a:	2303      	movs	r3, #3
 800505c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	2104      	movs	r1, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f004 faa4 	bl	80095bc <HAL_RCC_ClockConfig>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800507a:	f000 f804 	bl	8005086 <Error_Handler>
  }
}
 800507e:	bf00      	nop
 8005080:	3750      	adds	r7, #80	; 0x50
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	ed87 0a01 	vstr	s0, [r7, #4]
 800509e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 80050a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80050a6:	edd7 7a00 	vldr	s15, [r7]
 80050aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	dd01      	ble.n	80050b8 <fast_fmaxf+0x24>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	e000      	b.n	80050ba <fast_fmaxf+0x26>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	ee07 3a90 	vmov	s15, r3
    }
 80050be:	eeb0 0a67 	vmov.f32	s0, s15
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <fast_fminf>:

float fast_fminf(float x, float y){
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80050d6:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80050da:	ed97 7a01 	vldr	s14, [r7, #4]
 80050de:	edd7 7a00 	vldr	s15, [r7]
 80050e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ea:	d501      	bpl.n	80050f0 <fast_fminf+0x24>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	e000      	b.n	80050f2 <fast_fminf+0x26>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	ee07 3a90 	vmov	s15, r3
    }
 80050f6:	eeb0 0a67 	vmov.f32	s0, s15
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	ed87 0a03 	vstr	s0, [r7, #12]
 800510e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005112:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8005116:	ed97 7a03 	vldr	s14, [r7, #12]
 800511a:	edd7 7a02 	vldr	s15, [r7, #8]
 800511e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005126:	dd0c      	ble.n	8005142 <fmaxf3+0x3e>
 8005128:	ed97 7a03 	vldr	s14, [r7, #12]
 800512c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005138:	dd01      	ble.n	800513e <fmaxf3+0x3a>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	e00d      	b.n	800515a <fmaxf3+0x56>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	e00b      	b.n	800515a <fmaxf3+0x56>
 8005142:	ed97 7a02 	vldr	s14, [r7, #8]
 8005146:	edd7 7a01 	vldr	s15, [r7, #4]
 800514a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005152:	dd01      	ble.n	8005158 <fmaxf3+0x54>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	e000      	b.n	800515a <fmaxf3+0x56>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	ee07 3a90 	vmov	s15, r3
    }
 800515e:	eeb0 0a67 	vmov.f32	s0, s15
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <fminf3>:

float fminf3(float x, float y, float z){
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	ed87 0a03 	vstr	s0, [r7, #12]
 8005176:	edc7 0a02 	vstr	s1, [r7, #8]
 800517a:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 800517e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005182:	edd7 7a02 	vldr	s15, [r7, #8]
 8005186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	d50c      	bpl.n	80051aa <fminf3+0x3e>
 8005190:	ed97 7a03 	vldr	s14, [r7, #12]
 8005194:	edd7 7a01 	vldr	s15, [r7, #4]
 8005198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	d501      	bpl.n	80051a6 <fminf3+0x3a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	e00d      	b.n	80051c2 <fminf3+0x56>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	e00b      	b.n	80051c2 <fminf3+0x56>
 80051aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80051ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80051b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ba:	d501      	bpl.n	80051c0 <fminf3+0x54>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	e000      	b.n	80051c2 <fminf3+0x56>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	ee07 3a90 	vmov	s15, r3
    }
 80051c6:	eeb0 0a67 	vmov.f32	s0, s15
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	ed93 7a00 	vldr	s14, [r3]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	edd3 7a00 	vldr	s15, [r3]
 80051ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	edd3 6a00 	vldr	s13, [r3]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	edd3 7a00 	vldr	s15, [r3]
 80051fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005206:	eeb0 0a67 	vmov.f32	s0, s15
 800520a:	f00d fcb9 	bl	8012b80 <sqrtf>
 800520e:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8005212:	ed97 7a05 	vldr	s14, [r7, #20]
 8005216:	edd7 7a01 	vldr	s15, [r7, #4]
 800521a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	dc00      	bgt.n	8005226 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8005224:	e01b      	b.n	800525e <limit_norm+0x8a>
        *x = *x * limit/norm;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	ed93 7a00 	vldr	s14, [r3]
 800522c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005230:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005234:	ed97 7a05 	vldr	s14, [r7, #20]
 8005238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	ed93 7a00 	vldr	s14, [r3]
 8005248:	edd7 7a01 	vldr	s15, [r7, #4]
 800524c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005250:	ed97 7a05 	vldr	s14, [r7, #20]
 8005254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	edc3 7a00 	vstr	s15, [r3]
    }
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <sin_lut>:
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
    }

float sin_lut(float theta){
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8005272:	eddf 0a17 	vldr	s1, [pc, #92]	; 80052d0 <sin_lut+0x68>
 8005276:	ed97 0a01 	vldr	s0, [r7, #4]
 800527a:	f00d fc61 	bl	8012b40 <fmodf>
 800527e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8005282:	edd7 7a01 	vldr	s15, [r7, #4]
 8005286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	d506      	bpl.n	800529e <sin_lut+0x36>
 8005290:	edd7 7a01 	vldr	s15, [r7, #4]
 8005294:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80052d0 <sin_lut+0x68>
 8005298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800529c:	e001      	b.n	80052a2 <sin_lut+0x3a>
 800529e:	edd7 7a01 	vldr	s15, [r7, #4]
 80052a2:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 80052a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80052aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80052d4 <sin_lut+0x6c>
 80052ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b6:	ee17 3a90 	vmov	r3, s15
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <sin_lut+0x70>)
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	ee07 3a90 	vmov	s15, r3
}
 80052c6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40c90fdb 	.word	0x40c90fdb
 80052d4:	42a2f983 	.word	0x42a2f983
 80052d8:	08013924 	.word	0x08013924

080052dc <cos_lut>:

float cos_lut(float theta){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 80052e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005308 <cos_lut+0x2c>
 80052ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f2:	eeb0 0a67 	vmov.f32	s0, s15
 80052f6:	f7ff ffb7 	bl	8005268 <sin_lut>
 80052fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80052fe:	eeb0 0a67 	vmov.f32	s0, s15
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	3fc90fdb 	.word	0x3fc90fdb

0800530c <ps_warmup>:
#define AS4047D_CS1_Pin GPIO_PIN_11
#define ENC_CS_HIGH AS4047D_CS1_Port->BSRR=(uint32_t)AS4047D_CS1_Pin
#define ENC_CS_LOW AS4047D_CS1_Port->BRR=(uint32_t)AS4047D_CS1_Pin
#define READ_POS_REG 0xFFFF

void ps_warmup(EncoderStruct * encoder, int n){
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e021      	b.n	8005360 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8005322:	2200      	movs	r2, #0
 8005324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005328:	4812      	ldr	r0, [pc, #72]	; (8005374 <ps_warmup+0x68>)
 800532a:	f003 fd73 	bl	8008e14 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	2364      	movs	r3, #100	; 0x64
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2301      	movs	r3, #1
 800533a:	480f      	ldr	r0, [pc, #60]	; (8005378 <ps_warmup+0x6c>)
 800533c:	f004 fe53 	bl	8009fe6 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005340:	bf00      	nop
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <ps_warmup+0x6c>)
 8005344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d0f9      	beq.n	8005342 <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800534e:	2201      	movs	r2, #1
 8005350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005354:	4807      	ldr	r0, [pc, #28]	; (8005374 <ps_warmup+0x68>)
 8005356:	f003 fd5d 	bl	8008e14 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	dbd9      	blt.n	800531c <ps_warmup+0x10>
	}
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	48000400 	.word	0x48000400
 8005378:	200092dc 	.word	0x200092dc

0800537c <AS5047_Read_Pos>:

uint16_t AS5047_Read_Pos()
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	ENC_CS_LOW;
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <AS5047_Read_Pos+0x88>)
 8005384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
	while ((SPI2->SR & SPI_SR_BSY) != 0);
 800538a:	bf00      	nop
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <AS5047_Read_Pos+0x8c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f9      	bne.n	800538c <AS5047_Read_Pos+0x10>
	SPI2->DR = READ_POS_REG;
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <AS5047_Read_Pos+0x8c>)
 800539a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800539e:	60da      	str	r2, [r3, #12]
	SPI2->CR1 |= SPI_CR1_SPE;
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053aa:	6013      	str	r3, [r2, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0);
 80053ac:	bf00      	nop
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f9      	beq.n	80053ae <AS5047_Read_Pos+0x32>
	uint16_t result = SPI2->DR;
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	80fb      	strh	r3, [r7, #6]
	while ((SPI2->SR & SPI_SR_TXE) == 0);
 80053c0:	bf00      	nop
 80053c2:	4b11      	ldr	r3, [pc, #68]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f9      	beq.n	80053c2 <AS5047_Read_Pos+0x46>
	while ((SPI2->SR & SPI_SR_BSY) != 0);
 80053ce:	bf00      	nop
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f9      	bne.n	80053d0 <AS5047_Read_Pos+0x54>
	SPI2->CR1 &= ~(SPI_CR1_SPE);
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a09      	ldr	r2, [pc, #36]	; (8005408 <AS5047_Read_Pos+0x8c>)
 80053e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e6:	6013      	str	r3, [r2, #0]
	ENC_CS_HIGH;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <AS5047_Read_Pos+0x88>)
 80053ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ee:	619a      	str	r2, [r3, #24]
	return (result & 0x3FFF);
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80053f6:	b29b      	uxth	r3, r3
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	48000400 	.word	0x48000400
 8005408:	40003800 	.word	0x40003800

0800540c <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005420:	2313      	movs	r3, #19
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
 8005424:	e011      	b.n	800544a <ps_sample+0x3e>
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	3b01      	subs	r3, #1
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	3302      	adds	r3, #2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	3302      	adds	r3, #2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3304      	adds	r3, #4
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	3b01      	subs	r3, #1
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	dcea      	bgt.n	8005426 <ps_sample+0x1a>
//	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
//	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
//	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
//	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
//	encoder->raw = encoder ->spi_rx_word;
	encoder->raw = AS5047_Read_Pos(); // JB
 8005450:	f7ff ff94 	bl	800537c <AS5047_Read_Pos>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005460:	125b      	asrs	r3, r3, #9
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	3336      	adds	r3, #54	; 0x36
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	125b      	asrs	r3, r3, #9
 8005474:	3301      	adds	r3, #1
 8005476:	425a      	negs	r2, r3
 8005478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005480:	bf58      	it	pl
 8005482:	4253      	negpl	r3, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	3336      	adds	r3, #54	; 0x36
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800549a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	125b      	asrs	r3, r3, #9
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	441a      	add	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80054ba:	4b77      	ldr	r3, [pc, #476]	; (8005698 <ps_sample+0x28c>)
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054c8:	eddf 6a74 	vldr	s13, [pc, #464]	; 800569c <ps_sample+0x290>
 80054cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80054dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e0:	ee17 3a90 	vmov	r3, s15
 80054e4:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80056a0 <ps_sample+0x294>
 80054fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	edd3 7a01 	vldr	s15, [r3, #4]
 800550e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005516:	d507      	bpl.n	8005528 <ps_sample+0x11c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	edd3 7a01 	vldr	s15, [r3, #4]
 800551e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80056a0 <ps_sample+0x294>
 8005522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005526:	e002      	b.n	800552e <ps_sample+0x122>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	edd3 7a01 	vldr	s15, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <ps_sample+0x28c>)
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800554c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005550:	eddf 6a52 	vldr	s13, [pc, #328]	; 800569c <ps_sample+0x290>
 8005554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005568:	ee17 3a90 	vmov	r3, s15
 800556c:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005582:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80056a0 <ps_sample+0x294>
 8005586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005596:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	d507      	bpl.n	80055b0 <ps_sample+0x1a4>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80055a6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80056a0 <ps_sample+0x294>
 80055aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ae:	e002      	b.n	80055b6 <ps_sample+0x1aa>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80055cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 80055d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80055d8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80056a4 <ps_sample+0x298>
 80055dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e4:	dd03      	ble.n	80055ee <ps_sample+0x1e2>
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	e00a      	b.n	8005604 <ps_sample+0x1f8>
	else if(angle_diff < -PI_F){rollover = 1;}
 80055ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80055f2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80056a8 <ps_sample+0x29c>
 80055f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	d501      	bpl.n	8005604 <ps_sample+0x1f8>
 8005600:	2301      	movs	r3, #1
 8005602:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	441a      	add	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <ps_sample+0x222>
		encoder->turns = 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	ed93 7a01 	vldr	s14, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005642:	eddf 6a17 	vldr	s13, [pc, #92]	; 80056a0 <ps_sample+0x294>
 8005646:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800564a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	edc3 7a03 	vstr	s15, [r3, #12]
//
//	float vel = (new_pos_avg - old_pos_avg)/(dt*9.0);



	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	ed93 7a03 	vldr	s14, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005660:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005664:	edd7 7a00 	vldr	s15, [r7]
 8005668:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800566c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8005690:	bf00      	nop
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	200006c4 	.word	0x200006c4
 800569c:	46800000 	.word	0x46800000
 80056a0:	40c90fdb 	.word	0x40c90fdb
 80056a4:	40490fdb 	.word	0x40490fdb
 80056a8:	c0490fdb 	.word	0xc0490fdb

080056ac <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ba:	4619      	mov	r1, r3
 80056bc:	4818      	ldr	r0, [pc, #96]	; (8005720 <ps_print+0x74>)
 80056be:	f009 fad1 	bl	800ec64 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c6:	4619      	mov	r1, r3
 80056c8:	4816      	ldr	r0, [pc, #88]	; (8005724 <ps_print+0x78>)
 80056ca:	f009 facb 	bl	800ec64 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fa ff60 	bl	8000598 <__aeabi_f2d>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4812      	ldr	r0, [pc, #72]	; (8005728 <ps_print+0x7c>)
 80056de:	f009 fac1 	bl	800ec64 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fa ff56 	bl	8000598 <__aeabi_f2d>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	480e      	ldr	r0, [pc, #56]	; (800572c <ps_print+0x80>)
 80056f2:	f009 fab7 	bl	800ec64 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fa ff4c 	bl	8000598 <__aeabi_f2d>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	480a      	ldr	r0, [pc, #40]	; (8005730 <ps_print+0x84>)
 8005706:	f009 faad 	bl	800ec64 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005710:	4619      	mov	r1, r3
 8005712:	4808      	ldr	r0, [pc, #32]	; (8005734 <ps_print+0x88>)
 8005714:	f009 faa6 	bl	800ec64 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	080138b8 	.word	0x080138b8
 8005724:	080138c0 	.word	0x080138c0
 8005728:	080138d8 	.word	0x080138d8
 800572c:	080138ec 	.word	0x080138ec
 8005730:	08013900 	.word	0x08013900
 8005734:	08013914 	.word	0x08013914

08005738 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fd f834 	bl	80027b4 <flash_writer_init>
	pr->sector = sector;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	60da      	str	r2, [r3, #12]
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4618      	mov	r0, r3
 8005766:	f7fd f841 	bl	80027ec <flash_writer_open>
    pr->ready = true;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	741a      	strb	r2, [r3, #16]
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005778:	b084      	sub	sp, #16
 800577a:	b490      	push	{r4, r7}
 800577c:	af00      	add	r7, sp, #0
 800577e:	f107 0408 	add.w	r4, r7, #8
 8005782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005786:	7e3b      	ldrb	r3, [r7, #24]
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	bc90      	pop	{r4, r7}
 800578e:	b004      	add	sp, #16
 8005790:	4770      	bx	lr
	...

08005794 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e00d      	b.n	80057be <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <preference_writer_flush+0x6c>)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	460b      	mov	r3, r1
 80057b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80057b4:	f7fd f830 	bl	8002818 <flash_writer_write_int>
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b09      	cmp	r3, #9
 80057c2:	ddee      	ble.n	80057a2 <preference_writer_flush+0xe>
    }
    for (; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 80057c4:	e011      	b.n	80057ea <preference_writer_flush+0x56>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - MAX_INTS_IN_FLASH]);
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3b0a      	subs	r3, #10
 80057cc:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <preference_writer_flush+0x70>)
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	edd3 7a00 	vldr	s15, [r3]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	eeb0 0a67 	vmov.f32	s0, s15
 80057dc:	460b      	mov	r3, r1
 80057de:	ca07      	ldmia	r2, {r0, r1, r2}
 80057e0:	f7fd f838 	bl	8002854 <flash_writer_write_float>
    for (; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b31      	cmp	r3, #49	; 0x31
 80057ee:	ddea      	ble.n	80057c6 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	741a      	strb	r2, [r3, #16]
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	200006c4 	.word	0x200006c4
 8005804:	20000624 	.word	0x20000624

08005808 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005808:	b084      	sub	sp, #16
 800580a:	b590      	push	{r4, r7, lr}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	f107 0418 	add.w	r4, r7, #24
 8005814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 8005818:	2300      	movs	r3, #0
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e00d      	b.n	800583a <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f107 0218 	add.w	r2, r7, #24
 8005824:	ca07      	ldmia	r2, {r0, r1, r2}
 8005826:	f7fd f843 	bl	80028b0 <flash_read_int>
 800582a:	4602      	mov	r2, r0
 800582c:	4914      	ldr	r1, [pc, #80]	; (8005880 <preference_writer_load+0x78>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3301      	adds	r3, #1
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b09      	cmp	r3, #9
 800583e:	ddee      	ble.n	800581e <preference_writer_load+0x16>
    }
    for(; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 8005840:	e013      	b.n	800586a <preference_writer_load+0x62>
        __float_reg[offs - MAX_INTS_IN_FLASH] = flash_read_float(pr.fw, offs);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f1a3 040a 	sub.w	r4, r3, #10
 800584a:	4613      	mov	r3, r2
 800584c:	f107 0218 	add.w	r2, r7, #24
 8005850:	ca07      	ldmia	r2, {r0, r1, r2}
 8005852:	f7fd f840 	bl	80028d6 <flash_read_float>
 8005856:	eef0 7a40 	vmov.f32	s15, s0
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <preference_writer_load+0x7c>)
 800585c:	00a3      	lsls	r3, r4, #2
 800585e:	4413      	add	r3, r2
 8005860:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3301      	adds	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b31      	cmp	r3, #49	; 0x31
 800586e:	dde8      	ble.n	8005842 <preference_writer_load+0x3a>
    }
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800587c:	b004      	add	sp, #16
 800587e:	4770      	bx	lr
 8005880:	200006c4 	.word	0x200006c4
 8005884:	20000624 	.word	0x20000624

08005888 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4618      	mov	r0, r3
 800589a:	f7fc fffc 	bl	8002896 <flash_writer_close>
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <MX_SPI1_Init+0x74>)
 80058ae:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <MX_SPI1_Init+0x78>)
 80058b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058b2:	4b1a      	ldr	r3, [pc, #104]	; (800591c <MX_SPI1_Init+0x74>)
 80058b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80058b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80058ba:	4b18      	ldr	r3, [pc, #96]	; (800591c <MX_SPI1_Init+0x74>)
 80058bc:	2200      	movs	r2, #0
 80058be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <MX_SPI1_Init+0x74>)
 80058c2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80058c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <MX_SPI1_Init+0x74>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <MX_SPI1_Init+0x74>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <MX_SPI1_Init+0x74>)
 80058d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <MX_SPI1_Init+0x74>)
 80058de:	2228      	movs	r2, #40	; 0x28
 80058e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <MX_SPI1_Init+0x74>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <MX_SPI1_Init+0x74>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <MX_SPI1_Init+0x74>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <MX_SPI1_Init+0x74>)
 80058f6:	2207      	movs	r2, #7
 80058f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <MX_SPI1_Init+0x74>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <MX_SPI1_Init+0x74>)
 8005902:	2200      	movs	r2, #0
 8005904:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005906:	4805      	ldr	r0, [pc, #20]	; (800591c <MX_SPI1_Init+0x74>)
 8005908:	f004 fac2 	bl	8009e90 <HAL_SPI_Init>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005912:	f7ff fbb8 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20009278 	.word	0x20009278
 8005920:	40013000 	.word	0x40013000

08005924 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <MX_SPI2_Init+0x74>)
 800592a:	4a1c      	ldr	r2, [pc, #112]	; (800599c <MX_SPI2_Init+0x78>)
 800592c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <MX_SPI2_Init+0x74>)
 8005930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005934:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <MX_SPI2_Init+0x74>)
 8005938:	2200      	movs	r2, #0
 800593a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800593c:	4b16      	ldr	r3, [pc, #88]	; (8005998 <MX_SPI2_Init+0x74>)
 800593e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005942:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005944:	4b14      	ldr	r3, [pc, #80]	; (8005998 <MX_SPI2_Init+0x74>)
 8005946:	2200      	movs	r2, #0
 8005948:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <MX_SPI2_Init+0x74>)
 800594c:	2201      	movs	r2, #1
 800594e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <MX_SPI2_Init+0x74>)
 8005952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005956:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <MX_SPI2_Init+0x74>)
 800595a:	2210      	movs	r2, #16
 800595c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <MX_SPI2_Init+0x74>)
 8005960:	2200      	movs	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <MX_SPI2_Init+0x74>)
 8005966:	2200      	movs	r2, #0
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <MX_SPI2_Init+0x74>)
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <MX_SPI2_Init+0x74>)
 8005972:	2207      	movs	r2, #7
 8005974:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <MX_SPI2_Init+0x74>)
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <MX_SPI2_Init+0x74>)
 800597e:	2200      	movs	r2, #0
 8005980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005982:	4805      	ldr	r0, [pc, #20]	; (8005998 <MX_SPI2_Init+0x74>)
 8005984:	f004 fa84 	bl	8009e90 <HAL_SPI_Init>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800598e:	f7ff fb7a 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200092dc 	.word	0x200092dc
 800599c:	40003800 	.word	0x40003800

080059a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	f107 031c 	add.w	r3, r7, #28
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <HAL_SPI_MspInit+0xdc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d129      	bne.n	8005a16 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059c2:	4b2f      	ldr	r3, [pc, #188]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 80059c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c6:	4a2e      	ldr	r2, [pc, #184]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 80059c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059cc:	6613      	str	r3, [r2, #96]	; 0x60
 80059ce:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 80059d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059da:	4b29      	ldr	r3, [pc, #164]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059e6:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 80059e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80059f2:	23e0      	movs	r3, #224	; 0xe0
 80059f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fe:	2300      	movs	r3, #0
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a02:	2305      	movs	r3, #5
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a06:	f107 031c 	add.w	r3, r7, #28
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a10:	f003 f87e 	bl	8008b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005a14:	e02d      	b.n	8005a72 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <HAL_SPI_MspInit+0xe4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d128      	bne.n	8005a72 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a20:	4b17      	ldr	r3, [pc, #92]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 8005a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 8005a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3c:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 8005a3e:	f043 0302 	orr.w	r3, r3, #2
 8005a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a44:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <HAL_SPI_MspInit+0xe0>)
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005a50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a56:	2302      	movs	r3, #2
 8005a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a62:	2305      	movs	r3, #5
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a66:	f107 031c 	add.w	r3, r7, #28
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4806      	ldr	r0, [pc, #24]	; (8005a88 <HAL_SPI_MspInit+0xe8>)
 8005a6e:	f003 f84f 	bl	8008b10 <HAL_GPIO_Init>
}
 8005a72:	bf00      	nop
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40013000 	.word	0x40013000
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40003800 	.word	0x40003800
 8005a88:	48000400 	.word	0x48000400

08005a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a92:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <HAL_MspInit+0x44>)
 8005a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a96:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <HAL_MspInit+0x44>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_MspInit+0x44>)
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	607b      	str	r3, [r7, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <HAL_MspInit+0x44>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <HAL_MspInit+0x44>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_MspInit+0x44>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000

08005ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005ad8:	e7fe      	b.n	8005ad8 <NMI_Handler+0x4>

08005ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ade:	e7fe      	b.n	8005ade <HardFault_Handler+0x4>

08005ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ae4:	e7fe      	b.n	8005ae4 <MemManage_Handler+0x4>

08005ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aea:	e7fe      	b.n	8005aea <BusFault_Handler+0x4>

08005aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005af0:	e7fe      	b.n	8005af0 <UsageFault_Handler+0x4>

08005af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b20:	f000 fc08 	bl	8006334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b24:	bf00      	nop
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b2c:	4802      	ldr	r0, [pc, #8]	; (8005b38 <DMA1_Channel1_IRQHandler+0x10>)
 8005b2e:	f002 fa73 	bl	8008018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000438 	.word	0x20000438

08005b3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005b40:	4802      	ldr	r0, [pc, #8]	; (8005b4c <DMA1_Channel2_IRQHandler+0x10>)
 8005b42:	f002 fa69 	bl	8008018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000498 	.word	0x20000498

08005b50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005b54:	4802      	ldr	r0, [pc, #8]	; (8005b60 <DMA1_Channel3_IRQHandler+0x10>)
 8005b56:	f002 fa5f 	bl	8008018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200004f8 	.word	0x200004f8

08005b64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8005b68:	4802      	ldr	r0, [pc, #8]	; (8005b74 <DMA1_Channel4_IRQHandler+0x10>)
 8005b6a:	f002 fa55 	bl	8008018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000558 	.word	0x20000558

08005b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
	//GPIOB->BSRR = (uint32_t)GPIO_PIN_9;
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
//	analog_sample(&controller);
	ADC1->CR |= 0x0004;
 8005b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b86:	f043 0304 	orr.w	r3, r3, #4
 8005b8a:	6093      	str	r3, [r2, #8]
	ADC2->CR |= 0x0004;
 8005b8c:	4b4e      	ldr	r3, [pc, #312]	; (8005cc8 <TIM2_IRQHandler+0x150>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4a4d      	ldr	r2, [pc, #308]	; (8005cc8 <TIM2_IRQHandler+0x150>)
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	6093      	str	r3, [r2, #8]
	ADC3->CR |= 0x0004;
 8005b98:	4b4c      	ldr	r3, [pc, #304]	; (8005ccc <TIM2_IRQHandler+0x154>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a4b      	ldr	r2, [pc, #300]	; (8005ccc <TIM2_IRQHandler+0x154>)
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	6093      	str	r3, [r2, #8]
	ADC4->CR |= 0x0004;
 8005ba4:	4b4a      	ldr	r3, [pc, #296]	; (8005cd0 <TIM2_IRQHandler+0x158>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4a49      	ldr	r2, [pc, #292]	; (8005cd0 <TIM2_IRQHandler+0x158>)
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	6093      	str	r3, [r2, #8]

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005bb0:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8005cd4 <TIM2_IRQHandler+0x15c>
 8005bb4:	4848      	ldr	r0, [pc, #288]	; (8005cd8 <TIM2_IRQHandler+0x160>)
 8005bb6:	f7ff fc29 	bl	800540c <ps_sample>

	controller.adc_a_raw = ADC1->DR;
 8005bba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b46      	ldr	r3, [pc, #280]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005bc4:	605a      	str	r2, [r3, #4]
	controller.adc_b_raw = ADC2->DR;
 8005bc6:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <TIM2_IRQHandler+0x150>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005bce:	609a      	str	r2, [r3, #8]
	controller.adc_c_raw = ADC3->DR;
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ccc <TIM2_IRQHandler+0x154>)
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005bd8:	60da      	str	r2, [r3, #12]
	controller.adc_vbus_raw = ADC4->DR;
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <TIM2_IRQHandler+0x158>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	461a      	mov	r2, r3
 8005be0:	4b3e      	ldr	r3, [pc, #248]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005be2:	611a      	str	r2, [r3, #16]
	controller.v_bus = (float)controller.adc_vbus_raw*V_SCALE;
 8005be4:	4b3d      	ldr	r3, [pc, #244]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf0:	ee17 0a90 	vmov	r0, s15
 8005bf4:	f7fa fcd0 	bl	8000598 <__aeabi_f2d>
 8005bf8:	a32f      	add	r3, pc, #188	; (adr r3, 8005cb8 <TIM2_IRQHandler+0x140>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f7fa fd23 	bl	8000648 <__aeabi_dmul>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	a32d      	add	r3, pc, #180	; (adr r3, 8005cc0 <TIM2_IRQHandler+0x148>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa fd1a 	bl	8000648 <__aeabi_dmul>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f7fb f80c 	bl	8000c38 <__aeabi_d2f>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4a2e      	ldr	r2, [pc, #184]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c24:	6213      	str	r3, [r2, #32]

	controller.i_a = controller.i_scale*(float)(controller.adc_a_raw - controller.adc_a_offset);    // Calculate phase currents from ADC readings
 8005c26:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c28:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005c2c:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	4b2a      	ldr	r3, [pc, #168]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c46:	edc3 7a05 	vstr	s15, [r3, #20]
	controller.i_b = controller.i_scale*(float)(controller.adc_b_raw - controller.adc_b_offset);
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c4c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005c50:	4b22      	ldr	r3, [pc, #136]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c68:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c6a:	edc3 7a06 	vstr	s15, [r3, #24]
	controller.i_c = controller.i_scale*(float)(controller.adc_c_raw - controller.adc_c_offset);
 8005c6e:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c70:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8c:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c8e:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Run Finite State Machine */
	run_fsm(&state);
 8005c92:	4813      	ldr	r0, [pc, #76]	; (8005ce0 <TIM2_IRQHandler+0x168>)
 8005c94:	f7fd fdcc 	bl	8003830 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005c98:	f000 f842 	bl	8005d20 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005c9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <TIM2_IRQHandler+0x164>)
 8005ca6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
	//GPIOB->BRR = (uint32_t)GPIO_PIN_9;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005caa:	480e      	ldr	r0, [pc, #56]	; (8005ce4 <TIM2_IRQHandler+0x16c>)
 8005cac:	f004 ff56 	bl	800ab5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	fdf3b646 	.word	0xfdf3b646
 8005cbc:	3ff978d4 	.word	0x3ff978d4
 8005cc0:	00000000 	.word	0x00000000
 8005cc4:	3f8a6663 	.word	0x3f8a6663
 8005cc8:	50000100 	.word	0x50000100
 8005ccc:	50000400 	.word	0x50000400
 8005cd0:	50000500 	.word	0x50000500
 8005cd4:	37d1b717 	.word	0x37d1b717
 8005cd8:	20000a08 	.word	0x20000a08
 8005cdc:	20000700 	.word	0x20000700
 8005ce0:	200009f8 	.word	0x200009f8
 8005ce4:	20009344 	.word	0x20009344

08005ce8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	HAL_UART_IRQHandler(&huart3);
 8005cee:	4809      	ldr	r0, [pc, #36]	; (8005d14 <USART3_IRQHandler+0x2c>)
 8005cf0:	f006 f9bc 	bl	800c06c <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005cf4:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <USART3_IRQHandler+0x30>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4807      	ldr	r0, [pc, #28]	; (8005d1c <USART3_IRQHandler+0x34>)
 8005d00:	f7fd ff3c 	bl	8003b7c <update_fsm>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d04:	4803      	ldr	r0, [pc, #12]	; (8005d14 <USART3_IRQHandler+0x2c>)
 8005d06:	f006 f9b1 	bl	800c06c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20009390 	.word	0x20009390
 8005d18:	20009274 	.word	0x20009274
 8005d1c:	200009f8 	.word	0x200009f8

08005d20 <can_tx_rx>:

/* USER CODE BEGIN 1 */


void can_tx_rx(void){ //JB
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
//			unpack_cmd(can_rx, controller.commands);	// Unpack commands
//			controller.timeout = 0;					// Reset timeout counter
//		}
//	}

}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
	return 1;
 8005d32:	2301      	movs	r3, #1
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <_kill>:

int _kill(int pid, int sig)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005d48:	f008 f8d2 	bl	800def0 <__errno>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2216      	movs	r2, #22
 8005d50:	601a      	str	r2, [r3, #0]
	return -1;
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <_exit>:

void _exit (int status)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d66:	f04f 31ff 	mov.w	r1, #4294967295
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff ffe7 	bl	8005d3e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d70:	e7fe      	b.n	8005d70 <_exit+0x12>

08005d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e00a      	b.n	8005d9a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d84:	f3af 8000 	nop.w
 8005d88:	4601      	mov	r1, r0
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	60ba      	str	r2, [r7, #8]
 8005d90:	b2ca      	uxtb	r2, r1
 8005d92:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3301      	adds	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	dbf0      	blt.n	8005d84 <_read+0x12>
	}

return len;
 8005da2:	687b      	ldr	r3, [r7, #4]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e009      	b.n	8005dd2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	60ba      	str	r2, [r7, #8]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fa14 	bl	80061f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	dbf1      	blt.n	8005dbe <_write+0x12>
	}
	return len;
 8005dda:	687b      	ldr	r3, [r7, #4]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <_close>:

int _close(int file)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	return -1;
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e0c:	605a      	str	r2, [r3, #4]
	return 0;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <_isatty>:

int _isatty(int file)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	return 1;
 8005e24:	2301      	movs	r3, #1
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
	return 0;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <_sbrk+0x50>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <_sbrk+0x16>
		heap_end = &end;
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <_sbrk+0x50>)
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <_sbrk+0x54>)
 8005e60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005e62:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <_sbrk+0x50>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <_sbrk+0x50>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	466a      	mov	r2, sp
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d907      	bls.n	8005e86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005e76:	f008 f83b 	bl	800def0 <__errno>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	220c      	movs	r2, #12
 8005e7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
 8005e84:	e006      	b.n	8005e94 <_sbrk+0x48>
	}

	heap_end += incr;
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <_sbrk+0x50>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	4a03      	ldr	r2, [pc, #12]	; (8005e9c <_sbrk+0x50>)
 8005e90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005e92:	68fb      	ldr	r3, [r7, #12]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20009340 	.word	0x20009340
 8005ea0:	20009438 	.word	0x20009438

08005ea4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <SystemInit+0x28>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <SystemInit+0x28>)
 8005eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <SystemInit+0x28>)
 8005eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ebe:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	e000ed00 	.word	0xe000ed00

08005ed0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	; 0x38
 8005ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ee4:	f107 031c 	add.w	r3, r7, #28
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	60da      	str	r2, [r3, #12]
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	615a      	str	r2, [r3, #20]
 8005f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8005f10:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f12:	2240      	movs	r2, #64	; 0x40
 8005f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8500;
 8005f16:	4b33      	ldr	r3, [pc, #204]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f18:	f242 1234 	movw	r2, #8500	; 0x2134
 8005f1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f24:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f2a:	482e      	ldr	r0, [pc, #184]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f2c:	f004 fbd2 	bl	800a6d4 <HAL_TIM_Base_Init>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005f36:	f7ff f8a6 	bl	8005086 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f44:	4619      	mov	r1, r3
 8005f46:	4827      	ldr	r0, [pc, #156]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f48:	f005 f89c 	bl	800b084 <HAL_TIM_ConfigClockSource>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005f52:	f7ff f898 	bl	8005086 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005f56:	4823      	ldr	r0, [pc, #140]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f58:	f004 fc8c 	bl	800a874 <HAL_TIM_PWM_Init>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005f62:	f7ff f890 	bl	8005086 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f6e:	f107 031c 	add.w	r3, r7, #28
 8005f72:	4619      	mov	r1, r3
 8005f74:	481b      	ldr	r0, [pc, #108]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f76:	f005 fe61 	bl	800bc3c <HAL_TIMEx_MasterConfigSynchronization>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005f80:	f7ff f881 	bl	8005086 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8005f84:	2370      	movs	r3, #112	; 0x70
 8005f86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005f90:	2304      	movs	r3, #4
 8005f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f94:	463b      	mov	r3, r7
 8005f96:	2200      	movs	r2, #0
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4812      	ldr	r0, [pc, #72]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005f9c:	f004 ff5e 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005fa6:	f7ff f86e 	bl	8005086 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005faa:	463b      	mov	r3, r7
 8005fac:	2204      	movs	r2, #4
 8005fae:	4619      	mov	r1, r3
 8005fb0:	480c      	ldr	r0, [pc, #48]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005fb2:	f004 ff53 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8005fbc:	f7ff f863 	bl	8005086 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005fc8:	f004 ff48 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8005fd2:	f7ff f858 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005fd6:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <MX_TIM2_Init+0x114>)
 8005fd8:	f000 f82a 	bl	8006030 <HAL_TIM_MspPostInit>

}
 8005fdc:	bf00      	nop
 8005fde:	3738      	adds	r7, #56	; 0x38
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20009344 	.word	0x20009344

08005fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff8:	d113      	bne.n	8006022 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <HAL_TIM_Base_MspInit+0x44>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	4a0b      	ldr	r2, [pc, #44]	; (800602c <HAL_TIM_Base_MspInit+0x44>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6593      	str	r3, [r2, #88]	; 0x58
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <HAL_TIM_Base_MspInit+0x44>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	201c      	movs	r0, #28
 8006018:	f001 fe61 	bl	8007cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800601c:	201c      	movs	r0, #28
 800601e:	f001 fe78 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006038:	f107 030c 	add.w	r3, r7, #12
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d11c      	bne.n	800608c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <HAL_TIM_MspPostInit+0x64>)
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	4a0f      	ldr	r2, [pc, #60]	; (8006094 <HAL_TIM_MspPostInit+0x64>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <HAL_TIM_MspPostInit+0x64>)
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800606a:	2307      	movs	r3, #7
 800606c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606e:	2302      	movs	r3, #2
 8006070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006076:	2303      	movs	r3, #3
 8006078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800607a:	2301      	movs	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4619      	mov	r1, r3
 8006084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006088:	f002 fd42 	bl	8008b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800608c:	bf00      	nop
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40021000 	.word	0x40021000

08006098 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800609c:	4b22      	ldr	r3, [pc, #136]	; (8006128 <MX_USART3_UART_Init+0x90>)
 800609e:	4a23      	ldr	r2, [pc, #140]	; (800612c <MX_USART3_UART_Init+0x94>)
 80060a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80060a2:	4b21      	ldr	r3, [pc, #132]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80060aa:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80060b0:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060be:	220c      	movs	r2, #12
 80060c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060d4:	4b14      	ldr	r3, [pc, #80]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060dc:	2200      	movs	r2, #0
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80060e0:	4811      	ldr	r0, [pc, #68]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060e2:	f005 fe87 	bl	800bdf4 <HAL_UART_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80060ec:	f7fe ffcb 	bl	8005086 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060f0:	2100      	movs	r1, #0
 80060f2:	480d      	ldr	r0, [pc, #52]	; (8006128 <MX_USART3_UART_Init+0x90>)
 80060f4:	f007 fe29 	bl	800dd4a <HAL_UARTEx_SetTxFifoThreshold>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80060fe:	f7fe ffc2 	bl	8005086 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006102:	2100      	movs	r1, #0
 8006104:	4808      	ldr	r0, [pc, #32]	; (8006128 <MX_USART3_UART_Init+0x90>)
 8006106:	f007 fe5e 	bl	800ddc6 <HAL_UARTEx_SetRxFifoThreshold>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006110:	f7fe ffb9 	bl	8005086 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006114:	4804      	ldr	r0, [pc, #16]	; (8006128 <MX_USART3_UART_Init+0x90>)
 8006116:	f007 fddf 	bl	800dcd8 <HAL_UARTEx_DisableFifoMode>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006120:	f7fe ffb1 	bl	8005086 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20009390 	.word	0x20009390
 800612c:	40004800 	.word	0x40004800

08006130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b09e      	sub	sp, #120	; 0x78
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006138:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	2254      	movs	r2, #84	; 0x54
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f007 ff05 	bl	800df60 <memset>
  if(uartHandle->Instance==USART3)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a23      	ldr	r2, [pc, #140]	; (80061e8 <HAL_UART_MspInit+0xb8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d13e      	bne.n	80061de <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006160:	2304      	movs	r3, #4
 8006162:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006164:	2300      	movs	r3, #0
 8006166:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006168:	f107 0310 	add.w	r3, r7, #16
 800616c:	4618      	mov	r0, r3
 800616e:	f003 fc41 	bl	80099f4 <HAL_RCCEx_PeriphCLKConfig>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006178:	f7fe ff85 	bl	8005086 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <HAL_UART_MspInit+0xbc>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <HAL_UART_MspInit+0xbc>)
 8006182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006186:	6593      	str	r3, [r2, #88]	; 0x58
 8006188:	4b18      	ldr	r3, [pc, #96]	; (80061ec <HAL_UART_MspInit+0xbc>)
 800618a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006194:	4b15      	ldr	r3, [pc, #84]	; (80061ec <HAL_UART_MspInit+0xbc>)
 8006196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006198:	4a14      	ldr	r2, [pc, #80]	; (80061ec <HAL_UART_MspInit+0xbc>)
 800619a:	f043 0304 	orr.w	r3, r3, #4
 800619e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <HAL_UART_MspInit+0xbc>)
 80061a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80061ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b2:	2302      	movs	r3, #2
 80061b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ba:	2300      	movs	r3, #0
 80061bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061be:	2307      	movs	r3, #7
 80061c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061c6:	4619      	mov	r1, r3
 80061c8:	4809      	ldr	r0, [pc, #36]	; (80061f0 <HAL_UART_MspInit+0xc0>)
 80061ca:	f002 fca1 	bl	8008b10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	2027      	movs	r0, #39	; 0x27
 80061d4:	f001 fd83 	bl	8007cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80061d8:	2027      	movs	r0, #39	; 0x27
 80061da:	f001 fd9a 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80061de:	bf00      	nop
 80061e0:	3778      	adds	r7, #120	; 0x78
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40004800 	.word	0x40004800
 80061ec:	40021000 	.word	0x40021000
 80061f0:	48000800 	.word	0x48000800

080061f4 <__io_putchar>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xffff);
 80061fc:	1d39      	adds	r1, r7, #4
 80061fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006202:	2201      	movs	r2, #1
 8006204:	4803      	ldr	r0, [pc, #12]	; (8006214 <__io_putchar+0x20>)
 8006206:	f005 fe45 	bl	800be94 <HAL_UART_Transmit>
return 0;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20009390 	.word	0x20009390

08006218 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 8006220:	2201      	movs	r2, #1
 8006222:	4904      	ldr	r1, [pc, #16]	; (8006234 <HAL_UART_RxCpltCallback+0x1c>)
 8006224:	4804      	ldr	r0, [pc, #16]	; (8006238 <HAL_UART_RxCpltCallback+0x20>)
 8006226:	f005 fecb 	bl	800bfc0 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20009274 	.word	0x20009274
 8006238:	20009390 	.word	0x20009390

0800623c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800623c:	480d      	ldr	r0, [pc, #52]	; (8006274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800623e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006240:	480d      	ldr	r0, [pc, #52]	; (8006278 <LoopForever+0x6>)
  ldr r1, =_edata
 8006242:	490e      	ldr	r1, [pc, #56]	; (800627c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006244:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <LoopForever+0xe>)
  movs r3, #0
 8006246:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006248:	e002      	b.n	8006250 <LoopCopyDataInit>

0800624a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800624a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800624c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800624e:	3304      	adds	r3, #4

08006250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006254:	d3f9      	bcc.n	800624a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006256:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006258:	4c0b      	ldr	r4, [pc, #44]	; (8006288 <LoopForever+0x16>)
  movs r3, #0
 800625a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800625c:	e001      	b.n	8006262 <LoopFillZerobss>

0800625e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800625e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006260:	3204      	adds	r2, #4

08006262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006264:	d3fb      	bcc.n	800625e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006266:	f7ff fe1d 	bl	8005ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800626a:	f007 fe47 	bl	800defc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800626e:	f7fe fa7d 	bl	800476c <main>

08006272 <LoopForever>:

LoopForever:
    b LoopForever
 8006272:	e7fe      	b.n	8006272 <LoopForever>
  ldr   r0, =_estack
 8006274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800627c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006280:	08014660 	.word	0x08014660
  ldr r2, =_sbss
 8006284:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8006288:	20009434 	.word	0x20009434

0800628c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800628c:	e7fe      	b.n	800628c <ADC1_2_IRQHandler>

0800628e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006298:	2003      	movs	r0, #3
 800629a:	f001 fd15 	bl	8007cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800629e:	2000      	movs	r0, #0
 80062a0:	f000 f80e 	bl	80062c0 <HAL_InitTick>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	71fb      	strb	r3, [r7, #7]
 80062ae:	e001      	b.n	80062b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062b0:	f7ff fbec 	bl	8005a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062b4:	79fb      	ldrb	r3, [r7, #7]

}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80062cc:	4b16      	ldr	r3, [pc, #88]	; (8006328 <HAL_InitTick+0x68>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d022      	beq.n	800631a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_InitTick+0x6c>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b13      	ldr	r3, [pc, #76]	; (8006328 <HAL_InitTick+0x68>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 fd20 	bl	8007d2e <HAL_SYSTICK_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10f      	bne.n	8006314 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b0f      	cmp	r3, #15
 80062f8:	d809      	bhi.n	800630e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062fa:	2200      	movs	r2, #0
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	f001 fcec 	bl	8007cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <HAL_InitTick+0x70>)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e007      	b.n	800631e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
 8006312:	e004      	b.n	800631e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
 8006318:	e001      	b.n	800631e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000008 	.word	0x20000008
 800632c:	20000000 	.word	0x20000000
 8006330:	20000004 	.word	0x20000004

08006334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_IncTick+0x1c>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <HAL_IncTick+0x20>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4413      	add	r3, r2
 8006342:	4a03      	ldr	r2, [pc, #12]	; (8006350 <HAL_IncTick+0x1c>)
 8006344:	6013      	str	r3, [r2, #0]
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20009420 	.word	0x20009420
 8006354:	20000008 	.word	0x20000008

08006358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  return uwTick;
 800635c:	4b03      	ldr	r3, [pc, #12]	; (800636c <HAL_GetTick+0x14>)
 800635e:	681b      	ldr	r3, [r3, #0]
}
 8006360:	4618      	mov	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20009420 	.word	0x20009420

08006370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006378:	f7ff ffee 	bl	8006358 <HAL_GetTick>
 800637c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d004      	beq.n	8006394 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <HAL_Delay+0x40>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006394:	bf00      	nop
 8006396:	f7ff ffdf 	bl	8006358 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d8f7      	bhi.n	8006396 <HAL_Delay+0x26>
  {
  }
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20000008 	.word	0x20000008

080063b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	609a      	str	r2, [r3, #8]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3360      	adds	r3, #96	; 0x60
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	4b08      	ldr	r3, [pc, #32]	; (8006460 <LL_ADC_SetOffset+0x44>)
 800643e:	4013      	ands	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	03fff000 	.word	0x03fff000

08006464 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3360      	adds	r3, #96	; 0x60
 8006472:	461a      	mov	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3360      	adds	r3, #96	; 0x60
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3360      	adds	r3, #96	; 0x60
 80064d6:	461a      	mov	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3360      	adds	r3, #96	; 0x60
 800650c:	461a      	mov	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	431a      	orrs	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	615a      	str	r2, [r3, #20]
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3330      	adds	r3, #48	; 0x30
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	f003 030c 	and.w	r3, r3, #12
 800659a:	4413      	add	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	211f      	movs	r1, #31
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	401a      	ands	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0e9b      	lsrs	r3, r3, #26
 80065b6:	f003 011f 	and.w	r1, r3, #31
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	431a      	orrs	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b087      	sub	sp, #28
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3314      	adds	r3, #20
 80065e6:	461a      	mov	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	0e5b      	lsrs	r3, r3, #25
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	4413      	add	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2107      	movs	r1, #7
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	43db      	mvns	r3, r3
 800660a:	401a      	ands	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	0d1b      	lsrs	r3, r3, #20
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	fa01 f303 	lsl.w	r3, r1, r3
 800661a:	431a      	orrs	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a0f      	ldr	r2, [pc, #60]	; (8006678 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10a      	bne.n	8006656 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664c:	431a      	orrs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006654:	e00a      	b.n	800666c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006662:	43db      	mvns	r3, r3
 8006664:	401a      	ands	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	407f0000 	.word	0x407f0000

0800667c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 031f 	and.w	r3, r3, #31
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80066c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6093      	str	r3, [r2, #8]
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ec:	d101      	bne.n	80066f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800673c:	d101      	bne.n	8006742 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006764:	f043 0201 	orr.w	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <LL_ADC_IsEnabled+0x18>
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <LL_ADC_IsEnabled+0x1a>
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067b2:	f043 0204 	orr.w	r2, r3, #4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d101      	bne.n	80067de <LL_ADC_REG_IsConversionOngoing+0x18>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d101      	bne.n	8006804 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006814:	b590      	push	{r4, r7, lr}
 8006816:	b089      	sub	sp, #36	; 0x24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006820:	2300      	movs	r3, #0
 8006822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e1af      	b.n	8006b8e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fa fe25 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff3f 	bl	80066d8 <LL_ADC_IsDeepPowerDownEnabled>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff ff25 	bl	80066b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff ff5a 	bl	8006728 <LL_ADC_IsInternalRegulatorEnabled>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d115      	bne.n	80068a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff3e 	bl	8006700 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006884:	4b9f      	ldr	r3, [pc, #636]	; (8006b04 <HAL_ADC_Init+0x2f0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	099b      	lsrs	r3, r3, #6
 800688a:	4a9f      	ldr	r2, [pc, #636]	; (8006b08 <HAL_ADC_Init+0x2f4>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	099b      	lsrs	r3, r3, #6
 8006892:	3301      	adds	r3, #1
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006898:	e002      	b.n	80068a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3b01      	subs	r3, #1
 800689e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f9      	bne.n	800689a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff ff3c 	bl	8006728 <LL_ADC_IsInternalRegulatorEnabled>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10d      	bne.n	80068d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f043 0210 	orr.w	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff ff75 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 80068dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 8148 	bne.w	8006b7c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 8144 	bne.w	8006b7c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80068fc:	f043 0202 	orr.w	r2, r3, #2
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff ff35 	bl	8006778 <LL_ADC_IsEnabled>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d141      	bne.n	8006998 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800691c:	d004      	beq.n	8006928 <HAL_ADC_Init+0x114>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a7a      	ldr	r2, [pc, #488]	; (8006b0c <HAL_ADC_Init+0x2f8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10f      	bne.n	8006948 <HAL_ADC_Init+0x134>
 8006928:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800692c:	f7ff ff24 	bl	8006778 <LL_ADC_IsEnabled>
 8006930:	4604      	mov	r4, r0
 8006932:	4876      	ldr	r0, [pc, #472]	; (8006b0c <HAL_ADC_Init+0x2f8>)
 8006934:	f7ff ff20 	bl	8006778 <LL_ADC_IsEnabled>
 8006938:	4603      	mov	r3, r0
 800693a:	4323      	orrs	r3, r4
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	e012      	b.n	800696e <HAL_ADC_Init+0x15a>
 8006948:	4871      	ldr	r0, [pc, #452]	; (8006b10 <HAL_ADC_Init+0x2fc>)
 800694a:	f7ff ff15 	bl	8006778 <LL_ADC_IsEnabled>
 800694e:	4604      	mov	r4, r0
 8006950:	4870      	ldr	r0, [pc, #448]	; (8006b14 <HAL_ADC_Init+0x300>)
 8006952:	f7ff ff11 	bl	8006778 <LL_ADC_IsEnabled>
 8006956:	4603      	mov	r3, r0
 8006958:	431c      	orrs	r4, r3
 800695a:	486f      	ldr	r0, [pc, #444]	; (8006b18 <HAL_ADC_Init+0x304>)
 800695c:	f7ff ff0c 	bl	8006778 <LL_ADC_IsEnabled>
 8006960:	4603      	mov	r3, r0
 8006962:	4323      	orrs	r3, r4
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d012      	beq.n	8006998 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800697a:	d004      	beq.n	8006986 <HAL_ADC_Init+0x172>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a62      	ldr	r2, [pc, #392]	; (8006b0c <HAL_ADC_Init+0x2f8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d101      	bne.n	800698a <HAL_ADC_Init+0x176>
 8006986:	4a65      	ldr	r2, [pc, #404]	; (8006b1c <HAL_ADC_Init+0x308>)
 8006988:	e000      	b.n	800698c <HAL_ADC_Init+0x178>
 800698a:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <HAL_ADC_Init+0x30c>)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f7ff fd0e 	bl	80063b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7f5b      	ldrb	r3, [r3, #29]
 800699c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80069a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80069ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069b8:	4313      	orrs	r3, r2
 80069ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d106      	bne.n	80069d4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	3b01      	subs	r3, #1
 80069cc:	045b      	lsls	r3, r3, #17
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	4b4b      	ldr	r3, [pc, #300]	; (8006b24 <HAL_ADC_Init+0x310>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	69b9      	ldr	r1, [r7, #24]
 8006a00:	430b      	orrs	r3, r1
 8006a02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff fed1 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 8006a24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fede 	bl	80067ec <LL_ADC_INJ_IsConversionOngoing>
 8006a30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d17f      	bne.n	8006b38 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d17c      	bne.n	8006b38 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5a:	f023 0302 	bic.w	r3, r3, #2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	69b9      	ldr	r1, [r7, #24]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6911      	ldr	r1, [r2, #16]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006a9e:	e013      	b.n	8006ac8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006aae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ac4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d12a      	bne.n	8006b28 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ae8:	4311      	orrs	r1, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006aee:	4311      	orrs	r1, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006af4:	430a      	orrs	r2, r1
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	611a      	str	r2, [r3, #16]
 8006b02:	e019      	b.n	8006b38 <HAL_ADC_Init+0x324>
 8006b04:	20000000 	.word	0x20000000
 8006b08:	053e2d63 	.word	0x053e2d63
 8006b0c:	50000100 	.word	0x50000100
 8006b10:	50000400 	.word	0x50000400
 8006b14:	50000500 	.word	0x50000500
 8006b18:	50000600 	.word	0x50000600
 8006b1c:	50000300 	.word	0x50000300
 8006b20:	50000700 	.word	0x50000700
 8006b24:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0201 	bic.w	r2, r2, #1
 8006b36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10c      	bne.n	8006b5a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f023 010f 	bic.w	r1, r3, #15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1e5a      	subs	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
 8006b58:	e007      	b.n	8006b6a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 020f 	bic.w	r2, r2, #15
 8006b68:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	f043 0201 	orr.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b7a:	e007      	b.n	8006b8c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	f043 0210 	orr.w	r2, r3, #16
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3724      	adds	r7, #36	; 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop

08006b98 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ba8:	d004      	beq.n	8006bb4 <HAL_ADC_Start+0x1c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a67      	ldr	r2, [pc, #412]	; (8006d4c <HAL_ADC_Start+0x1b4>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d101      	bne.n	8006bb8 <HAL_ADC_Start+0x20>
 8006bb4:	4b66      	ldr	r3, [pc, #408]	; (8006d50 <HAL_ADC_Start+0x1b8>)
 8006bb6:	e000      	b.n	8006bba <HAL_ADC_Start+0x22>
 8006bb8:	4b66      	ldr	r3, [pc, #408]	; (8006d54 <HAL_ADC_Start+0x1bc>)
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fd5e 	bl	800667c <LL_ADC_GetMultimode>
 8006bc0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fdfd 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f040 80b4 	bne.w	8006d3c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_ADC_Start+0x4a>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e0af      	b.n	8006d42 <HAL_ADC_Start+0x1aa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fe0c 	bl	8007808 <ADC_Enable>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 809b 	bne.w	8006d32 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a4d      	ldr	r2, [pc, #308]	; (8006d4c <HAL_ADC_Start+0x1b4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_ADC_Start+0x96>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a4e      	ldr	r2, [pc, #312]	; (8006d58 <HAL_ADC_Start+0x1c0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d002      	beq.n	8006c2a <HAL_ADC_Start+0x92>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	e003      	b.n	8006c32 <HAL_ADC_Start+0x9a>
 8006c2a:	4b4c      	ldr	r3, [pc, #304]	; (8006d5c <HAL_ADC_Start+0x1c4>)
 8006c2c:	e001      	b.n	8006c32 <HAL_ADC_Start+0x9a>
 8006c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d002      	beq.n	8006c40 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c58:	d106      	bne.n	8006c68 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5e:	f023 0206 	bic.w	r2, r3, #6
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	661a      	str	r2, [r3, #96]	; 0x60
 8006c66:	e002      	b.n	8006c6e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	221c      	movs	r2, #28
 8006c74:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a32      	ldr	r2, [pc, #200]	; (8006d4c <HAL_ADC_Start+0x1b4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_ADC_Start+0x104>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a32      	ldr	r2, [pc, #200]	; (8006d58 <HAL_ADC_Start+0x1c0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d002      	beq.n	8006c98 <HAL_ADC_Start+0x100>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	e003      	b.n	8006ca0 <HAL_ADC_Start+0x108>
 8006c98:	4b30      	ldr	r3, [pc, #192]	; (8006d5c <HAL_ADC_Start+0x1c4>)
 8006c9a:	e001      	b.n	8006ca0 <HAL_ADC_Start+0x108>
 8006c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d008      	beq.n	8006cba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b05      	cmp	r3, #5
 8006cb2:	d002      	beq.n	8006cba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d114      	bne.n	8006ce4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ccc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006cd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fd5e 	bl	800679e <LL_ADC_REG_StartConversion>
 8006ce2:	e02d      	b.n	8006d40 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <HAL_ADC_Start+0x1b4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_ADC_Start+0x176>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <HAL_ADC_Start+0x1c0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d002      	beq.n	8006d0a <HAL_ADC_Start+0x172>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	e003      	b.n	8006d12 <HAL_ADC_Start+0x17a>
 8006d0a:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <HAL_ADC_Start+0x1c4>)
 8006d0c:	e001      	b.n	8006d12 <HAL_ADC_Start+0x17a>
 8006d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d12:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00f      	beq.n	8006d40 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d30:	e006      	b.n	8006d40 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006d3a:	e001      	b.n	8006d40 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	50000100 	.word	0x50000100
 8006d50:	50000300 	.word	0x50000300
 8006d54:	50000700 	.word	0x50000700
 8006d58:	50000500 	.word	0x50000500
 8006d5c:	50000400 	.word	0x50000400

08006d60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d72:	d004      	beq.n	8006d7e <HAL_ADC_PollForConversion+0x1e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a77      	ldr	r2, [pc, #476]	; (8006f58 <HAL_ADC_PollForConversion+0x1f8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <HAL_ADC_PollForConversion+0x22>
 8006d7e:	4b77      	ldr	r3, [pc, #476]	; (8006f5c <HAL_ADC_PollForConversion+0x1fc>)
 8006d80:	e000      	b.n	8006d84 <HAL_ADC_PollForConversion+0x24>
 8006d82:	4b77      	ldr	r3, [pc, #476]	; (8006f60 <HAL_ADC_PollForConversion+0x200>)
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fc79 	bl	800667c <LL_ADC_GetMultimode>
 8006d8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d102      	bne.n	8006d9a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006d94:	2308      	movs	r3, #8
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	e037      	b.n	8006e0a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d002      	beq.n	8006dac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b09      	cmp	r3, #9
 8006daa:	d111      	bne.n	8006dd0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e0c1      	b.n	8006f4e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006dca:	2304      	movs	r3, #4
 8006dcc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006dce:	e01c      	b.n	8006e0a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dd8:	d004      	beq.n	8006de4 <HAL_ADC_PollForConversion+0x84>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a5e      	ldr	r2, [pc, #376]	; (8006f58 <HAL_ADC_PollForConversion+0x1f8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <HAL_ADC_PollForConversion+0x88>
 8006de4:	4b5d      	ldr	r3, [pc, #372]	; (8006f5c <HAL_ADC_PollForConversion+0x1fc>)
 8006de6:	e000      	b.n	8006dea <HAL_ADC_PollForConversion+0x8a>
 8006de8:	4b5d      	ldr	r3, [pc, #372]	; (8006f60 <HAL_ADC_PollForConversion+0x200>)
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fc54 	bl	8006698 <LL_ADC_GetMultiDMATransfer>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	f043 0220 	orr.w	r2, r3, #32
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0a3      	b.n	8006f4e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006e06:	2304      	movs	r3, #4
 8006e08:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006e0a:	f7ff faa5 	bl	8006358 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006e10:	e021      	b.n	8006e56 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d01d      	beq.n	8006e56 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006e1a:	f7ff fa9d 	bl	8006358 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <HAL_ADC_PollForConversion+0xd0>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d112      	bne.n	8006e56 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e07b      	b.n	8006f4e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0d6      	beq.n	8006e12 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fb6f 	bl	8006558 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01c      	beq.n	8006eba <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7f5b      	ldrb	r3, [r3, #29]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d118      	bne.n	8006eba <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d111      	bne.n	8006eba <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f043 0201 	orr.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <HAL_ADC_PollForConversion+0x1f8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_ADC_PollForConversion+0x178>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a26      	ldr	r2, [pc, #152]	; (8006f64 <HAL_ADC_PollForConversion+0x204>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d002      	beq.n	8006ed4 <HAL_ADC_PollForConversion+0x174>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	e003      	b.n	8006edc <HAL_ADC_PollForConversion+0x17c>
 8006ed4:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <HAL_ADC_PollForConversion+0x208>)
 8006ed6:	e001      	b.n	8006edc <HAL_ADC_PollForConversion+0x17c>
 8006ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d008      	beq.n	8006ef6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d002      	beq.n	8006ef6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b09      	cmp	r3, #9
 8006ef4:	d104      	bne.n	8006f00 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e014      	b.n	8006f2a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <HAL_ADC_PollForConversion+0x1f8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_ADC_PollForConversion+0x1be>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_ADC_PollForConversion+0x204>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d002      	beq.n	8006f1a <HAL_ADC_PollForConversion+0x1ba>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	e003      	b.n	8006f22 <HAL_ADC_PollForConversion+0x1c2>
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <HAL_ADC_PollForConversion+0x208>)
 8006f1c:	e001      	b.n	8006f22 <HAL_ADC_PollForConversion+0x1c2>
 8006f1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006f22:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d104      	bne.n	8006f3a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2208      	movs	r2, #8
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e008      	b.n	8006f4c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d103      	bne.n	8006f4c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	220c      	movs	r2, #12
 8006f4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	50000100 	.word	0x50000100
 8006f5c:	50000300 	.word	0x50000300
 8006f60:	50000700 	.word	0x50000700
 8006f64:	50000500 	.word	0x50000500
 8006f68:	50000400 	.word	0x50000400

08006f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b0b6      	sub	sp, #216	; 0xd8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d102      	bne.n	8006fac <HAL_ADC_ConfigChannel+0x24>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	f000 bc13 	b.w	80077d2 <HAL_ADC_ConfigChannel+0x84a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fc04 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 83f3 	bne.w	80077ac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7ff fad3 	bl	800657e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fbf2 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 8006fe2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fbfe 	bl	80067ec <LL_ADC_INJ_IsConversionOngoing>
 8006ff0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ff4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 81d9 	bne.w	80073b0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 81d4 	bne.w	80073b0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007010:	d10f      	bne.n	8007032 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	4619      	mov	r1, r3
 800701e:	f7ff fada 	bl	80065d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fa81 	bl	8006532 <LL_ADC_SetSamplingTimeCommonConfig>
 8007030:	e00e      	b.n	8007050 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6819      	ldr	r1, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	461a      	mov	r2, r3
 8007040:	f7ff fac9 	bl	80065d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fa71 	bl	8006532 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	08db      	lsrs	r3, r3, #3
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b04      	cmp	r3, #4
 8007070:	d022      	beq.n	80070b8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6919      	ldr	r1, [r3, #16]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007082:	f7ff f9cb 	bl	800641c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6919      	ldr	r1, [r3, #16]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	461a      	mov	r2, r3
 8007094:	f7ff fa17 	bl	80064c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	6919      	ldr	r1, [r3, #16]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	7f1b      	ldrb	r3, [r3, #28]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d102      	bne.n	80070ae <HAL_ADC_ConfigChannel+0x126>
 80070a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ac:	e000      	b.n	80070b0 <HAL_ADC_ConfigChannel+0x128>
 80070ae:	2300      	movs	r3, #0
 80070b0:	461a      	mov	r2, r3
 80070b2:	f7ff fa23 	bl	80064fc <LL_ADC_SetOffsetSaturation>
 80070b6:	e17b      	b.n	80073b0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff f9d0 	bl	8006464 <LL_ADC_GetOffsetChannel>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <HAL_ADC_ConfigChannel+0x15c>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff f9c5 	bl	8006464 <LL_ADC_GetOffsetChannel>
 80070da:	4603      	mov	r3, r0
 80070dc:	0e9b      	lsrs	r3, r3, #26
 80070de:	f003 021f 	and.w	r2, r3, #31
 80070e2:	e01e      	b.n	8007122 <HAL_ADC_ConfigChannel+0x19a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff f9ba 	bl	8006464 <LL_ADC_GetOffsetChannel>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070fa:	fa93 f3a3 	rbit	r3, r3
 80070fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800710a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007112:	2320      	movs	r3, #32
 8007114:	e004      	b.n	8007120 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800711a:	fab3 f383 	clz	r3, r3
 800711e:	b2db      	uxtb	r3, r3
 8007120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <HAL_ADC_ConfigChannel+0x1b2>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	0e9b      	lsrs	r3, r3, #26
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	e018      	b.n	800716c <HAL_ADC_ConfigChannel+0x1e4>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007146:	fa93 f3a3 	rbit	r3, r3
 800714a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800714e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800715e:	2320      	movs	r3, #32
 8007160:	e004      	b.n	800716c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007166:	fab3 f383 	clz	r3, r3
 800716a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800716c:	429a      	cmp	r2, r3
 800716e:	d106      	bne.n	800717e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff f989 	bl	8006490 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2101      	movs	r1, #1
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f96d 	bl	8006464 <LL_ADC_GetOffsetChannel>
 800718a:	4603      	mov	r3, r0
 800718c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x222>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2101      	movs	r1, #1
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff f962 	bl	8006464 <LL_ADC_GetOffsetChannel>
 80071a0:	4603      	mov	r3, r0
 80071a2:	0e9b      	lsrs	r3, r3, #26
 80071a4:	f003 021f 	and.w	r2, r3, #31
 80071a8:	e01e      	b.n	80071e8 <HAL_ADC_ConfigChannel+0x260>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff f957 	bl	8006464 <LL_ADC_GetOffsetChannel>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071c0:	fa93 f3a3 	rbit	r3, r3
 80071c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80071c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80071d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80071d8:	2320      	movs	r3, #32
 80071da:	e004      	b.n	80071e6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80071dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e0:	fab3 f383 	clz	r3, r3
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x278>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	0e9b      	lsrs	r3, r3, #26
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	e018      	b.n	8007232 <HAL_ADC_ConfigChannel+0x2aa>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800720c:	fa93 f3a3 	rbit	r3, r3
 8007210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800721c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007224:	2320      	movs	r3, #32
 8007226:	e004      	b.n	8007232 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800722c:	fab3 f383 	clz	r3, r3
 8007230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007232:	429a      	cmp	r2, r3
 8007234:	d106      	bne.n	8007244 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2200      	movs	r2, #0
 800723c:	2101      	movs	r1, #1
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff f926 	bl	8006490 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2102      	movs	r1, #2
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff f90a 	bl	8006464 <LL_ADC_GetOffsetChannel>
 8007250:	4603      	mov	r3, r0
 8007252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x2e8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2102      	movs	r1, #2
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff f8ff 	bl	8006464 <LL_ADC_GetOffsetChannel>
 8007266:	4603      	mov	r3, r0
 8007268:	0e9b      	lsrs	r3, r3, #26
 800726a:	f003 021f 	and.w	r2, r3, #31
 800726e:	e01e      	b.n	80072ae <HAL_ADC_ConfigChannel+0x326>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2102      	movs	r1, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff f8f4 	bl	8006464 <LL_ADC_GetOffsetChannel>
 800727c:	4603      	mov	r3, r0
 800727e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007286:	fa93 f3a3 	rbit	r3, r3
 800728a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800728e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007296:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800729e:	2320      	movs	r3, #32
 80072a0:	e004      	b.n	80072ac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80072a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072a6:	fab3 f383 	clz	r3, r3
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <HAL_ADC_ConfigChannel+0x33e>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	0e9b      	lsrs	r3, r3, #26
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	e016      	b.n	80072f4 <HAL_ADC_ConfigChannel+0x36c>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072d2:	fa93 f3a3 	rbit	r3, r3
 80072d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80072d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80072de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80072e6:	2320      	movs	r3, #32
 80072e8:	e004      	b.n	80072f4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80072ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ee:	fab3 f383 	clz	r3, r3
 80072f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d106      	bne.n	8007306 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2102      	movs	r1, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff f8c5 	bl	8006490 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2103      	movs	r1, #3
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff f8a9 	bl	8006464 <LL_ADC_GetOffsetChannel>
 8007312:	4603      	mov	r3, r0
 8007314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x3aa>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2103      	movs	r1, #3
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff f89e 	bl	8006464 <LL_ADC_GetOffsetChannel>
 8007328:	4603      	mov	r3, r0
 800732a:	0e9b      	lsrs	r3, r3, #26
 800732c:	f003 021f 	and.w	r2, r3, #31
 8007330:	e017      	b.n	8007362 <HAL_ADC_ConfigChannel+0x3da>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2103      	movs	r1, #3
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff f893 	bl	8006464 <LL_ADC_GetOffsetChannel>
 800733e:	4603      	mov	r3, r0
 8007340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007344:	fa93 f3a3 	rbit	r3, r3
 8007348:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800734a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800734c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800734e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007354:	2320      	movs	r3, #32
 8007356:	e003      	b.n	8007360 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735a:	fab3 f383 	clz	r3, r3
 800735e:	b2db      	uxtb	r3, r3
 8007360:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800736a:	2b00      	cmp	r3, #0
 800736c:	d105      	bne.n	800737a <HAL_ADC_ConfigChannel+0x3f2>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	0e9b      	lsrs	r3, r3, #26
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	e011      	b.n	800739e <HAL_ADC_ConfigChannel+0x416>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007382:	fa93 f3a3 	rbit	r3, r3
 8007386:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800738c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007392:	2320      	movs	r3, #32
 8007394:	e003      	b.n	800739e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007398:	fab3 f383 	clz	r3, r3
 800739c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800739e:	429a      	cmp	r2, r3
 80073a0:	d106      	bne.n	80073b0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2103      	movs	r1, #3
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff f870 	bl	8006490 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff f9df 	bl	8006778 <LL_ADC_IsEnabled>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 813d 	bne.w	800763c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6819      	ldr	r1, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7ff f92c 	bl	800662c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	4aa2      	ldr	r2, [pc, #648]	; (8007664 <HAL_ADC_ConfigChannel+0x6dc>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	f040 812e 	bne.w	800763c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10b      	bne.n	8007408 <HAL_ADC_ConfigChannel+0x480>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	0e9b      	lsrs	r3, r3, #26
 80073f6:	3301      	adds	r3, #1
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b09      	cmp	r3, #9
 80073fe:	bf94      	ite	ls
 8007400:	2301      	movls	r3, #1
 8007402:	2300      	movhi	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	e019      	b.n	800743c <HAL_ADC_ConfigChannel+0x4b4>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007410:	fa93 f3a3 	rbit	r3, r3
 8007414:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007418:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007420:	2320      	movs	r3, #32
 8007422:	e003      	b.n	800742c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007426:	fab3 f383 	clz	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	3301      	adds	r3, #1
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	2b09      	cmp	r3, #9
 8007434:	bf94      	ite	ls
 8007436:	2301      	movls	r3, #1
 8007438:	2300      	movhi	r3, #0
 800743a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800743c:	2b00      	cmp	r3, #0
 800743e:	d079      	beq.n	8007534 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007448:	2b00      	cmp	r3, #0
 800744a:	d107      	bne.n	800745c <HAL_ADC_ConfigChannel+0x4d4>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	0e9b      	lsrs	r3, r3, #26
 8007452:	3301      	adds	r3, #1
 8007454:	069b      	lsls	r3, r3, #26
 8007456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800745a:	e015      	b.n	8007488 <HAL_ADC_ConfigChannel+0x500>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007464:	fa93 f3a3 	rbit	r3, r3
 8007468:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800746a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800746e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007474:	2320      	movs	r3, #32
 8007476:	e003      	b.n	8007480 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747a:	fab3 f383 	clz	r3, r3
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3301      	adds	r3, #1
 8007482:	069b      	lsls	r3, r3, #26
 8007484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_ADC_ConfigChannel+0x520>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	0e9b      	lsrs	r3, r3, #26
 800749a:	3301      	adds	r3, #1
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2101      	movs	r1, #1
 80074a2:	fa01 f303 	lsl.w	r3, r1, r3
 80074a6:	e017      	b.n	80074d8 <HAL_ADC_ConfigChannel+0x550>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b0:	fa93 f3a3 	rbit	r3, r3
 80074b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80074b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80074ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80074c0:	2320      	movs	r3, #32
 80074c2:	e003      	b.n	80074cc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80074c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c6:	fab3 f383 	clz	r3, r3
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	3301      	adds	r3, #1
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	2101      	movs	r1, #1
 80074d4:	fa01 f303 	lsl.w	r3, r1, r3
 80074d8:	ea42 0103 	orr.w	r1, r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <HAL_ADC_ConfigChannel+0x576>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	0e9b      	lsrs	r3, r3, #26
 80074ee:	3301      	adds	r3, #1
 80074f0:	f003 021f 	and.w	r2, r3, #31
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	051b      	lsls	r3, r3, #20
 80074fc:	e018      	b.n	8007530 <HAL_ADC_ConfigChannel+0x5a8>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	fa93 f3a3 	rbit	r3, r3
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007516:	2320      	movs	r3, #32
 8007518:	e003      	b.n	8007522 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800751a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751c:	fab3 f383 	clz	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3301      	adds	r3, #1
 8007524:	f003 021f 	and.w	r2, r3, #31
 8007528:	4613      	mov	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007530:	430b      	orrs	r3, r1
 8007532:	e07e      	b.n	8007632 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <HAL_ADC_ConfigChannel+0x5c8>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	0e9b      	lsrs	r3, r3, #26
 8007546:	3301      	adds	r3, #1
 8007548:	069b      	lsls	r3, r3, #26
 800754a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800754e:	e015      	b.n	800757c <HAL_ADC_ConfigChannel+0x5f4>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	fa93 f3a3 	rbit	r3, r3
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007568:	2320      	movs	r3, #32
 800756a:	e003      	b.n	8007574 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	fab3 f383 	clz	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	3301      	adds	r3, #1
 8007576:	069b      	lsls	r3, r3, #26
 8007578:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <HAL_ADC_ConfigChannel+0x614>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	0e9b      	lsrs	r3, r3, #26
 800758e:	3301      	adds	r3, #1
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2101      	movs	r1, #1
 8007596:	fa01 f303 	lsl.w	r3, r1, r3
 800759a:	e017      	b.n	80075cc <HAL_ADC_ConfigChannel+0x644>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	fa93 f3a3 	rbit	r3, r3
 80075a8:	61fb      	str	r3, [r7, #28]
  return result;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80075b4:	2320      	movs	r3, #32
 80075b6:	e003      	b.n	80075c0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	fab3 f383 	clz	r3, r3
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	3301      	adds	r3, #1
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	2101      	movs	r1, #1
 80075c8:	fa01 f303 	lsl.w	r3, r1, r3
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10d      	bne.n	80075f8 <HAL_ADC_ConfigChannel+0x670>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	0e9b      	lsrs	r3, r3, #26
 80075e2:	3301      	adds	r3, #1
 80075e4:	f003 021f 	and.w	r2, r3, #31
 80075e8:	4613      	mov	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	3b1e      	subs	r3, #30
 80075f0:	051b      	lsls	r3, r3, #20
 80075f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075f6:	e01b      	b.n	8007630 <HAL_ADC_ConfigChannel+0x6a8>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	fa93 f3a3 	rbit	r3, r3
 8007604:	613b      	str	r3, [r7, #16]
  return result;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007610:	2320      	movs	r3, #32
 8007612:	e003      	b.n	800761c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	fab3 f383 	clz	r3, r3
 800761a:	b2db      	uxtb	r3, r3
 800761c:	3301      	adds	r3, #1
 800761e:	f003 021f 	and.w	r2, r3, #31
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	3b1e      	subs	r3, #30
 800762a:	051b      	lsls	r3, r3, #20
 800762c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007630:	430b      	orrs	r3, r1
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	6892      	ldr	r2, [r2, #8]
 8007636:	4619      	mov	r1, r3
 8007638:	f7fe ffcd 	bl	80065d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b09      	ldr	r3, [pc, #36]	; (8007668 <HAL_ADC_ConfigChannel+0x6e0>)
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80be 	beq.w	80077c6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007652:	d004      	beq.n	800765e <HAL_ADC_ConfigChannel+0x6d6>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a04      	ldr	r2, [pc, #16]	; (800766c <HAL_ADC_ConfigChannel+0x6e4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10a      	bne.n	8007674 <HAL_ADC_ConfigChannel+0x6ec>
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <HAL_ADC_ConfigChannel+0x6e8>)
 8007660:	e009      	b.n	8007676 <HAL_ADC_ConfigChannel+0x6ee>
 8007662:	bf00      	nop
 8007664:	407f0000 	.word	0x407f0000
 8007668:	80080000 	.word	0x80080000
 800766c:	50000100 	.word	0x50000100
 8007670:	50000300 	.word	0x50000300
 8007674:	4b59      	ldr	r3, [pc, #356]	; (80077dc <HAL_ADC_ConfigChannel+0x854>)
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fec2 	bl	8006400 <LL_ADC_GetCommonPathInternalCh>
 800767c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a56      	ldr	r2, [pc, #344]	; (80077e0 <HAL_ADC_ConfigChannel+0x858>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_ADC_ConfigChannel+0x70c>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a55      	ldr	r2, [pc, #340]	; (80077e4 <HAL_ADC_ConfigChannel+0x85c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d13a      	bne.n	800770a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d134      	bne.n	800770a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076a8:	d005      	beq.n	80076b6 <HAL_ADC_ConfigChannel+0x72e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4e      	ldr	r2, [pc, #312]	; (80077e8 <HAL_ADC_ConfigChannel+0x860>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	f040 8085 	bne.w	80077c0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076be:	d004      	beq.n	80076ca <HAL_ADC_ConfigChannel+0x742>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a49      	ldr	r2, [pc, #292]	; (80077ec <HAL_ADC_ConfigChannel+0x864>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_ADC_ConfigChannel+0x746>
 80076ca:	4a49      	ldr	r2, [pc, #292]	; (80077f0 <HAL_ADC_ConfigChannel+0x868>)
 80076cc:	e000      	b.n	80076d0 <HAL_ADC_ConfigChannel+0x748>
 80076ce:	4a43      	ldr	r2, [pc, #268]	; (80077dc <HAL_ADC_ConfigChannel+0x854>)
 80076d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fe7d 	bl	80063da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80076e0:	4b44      	ldr	r3, [pc, #272]	; (80077f4 <HAL_ADC_ConfigChannel+0x86c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	099b      	lsrs	r3, r3, #6
 80076e6:	4a44      	ldr	r2, [pc, #272]	; (80077f8 <HAL_ADC_ConfigChannel+0x870>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	4613      	mov	r3, r2
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80076fa:	e002      	b.n	8007702 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3b01      	subs	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f9      	bne.n	80076fc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007708:	e05a      	b.n	80077c0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a3b      	ldr	r2, [pc, #236]	; (80077fc <HAL_ADC_ConfigChannel+0x874>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d125      	bne.n	8007760 <HAL_ADC_ConfigChannel+0x7d8>
 8007714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11f      	bne.n	8007760 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a31      	ldr	r2, [pc, #196]	; (80077ec <HAL_ADC_ConfigChannel+0x864>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d104      	bne.n	8007734 <HAL_ADC_ConfigChannel+0x7ac>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a34      	ldr	r2, [pc, #208]	; (8007800 <HAL_ADC_ConfigChannel+0x878>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d047      	beq.n	80077c4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800773c:	d004      	beq.n	8007748 <HAL_ADC_ConfigChannel+0x7c0>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2a      	ldr	r2, [pc, #168]	; (80077ec <HAL_ADC_ConfigChannel+0x864>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d101      	bne.n	800774c <HAL_ADC_ConfigChannel+0x7c4>
 8007748:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <HAL_ADC_ConfigChannel+0x868>)
 800774a:	e000      	b.n	800774e <HAL_ADC_ConfigChannel+0x7c6>
 800774c:	4a23      	ldr	r2, [pc, #140]	; (80077dc <HAL_ADC_ConfigChannel+0x854>)
 800774e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f7fe fe3e 	bl	80063da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800775e:	e031      	b.n	80077c4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a27      	ldr	r2, [pc, #156]	; (8007804 <HAL_ADC_ConfigChannel+0x87c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d12d      	bne.n	80077c6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800776a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800776e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d127      	bne.n	80077c6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <HAL_ADC_ConfigChannel+0x864>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007788:	d004      	beq.n	8007794 <HAL_ADC_ConfigChannel+0x80c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a17      	ldr	r2, [pc, #92]	; (80077ec <HAL_ADC_ConfigChannel+0x864>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <HAL_ADC_ConfigChannel+0x810>
 8007794:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <HAL_ADC_ConfigChannel+0x868>)
 8007796:	e000      	b.n	800779a <HAL_ADC_ConfigChannel+0x812>
 8007798:	4a10      	ldr	r2, [pc, #64]	; (80077dc <HAL_ADC_ConfigChannel+0x854>)
 800779a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800779e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7fe fe18 	bl	80063da <LL_ADC_SetCommonPathInternalCh>
 80077aa:	e00c      	b.n	80077c6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80077be:	e002      	b.n	80077c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80077ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	37d8      	adds	r7, #216	; 0xd8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	50000700 	.word	0x50000700
 80077e0:	c3210000 	.word	0xc3210000
 80077e4:	90c00010 	.word	0x90c00010
 80077e8:	50000600 	.word	0x50000600
 80077ec:	50000100 	.word	0x50000100
 80077f0:	50000300 	.word	0x50000300
 80077f4:	20000000 	.word	0x20000000
 80077f8:	053e2d63 	.word	0x053e2d63
 80077fc:	c7520000 	.word	0xc7520000
 8007800:	50000500 	.word	0x50000500
 8007804:	cb840000 	.word	0xcb840000

08007808 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe ffaf 	bl	8006778 <LL_ADC_IsEnabled>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d14d      	bne.n	80078bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	4b28      	ldr	r3, [pc, #160]	; (80078c8 <ADC_Enable+0xc0>)
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	f043 0210 	orr.w	r2, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783e:	f043 0201 	orr.w	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e039      	b.n	80078be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe ff7e 	bl	8006750 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007854:	f7fe fd80 	bl	8006358 <HAL_GetTick>
 8007858:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800785a:	e028      	b.n	80078ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe ff89 	bl	8006778 <LL_ADC_IsEnabled>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe ff6d 	bl	8006750 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007876:	f7fe fd6f 	bl	8006358 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d914      	bls.n	80078ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b01      	cmp	r3, #1
 8007890:	d00d      	beq.n	80078ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007896:	f043 0210 	orr.w	r2, r3, #16
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a2:	f043 0201 	orr.w	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e007      	b.n	80078be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d1cf      	bne.n	800785c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	8000003f 	.word	0x8000003f

080078cc <LL_ADC_IsEnabled>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <LL_ADC_IsEnabled+0x18>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <LL_ADC_IsEnabled+0x1a>
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b04      	cmp	r3, #4
 8007904:	d101      	bne.n	800790a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007918:	b590      	push	{r4, r7, lr}
 800791a:	b0a1      	sub	sp, #132	; 0x84
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007932:	2302      	movs	r3, #2
 8007934:	e0e7      	b.n	8007b06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800793e:	2300      	movs	r3, #0
 8007940:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007942:	2300      	movs	r3, #0
 8007944:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800794e:	d102      	bne.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007950:	4b6f      	ldr	r3, [pc, #444]	; (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007952:	60bb      	str	r3, [r7, #8]
 8007954:	e009      	b.n	800796a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a6e      	ldr	r2, [pc, #440]	; (8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d102      	bne.n	8007966 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007960:	4b6d      	ldr	r3, [pc, #436]	; (8007b18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007962:	60bb      	str	r3, [r7, #8]
 8007964:	e001      	b.n	800796a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007974:	f043 0220 	orr.w	r2, r3, #32
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0be      	b.n	8007b06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff ffb1 	bl	80078f2 <LL_ADC_REG_IsConversionOngoing>
 8007990:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff ffab 	bl	80078f2 <LL_ADC_REG_IsConversionOngoing>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f040 80a0 	bne.w	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80079a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 809c 	bne.w	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079b4:	d004      	beq.n	80079c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a55      	ldr	r2, [pc, #340]	; (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80079c0:	4b56      	ldr	r3, [pc, #344]	; (8007b1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80079c2:	e000      	b.n	80079c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80079c4:	4b56      	ldr	r3, [pc, #344]	; (8007b20 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80079c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d04b      	beq.n	8007a68 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80079d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	6859      	ldr	r1, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079e2:	035b      	lsls	r3, r3, #13
 80079e4:	430b      	orrs	r3, r1
 80079e6:	431a      	orrs	r2, r3
 80079e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079f4:	d004      	beq.n	8007a00 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a45      	ldr	r2, [pc, #276]	; (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10f      	bne.n	8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007a00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007a04:	f7ff ff62 	bl	80078cc <LL_ADC_IsEnabled>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4841      	ldr	r0, [pc, #260]	; (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a0c:	f7ff ff5e 	bl	80078cc <LL_ADC_IsEnabled>
 8007a10:	4603      	mov	r3, r0
 8007a12:	4323      	orrs	r3, r4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bf0c      	ite	eq
 8007a18:	2301      	moveq	r3, #1
 8007a1a:	2300      	movne	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	e012      	b.n	8007a46 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007a20:	483c      	ldr	r0, [pc, #240]	; (8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007a22:	f7ff ff53 	bl	80078cc <LL_ADC_IsEnabled>
 8007a26:	4604      	mov	r4, r0
 8007a28:	483b      	ldr	r0, [pc, #236]	; (8007b18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007a2a:	f7ff ff4f 	bl	80078cc <LL_ADC_IsEnabled>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	431c      	orrs	r4, r3
 8007a32:	483c      	ldr	r0, [pc, #240]	; (8007b24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007a34:	f7ff ff4a 	bl	80078cc <LL_ADC_IsEnabled>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	4323      	orrs	r3, r4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d056      	beq.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007a52:	f023 030f 	bic.w	r3, r3, #15
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	6811      	ldr	r1, [r2, #0]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	6892      	ldr	r2, [r2, #8]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	431a      	orrs	r2, r3
 8007a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007a66:	e047      	b.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a7c:	d004      	beq.n	8007a88 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a23      	ldr	r2, [pc, #140]	; (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d10f      	bne.n	8007aa8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007a88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007a8c:	f7ff ff1e 	bl	80078cc <LL_ADC_IsEnabled>
 8007a90:	4604      	mov	r4, r0
 8007a92:	481f      	ldr	r0, [pc, #124]	; (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a94:	f7ff ff1a 	bl	80078cc <LL_ADC_IsEnabled>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4323      	orrs	r3, r4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2301      	moveq	r3, #1
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e012      	b.n	8007ace <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007aa8:	481a      	ldr	r0, [pc, #104]	; (8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007aaa:	f7ff ff0f 	bl	80078cc <LL_ADC_IsEnabled>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4819      	ldr	r0, [pc, #100]	; (8007b18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007ab2:	f7ff ff0b 	bl	80078cc <LL_ADC_IsEnabled>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	431c      	orrs	r4, r3
 8007aba:	481a      	ldr	r0, [pc, #104]	; (8007b24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007abc:	f7ff ff06 	bl	80078cc <LL_ADC_IsEnabled>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	4323      	orrs	r3, r4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d012      	beq.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007ada:	f023 030f 	bic.w	r3, r3, #15
 8007ade:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ae0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ae2:	e009      	b.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae8:	f043 0220 	orr.w	r2, r3, #32
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007af6:	e000      	b.n	8007afa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007af8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007b02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3784      	adds	r7, #132	; 0x84
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd90      	pop	{r4, r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	50000100 	.word	0x50000100
 8007b14:	50000400 	.word	0x50000400
 8007b18:	50000500 	.word	0x50000500
 8007b1c:	50000300 	.word	0x50000300
 8007b20:	50000700 	.word	0x50000700
 8007b24:	50000600 	.word	0x50000600

08007b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <__NVIC_SetPriorityGrouping+0x44>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b44:	4013      	ands	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b5a:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <__NVIC_SetPriorityGrouping+0x44>)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	60d3      	str	r3, [r2, #12]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	e000ed00 	.word	0xe000ed00

08007b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <__NVIC_GetPriorityGrouping+0x18>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	0a1b      	lsrs	r3, r3, #8
 8007b7a:	f003 0307 	and.w	r3, r3, #7
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	e000ed00 	.word	0xe000ed00

08007b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	db0b      	blt.n	8007bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	f003 021f 	and.w	r2, r3, #31
 8007ba4:	4907      	ldr	r1, [pc, #28]	; (8007bc4 <__NVIC_EnableIRQ+0x38>)
 8007ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	2001      	movs	r0, #1
 8007bae:	fa00 f202 	lsl.w	r2, r0, r2
 8007bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	e000e100 	.word	0xe000e100

08007bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	db0a      	blt.n	8007bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	490c      	ldr	r1, [pc, #48]	; (8007c14 <__NVIC_SetPriority+0x4c>)
 8007be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be6:	0112      	lsls	r2, r2, #4
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	440b      	add	r3, r1
 8007bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bf0:	e00a      	b.n	8007c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	4908      	ldr	r1, [pc, #32]	; (8007c18 <__NVIC_SetPriority+0x50>)
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	3b04      	subs	r3, #4
 8007c00:	0112      	lsls	r2, r2, #4
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	440b      	add	r3, r1
 8007c06:	761a      	strb	r2, [r3, #24]
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	e000e100 	.word	0xe000e100
 8007c18:	e000ed00 	.word	0xe000ed00

08007c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b089      	sub	sp, #36	; 0x24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f1c3 0307 	rsb	r3, r3, #7
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	bf28      	it	cs
 8007c3a:	2304      	movcs	r3, #4
 8007c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3304      	adds	r3, #4
 8007c42:	2b06      	cmp	r3, #6
 8007c44:	d902      	bls.n	8007c4c <NVIC_EncodePriority+0x30>
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	3b03      	subs	r3, #3
 8007c4a:	e000      	b.n	8007c4e <NVIC_EncodePriority+0x32>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43da      	mvns	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	401a      	ands	r2, r3
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c64:	f04f 31ff 	mov.w	r1, #4294967295
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6e:	43d9      	mvns	r1, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c74:	4313      	orrs	r3, r2
         );
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3724      	adds	r7, #36	; 0x24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
	...

08007c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c94:	d301      	bcc.n	8007c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c96:	2301      	movs	r3, #1
 8007c98:	e00f      	b.n	8007cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c9a:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <SysTick_Config+0x40>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ca2:	210f      	movs	r1, #15
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	f7ff ff8e 	bl	8007bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <SysTick_Config+0x40>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cb2:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <SysTick_Config+0x40>)
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	e000e010 	.word	0xe000e010

08007cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff ff29 	bl	8007b28 <__NVIC_SetPriorityGrouping>
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cec:	f7ff ff40 	bl	8007b70 <__NVIC_GetPriorityGrouping>
 8007cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f7ff ff90 	bl	8007c1c <NVIC_EncodePriority>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff ff5f 	bl	8007bc8 <__NVIC_SetPriority>
}
 8007d0a:	bf00      	nop
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	4603      	mov	r3, r0
 8007d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ff33 	bl	8007b8c <__NVIC_EnableIRQ>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ffa4 	bl	8007c84 <SysTick_Config>
 8007d3c:	4603      	mov	r3, r0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e08d      	b.n	8007e76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <HAL_DMA_Init+0x138>)
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d80f      	bhi.n	8007d86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4b45      	ldr	r3, [pc, #276]	; (8007e84 <HAL_DMA_Init+0x13c>)
 8007d6e:	4413      	add	r3, r2
 8007d70:	4a45      	ldr	r2, [pc, #276]	; (8007e88 <HAL_DMA_Init+0x140>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	091b      	lsrs	r3, r3, #4
 8007d78:	009a      	lsls	r2, r3, #2
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a42      	ldr	r2, [pc, #264]	; (8007e8c <HAL_DMA_Init+0x144>)
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40
 8007d84:	e00e      	b.n	8007da4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4b40      	ldr	r3, [pc, #256]	; (8007e90 <HAL_DMA_Init+0x148>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	4a3d      	ldr	r2, [pc, #244]	; (8007e88 <HAL_DMA_Init+0x140>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	091b      	lsrs	r3, r3, #4
 8007d98:	009a      	lsls	r2, r3, #2
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a3c      	ldr	r2, [pc, #240]	; (8007e94 <HAL_DMA_Init+0x14c>)
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9be 	bl	8008178 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e04:	d102      	bne.n	8007e0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e20:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d010      	beq.n	8007e4c <HAL_DMA_Init+0x104>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d80c      	bhi.n	8007e4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f9de 	bl	80081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e48:	605a      	str	r2, [r3, #4]
 8007e4a:	e008      	b.n	8007e5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40020407 	.word	0x40020407
 8007e84:	bffdfff8 	.word	0xbffdfff8
 8007e88:	cccccccd 	.word	0xcccccccd
 8007e8c:	40020000 	.word	0x40020000
 8007e90:	bffdfbf8 	.word	0xbffdfbf8
 8007e94:	40020400 	.word	0x40020400

08007e98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d005      	beq.n	8007ebc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	e037      	b.n	8007f2c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 020e 	bic.w	r2, r2, #14
 8007eca:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007eda:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef0:	f003 021f 	and.w	r2, r3, #31
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f202 	lsl.w	r2, r1, r2
 8007efe:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f08:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f20:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007f2a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d00d      	beq.n	8007f7e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2204      	movs	r2, #4
 8007f66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
 8007f7c:	e047      	b.n	800800e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 020e 	bic.w	r2, r2, #14
 8007f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb2:	f003 021f 	and.w	r2, r3, #31
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	2101      	movs	r1, #1
 8007fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007fca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00c      	beq.n	8007fee <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fe2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007fec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
    }
  }
  return status;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	2204      	movs	r2, #4
 800803a:	409a      	lsls	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4013      	ands	r3, r2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d026      	beq.n	8008092 <HAL_DMA_IRQHandler+0x7a>
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d021      	beq.n	8008092 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0320 	and.w	r3, r3, #32
 8008058:	2b00      	cmp	r3, #0
 800805a:	d107      	bne.n	800806c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0204 	bic.w	r2, r2, #4
 800806a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008070:	f003 021f 	and.w	r2, r3, #31
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	2104      	movs	r1, #4
 800807a:	fa01 f202 	lsl.w	r2, r1, r2
 800807e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d071      	beq.n	800816c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008090:	e06c      	b.n	800816c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2202      	movs	r2, #2
 800809c:	409a      	lsls	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02e      	beq.n	8008104 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d029      	beq.n	8008104 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10b      	bne.n	80080d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 020a 	bic.w	r2, r2, #10
 80080cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080da:	f003 021f 	and.w	r2, r3, #31
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	2102      	movs	r1, #2
 80080e4:	fa01 f202 	lsl.w	r2, r1, r2
 80080e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d038      	beq.n	800816c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008102:	e033      	b.n	800816c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	2208      	movs	r2, #8
 800810e:	409a      	lsls	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02a      	beq.n	800816e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d025      	beq.n	800816e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 020e 	bic.w	r2, r2, #14
 8008130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	f003 021f 	and.w	r2, r3, #31
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2101      	movs	r1, #1
 8008140:	fa01 f202 	lsl.w	r2, r1, r2
 8008144:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800816c:	bf00      	nop
 800816e:	bf00      	nop
}
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	4b16      	ldr	r3, [pc, #88]	; (80081e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008188:	429a      	cmp	r2, r3
 800818a:	d802      	bhi.n	8008192 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800818c:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e001      	b.n	8008196 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008192:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008194:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	3b08      	subs	r3, #8
 80081a2:	4a12      	ldr	r2, [pc, #72]	; (80081ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	091b      	lsrs	r3, r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	089b      	lsrs	r3, r3, #2
 80081b2:	009a      	lsls	r2, r3, #2
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4413      	add	r3, r2
 80081b8:	461a      	mov	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a0b      	ldr	r2, [pc, #44]	; (80081f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80081c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 031f 	and.w	r3, r3, #31
 80081ca:	2201      	movs	r2, #1
 80081cc:	409a      	lsls	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	40020407 	.word	0x40020407
 80081e4:	40020800 	.word	0x40020800
 80081e8:	40020820 	.word	0x40020820
 80081ec:	cccccccd 	.word	0xcccccccd
 80081f0:	40020880 	.word	0x40020880

080081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	461a      	mov	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a08      	ldr	r2, [pc, #32]	; (8008238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008216:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3b01      	subs	r3, #1
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2201      	movs	r2, #1
 8008222:	409a      	lsls	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	1000823f 	.word	0x1000823f
 8008238:	40020940 	.word	0x40020940

0800823c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e147      	b.n	80084de <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7fa fa26 	bl	80026b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0210 	bic.w	r2, r2, #16
 8008276:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008278:	f7fe f86e 	bl	8006358 <HAL_GetTick>
 800827c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800827e:	e012      	b.n	80082a6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008280:	f7fe f86a 	bl	8006358 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b0a      	cmp	r3, #10
 800828c:	d90b      	bls.n	80082a6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008292:	f043 0201 	orr.w	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2203      	movs	r2, #3
 800829e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e11b      	b.n	80084de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d0e5      	beq.n	8008280 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0201 	orr.w	r2, r2, #1
 80082c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c4:	f7fe f848 	bl	8006358 <HAL_GetTick>
 80082c8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80082ca:	e012      	b.n	80082f2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80082cc:	f7fe f844 	bl	8006358 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b0a      	cmp	r3, #10
 80082d8:	d90b      	bls.n	80082f2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082de:	f043 0201 	orr.w	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2203      	movs	r2, #3
 80082ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e0f5      	b.n	80084de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0e5      	beq.n	80082cc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0202 	orr.w	r2, r2, #2
 800830e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a74      	ldr	r2, [pc, #464]	; (80084e8 <HAL_FDCAN_Init+0x2ac>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d103      	bne.n	8008322 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800831a:	4a74      	ldr	r2, [pc, #464]	; (80084ec <HAL_FDCAN_Init+0x2b0>)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d108      	bne.n	800833c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	699a      	ldr	r2, [r3, #24]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008338:	619a      	str	r2, [r3, #24]
 800833a:	e007      	b.n	800834c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800834a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7c5b      	ldrb	r3, [r3, #17]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d108      	bne.n	8008366 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008362:	619a      	str	r2, [r3, #24]
 8008364:	e007      	b.n	8008376 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008374:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7c9b      	ldrb	r3, [r3, #18]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d108      	bne.n	8008390 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699a      	ldr	r2, [r3, #24]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800838c:	619a      	str	r2, [r3, #24]
 800838e:	e007      	b.n	80083a0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800839e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80083c4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0210 	bic.w	r2, r2, #16
 80083d4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d108      	bne.n	80083f0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0204 	orr.w	r2, r2, #4
 80083ec:	619a      	str	r2, [r3, #24]
 80083ee:	e02c      	b.n	800844a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d028      	beq.n	800844a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d01c      	beq.n	800843a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800840e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0210 	orr.w	r2, r2, #16
 800841e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b03      	cmp	r3, #3
 8008426:	d110      	bne.n	800844a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0220 	orr.w	r2, r2, #32
 8008436:	619a      	str	r2, [r3, #24]
 8008438:	e007      	b.n	800844a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699a      	ldr	r2, [r3, #24]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0220 	orr.w	r2, r2, #32
 8008448:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	3b01      	subs	r3, #1
 8008450:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	3b01      	subs	r3, #1
 8008458:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800845a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008462:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	3b01      	subs	r3, #1
 800846c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008472:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008474:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800847e:	d115      	bne.n	80084ac <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	3b01      	subs	r3, #1
 800848c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800848e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	3b01      	subs	r3, #1
 8008496:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008498:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	3b01      	subs	r3, #1
 80084a2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80084a8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084aa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f814 	bl	80084f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40006400 	.word	0x40006400
 80084ec:	40006500 	.word	0x40006500

080084f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80084fa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a2f      	ldr	r2, [pc, #188]	; (80085c0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d103      	bne.n	800850e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800850c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a2c      	ldr	r2, [pc, #176]	; (80085c4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d103      	bne.n	8008520 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800851e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800852e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008536:	041a      	lsls	r2, r3, #16
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008554:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	061a      	lsls	r2, r3, #24
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e005      	b.n	80085a2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3304      	adds	r3, #4
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d3f3      	bcc.n	8008596 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	4000a400 	.word	0x4000a400
 80085c0:	40006800 	.word	0x40006800
 80085c4:	40006c00 	.word	0x40006c00

080085c8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80085da:	4b24      	ldr	r3, [pc, #144]	; (800866c <HAL_FLASH_Program+0xa4>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d101      	bne.n	80085e6 <HAL_FLASH_Program+0x1e>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e03e      	b.n	8008664 <HAL_FLASH_Program+0x9c>
 80085e6:	4b21      	ldr	r3, [pc, #132]	; (800866c <HAL_FLASH_Program+0xa4>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80085ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085f0:	f000 f87c 	bl	80086ec <FLASH_WaitForLastOperation>
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d12e      	bne.n	800865c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80085fe:	4b1b      	ldr	r3, [pc, #108]	; (800866c <HAL_FLASH_Program+0xa4>)
 8008600:	2200      	movs	r2, #0
 8008602:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800860a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860e:	68b8      	ldr	r0, [r7, #8]
 8008610:	f000 f8c0 	bl	8008794 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008614:	2301      	movs	r3, #1
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	e010      	b.n	800863c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d002      	beq.n	8008626 <HAL_FLASH_Program+0x5e>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d10a      	bne.n	800863c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	68b8      	ldr	r0, [r7, #8]
 800862c:	f000 f8d8 	bl	80087e0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d102      	bne.n	800863c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008636:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800863a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800863c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008640:	f000 f854 	bl	80086ec <FLASH_WaitForLastOperation>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800864e:	4b08      	ldr	r3, [pc, #32]	; (8008670 <HAL_FLASH_Program+0xa8>)
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	43db      	mvns	r3, r3
 8008656:	4906      	ldr	r1, [pc, #24]	; (8008670 <HAL_FLASH_Program+0xa8>)
 8008658:	4013      	ands	r3, r2
 800865a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <HAL_FLASH_Program+0xa4>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	2000000c 	.word	0x2000000c
 8008670:	40022000 	.word	0x40022000

08008674 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800867e:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <HAL_FLASH_Unlock+0x38>)
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	da0b      	bge.n	800869e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008686:	4b09      	ldr	r3, [pc, #36]	; (80086ac <HAL_FLASH_Unlock+0x38>)
 8008688:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <HAL_FLASH_Unlock+0x3c>)
 800868a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800868c:	4b07      	ldr	r3, [pc, #28]	; (80086ac <HAL_FLASH_Unlock+0x38>)
 800868e:	4a09      	ldr	r2, [pc, #36]	; (80086b4 <HAL_FLASH_Unlock+0x40>)
 8008690:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008692:	4b06      	ldr	r3, [pc, #24]	; (80086ac <HAL_FLASH_Unlock+0x38>)
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	da01      	bge.n	800869e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800869e:	79fb      	ldrb	r3, [r7, #7]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	40022000 	.word	0x40022000
 80086b0:	45670123 	.word	0x45670123
 80086b4:	cdef89ab 	.word	0xcdef89ab

080086b8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <HAL_FLASH_Lock+0x30>)
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	4a08      	ldr	r2, [pc, #32]	; (80086e8 <HAL_FLASH_Lock+0x30>)
 80086c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086cc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086ce:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <HAL_FLASH_Lock+0x30>)
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da01      	bge.n	80086da <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80086da:	79fb      	ldrb	r3, [r7, #7]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	40022000 	.word	0x40022000

080086ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80086f4:	f7fd fe30 	bl	8006358 <HAL_GetTick>
 80086f8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80086fa:	e009      	b.n	8008710 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80086fc:	f7fd fe2c 	bl	8006358 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	d201      	bcs.n	8008710 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e038      	b.n	8008782 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008710:	4b1e      	ldr	r3, [pc, #120]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800871c:	d0ee      	beq.n	80086fc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008726:	4013      	ands	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01e      	beq.n	800876e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008730:	4b17      	ldr	r3, [pc, #92]	; (8008790 <FLASH_WaitForLastOperation+0xa4>)
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4313      	orrs	r3, r2
 8008738:	4a15      	ldr	r2, [pc, #84]	; (8008790 <FLASH_WaitForLastOperation+0xa4>)
 800873a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <FLASH_WaitForLastOperation+0x6a>
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008750:	490e      	ldr	r1, [pc, #56]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 8008752:	4313      	orrs	r3, r2
 8008754:	618b      	str	r3, [r1, #24]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d004      	beq.n	800876a <FLASH_WaitForLastOperation+0x7e>
 8008760:	4a0a      	ldr	r2, [pc, #40]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008768:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e009      	b.n	8008782 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800876e:	4b07      	ldr	r3, [pc, #28]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b01      	cmp	r3, #1
 8008778:	d102      	bne.n	8008780 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800877a:	4b04      	ldr	r3, [pc, #16]	; (800878c <FLASH_WaitForLastOperation+0xa0>)
 800877c:	2201      	movs	r2, #1
 800877e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40022000 	.word	0x40022000
 8008790:	2000000c 	.word	0x2000000c

08008794 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80087a0:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <FLASH_Program_DoubleWord+0x48>)
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	4a0d      	ldr	r2, [pc, #52]	; (80087dc <FLASH_Program_DoubleWord+0x48>)
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80087b2:	f3bf 8f6f 	isb	sy
}
 80087b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80087b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	000a      	movs	r2, r1
 80087c6:	2300      	movs	r3, #0
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	3104      	adds	r1, #4
 80087cc:	4613      	mov	r3, r2
 80087ce:	600b      	str	r3, [r1, #0]
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	40022000 	.word	0x40022000

080087e0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b089      	sub	sp, #36	; 0x24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80087ea:	2340      	movs	r3, #64	; 0x40
 80087ec:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <FLASH_Program_Fast+0x68>)
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	4a13      	ldr	r2, [pc, #76]	; (8008848 <FLASH_Program_Fast+0x68>)
 80087fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008800:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008802:	f3ef 8310 	mrs	r3, PRIMASK
 8008806:	60fb      	str	r3, [r7, #12]
  return(result);
 8008808:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800880a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800880c:	b672      	cpsid	i
}
 800880e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	3304      	adds	r3, #4
 800881c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	3304      	adds	r3, #4
 8008822:	617b      	str	r3, [r7, #20]
    row_index--;
 8008824:	7ffb      	ldrb	r3, [r7, #31]
 8008826:	3b01      	subs	r3, #1
 8008828:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800882a:	7ffb      	ldrb	r3, [r7, #31]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1ef      	bne.n	8008810 <FLASH_Program_Fast+0x30>
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800883c:	bf00      	nop
 800883e:	3724      	adds	r7, #36	; 0x24
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	40022000 	.word	0x40022000

0800884c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008856:	4b49      	ldr	r3, [pc, #292]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_FLASHEx_Erase+0x16>
 800885e:	2302      	movs	r3, #2
 8008860:	e087      	b.n	8008972 <HAL_FLASHEx_Erase+0x126>
 8008862:	4b46      	ldr	r3, [pc, #280]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 8008864:	2201      	movs	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800886c:	f7ff ff3e 	bl	80086ec <FLASH_WaitForLastOperation>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d177      	bne.n	800896a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800887a:	4b40      	ldr	r3, [pc, #256]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 800887c:	2200      	movs	r2, #0
 800887e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008880:	4b3f      	ldr	r3, [pc, #252]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008888:	2b00      	cmp	r3, #0
 800888a:	d013      	beq.n	80088b4 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800888c:	4b3c      	ldr	r3, [pc, #240]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008898:	4b39      	ldr	r3, [pc, #228]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a38      	ldr	r2, [pc, #224]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 800889e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088a2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80088a4:	4b35      	ldr	r3, [pc, #212]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 80088a6:	2203      	movs	r2, #3
 80088a8:	771a      	strb	r2, [r3, #28]
 80088aa:	e016      	b.n	80088da <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80088ac:	4b33      	ldr	r3, [pc, #204]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	771a      	strb	r2, [r3, #28]
 80088b2:	e012      	b.n	80088da <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80088b4:	4b32      	ldr	r3, [pc, #200]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d009      	beq.n	80088d4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80088c0:	4b2f      	ldr	r3, [pc, #188]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a2e      	ldr	r2, [pc, #184]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 80088c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088ca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80088cc:	4b2b      	ldr	r3, [pc, #172]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 80088ce:	2202      	movs	r2, #2
 80088d0:	771a      	strb	r2, [r3, #28]
 80088d2:	e002      	b.n	80088da <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80088d4:	4b29      	ldr	r3, [pc, #164]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d113      	bne.n	800890a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f84c 	bl	8008984 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80088ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088f0:	f7ff fefc 	bl	80086ec <FLASH_WaitForLastOperation>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80088f8:	4b21      	ldr	r3, [pc, #132]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	4a20      	ldr	r2, [pc, #128]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 80088fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008902:	f023 0304 	bic.w	r3, r3, #4
 8008906:	6153      	str	r3, [r2, #20]
 8008908:	e02d      	b.n	8008966 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	60bb      	str	r3, [r7, #8]
 8008918:	e01d      	b.n	8008956 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	4619      	mov	r1, r3
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	f000 f867 	bl	80089f4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800892a:	f7ff fedf 	bl	80086ec <FLASH_WaitForLastOperation>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008932:	4b13      	ldr	r3, [pc, #76]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <HAL_FLASHEx_Erase+0x134>)
 8008938:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800893c:	f023 0302 	bic.w	r3, r3, #2
 8008940:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	601a      	str	r2, [r3, #0]
          break;
 800894e:	e00a      	b.n	8008966 <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3301      	adds	r3, #1
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	4413      	add	r3, r2
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d3d9      	bcc.n	800891a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008966:	f000 f889 	bl	8008a7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800896a:	4b04      	ldr	r3, [pc, #16]	; (800897c <HAL_FLASHEx_Erase+0x130>)
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]

  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	2000000c 	.word	0x2000000c
 8008980:	40022000 	.word	0x40022000

08008984 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800898c:	4b18      	ldr	r3, [pc, #96]	; (80089f0 <FLASH_MassErase+0x6c>)
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d016      	beq.n	80089c6 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	4a12      	ldr	r2, [pc, #72]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089a8:	f043 0304 	orr.w	r3, r3, #4
 80089ac:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c2:	6153      	str	r3, [r2, #20]
 80089c4:	e007      	b.n	80089d6 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80089c6:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d0:	f043 0304 	orr.w	r3, r3, #4
 80089d4:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80089d6:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	4a05      	ldr	r2, [pc, #20]	; (80089f0 <FLASH_MassErase+0x6c>)
 80089dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e0:	6153      	str	r3, [r2, #20]
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	40022000 	.word	0x40022000

080089f4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80089fe:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a14:	6153      	str	r3, [r2, #20]
 8008a16:	e011      	b.n	8008a3c <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d006      	beq.n	8008a30 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	4a14      	ldr	r2, [pc, #80]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a2c:	6153      	str	r3, [r2, #20]
 8008a2e:	e005      	b.n	8008a3c <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008a30:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	4a10      	ldr	r2, [pc, #64]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a3a:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008a3c:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008a4c:	490a      	ldr	r1, [pc, #40]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	4a08      	ldr	r2, [pc, #32]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a58:	f043 0302 	orr.w	r3, r3, #2
 8008a5c:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a5e:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	4a05      	ldr	r2, [pc, #20]	; (8008a78 <FLASH_PageErase+0x84>)
 8008a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a68:	6153      	str	r3, [r2, #20]
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40022000 	.word	0x40022000

08008a7c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008a82:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <FLASH_FlushCaches+0x8c>)
 8008a84:	7f1b      	ldrb	r3, [r3, #28]
 8008a86:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d002      	beq.n	8008a94 <FLASH_FlushCaches+0x18>
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d117      	bne.n	8008ac4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008a94:	4b1d      	ldr	r3, [pc, #116]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008a9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008aa0:	4b1a      	ldr	r3, [pc, #104]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	4b17      	ldr	r3, [pc, #92]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a16      	ldr	r2, [pc, #88]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ab6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ab8:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ac2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d002      	beq.n	8008ad0 <FLASH_FlushCaches+0x54>
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d111      	bne.n	8008af4 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008ad0:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0d      	ldr	r2, [pc, #52]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008ad6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ae8:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a07      	ldr	r2, [pc, #28]	; (8008b0c <FLASH_FlushCaches+0x90>)
 8008aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008af2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <FLASH_FlushCaches+0x8c>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	771a      	strb	r2, [r3, #28]
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	2000000c 	.word	0x2000000c
 8008b0c:	40022000 	.word	0x40022000

08008b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008b1e:	e15a      	b.n	8008dd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	2101      	movs	r1, #1
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 814c 	beq.w	8008dd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d005      	beq.n	8008b50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d130      	bne.n	8008bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b60:	43db      	mvns	r3, r3
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4013      	ands	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b86:	2201      	movs	r2, #1
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8e:	43db      	mvns	r3, r3
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4013      	ands	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	091b      	lsrs	r3, r3, #4
 8008b9c:	f003 0201 	and.w	r2, r3, #1
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d017      	beq.n	8008bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	2203      	movs	r2, #3
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	43db      	mvns	r3, r3
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d123      	bne.n	8008c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	08da      	lsrs	r2, r3, #3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3208      	adds	r2, #8
 8008c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	220f      	movs	r2, #15
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	43db      	mvns	r3, r3
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	691a      	ldr	r2, [r3, #16]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	08da      	lsrs	r2, r3, #3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3208      	adds	r2, #8
 8008c3c:	6939      	ldr	r1, [r7, #16]
 8008c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	43db      	mvns	r3, r3
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4013      	ands	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f003 0203 	and.w	r2, r3, #3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80a6 	beq.w	8008dd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c84:	4b5b      	ldr	r3, [pc, #364]	; (8008df4 <HAL_GPIO_Init+0x2e4>)
 8008c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c88:	4a5a      	ldr	r2, [pc, #360]	; (8008df4 <HAL_GPIO_Init+0x2e4>)
 8008c8a:	f043 0301 	orr.w	r3, r3, #1
 8008c8e:	6613      	str	r3, [r2, #96]	; 0x60
 8008c90:	4b58      	ldr	r3, [pc, #352]	; (8008df4 <HAL_GPIO_Init+0x2e4>)
 8008c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	60bb      	str	r3, [r7, #8]
 8008c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c9c:	4a56      	ldr	r2, [pc, #344]	; (8008df8 <HAL_GPIO_Init+0x2e8>)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	089b      	lsrs	r3, r3, #2
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f003 0303 	and.w	r3, r3, #3
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	220f      	movs	r2, #15
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008cc6:	d01f      	beq.n	8008d08 <HAL_GPIO_Init+0x1f8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a4c      	ldr	r2, [pc, #304]	; (8008dfc <HAL_GPIO_Init+0x2ec>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d019      	beq.n	8008d04 <HAL_GPIO_Init+0x1f4>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a4b      	ldr	r2, [pc, #300]	; (8008e00 <HAL_GPIO_Init+0x2f0>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <HAL_GPIO_Init+0x1f0>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a4a      	ldr	r2, [pc, #296]	; (8008e04 <HAL_GPIO_Init+0x2f4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00d      	beq.n	8008cfc <HAL_GPIO_Init+0x1ec>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a49      	ldr	r2, [pc, #292]	; (8008e08 <HAL_GPIO_Init+0x2f8>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d007      	beq.n	8008cf8 <HAL_GPIO_Init+0x1e8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a48      	ldr	r2, [pc, #288]	; (8008e0c <HAL_GPIO_Init+0x2fc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d101      	bne.n	8008cf4 <HAL_GPIO_Init+0x1e4>
 8008cf0:	2305      	movs	r3, #5
 8008cf2:	e00a      	b.n	8008d0a <HAL_GPIO_Init+0x1fa>
 8008cf4:	2306      	movs	r3, #6
 8008cf6:	e008      	b.n	8008d0a <HAL_GPIO_Init+0x1fa>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	e006      	b.n	8008d0a <HAL_GPIO_Init+0x1fa>
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e004      	b.n	8008d0a <HAL_GPIO_Init+0x1fa>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e002      	b.n	8008d0a <HAL_GPIO_Init+0x1fa>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <HAL_GPIO_Init+0x1fa>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	f002 0203 	and.w	r2, r2, #3
 8008d10:	0092      	lsls	r2, r2, #2
 8008d12:	4093      	lsls	r3, r2
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d1a:	4937      	ldr	r1, [pc, #220]	; (8008df8 <HAL_GPIO_Init+0x2e8>)
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	3302      	adds	r3, #2
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d28:	4b39      	ldr	r3, [pc, #228]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	4013      	ands	r3, r2
 8008d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d4c:	4a30      	ldr	r2, [pc, #192]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008d52:	4b2f      	ldr	r3, [pc, #188]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	43db      	mvns	r3, r3
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d76:	4a26      	ldr	r2, [pc, #152]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008d7c:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008da0:	4a1b      	ldr	r2, [pc, #108]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	43db      	mvns	r3, r3
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4013      	ands	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008dca:	4a11      	ldr	r2, [pc, #68]	; (8008e10 <HAL_GPIO_Init+0x300>)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f ae9d 	bne.w	8008b20 <HAL_GPIO_Init+0x10>
  }
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	40021000 	.word	0x40021000
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	48000400 	.word	0x48000400
 8008e00:	48000800 	.word	0x48000800
 8008e04:	48000c00 	.word	0x48000c00
 8008e08:	48001000 	.word	0x48001000
 8008e0c:	48001400 	.word	0x48001400
 8008e10:	40010400 	.word	0x40010400

08008e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
 8008e20:	4613      	mov	r3, r2
 8008e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e24:	787b      	ldrb	r3, [r7, #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e2a:	887a      	ldrh	r2, [r7, #2]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e30:	e002      	b.n	8008e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e32:	887a      	ldrh	r2, [r7, #2]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d141      	bne.n	8008ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e52:	4b4b      	ldr	r3, [pc, #300]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5e:	d131      	bne.n	8008ec4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e60:	4b47      	ldr	r3, [pc, #284]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e66:	4a46      	ldr	r2, [pc, #280]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e70:	4b43      	ldr	r3, [pc, #268]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e78:	4a41      	ldr	r2, [pc, #260]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e80:	4b40      	ldr	r3, [pc, #256]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2232      	movs	r2, #50	; 0x32
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	4a3f      	ldr	r2, [pc, #252]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e90:	0c9b      	lsrs	r3, r3, #18
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e96:	e002      	b.n	8008e9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e9e:	4b38      	ldr	r3, [pc, #224]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eaa:	d102      	bne.n	8008eb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1f2      	bne.n	8008e98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008eb2:	4b33      	ldr	r3, [pc, #204]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ebe:	d158      	bne.n	8008f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e057      	b.n	8008f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ec4:	4b2e      	ldr	r3, [pc, #184]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eca:	4a2d      	ldr	r2, [pc, #180]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008ed4:	e04d      	b.n	8008f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008edc:	d141      	bne.n	8008f62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ede:	4b28      	ldr	r3, [pc, #160]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eea:	d131      	bne.n	8008f50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008eec:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef2:	4a23      	ldr	r2, [pc, #140]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008efc:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f04:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f0c:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2232      	movs	r2, #50	; 0x32
 8008f12:	fb02 f303 	mul.w	r3, r2, r3
 8008f16:	4a1c      	ldr	r2, [pc, #112]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f18:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1c:	0c9b      	lsrs	r3, r3, #18
 8008f1e:	3301      	adds	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f22:	e002      	b.n	8008f2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f2a:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f36:	d102      	bne.n	8008f3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f2      	bne.n	8008f24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4a:	d112      	bne.n	8008f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e011      	b.n	8008f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f56:	4a0a      	ldr	r2, [pc, #40]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f60:	e007      	b.n	8008f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f62:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f6a:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	40007000 	.word	0x40007000
 8008f84:	20000000 	.word	0x20000000
 8008f88:	431bde83 	.word	0x431bde83

08008f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e306      	b.n	80095ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d075      	beq.n	8009096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008faa:	4b97      	ldr	r3, [pc, #604]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f003 030c 	and.w	r3, r3, #12
 8008fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fb4:	4b94      	ldr	r3, [pc, #592]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b0c      	cmp	r3, #12
 8008fc2:	d102      	bne.n	8008fca <HAL_RCC_OscConfig+0x3e>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d002      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x44>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d10b      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fd0:	4b8d      	ldr	r3, [pc, #564]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d05b      	beq.n	8009094 <HAL_RCC_OscConfig+0x108>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d157      	bne.n	8009094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e2e1      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff0:	d106      	bne.n	8009000 <HAL_RCC_OscConfig+0x74>
 8008ff2:	4b85      	ldr	r3, [pc, #532]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a84      	ldr	r2, [pc, #528]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8008ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e01d      	b.n	800903c <HAL_RCC_OscConfig+0xb0>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009008:	d10c      	bne.n	8009024 <HAL_RCC_OscConfig+0x98>
 800900a:	4b7f      	ldr	r3, [pc, #508]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a7e      	ldr	r2, [pc, #504]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	4b7c      	ldr	r3, [pc, #496]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a7b      	ldr	r2, [pc, #492]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 800901c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	e00b      	b.n	800903c <HAL_RCC_OscConfig+0xb0>
 8009024:	4b78      	ldr	r3, [pc, #480]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a77      	ldr	r2, [pc, #476]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 800902a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	4b75      	ldr	r3, [pc, #468]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a74      	ldr	r2, [pc, #464]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800903a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d013      	beq.n	800906c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009044:	f7fd f988 	bl	8006358 <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800904a:	e008      	b.n	800905e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800904c:	f7fd f984 	bl	8006358 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b64      	cmp	r3, #100	; 0x64
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e2a6      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800905e:	4b6a      	ldr	r3, [pc, #424]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0f0      	beq.n	800904c <HAL_RCC_OscConfig+0xc0>
 800906a:	e014      	b.n	8009096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906c:	f7fd f974 	bl	8006358 <HAL_GetTick>
 8009070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009072:	e008      	b.n	8009086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009074:	f7fd f970 	bl	8006358 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b64      	cmp	r3, #100	; 0x64
 8009080:	d901      	bls.n	8009086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e292      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009086:	4b60      	ldr	r3, [pc, #384]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f0      	bne.n	8009074 <HAL_RCC_OscConfig+0xe8>
 8009092:	e000      	b.n	8009096 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d075      	beq.n	800918e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090a2:	4b59      	ldr	r3, [pc, #356]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 030c 	and.w	r3, r3, #12
 80090aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090ac:	4b56      	ldr	r3, [pc, #344]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b0c      	cmp	r3, #12
 80090ba:	d102      	bne.n	80090c2 <HAL_RCC_OscConfig+0x136>
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d002      	beq.n	80090c8 <HAL_RCC_OscConfig+0x13c>
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d11f      	bne.n	8009108 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090c8:	4b4f      	ldr	r3, [pc, #316]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <HAL_RCC_OscConfig+0x154>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e265      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090e0:	4b49      	ldr	r3, [pc, #292]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	061b      	lsls	r3, r3, #24
 80090ee:	4946      	ldr	r1, [pc, #280]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80090f4:	4b45      	ldr	r3, [pc, #276]	; (800920c <HAL_RCC_OscConfig+0x280>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fd f8e1 	bl	80062c0 <HAL_InitTick>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d043      	beq.n	800918c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e251      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d023      	beq.n	8009158 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009110:	4b3d      	ldr	r3, [pc, #244]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a3c      	ldr	r2, [pc, #240]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800911a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800911c:	f7fd f91c 	bl	8006358 <HAL_GetTick>
 8009120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009122:	e008      	b.n	8009136 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009124:	f7fd f918 	bl	8006358 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b02      	cmp	r3, #2
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e23a      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009136:	4b34      	ldr	r3, [pc, #208]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0f0      	beq.n	8009124 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009142:	4b31      	ldr	r3, [pc, #196]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	492d      	ldr	r1, [pc, #180]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	604b      	str	r3, [r1, #4]
 8009156:	e01a      	b.n	800918e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009158:	4b2b      	ldr	r3, [pc, #172]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a2a      	ldr	r2, [pc, #168]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 800915e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009164:	f7fd f8f8 	bl	8006358 <HAL_GetTick>
 8009168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800916a:	e008      	b.n	800917e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800916c:	f7fd f8f4 	bl	8006358 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	2b02      	cmp	r3, #2
 8009178:	d901      	bls.n	800917e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e216      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1f0      	bne.n	800916c <HAL_RCC_OscConfig+0x1e0>
 800918a:	e000      	b.n	800918e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800918c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d041      	beq.n	800921e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01c      	beq.n	80091dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091a2:	4b19      	ldr	r3, [pc, #100]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80091a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091a8:	4a17      	ldr	r2, [pc, #92]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b2:	f7fd f8d1 	bl	8006358 <HAL_GetTick>
 80091b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091b8:	e008      	b.n	80091cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091ba:	f7fd f8cd 	bl	8006358 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d901      	bls.n	80091cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e1ef      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80091ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0ef      	beq.n	80091ba <HAL_RCC_OscConfig+0x22e>
 80091da:	e020      	b.n	800921e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80091de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091e2:	4a09      	ldr	r2, [pc, #36]	; (8009208 <HAL_RCC_OscConfig+0x27c>)
 80091e4:	f023 0301 	bic.w	r3, r3, #1
 80091e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ec:	f7fd f8b4 	bl	8006358 <HAL_GetTick>
 80091f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80091f2:	e00d      	b.n	8009210 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091f4:	f7fd f8b0 	bl	8006358 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d906      	bls.n	8009210 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e1d2      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
 8009206:	bf00      	nop
 8009208:	40021000 	.word	0x40021000
 800920c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009210:	4b8c      	ldr	r3, [pc, #560]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1ea      	bne.n	80091f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80a6 	beq.w	8009378 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800922c:	2300      	movs	r3, #0
 800922e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009230:	4b84      	ldr	r3, [pc, #528]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_RCC_OscConfig+0x2b4>
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <HAL_RCC_OscConfig+0x2b6>
 8009240:	2300      	movs	r3, #0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00d      	beq.n	8009262 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009246:	4b7f      	ldr	r3, [pc, #508]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924a:	4a7e      	ldr	r2, [pc, #504]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 800924c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009250:	6593      	str	r3, [r2, #88]	; 0x58
 8009252:	4b7c      	ldr	r3, [pc, #496]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800925e:	2301      	movs	r3, #1
 8009260:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009262:	4b79      	ldr	r3, [pc, #484]	; (8009448 <HAL_RCC_OscConfig+0x4bc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926a:	2b00      	cmp	r3, #0
 800926c:	d118      	bne.n	80092a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800926e:	4b76      	ldr	r3, [pc, #472]	; (8009448 <HAL_RCC_OscConfig+0x4bc>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a75      	ldr	r2, [pc, #468]	; (8009448 <HAL_RCC_OscConfig+0x4bc>)
 8009274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800927a:	f7fd f86d 	bl	8006358 <HAL_GetTick>
 800927e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009280:	e008      	b.n	8009294 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009282:	f7fd f869 	bl	8006358 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e18b      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009294:	4b6c      	ldr	r3, [pc, #432]	; (8009448 <HAL_RCC_OscConfig+0x4bc>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0f0      	beq.n	8009282 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d108      	bne.n	80092ba <HAL_RCC_OscConfig+0x32e>
 80092a8:	4b66      	ldr	r3, [pc, #408]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ae:	4a65      	ldr	r2, [pc, #404]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092b0:	f043 0301 	orr.w	r3, r3, #1
 80092b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80092b8:	e024      	b.n	8009304 <HAL_RCC_OscConfig+0x378>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d110      	bne.n	80092e4 <HAL_RCC_OscConfig+0x358>
 80092c2:	4b60      	ldr	r3, [pc, #384]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c8:	4a5e      	ldr	r2, [pc, #376]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092ca:	f043 0304 	orr.w	r3, r3, #4
 80092ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80092d2:	4b5c      	ldr	r3, [pc, #368]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d8:	4a5a      	ldr	r2, [pc, #360]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092da:	f043 0301 	orr.w	r3, r3, #1
 80092de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80092e2:	e00f      	b.n	8009304 <HAL_RCC_OscConfig+0x378>
 80092e4:	4b57      	ldr	r3, [pc, #348]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ea:	4a56      	ldr	r2, [pc, #344]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80092f4:	4b53      	ldr	r3, [pc, #332]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fa:	4a52      	ldr	r2, [pc, #328]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80092fc:	f023 0304 	bic.w	r3, r3, #4
 8009300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d016      	beq.n	800933a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800930c:	f7fd f824 	bl	8006358 <HAL_GetTick>
 8009310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009312:	e00a      	b.n	800932a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009314:	f7fd f820 	bl	8006358 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009322:	4293      	cmp	r3, r2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e140      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800932a:	4b46      	ldr	r3, [pc, #280]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0ed      	beq.n	8009314 <HAL_RCC_OscConfig+0x388>
 8009338:	e015      	b.n	8009366 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933a:	f7fd f80d 	bl	8006358 <HAL_GetTick>
 800933e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009340:	e00a      	b.n	8009358 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009342:	f7fd f809 	bl	8006358 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009350:	4293      	cmp	r3, r2
 8009352:	d901      	bls.n	8009358 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e129      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009358:	4b3a      	ldr	r3, [pc, #232]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1ed      	bne.n	8009342 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009366:	7ffb      	ldrb	r3, [r7, #31]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d105      	bne.n	8009378 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800936c:	4b35      	ldr	r3, [pc, #212]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 800936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009370:	4a34      	ldr	r2, [pc, #208]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009376:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d03c      	beq.n	80093fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01c      	beq.n	80093c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800938c:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 800938e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009392:	4a2c      	ldr	r2, [pc, #176]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009394:	f043 0301 	orr.w	r3, r3, #1
 8009398:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800939c:	f7fc ffdc 	bl	8006358 <HAL_GetTick>
 80093a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093a2:	e008      	b.n	80093b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093a4:	f7fc ffd8 	bl	8006358 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e0fa      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093b6:	4b23      	ldr	r3, [pc, #140]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80093b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0ef      	beq.n	80093a4 <HAL_RCC_OscConfig+0x418>
 80093c4:	e01b      	b.n	80093fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093c6:	4b1f      	ldr	r3, [pc, #124]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80093c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093cc:	4a1d      	ldr	r2, [pc, #116]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d6:	f7fc ffbf 	bl	8006358 <HAL_GetTick>
 80093da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093dc:	e008      	b.n	80093f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093de:	f7fc ffbb 	bl	8006358 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d901      	bls.n	80093f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e0dd      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093f0:	4b14      	ldr	r3, [pc, #80]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 80093f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1ef      	bne.n	80093de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 80d1 	beq.w	80095aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009408:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 030c 	and.w	r3, r3, #12
 8009410:	2b0c      	cmp	r3, #12
 8009412:	f000 808b 	beq.w	800952c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d15e      	bne.n	80094dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a08      	ldr	r2, [pc, #32]	; (8009444 <HAL_RCC_OscConfig+0x4b8>)
 8009424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800942a:	f7fc ff95 	bl	8006358 <HAL_GetTick>
 800942e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009430:	e00c      	b.n	800944c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009432:	f7fc ff91 	bl	8006358 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	d905      	bls.n	800944c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e0b3      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
 8009444:	40021000 	.word	0x40021000
 8009448:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800944c:	4b59      	ldr	r3, [pc, #356]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1ec      	bne.n	8009432 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009458:	4b56      	ldr	r3, [pc, #344]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	4b56      	ldr	r3, [pc, #344]	; (80095b8 <HAL_RCC_OscConfig+0x62c>)
 800945e:	4013      	ands	r3, r2
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	6a11      	ldr	r1, [r2, #32]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009468:	3a01      	subs	r2, #1
 800946a:	0112      	lsls	r2, r2, #4
 800946c:	4311      	orrs	r1, r2
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009472:	0212      	lsls	r2, r2, #8
 8009474:	4311      	orrs	r1, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800947a:	0852      	lsrs	r2, r2, #1
 800947c:	3a01      	subs	r2, #1
 800947e:	0552      	lsls	r2, r2, #21
 8009480:	4311      	orrs	r1, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009486:	0852      	lsrs	r2, r2, #1
 8009488:	3a01      	subs	r2, #1
 800948a:	0652      	lsls	r2, r2, #25
 800948c:	4311      	orrs	r1, r2
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009492:	06d2      	lsls	r2, r2, #27
 8009494:	430a      	orrs	r2, r1
 8009496:	4947      	ldr	r1, [pc, #284]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 8009498:	4313      	orrs	r3, r2
 800949a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800949c:	4b45      	ldr	r3, [pc, #276]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a44      	ldr	r2, [pc, #272]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80094a8:	4b42      	ldr	r3, [pc, #264]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4a41      	ldr	r2, [pc, #260]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b4:	f7fc ff50 	bl	8006358 <HAL_GetTick>
 80094b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094ba:	e008      	b.n	80094ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094bc:	f7fc ff4c 	bl	8006358 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d901      	bls.n	80094ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e06e      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094ce:	4b39      	ldr	r3, [pc, #228]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0f0      	beq.n	80094bc <HAL_RCC_OscConfig+0x530>
 80094da:	e066      	b.n	80095aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094dc:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a34      	ldr	r2, [pc, #208]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80094e8:	4b32      	ldr	r3, [pc, #200]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	4a31      	ldr	r2, [pc, #196]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80094f4:	4b2f      	ldr	r3, [pc, #188]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4a2e      	ldr	r2, [pc, #184]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 80094fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80094fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009502:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009504:	f7fc ff28 	bl	8006358 <HAL_GetTick>
 8009508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800950a:	e008      	b.n	800951e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800950c:	f7fc ff24 	bl	8006358 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b02      	cmp	r3, #2
 8009518:	d901      	bls.n	800951e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e046      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800951e:	4b25      	ldr	r3, [pc, #148]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1f0      	bne.n	800950c <HAL_RCC_OscConfig+0x580>
 800952a:	e03e      	b.n	80095aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e039      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009538:	4b1e      	ldr	r3, [pc, #120]	; (80095b4 <HAL_RCC_OscConfig+0x628>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f003 0203 	and.w	r2, r3, #3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	429a      	cmp	r2, r3
 800954a:	d12c      	bne.n	80095a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	3b01      	subs	r3, #1
 8009558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800955a:	429a      	cmp	r2, r3
 800955c:	d123      	bne.n	80095a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800956a:	429a      	cmp	r2, r3
 800956c:	d11b      	bne.n	80095a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800957a:	429a      	cmp	r2, r3
 800957c:	d113      	bne.n	80095a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	3b01      	subs	r3, #1
 800958c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800958e:	429a      	cmp	r2, r3
 8009590:	d109      	bne.n	80095a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	085b      	lsrs	r3, r3, #1
 800959e:	3b01      	subs	r3, #1
 80095a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d001      	beq.n	80095aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3720      	adds	r7, #32
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40021000 	.word	0x40021000
 80095b8:	019f800c 	.word	0x019f800c

080095bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e11e      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095d4:	4b91      	ldr	r3, [pc, #580]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d910      	bls.n	8009604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e2:	4b8e      	ldr	r3, [pc, #568]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f023 020f 	bic.w	r2, r3, #15
 80095ea:	498c      	ldr	r1, [pc, #560]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095f2:	4b8a      	ldr	r3, [pc, #552]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d001      	beq.n	8009604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e106      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d073      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d129      	bne.n	800966c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009618:	4b81      	ldr	r3, [pc, #516]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e0f4      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009628:	f000 f99e 	bl	8009968 <RCC_GetSysClockFreqFromPLLSource>
 800962c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	4a7c      	ldr	r2, [pc, #496]	; (8009824 <HAL_RCC_ClockConfig+0x268>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d93f      	bls.n	80096b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009636:	4b7a      	ldr	r3, [pc, #488]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800964a:	2b00      	cmp	r3, #0
 800964c:	d033      	beq.n	80096b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009652:	2b00      	cmp	r3, #0
 8009654:	d12f      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009656:	4b72      	ldr	r3, [pc, #456]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800965e:	4a70      	ldr	r2, [pc, #448]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009664:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009666:	2380      	movs	r3, #128	; 0x80
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e024      	b.n	80096b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d107      	bne.n	8009684 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009674:	4b6a      	ldr	r3, [pc, #424]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e0c6      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009684:	4b66      	ldr	r3, [pc, #408]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0be      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009694:	f000 f8ce 	bl	8009834 <HAL_RCC_GetSysClockFreq>
 8009698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4a61      	ldr	r2, [pc, #388]	; (8009824 <HAL_RCC_ClockConfig+0x268>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d909      	bls.n	80096b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80096a2:	4b5f      	ldr	r3, [pc, #380]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096aa:	4a5d      	ldr	r2, [pc, #372]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80096b2:	2380      	movs	r3, #128	; 0x80
 80096b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096b6:	4b5a      	ldr	r3, [pc, #360]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f023 0203 	bic.w	r2, r3, #3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4957      	ldr	r1, [pc, #348]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096c8:	f7fc fe46 	bl	8006358 <HAL_GetTick>
 80096cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ce:	e00a      	b.n	80096e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096d0:	f7fc fe42 	bl	8006358 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	f241 3288 	movw	r2, #5000	; 0x1388
 80096de:	4293      	cmp	r3, r2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e095      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e6:	4b4e      	ldr	r3, [pc, #312]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 020c 	and.w	r2, r3, #12
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d1eb      	bne.n	80096d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d023      	beq.n	800974c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009710:	4b43      	ldr	r3, [pc, #268]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	4a42      	ldr	r2, [pc, #264]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800971a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009728:	4b3d      	ldr	r3, [pc, #244]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009730:	4a3b      	ldr	r2, [pc, #236]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009736:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009738:	4b39      	ldr	r3, [pc, #228]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	4936      	ldr	r1, [pc, #216]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009746:	4313      	orrs	r3, r2
 8009748:	608b      	str	r3, [r1, #8]
 800974a:	e008      	b.n	800975e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2b80      	cmp	r3, #128	; 0x80
 8009750:	d105      	bne.n	800975e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009752:	4b33      	ldr	r3, [pc, #204]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4a32      	ldr	r2, [pc, #200]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 8009758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800975c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800975e:	4b2f      	ldr	r3, [pc, #188]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d21d      	bcs.n	80097a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800976c:	4b2b      	ldr	r3, [pc, #172]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f023 020f 	bic.w	r2, r3, #15
 8009774:	4929      	ldr	r1, [pc, #164]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	4313      	orrs	r3, r2
 800977a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800977c:	f7fc fdec 	bl	8006358 <HAL_GetTick>
 8009780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009782:	e00a      	b.n	800979a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009784:	f7fc fde8 	bl	8006358 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009792:	4293      	cmp	r3, r2
 8009794:	d901      	bls.n	800979a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e03b      	b.n	8009812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <HAL_RCC_ClockConfig+0x260>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d1ed      	bne.n	8009784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d008      	beq.n	80097c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097b4:	4b1a      	ldr	r3, [pc, #104]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	4917      	ldr	r1, [pc, #92]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0308 	and.w	r3, r3, #8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d009      	beq.n	80097e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	490f      	ldr	r1, [pc, #60]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097e6:	f000 f825 	bl	8009834 <HAL_RCC_GetSysClockFreq>
 80097ea:	4602      	mov	r2, r0
 80097ec:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <HAL_RCC_ClockConfig+0x264>)
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	091b      	lsrs	r3, r3, #4
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	490c      	ldr	r1, [pc, #48]	; (8009828 <HAL_RCC_ClockConfig+0x26c>)
 80097f8:	5ccb      	ldrb	r3, [r1, r3]
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009802:	4a0a      	ldr	r2, [pc, #40]	; (800982c <HAL_RCC_ClockConfig+0x270>)
 8009804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <HAL_RCC_ClockConfig+0x274>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f7fc fd58 	bl	80062c0 <HAL_InitTick>
 8009810:	4603      	mov	r3, r0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40022000 	.word	0x40022000
 8009820:	40021000 	.word	0x40021000
 8009824:	04c4b400 	.word	0x04c4b400
 8009828:	08014124 	.word	0x08014124
 800982c:	20000000 	.word	0x20000000
 8009830:	20000004 	.word	0x20000004

08009834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800983a:	4b2c      	ldr	r3, [pc, #176]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 030c 	and.w	r3, r3, #12
 8009842:	2b04      	cmp	r3, #4
 8009844:	d102      	bne.n	800984c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009846:	4b2a      	ldr	r3, [pc, #168]	; (80098f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	e047      	b.n	80098dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800984c:	4b27      	ldr	r3, [pc, #156]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 030c 	and.w	r3, r3, #12
 8009854:	2b08      	cmp	r3, #8
 8009856:	d102      	bne.n	800985e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009858:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	e03e      	b.n	80098dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800985e:	4b23      	ldr	r3, [pc, #140]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 030c 	and.w	r3, r3, #12
 8009866:	2b0c      	cmp	r3, #12
 8009868:	d136      	bne.n	80098d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800986a:	4b20      	ldr	r3, [pc, #128]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009874:	4b1d      	ldr	r3, [pc, #116]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	091b      	lsrs	r3, r3, #4
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	3301      	adds	r3, #1
 8009880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d10c      	bne.n	80098a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009888:	4a1a      	ldr	r2, [pc, #104]	; (80098f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	4a16      	ldr	r2, [pc, #88]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009892:	68d2      	ldr	r2, [r2, #12]
 8009894:	0a12      	lsrs	r2, r2, #8
 8009896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800989a:	fb02 f303 	mul.w	r3, r2, r3
 800989e:	617b      	str	r3, [r7, #20]
      break;
 80098a0:	e00c      	b.n	80098bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098a2:	4a13      	ldr	r2, [pc, #76]	; (80098f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098aa:	4a10      	ldr	r2, [pc, #64]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80098ac:	68d2      	ldr	r2, [r2, #12]
 80098ae:	0a12      	lsrs	r2, r2, #8
 80098b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80098b4:	fb02 f303 	mul.w	r3, r2, r3
 80098b8:	617b      	str	r3, [r7, #20]
      break;
 80098ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098bc:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	0e5b      	lsrs	r3, r3, #25
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	3301      	adds	r3, #1
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	e001      	b.n	80098dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80098dc:	693b      	ldr	r3, [r7, #16]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	40021000 	.word	0x40021000
 80098f0:	00f42400 	.word	0x00f42400
 80098f4:	007a1200 	.word	0x007a1200

080098f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098fc:	4b03      	ldr	r3, [pc, #12]	; (800990c <HAL_RCC_GetHCLKFreq+0x14>)
 80098fe:	681b      	ldr	r3, [r3, #0]
}
 8009900:	4618      	mov	r0, r3
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000000 	.word	0x20000000

08009910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009914:	f7ff fff0 	bl	80098f8 <HAL_RCC_GetHCLKFreq>
 8009918:	4602      	mov	r2, r0
 800991a:	4b06      	ldr	r3, [pc, #24]	; (8009934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	f003 0307 	and.w	r3, r3, #7
 8009924:	4904      	ldr	r1, [pc, #16]	; (8009938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009926:	5ccb      	ldrb	r3, [r1, r3]
 8009928:	f003 031f 	and.w	r3, r3, #31
 800992c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009930:	4618      	mov	r0, r3
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40021000 	.word	0x40021000
 8009938:	08014134 	.word	0x08014134

0800993c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009940:	f7ff ffda 	bl	80098f8 <HAL_RCC_GetHCLKFreq>
 8009944:	4602      	mov	r2, r0
 8009946:	4b06      	ldr	r3, [pc, #24]	; (8009960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	0adb      	lsrs	r3, r3, #11
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	4904      	ldr	r1, [pc, #16]	; (8009964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009952:	5ccb      	ldrb	r3, [r1, r3]
 8009954:	f003 031f 	and.w	r3, r3, #31
 8009958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800995c:	4618      	mov	r0, r3
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40021000 	.word	0x40021000
 8009964:	08014134 	.word	0x08014134

08009968 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800996e:	4b1e      	ldr	r3, [pc, #120]	; (80099e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009978:	4b1b      	ldr	r3, [pc, #108]	; (80099e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	091b      	lsrs	r3, r3, #4
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2b03      	cmp	r3, #3
 800998a:	d10c      	bne.n	80099a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800998c:	4a17      	ldr	r2, [pc, #92]	; (80099ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	4a14      	ldr	r2, [pc, #80]	; (80099e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009996:	68d2      	ldr	r2, [r2, #12]
 8009998:	0a12      	lsrs	r2, r2, #8
 800999a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800999e:	fb02 f303 	mul.w	r3, r2, r3
 80099a2:	617b      	str	r3, [r7, #20]
    break;
 80099a4:	e00c      	b.n	80099c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099a6:	4a12      	ldr	r2, [pc, #72]	; (80099f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ae:	4a0e      	ldr	r2, [pc, #56]	; (80099e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099b0:	68d2      	ldr	r2, [r2, #12]
 80099b2:	0a12      	lsrs	r2, r2, #8
 80099b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099b8:	fb02 f303 	mul.w	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]
    break;
 80099be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	0e5b      	lsrs	r3, r3, #25
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	3301      	adds	r3, #1
 80099cc:	005b      	lsls	r3, r3, #1
 80099ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80099da:	687b      	ldr	r3, [r7, #4]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	40021000 	.word	0x40021000
 80099ec:	007a1200 	.word	0x007a1200
 80099f0:	00f42400 	.word	0x00f42400

080099f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80099fc:	2300      	movs	r3, #0
 80099fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a00:	2300      	movs	r3, #0
 8009a02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8098 	beq.w	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a12:	2300      	movs	r3, #0
 8009a14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a16:	4b43      	ldr	r3, [pc, #268]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10d      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a22:	4b40      	ldr	r3, [pc, #256]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a26:	4a3f      	ldr	r2, [pc, #252]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8009a2e:	4b3d      	ldr	r3, [pc, #244]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a36:	60bb      	str	r3, [r7, #8]
 8009a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a3e:	4b3a      	ldr	r3, [pc, #232]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a39      	ldr	r2, [pc, #228]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a4a:	f7fc fc85 	bl	8006358 <HAL_GetTick>
 8009a4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a50:	e009      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a52:	f7fc fc81 	bl	8006358 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d902      	bls.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	74fb      	strb	r3, [r7, #19]
        break;
 8009a64:	e005      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a66:	4b30      	ldr	r3, [pc, #192]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d0ef      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009a72:	7cfb      	ldrb	r3, [r7, #19]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d159      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a78:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01e      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d019      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a94:	4b23      	ldr	r3, [pc, #140]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009aa0:	4b20      	ldr	r3, [pc, #128]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa6:	4a1f      	ldr	r2, [pc, #124]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ab0:	4b1c      	ldr	r3, [pc, #112]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab6:	4a1b      	ldr	r2, [pc, #108]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ac0:	4a18      	ldr	r2, [pc, #96]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d016      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad2:	f7fc fc41 	bl	8006358 <HAL_GetTick>
 8009ad6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ad8:	e00b      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ada:	f7fc fc3d 	bl	8006358 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d902      	bls.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	74fb      	strb	r3, [r7, #19]
            break;
 8009af0:	e006      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d0ec      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009b00:	7cfb      	ldrb	r3, [r7, #19]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10b      	bne.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b06:	4b07      	ldr	r3, [pc, #28]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b14:	4903      	ldr	r1, [pc, #12]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009b1c:	e008      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b1e:	7cfb      	ldrb	r3, [r7, #19]
 8009b20:	74bb      	strb	r3, [r7, #18]
 8009b22:	e005      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009b24:	40021000 	.word	0x40021000
 8009b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2c:	7cfb      	ldrb	r3, [r7, #19]
 8009b2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b30:	7c7b      	ldrb	r3, [r7, #17]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d105      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b36:	4ba7      	ldr	r3, [pc, #668]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3a:	4aa6      	ldr	r2, [pc, #664]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b4e:	4ba1      	ldr	r3, [pc, #644]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b54:	f023 0203 	bic.w	r2, r3, #3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	499d      	ldr	r1, [pc, #628]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b70:	4b98      	ldr	r3, [pc, #608]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b76:	f023 020c 	bic.w	r2, r3, #12
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	4995      	ldr	r1, [pc, #596]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b92:	4b90      	ldr	r3, [pc, #576]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	498c      	ldr	r1, [pc, #560]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bb4:	4b87      	ldr	r3, [pc, #540]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	4984      	ldr	r1, [pc, #528]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00a      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bd6:	4b7f      	ldr	r3, [pc, #508]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	497b      	ldr	r1, [pc, #492]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00a      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bf8:	4b76      	ldr	r3, [pc, #472]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	4973      	ldr	r1, [pc, #460]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c1a:	4b6e      	ldr	r3, [pc, #440]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	496a      	ldr	r1, [pc, #424]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c3c:	4b65      	ldr	r3, [pc, #404]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	4962      	ldr	r1, [pc, #392]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c5e:	4b5d      	ldr	r3, [pc, #372]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	4959      	ldr	r1, [pc, #356]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c80:	4b54      	ldr	r3, [pc, #336]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c86:	f023 0203 	bic.w	r2, r3, #3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8e:	4951      	ldr	r1, [pc, #324]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ca2:	4b4c      	ldr	r3, [pc, #304]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4948      	ldr	r1, [pc, #288]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d015      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cc4:	4b43      	ldr	r3, [pc, #268]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd2:	4940      	ldr	r1, [pc, #256]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce2:	d105      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ce4:	4b3b      	ldr	r3, [pc, #236]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4a3a      	ldr	r2, [pc, #232]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d015      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009cfc:	4b35      	ldr	r3, [pc, #212]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0a:	4932      	ldr	r1, [pc, #200]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d1a:	d105      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d1c:	4b2d      	ldr	r3, [pc, #180]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	4a2c      	ldr	r2, [pc, #176]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d015      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d34:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	4924      	ldr	r1, [pc, #144]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d52:	d105      	bne.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d54:	4b1f      	ldr	r3, [pc, #124]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	4a1e      	ldr	r2, [pc, #120]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d015      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d6c:	4b19      	ldr	r3, [pc, #100]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7a:	4916      	ldr	r1, [pc, #88]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d8a:	d105      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d8c:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	4a10      	ldr	r2, [pc, #64]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d019      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009da4:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db2:	4908      	ldr	r1, [pc, #32]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dc2:	d109      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dc4:	4b03      	ldr	r3, [pc, #12]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	4a02      	ldr	r2, [pc, #8]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dce:	60d3      	str	r3, [r2, #12]
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009dd2:	bf00      	nop
 8009dd4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d015      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009de4:	4b29      	ldr	r3, [pc, #164]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	4926      	ldr	r1, [pc, #152]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e02:	d105      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e04:	4b21      	ldr	r3, [pc, #132]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	4a20      	ldr	r2, [pc, #128]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d015      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009e1c:	4b1b      	ldr	r3, [pc, #108]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2a:	4918      	ldr	r1, [pc, #96]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3a:	d105      	bne.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e3c:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	4a12      	ldr	r2, [pc, #72]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d015      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e54:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e62:	490a      	ldr	r1, [pc, #40]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e64:	4313      	orrs	r3, r2
 8009e66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e72:	d105      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	4a04      	ldr	r2, [pc, #16]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009e80:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	40021000 	.word	0x40021000

08009e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e09d      	b.n	8009fde <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d108      	bne.n	8009ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009eb2:	d009      	beq.n	8009ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	61da      	str	r2, [r3, #28]
 8009eba:	e005      	b.n	8009ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fb fd5c 	bl	80059a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f08:	d902      	bls.n	8009f10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e002      	b.n	8009f16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009f1e:	d007      	beq.n	8009f30 <HAL_SPI_Init+0xa0>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f28:	d002      	beq.n	8009f30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f40:	431a      	orrs	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f72:	ea42 0103 	orr.w	r1, r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	0c1b      	lsrs	r3, r3, #16
 8009f8c:	f003 0204 	and.w	r2, r3, #4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	f003 0310 	and.w	r3, r3, #16
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9e:	f003 0308 	and.w	r3, r3, #8
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009fac:	ea42 0103 	orr.w	r1, r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69da      	ldr	r2, [r3, #28]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b08a      	sub	sp, #40	; 0x28
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d101      	bne.n	800a00c <HAL_SPI_TransmitReceive+0x26>
 800a008:	2302      	movs	r3, #2
 800a00a:	e1fb      	b.n	800a404 <HAL_SPI_TransmitReceive+0x41e>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a014:	f7fc f9a0 	bl	8006358 <HAL_GetTick>
 800a018:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a020:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a028:	887b      	ldrh	r3, [r7, #2]
 800a02a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a02c:	887b      	ldrh	r3, [r7, #2]
 800a02e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a030:	7efb      	ldrb	r3, [r7, #27]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d00e      	beq.n	800a054 <HAL_SPI_TransmitReceive+0x6e>
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a03c:	d106      	bne.n	800a04c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d102      	bne.n	800a04c <HAL_SPI_TransmitReceive+0x66>
 800a046:	7efb      	ldrb	r3, [r7, #27]
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d003      	beq.n	800a054 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a04c:	2302      	movs	r3, #2
 800a04e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a052:	e1cd      	b.n	800a3f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <HAL_SPI_TransmitReceive+0x80>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <HAL_SPI_TransmitReceive+0x80>
 800a060:	887b      	ldrh	r3, [r7, #2]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d103      	bne.n	800a06e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a06c:	e1c0      	b.n	800a3f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b04      	cmp	r3, #4
 800a078:	d003      	beq.n	800a082 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2205      	movs	r2, #5
 800a07e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	887a      	ldrh	r2, [r7, #2]
 800a092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	887a      	ldrh	r2, [r7, #2]
 800a09a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	887a      	ldrh	r2, [r7, #2]
 800a0a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	887a      	ldrh	r2, [r7, #2]
 800a0ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0c4:	d802      	bhi.n	800a0cc <HAL_SPI_TransmitReceive+0xe6>
 800a0c6:	8a3b      	ldrh	r3, [r7, #16]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d908      	bls.n	800a0de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a0da:	605a      	str	r2, [r3, #4]
 800a0dc:	e007      	b.n	800a0ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f8:	2b40      	cmp	r3, #64	; 0x40
 800a0fa:	d007      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a10a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a114:	d97c      	bls.n	800a210 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <HAL_SPI_TransmitReceive+0x13e>
 800a11e:	8a7b      	ldrh	r3, [r7, #18]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d169      	bne.n	800a1f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a134:	1c9a      	adds	r2, r3, #2
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a13e:	b29b      	uxth	r3, r3
 800a140:	3b01      	subs	r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a148:	e056      	b.n	800a1f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b02      	cmp	r3, #2
 800a156:	d11b      	bne.n	800a190 <HAL_SPI_TransmitReceive+0x1aa>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d016      	beq.n	800a190 <HAL_SPI_TransmitReceive+0x1aa>
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	2b01      	cmp	r3, #1
 800a166:	d113      	bne.n	800a190 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16c:	881a      	ldrh	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	1c9a      	adds	r2, r3, #2
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d11c      	bne.n	800a1d8 <HAL_SPI_TransmitReceive+0x1f2>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d016      	beq.n	800a1d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	b292      	uxth	r2, r2
 800a1b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	1c9a      	adds	r2, r3, #2
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1d8:	f7fc f8be 	bl	8006358 <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d807      	bhi.n	800a1f8 <HAL_SPI_TransmitReceive+0x212>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ee:	d003      	beq.n	800a1f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a1f6:	e0fb      	b.n	800a3f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1a3      	bne.n	800a14a <HAL_SPI_TransmitReceive+0x164>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d19d      	bne.n	800a14a <HAL_SPI_TransmitReceive+0x164>
 800a20e:	e0df      	b.n	800a3d0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_SPI_TransmitReceive+0x23a>
 800a218:	8a7b      	ldrh	r3, [r7, #18]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	f040 80cb 	bne.w	800a3b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a224:	b29b      	uxth	r3, r3
 800a226:	2b01      	cmp	r3, #1
 800a228:	d912      	bls.n	800a250 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	881a      	ldrh	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	1c9a      	adds	r2, r3, #2
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a244:	b29b      	uxth	r3, r3
 800a246:	3b02      	subs	r3, #2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a24e:	e0b2      	b.n	800a3b6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	330c      	adds	r3, #12
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	3b01      	subs	r3, #1
 800a270:	b29a      	uxth	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a276:	e09e      	b.n	800a3b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b02      	cmp	r3, #2
 800a284:	d134      	bne.n	800a2f0 <HAL_SPI_TransmitReceive+0x30a>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d02f      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x30a>
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	2b01      	cmp	r3, #1
 800a294:	d12c      	bne.n	800a2f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d912      	bls.n	800a2c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	881a      	ldrh	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	1c9a      	adds	r2, r3, #2
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b02      	subs	r3, #2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2c4:	e012      	b.n	800a2ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	7812      	ldrb	r2, [r2, #0]
 800a2d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d148      	bne.n	800a390 <HAL_SPI_TransmitReceive+0x3aa>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a304:	b29b      	uxth	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d042      	beq.n	800a390 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b01      	cmp	r3, #1
 800a314:	d923      	bls.n	800a35e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68da      	ldr	r2, [r3, #12]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	b292      	uxth	r2, r2
 800a322:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	1c9a      	adds	r2, r3, #2
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a334:	b29b      	uxth	r3, r3
 800a336:	3b02      	subs	r3, #2
 800a338:	b29a      	uxth	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a346:	b29b      	uxth	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d81f      	bhi.n	800a38c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a35a:	605a      	str	r2, [r3, #4]
 800a35c:	e016      	b.n	800a38c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f103 020c 	add.w	r2, r3, #12
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	7812      	ldrb	r2, [r2, #0]
 800a36c:	b2d2      	uxtb	r2, r2
 800a36e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a374:	1c5a      	adds	r2, r3, #1
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a380:	b29b      	uxth	r3, r3
 800a382:	3b01      	subs	r3, #1
 800a384:	b29a      	uxth	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a38c:	2301      	movs	r3, #1
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a390:	f7fb ffe2 	bl	8006358 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d803      	bhi.n	800a3a8 <HAL_SPI_TransmitReceive+0x3c2>
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d102      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x3c8>
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d103      	bne.n	800a3b6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a3b4:	e01c      	b.n	800a3f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f47f af5b 	bne.w	800a278 <HAL_SPI_TransmitReceive+0x292>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f47f af54 	bne.w	800a278 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3d0:	69fa      	ldr	r2, [r7, #28]
 800a3d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 f937 	bl	800a648 <SPI_EndRxTxTransaction>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d006      	beq.n	800a3ee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	661a      	str	r2, [r3, #96]	; 0x60
 800a3ec:	e000      	b.n	800a3f0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a3ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a404:	4618      	mov	r0, r3
 800a406:	3728      	adds	r7, #40	; 0x28
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	4613      	mov	r3, r2
 800a41a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a41c:	f7fb ff9c 	bl	8006358 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	1a9b      	subs	r3, r3, r2
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	4413      	add	r3, r2
 800a42a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a42c:	f7fb ff94 	bl	8006358 <HAL_GetTick>
 800a430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a432:	4b39      	ldr	r3, [pc, #228]	; (800a518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	015b      	lsls	r3, r3, #5
 800a438:	0d1b      	lsrs	r3, r3, #20
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	fb02 f303 	mul.w	r3, r2, r3
 800a440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a442:	e054      	b.n	800a4ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44a:	d050      	beq.n	800a4ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a44c:	f7fb ff84 	bl	8006358 <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	69fa      	ldr	r2, [r7, #28]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d902      	bls.n	800a462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d13d      	bne.n	800a4de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a47a:	d111      	bne.n	800a4a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a484:	d004      	beq.n	800a490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a48e:	d107      	bne.n	800a4a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a49e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4a8:	d10f      	bne.n	800a4ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e017      	b.n	800a50e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	bf0c      	ite	eq
 800a4fe:	2301      	moveq	r3, #1
 800a500:	2300      	movne	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d19b      	bne.n	800a444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000000 	.word	0x20000000

0800a51c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08a      	sub	sp, #40	; 0x28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a52e:	f7fb ff13 	bl	8006358 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	4413      	add	r3, r2
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a53e:	f7fb ff0b 	bl	8006358 <HAL_GetTick>
 800a542:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	330c      	adds	r3, #12
 800a54a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a54c:	4b3d      	ldr	r3, [pc, #244]	; (800a644 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	00da      	lsls	r2, r3, #3
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	0d1b      	lsrs	r3, r3, #20
 800a55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
 800a562:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a564:	e060      	b.n	800a628 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a56c:	d107      	bne.n	800a57e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d104      	bne.n	800a57e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d050      	beq.n	800a628 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a586:	f7fb fee7 	bl	8006358 <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a592:	429a      	cmp	r2, r3
 800a594:	d902      	bls.n	800a59c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d13d      	bne.n	800a618 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5b4:	d111      	bne.n	800a5da <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5be:	d004      	beq.n	800a5ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5c8:	d107      	bne.n	800a5da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e2:	d10f      	bne.n	800a604 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a602:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a614:	2303      	movs	r3, #3
 800a616:	e010      	b.n	800a63a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	3b01      	subs	r3, #1
 800a626:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	4013      	ands	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d196      	bne.n	800a566 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3728      	adds	r7, #40	; 0x28
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000000 	.word	0x20000000

0800a648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff ff5b 	bl	800a51c <SPI_WaitFifoStateUntilTimeout>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a670:	f043 0220 	orr.w	r2, r3, #32
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a678:	2303      	movs	r3, #3
 800a67a:	e027      	b.n	800a6cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2200      	movs	r2, #0
 800a684:	2180      	movs	r1, #128	; 0x80
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff fec0 	bl	800a40c <SPI_WaitFlagStateUntilTimeout>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d007      	beq.n	800a6a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a696:	f043 0220 	orr.w	r2, r3, #32
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e014      	b.n	800a6cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff ff34 	bl	800a51c <SPI_WaitFifoStateUntilTimeout>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d007      	beq.n	800a6ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6be:	f043 0220 	orr.w	r2, r3, #32
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e000      	b.n	800a6cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e049      	b.n	800a77a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7fb fc74 	bl	8005fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2202      	movs	r2, #2
 800a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f000 fdfe 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d001      	beq.n	800a79c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e054      	b.n	800a846 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f042 0201 	orr.w	r2, r2, #1
 800a7b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a26      	ldr	r2, [pc, #152]	; (800a854 <HAL_TIM_Base_Start_IT+0xd0>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d022      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c6:	d01d      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a22      	ldr	r2, [pc, #136]	; (800a858 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d018      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a21      	ldr	r2, [pc, #132]	; (800a85c <HAL_TIM_Base_Start_IT+0xd8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d013      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a1f      	ldr	r2, [pc, #124]	; (800a860 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d00e      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a1e      	ldr	r2, [pc, #120]	; (800a864 <HAL_TIM_Base_Start_IT+0xe0>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d009      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a1c      	ldr	r2, [pc, #112]	; (800a868 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d004      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0x80>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a1b      	ldr	r2, [pc, #108]	; (800a86c <HAL_TIM_Base_Start_IT+0xe8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d115      	bne.n	800a830 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689a      	ldr	r2, [r3, #8]
 800a80a:	4b19      	ldr	r3, [pc, #100]	; (800a870 <HAL_TIM_Base_Start_IT+0xec>)
 800a80c:	4013      	ands	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b06      	cmp	r3, #6
 800a814:	d015      	beq.n	800a842 <HAL_TIM_Base_Start_IT+0xbe>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81c:	d011      	beq.n	800a842 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f042 0201 	orr.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82e:	e008      	b.n	800a842 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f042 0201 	orr.w	r2, r2, #1
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e000      	b.n	800a844 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	40012c00 	.word	0x40012c00
 800a858:	40000400 	.word	0x40000400
 800a85c:	40000800 	.word	0x40000800
 800a860:	40000c00 	.word	0x40000c00
 800a864:	40013400 	.word	0x40013400
 800a868:	40014000 	.word	0x40014000
 800a86c:	40015000 	.word	0x40015000
 800a870:	00010007 	.word	0x00010007

0800a874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e049      	b.n	800a91a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f841 	bl	800a922 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f000 fd2e 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
	...

0800a938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <HAL_TIM_PWM_Start+0x24>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b01      	cmp	r3, #1
 800a952:	bf14      	ite	ne
 800a954:	2301      	movne	r3, #1
 800a956:	2300      	moveq	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	e03c      	b.n	800a9d6 <HAL_TIM_PWM_Start+0x9e>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b04      	cmp	r3, #4
 800a960:	d109      	bne.n	800a976 <HAL_TIM_PWM_Start+0x3e>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	bf14      	ite	ne
 800a96e:	2301      	movne	r3, #1
 800a970:	2300      	moveq	r3, #0
 800a972:	b2db      	uxtb	r3, r3
 800a974:	e02f      	b.n	800a9d6 <HAL_TIM_PWM_Start+0x9e>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d109      	bne.n	800a990 <HAL_TIM_PWM_Start+0x58>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b01      	cmp	r3, #1
 800a986:	bf14      	ite	ne
 800a988:	2301      	movne	r3, #1
 800a98a:	2300      	moveq	r3, #0
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	e022      	b.n	800a9d6 <HAL_TIM_PWM_Start+0x9e>
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b0c      	cmp	r3, #12
 800a994:	d109      	bne.n	800a9aa <HAL_TIM_PWM_Start+0x72>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	bf14      	ite	ne
 800a9a2:	2301      	movne	r3, #1
 800a9a4:	2300      	moveq	r3, #0
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	e015      	b.n	800a9d6 <HAL_TIM_PWM_Start+0x9e>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b10      	cmp	r3, #16
 800a9ae:	d109      	bne.n	800a9c4 <HAL_TIM_PWM_Start+0x8c>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	bf14      	ite	ne
 800a9bc:	2301      	movne	r3, #1
 800a9be:	2300      	moveq	r3, #0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	e008      	b.n	800a9d6 <HAL_TIM_PWM_Start+0x9e>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	bf14      	ite	ne
 800a9d0:	2301      	movne	r3, #1
 800a9d2:	2300      	moveq	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e0a6      	b.n	800ab2c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d104      	bne.n	800a9ee <HAL_TIM_PWM_Start+0xb6>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9ec:	e023      	b.n	800aa36 <HAL_TIM_PWM_Start+0xfe>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b04      	cmp	r3, #4
 800a9f2:	d104      	bne.n	800a9fe <HAL_TIM_PWM_Start+0xc6>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9fc:	e01b      	b.n	800aa36 <HAL_TIM_PWM_Start+0xfe>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d104      	bne.n	800aa0e <HAL_TIM_PWM_Start+0xd6>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa0c:	e013      	b.n	800aa36 <HAL_TIM_PWM_Start+0xfe>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b0c      	cmp	r3, #12
 800aa12:	d104      	bne.n	800aa1e <HAL_TIM_PWM_Start+0xe6>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa1c:	e00b      	b.n	800aa36 <HAL_TIM_PWM_Start+0xfe>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b10      	cmp	r3, #16
 800aa22:	d104      	bne.n	800aa2e <HAL_TIM_PWM_Start+0xf6>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa2c:	e003      	b.n	800aa36 <HAL_TIM_PWM_Start+0xfe>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2202      	movs	r2, #2
 800aa32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 f8d6 	bl	800bbf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a3a      	ldr	r2, [pc, #232]	; (800ab34 <HAL_TIM_PWM_Start+0x1fc>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d018      	beq.n	800aa80 <HAL_TIM_PWM_Start+0x148>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a39      	ldr	r2, [pc, #228]	; (800ab38 <HAL_TIM_PWM_Start+0x200>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d013      	beq.n	800aa80 <HAL_TIM_PWM_Start+0x148>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a37      	ldr	r2, [pc, #220]	; (800ab3c <HAL_TIM_PWM_Start+0x204>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00e      	beq.n	800aa80 <HAL_TIM_PWM_Start+0x148>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a36      	ldr	r2, [pc, #216]	; (800ab40 <HAL_TIM_PWM_Start+0x208>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_TIM_PWM_Start+0x148>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a34      	ldr	r2, [pc, #208]	; (800ab44 <HAL_TIM_PWM_Start+0x20c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <HAL_TIM_PWM_Start+0x148>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a33      	ldr	r2, [pc, #204]	; (800ab48 <HAL_TIM_PWM_Start+0x210>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d101      	bne.n	800aa84 <HAL_TIM_PWM_Start+0x14c>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e000      	b.n	800aa86 <HAL_TIM_PWM_Start+0x14e>
 800aa84:	2300      	movs	r3, #0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d007      	beq.n	800aa9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a25      	ldr	r2, [pc, #148]	; (800ab34 <HAL_TIM_PWM_Start+0x1fc>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d022      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaac:	d01d      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a26      	ldr	r2, [pc, #152]	; (800ab4c <HAL_TIM_PWM_Start+0x214>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d018      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a24      	ldr	r2, [pc, #144]	; (800ab50 <HAL_TIM_PWM_Start+0x218>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d013      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a23      	ldr	r2, [pc, #140]	; (800ab54 <HAL_TIM_PWM_Start+0x21c>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00e      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a19      	ldr	r2, [pc, #100]	; (800ab38 <HAL_TIM_PWM_Start+0x200>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d009      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a18      	ldr	r2, [pc, #96]	; (800ab3c <HAL_TIM_PWM_Start+0x204>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d004      	beq.n	800aaea <HAL_TIM_PWM_Start+0x1b2>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a18      	ldr	r2, [pc, #96]	; (800ab48 <HAL_TIM_PWM_Start+0x210>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d115      	bne.n	800ab16 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	4b19      	ldr	r3, [pc, #100]	; (800ab58 <HAL_TIM_PWM_Start+0x220>)
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b06      	cmp	r3, #6
 800aafa:	d015      	beq.n	800ab28 <HAL_TIM_PWM_Start+0x1f0>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab02:	d011      	beq.n	800ab28 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0201 	orr.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab14:	e008      	b.n	800ab28 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0201 	orr.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	e000      	b.n	800ab2a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	40012c00 	.word	0x40012c00
 800ab38:	40013400 	.word	0x40013400
 800ab3c:	40014000 	.word	0x40014000
 800ab40:	40014400 	.word	0x40014400
 800ab44:	40014800 	.word	0x40014800
 800ab48:	40015000 	.word	0x40015000
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	40000800 	.word	0x40000800
 800ab54:	40000c00 	.word	0x40000c00
 800ab58:	00010007 	.word	0x00010007

0800ab5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d122      	bne.n	800abb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d11b      	bne.n	800abb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f06f 0202 	mvn.w	r2, #2
 800ab88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fb9a 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800aba4:	e005      	b.n	800abb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fb8c 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fb9d 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f003 0304 	and.w	r3, r3, #4
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d122      	bne.n	800ac0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d11b      	bne.n	800ac0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f06f 0204 	mvn.w	r2, #4
 800abdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2202      	movs	r2, #2
 800abe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fb70 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800abf8:	e005      	b.n	800ac06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fb62 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fb73 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0308 	and.w	r3, r3, #8
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	d122      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0308 	and.w	r3, r3, #8
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d11b      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0208 	mvn.w	r2, #8
 800ac30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2204      	movs	r2, #4
 800ac36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb46 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800ac4c:	e005      	b.n	800ac5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fb38 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fb49 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0310 	and.w	r3, r3, #16
 800ac6a:	2b10      	cmp	r3, #16
 800ac6c:	d122      	bne.n	800acb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f003 0310 	and.w	r3, r3, #16
 800ac78:	2b10      	cmp	r3, #16
 800ac7a:	d11b      	bne.n	800acb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f06f 0210 	mvn.w	r2, #16
 800ac84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2208      	movs	r2, #8
 800ac8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fb1c 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800aca0:	e005      	b.n	800acae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fb0e 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fb1f 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d10e      	bne.n	800ace0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	2b01      	cmp	r3, #1
 800acce:	d107      	bne.n	800ace0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f06f 0201 	mvn.w	r2, #1
 800acd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fae8 	bl	800b2b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acea:	2b80      	cmp	r3, #128	; 0x80
 800acec:	d10e      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf8:	2b80      	cmp	r3, #128	; 0x80
 800acfa:	d107      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f001 f838 	bl	800bd7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad1a:	d10e      	bne.n	800ad3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad26:	2b80      	cmp	r3, #128	; 0x80
 800ad28:	d107      	bne.n	800ad3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 f82b 	bl	800bd90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad44:	2b40      	cmp	r3, #64	; 0x40
 800ad46:	d10e      	bne.n	800ad66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad52:	2b40      	cmp	r3, #64	; 0x40
 800ad54:	d107      	bne.n	800ad66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 facd 	bl	800b300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	f003 0320 	and.w	r3, r3, #32
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	d10e      	bne.n	800ad92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b20      	cmp	r3, #32
 800ad80:	d107      	bne.n	800ad92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f06f 0220 	mvn.w	r2, #32
 800ad8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 ffeb 	bl	800bd68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ada0:	d10f      	bne.n	800adc2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adb0:	d107      	bne.n	800adc2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800adba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fff1 	bl	800bda4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800add0:	d10f      	bne.n	800adf2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800addc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ade0:	d107      	bne.n	800adf2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800adea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 ffe3 	bl	800bdb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae00:	d10f      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae10:	d107      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ae1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 ffd5 	bl	800bdcc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae30:	d10f      	bne.n	800ae52 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae40:	d107      	bne.n	800ae52 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ae4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 ffc7 	bl	800bde0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae52:	bf00      	nop
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d101      	bne.n	800ae7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e0ff      	b.n	800b07a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b14      	cmp	r3, #20
 800ae86:	f200 80f0 	bhi.w	800b06a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800aee5 	.word	0x0800aee5
 800ae94:	0800b06b 	.word	0x0800b06b
 800ae98:	0800b06b 	.word	0x0800b06b
 800ae9c:	0800b06b 	.word	0x0800b06b
 800aea0:	0800af25 	.word	0x0800af25
 800aea4:	0800b06b 	.word	0x0800b06b
 800aea8:	0800b06b 	.word	0x0800b06b
 800aeac:	0800b06b 	.word	0x0800b06b
 800aeb0:	0800af67 	.word	0x0800af67
 800aeb4:	0800b06b 	.word	0x0800b06b
 800aeb8:	0800b06b 	.word	0x0800b06b
 800aebc:	0800b06b 	.word	0x0800b06b
 800aec0:	0800afa7 	.word	0x0800afa7
 800aec4:	0800b06b 	.word	0x0800b06b
 800aec8:	0800b06b 	.word	0x0800b06b
 800aecc:	0800b06b 	.word	0x0800b06b
 800aed0:	0800afe9 	.word	0x0800afe9
 800aed4:	0800b06b 	.word	0x0800b06b
 800aed8:	0800b06b 	.word	0x0800b06b
 800aedc:	0800b06b 	.word	0x0800b06b
 800aee0:	0800b029 	.word	0x0800b029
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 faba 	bl	800b464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	699a      	ldr	r2, [r3, #24]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0208 	orr.w	r2, r2, #8
 800aefe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699a      	ldr	r2, [r3, #24]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0204 	bic.w	r2, r2, #4
 800af0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6999      	ldr	r1, [r3, #24]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	619a      	str	r2, [r3, #24]
      break;
 800af22:	e0a5      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fb34 	bl	800b598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6999      	ldr	r1, [r3, #24]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	021a      	lsls	r2, r3, #8
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	619a      	str	r2, [r3, #24]
      break;
 800af64:	e084      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 fba7 	bl	800b6c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	69da      	ldr	r2, [r3, #28]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f042 0208 	orr.w	r2, r2, #8
 800af80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	69da      	ldr	r2, [r3, #28]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0204 	bic.w	r2, r2, #4
 800af90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	69d9      	ldr	r1, [r3, #28]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	61da      	str	r2, [r3, #28]
      break;
 800afa4:	e064      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fc19 	bl	800b7e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69d9      	ldr	r1, [r3, #28]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	021a      	lsls	r2, r3, #8
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	61da      	str	r2, [r3, #28]
      break;
 800afe6:	e043      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fc8c 	bl	800b90c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0208 	orr.w	r2, r2, #8
 800b002:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0204 	bic.w	r2, r2, #4
 800b012:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b026:	e023      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fcd6 	bl	800b9e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b042:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b052:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	021a      	lsls	r2, r3, #8
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b068:	e002      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	75fb      	strb	r3, [r7, #23]
      break;
 800b06e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop

0800b084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e0f6      	b.n	800b28e <HAL_TIM_ConfigClockSource+0x20a>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b0be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a6f      	ldr	r2, [pc, #444]	; (800b298 <HAL_TIM_ConfigClockSource+0x214>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	f000 80c1 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b0e0:	4a6d      	ldr	r2, [pc, #436]	; (800b298 <HAL_TIM_ConfigClockSource+0x214>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	f200 80c6 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b0e8:	4a6c      	ldr	r2, [pc, #432]	; (800b29c <HAL_TIM_ConfigClockSource+0x218>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	f000 80b9 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b0f0:	4a6a      	ldr	r2, [pc, #424]	; (800b29c <HAL_TIM_ConfigClockSource+0x218>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	f200 80be 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b0f8:	4a69      	ldr	r2, [pc, #420]	; (800b2a0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	f000 80b1 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b100:	4a67      	ldr	r2, [pc, #412]	; (800b2a0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	f200 80b6 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b108:	4a66      	ldr	r2, [pc, #408]	; (800b2a4 <HAL_TIM_ConfigClockSource+0x220>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	f000 80a9 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b110:	4a64      	ldr	r2, [pc, #400]	; (800b2a4 <HAL_TIM_ConfigClockSource+0x220>)
 800b112:	4293      	cmp	r3, r2
 800b114:	f200 80ae 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b118:	4a63      	ldr	r2, [pc, #396]	; (800b2a8 <HAL_TIM_ConfigClockSource+0x224>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	f000 80a1 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b120:	4a61      	ldr	r2, [pc, #388]	; (800b2a8 <HAL_TIM_ConfigClockSource+0x224>)
 800b122:	4293      	cmp	r3, r2
 800b124:	f200 80a6 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b128:	4a60      	ldr	r2, [pc, #384]	; (800b2ac <HAL_TIM_ConfigClockSource+0x228>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f000 8099 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b130:	4a5e      	ldr	r2, [pc, #376]	; (800b2ac <HAL_TIM_ConfigClockSource+0x228>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f200 809e 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b138:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b13c:	f000 8091 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b140:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b144:	f200 8096 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b14c:	f000 8089 	beq.w	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b154:	f200 808e 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b15c:	d03e      	beq.n	800b1dc <HAL_TIM_ConfigClockSource+0x158>
 800b15e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b162:	f200 8087 	bhi.w	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b16a:	f000 8086 	beq.w	800b27a <HAL_TIM_ConfigClockSource+0x1f6>
 800b16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b172:	d87f      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b174:	2b70      	cmp	r3, #112	; 0x70
 800b176:	d01a      	beq.n	800b1ae <HAL_TIM_ConfigClockSource+0x12a>
 800b178:	2b70      	cmp	r3, #112	; 0x70
 800b17a:	d87b      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b17c:	2b60      	cmp	r3, #96	; 0x60
 800b17e:	d050      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x19e>
 800b180:	2b60      	cmp	r3, #96	; 0x60
 800b182:	d877      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b184:	2b50      	cmp	r3, #80	; 0x50
 800b186:	d03c      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x17e>
 800b188:	2b50      	cmp	r3, #80	; 0x50
 800b18a:	d873      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b18c:	2b40      	cmp	r3, #64	; 0x40
 800b18e:	d058      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x1be>
 800b190:	2b40      	cmp	r3, #64	; 0x40
 800b192:	d86f      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b194:	2b30      	cmp	r3, #48	; 0x30
 800b196:	d064      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b198:	2b30      	cmp	r3, #48	; 0x30
 800b19a:	d86b      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b19c:	2b20      	cmp	r3, #32
 800b19e:	d060      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d867      	bhi.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d05c      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b1a8:	2b10      	cmp	r3, #16
 800b1aa:	d05a      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x1de>
 800b1ac:	e062      	b.n	800b274 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	6899      	ldr	r1, [r3, #8]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f000 fcf7 	bl	800bbb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	609a      	str	r2, [r3, #8]
      break;
 800b1da:	e04f      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	6899      	ldr	r1, [r3, #8]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f000 fce0 	bl	800bbb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689a      	ldr	r2, [r3, #8]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1fe:	609a      	str	r2, [r3, #8]
      break;
 800b200:	e03c      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	6859      	ldr	r1, [r3, #4]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	461a      	mov	r2, r3
 800b210:	f000 fc52 	bl	800bab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2150      	movs	r1, #80	; 0x50
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fcab 	bl	800bb76 <TIM_ITRx_SetConfig>
      break;
 800b220:	e02c      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6859      	ldr	r1, [r3, #4]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	461a      	mov	r2, r3
 800b230:	f000 fc71 	bl	800bb16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2160      	movs	r1, #96	; 0x60
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fc9b 	bl	800bb76 <TIM_ITRx_SetConfig>
      break;
 800b240:	e01c      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	461a      	mov	r2, r3
 800b250:	f000 fc32 	bl	800bab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2140      	movs	r1, #64	; 0x40
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fc8b 	bl	800bb76 <TIM_ITRx_SetConfig>
      break;
 800b260:	e00c      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4619      	mov	r1, r3
 800b26c:	4610      	mov	r0, r2
 800b26e:	f000 fc82 	bl	800bb76 <TIM_ITRx_SetConfig>
      break;
 800b272:	e003      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	73fb      	strb	r3, [r7, #15]
      break;
 800b278:	e000      	b.n	800b27c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b27a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	00100070 	.word	0x00100070
 800b29c:	00100060 	.word	0x00100060
 800b2a0:	00100050 	.word	0x00100050
 800b2a4:	00100040 	.word	0x00100040
 800b2a8:	00100030 	.word	0x00100030
 800b2ac:	00100020 	.word	0x00100020

0800b2b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a46      	ldr	r2, [pc, #280]	; (800b440 <TIM_Base_SetConfig+0x12c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d017      	beq.n	800b35c <TIM_Base_SetConfig+0x48>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b332:	d013      	beq.n	800b35c <TIM_Base_SetConfig+0x48>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a43      	ldr	r2, [pc, #268]	; (800b444 <TIM_Base_SetConfig+0x130>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00f      	beq.n	800b35c <TIM_Base_SetConfig+0x48>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a42      	ldr	r2, [pc, #264]	; (800b448 <TIM_Base_SetConfig+0x134>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00b      	beq.n	800b35c <TIM_Base_SetConfig+0x48>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a41      	ldr	r2, [pc, #260]	; (800b44c <TIM_Base_SetConfig+0x138>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d007      	beq.n	800b35c <TIM_Base_SetConfig+0x48>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a40      	ldr	r2, [pc, #256]	; (800b450 <TIM_Base_SetConfig+0x13c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d003      	beq.n	800b35c <TIM_Base_SetConfig+0x48>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a3f      	ldr	r2, [pc, #252]	; (800b454 <TIM_Base_SetConfig+0x140>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d108      	bne.n	800b36e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a33      	ldr	r2, [pc, #204]	; (800b440 <TIM_Base_SetConfig+0x12c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d023      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37c:	d01f      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a30      	ldr	r2, [pc, #192]	; (800b444 <TIM_Base_SetConfig+0x130>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d01b      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a2f      	ldr	r2, [pc, #188]	; (800b448 <TIM_Base_SetConfig+0x134>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d017      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a2e      	ldr	r2, [pc, #184]	; (800b44c <TIM_Base_SetConfig+0x138>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d013      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a2d      	ldr	r2, [pc, #180]	; (800b450 <TIM_Base_SetConfig+0x13c>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00f      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a2d      	ldr	r2, [pc, #180]	; (800b458 <TIM_Base_SetConfig+0x144>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00b      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a2c      	ldr	r2, [pc, #176]	; (800b45c <TIM_Base_SetConfig+0x148>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d007      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a2b      	ldr	r2, [pc, #172]	; (800b460 <TIM_Base_SetConfig+0x14c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d003      	beq.n	800b3be <TIM_Base_SetConfig+0xaa>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a26      	ldr	r2, [pc, #152]	; (800b454 <TIM_Base_SetConfig+0x140>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d108      	bne.n	800b3d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a12      	ldr	r2, [pc, #72]	; (800b440 <TIM_Base_SetConfig+0x12c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d013      	beq.n	800b424 <TIM_Base_SetConfig+0x110>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a14      	ldr	r2, [pc, #80]	; (800b450 <TIM_Base_SetConfig+0x13c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00f      	beq.n	800b424 <TIM_Base_SetConfig+0x110>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a14      	ldr	r2, [pc, #80]	; (800b458 <TIM_Base_SetConfig+0x144>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d00b      	beq.n	800b424 <TIM_Base_SetConfig+0x110>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a13      	ldr	r2, [pc, #76]	; (800b45c <TIM_Base_SetConfig+0x148>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d007      	beq.n	800b424 <TIM_Base_SetConfig+0x110>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a12      	ldr	r2, [pc, #72]	; (800b460 <TIM_Base_SetConfig+0x14c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d003      	beq.n	800b424 <TIM_Base_SetConfig+0x110>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a0d      	ldr	r2, [pc, #52]	; (800b454 <TIM_Base_SetConfig+0x140>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d103      	bne.n	800b42c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	691a      	ldr	r2, [r3, #16]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	615a      	str	r2, [r3, #20]
}
 800b432:	bf00      	nop
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	40012c00 	.word	0x40012c00
 800b444:	40000400 	.word	0x40000400
 800b448:	40000800 	.word	0x40000800
 800b44c:	40000c00 	.word	0x40000c00
 800b450:	40013400 	.word	0x40013400
 800b454:	40015000 	.word	0x40015000
 800b458:	40014000 	.word	0x40014000
 800b45c:	40014400 	.word	0x40014400
 800b460:	40014800 	.word	0x40014800

0800b464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	f023 0201 	bic.w	r2, r3, #1
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0303 	bic.w	r3, r3, #3
 800b49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f023 0302 	bic.w	r3, r3, #2
 800b4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a30      	ldr	r2, [pc, #192]	; (800b580 <TIM_OC1_SetConfig+0x11c>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d013      	beq.n	800b4ec <TIM_OC1_SetConfig+0x88>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a2f      	ldr	r2, [pc, #188]	; (800b584 <TIM_OC1_SetConfig+0x120>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00f      	beq.n	800b4ec <TIM_OC1_SetConfig+0x88>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a2e      	ldr	r2, [pc, #184]	; (800b588 <TIM_OC1_SetConfig+0x124>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d00b      	beq.n	800b4ec <TIM_OC1_SetConfig+0x88>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a2d      	ldr	r2, [pc, #180]	; (800b58c <TIM_OC1_SetConfig+0x128>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d007      	beq.n	800b4ec <TIM_OC1_SetConfig+0x88>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a2c      	ldr	r2, [pc, #176]	; (800b590 <TIM_OC1_SetConfig+0x12c>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d003      	beq.n	800b4ec <TIM_OC1_SetConfig+0x88>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a2b      	ldr	r2, [pc, #172]	; (800b594 <TIM_OC1_SetConfig+0x130>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d10c      	bne.n	800b506 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	f023 0308 	bic.w	r3, r3, #8
 800b4f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f023 0304 	bic.w	r3, r3, #4
 800b504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a1d      	ldr	r2, [pc, #116]	; (800b580 <TIM_OC1_SetConfig+0x11c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d013      	beq.n	800b536 <TIM_OC1_SetConfig+0xd2>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a1c      	ldr	r2, [pc, #112]	; (800b584 <TIM_OC1_SetConfig+0x120>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00f      	beq.n	800b536 <TIM_OC1_SetConfig+0xd2>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a1b      	ldr	r2, [pc, #108]	; (800b588 <TIM_OC1_SetConfig+0x124>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d00b      	beq.n	800b536 <TIM_OC1_SetConfig+0xd2>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1a      	ldr	r2, [pc, #104]	; (800b58c <TIM_OC1_SetConfig+0x128>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d007      	beq.n	800b536 <TIM_OC1_SetConfig+0xd2>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a19      	ldr	r2, [pc, #100]	; (800b590 <TIM_OC1_SetConfig+0x12c>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d003      	beq.n	800b536 <TIM_OC1_SetConfig+0xd2>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a18      	ldr	r2, [pc, #96]	; (800b594 <TIM_OC1_SetConfig+0x130>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d111      	bne.n	800b55a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b53c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	621a      	str	r2, [r3, #32]
}
 800b574:	bf00      	nop
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	40012c00 	.word	0x40012c00
 800b584:	40013400 	.word	0x40013400
 800b588:	40014000 	.word	0x40014000
 800b58c:	40014400 	.word	0x40014400
 800b590:	40014800 	.word	0x40014800
 800b594:	40015000 	.word	0x40015000

0800b598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b598:	b480      	push	{r7}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	f023 0210 	bic.w	r2, r3, #16
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	021b      	lsls	r3, r3, #8
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f023 0320 	bic.w	r3, r3, #32
 800b5e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a2c      	ldr	r2, [pc, #176]	; (800b6a8 <TIM_OC2_SetConfig+0x110>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d007      	beq.n	800b60c <TIM_OC2_SetConfig+0x74>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a2b      	ldr	r2, [pc, #172]	; (800b6ac <TIM_OC2_SetConfig+0x114>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d003      	beq.n	800b60c <TIM_OC2_SetConfig+0x74>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a2a      	ldr	r2, [pc, #168]	; (800b6b0 <TIM_OC2_SetConfig+0x118>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d10d      	bne.n	800b628 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	011b      	lsls	r3, r3, #4
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a1f      	ldr	r2, [pc, #124]	; (800b6a8 <TIM_OC2_SetConfig+0x110>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d013      	beq.n	800b658 <TIM_OC2_SetConfig+0xc0>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a1e      	ldr	r2, [pc, #120]	; (800b6ac <TIM_OC2_SetConfig+0x114>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00f      	beq.n	800b658 <TIM_OC2_SetConfig+0xc0>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <TIM_OC2_SetConfig+0x11c>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d00b      	beq.n	800b658 <TIM_OC2_SetConfig+0xc0>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a1d      	ldr	r2, [pc, #116]	; (800b6b8 <TIM_OC2_SetConfig+0x120>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d007      	beq.n	800b658 <TIM_OC2_SetConfig+0xc0>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a1c      	ldr	r2, [pc, #112]	; (800b6bc <TIM_OC2_SetConfig+0x124>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d003      	beq.n	800b658 <TIM_OC2_SetConfig+0xc0>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a17      	ldr	r2, [pc, #92]	; (800b6b0 <TIM_OC2_SetConfig+0x118>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d113      	bne.n	800b680 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b65e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	621a      	str	r2, [r3, #32]
}
 800b69a:	bf00      	nop
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	40012c00 	.word	0x40012c00
 800b6ac:	40013400 	.word	0x40013400
 800b6b0:	40015000 	.word	0x40015000
 800b6b4:	40014000 	.word	0x40014000
 800b6b8:	40014400 	.word	0x40014400
 800b6bc:	40014800 	.word	0x40014800

0800b6c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f023 0303 	bic.w	r3, r3, #3
 800b6fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b70c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	4313      	orrs	r3, r2
 800b718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a2b      	ldr	r2, [pc, #172]	; (800b7cc <TIM_OC3_SetConfig+0x10c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d007      	beq.n	800b732 <TIM_OC3_SetConfig+0x72>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a2a      	ldr	r2, [pc, #168]	; (800b7d0 <TIM_OC3_SetConfig+0x110>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d003      	beq.n	800b732 <TIM_OC3_SetConfig+0x72>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a29      	ldr	r2, [pc, #164]	; (800b7d4 <TIM_OC3_SetConfig+0x114>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d10d      	bne.n	800b74e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	021b      	lsls	r3, r3, #8
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	4313      	orrs	r3, r2
 800b744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b74c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a1e      	ldr	r2, [pc, #120]	; (800b7cc <TIM_OC3_SetConfig+0x10c>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d013      	beq.n	800b77e <TIM_OC3_SetConfig+0xbe>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a1d      	ldr	r2, [pc, #116]	; (800b7d0 <TIM_OC3_SetConfig+0x110>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d00f      	beq.n	800b77e <TIM_OC3_SetConfig+0xbe>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a1d      	ldr	r2, [pc, #116]	; (800b7d8 <TIM_OC3_SetConfig+0x118>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00b      	beq.n	800b77e <TIM_OC3_SetConfig+0xbe>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a1c      	ldr	r2, [pc, #112]	; (800b7dc <TIM_OC3_SetConfig+0x11c>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d007      	beq.n	800b77e <TIM_OC3_SetConfig+0xbe>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a1b      	ldr	r2, [pc, #108]	; (800b7e0 <TIM_OC3_SetConfig+0x120>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d003      	beq.n	800b77e <TIM_OC3_SetConfig+0xbe>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a16      	ldr	r2, [pc, #88]	; (800b7d4 <TIM_OC3_SetConfig+0x114>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d113      	bne.n	800b7a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b78c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	4313      	orrs	r3, r2
 800b798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	011b      	lsls	r3, r3, #4
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	621a      	str	r2, [r3, #32]
}
 800b7c0:	bf00      	nop
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	40012c00 	.word	0x40012c00
 800b7d0:	40013400 	.word	0x40013400
 800b7d4:	40015000 	.word	0x40015000
 800b7d8:	40014000 	.word	0x40014000
 800b7dc:	40014400 	.word	0x40014400
 800b7e0:	40014800 	.word	0x40014800

0800b7e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	4313      	orrs	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	031b      	lsls	r3, r3, #12
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a2c      	ldr	r2, [pc, #176]	; (800b8f4 <TIM_OC4_SetConfig+0x110>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d007      	beq.n	800b858 <TIM_OC4_SetConfig+0x74>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a2b      	ldr	r2, [pc, #172]	; (800b8f8 <TIM_OC4_SetConfig+0x114>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d003      	beq.n	800b858 <TIM_OC4_SetConfig+0x74>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a2a      	ldr	r2, [pc, #168]	; (800b8fc <TIM_OC4_SetConfig+0x118>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d10d      	bne.n	800b874 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b85e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	031b      	lsls	r3, r3, #12
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	4313      	orrs	r3, r2
 800b86a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b872:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a1f      	ldr	r2, [pc, #124]	; (800b8f4 <TIM_OC4_SetConfig+0x110>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d013      	beq.n	800b8a4 <TIM_OC4_SetConfig+0xc0>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a1e      	ldr	r2, [pc, #120]	; (800b8f8 <TIM_OC4_SetConfig+0x114>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d00f      	beq.n	800b8a4 <TIM_OC4_SetConfig+0xc0>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a1e      	ldr	r2, [pc, #120]	; (800b900 <TIM_OC4_SetConfig+0x11c>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d00b      	beq.n	800b8a4 <TIM_OC4_SetConfig+0xc0>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <TIM_OC4_SetConfig+0x120>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d007      	beq.n	800b8a4 <TIM_OC4_SetConfig+0xc0>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a1c      	ldr	r2, [pc, #112]	; (800b908 <TIM_OC4_SetConfig+0x124>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d003      	beq.n	800b8a4 <TIM_OC4_SetConfig+0xc0>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a17      	ldr	r2, [pc, #92]	; (800b8fc <TIM_OC4_SetConfig+0x118>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d113      	bne.n	800b8cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	019b      	lsls	r3, r3, #6
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	019b      	lsls	r3, r3, #6
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	621a      	str	r2, [r3, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	40012c00 	.word	0x40012c00
 800b8f8:	40013400 	.word	0x40013400
 800b8fc:	40015000 	.word	0x40015000
 800b900:	40014000 	.word	0x40014000
 800b904:	40014400 	.word	0x40014400
 800b908:	40014800 	.word	0x40014800

0800b90c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b950:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	041b      	lsls	r3, r3, #16
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a19      	ldr	r2, [pc, #100]	; (800b9c8 <TIM_OC5_SetConfig+0xbc>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d013      	beq.n	800b98e <TIM_OC5_SetConfig+0x82>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a18      	ldr	r2, [pc, #96]	; (800b9cc <TIM_OC5_SetConfig+0xc0>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d00f      	beq.n	800b98e <TIM_OC5_SetConfig+0x82>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a17      	ldr	r2, [pc, #92]	; (800b9d0 <TIM_OC5_SetConfig+0xc4>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d00b      	beq.n	800b98e <TIM_OC5_SetConfig+0x82>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a16      	ldr	r2, [pc, #88]	; (800b9d4 <TIM_OC5_SetConfig+0xc8>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d007      	beq.n	800b98e <TIM_OC5_SetConfig+0x82>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <TIM_OC5_SetConfig+0xcc>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d003      	beq.n	800b98e <TIM_OC5_SetConfig+0x82>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a14      	ldr	r2, [pc, #80]	; (800b9dc <TIM_OC5_SetConfig+0xd0>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d109      	bne.n	800b9a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b994:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	621a      	str	r2, [r3, #32]
}
 800b9bc:	bf00      	nop
 800b9be:	371c      	adds	r7, #28
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	40012c00 	.word	0x40012c00
 800b9cc:	40013400 	.word	0x40013400
 800b9d0:	40014000 	.word	0x40014000
 800b9d4:	40014400 	.word	0x40014400
 800b9d8:	40014800 	.word	0x40014800
 800b9dc:	40015000 	.word	0x40015000

0800b9e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	021b      	lsls	r3, r3, #8
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	051b      	lsls	r3, r3, #20
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a1a      	ldr	r2, [pc, #104]	; (800baa0 <TIM_OC6_SetConfig+0xc0>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d013      	beq.n	800ba64 <TIM_OC6_SetConfig+0x84>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a19      	ldr	r2, [pc, #100]	; (800baa4 <TIM_OC6_SetConfig+0xc4>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00f      	beq.n	800ba64 <TIM_OC6_SetConfig+0x84>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a18      	ldr	r2, [pc, #96]	; (800baa8 <TIM_OC6_SetConfig+0xc8>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d00b      	beq.n	800ba64 <TIM_OC6_SetConfig+0x84>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a17      	ldr	r2, [pc, #92]	; (800baac <TIM_OC6_SetConfig+0xcc>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d007      	beq.n	800ba64 <TIM_OC6_SetConfig+0x84>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a16      	ldr	r2, [pc, #88]	; (800bab0 <TIM_OC6_SetConfig+0xd0>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d003      	beq.n	800ba64 <TIM_OC6_SetConfig+0x84>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a15      	ldr	r2, [pc, #84]	; (800bab4 <TIM_OC6_SetConfig+0xd4>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d109      	bne.n	800ba78 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	029b      	lsls	r3, r3, #10
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	621a      	str	r2, [r3, #32]
}
 800ba92:	bf00      	nop
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40012c00 	.word	0x40012c00
 800baa4:	40013400 	.word	0x40013400
 800baa8:	40014000 	.word	0x40014000
 800baac:	40014400 	.word	0x40014400
 800bab0:	40014800 	.word	0x40014800
 800bab4:	40015000 	.word	0x40015000

0800bab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	f023 0201 	bic.w	r2, r3, #1
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	4313      	orrs	r3, r2
 800baec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f023 030a 	bic.w	r3, r3, #10
 800baf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	621a      	str	r2, [r3, #32]
}
 800bb0a:	bf00      	nop
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b087      	sub	sp, #28
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	f023 0210 	bic.w	r2, r3, #16
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	031b      	lsls	r3, r3, #12
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	697a      	ldr	r2, [r7, #20]
 800bb62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	621a      	str	r2, [r3, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	371c      	adds	r7, #28
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b085      	sub	sp, #20
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bb8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	f043 0307 	orr.w	r3, r3, #7
 800bb9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	609a      	str	r2, [r3, #8]
}
 800bba4:	bf00      	nop
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	021a      	lsls	r2, r3, #8
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	609a      	str	r2, [r3, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	371c      	adds	r7, #28
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	f003 031f 	and.w	r3, r3, #31
 800bc02:	2201      	movs	r2, #1
 800bc04:	fa02 f303 	lsl.w	r3, r2, r3
 800bc08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6a1a      	ldr	r2, [r3, #32]
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	43db      	mvns	r3, r3
 800bc12:	401a      	ands	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6a1a      	ldr	r2, [r3, #32]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f003 031f 	and.w	r3, r3, #31
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	fa01 f303 	lsl.w	r3, r1, r3
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	621a      	str	r2, [r3, #32]
}
 800bc2e:	bf00      	nop
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d101      	bne.n	800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc50:	2302      	movs	r3, #2
 800bc52:	e074      	b.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a34      	ldr	r2, [pc, #208]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d009      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a33      	ldr	r2, [pc, #204]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d004      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a31      	ldr	r2, [pc, #196]	; (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d108      	bne.n	800bca4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bcaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a21      	ldr	r2, [pc, #132]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d022      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcd4:	d01d      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a1f      	ldr	r2, [pc, #124]	; (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d018      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a1d      	ldr	r2, [pc, #116]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d013      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a1c      	ldr	r2, [pc, #112]	; (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d00e      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a15      	ldr	r2, [pc, #84]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d009      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a18      	ldr	r2, [pc, #96]	; (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d004      	beq.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a11      	ldr	r2, [pc, #68]	; (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d10c      	bne.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	40012c00 	.word	0x40012c00
 800bd50:	40013400 	.word	0x40013400
 800bd54:	40015000 	.word	0x40015000
 800bd58:	40000400 	.word	0x40000400
 800bd5c:	40000800 	.word	0x40000800
 800bd60:	40000c00 	.word	0x40000c00
 800bd64:	40014000 	.word	0x40014000

0800bd68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e042      	b.n	800be8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7fa f989 	bl	8006130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2224      	movs	r2, #36	; 0x24
 800be22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f022 0201 	bic.w	r2, r2, #1
 800be34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fc50 	bl	800c6dc <UART_SetConfig>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d101      	bne.n	800be46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e022      	b.n	800be8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 ff40 	bl	800ccd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f042 0201 	orr.w	r2, r2, #1
 800be82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 ffc7 	bl	800ce18 <UART_CheckIdleState>
 800be8a:	4603      	mov	r3, r0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af02      	add	r7, sp, #8
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	4613      	mov	r3, r2
 800bea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beaa:	2b20      	cmp	r3, #32
 800beac:	f040 8083 	bne.w	800bfb6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d002      	beq.n	800bebc <HAL_UART_Transmit+0x28>
 800beb6:	88fb      	ldrh	r3, [r7, #6]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e07b      	b.n	800bfb8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d101      	bne.n	800bece <HAL_UART_Transmit+0x3a>
 800beca:	2302      	movs	r3, #2
 800becc:	e074      	b.n	800bfb8 <HAL_UART_Transmit+0x124>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2221      	movs	r2, #33	; 0x21
 800bee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bee6:	f7fa fa37 	bl	8006358 <HAL_GetTick>
 800beea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	88fa      	ldrh	r2, [r7, #6]
 800bef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	88fa      	ldrh	r2, [r7, #6]
 800bef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf04:	d108      	bne.n	800bf18 <HAL_UART_Transmit+0x84>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d104      	bne.n	800bf18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	e003      	b.n	800bf20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bf28:	e02c      	b.n	800bf84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2200      	movs	r2, #0
 800bf32:	2180      	movs	r1, #128	; 0x80
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f000 ffba 	bl	800ceae <UART_WaitOnFlagUntilTimeout>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bf40:	2303      	movs	r3, #3
 800bf42:	e039      	b.n	800bfb8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10b      	bne.n	800bf62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	3302      	adds	r3, #2
 800bf5e:	61bb      	str	r3, [r7, #24]
 800bf60:	e007      	b.n	800bf72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1cc      	bne.n	800bf2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2200      	movs	r2, #0
 800bf98:	2140      	movs	r1, #64	; 0x40
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 ff87 	bl	800ceae <UART_WaitOnFlagUntilTimeout>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e006      	b.n	800bfb8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2220      	movs	r2, #32
 800bfae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e000      	b.n	800bfb8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bfb6:	2302      	movs	r3, #2
  }
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08a      	sub	sp, #40	; 0x28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd4:	2b20      	cmp	r3, #32
 800bfd6:	d142      	bne.n	800c05e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <HAL_UART_Receive_IT+0x24>
 800bfde:	88fb      	ldrh	r3, [r7, #6]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e03b      	b.n	800c060 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <HAL_UART_Receive_IT+0x36>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e034      	b.n	800c060 <HAL_UART_Receive_IT+0xa0>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a17      	ldr	r2, [pc, #92]	; (800c068 <HAL_UART_Receive_IT+0xa8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d01f      	beq.n	800c04e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d018      	beq.n	800c04e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	e853 3f00 	ldrex	r3, [r3]
 800c028:	613b      	str	r3, [r7, #16]
   return(result);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	623b      	str	r3, [r7, #32]
 800c03c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03e:	69f9      	ldr	r1, [r7, #28]
 800c040:	6a3a      	ldr	r2, [r7, #32]
 800c042:	e841 2300 	strex	r3, r2, [r1]
 800c046:	61bb      	str	r3, [r7, #24]
   return(result);
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1e6      	bne.n	800c01c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	461a      	mov	r2, r3
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 fff3 	bl	800d040 <UART_Start_Receive_IT>
 800c05a:	4603      	mov	r3, r0
 800c05c:	e000      	b.n	800c060 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c05e:	2302      	movs	r3, #2
  }
}
 800c060:	4618      	mov	r0, r3
 800c062:	3728      	adds	r7, #40	; 0x28
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	40008000 	.word	0x40008000

0800c06c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b0ba      	sub	sp, #232	; 0xe8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	69db      	ldr	r3, [r3, #28]
 800c07a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c092:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c096:	f640 030f 	movw	r3, #2063	; 0x80f
 800c09a:	4013      	ands	r3, r2
 800c09c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c0a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d11b      	bne.n	800c0e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0ac:	f003 0320 	and.w	r3, r3, #32
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d015      	beq.n	800c0e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b8:	f003 0320 	and.w	r3, r3, #32
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d105      	bne.n	800c0cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d009      	beq.n	800c0e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 82d6 	beq.w	800c682 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	4798      	blx	r3
      }
      return;
 800c0de:	e2d0      	b.n	800c682 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 811f 	beq.w	800c328 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0ee:	4b8b      	ldr	r3, [pc, #556]	; (800c31c <HAL_UART_IRQHandler+0x2b0>)
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0fa:	4b89      	ldr	r3, [pc, #548]	; (800c320 <HAL_UART_IRQHandler+0x2b4>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f000 8112 	beq.w	800c328 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d011      	beq.n	800c134 <HAL_UART_IRQHandler+0xc8>
 800c110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2201      	movs	r2, #1
 800c122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12a:	f043 0201 	orr.w	r2, r3, #1
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d011      	beq.n	800c164 <HAL_UART_IRQHandler+0xf8>
 800c140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c144:	f003 0301 	and.w	r3, r3, #1
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00b      	beq.n	800c164 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2202      	movs	r2, #2
 800c152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15a:	f043 0204 	orr.w	r2, r3, #4
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d011      	beq.n	800c194 <HAL_UART_IRQHandler+0x128>
 800c170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00b      	beq.n	800c194 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2204      	movs	r2, #4
 800c182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c18a:	f043 0202 	orr.w	r2, r3, #2
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c198:	f003 0308 	and.w	r3, r3, #8
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d017      	beq.n	800c1d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a4:	f003 0320 	and.w	r3, r3, #32
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d105      	bne.n	800c1b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1b0:	4b5a      	ldr	r3, [pc, #360]	; (800c31c <HAL_UART_IRQHandler+0x2b0>)
 800c1b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2208      	movs	r2, #8
 800c1be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c6:	f043 0208 	orr.w	r2, r3, #8
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d012      	beq.n	800c202 <HAL_UART_IRQHandler+0x196>
 800c1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00c      	beq.n	800c202 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1f8:	f043 0220 	orr.w	r2, r3, #32
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 823c 	beq.w	800c686 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c212:	f003 0320 	and.w	r3, r3, #32
 800c216:	2b00      	cmp	r3, #0
 800c218:	d013      	beq.n	800c242 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c21e:	f003 0320 	and.w	r3, r3, #32
 800c222:	2b00      	cmp	r3, #0
 800c224:	d105      	bne.n	800c232 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c22a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d007      	beq.n	800c242 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	d005      	beq.n	800c266 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c25a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c25e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c262:	2b00      	cmp	r3, #0
 800c264:	d04f      	beq.n	800c306 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f001 f814 	bl	800d294 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c276:	2b40      	cmp	r3, #64	; 0x40
 800c278:	d141      	bne.n	800c2fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3308      	adds	r3, #8
 800c280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c288:	e853 3f00 	ldrex	r3, [r3]
 800c28c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2b6:	e841 2300 	strex	r3, r2, [r1]
 800c2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1d9      	bne.n	800c27a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d013      	beq.n	800c2f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d2:	4a14      	ldr	r2, [pc, #80]	; (800c324 <HAL_UART_IRQHandler+0x2b8>)
 800c2d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fb fe35 	bl	8007f4a <HAL_DMA_Abort_IT>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d017      	beq.n	800c316 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f4:	e00f      	b.n	800c316 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9da 	bl	800c6b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2fc:	e00b      	b.n	800c316 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f9d6 	bl	800c6b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c304:	e007      	b.n	800c316 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f9d2 	bl	800c6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c314:	e1b7      	b.n	800c686 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c316:	bf00      	nop
    return;
 800c318:	e1b5      	b.n	800c686 <HAL_UART_IRQHandler+0x61a>
 800c31a:	bf00      	nop
 800c31c:	10000001 	.word	0x10000001
 800c320:	04000120 	.word	0x04000120
 800c324:	0800d361 	.word	0x0800d361

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	f040 814a 	bne.w	800c5c6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c336:	f003 0310 	and.w	r3, r3, #16
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8143 	beq.w	800c5c6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 813c 	beq.w	800c5c6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2210      	movs	r2, #16
 800c354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c360:	2b40      	cmp	r3, #64	; 0x40
 800c362:	f040 80b5 	bne.w	800c4d0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c372:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 8187 	beq.w	800c68a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c386:	429a      	cmp	r2, r3
 800c388:	f080 817f 	bcs.w	800c68a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c392:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0320 	and.w	r3, r3, #32
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 8086 	bne.w	800c4b4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3b4:	e853 3f00 	ldrex	r3, [r3]
 800c3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1da      	bne.n	800c3a8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c404:	f023 0301 	bic.w	r3, r3, #1
 800c408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3308      	adds	r3, #8
 800c412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c41a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c422:	e841 2300 	strex	r3, r2, [r1]
 800c426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1e1      	bne.n	800c3f2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c438:	e853 3f00 	ldrex	r3, [r3]
 800c43c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3308      	adds	r3, #8
 800c44e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c452:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c45a:	e841 2300 	strex	r3, r2, [r1]
 800c45e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1e3      	bne.n	800c42e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2220      	movs	r2, #32
 800c46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c484:	f023 0310 	bic.w	r3, r3, #16
 800c488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	461a      	mov	r2, r3
 800c492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c496:	65bb      	str	r3, [r7, #88]	; 0x58
 800c498:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c49c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c49e:	e841 2300 	strex	r3, r2, [r1]
 800c4a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1e4      	bne.n	800c474 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fb fcf2 	bl	8007e98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f8fb 	bl	800c6c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c4ce:	e0dc      	b.n	800c68a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80ce 	beq.w	800c68e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c4f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 80c9 	beq.w	800c68e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c51e:	647b      	str	r3, [r7, #68]	; 0x44
 800c520:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e4      	bne.n	800c4fc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	623b      	str	r3, [r7, #32]
   return(result);
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c548:	f023 0301 	bic.w	r3, r3, #1
 800c54c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c55a:	633a      	str	r2, [r7, #48]	; 0x30
 800c55c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e1      	bne.n	800c532 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2220      	movs	r2, #32
 800c572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f023 0310 	bic.w	r3, r3, #16
 800c596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c5a4:	61fb      	str	r3, [r7, #28]
 800c5a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	69b9      	ldr	r1, [r7, #24]
 800c5aa:	69fa      	ldr	r2, [r7, #28]
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	617b      	str	r3, [r7, #20]
   return(result);
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e4      	bne.n	800c582 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f880 	bl	800c6c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5c4:	e063      	b.n	800c68e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00e      	beq.n	800c5f0 <HAL_UART_IRQHandler+0x584>
 800c5d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d008      	beq.n	800c5f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c5e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f001 fb57 	bl	800dc9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5ee:	e051      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d014      	beq.n	800c626 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c604:	2b00      	cmp	r3, #0
 800c606:	d105      	bne.n	800c614 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c60c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d008      	beq.n	800c626 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d03a      	beq.n	800c692 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	4798      	blx	r3
    }
    return;
 800c624:	e035      	b.n	800c692 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d009      	beq.n	800c646 <HAL_UART_IRQHandler+0x5da>
 800c632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fea4 	bl	800d38c <UART_EndTransmit_IT>
    return;
 800c644:	e026      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c64a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d009      	beq.n	800c666 <HAL_UART_IRQHandler+0x5fa>
 800c652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c656:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f001 fb30 	bl	800dcc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c664:	e016      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c66a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d010      	beq.n	800c694 <HAL_UART_IRQHandler+0x628>
 800c672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c676:	2b00      	cmp	r3, #0
 800c678:	da0c      	bge.n	800c694 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f001 fb18 	bl	800dcb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c680:	e008      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
      return;
 800c682:	bf00      	nop
 800c684:	e006      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
    return;
 800c686:	bf00      	nop
 800c688:	e004      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
      return;
 800c68a:	bf00      	nop
 800c68c:	e002      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
      return;
 800c68e:	bf00      	nop
 800c690:	e000      	b.n	800c694 <HAL_UART_IRQHandler+0x628>
    return;
 800c692:	bf00      	nop
  }
}
 800c694:	37e8      	adds	r7, #232	; 0xe8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop

0800c69c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c6a4:	bf00      	nop
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6e0:	b08c      	sub	sp, #48	; 0x30
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	69db      	ldr	r3, [r3, #28]
 800c700:	4313      	orrs	r3, r2
 800c702:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4baa      	ldr	r3, [pc, #680]	; (800c9b4 <UART_SetConfig+0x2d8>)
 800c70c:	4013      	ands	r3, r2
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	6812      	ldr	r2, [r2, #0]
 800c712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c714:	430b      	orrs	r3, r1
 800c716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	68da      	ldr	r2, [r3, #12]
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	430a      	orrs	r2, r1
 800c72c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a9f      	ldr	r2, [pc, #636]	; (800c9b8 <UART_SetConfig+0x2dc>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d004      	beq.n	800c748 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c744:	4313      	orrs	r3, r2
 800c746:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c752:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	6812      	ldr	r2, [r2, #0]
 800c75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c75c:	430b      	orrs	r3, r1
 800c75e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c766:	f023 010f 	bic.w	r1, r3, #15
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	430a      	orrs	r2, r1
 800c774:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a90      	ldr	r2, [pc, #576]	; (800c9bc <UART_SetConfig+0x2e0>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d125      	bne.n	800c7cc <UART_SetConfig+0xf0>
 800c780:	4b8f      	ldr	r3, [pc, #572]	; (800c9c0 <UART_SetConfig+0x2e4>)
 800c782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c786:	f003 0303 	and.w	r3, r3, #3
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d81a      	bhi.n	800c7c4 <UART_SetConfig+0xe8>
 800c78e:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <UART_SetConfig+0xb8>)
 800c790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c794:	0800c7a5 	.word	0x0800c7a5
 800c798:	0800c7b5 	.word	0x0800c7b5
 800c79c:	0800c7ad 	.word	0x0800c7ad
 800c7a0:	0800c7bd 	.word	0x0800c7bd
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7aa:	e116      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7b2:	e112      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c7b4:	2304      	movs	r3, #4
 800c7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ba:	e10e      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c7bc:	2308      	movs	r3, #8
 800c7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7c2:	e10a      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c7c4:	2310      	movs	r3, #16
 800c7c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ca:	e106      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a7c      	ldr	r2, [pc, #496]	; (800c9c4 <UART_SetConfig+0x2e8>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d138      	bne.n	800c848 <UART_SetConfig+0x16c>
 800c7d6:	4b7a      	ldr	r3, [pc, #488]	; (800c9c0 <UART_SetConfig+0x2e4>)
 800c7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7dc:	f003 030c 	and.w	r3, r3, #12
 800c7e0:	2b0c      	cmp	r3, #12
 800c7e2:	d82d      	bhi.n	800c840 <UART_SetConfig+0x164>
 800c7e4:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <UART_SetConfig+0x110>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c821 	.word	0x0800c821
 800c7f0:	0800c841 	.word	0x0800c841
 800c7f4:	0800c841 	.word	0x0800c841
 800c7f8:	0800c841 	.word	0x0800c841
 800c7fc:	0800c831 	.word	0x0800c831
 800c800:	0800c841 	.word	0x0800c841
 800c804:	0800c841 	.word	0x0800c841
 800c808:	0800c841 	.word	0x0800c841
 800c80c:	0800c829 	.word	0x0800c829
 800c810:	0800c841 	.word	0x0800c841
 800c814:	0800c841 	.word	0x0800c841
 800c818:	0800c841 	.word	0x0800c841
 800c81c:	0800c839 	.word	0x0800c839
 800c820:	2300      	movs	r3, #0
 800c822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c826:	e0d8      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c828:	2302      	movs	r3, #2
 800c82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c82e:	e0d4      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c830:	2304      	movs	r3, #4
 800c832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c836:	e0d0      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c838:	2308      	movs	r3, #8
 800c83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c83e:	e0cc      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c840:	2310      	movs	r3, #16
 800c842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c846:	e0c8      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a5e      	ldr	r2, [pc, #376]	; (800c9c8 <UART_SetConfig+0x2ec>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d125      	bne.n	800c89e <UART_SetConfig+0x1c2>
 800c852:	4b5b      	ldr	r3, [pc, #364]	; (800c9c0 <UART_SetConfig+0x2e4>)
 800c854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c858:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c85c:	2b30      	cmp	r3, #48	; 0x30
 800c85e:	d016      	beq.n	800c88e <UART_SetConfig+0x1b2>
 800c860:	2b30      	cmp	r3, #48	; 0x30
 800c862:	d818      	bhi.n	800c896 <UART_SetConfig+0x1ba>
 800c864:	2b20      	cmp	r3, #32
 800c866:	d00a      	beq.n	800c87e <UART_SetConfig+0x1a2>
 800c868:	2b20      	cmp	r3, #32
 800c86a:	d814      	bhi.n	800c896 <UART_SetConfig+0x1ba>
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <UART_SetConfig+0x19a>
 800c870:	2b10      	cmp	r3, #16
 800c872:	d008      	beq.n	800c886 <UART_SetConfig+0x1aa>
 800c874:	e00f      	b.n	800c896 <UART_SetConfig+0x1ba>
 800c876:	2300      	movs	r3, #0
 800c878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c87c:	e0ad      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c87e:	2302      	movs	r3, #2
 800c880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c884:	e0a9      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c886:	2304      	movs	r3, #4
 800c888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c88c:	e0a5      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c88e:	2308      	movs	r3, #8
 800c890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c894:	e0a1      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c896:	2310      	movs	r3, #16
 800c898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c89c:	e09d      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a4a      	ldr	r2, [pc, #296]	; (800c9cc <UART_SetConfig+0x2f0>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d125      	bne.n	800c8f4 <UART_SetConfig+0x218>
 800c8a8:	4b45      	ldr	r3, [pc, #276]	; (800c9c0 <UART_SetConfig+0x2e4>)
 800c8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c8b2:	2bc0      	cmp	r3, #192	; 0xc0
 800c8b4:	d016      	beq.n	800c8e4 <UART_SetConfig+0x208>
 800c8b6:	2bc0      	cmp	r3, #192	; 0xc0
 800c8b8:	d818      	bhi.n	800c8ec <UART_SetConfig+0x210>
 800c8ba:	2b80      	cmp	r3, #128	; 0x80
 800c8bc:	d00a      	beq.n	800c8d4 <UART_SetConfig+0x1f8>
 800c8be:	2b80      	cmp	r3, #128	; 0x80
 800c8c0:	d814      	bhi.n	800c8ec <UART_SetConfig+0x210>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <UART_SetConfig+0x1f0>
 800c8c6:	2b40      	cmp	r3, #64	; 0x40
 800c8c8:	d008      	beq.n	800c8dc <UART_SetConfig+0x200>
 800c8ca:	e00f      	b.n	800c8ec <UART_SetConfig+0x210>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8d2:	e082      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8da:	e07e      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c8dc:	2304      	movs	r3, #4
 800c8de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8e2:	e07a      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c8e4:	2308      	movs	r3, #8
 800c8e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ea:	e076      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c8ec:	2310      	movs	r3, #16
 800c8ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8f2:	e072      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a35      	ldr	r2, [pc, #212]	; (800c9d0 <UART_SetConfig+0x2f4>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d12a      	bne.n	800c954 <UART_SetConfig+0x278>
 800c8fe:	4b30      	ldr	r3, [pc, #192]	; (800c9c0 <UART_SetConfig+0x2e4>)
 800c900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c90c:	d01a      	beq.n	800c944 <UART_SetConfig+0x268>
 800c90e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c912:	d81b      	bhi.n	800c94c <UART_SetConfig+0x270>
 800c914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c918:	d00c      	beq.n	800c934 <UART_SetConfig+0x258>
 800c91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c91e:	d815      	bhi.n	800c94c <UART_SetConfig+0x270>
 800c920:	2b00      	cmp	r3, #0
 800c922:	d003      	beq.n	800c92c <UART_SetConfig+0x250>
 800c924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c928:	d008      	beq.n	800c93c <UART_SetConfig+0x260>
 800c92a:	e00f      	b.n	800c94c <UART_SetConfig+0x270>
 800c92c:	2300      	movs	r3, #0
 800c92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c932:	e052      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c934:	2302      	movs	r3, #2
 800c936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c93a:	e04e      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c93c:	2304      	movs	r3, #4
 800c93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c942:	e04a      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c944:	2308      	movs	r3, #8
 800c946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c94a:	e046      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c94c:	2310      	movs	r3, #16
 800c94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c952:	e042      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a17      	ldr	r2, [pc, #92]	; (800c9b8 <UART_SetConfig+0x2dc>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d13a      	bne.n	800c9d4 <UART_SetConfig+0x2f8>
 800c95e:	4b18      	ldr	r3, [pc, #96]	; (800c9c0 <UART_SetConfig+0x2e4>)
 800c960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c96c:	d01a      	beq.n	800c9a4 <UART_SetConfig+0x2c8>
 800c96e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c972:	d81b      	bhi.n	800c9ac <UART_SetConfig+0x2d0>
 800c974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c978:	d00c      	beq.n	800c994 <UART_SetConfig+0x2b8>
 800c97a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c97e:	d815      	bhi.n	800c9ac <UART_SetConfig+0x2d0>
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <UART_SetConfig+0x2b0>
 800c984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c988:	d008      	beq.n	800c99c <UART_SetConfig+0x2c0>
 800c98a:	e00f      	b.n	800c9ac <UART_SetConfig+0x2d0>
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c992:	e022      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c994:	2302      	movs	r3, #2
 800c996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c99a:	e01e      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c99c:	2304      	movs	r3, #4
 800c99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9a2:	e01a      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c9a4:	2308      	movs	r3, #8
 800c9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9aa:	e016      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c9ac:	2310      	movs	r3, #16
 800c9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9b2:	e012      	b.n	800c9da <UART_SetConfig+0x2fe>
 800c9b4:	cfff69f3 	.word	0xcfff69f3
 800c9b8:	40008000 	.word	0x40008000
 800c9bc:	40013800 	.word	0x40013800
 800c9c0:	40021000 	.word	0x40021000
 800c9c4:	40004400 	.word	0x40004400
 800c9c8:	40004800 	.word	0x40004800
 800c9cc:	40004c00 	.word	0x40004c00
 800c9d0:	40005000 	.word	0x40005000
 800c9d4:	2310      	movs	r3, #16
 800c9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4aae      	ldr	r2, [pc, #696]	; (800cc98 <UART_SetConfig+0x5bc>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	f040 8097 	bne.w	800cb14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c9ea:	2b08      	cmp	r3, #8
 800c9ec:	d823      	bhi.n	800ca36 <UART_SetConfig+0x35a>
 800c9ee:	a201      	add	r2, pc, #4	; (adr r2, 800c9f4 <UART_SetConfig+0x318>)
 800c9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f4:	0800ca19 	.word	0x0800ca19
 800c9f8:	0800ca37 	.word	0x0800ca37
 800c9fc:	0800ca21 	.word	0x0800ca21
 800ca00:	0800ca37 	.word	0x0800ca37
 800ca04:	0800ca27 	.word	0x0800ca27
 800ca08:	0800ca37 	.word	0x0800ca37
 800ca0c:	0800ca37 	.word	0x0800ca37
 800ca10:	0800ca37 	.word	0x0800ca37
 800ca14:	0800ca2f 	.word	0x0800ca2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca18:	f7fc ff7a 	bl	8009910 <HAL_RCC_GetPCLK1Freq>
 800ca1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca1e:	e010      	b.n	800ca42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca20:	4b9e      	ldr	r3, [pc, #632]	; (800cc9c <UART_SetConfig+0x5c0>)
 800ca22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca24:	e00d      	b.n	800ca42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca26:	f7fc ff05 	bl	8009834 <HAL_RCC_GetSysClockFreq>
 800ca2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca2c:	e009      	b.n	800ca42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca34:	e005      	b.n	800ca42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ca36:	2300      	movs	r3, #0
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ca40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 8130 	beq.w	800ccaa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4e:	4a94      	ldr	r2, [pc, #592]	; (800cca0 <UART_SetConfig+0x5c4>)
 800ca50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca54:	461a      	mov	r2, r3
 800ca56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	4613      	mov	r3, r2
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	4413      	add	r3, r2
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d305      	bcc.n	800ca7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d903      	bls.n	800ca82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ca80:	e113      	b.n	800ccaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	2200      	movs	r2, #0
 800ca86:	60bb      	str	r3, [r7, #8]
 800ca88:	60fa      	str	r2, [r7, #12]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8e:	4a84      	ldr	r2, [pc, #528]	; (800cca0 <UART_SetConfig+0x5c4>)
 800ca90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	2200      	movs	r2, #0
 800ca98:	603b      	str	r3, [r7, #0]
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800caa4:	f7f4 f918 	bl	8000cd8 <__aeabi_uldivmod>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	4610      	mov	r0, r2
 800caae:	4619      	mov	r1, r3
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	020b      	lsls	r3, r1, #8
 800caba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cabe:	0202      	lsls	r2, r0, #8
 800cac0:	6979      	ldr	r1, [r7, #20]
 800cac2:	6849      	ldr	r1, [r1, #4]
 800cac4:	0849      	lsrs	r1, r1, #1
 800cac6:	2000      	movs	r0, #0
 800cac8:	460c      	mov	r4, r1
 800caca:	4605      	mov	r5, r0
 800cacc:	eb12 0804 	adds.w	r8, r2, r4
 800cad0:	eb43 0905 	adc.w	r9, r3, r5
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	469a      	mov	sl, r3
 800cadc:	4693      	mov	fp, r2
 800cade:	4652      	mov	r2, sl
 800cae0:	465b      	mov	r3, fp
 800cae2:	4640      	mov	r0, r8
 800cae4:	4649      	mov	r1, r9
 800cae6:	f7f4 f8f7 	bl	8000cd8 <__aeabi_uldivmod>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	4613      	mov	r3, r2
 800caf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caf8:	d308      	bcc.n	800cb0c <UART_SetConfig+0x430>
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb00:	d204      	bcs.n	800cb0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6a3a      	ldr	r2, [r7, #32]
 800cb08:	60da      	str	r2, [r3, #12]
 800cb0a:	e0ce      	b.n	800ccaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cb12:	e0ca      	b.n	800ccaa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	69db      	ldr	r3, [r3, #28]
 800cb18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb1c:	d166      	bne.n	800cbec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cb1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb22:	2b08      	cmp	r3, #8
 800cb24:	d827      	bhi.n	800cb76 <UART_SetConfig+0x49a>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <UART_SetConfig+0x450>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb51 	.word	0x0800cb51
 800cb30:	0800cb59 	.word	0x0800cb59
 800cb34:	0800cb61 	.word	0x0800cb61
 800cb38:	0800cb77 	.word	0x0800cb77
 800cb3c:	0800cb67 	.word	0x0800cb67
 800cb40:	0800cb77 	.word	0x0800cb77
 800cb44:	0800cb77 	.word	0x0800cb77
 800cb48:	0800cb77 	.word	0x0800cb77
 800cb4c:	0800cb6f 	.word	0x0800cb6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb50:	f7fc fede 	bl	8009910 <HAL_RCC_GetPCLK1Freq>
 800cb54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb56:	e014      	b.n	800cb82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb58:	f7fc fef0 	bl	800993c <HAL_RCC_GetPCLK2Freq>
 800cb5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb5e:	e010      	b.n	800cb82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb60:	4b4e      	ldr	r3, [pc, #312]	; (800cc9c <UART_SetConfig+0x5c0>)
 800cb62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb64:	e00d      	b.n	800cb82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb66:	f7fc fe65 	bl	8009834 <HAL_RCC_GetSysClockFreq>
 800cb6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb6c:	e009      	b.n	800cb82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb74:	e005      	b.n	800cb82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cb80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 8090 	beq.w	800ccaa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	4a44      	ldr	r2, [pc, #272]	; (800cca0 <UART_SetConfig+0x5c4>)
 800cb90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb94:	461a      	mov	r2, r3
 800cb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb98:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb9c:	005a      	lsls	r2, r3, #1
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	085b      	lsrs	r3, r3, #1
 800cba4:	441a      	add	r2, r3
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	2b0f      	cmp	r3, #15
 800cbb4:	d916      	bls.n	800cbe4 <UART_SetConfig+0x508>
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbbc:	d212      	bcs.n	800cbe4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	f023 030f 	bic.w	r3, r3, #15
 800cbc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	085b      	lsrs	r3, r3, #1
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	8bfb      	ldrh	r3, [r7, #30]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	8bfa      	ldrh	r2, [r7, #30]
 800cbe0:	60da      	str	r2, [r3, #12]
 800cbe2:	e062      	b.n	800ccaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cbea:	e05e      	b.n	800ccaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbf0:	2b08      	cmp	r3, #8
 800cbf2:	d828      	bhi.n	800cc46 <UART_SetConfig+0x56a>
 800cbf4:	a201      	add	r2, pc, #4	; (adr r2, 800cbfc <UART_SetConfig+0x520>)
 800cbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfa:	bf00      	nop
 800cbfc:	0800cc21 	.word	0x0800cc21
 800cc00:	0800cc29 	.word	0x0800cc29
 800cc04:	0800cc31 	.word	0x0800cc31
 800cc08:	0800cc47 	.word	0x0800cc47
 800cc0c:	0800cc37 	.word	0x0800cc37
 800cc10:	0800cc47 	.word	0x0800cc47
 800cc14:	0800cc47 	.word	0x0800cc47
 800cc18:	0800cc47 	.word	0x0800cc47
 800cc1c:	0800cc3f 	.word	0x0800cc3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc20:	f7fc fe76 	bl	8009910 <HAL_RCC_GetPCLK1Freq>
 800cc24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc26:	e014      	b.n	800cc52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc28:	f7fc fe88 	bl	800993c <HAL_RCC_GetPCLK2Freq>
 800cc2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc2e:	e010      	b.n	800cc52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc30:	4b1a      	ldr	r3, [pc, #104]	; (800cc9c <UART_SetConfig+0x5c0>)
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc34:	e00d      	b.n	800cc52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc36:	f7fc fdfd 	bl	8009834 <HAL_RCC_GetSysClockFreq>
 800cc3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc3c:	e009      	b.n	800cc52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc44:	e005      	b.n	800cc52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cc50:	bf00      	nop
    }

    if (pclk != 0U)
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d028      	beq.n	800ccaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5c:	4a10      	ldr	r2, [pc, #64]	; (800cca0 <UART_SetConfig+0x5c4>)
 800cc5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc62:	461a      	mov	r2, r3
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	085b      	lsrs	r3, r3, #1
 800cc70:	441a      	add	r2, r3
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	2b0f      	cmp	r3, #15
 800cc80:	d910      	bls.n	800cca4 <UART_SetConfig+0x5c8>
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc88:	d20c      	bcs.n	800cca4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	60da      	str	r2, [r3, #12]
 800cc94:	e009      	b.n	800ccaa <UART_SetConfig+0x5ce>
 800cc96:	bf00      	nop
 800cc98:	40008000 	.word	0x40008000
 800cc9c:	00f42400 	.word	0x00f42400
 800cca0:	0801413c 	.word	0x0801413c
      }
      else
      {
        ret = HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ccc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3730      	adds	r7, #48	; 0x30
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ccd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce0:	f003 0301 	and.w	r3, r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00a      	beq.n	800ccfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	430a      	orrs	r2, r1
 800ccfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd02:	f003 0302 	and.w	r3, r3, #2
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00a      	beq.n	800cd20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00a      	beq.n	800cd42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd46:	f003 0308 	and.w	r3, r3, #8
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00a      	beq.n	800cd64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	430a      	orrs	r2, r1
 800cd62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd68:	f003 0310 	and.w	r3, r3, #16
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00a      	beq.n	800cd86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	430a      	orrs	r2, r1
 800cd84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8a:	f003 0320 	and.w	r3, r3, #32
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00a      	beq.n	800cda8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	430a      	orrs	r2, r1
 800cda6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d01a      	beq.n	800cdea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdd2:	d10a      	bne.n	800cdea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	430a      	orrs	r2, r1
 800cde8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00a      	beq.n	800ce0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	605a      	str	r2, [r3, #4]
  }
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af02      	add	r7, sp, #8
 800ce1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce28:	f7f9 fa96 	bl	8006358 <HAL_GetTick>
 800ce2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b08      	cmp	r3, #8
 800ce3a:	d10e      	bne.n	800ce5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f82f 	bl	800ceae <UART_WaitOnFlagUntilTimeout>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e025      	b.n	800cea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b04      	cmp	r3, #4
 800ce66:	d10e      	bne.n	800ce86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f819 	bl	800ceae <UART_WaitOnFlagUntilTimeout>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e00f      	b.n	800cea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2220      	movs	r2, #32
 800ce8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2220      	movs	r2, #32
 800ce92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b09c      	sub	sp, #112	; 0x70
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	603b      	str	r3, [r7, #0]
 800ceba:	4613      	mov	r3, r2
 800cebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cebe:	e0a9      	b.n	800d014 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec6:	f000 80a5 	beq.w	800d014 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ceca:	f7f9 fa45 	bl	8006358 <HAL_GetTick>
 800cece:	4602      	mov	r2, r0
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d302      	bcc.n	800cee0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ceda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d140      	bne.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee8:	e853 3f00 	ldrex	r3, [r3]
 800ceec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ceee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cef4:	667b      	str	r3, [r7, #100]	; 0x64
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cefe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf06:	e841 2300 	strex	r3, r2, [r1]
 800cf0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1e6      	bne.n	800cee0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3308      	adds	r3, #8
 800cf18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1c:	e853 3f00 	ldrex	r3, [r3]
 800cf20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	f023 0301 	bic.w	r3, r3, #1
 800cf28:	663b      	str	r3, [r7, #96]	; 0x60
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3308      	adds	r3, #8
 800cf30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf32:	64ba      	str	r2, [r7, #72]	; 0x48
 800cf34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf3a:	e841 2300 	strex	r3, r2, [r1]
 800cf3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cf40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1e5      	bne.n	800cf12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2220      	movs	r2, #32
 800cf4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2220      	movs	r2, #32
 800cf52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e069      	b.n	800d036 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0304 	and.w	r3, r3, #4
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d051      	beq.n	800d014 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	69db      	ldr	r3, [r3, #28]
 800cf76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf7e:	d149      	bne.n	800d014 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	e853 3f00 	ldrex	r3, [r3]
 800cf96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa8:	637b      	str	r3, [r7, #52]	; 0x34
 800cfaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfb0:	e841 2300 	strex	r3, r2, [r1]
 800cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1e6      	bne.n	800cf8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	e853 3f00 	ldrex	r3, [r3]
 800cfca:	613b      	str	r3, [r7, #16]
   return(result);
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	f023 0301 	bic.w	r3, r3, #1
 800cfd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3308      	adds	r3, #8
 800cfda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cfdc:	623a      	str	r2, [r7, #32]
 800cfde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe0:	69f9      	ldr	r1, [r7, #28]
 800cfe2:	6a3a      	ldr	r2, [r7, #32]
 800cfe4:	e841 2300 	strex	r3, r2, [r1]
 800cfe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e5      	bne.n	800cfbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2220      	movs	r2, #32
 800cffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2220      	movs	r2, #32
 800d004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e010      	b.n	800d036 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	69da      	ldr	r2, [r3, #28]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	4013      	ands	r3, r2
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	429a      	cmp	r2, r3
 800d022:	bf0c      	ite	eq
 800d024:	2301      	moveq	r3, #1
 800d026:	2300      	movne	r3, #0
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	461a      	mov	r2, r3
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	429a      	cmp	r2, r3
 800d030:	f43f af46 	beq.w	800cec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3770      	adds	r7, #112	; 0x70
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d040:	b480      	push	{r7}
 800d042:	b0a3      	sub	sp, #140	; 0x8c
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4613      	mov	r3, r2
 800d04c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	88fa      	ldrh	r2, [r7, #6]
 800d058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	88fa      	ldrh	r2, [r7, #6]
 800d060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d072:	d10e      	bne.n	800d092 <UART_Start_Receive_IT+0x52>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d105      	bne.n	800d088 <UART_Start_Receive_IT+0x48>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d086:	e02d      	b.n	800d0e4 <UART_Start_Receive_IT+0xa4>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	22ff      	movs	r2, #255	; 0xff
 800d08c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d090:	e028      	b.n	800d0e4 <UART_Start_Receive_IT+0xa4>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10d      	bne.n	800d0b6 <UART_Start_Receive_IT+0x76>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d104      	bne.n	800d0ac <UART_Start_Receive_IT+0x6c>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	22ff      	movs	r2, #255	; 0xff
 800d0a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0aa:	e01b      	b.n	800d0e4 <UART_Start_Receive_IT+0xa4>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	227f      	movs	r2, #127	; 0x7f
 800d0b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0b4:	e016      	b.n	800d0e4 <UART_Start_Receive_IT+0xa4>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0be:	d10d      	bne.n	800d0dc <UART_Start_Receive_IT+0x9c>
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d104      	bne.n	800d0d2 <UART_Start_Receive_IT+0x92>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	227f      	movs	r2, #127	; 0x7f
 800d0cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0d0:	e008      	b.n	800d0e4 <UART_Start_Receive_IT+0xa4>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	223f      	movs	r2, #63	; 0x3f
 800d0d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0da:	e003      	b.n	800d0e4 <UART_Start_Receive_IT+0xa4>
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2222      	movs	r2, #34	; 0x22
 800d0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0fe:	e853 3f00 	ldrex	r3, [r3]
 800d102:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3308      	adds	r3, #8
 800d114:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d118:	673a      	str	r2, [r7, #112]	; 0x70
 800d11a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d11e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d120:	e841 2300 	strex	r3, r2, [r1]
 800d124:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1e3      	bne.n	800d0f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d134:	d153      	bne.n	800d1de <UART_Start_Receive_IT+0x19e>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d13c:	88fa      	ldrh	r2, [r7, #6]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d34d      	bcc.n	800d1de <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d14a:	d107      	bne.n	800d15c <UART_Start_Receive_IT+0x11c>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d103      	bne.n	800d15c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4a4b      	ldr	r2, [pc, #300]	; (800d284 <UART_Start_Receive_IT+0x244>)
 800d158:	671a      	str	r2, [r3, #112]	; 0x70
 800d15a:	e002      	b.n	800d162 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	4a4a      	ldr	r2, [pc, #296]	; (800d288 <UART_Start_Receive_IT+0x248>)
 800d160:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d01a      	beq.n	800d1a8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d17a:	e853 3f00 	ldrex	r3, [r3]
 800d17e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d194:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d196:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d198:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d19a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d19c:	e841 2300 	strex	r3, r2, [r1]
 800d1a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e4      	bne.n	800d172 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3308      	adds	r3, #8
 800d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d1c8:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e5      	bne.n	800d1a8 <UART_Start_Receive_IT+0x168>
 800d1dc:	e04a      	b.n	800d274 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1e6:	d107      	bne.n	800d1f8 <UART_Start_Receive_IT+0x1b8>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d103      	bne.n	800d1f8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4a26      	ldr	r2, [pc, #152]	; (800d28c <UART_Start_Receive_IT+0x24c>)
 800d1f4:	671a      	str	r2, [r3, #112]	; 0x70
 800d1f6:	e002      	b.n	800d1fe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4a25      	ldr	r2, [pc, #148]	; (800d290 <UART_Start_Receive_IT+0x250>)
 800d1fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d019      	beq.n	800d242 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d222:	677b      	str	r3, [r7, #116]	; 0x74
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	461a      	mov	r2, r3
 800d22a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34
 800d22e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e6      	bne.n	800d20e <UART_Start_Receive_IT+0x1ce>
 800d240:	e018      	b.n	800d274 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	613b      	str	r3, [r7, #16]
   return(result);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	f043 0320 	orr.w	r3, r3, #32
 800d256:	67bb      	str	r3, [r7, #120]	; 0x78
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	461a      	mov	r2, r3
 800d25e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d260:	623b      	str	r3, [r7, #32]
 800d262:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d264:	69f9      	ldr	r1, [r7, #28]
 800d266:	6a3a      	ldr	r2, [r7, #32]
 800d268:	e841 2300 	strex	r3, r2, [r1]
 800d26c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1e6      	bne.n	800d242 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	378c      	adds	r7, #140	; 0x8c
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	0800d99d 	.word	0x0800d99d
 800d288:	0800d6a5 	.word	0x0800d6a5
 800d28c:	0800d543 	.word	0x0800d543
 800d290:	0800d3e3 	.word	0x0800d3e3

0800d294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d294:	b480      	push	{r7}
 800d296:	b095      	sub	sp, #84	; 0x54
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	e853 3f00 	ldrex	r3, [r3]
 800d2a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d2bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d2c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2c2:	e841 2300 	strex	r3, r2, [r1]
 800d2c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1e6      	bne.n	800d29c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	e853 3f00 	ldrex	r3, [r3]
 800d2dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2e4:	f023 0301 	bic.w	r3, r3, #1
 800d2e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2fa:	e841 2300 	strex	r3, r2, [r1]
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1e3      	bne.n	800d2ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d118      	bne.n	800d340 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	e853 3f00 	ldrex	r3, [r3]
 800d31a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	f023 0310 	bic.w	r3, r3, #16
 800d322:	647b      	str	r3, [r7, #68]	; 0x44
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	461a      	mov	r2, r3
 800d32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d32c:	61bb      	str	r3, [r7, #24]
 800d32e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	6979      	ldr	r1, [r7, #20]
 800d332:	69ba      	ldr	r2, [r7, #24]
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	613b      	str	r3, [r7, #16]
   return(result);
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e6      	bne.n	800d30e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2220      	movs	r2, #32
 800d344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d354:	bf00      	nop
 800d356:	3754      	adds	r7, #84	; 0x54
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff f996 	bl	800c6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d384:	bf00      	nop
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b088      	sub	sp, #32
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	e853 3f00 	ldrex	r3, [r3]
 800d3a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3a8:	61fb      	str	r3, [r7, #28]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	61bb      	str	r3, [r7, #24]
 800d3b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b6:	6979      	ldr	r1, [r7, #20]
 800d3b8:	69ba      	ldr	r2, [r7, #24]
 800d3ba:	e841 2300 	strex	r3, r2, [r1]
 800d3be:	613b      	str	r3, [r7, #16]
   return(result);
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1e6      	bne.n	800d394 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2220      	movs	r2, #32
 800d3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff f961 	bl	800c69c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3da:	bf00      	nop
 800d3dc:	3720      	adds	r7, #32
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b096      	sub	sp, #88	; 0x58
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3fa:	2b22      	cmp	r3, #34	; 0x22
 800d3fc:	f040 8095 	bne.w	800d52a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d40a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d40e:	b2d9      	uxtb	r1, r3
 800d410:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d414:	b2da      	uxtb	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d41a:	400a      	ands	r2, r1
 800d41c:	b2d2      	uxtb	r2, r2
 800d41e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d424:	1c5a      	adds	r2, r3, #1
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d430:	b29b      	uxth	r3, r3
 800d432:	3b01      	subs	r3, #1
 800d434:	b29a      	uxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d442:	b29b      	uxth	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d178      	bne.n	800d53a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d450:	e853 3f00 	ldrex	r3, [r3]
 800d454:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d45c:	653b      	str	r3, [r7, #80]	; 0x50
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d466:	647b      	str	r3, [r7, #68]	; 0x44
 800d468:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d46c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d46e:	e841 2300 	strex	r3, r2, [r1]
 800d472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1e6      	bne.n	800d448 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3308      	adds	r3, #8
 800d480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	e853 3f00 	ldrex	r3, [r3]
 800d488:	623b      	str	r3, [r7, #32]
   return(result);
 800d48a:	6a3b      	ldr	r3, [r7, #32]
 800d48c:	f023 0301 	bic.w	r3, r3, #1
 800d490:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3308      	adds	r3, #8
 800d498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d49a:	633a      	str	r2, [r7, #48]	; 0x30
 800d49c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4a2:	e841 2300 	strex	r3, r2, [r1]
 800d4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1e5      	bne.n	800d47a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2220      	movs	r2, #32
 800d4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d12e      	bne.n	800d522 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	e853 3f00 	ldrex	r3, [r3]
 800d4d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f023 0310 	bic.w	r3, r3, #16
 800d4de:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ec:	69b9      	ldr	r1, [r7, #24]
 800d4ee:	69fa      	ldr	r2, [r7, #28]
 800d4f0:	e841 2300 	strex	r3, r2, [r1]
 800d4f4:	617b      	str	r3, [r7, #20]
   return(result);
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e6      	bne.n	800d4ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	69db      	ldr	r3, [r3, #28]
 800d502:	f003 0310 	and.w	r3, r3, #16
 800d506:	2b10      	cmp	r3, #16
 800d508:	d103      	bne.n	800d512 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2210      	movs	r2, #16
 800d510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff f8d2 	bl	800c6c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d520:	e00b      	b.n	800d53a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7f8 fe78 	bl	8006218 <HAL_UART_RxCpltCallback>
}
 800d528:	e007      	b.n	800d53a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	699a      	ldr	r2, [r3, #24]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f042 0208 	orr.w	r2, r2, #8
 800d538:	619a      	str	r2, [r3, #24]
}
 800d53a:	bf00      	nop
 800d53c:	3758      	adds	r7, #88	; 0x58
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b096      	sub	sp, #88	; 0x58
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d550:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d55a:	2b22      	cmp	r3, #34	; 0x22
 800d55c:	f040 8095 	bne.w	800d68a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d566:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d56e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d570:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d574:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d578:	4013      	ands	r3, r2
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d57e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d584:	1c9a      	adds	r2, r3, #2
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d590:	b29b      	uxth	r3, r3
 800d592:	3b01      	subs	r3, #1
 800d594:	b29a      	uxth	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d178      	bne.n	800d69a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b0:	e853 3f00 	ldrex	r3, [r3]
 800d5b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d5c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5ce:	e841 2300 	strex	r3, r2, [r1]
 800d5d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1e6      	bne.n	800d5a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3308      	adds	r3, #8
 800d5e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	f023 0301 	bic.w	r3, r3, #1
 800d5f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d602:	e841 2300 	strex	r3, r2, [r1]
 800d606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1e5      	bne.n	800d5da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2220      	movs	r2, #32
 800d612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d620:	2b01      	cmp	r3, #1
 800d622:	d12e      	bne.n	800d682 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	e853 3f00 	ldrex	r3, [r3]
 800d636:	60bb      	str	r3, [r7, #8]
   return(result);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	f023 0310 	bic.w	r3, r3, #16
 800d63e:	647b      	str	r3, [r7, #68]	; 0x44
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d648:	61bb      	str	r3, [r7, #24]
 800d64a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64c:	6979      	ldr	r1, [r7, #20]
 800d64e:	69ba      	ldr	r2, [r7, #24]
 800d650:	e841 2300 	strex	r3, r2, [r1]
 800d654:	613b      	str	r3, [r7, #16]
   return(result);
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1e6      	bne.n	800d62a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	69db      	ldr	r3, [r3, #28]
 800d662:	f003 0310 	and.w	r3, r3, #16
 800d666:	2b10      	cmp	r3, #16
 800d668:	d103      	bne.n	800d672 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2210      	movs	r2, #16
 800d670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff f822 	bl	800c6c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d680:	e00b      	b.n	800d69a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7f8 fdc8 	bl	8006218 <HAL_UART_RxCpltCallback>
}
 800d688:	e007      	b.n	800d69a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	699a      	ldr	r2, [r3, #24]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f042 0208 	orr.w	r2, r2, #8
 800d698:	619a      	str	r2, [r3, #24]
}
 800d69a:	bf00      	nop
 800d69c:	3758      	adds	r7, #88	; 0x58
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
	...

0800d6a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b0a6      	sub	sp, #152	; 0x98
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6da:	2b22      	cmp	r3, #34	; 0x22
 800d6dc:	f040 814f 	bne.w	800d97e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6ea:	e0f6      	b.n	800d8da <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d6f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d6fa:	b2d9      	uxtb	r1, r3
 800d6fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d700:	b2da      	uxtb	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d706:	400a      	ands	r2, r1
 800d708:	b2d2      	uxtb	r2, r2
 800d70a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d710:	1c5a      	adds	r2, r3, #1
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	3b01      	subs	r3, #1
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	69db      	ldr	r3, [r3, #28]
 800d72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d053      	beq.n	800d7e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d73e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d011      	beq.n	800d76e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d74a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00b      	beq.n	800d76e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2201      	movs	r2, #1
 800d75c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d764:	f043 0201 	orr.w	r2, r3, #1
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d76e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d772:	f003 0302 	and.w	r3, r3, #2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d011      	beq.n	800d79e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d77a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00b      	beq.n	800d79e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2202      	movs	r2, #2
 800d78c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d794:	f043 0204 	orr.w	r2, r3, #4
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d79e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7a2:	f003 0304 	and.w	r3, r3, #4
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d011      	beq.n	800d7ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d7aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00b      	beq.n	800d7ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2204      	movs	r2, #4
 800d7bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7c4:	f043 0202 	orr.w	r2, r3, #2
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d006      	beq.n	800d7e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7fe ff69 	bl	800c6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d173      	bne.n	800d8da <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7fa:	e853 3f00 	ldrex	r3, [r3]
 800d7fe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	461a      	mov	r2, r3
 800d810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d814:	66bb      	str	r3, [r7, #104]	; 0x68
 800d816:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d818:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d81a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d81c:	e841 2300 	strex	r3, r2, [r1]
 800d820:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1e4      	bne.n	800d7f2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	3308      	adds	r3, #8
 800d82e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d832:	e853 3f00 	ldrex	r3, [r3]
 800d836:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d83a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d83e:	f023 0301 	bic.w	r3, r3, #1
 800d842:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3308      	adds	r3, #8
 800d84a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d84c:	657a      	str	r2, [r7, #84]	; 0x54
 800d84e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d850:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d852:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d854:	e841 2300 	strex	r3, r2, [r1]
 800d858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1e3      	bne.n	800d828 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2220      	movs	r2, #32
 800d864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d872:	2b01      	cmp	r3, #1
 800d874:	d12e      	bne.n	800d8d4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d884:	e853 3f00 	ldrex	r3, [r3]
 800d888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	f023 0310 	bic.w	r3, r3, #16
 800d890:	67bb      	str	r3, [r7, #120]	; 0x78
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d89a:	643b      	str	r3, [r7, #64]	; 0x40
 800d89c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8a2:	e841 2300 	strex	r3, r2, [r1]
 800d8a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e6      	bne.n	800d87c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	f003 0310 	and.w	r3, r3, #16
 800d8b8:	2b10      	cmp	r3, #16
 800d8ba:	d103      	bne.n	800d8c4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2210      	movs	r2, #16
 800d8c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7fe fef9 	bl	800c6c4 <HAL_UARTEx_RxEventCallback>
 800d8d2:	e002      	b.n	800d8da <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7f8 fc9f 	bl	8006218 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d8da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d006      	beq.n	800d8f0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800d8e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f47f aefe 	bne.w	800d6ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d8fa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d045      	beq.n	800d98e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d23e      	bcs.n	800d98e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	3308      	adds	r3, #8
 800d916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d918:	6a3b      	ldr	r3, [r7, #32]
 800d91a:	e853 3f00 	ldrex	r3, [r3]
 800d91e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d926:	673b      	str	r3, [r7, #112]	; 0x70
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3308      	adds	r3, #8
 800d92e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d930:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d938:	e841 2300 	strex	r3, r2, [r1]
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1e5      	bne.n	800d910 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a14      	ldr	r2, [pc, #80]	; (800d998 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d948:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	e853 3f00 	ldrex	r3, [r3]
 800d956:	60bb      	str	r3, [r7, #8]
   return(result);
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	f043 0320 	orr.w	r3, r3, #32
 800d95e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	461a      	mov	r2, r3
 800d966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d968:	61bb      	str	r3, [r7, #24]
 800d96a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96c:	6979      	ldr	r1, [r7, #20]
 800d96e:	69ba      	ldr	r2, [r7, #24]
 800d970:	e841 2300 	strex	r3, r2, [r1]
 800d974:	613b      	str	r3, [r7, #16]
   return(result);
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1e6      	bne.n	800d94a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d97c:	e007      	b.n	800d98e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	699a      	ldr	r2, [r3, #24]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f042 0208 	orr.w	r2, r2, #8
 800d98c:	619a      	str	r2, [r3, #24]
}
 800d98e:	bf00      	nop
 800d990:	3798      	adds	r7, #152	; 0x98
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	0800d3e3 	.word	0x0800d3e3

0800d99c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b0a8      	sub	sp, #160	; 0xa0
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9d2:	2b22      	cmp	r3, #34	; 0x22
 800d9d4:	f040 8153 	bne.w	800dc7e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d9de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d9e2:	e0fa      	b.n	800dbda <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d9f6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d9fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d9fe:	4013      	ands	r3, r2
 800da00:	b29a      	uxth	r2, r3
 800da02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da0c:	1c9a      	adds	r2, r3, #2
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da18:	b29b      	uxth	r3, r3
 800da1a:	3b01      	subs	r3, #1
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800da2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b00      	cmp	r3, #0
 800da38:	d053      	beq.n	800dae2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da3e:	f003 0301 	and.w	r3, r3, #1
 800da42:	2b00      	cmp	r3, #0
 800da44:	d011      	beq.n	800da6a <UART_RxISR_16BIT_FIFOEN+0xce>
 800da46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00b      	beq.n	800da6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2201      	movs	r2, #1
 800da58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da60:	f043 0201 	orr.w	r2, r3, #1
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da6e:	f003 0302 	and.w	r3, r3, #2
 800da72:	2b00      	cmp	r3, #0
 800da74:	d011      	beq.n	800da9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800da76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00b      	beq.n	800da9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2202      	movs	r2, #2
 800da88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da90:	f043 0204 	orr.w	r2, r3, #4
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da9e:	f003 0304 	and.w	r3, r3, #4
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d011      	beq.n	800daca <UART_RxISR_16BIT_FIFOEN+0x12e>
 800daa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2204      	movs	r2, #4
 800dab8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac0:	f043 0202 	orr.w	r2, r3, #2
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d006      	beq.n	800dae2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7fe fdeb 	bl	800c6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dae8:	b29b      	uxth	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d175      	bne.n	800dbda <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daf6:	e853 3f00 	ldrex	r3, [r3]
 800dafa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dafc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dafe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	461a      	mov	r2, r3
 800db0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800db12:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db18:	e841 2300 	strex	r3, r2, [r1]
 800db1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1e4      	bne.n	800daee <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	3308      	adds	r3, #8
 800db2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2e:	e853 3f00 	ldrex	r3, [r3]
 800db32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db3a:	f023 0301 	bic.w	r3, r3, #1
 800db3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	3308      	adds	r3, #8
 800db48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db4c:	65ba      	str	r2, [r7, #88]	; 0x58
 800db4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db54:	e841 2300 	strex	r3, r2, [r1]
 800db58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1e1      	bne.n	800db24 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2220      	movs	r2, #32
 800db64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db72:	2b01      	cmp	r3, #1
 800db74:	d12e      	bne.n	800dbd4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db84:	e853 3f00 	ldrex	r3, [r3]
 800db88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8c:	f023 0310 	bic.w	r3, r3, #16
 800db90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db9a:	647b      	str	r3, [r7, #68]	; 0x44
 800db9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dba2:	e841 2300 	strex	r3, r2, [r1]
 800dba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1e6      	bne.n	800db7c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	f003 0310 	and.w	r3, r3, #16
 800dbb8:	2b10      	cmp	r3, #16
 800dbba:	d103      	bne.n	800dbc4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2210      	movs	r2, #16
 800dbc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7fe fd79 	bl	800c6c4 <HAL_UARTEx_RxEventCallback>
 800dbd2:	e002      	b.n	800dbda <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7f8 fb1f 	bl	8006218 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dbda:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d006      	beq.n	800dbf0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800dbe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbe6:	f003 0320 	and.w	r3, r3, #32
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f47f aefa 	bne.w	800d9e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbf6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dbfa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d045      	beq.n	800dc8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc08:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d23e      	bcs.n	800dc8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3308      	adds	r3, #8
 800dc16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	e853 3f00 	ldrex	r3, [r3]
 800dc1e:	623b      	str	r3, [r7, #32]
   return(result);
 800dc20:	6a3b      	ldr	r3, [r7, #32]
 800dc22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc26:	677b      	str	r3, [r7, #116]	; 0x74
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc30:	633a      	str	r2, [r7, #48]	; 0x30
 800dc32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc38:	e841 2300 	strex	r3, r2, [r1]
 800dc3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1e5      	bne.n	800dc10 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a14      	ldr	r2, [pc, #80]	; (800dc98 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800dc48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	e853 3f00 	ldrex	r3, [r3]
 800dc56:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f043 0320 	orr.w	r3, r3, #32
 800dc5e:	673b      	str	r3, [r7, #112]	; 0x70
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc68:	61fb      	str	r3, [r7, #28]
 800dc6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	69b9      	ldr	r1, [r7, #24]
 800dc6e:	69fa      	ldr	r2, [r7, #28]
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	617b      	str	r3, [r7, #20]
   return(result);
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e6      	bne.n	800dc4a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc7c:	e007      	b.n	800dc8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	699a      	ldr	r2, [r3, #24]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f042 0208 	orr.w	r2, r2, #8
 800dc8c:	619a      	str	r2, [r3, #24]
}
 800dc8e:	bf00      	nop
 800dc90:	37a0      	adds	r7, #160	; 0xa0
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	0800d543 	.word	0x0800d543

0800dc9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d101      	bne.n	800dcee <HAL_UARTEx_DisableFifoMode+0x16>
 800dcea:	2302      	movs	r3, #2
 800dcec:	e027      	b.n	800dd3e <HAL_UARTEx_DisableFifoMode+0x66>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2224      	movs	r2, #36	; 0x24
 800dcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f022 0201 	bic.w	r2, r2, #1
 800dd14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2220      	movs	r2, #32
 800dd30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd3c:	2300      	movs	r3, #0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3714      	adds	r7, #20
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e02d      	b.n	800ddbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2224      	movs	r2, #36	; 0x24
 800dd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f022 0201 	bic.w	r2, r2, #1
 800dd88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	430a      	orrs	r2, r1
 800dd9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f850 	bl	800de44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2220      	movs	r2, #32
 800ddb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b084      	sub	sp, #16
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d101      	bne.n	800ddde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddda:	2302      	movs	r3, #2
 800dddc:	e02d      	b.n	800de3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2224      	movs	r2, #36	; 0x24
 800ddea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f022 0201 	bic.w	r2, r2, #1
 800de04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	430a      	orrs	r2, r1
 800de18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f812 	bl	800de44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2220      	movs	r2, #32
 800de2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de50:	2b00      	cmp	r3, #0
 800de52:	d108      	bne.n	800de66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de64:	e031      	b.n	800deca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de66:	2308      	movs	r3, #8
 800de68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de6a:	2308      	movs	r3, #8
 800de6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	0e5b      	lsrs	r3, r3, #25
 800de76:	b2db      	uxtb	r3, r3
 800de78:	f003 0307 	and.w	r3, r3, #7
 800de7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	0f5b      	lsrs	r3, r3, #29
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 0307 	and.w	r3, r3, #7
 800de8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	7b3a      	ldrb	r2, [r7, #12]
 800de92:	4911      	ldr	r1, [pc, #68]	; (800ded8 <UARTEx_SetNbDataToProcess+0x94>)
 800de94:	5c8a      	ldrb	r2, [r1, r2]
 800de96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de9a:	7b3a      	ldrb	r2, [r7, #12]
 800de9c:	490f      	ldr	r1, [pc, #60]	; (800dedc <UARTEx_SetNbDataToProcess+0x98>)
 800de9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dea0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	7b7a      	ldrb	r2, [r7, #13]
 800deb0:	4909      	ldr	r1, [pc, #36]	; (800ded8 <UARTEx_SetNbDataToProcess+0x94>)
 800deb2:	5c8a      	ldrb	r2, [r1, r2]
 800deb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800deb8:	7b7a      	ldrb	r2, [r7, #13]
 800deba:	4908      	ldr	r1, [pc, #32]	; (800dedc <UARTEx_SetNbDataToProcess+0x98>)
 800debc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800debe:	fb93 f3f2 	sdiv	r3, r3, r2
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800deca:	bf00      	nop
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	08014154 	.word	0x08014154
 800dedc:	0801415c 	.word	0x0801415c

0800dee0 <atof>:
 800dee0:	2100      	movs	r1, #0
 800dee2:	f001 bd9d 	b.w	800fa20 <strtod>

0800dee6 <atoi>:
 800dee6:	220a      	movs	r2, #10
 800dee8:	2100      	movs	r1, #0
 800deea:	f001 be29 	b.w	800fb40 <strtol>
	...

0800def0 <__errno>:
 800def0:	4b01      	ldr	r3, [pc, #4]	; (800def8 <__errno+0x8>)
 800def2:	6818      	ldr	r0, [r3, #0]
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	2000002c 	.word	0x2000002c

0800defc <__libc_init_array>:
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	4d0d      	ldr	r5, [pc, #52]	; (800df34 <__libc_init_array+0x38>)
 800df00:	4c0d      	ldr	r4, [pc, #52]	; (800df38 <__libc_init_array+0x3c>)
 800df02:	1b64      	subs	r4, r4, r5
 800df04:	10a4      	asrs	r4, r4, #2
 800df06:	2600      	movs	r6, #0
 800df08:	42a6      	cmp	r6, r4
 800df0a:	d109      	bne.n	800df20 <__libc_init_array+0x24>
 800df0c:	4d0b      	ldr	r5, [pc, #44]	; (800df3c <__libc_init_array+0x40>)
 800df0e:	4c0c      	ldr	r4, [pc, #48]	; (800df40 <__libc_init_array+0x44>)
 800df10:	f005 f898 	bl	8013044 <_init>
 800df14:	1b64      	subs	r4, r4, r5
 800df16:	10a4      	asrs	r4, r4, #2
 800df18:	2600      	movs	r6, #0
 800df1a:	42a6      	cmp	r6, r4
 800df1c:	d105      	bne.n	800df2a <__libc_init_array+0x2e>
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
 800df20:	f855 3b04 	ldr.w	r3, [r5], #4
 800df24:	4798      	blx	r3
 800df26:	3601      	adds	r6, #1
 800df28:	e7ee      	b.n	800df08 <__libc_init_array+0xc>
 800df2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800df2e:	4798      	blx	r3
 800df30:	3601      	adds	r6, #1
 800df32:	e7f2      	b.n	800df1a <__libc_init_array+0x1e>
 800df34:	08014658 	.word	0x08014658
 800df38:	08014658 	.word	0x08014658
 800df3c:	08014658 	.word	0x08014658
 800df40:	0801465c 	.word	0x0801465c

0800df44 <memcpy>:
 800df44:	440a      	add	r2, r1
 800df46:	4291      	cmp	r1, r2
 800df48:	f100 33ff 	add.w	r3, r0, #4294967295
 800df4c:	d100      	bne.n	800df50 <memcpy+0xc>
 800df4e:	4770      	bx	lr
 800df50:	b510      	push	{r4, lr}
 800df52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df5a:	4291      	cmp	r1, r2
 800df5c:	d1f9      	bne.n	800df52 <memcpy+0xe>
 800df5e:	bd10      	pop	{r4, pc}

0800df60 <memset>:
 800df60:	4402      	add	r2, r0
 800df62:	4603      	mov	r3, r0
 800df64:	4293      	cmp	r3, r2
 800df66:	d100      	bne.n	800df6a <memset+0xa>
 800df68:	4770      	bx	lr
 800df6a:	f803 1b01 	strb.w	r1, [r3], #1
 800df6e:	e7f9      	b.n	800df64 <memset+0x4>

0800df70 <__cvt>:
 800df70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df74:	ec55 4b10 	vmov	r4, r5, d0
 800df78:	2d00      	cmp	r5, #0
 800df7a:	460e      	mov	r6, r1
 800df7c:	4619      	mov	r1, r3
 800df7e:	462b      	mov	r3, r5
 800df80:	bfbb      	ittet	lt
 800df82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df86:	461d      	movlt	r5, r3
 800df88:	2300      	movge	r3, #0
 800df8a:	232d      	movlt	r3, #45	; 0x2d
 800df8c:	700b      	strb	r3, [r1, #0]
 800df8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df94:	4691      	mov	r9, r2
 800df96:	f023 0820 	bic.w	r8, r3, #32
 800df9a:	bfbc      	itt	lt
 800df9c:	4622      	movlt	r2, r4
 800df9e:	4614      	movlt	r4, r2
 800dfa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dfa4:	d005      	beq.n	800dfb2 <__cvt+0x42>
 800dfa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dfaa:	d100      	bne.n	800dfae <__cvt+0x3e>
 800dfac:	3601      	adds	r6, #1
 800dfae:	2102      	movs	r1, #2
 800dfb0:	e000      	b.n	800dfb4 <__cvt+0x44>
 800dfb2:	2103      	movs	r1, #3
 800dfb4:	ab03      	add	r3, sp, #12
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	ab02      	add	r3, sp, #8
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	ec45 4b10 	vmov	d0, r4, r5
 800dfc0:	4653      	mov	r3, sl
 800dfc2:	4632      	mov	r2, r6
 800dfc4:	f001 ff14 	bl	800fdf0 <_dtoa_r>
 800dfc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dfcc:	4607      	mov	r7, r0
 800dfce:	d102      	bne.n	800dfd6 <__cvt+0x66>
 800dfd0:	f019 0f01 	tst.w	r9, #1
 800dfd4:	d022      	beq.n	800e01c <__cvt+0xac>
 800dfd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dfda:	eb07 0906 	add.w	r9, r7, r6
 800dfde:	d110      	bne.n	800e002 <__cvt+0x92>
 800dfe0:	783b      	ldrb	r3, [r7, #0]
 800dfe2:	2b30      	cmp	r3, #48	; 0x30
 800dfe4:	d10a      	bne.n	800dffc <__cvt+0x8c>
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4620      	mov	r0, r4
 800dfec:	4629      	mov	r1, r5
 800dfee:	f7f2 fd93 	bl	8000b18 <__aeabi_dcmpeq>
 800dff2:	b918      	cbnz	r0, 800dffc <__cvt+0x8c>
 800dff4:	f1c6 0601 	rsb	r6, r6, #1
 800dff8:	f8ca 6000 	str.w	r6, [sl]
 800dffc:	f8da 3000 	ldr.w	r3, [sl]
 800e000:	4499      	add	r9, r3
 800e002:	2200      	movs	r2, #0
 800e004:	2300      	movs	r3, #0
 800e006:	4620      	mov	r0, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	f7f2 fd85 	bl	8000b18 <__aeabi_dcmpeq>
 800e00e:	b108      	cbz	r0, 800e014 <__cvt+0xa4>
 800e010:	f8cd 900c 	str.w	r9, [sp, #12]
 800e014:	2230      	movs	r2, #48	; 0x30
 800e016:	9b03      	ldr	r3, [sp, #12]
 800e018:	454b      	cmp	r3, r9
 800e01a:	d307      	bcc.n	800e02c <__cvt+0xbc>
 800e01c:	9b03      	ldr	r3, [sp, #12]
 800e01e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e020:	1bdb      	subs	r3, r3, r7
 800e022:	4638      	mov	r0, r7
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	b004      	add	sp, #16
 800e028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e02c:	1c59      	adds	r1, r3, #1
 800e02e:	9103      	str	r1, [sp, #12]
 800e030:	701a      	strb	r2, [r3, #0]
 800e032:	e7f0      	b.n	800e016 <__cvt+0xa6>

0800e034 <__exponent>:
 800e034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e036:	4603      	mov	r3, r0
 800e038:	2900      	cmp	r1, #0
 800e03a:	bfb8      	it	lt
 800e03c:	4249      	neglt	r1, r1
 800e03e:	f803 2b02 	strb.w	r2, [r3], #2
 800e042:	bfb4      	ite	lt
 800e044:	222d      	movlt	r2, #45	; 0x2d
 800e046:	222b      	movge	r2, #43	; 0x2b
 800e048:	2909      	cmp	r1, #9
 800e04a:	7042      	strb	r2, [r0, #1]
 800e04c:	dd2a      	ble.n	800e0a4 <__exponent+0x70>
 800e04e:	f10d 0407 	add.w	r4, sp, #7
 800e052:	46a4      	mov	ip, r4
 800e054:	270a      	movs	r7, #10
 800e056:	46a6      	mov	lr, r4
 800e058:	460a      	mov	r2, r1
 800e05a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e05e:	fb07 1516 	mls	r5, r7, r6, r1
 800e062:	3530      	adds	r5, #48	; 0x30
 800e064:	2a63      	cmp	r2, #99	; 0x63
 800e066:	f104 34ff 	add.w	r4, r4, #4294967295
 800e06a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e06e:	4631      	mov	r1, r6
 800e070:	dcf1      	bgt.n	800e056 <__exponent+0x22>
 800e072:	3130      	adds	r1, #48	; 0x30
 800e074:	f1ae 0502 	sub.w	r5, lr, #2
 800e078:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e07c:	1c44      	adds	r4, r0, #1
 800e07e:	4629      	mov	r1, r5
 800e080:	4561      	cmp	r1, ip
 800e082:	d30a      	bcc.n	800e09a <__exponent+0x66>
 800e084:	f10d 0209 	add.w	r2, sp, #9
 800e088:	eba2 020e 	sub.w	r2, r2, lr
 800e08c:	4565      	cmp	r5, ip
 800e08e:	bf88      	it	hi
 800e090:	2200      	movhi	r2, #0
 800e092:	4413      	add	r3, r2
 800e094:	1a18      	subs	r0, r3, r0
 800e096:	b003      	add	sp, #12
 800e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e09e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e0a2:	e7ed      	b.n	800e080 <__exponent+0x4c>
 800e0a4:	2330      	movs	r3, #48	; 0x30
 800e0a6:	3130      	adds	r1, #48	; 0x30
 800e0a8:	7083      	strb	r3, [r0, #2]
 800e0aa:	70c1      	strb	r1, [r0, #3]
 800e0ac:	1d03      	adds	r3, r0, #4
 800e0ae:	e7f1      	b.n	800e094 <__exponent+0x60>

0800e0b0 <_printf_float>:
 800e0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b4:	ed2d 8b02 	vpush	{d8}
 800e0b8:	b08d      	sub	sp, #52	; 0x34
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e0c0:	4616      	mov	r6, r2
 800e0c2:	461f      	mov	r7, r3
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	f003 f9a7 	bl	8011418 <_localeconv_r>
 800e0ca:	f8d0 a000 	ldr.w	sl, [r0]
 800e0ce:	4650      	mov	r0, sl
 800e0d0:	f7f2 f8a6 	bl	8000220 <strlen>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	9305      	str	r3, [sp, #20]
 800e0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e0e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e0e4:	3307      	adds	r3, #7
 800e0e6:	f023 0307 	bic.w	r3, r3, #7
 800e0ea:	f103 0208 	add.w	r2, r3, #8
 800e0ee:	f8c8 2000 	str.w	r2, [r8]
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e0fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e0fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e102:	9307      	str	r3, [sp, #28]
 800e104:	f8cd 8018 	str.w	r8, [sp, #24]
 800e108:	ee08 0a10 	vmov	s16, r0
 800e10c:	4b9f      	ldr	r3, [pc, #636]	; (800e38c <_printf_float+0x2dc>)
 800e10e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e112:	f04f 32ff 	mov.w	r2, #4294967295
 800e116:	f7f2 fd31 	bl	8000b7c <__aeabi_dcmpun>
 800e11a:	bb88      	cbnz	r0, 800e180 <_printf_float+0xd0>
 800e11c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e120:	4b9a      	ldr	r3, [pc, #616]	; (800e38c <_printf_float+0x2dc>)
 800e122:	f04f 32ff 	mov.w	r2, #4294967295
 800e126:	f7f2 fd0b 	bl	8000b40 <__aeabi_dcmple>
 800e12a:	bb48      	cbnz	r0, 800e180 <_printf_float+0xd0>
 800e12c:	2200      	movs	r2, #0
 800e12e:	2300      	movs	r3, #0
 800e130:	4640      	mov	r0, r8
 800e132:	4649      	mov	r1, r9
 800e134:	f7f2 fcfa 	bl	8000b2c <__aeabi_dcmplt>
 800e138:	b110      	cbz	r0, 800e140 <_printf_float+0x90>
 800e13a:	232d      	movs	r3, #45	; 0x2d
 800e13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e140:	4b93      	ldr	r3, [pc, #588]	; (800e390 <_printf_float+0x2e0>)
 800e142:	4894      	ldr	r0, [pc, #592]	; (800e394 <_printf_float+0x2e4>)
 800e144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e148:	bf94      	ite	ls
 800e14a:	4698      	movls	r8, r3
 800e14c:	4680      	movhi	r8, r0
 800e14e:	2303      	movs	r3, #3
 800e150:	6123      	str	r3, [r4, #16]
 800e152:	9b05      	ldr	r3, [sp, #20]
 800e154:	f023 0204 	bic.w	r2, r3, #4
 800e158:	6022      	str	r2, [r4, #0]
 800e15a:	f04f 0900 	mov.w	r9, #0
 800e15e:	9700      	str	r7, [sp, #0]
 800e160:	4633      	mov	r3, r6
 800e162:	aa0b      	add	r2, sp, #44	; 0x2c
 800e164:	4621      	mov	r1, r4
 800e166:	4628      	mov	r0, r5
 800e168:	f000 f9d8 	bl	800e51c <_printf_common>
 800e16c:	3001      	adds	r0, #1
 800e16e:	f040 8090 	bne.w	800e292 <_printf_float+0x1e2>
 800e172:	f04f 30ff 	mov.w	r0, #4294967295
 800e176:	b00d      	add	sp, #52	; 0x34
 800e178:	ecbd 8b02 	vpop	{d8}
 800e17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e180:	4642      	mov	r2, r8
 800e182:	464b      	mov	r3, r9
 800e184:	4640      	mov	r0, r8
 800e186:	4649      	mov	r1, r9
 800e188:	f7f2 fcf8 	bl	8000b7c <__aeabi_dcmpun>
 800e18c:	b140      	cbz	r0, 800e1a0 <_printf_float+0xf0>
 800e18e:	464b      	mov	r3, r9
 800e190:	2b00      	cmp	r3, #0
 800e192:	bfbc      	itt	lt
 800e194:	232d      	movlt	r3, #45	; 0x2d
 800e196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e19a:	487f      	ldr	r0, [pc, #508]	; (800e398 <_printf_float+0x2e8>)
 800e19c:	4b7f      	ldr	r3, [pc, #508]	; (800e39c <_printf_float+0x2ec>)
 800e19e:	e7d1      	b.n	800e144 <_printf_float+0x94>
 800e1a0:	6863      	ldr	r3, [r4, #4]
 800e1a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e1a6:	9206      	str	r2, [sp, #24]
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	d13f      	bne.n	800e22c <_printf_float+0x17c>
 800e1ac:	2306      	movs	r3, #6
 800e1ae:	6063      	str	r3, [r4, #4]
 800e1b0:	9b05      	ldr	r3, [sp, #20]
 800e1b2:	6861      	ldr	r1, [r4, #4]
 800e1b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	9303      	str	r3, [sp, #12]
 800e1bc:	ab0a      	add	r3, sp, #40	; 0x28
 800e1be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e1c2:	ab09      	add	r3, sp, #36	; 0x24
 800e1c4:	ec49 8b10 	vmov	d0, r8, r9
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	6022      	str	r2, [r4, #0]
 800e1cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f7ff fecd 	bl	800df70 <__cvt>
 800e1d6:	9b06      	ldr	r3, [sp, #24]
 800e1d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1da:	2b47      	cmp	r3, #71	; 0x47
 800e1dc:	4680      	mov	r8, r0
 800e1de:	d108      	bne.n	800e1f2 <_printf_float+0x142>
 800e1e0:	1cc8      	adds	r0, r1, #3
 800e1e2:	db02      	blt.n	800e1ea <_printf_float+0x13a>
 800e1e4:	6863      	ldr	r3, [r4, #4]
 800e1e6:	4299      	cmp	r1, r3
 800e1e8:	dd41      	ble.n	800e26e <_printf_float+0x1be>
 800e1ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800e1ee:	fa5f fb8b 	uxtb.w	fp, fp
 800e1f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1f6:	d820      	bhi.n	800e23a <_printf_float+0x18a>
 800e1f8:	3901      	subs	r1, #1
 800e1fa:	465a      	mov	r2, fp
 800e1fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e200:	9109      	str	r1, [sp, #36]	; 0x24
 800e202:	f7ff ff17 	bl	800e034 <__exponent>
 800e206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e208:	1813      	adds	r3, r2, r0
 800e20a:	2a01      	cmp	r2, #1
 800e20c:	4681      	mov	r9, r0
 800e20e:	6123      	str	r3, [r4, #16]
 800e210:	dc02      	bgt.n	800e218 <_printf_float+0x168>
 800e212:	6822      	ldr	r2, [r4, #0]
 800e214:	07d2      	lsls	r2, r2, #31
 800e216:	d501      	bpl.n	800e21c <_printf_float+0x16c>
 800e218:	3301      	adds	r3, #1
 800e21a:	6123      	str	r3, [r4, #16]
 800e21c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e220:	2b00      	cmp	r3, #0
 800e222:	d09c      	beq.n	800e15e <_printf_float+0xae>
 800e224:	232d      	movs	r3, #45	; 0x2d
 800e226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e22a:	e798      	b.n	800e15e <_printf_float+0xae>
 800e22c:	9a06      	ldr	r2, [sp, #24]
 800e22e:	2a47      	cmp	r2, #71	; 0x47
 800e230:	d1be      	bne.n	800e1b0 <_printf_float+0x100>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1bc      	bne.n	800e1b0 <_printf_float+0x100>
 800e236:	2301      	movs	r3, #1
 800e238:	e7b9      	b.n	800e1ae <_printf_float+0xfe>
 800e23a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e23e:	d118      	bne.n	800e272 <_printf_float+0x1c2>
 800e240:	2900      	cmp	r1, #0
 800e242:	6863      	ldr	r3, [r4, #4]
 800e244:	dd0b      	ble.n	800e25e <_printf_float+0x1ae>
 800e246:	6121      	str	r1, [r4, #16]
 800e248:	b913      	cbnz	r3, 800e250 <_printf_float+0x1a0>
 800e24a:	6822      	ldr	r2, [r4, #0]
 800e24c:	07d0      	lsls	r0, r2, #31
 800e24e:	d502      	bpl.n	800e256 <_printf_float+0x1a6>
 800e250:	3301      	adds	r3, #1
 800e252:	440b      	add	r3, r1
 800e254:	6123      	str	r3, [r4, #16]
 800e256:	65a1      	str	r1, [r4, #88]	; 0x58
 800e258:	f04f 0900 	mov.w	r9, #0
 800e25c:	e7de      	b.n	800e21c <_printf_float+0x16c>
 800e25e:	b913      	cbnz	r3, 800e266 <_printf_float+0x1b6>
 800e260:	6822      	ldr	r2, [r4, #0]
 800e262:	07d2      	lsls	r2, r2, #31
 800e264:	d501      	bpl.n	800e26a <_printf_float+0x1ba>
 800e266:	3302      	adds	r3, #2
 800e268:	e7f4      	b.n	800e254 <_printf_float+0x1a4>
 800e26a:	2301      	movs	r3, #1
 800e26c:	e7f2      	b.n	800e254 <_printf_float+0x1a4>
 800e26e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e274:	4299      	cmp	r1, r3
 800e276:	db05      	blt.n	800e284 <_printf_float+0x1d4>
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	6121      	str	r1, [r4, #16]
 800e27c:	07d8      	lsls	r0, r3, #31
 800e27e:	d5ea      	bpl.n	800e256 <_printf_float+0x1a6>
 800e280:	1c4b      	adds	r3, r1, #1
 800e282:	e7e7      	b.n	800e254 <_printf_float+0x1a4>
 800e284:	2900      	cmp	r1, #0
 800e286:	bfd4      	ite	le
 800e288:	f1c1 0202 	rsble	r2, r1, #2
 800e28c:	2201      	movgt	r2, #1
 800e28e:	4413      	add	r3, r2
 800e290:	e7e0      	b.n	800e254 <_printf_float+0x1a4>
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	055a      	lsls	r2, r3, #21
 800e296:	d407      	bmi.n	800e2a8 <_printf_float+0x1f8>
 800e298:	6923      	ldr	r3, [r4, #16]
 800e29a:	4642      	mov	r2, r8
 800e29c:	4631      	mov	r1, r6
 800e29e:	4628      	mov	r0, r5
 800e2a0:	47b8      	blx	r7
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	d12c      	bne.n	800e300 <_printf_float+0x250>
 800e2a6:	e764      	b.n	800e172 <_printf_float+0xc2>
 800e2a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e2ac:	f240 80e0 	bls.w	800e470 <_printf_float+0x3c0>
 800e2b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	f7f2 fc2e 	bl	8000b18 <__aeabi_dcmpeq>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d034      	beq.n	800e32a <_printf_float+0x27a>
 800e2c0:	4a37      	ldr	r2, [pc, #220]	; (800e3a0 <_printf_float+0x2f0>)
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	47b8      	blx	r7
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	f43f af51 	beq.w	800e172 <_printf_float+0xc2>
 800e2d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	db02      	blt.n	800e2de <_printf_float+0x22e>
 800e2d8:	6823      	ldr	r3, [r4, #0]
 800e2da:	07d8      	lsls	r0, r3, #31
 800e2dc:	d510      	bpl.n	800e300 <_printf_float+0x250>
 800e2de:	ee18 3a10 	vmov	r3, s16
 800e2e2:	4652      	mov	r2, sl
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	47b8      	blx	r7
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	f43f af41 	beq.w	800e172 <_printf_float+0xc2>
 800e2f0:	f04f 0800 	mov.w	r8, #0
 800e2f4:	f104 091a 	add.w	r9, r4, #26
 800e2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	4543      	cmp	r3, r8
 800e2fe:	dc09      	bgt.n	800e314 <_printf_float+0x264>
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	079b      	lsls	r3, r3, #30
 800e304:	f100 8105 	bmi.w	800e512 <_printf_float+0x462>
 800e308:	68e0      	ldr	r0, [r4, #12]
 800e30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e30c:	4298      	cmp	r0, r3
 800e30e:	bfb8      	it	lt
 800e310:	4618      	movlt	r0, r3
 800e312:	e730      	b.n	800e176 <_printf_float+0xc6>
 800e314:	2301      	movs	r3, #1
 800e316:	464a      	mov	r2, r9
 800e318:	4631      	mov	r1, r6
 800e31a:	4628      	mov	r0, r5
 800e31c:	47b8      	blx	r7
 800e31e:	3001      	adds	r0, #1
 800e320:	f43f af27 	beq.w	800e172 <_printf_float+0xc2>
 800e324:	f108 0801 	add.w	r8, r8, #1
 800e328:	e7e6      	b.n	800e2f8 <_printf_float+0x248>
 800e32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dc39      	bgt.n	800e3a4 <_printf_float+0x2f4>
 800e330:	4a1b      	ldr	r2, [pc, #108]	; (800e3a0 <_printf_float+0x2f0>)
 800e332:	2301      	movs	r3, #1
 800e334:	4631      	mov	r1, r6
 800e336:	4628      	mov	r0, r5
 800e338:	47b8      	blx	r7
 800e33a:	3001      	adds	r0, #1
 800e33c:	f43f af19 	beq.w	800e172 <_printf_float+0xc2>
 800e340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e344:	4313      	orrs	r3, r2
 800e346:	d102      	bne.n	800e34e <_printf_float+0x29e>
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	07d9      	lsls	r1, r3, #31
 800e34c:	d5d8      	bpl.n	800e300 <_printf_float+0x250>
 800e34e:	ee18 3a10 	vmov	r3, s16
 800e352:	4652      	mov	r2, sl
 800e354:	4631      	mov	r1, r6
 800e356:	4628      	mov	r0, r5
 800e358:	47b8      	blx	r7
 800e35a:	3001      	adds	r0, #1
 800e35c:	f43f af09 	beq.w	800e172 <_printf_float+0xc2>
 800e360:	f04f 0900 	mov.w	r9, #0
 800e364:	f104 0a1a 	add.w	sl, r4, #26
 800e368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e36a:	425b      	negs	r3, r3
 800e36c:	454b      	cmp	r3, r9
 800e36e:	dc01      	bgt.n	800e374 <_printf_float+0x2c4>
 800e370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e372:	e792      	b.n	800e29a <_printf_float+0x1ea>
 800e374:	2301      	movs	r3, #1
 800e376:	4652      	mov	r2, sl
 800e378:	4631      	mov	r1, r6
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b8      	blx	r7
 800e37e:	3001      	adds	r0, #1
 800e380:	f43f aef7 	beq.w	800e172 <_printf_float+0xc2>
 800e384:	f109 0901 	add.w	r9, r9, #1
 800e388:	e7ee      	b.n	800e368 <_printf_float+0x2b8>
 800e38a:	bf00      	nop
 800e38c:	7fefffff 	.word	0x7fefffff
 800e390:	08014168 	.word	0x08014168
 800e394:	0801416c 	.word	0x0801416c
 800e398:	08014174 	.word	0x08014174
 800e39c:	08014170 	.word	0x08014170
 800e3a0:	08014178 	.word	0x08014178
 800e3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	bfa8      	it	ge
 800e3ac:	461a      	movge	r2, r3
 800e3ae:	2a00      	cmp	r2, #0
 800e3b0:	4691      	mov	r9, r2
 800e3b2:	dc37      	bgt.n	800e424 <_printf_float+0x374>
 800e3b4:	f04f 0b00 	mov.w	fp, #0
 800e3b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3bc:	f104 021a 	add.w	r2, r4, #26
 800e3c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e3c2:	9305      	str	r3, [sp, #20]
 800e3c4:	eba3 0309 	sub.w	r3, r3, r9
 800e3c8:	455b      	cmp	r3, fp
 800e3ca:	dc33      	bgt.n	800e434 <_printf_float+0x384>
 800e3cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	db3b      	blt.n	800e44c <_printf_float+0x39c>
 800e3d4:	6823      	ldr	r3, [r4, #0]
 800e3d6:	07da      	lsls	r2, r3, #31
 800e3d8:	d438      	bmi.n	800e44c <_printf_float+0x39c>
 800e3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3dc:	9a05      	ldr	r2, [sp, #20]
 800e3de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3e0:	1a9a      	subs	r2, r3, r2
 800e3e2:	eba3 0901 	sub.w	r9, r3, r1
 800e3e6:	4591      	cmp	r9, r2
 800e3e8:	bfa8      	it	ge
 800e3ea:	4691      	movge	r9, r2
 800e3ec:	f1b9 0f00 	cmp.w	r9, #0
 800e3f0:	dc35      	bgt.n	800e45e <_printf_float+0x3ae>
 800e3f2:	f04f 0800 	mov.w	r8, #0
 800e3f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3fa:	f104 0a1a 	add.w	sl, r4, #26
 800e3fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e402:	1a9b      	subs	r3, r3, r2
 800e404:	eba3 0309 	sub.w	r3, r3, r9
 800e408:	4543      	cmp	r3, r8
 800e40a:	f77f af79 	ble.w	800e300 <_printf_float+0x250>
 800e40e:	2301      	movs	r3, #1
 800e410:	4652      	mov	r2, sl
 800e412:	4631      	mov	r1, r6
 800e414:	4628      	mov	r0, r5
 800e416:	47b8      	blx	r7
 800e418:	3001      	adds	r0, #1
 800e41a:	f43f aeaa 	beq.w	800e172 <_printf_float+0xc2>
 800e41e:	f108 0801 	add.w	r8, r8, #1
 800e422:	e7ec      	b.n	800e3fe <_printf_float+0x34e>
 800e424:	4613      	mov	r3, r2
 800e426:	4631      	mov	r1, r6
 800e428:	4642      	mov	r2, r8
 800e42a:	4628      	mov	r0, r5
 800e42c:	47b8      	blx	r7
 800e42e:	3001      	adds	r0, #1
 800e430:	d1c0      	bne.n	800e3b4 <_printf_float+0x304>
 800e432:	e69e      	b.n	800e172 <_printf_float+0xc2>
 800e434:	2301      	movs	r3, #1
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	9205      	str	r2, [sp, #20]
 800e43c:	47b8      	blx	r7
 800e43e:	3001      	adds	r0, #1
 800e440:	f43f ae97 	beq.w	800e172 <_printf_float+0xc2>
 800e444:	9a05      	ldr	r2, [sp, #20]
 800e446:	f10b 0b01 	add.w	fp, fp, #1
 800e44a:	e7b9      	b.n	800e3c0 <_printf_float+0x310>
 800e44c:	ee18 3a10 	vmov	r3, s16
 800e450:	4652      	mov	r2, sl
 800e452:	4631      	mov	r1, r6
 800e454:	4628      	mov	r0, r5
 800e456:	47b8      	blx	r7
 800e458:	3001      	adds	r0, #1
 800e45a:	d1be      	bne.n	800e3da <_printf_float+0x32a>
 800e45c:	e689      	b.n	800e172 <_printf_float+0xc2>
 800e45e:	9a05      	ldr	r2, [sp, #20]
 800e460:	464b      	mov	r3, r9
 800e462:	4442      	add	r2, r8
 800e464:	4631      	mov	r1, r6
 800e466:	4628      	mov	r0, r5
 800e468:	47b8      	blx	r7
 800e46a:	3001      	adds	r0, #1
 800e46c:	d1c1      	bne.n	800e3f2 <_printf_float+0x342>
 800e46e:	e680      	b.n	800e172 <_printf_float+0xc2>
 800e470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e472:	2a01      	cmp	r2, #1
 800e474:	dc01      	bgt.n	800e47a <_printf_float+0x3ca>
 800e476:	07db      	lsls	r3, r3, #31
 800e478:	d538      	bpl.n	800e4ec <_printf_float+0x43c>
 800e47a:	2301      	movs	r3, #1
 800e47c:	4642      	mov	r2, r8
 800e47e:	4631      	mov	r1, r6
 800e480:	4628      	mov	r0, r5
 800e482:	47b8      	blx	r7
 800e484:	3001      	adds	r0, #1
 800e486:	f43f ae74 	beq.w	800e172 <_printf_float+0xc2>
 800e48a:	ee18 3a10 	vmov	r3, s16
 800e48e:	4652      	mov	r2, sl
 800e490:	4631      	mov	r1, r6
 800e492:	4628      	mov	r0, r5
 800e494:	47b8      	blx	r7
 800e496:	3001      	adds	r0, #1
 800e498:	f43f ae6b 	beq.w	800e172 <_printf_float+0xc2>
 800e49c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f7f2 fb38 	bl	8000b18 <__aeabi_dcmpeq>
 800e4a8:	b9d8      	cbnz	r0, 800e4e2 <_printf_float+0x432>
 800e4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4ac:	f108 0201 	add.w	r2, r8, #1
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	47b8      	blx	r7
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	d10e      	bne.n	800e4da <_printf_float+0x42a>
 800e4bc:	e659      	b.n	800e172 <_printf_float+0xc2>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4652      	mov	r2, sl
 800e4c2:	4631      	mov	r1, r6
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	47b8      	blx	r7
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	f43f ae52 	beq.w	800e172 <_printf_float+0xc2>
 800e4ce:	f108 0801 	add.w	r8, r8, #1
 800e4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	4543      	cmp	r3, r8
 800e4d8:	dcf1      	bgt.n	800e4be <_printf_float+0x40e>
 800e4da:	464b      	mov	r3, r9
 800e4dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e4e0:	e6dc      	b.n	800e29c <_printf_float+0x1ec>
 800e4e2:	f04f 0800 	mov.w	r8, #0
 800e4e6:	f104 0a1a 	add.w	sl, r4, #26
 800e4ea:	e7f2      	b.n	800e4d2 <_printf_float+0x422>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	4642      	mov	r2, r8
 800e4f0:	e7df      	b.n	800e4b2 <_printf_float+0x402>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	464a      	mov	r2, r9
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	47b8      	blx	r7
 800e4fc:	3001      	adds	r0, #1
 800e4fe:	f43f ae38 	beq.w	800e172 <_printf_float+0xc2>
 800e502:	f108 0801 	add.w	r8, r8, #1
 800e506:	68e3      	ldr	r3, [r4, #12]
 800e508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e50a:	1a5b      	subs	r3, r3, r1
 800e50c:	4543      	cmp	r3, r8
 800e50e:	dcf0      	bgt.n	800e4f2 <_printf_float+0x442>
 800e510:	e6fa      	b.n	800e308 <_printf_float+0x258>
 800e512:	f04f 0800 	mov.w	r8, #0
 800e516:	f104 0919 	add.w	r9, r4, #25
 800e51a:	e7f4      	b.n	800e506 <_printf_float+0x456>

0800e51c <_printf_common>:
 800e51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e520:	4616      	mov	r6, r2
 800e522:	4699      	mov	r9, r3
 800e524:	688a      	ldr	r2, [r1, #8]
 800e526:	690b      	ldr	r3, [r1, #16]
 800e528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e52c:	4293      	cmp	r3, r2
 800e52e:	bfb8      	it	lt
 800e530:	4613      	movlt	r3, r2
 800e532:	6033      	str	r3, [r6, #0]
 800e534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e538:	4607      	mov	r7, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	b10a      	cbz	r2, 800e542 <_printf_common+0x26>
 800e53e:	3301      	adds	r3, #1
 800e540:	6033      	str	r3, [r6, #0]
 800e542:	6823      	ldr	r3, [r4, #0]
 800e544:	0699      	lsls	r1, r3, #26
 800e546:	bf42      	ittt	mi
 800e548:	6833      	ldrmi	r3, [r6, #0]
 800e54a:	3302      	addmi	r3, #2
 800e54c:	6033      	strmi	r3, [r6, #0]
 800e54e:	6825      	ldr	r5, [r4, #0]
 800e550:	f015 0506 	ands.w	r5, r5, #6
 800e554:	d106      	bne.n	800e564 <_printf_common+0x48>
 800e556:	f104 0a19 	add.w	sl, r4, #25
 800e55a:	68e3      	ldr	r3, [r4, #12]
 800e55c:	6832      	ldr	r2, [r6, #0]
 800e55e:	1a9b      	subs	r3, r3, r2
 800e560:	42ab      	cmp	r3, r5
 800e562:	dc26      	bgt.n	800e5b2 <_printf_common+0x96>
 800e564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e568:	1e13      	subs	r3, r2, #0
 800e56a:	6822      	ldr	r2, [r4, #0]
 800e56c:	bf18      	it	ne
 800e56e:	2301      	movne	r3, #1
 800e570:	0692      	lsls	r2, r2, #26
 800e572:	d42b      	bmi.n	800e5cc <_printf_common+0xb0>
 800e574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e578:	4649      	mov	r1, r9
 800e57a:	4638      	mov	r0, r7
 800e57c:	47c0      	blx	r8
 800e57e:	3001      	adds	r0, #1
 800e580:	d01e      	beq.n	800e5c0 <_printf_common+0xa4>
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	68e5      	ldr	r5, [r4, #12]
 800e586:	6832      	ldr	r2, [r6, #0]
 800e588:	f003 0306 	and.w	r3, r3, #6
 800e58c:	2b04      	cmp	r3, #4
 800e58e:	bf08      	it	eq
 800e590:	1aad      	subeq	r5, r5, r2
 800e592:	68a3      	ldr	r3, [r4, #8]
 800e594:	6922      	ldr	r2, [r4, #16]
 800e596:	bf0c      	ite	eq
 800e598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e59c:	2500      	movne	r5, #0
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	bfc4      	itt	gt
 800e5a2:	1a9b      	subgt	r3, r3, r2
 800e5a4:	18ed      	addgt	r5, r5, r3
 800e5a6:	2600      	movs	r6, #0
 800e5a8:	341a      	adds	r4, #26
 800e5aa:	42b5      	cmp	r5, r6
 800e5ac:	d11a      	bne.n	800e5e4 <_printf_common+0xc8>
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	e008      	b.n	800e5c4 <_printf_common+0xa8>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4652      	mov	r2, sl
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	47c0      	blx	r8
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d103      	bne.n	800e5c8 <_printf_common+0xac>
 800e5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c8:	3501      	adds	r5, #1
 800e5ca:	e7c6      	b.n	800e55a <_printf_common+0x3e>
 800e5cc:	18e1      	adds	r1, r4, r3
 800e5ce:	1c5a      	adds	r2, r3, #1
 800e5d0:	2030      	movs	r0, #48	; 0x30
 800e5d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5d6:	4422      	add	r2, r4
 800e5d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5e0:	3302      	adds	r3, #2
 800e5e2:	e7c7      	b.n	800e574 <_printf_common+0x58>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	4622      	mov	r2, r4
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	4638      	mov	r0, r7
 800e5ec:	47c0      	blx	r8
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	d0e6      	beq.n	800e5c0 <_printf_common+0xa4>
 800e5f2:	3601      	adds	r6, #1
 800e5f4:	e7d9      	b.n	800e5aa <_printf_common+0x8e>
	...

0800e5f8 <_printf_i>:
 800e5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5fc:	7e0f      	ldrb	r7, [r1, #24]
 800e5fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e600:	2f78      	cmp	r7, #120	; 0x78
 800e602:	4691      	mov	r9, r2
 800e604:	4680      	mov	r8, r0
 800e606:	460c      	mov	r4, r1
 800e608:	469a      	mov	sl, r3
 800e60a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e60e:	d807      	bhi.n	800e620 <_printf_i+0x28>
 800e610:	2f62      	cmp	r7, #98	; 0x62
 800e612:	d80a      	bhi.n	800e62a <_printf_i+0x32>
 800e614:	2f00      	cmp	r7, #0
 800e616:	f000 80d8 	beq.w	800e7ca <_printf_i+0x1d2>
 800e61a:	2f58      	cmp	r7, #88	; 0x58
 800e61c:	f000 80a3 	beq.w	800e766 <_printf_i+0x16e>
 800e620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e628:	e03a      	b.n	800e6a0 <_printf_i+0xa8>
 800e62a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e62e:	2b15      	cmp	r3, #21
 800e630:	d8f6      	bhi.n	800e620 <_printf_i+0x28>
 800e632:	a101      	add	r1, pc, #4	; (adr r1, 800e638 <_printf_i+0x40>)
 800e634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e638:	0800e691 	.word	0x0800e691
 800e63c:	0800e6a5 	.word	0x0800e6a5
 800e640:	0800e621 	.word	0x0800e621
 800e644:	0800e621 	.word	0x0800e621
 800e648:	0800e621 	.word	0x0800e621
 800e64c:	0800e621 	.word	0x0800e621
 800e650:	0800e6a5 	.word	0x0800e6a5
 800e654:	0800e621 	.word	0x0800e621
 800e658:	0800e621 	.word	0x0800e621
 800e65c:	0800e621 	.word	0x0800e621
 800e660:	0800e621 	.word	0x0800e621
 800e664:	0800e7b1 	.word	0x0800e7b1
 800e668:	0800e6d5 	.word	0x0800e6d5
 800e66c:	0800e793 	.word	0x0800e793
 800e670:	0800e621 	.word	0x0800e621
 800e674:	0800e621 	.word	0x0800e621
 800e678:	0800e7d3 	.word	0x0800e7d3
 800e67c:	0800e621 	.word	0x0800e621
 800e680:	0800e6d5 	.word	0x0800e6d5
 800e684:	0800e621 	.word	0x0800e621
 800e688:	0800e621 	.word	0x0800e621
 800e68c:	0800e79b 	.word	0x0800e79b
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	1d1a      	adds	r2, r3, #4
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	602a      	str	r2, [r5, #0]
 800e698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e69c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e0a3      	b.n	800e7ec <_printf_i+0x1f4>
 800e6a4:	6820      	ldr	r0, [r4, #0]
 800e6a6:	6829      	ldr	r1, [r5, #0]
 800e6a8:	0606      	lsls	r6, r0, #24
 800e6aa:	f101 0304 	add.w	r3, r1, #4
 800e6ae:	d50a      	bpl.n	800e6c6 <_printf_i+0xce>
 800e6b0:	680e      	ldr	r6, [r1, #0]
 800e6b2:	602b      	str	r3, [r5, #0]
 800e6b4:	2e00      	cmp	r6, #0
 800e6b6:	da03      	bge.n	800e6c0 <_printf_i+0xc8>
 800e6b8:	232d      	movs	r3, #45	; 0x2d
 800e6ba:	4276      	negs	r6, r6
 800e6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6c0:	485e      	ldr	r0, [pc, #376]	; (800e83c <_printf_i+0x244>)
 800e6c2:	230a      	movs	r3, #10
 800e6c4:	e019      	b.n	800e6fa <_printf_i+0x102>
 800e6c6:	680e      	ldr	r6, [r1, #0]
 800e6c8:	602b      	str	r3, [r5, #0]
 800e6ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6ce:	bf18      	it	ne
 800e6d0:	b236      	sxthne	r6, r6
 800e6d2:	e7ef      	b.n	800e6b4 <_printf_i+0xbc>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	6820      	ldr	r0, [r4, #0]
 800e6d8:	1d19      	adds	r1, r3, #4
 800e6da:	6029      	str	r1, [r5, #0]
 800e6dc:	0601      	lsls	r1, r0, #24
 800e6de:	d501      	bpl.n	800e6e4 <_printf_i+0xec>
 800e6e0:	681e      	ldr	r6, [r3, #0]
 800e6e2:	e002      	b.n	800e6ea <_printf_i+0xf2>
 800e6e4:	0646      	lsls	r6, r0, #25
 800e6e6:	d5fb      	bpl.n	800e6e0 <_printf_i+0xe8>
 800e6e8:	881e      	ldrh	r6, [r3, #0]
 800e6ea:	4854      	ldr	r0, [pc, #336]	; (800e83c <_printf_i+0x244>)
 800e6ec:	2f6f      	cmp	r7, #111	; 0x6f
 800e6ee:	bf0c      	ite	eq
 800e6f0:	2308      	moveq	r3, #8
 800e6f2:	230a      	movne	r3, #10
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6fa:	6865      	ldr	r5, [r4, #4]
 800e6fc:	60a5      	str	r5, [r4, #8]
 800e6fe:	2d00      	cmp	r5, #0
 800e700:	bfa2      	ittt	ge
 800e702:	6821      	ldrge	r1, [r4, #0]
 800e704:	f021 0104 	bicge.w	r1, r1, #4
 800e708:	6021      	strge	r1, [r4, #0]
 800e70a:	b90e      	cbnz	r6, 800e710 <_printf_i+0x118>
 800e70c:	2d00      	cmp	r5, #0
 800e70e:	d04d      	beq.n	800e7ac <_printf_i+0x1b4>
 800e710:	4615      	mov	r5, r2
 800e712:	fbb6 f1f3 	udiv	r1, r6, r3
 800e716:	fb03 6711 	mls	r7, r3, r1, r6
 800e71a:	5dc7      	ldrb	r7, [r0, r7]
 800e71c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e720:	4637      	mov	r7, r6
 800e722:	42bb      	cmp	r3, r7
 800e724:	460e      	mov	r6, r1
 800e726:	d9f4      	bls.n	800e712 <_printf_i+0x11a>
 800e728:	2b08      	cmp	r3, #8
 800e72a:	d10b      	bne.n	800e744 <_printf_i+0x14c>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	07de      	lsls	r6, r3, #31
 800e730:	d508      	bpl.n	800e744 <_printf_i+0x14c>
 800e732:	6923      	ldr	r3, [r4, #16]
 800e734:	6861      	ldr	r1, [r4, #4]
 800e736:	4299      	cmp	r1, r3
 800e738:	bfde      	ittt	le
 800e73a:	2330      	movle	r3, #48	; 0x30
 800e73c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e740:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e744:	1b52      	subs	r2, r2, r5
 800e746:	6122      	str	r2, [r4, #16]
 800e748:	f8cd a000 	str.w	sl, [sp]
 800e74c:	464b      	mov	r3, r9
 800e74e:	aa03      	add	r2, sp, #12
 800e750:	4621      	mov	r1, r4
 800e752:	4640      	mov	r0, r8
 800e754:	f7ff fee2 	bl	800e51c <_printf_common>
 800e758:	3001      	adds	r0, #1
 800e75a:	d14c      	bne.n	800e7f6 <_printf_i+0x1fe>
 800e75c:	f04f 30ff 	mov.w	r0, #4294967295
 800e760:	b004      	add	sp, #16
 800e762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e766:	4835      	ldr	r0, [pc, #212]	; (800e83c <_printf_i+0x244>)
 800e768:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e76c:	6829      	ldr	r1, [r5, #0]
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	f851 6b04 	ldr.w	r6, [r1], #4
 800e774:	6029      	str	r1, [r5, #0]
 800e776:	061d      	lsls	r5, r3, #24
 800e778:	d514      	bpl.n	800e7a4 <_printf_i+0x1ac>
 800e77a:	07df      	lsls	r7, r3, #31
 800e77c:	bf44      	itt	mi
 800e77e:	f043 0320 	orrmi.w	r3, r3, #32
 800e782:	6023      	strmi	r3, [r4, #0]
 800e784:	b91e      	cbnz	r6, 800e78e <_printf_i+0x196>
 800e786:	6823      	ldr	r3, [r4, #0]
 800e788:	f023 0320 	bic.w	r3, r3, #32
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	2310      	movs	r3, #16
 800e790:	e7b0      	b.n	800e6f4 <_printf_i+0xfc>
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	f043 0320 	orr.w	r3, r3, #32
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	2378      	movs	r3, #120	; 0x78
 800e79c:	4828      	ldr	r0, [pc, #160]	; (800e840 <_printf_i+0x248>)
 800e79e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7a2:	e7e3      	b.n	800e76c <_printf_i+0x174>
 800e7a4:	0659      	lsls	r1, r3, #25
 800e7a6:	bf48      	it	mi
 800e7a8:	b2b6      	uxthmi	r6, r6
 800e7aa:	e7e6      	b.n	800e77a <_printf_i+0x182>
 800e7ac:	4615      	mov	r5, r2
 800e7ae:	e7bb      	b.n	800e728 <_printf_i+0x130>
 800e7b0:	682b      	ldr	r3, [r5, #0]
 800e7b2:	6826      	ldr	r6, [r4, #0]
 800e7b4:	6961      	ldr	r1, [r4, #20]
 800e7b6:	1d18      	adds	r0, r3, #4
 800e7b8:	6028      	str	r0, [r5, #0]
 800e7ba:	0635      	lsls	r5, r6, #24
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	d501      	bpl.n	800e7c4 <_printf_i+0x1cc>
 800e7c0:	6019      	str	r1, [r3, #0]
 800e7c2:	e002      	b.n	800e7ca <_printf_i+0x1d2>
 800e7c4:	0670      	lsls	r0, r6, #25
 800e7c6:	d5fb      	bpl.n	800e7c0 <_printf_i+0x1c8>
 800e7c8:	8019      	strh	r1, [r3, #0]
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	6123      	str	r3, [r4, #16]
 800e7ce:	4615      	mov	r5, r2
 800e7d0:	e7ba      	b.n	800e748 <_printf_i+0x150>
 800e7d2:	682b      	ldr	r3, [r5, #0]
 800e7d4:	1d1a      	adds	r2, r3, #4
 800e7d6:	602a      	str	r2, [r5, #0]
 800e7d8:	681d      	ldr	r5, [r3, #0]
 800e7da:	6862      	ldr	r2, [r4, #4]
 800e7dc:	2100      	movs	r1, #0
 800e7de:	4628      	mov	r0, r5
 800e7e0:	f7f1 fd26 	bl	8000230 <memchr>
 800e7e4:	b108      	cbz	r0, 800e7ea <_printf_i+0x1f2>
 800e7e6:	1b40      	subs	r0, r0, r5
 800e7e8:	6060      	str	r0, [r4, #4]
 800e7ea:	6863      	ldr	r3, [r4, #4]
 800e7ec:	6123      	str	r3, [r4, #16]
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7f4:	e7a8      	b.n	800e748 <_printf_i+0x150>
 800e7f6:	6923      	ldr	r3, [r4, #16]
 800e7f8:	462a      	mov	r2, r5
 800e7fa:	4649      	mov	r1, r9
 800e7fc:	4640      	mov	r0, r8
 800e7fe:	47d0      	blx	sl
 800e800:	3001      	adds	r0, #1
 800e802:	d0ab      	beq.n	800e75c <_printf_i+0x164>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	079b      	lsls	r3, r3, #30
 800e808:	d413      	bmi.n	800e832 <_printf_i+0x23a>
 800e80a:	68e0      	ldr	r0, [r4, #12]
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	4298      	cmp	r0, r3
 800e810:	bfb8      	it	lt
 800e812:	4618      	movlt	r0, r3
 800e814:	e7a4      	b.n	800e760 <_printf_i+0x168>
 800e816:	2301      	movs	r3, #1
 800e818:	4632      	mov	r2, r6
 800e81a:	4649      	mov	r1, r9
 800e81c:	4640      	mov	r0, r8
 800e81e:	47d0      	blx	sl
 800e820:	3001      	adds	r0, #1
 800e822:	d09b      	beq.n	800e75c <_printf_i+0x164>
 800e824:	3501      	adds	r5, #1
 800e826:	68e3      	ldr	r3, [r4, #12]
 800e828:	9903      	ldr	r1, [sp, #12]
 800e82a:	1a5b      	subs	r3, r3, r1
 800e82c:	42ab      	cmp	r3, r5
 800e82e:	dcf2      	bgt.n	800e816 <_printf_i+0x21e>
 800e830:	e7eb      	b.n	800e80a <_printf_i+0x212>
 800e832:	2500      	movs	r5, #0
 800e834:	f104 0619 	add.w	r6, r4, #25
 800e838:	e7f5      	b.n	800e826 <_printf_i+0x22e>
 800e83a:	bf00      	nop
 800e83c:	0801417a 	.word	0x0801417a
 800e840:	0801418b 	.word	0x0801418b

0800e844 <_scanf_float>:
 800e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	b087      	sub	sp, #28
 800e84a:	4617      	mov	r7, r2
 800e84c:	9303      	str	r3, [sp, #12]
 800e84e:	688b      	ldr	r3, [r1, #8]
 800e850:	1e5a      	subs	r2, r3, #1
 800e852:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e856:	bf83      	ittte	hi
 800e858:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e85c:	195b      	addhi	r3, r3, r5
 800e85e:	9302      	strhi	r3, [sp, #8]
 800e860:	2300      	movls	r3, #0
 800e862:	bf86      	itte	hi
 800e864:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e868:	608b      	strhi	r3, [r1, #8]
 800e86a:	9302      	strls	r3, [sp, #8]
 800e86c:	680b      	ldr	r3, [r1, #0]
 800e86e:	468b      	mov	fp, r1
 800e870:	2500      	movs	r5, #0
 800e872:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e876:	f84b 3b1c 	str.w	r3, [fp], #28
 800e87a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e87e:	4680      	mov	r8, r0
 800e880:	460c      	mov	r4, r1
 800e882:	465e      	mov	r6, fp
 800e884:	46aa      	mov	sl, r5
 800e886:	46a9      	mov	r9, r5
 800e888:	9501      	str	r5, [sp, #4]
 800e88a:	68a2      	ldr	r2, [r4, #8]
 800e88c:	b152      	cbz	r2, 800e8a4 <_scanf_float+0x60>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	2b4e      	cmp	r3, #78	; 0x4e
 800e894:	d864      	bhi.n	800e960 <_scanf_float+0x11c>
 800e896:	2b40      	cmp	r3, #64	; 0x40
 800e898:	d83c      	bhi.n	800e914 <_scanf_float+0xd0>
 800e89a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e89e:	b2c8      	uxtb	r0, r1
 800e8a0:	280e      	cmp	r0, #14
 800e8a2:	d93a      	bls.n	800e91a <_scanf_float+0xd6>
 800e8a4:	f1b9 0f00 	cmp.w	r9, #0
 800e8a8:	d003      	beq.n	800e8b2 <_scanf_float+0x6e>
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8b6:	f1ba 0f01 	cmp.w	sl, #1
 800e8ba:	f200 8113 	bhi.w	800eae4 <_scanf_float+0x2a0>
 800e8be:	455e      	cmp	r6, fp
 800e8c0:	f200 8105 	bhi.w	800eace <_scanf_float+0x28a>
 800e8c4:	2501      	movs	r5, #1
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	b007      	add	sp, #28
 800e8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e8d2:	2a0d      	cmp	r2, #13
 800e8d4:	d8e6      	bhi.n	800e8a4 <_scanf_float+0x60>
 800e8d6:	a101      	add	r1, pc, #4	; (adr r1, 800e8dc <_scanf_float+0x98>)
 800e8d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e8dc:	0800ea1b 	.word	0x0800ea1b
 800e8e0:	0800e8a5 	.word	0x0800e8a5
 800e8e4:	0800e8a5 	.word	0x0800e8a5
 800e8e8:	0800e8a5 	.word	0x0800e8a5
 800e8ec:	0800ea7b 	.word	0x0800ea7b
 800e8f0:	0800ea53 	.word	0x0800ea53
 800e8f4:	0800e8a5 	.word	0x0800e8a5
 800e8f8:	0800e8a5 	.word	0x0800e8a5
 800e8fc:	0800ea29 	.word	0x0800ea29
 800e900:	0800e8a5 	.word	0x0800e8a5
 800e904:	0800e8a5 	.word	0x0800e8a5
 800e908:	0800e8a5 	.word	0x0800e8a5
 800e90c:	0800e8a5 	.word	0x0800e8a5
 800e910:	0800e9e1 	.word	0x0800e9e1
 800e914:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e918:	e7db      	b.n	800e8d2 <_scanf_float+0x8e>
 800e91a:	290e      	cmp	r1, #14
 800e91c:	d8c2      	bhi.n	800e8a4 <_scanf_float+0x60>
 800e91e:	a001      	add	r0, pc, #4	; (adr r0, 800e924 <_scanf_float+0xe0>)
 800e920:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e924:	0800e9d3 	.word	0x0800e9d3
 800e928:	0800e8a5 	.word	0x0800e8a5
 800e92c:	0800e9d3 	.word	0x0800e9d3
 800e930:	0800ea67 	.word	0x0800ea67
 800e934:	0800e8a5 	.word	0x0800e8a5
 800e938:	0800e981 	.word	0x0800e981
 800e93c:	0800e9bd 	.word	0x0800e9bd
 800e940:	0800e9bd 	.word	0x0800e9bd
 800e944:	0800e9bd 	.word	0x0800e9bd
 800e948:	0800e9bd 	.word	0x0800e9bd
 800e94c:	0800e9bd 	.word	0x0800e9bd
 800e950:	0800e9bd 	.word	0x0800e9bd
 800e954:	0800e9bd 	.word	0x0800e9bd
 800e958:	0800e9bd 	.word	0x0800e9bd
 800e95c:	0800e9bd 	.word	0x0800e9bd
 800e960:	2b6e      	cmp	r3, #110	; 0x6e
 800e962:	d809      	bhi.n	800e978 <_scanf_float+0x134>
 800e964:	2b60      	cmp	r3, #96	; 0x60
 800e966:	d8b2      	bhi.n	800e8ce <_scanf_float+0x8a>
 800e968:	2b54      	cmp	r3, #84	; 0x54
 800e96a:	d077      	beq.n	800ea5c <_scanf_float+0x218>
 800e96c:	2b59      	cmp	r3, #89	; 0x59
 800e96e:	d199      	bne.n	800e8a4 <_scanf_float+0x60>
 800e970:	2d07      	cmp	r5, #7
 800e972:	d197      	bne.n	800e8a4 <_scanf_float+0x60>
 800e974:	2508      	movs	r5, #8
 800e976:	e029      	b.n	800e9cc <_scanf_float+0x188>
 800e978:	2b74      	cmp	r3, #116	; 0x74
 800e97a:	d06f      	beq.n	800ea5c <_scanf_float+0x218>
 800e97c:	2b79      	cmp	r3, #121	; 0x79
 800e97e:	e7f6      	b.n	800e96e <_scanf_float+0x12a>
 800e980:	6821      	ldr	r1, [r4, #0]
 800e982:	05c8      	lsls	r0, r1, #23
 800e984:	d51a      	bpl.n	800e9bc <_scanf_float+0x178>
 800e986:	9b02      	ldr	r3, [sp, #8]
 800e988:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e98c:	6021      	str	r1, [r4, #0]
 800e98e:	f109 0901 	add.w	r9, r9, #1
 800e992:	b11b      	cbz	r3, 800e99c <_scanf_float+0x158>
 800e994:	3b01      	subs	r3, #1
 800e996:	3201      	adds	r2, #1
 800e998:	9302      	str	r3, [sp, #8]
 800e99a:	60a2      	str	r2, [r4, #8]
 800e99c:	68a3      	ldr	r3, [r4, #8]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	60a3      	str	r3, [r4, #8]
 800e9a2:	6923      	ldr	r3, [r4, #16]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	6123      	str	r3, [r4, #16]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	607b      	str	r3, [r7, #4]
 800e9b0:	f340 8084 	ble.w	800eabc <_scanf_float+0x278>
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	603b      	str	r3, [r7, #0]
 800e9ba:	e766      	b.n	800e88a <_scanf_float+0x46>
 800e9bc:	eb1a 0f05 	cmn.w	sl, r5
 800e9c0:	f47f af70 	bne.w	800e8a4 <_scanf_float+0x60>
 800e9c4:	6822      	ldr	r2, [r4, #0]
 800e9c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e9ca:	6022      	str	r2, [r4, #0]
 800e9cc:	f806 3b01 	strb.w	r3, [r6], #1
 800e9d0:	e7e4      	b.n	800e99c <_scanf_float+0x158>
 800e9d2:	6822      	ldr	r2, [r4, #0]
 800e9d4:	0610      	lsls	r0, r2, #24
 800e9d6:	f57f af65 	bpl.w	800e8a4 <_scanf_float+0x60>
 800e9da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9de:	e7f4      	b.n	800e9ca <_scanf_float+0x186>
 800e9e0:	f1ba 0f00 	cmp.w	sl, #0
 800e9e4:	d10e      	bne.n	800ea04 <_scanf_float+0x1c0>
 800e9e6:	f1b9 0f00 	cmp.w	r9, #0
 800e9ea:	d10e      	bne.n	800ea0a <_scanf_float+0x1c6>
 800e9ec:	6822      	ldr	r2, [r4, #0]
 800e9ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e9f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e9f6:	d108      	bne.n	800ea0a <_scanf_float+0x1c6>
 800e9f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e9fc:	6022      	str	r2, [r4, #0]
 800e9fe:	f04f 0a01 	mov.w	sl, #1
 800ea02:	e7e3      	b.n	800e9cc <_scanf_float+0x188>
 800ea04:	f1ba 0f02 	cmp.w	sl, #2
 800ea08:	d055      	beq.n	800eab6 <_scanf_float+0x272>
 800ea0a:	2d01      	cmp	r5, #1
 800ea0c:	d002      	beq.n	800ea14 <_scanf_float+0x1d0>
 800ea0e:	2d04      	cmp	r5, #4
 800ea10:	f47f af48 	bne.w	800e8a4 <_scanf_float+0x60>
 800ea14:	3501      	adds	r5, #1
 800ea16:	b2ed      	uxtb	r5, r5
 800ea18:	e7d8      	b.n	800e9cc <_scanf_float+0x188>
 800ea1a:	f1ba 0f01 	cmp.w	sl, #1
 800ea1e:	f47f af41 	bne.w	800e8a4 <_scanf_float+0x60>
 800ea22:	f04f 0a02 	mov.w	sl, #2
 800ea26:	e7d1      	b.n	800e9cc <_scanf_float+0x188>
 800ea28:	b97d      	cbnz	r5, 800ea4a <_scanf_float+0x206>
 800ea2a:	f1b9 0f00 	cmp.w	r9, #0
 800ea2e:	f47f af3c 	bne.w	800e8aa <_scanf_float+0x66>
 800ea32:	6822      	ldr	r2, [r4, #0]
 800ea34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ea38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ea3c:	f47f af39 	bne.w	800e8b2 <_scanf_float+0x6e>
 800ea40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ea44:	6022      	str	r2, [r4, #0]
 800ea46:	2501      	movs	r5, #1
 800ea48:	e7c0      	b.n	800e9cc <_scanf_float+0x188>
 800ea4a:	2d03      	cmp	r5, #3
 800ea4c:	d0e2      	beq.n	800ea14 <_scanf_float+0x1d0>
 800ea4e:	2d05      	cmp	r5, #5
 800ea50:	e7de      	b.n	800ea10 <_scanf_float+0x1cc>
 800ea52:	2d02      	cmp	r5, #2
 800ea54:	f47f af26 	bne.w	800e8a4 <_scanf_float+0x60>
 800ea58:	2503      	movs	r5, #3
 800ea5a:	e7b7      	b.n	800e9cc <_scanf_float+0x188>
 800ea5c:	2d06      	cmp	r5, #6
 800ea5e:	f47f af21 	bne.w	800e8a4 <_scanf_float+0x60>
 800ea62:	2507      	movs	r5, #7
 800ea64:	e7b2      	b.n	800e9cc <_scanf_float+0x188>
 800ea66:	6822      	ldr	r2, [r4, #0]
 800ea68:	0591      	lsls	r1, r2, #22
 800ea6a:	f57f af1b 	bpl.w	800e8a4 <_scanf_float+0x60>
 800ea6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ea72:	6022      	str	r2, [r4, #0]
 800ea74:	f8cd 9004 	str.w	r9, [sp, #4]
 800ea78:	e7a8      	b.n	800e9cc <_scanf_float+0x188>
 800ea7a:	6822      	ldr	r2, [r4, #0]
 800ea7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ea80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ea84:	d006      	beq.n	800ea94 <_scanf_float+0x250>
 800ea86:	0550      	lsls	r0, r2, #21
 800ea88:	f57f af0c 	bpl.w	800e8a4 <_scanf_float+0x60>
 800ea8c:	f1b9 0f00 	cmp.w	r9, #0
 800ea90:	f43f af0f 	beq.w	800e8b2 <_scanf_float+0x6e>
 800ea94:	0591      	lsls	r1, r2, #22
 800ea96:	bf58      	it	pl
 800ea98:	9901      	ldrpl	r1, [sp, #4]
 800ea9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ea9e:	bf58      	it	pl
 800eaa0:	eba9 0101 	subpl.w	r1, r9, r1
 800eaa4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800eaa8:	bf58      	it	pl
 800eaaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eaae:	6022      	str	r2, [r4, #0]
 800eab0:	f04f 0900 	mov.w	r9, #0
 800eab4:	e78a      	b.n	800e9cc <_scanf_float+0x188>
 800eab6:	f04f 0a03 	mov.w	sl, #3
 800eaba:	e787      	b.n	800e9cc <_scanf_float+0x188>
 800eabc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eac0:	4639      	mov	r1, r7
 800eac2:	4640      	mov	r0, r8
 800eac4:	4798      	blx	r3
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f43f aedf 	beq.w	800e88a <_scanf_float+0x46>
 800eacc:	e6ea      	b.n	800e8a4 <_scanf_float+0x60>
 800eace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ead2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ead6:	463a      	mov	r2, r7
 800ead8:	4640      	mov	r0, r8
 800eada:	4798      	blx	r3
 800eadc:	6923      	ldr	r3, [r4, #16]
 800eade:	3b01      	subs	r3, #1
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	e6ec      	b.n	800e8be <_scanf_float+0x7a>
 800eae4:	1e6b      	subs	r3, r5, #1
 800eae6:	2b06      	cmp	r3, #6
 800eae8:	d825      	bhi.n	800eb36 <_scanf_float+0x2f2>
 800eaea:	2d02      	cmp	r5, #2
 800eaec:	d836      	bhi.n	800eb5c <_scanf_float+0x318>
 800eaee:	455e      	cmp	r6, fp
 800eaf0:	f67f aee8 	bls.w	800e8c4 <_scanf_float+0x80>
 800eaf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eaf8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eafc:	463a      	mov	r2, r7
 800eafe:	4640      	mov	r0, r8
 800eb00:	4798      	blx	r3
 800eb02:	6923      	ldr	r3, [r4, #16]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	6123      	str	r3, [r4, #16]
 800eb08:	e7f1      	b.n	800eaee <_scanf_float+0x2aa>
 800eb0a:	9802      	ldr	r0, [sp, #8]
 800eb0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800eb14:	9002      	str	r0, [sp, #8]
 800eb16:	463a      	mov	r2, r7
 800eb18:	4640      	mov	r0, r8
 800eb1a:	4798      	blx	r3
 800eb1c:	6923      	ldr	r3, [r4, #16]
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	6123      	str	r3, [r4, #16]
 800eb22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb26:	fa5f fa8a 	uxtb.w	sl, sl
 800eb2a:	f1ba 0f02 	cmp.w	sl, #2
 800eb2e:	d1ec      	bne.n	800eb0a <_scanf_float+0x2c6>
 800eb30:	3d03      	subs	r5, #3
 800eb32:	b2ed      	uxtb	r5, r5
 800eb34:	1b76      	subs	r6, r6, r5
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	05da      	lsls	r2, r3, #23
 800eb3a:	d52f      	bpl.n	800eb9c <_scanf_float+0x358>
 800eb3c:	055b      	lsls	r3, r3, #21
 800eb3e:	d510      	bpl.n	800eb62 <_scanf_float+0x31e>
 800eb40:	455e      	cmp	r6, fp
 800eb42:	f67f aebf 	bls.w	800e8c4 <_scanf_float+0x80>
 800eb46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb4e:	463a      	mov	r2, r7
 800eb50:	4640      	mov	r0, r8
 800eb52:	4798      	blx	r3
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	3b01      	subs	r3, #1
 800eb58:	6123      	str	r3, [r4, #16]
 800eb5a:	e7f1      	b.n	800eb40 <_scanf_float+0x2fc>
 800eb5c:	46aa      	mov	sl, r5
 800eb5e:	9602      	str	r6, [sp, #8]
 800eb60:	e7df      	b.n	800eb22 <_scanf_float+0x2de>
 800eb62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	2965      	cmp	r1, #101	; 0x65
 800eb6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800eb72:	6123      	str	r3, [r4, #16]
 800eb74:	d00c      	beq.n	800eb90 <_scanf_float+0x34c>
 800eb76:	2945      	cmp	r1, #69	; 0x45
 800eb78:	d00a      	beq.n	800eb90 <_scanf_float+0x34c>
 800eb7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb7e:	463a      	mov	r2, r7
 800eb80:	4640      	mov	r0, r8
 800eb82:	4798      	blx	r3
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	1eb5      	subs	r5, r6, #2
 800eb8e:	6123      	str	r3, [r4, #16]
 800eb90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb94:	463a      	mov	r2, r7
 800eb96:	4640      	mov	r0, r8
 800eb98:	4798      	blx	r3
 800eb9a:	462e      	mov	r6, r5
 800eb9c:	6825      	ldr	r5, [r4, #0]
 800eb9e:	f015 0510 	ands.w	r5, r5, #16
 800eba2:	d159      	bne.n	800ec58 <_scanf_float+0x414>
 800eba4:	7035      	strb	r5, [r6, #0]
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ebac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebb0:	d11b      	bne.n	800ebea <_scanf_float+0x3a6>
 800ebb2:	9b01      	ldr	r3, [sp, #4]
 800ebb4:	454b      	cmp	r3, r9
 800ebb6:	eba3 0209 	sub.w	r2, r3, r9
 800ebba:	d123      	bne.n	800ec04 <_scanf_float+0x3c0>
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	4659      	mov	r1, fp
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	f000 ff27 	bl	800fa14 <_strtod_r>
 800ebc6:	6822      	ldr	r2, [r4, #0]
 800ebc8:	9b03      	ldr	r3, [sp, #12]
 800ebca:	f012 0f02 	tst.w	r2, #2
 800ebce:	ec57 6b10 	vmov	r6, r7, d0
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	d021      	beq.n	800ec1a <_scanf_float+0x3d6>
 800ebd6:	9903      	ldr	r1, [sp, #12]
 800ebd8:	1d1a      	adds	r2, r3, #4
 800ebda:	600a      	str	r2, [r1, #0]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	e9c3 6700 	strd	r6, r7, [r3]
 800ebe2:	68e3      	ldr	r3, [r4, #12]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	60e3      	str	r3, [r4, #12]
 800ebe8:	e66d      	b.n	800e8c6 <_scanf_float+0x82>
 800ebea:	9b04      	ldr	r3, [sp, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d0e5      	beq.n	800ebbc <_scanf_float+0x378>
 800ebf0:	9905      	ldr	r1, [sp, #20]
 800ebf2:	230a      	movs	r3, #10
 800ebf4:	462a      	mov	r2, r5
 800ebf6:	3101      	adds	r1, #1
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	f000 ff9f 	bl	800fb3c <_strtol_r>
 800ebfe:	9b04      	ldr	r3, [sp, #16]
 800ec00:	9e05      	ldr	r6, [sp, #20]
 800ec02:	1ac2      	subs	r2, r0, r3
 800ec04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ec08:	429e      	cmp	r6, r3
 800ec0a:	bf28      	it	cs
 800ec0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ec10:	4912      	ldr	r1, [pc, #72]	; (800ec5c <_scanf_float+0x418>)
 800ec12:	4630      	mov	r0, r6
 800ec14:	f000 f8ba 	bl	800ed8c <siprintf>
 800ec18:	e7d0      	b.n	800ebbc <_scanf_float+0x378>
 800ec1a:	9903      	ldr	r1, [sp, #12]
 800ec1c:	f012 0f04 	tst.w	r2, #4
 800ec20:	f103 0204 	add.w	r2, r3, #4
 800ec24:	600a      	str	r2, [r1, #0]
 800ec26:	d1d9      	bne.n	800ebdc <_scanf_float+0x398>
 800ec28:	f8d3 8000 	ldr.w	r8, [r3]
 800ec2c:	ee10 2a10 	vmov	r2, s0
 800ec30:	ee10 0a10 	vmov	r0, s0
 800ec34:	463b      	mov	r3, r7
 800ec36:	4639      	mov	r1, r7
 800ec38:	f7f1 ffa0 	bl	8000b7c <__aeabi_dcmpun>
 800ec3c:	b128      	cbz	r0, 800ec4a <_scanf_float+0x406>
 800ec3e:	4808      	ldr	r0, [pc, #32]	; (800ec60 <_scanf_float+0x41c>)
 800ec40:	f000 f89e 	bl	800ed80 <nanf>
 800ec44:	ed88 0a00 	vstr	s0, [r8]
 800ec48:	e7cb      	b.n	800ebe2 <_scanf_float+0x39e>
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	f7f1 fff3 	bl	8000c38 <__aeabi_d2f>
 800ec52:	f8c8 0000 	str.w	r0, [r8]
 800ec56:	e7c4      	b.n	800ebe2 <_scanf_float+0x39e>
 800ec58:	2500      	movs	r5, #0
 800ec5a:	e634      	b.n	800e8c6 <_scanf_float+0x82>
 800ec5c:	0801419c 	.word	0x0801419c
 800ec60:	08014610 	.word	0x08014610

0800ec64 <iprintf>:
 800ec64:	b40f      	push	{r0, r1, r2, r3}
 800ec66:	4b0a      	ldr	r3, [pc, #40]	; (800ec90 <iprintf+0x2c>)
 800ec68:	b513      	push	{r0, r1, r4, lr}
 800ec6a:	681c      	ldr	r4, [r3, #0]
 800ec6c:	b124      	cbz	r4, 800ec78 <iprintf+0x14>
 800ec6e:	69a3      	ldr	r3, [r4, #24]
 800ec70:	b913      	cbnz	r3, 800ec78 <iprintf+0x14>
 800ec72:	4620      	mov	r0, r4
 800ec74:	f001 ffc4 	bl	8010c00 <__sinit>
 800ec78:	ab05      	add	r3, sp, #20
 800ec7a:	9a04      	ldr	r2, [sp, #16]
 800ec7c:	68a1      	ldr	r1, [r4, #8]
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	4620      	mov	r0, r4
 800ec82:	f003 fb8d 	bl	80123a0 <_vfiprintf_r>
 800ec86:	b002      	add	sp, #8
 800ec88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec8c:	b004      	add	sp, #16
 800ec8e:	4770      	bx	lr
 800ec90:	2000002c 	.word	0x2000002c

0800ec94 <_puts_r>:
 800ec94:	b570      	push	{r4, r5, r6, lr}
 800ec96:	460e      	mov	r6, r1
 800ec98:	4605      	mov	r5, r0
 800ec9a:	b118      	cbz	r0, 800eca4 <_puts_r+0x10>
 800ec9c:	6983      	ldr	r3, [r0, #24]
 800ec9e:	b90b      	cbnz	r3, 800eca4 <_puts_r+0x10>
 800eca0:	f001 ffae 	bl	8010c00 <__sinit>
 800eca4:	69ab      	ldr	r3, [r5, #24]
 800eca6:	68ac      	ldr	r4, [r5, #8]
 800eca8:	b913      	cbnz	r3, 800ecb0 <_puts_r+0x1c>
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f001 ffa8 	bl	8010c00 <__sinit>
 800ecb0:	4b2c      	ldr	r3, [pc, #176]	; (800ed64 <_puts_r+0xd0>)
 800ecb2:	429c      	cmp	r4, r3
 800ecb4:	d120      	bne.n	800ecf8 <_puts_r+0x64>
 800ecb6:	686c      	ldr	r4, [r5, #4]
 800ecb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecba:	07db      	lsls	r3, r3, #31
 800ecbc:	d405      	bmi.n	800ecca <_puts_r+0x36>
 800ecbe:	89a3      	ldrh	r3, [r4, #12]
 800ecc0:	0598      	lsls	r0, r3, #22
 800ecc2:	d402      	bmi.n	800ecca <_puts_r+0x36>
 800ecc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecc6:	f002 fbac 	bl	8011422 <__retarget_lock_acquire_recursive>
 800ecca:	89a3      	ldrh	r3, [r4, #12]
 800eccc:	0719      	lsls	r1, r3, #28
 800ecce:	d51d      	bpl.n	800ed0c <_puts_r+0x78>
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	b1db      	cbz	r3, 800ed0c <_puts_r+0x78>
 800ecd4:	3e01      	subs	r6, #1
 800ecd6:	68a3      	ldr	r3, [r4, #8]
 800ecd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	60a3      	str	r3, [r4, #8]
 800ece0:	bb39      	cbnz	r1, 800ed32 <_puts_r+0x9e>
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	da38      	bge.n	800ed58 <_puts_r+0xc4>
 800ece6:	4622      	mov	r2, r4
 800ece8:	210a      	movs	r1, #10
 800ecea:	4628      	mov	r0, r5
 800ecec:	f000 ff32 	bl	800fb54 <__swbuf_r>
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d011      	beq.n	800ed18 <_puts_r+0x84>
 800ecf4:	250a      	movs	r5, #10
 800ecf6:	e011      	b.n	800ed1c <_puts_r+0x88>
 800ecf8:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <_puts_r+0xd4>)
 800ecfa:	429c      	cmp	r4, r3
 800ecfc:	d101      	bne.n	800ed02 <_puts_r+0x6e>
 800ecfe:	68ac      	ldr	r4, [r5, #8]
 800ed00:	e7da      	b.n	800ecb8 <_puts_r+0x24>
 800ed02:	4b1a      	ldr	r3, [pc, #104]	; (800ed6c <_puts_r+0xd8>)
 800ed04:	429c      	cmp	r4, r3
 800ed06:	bf08      	it	eq
 800ed08:	68ec      	ldreq	r4, [r5, #12]
 800ed0a:	e7d5      	b.n	800ecb8 <_puts_r+0x24>
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f000 ff72 	bl	800fbf8 <__swsetup_r>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d0dd      	beq.n	800ecd4 <_puts_r+0x40>
 800ed18:	f04f 35ff 	mov.w	r5, #4294967295
 800ed1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed1e:	07da      	lsls	r2, r3, #31
 800ed20:	d405      	bmi.n	800ed2e <_puts_r+0x9a>
 800ed22:	89a3      	ldrh	r3, [r4, #12]
 800ed24:	059b      	lsls	r3, r3, #22
 800ed26:	d402      	bmi.n	800ed2e <_puts_r+0x9a>
 800ed28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed2a:	f002 fb7b 	bl	8011424 <__retarget_lock_release_recursive>
 800ed2e:	4628      	mov	r0, r5
 800ed30:	bd70      	pop	{r4, r5, r6, pc}
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	da04      	bge.n	800ed40 <_puts_r+0xac>
 800ed36:	69a2      	ldr	r2, [r4, #24]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	dc06      	bgt.n	800ed4a <_puts_r+0xb6>
 800ed3c:	290a      	cmp	r1, #10
 800ed3e:	d004      	beq.n	800ed4a <_puts_r+0xb6>
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	1c5a      	adds	r2, r3, #1
 800ed44:	6022      	str	r2, [r4, #0]
 800ed46:	7019      	strb	r1, [r3, #0]
 800ed48:	e7c5      	b.n	800ecd6 <_puts_r+0x42>
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	f000 ff01 	bl	800fb54 <__swbuf_r>
 800ed52:	3001      	adds	r0, #1
 800ed54:	d1bf      	bne.n	800ecd6 <_puts_r+0x42>
 800ed56:	e7df      	b.n	800ed18 <_puts_r+0x84>
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	250a      	movs	r5, #10
 800ed5c:	1c5a      	adds	r2, r3, #1
 800ed5e:	6022      	str	r2, [r4, #0]
 800ed60:	701d      	strb	r5, [r3, #0]
 800ed62:	e7db      	b.n	800ed1c <_puts_r+0x88>
 800ed64:	080143ac 	.word	0x080143ac
 800ed68:	080143cc 	.word	0x080143cc
 800ed6c:	0801438c 	.word	0x0801438c

0800ed70 <puts>:
 800ed70:	4b02      	ldr	r3, [pc, #8]	; (800ed7c <puts+0xc>)
 800ed72:	4601      	mov	r1, r0
 800ed74:	6818      	ldr	r0, [r3, #0]
 800ed76:	f7ff bf8d 	b.w	800ec94 <_puts_r>
 800ed7a:	bf00      	nop
 800ed7c:	2000002c 	.word	0x2000002c

0800ed80 <nanf>:
 800ed80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ed88 <nanf+0x8>
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	7fc00000 	.word	0x7fc00000

0800ed8c <siprintf>:
 800ed8c:	b40e      	push	{r1, r2, r3}
 800ed8e:	b500      	push	{lr}
 800ed90:	b09c      	sub	sp, #112	; 0x70
 800ed92:	ab1d      	add	r3, sp, #116	; 0x74
 800ed94:	9002      	str	r0, [sp, #8]
 800ed96:	9006      	str	r0, [sp, #24]
 800ed98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed9c:	4809      	ldr	r0, [pc, #36]	; (800edc4 <siprintf+0x38>)
 800ed9e:	9107      	str	r1, [sp, #28]
 800eda0:	9104      	str	r1, [sp, #16]
 800eda2:	4909      	ldr	r1, [pc, #36]	; (800edc8 <siprintf+0x3c>)
 800eda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda8:	9105      	str	r1, [sp, #20]
 800edaa:	6800      	ldr	r0, [r0, #0]
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	a902      	add	r1, sp, #8
 800edb0:	f003 f9cc 	bl	801214c <_svfiprintf_r>
 800edb4:	9b02      	ldr	r3, [sp, #8]
 800edb6:	2200      	movs	r2, #0
 800edb8:	701a      	strb	r2, [r3, #0]
 800edba:	b01c      	add	sp, #112	; 0x70
 800edbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc0:	b003      	add	sp, #12
 800edc2:	4770      	bx	lr
 800edc4:	2000002c 	.word	0x2000002c
 800edc8:	ffff0208 	.word	0xffff0208

0800edcc <sulp>:
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	4604      	mov	r4, r0
 800edd0:	460d      	mov	r5, r1
 800edd2:	ec45 4b10 	vmov	d0, r4, r5
 800edd6:	4616      	mov	r6, r2
 800edd8:	f002 ff16 	bl	8011c08 <__ulp>
 800eddc:	ec51 0b10 	vmov	r0, r1, d0
 800ede0:	b17e      	cbz	r6, 800ee02 <sulp+0x36>
 800ede2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ede6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800edea:	2b00      	cmp	r3, #0
 800edec:	dd09      	ble.n	800ee02 <sulp+0x36>
 800edee:	051b      	lsls	r3, r3, #20
 800edf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800edf4:	2400      	movs	r4, #0
 800edf6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800edfa:	4622      	mov	r2, r4
 800edfc:	462b      	mov	r3, r5
 800edfe:	f7f1 fc23 	bl	8000648 <__aeabi_dmul>
 800ee02:	bd70      	pop	{r4, r5, r6, pc}
 800ee04:	0000      	movs	r0, r0
	...

0800ee08 <_strtod_l>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	ed2d 8b02 	vpush	{d8}
 800ee10:	b09d      	sub	sp, #116	; 0x74
 800ee12:	461f      	mov	r7, r3
 800ee14:	2300      	movs	r3, #0
 800ee16:	9318      	str	r3, [sp, #96]	; 0x60
 800ee18:	4ba2      	ldr	r3, [pc, #648]	; (800f0a4 <_strtod_l+0x29c>)
 800ee1a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	9305      	str	r3, [sp, #20]
 800ee20:	4604      	mov	r4, r0
 800ee22:	4618      	mov	r0, r3
 800ee24:	4688      	mov	r8, r1
 800ee26:	f7f1 f9fb 	bl	8000220 <strlen>
 800ee2a:	f04f 0a00 	mov.w	sl, #0
 800ee2e:	4605      	mov	r5, r0
 800ee30:	f04f 0b00 	mov.w	fp, #0
 800ee34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ee38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee3a:	781a      	ldrb	r2, [r3, #0]
 800ee3c:	2a2b      	cmp	r2, #43	; 0x2b
 800ee3e:	d04e      	beq.n	800eede <_strtod_l+0xd6>
 800ee40:	d83b      	bhi.n	800eeba <_strtod_l+0xb2>
 800ee42:	2a0d      	cmp	r2, #13
 800ee44:	d834      	bhi.n	800eeb0 <_strtod_l+0xa8>
 800ee46:	2a08      	cmp	r2, #8
 800ee48:	d834      	bhi.n	800eeb4 <_strtod_l+0xac>
 800ee4a:	2a00      	cmp	r2, #0
 800ee4c:	d03e      	beq.n	800eecc <_strtod_l+0xc4>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	930a      	str	r3, [sp, #40]	; 0x28
 800ee52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ee54:	7833      	ldrb	r3, [r6, #0]
 800ee56:	2b30      	cmp	r3, #48	; 0x30
 800ee58:	f040 80b0 	bne.w	800efbc <_strtod_l+0x1b4>
 800ee5c:	7873      	ldrb	r3, [r6, #1]
 800ee5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ee62:	2b58      	cmp	r3, #88	; 0x58
 800ee64:	d168      	bne.n	800ef38 <_strtod_l+0x130>
 800ee66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	ab18      	add	r3, sp, #96	; 0x60
 800ee6c:	9702      	str	r7, [sp, #8]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	4a8d      	ldr	r2, [pc, #564]	; (800f0a8 <_strtod_l+0x2a0>)
 800ee72:	ab19      	add	r3, sp, #100	; 0x64
 800ee74:	a917      	add	r1, sp, #92	; 0x5c
 800ee76:	4620      	mov	r0, r4
 800ee78:	f001 ffc6 	bl	8010e08 <__gethex>
 800ee7c:	f010 0707 	ands.w	r7, r0, #7
 800ee80:	4605      	mov	r5, r0
 800ee82:	d005      	beq.n	800ee90 <_strtod_l+0x88>
 800ee84:	2f06      	cmp	r7, #6
 800ee86:	d12c      	bne.n	800eee2 <_strtod_l+0xda>
 800ee88:	3601      	adds	r6, #1
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ee8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f040 8590 	bne.w	800f9b8 <_strtod_l+0xbb0>
 800ee98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee9a:	b1eb      	cbz	r3, 800eed8 <_strtod_l+0xd0>
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800eea2:	ec43 2b10 	vmov	d0, r2, r3
 800eea6:	b01d      	add	sp, #116	; 0x74
 800eea8:	ecbd 8b02 	vpop	{d8}
 800eeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb0:	2a20      	cmp	r2, #32
 800eeb2:	d1cc      	bne.n	800ee4e <_strtod_l+0x46>
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	9317      	str	r3, [sp, #92]	; 0x5c
 800eeb8:	e7be      	b.n	800ee38 <_strtod_l+0x30>
 800eeba:	2a2d      	cmp	r2, #45	; 0x2d
 800eebc:	d1c7      	bne.n	800ee4e <_strtod_l+0x46>
 800eebe:	2201      	movs	r2, #1
 800eec0:	920a      	str	r2, [sp, #40]	; 0x28
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	9217      	str	r2, [sp, #92]	; 0x5c
 800eec6:	785b      	ldrb	r3, [r3, #1]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1c2      	bne.n	800ee52 <_strtod_l+0x4a>
 800eecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eece:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f040 856e 	bne.w	800f9b4 <_strtod_l+0xbac>
 800eed8:	4652      	mov	r2, sl
 800eeda:	465b      	mov	r3, fp
 800eedc:	e7e1      	b.n	800eea2 <_strtod_l+0x9a>
 800eede:	2200      	movs	r2, #0
 800eee0:	e7ee      	b.n	800eec0 <_strtod_l+0xb8>
 800eee2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eee4:	b13a      	cbz	r2, 800eef6 <_strtod_l+0xee>
 800eee6:	2135      	movs	r1, #53	; 0x35
 800eee8:	a81a      	add	r0, sp, #104	; 0x68
 800eeea:	f002 ff98 	bl	8011e1e <__copybits>
 800eeee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eef0:	4620      	mov	r0, r4
 800eef2:	f002 fb57 	bl	80115a4 <_Bfree>
 800eef6:	3f01      	subs	r7, #1
 800eef8:	2f04      	cmp	r7, #4
 800eefa:	d806      	bhi.n	800ef0a <_strtod_l+0x102>
 800eefc:	e8df f007 	tbb	[pc, r7]
 800ef00:	1714030a 	.word	0x1714030a
 800ef04:	0a          	.byte	0x0a
 800ef05:	00          	.byte	0x00
 800ef06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ef0a:	0728      	lsls	r0, r5, #28
 800ef0c:	d5c0      	bpl.n	800ee90 <_strtod_l+0x88>
 800ef0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ef12:	e7bd      	b.n	800ee90 <_strtod_l+0x88>
 800ef14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ef18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ef1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ef1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ef22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ef26:	e7f0      	b.n	800ef0a <_strtod_l+0x102>
 800ef28:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f0ac <_strtod_l+0x2a4>
 800ef2c:	e7ed      	b.n	800ef0a <_strtod_l+0x102>
 800ef2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ef32:	f04f 3aff 	mov.w	sl, #4294967295
 800ef36:	e7e8      	b.n	800ef0a <_strtod_l+0x102>
 800ef38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef3e:	785b      	ldrb	r3, [r3, #1]
 800ef40:	2b30      	cmp	r3, #48	; 0x30
 800ef42:	d0f9      	beq.n	800ef38 <_strtod_l+0x130>
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0a3      	beq.n	800ee90 <_strtod_l+0x88>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	f04f 0900 	mov.w	r9, #0
 800ef4e:	9304      	str	r3, [sp, #16]
 800ef50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef52:	9308      	str	r3, [sp, #32]
 800ef54:	f8cd 901c 	str.w	r9, [sp, #28]
 800ef58:	464f      	mov	r7, r9
 800ef5a:	220a      	movs	r2, #10
 800ef5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ef5e:	7806      	ldrb	r6, [r0, #0]
 800ef60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ef64:	b2d9      	uxtb	r1, r3
 800ef66:	2909      	cmp	r1, #9
 800ef68:	d92a      	bls.n	800efc0 <_strtod_l+0x1b8>
 800ef6a:	9905      	ldr	r1, [sp, #20]
 800ef6c:	462a      	mov	r2, r5
 800ef6e:	f003 fba2 	bl	80126b6 <strncmp>
 800ef72:	b398      	cbz	r0, 800efdc <_strtod_l+0x1d4>
 800ef74:	2000      	movs	r0, #0
 800ef76:	4632      	mov	r2, r6
 800ef78:	463d      	mov	r5, r7
 800ef7a:	9005      	str	r0, [sp, #20]
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2a65      	cmp	r2, #101	; 0x65
 800ef80:	d001      	beq.n	800ef86 <_strtod_l+0x17e>
 800ef82:	2a45      	cmp	r2, #69	; 0x45
 800ef84:	d118      	bne.n	800efb8 <_strtod_l+0x1b0>
 800ef86:	b91d      	cbnz	r5, 800ef90 <_strtod_l+0x188>
 800ef88:	9a04      	ldr	r2, [sp, #16]
 800ef8a:	4302      	orrs	r2, r0
 800ef8c:	d09e      	beq.n	800eecc <_strtod_l+0xc4>
 800ef8e:	2500      	movs	r5, #0
 800ef90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ef94:	f108 0201 	add.w	r2, r8, #1
 800ef98:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ef9e:	2a2b      	cmp	r2, #43	; 0x2b
 800efa0:	d075      	beq.n	800f08e <_strtod_l+0x286>
 800efa2:	2a2d      	cmp	r2, #45	; 0x2d
 800efa4:	d07b      	beq.n	800f09e <_strtod_l+0x296>
 800efa6:	f04f 0c00 	mov.w	ip, #0
 800efaa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800efae:	2909      	cmp	r1, #9
 800efb0:	f240 8082 	bls.w	800f0b8 <_strtod_l+0x2b0>
 800efb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800efb8:	2600      	movs	r6, #0
 800efba:	e09d      	b.n	800f0f8 <_strtod_l+0x2f0>
 800efbc:	2300      	movs	r3, #0
 800efbe:	e7c4      	b.n	800ef4a <_strtod_l+0x142>
 800efc0:	2f08      	cmp	r7, #8
 800efc2:	bfd8      	it	le
 800efc4:	9907      	ldrle	r1, [sp, #28]
 800efc6:	f100 0001 	add.w	r0, r0, #1
 800efca:	bfda      	itte	le
 800efcc:	fb02 3301 	mlale	r3, r2, r1, r3
 800efd0:	9307      	strle	r3, [sp, #28]
 800efd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800efd6:	3701      	adds	r7, #1
 800efd8:	9017      	str	r0, [sp, #92]	; 0x5c
 800efda:	e7bf      	b.n	800ef5c <_strtod_l+0x154>
 800efdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efde:	195a      	adds	r2, r3, r5
 800efe0:	9217      	str	r2, [sp, #92]	; 0x5c
 800efe2:	5d5a      	ldrb	r2, [r3, r5]
 800efe4:	2f00      	cmp	r7, #0
 800efe6:	d037      	beq.n	800f058 <_strtod_l+0x250>
 800efe8:	9005      	str	r0, [sp, #20]
 800efea:	463d      	mov	r5, r7
 800efec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800eff0:	2b09      	cmp	r3, #9
 800eff2:	d912      	bls.n	800f01a <_strtod_l+0x212>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e7c2      	b.n	800ef7e <_strtod_l+0x176>
 800eff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	9217      	str	r2, [sp, #92]	; 0x5c
 800effe:	785a      	ldrb	r2, [r3, #1]
 800f000:	3001      	adds	r0, #1
 800f002:	2a30      	cmp	r2, #48	; 0x30
 800f004:	d0f8      	beq.n	800eff8 <_strtod_l+0x1f0>
 800f006:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f00a:	2b08      	cmp	r3, #8
 800f00c:	f200 84d9 	bhi.w	800f9c2 <_strtod_l+0xbba>
 800f010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f012:	9005      	str	r0, [sp, #20]
 800f014:	2000      	movs	r0, #0
 800f016:	9308      	str	r3, [sp, #32]
 800f018:	4605      	mov	r5, r0
 800f01a:	3a30      	subs	r2, #48	; 0x30
 800f01c:	f100 0301 	add.w	r3, r0, #1
 800f020:	d014      	beq.n	800f04c <_strtod_l+0x244>
 800f022:	9905      	ldr	r1, [sp, #20]
 800f024:	4419      	add	r1, r3
 800f026:	9105      	str	r1, [sp, #20]
 800f028:	462b      	mov	r3, r5
 800f02a:	eb00 0e05 	add.w	lr, r0, r5
 800f02e:	210a      	movs	r1, #10
 800f030:	4573      	cmp	r3, lr
 800f032:	d113      	bne.n	800f05c <_strtod_l+0x254>
 800f034:	182b      	adds	r3, r5, r0
 800f036:	2b08      	cmp	r3, #8
 800f038:	f105 0501 	add.w	r5, r5, #1
 800f03c:	4405      	add	r5, r0
 800f03e:	dc1c      	bgt.n	800f07a <_strtod_l+0x272>
 800f040:	9907      	ldr	r1, [sp, #28]
 800f042:	230a      	movs	r3, #10
 800f044:	fb03 2301 	mla	r3, r3, r1, r2
 800f048:	9307      	str	r3, [sp, #28]
 800f04a:	2300      	movs	r3, #0
 800f04c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f04e:	1c51      	adds	r1, r2, #1
 800f050:	9117      	str	r1, [sp, #92]	; 0x5c
 800f052:	7852      	ldrb	r2, [r2, #1]
 800f054:	4618      	mov	r0, r3
 800f056:	e7c9      	b.n	800efec <_strtod_l+0x1e4>
 800f058:	4638      	mov	r0, r7
 800f05a:	e7d2      	b.n	800f002 <_strtod_l+0x1fa>
 800f05c:	2b08      	cmp	r3, #8
 800f05e:	dc04      	bgt.n	800f06a <_strtod_l+0x262>
 800f060:	9e07      	ldr	r6, [sp, #28]
 800f062:	434e      	muls	r6, r1
 800f064:	9607      	str	r6, [sp, #28]
 800f066:	3301      	adds	r3, #1
 800f068:	e7e2      	b.n	800f030 <_strtod_l+0x228>
 800f06a:	f103 0c01 	add.w	ip, r3, #1
 800f06e:	f1bc 0f10 	cmp.w	ip, #16
 800f072:	bfd8      	it	le
 800f074:	fb01 f909 	mulle.w	r9, r1, r9
 800f078:	e7f5      	b.n	800f066 <_strtod_l+0x25e>
 800f07a:	2d10      	cmp	r5, #16
 800f07c:	bfdc      	itt	le
 800f07e:	230a      	movle	r3, #10
 800f080:	fb03 2909 	mlale	r9, r3, r9, r2
 800f084:	e7e1      	b.n	800f04a <_strtod_l+0x242>
 800f086:	2300      	movs	r3, #0
 800f088:	9305      	str	r3, [sp, #20]
 800f08a:	2301      	movs	r3, #1
 800f08c:	e77c      	b.n	800ef88 <_strtod_l+0x180>
 800f08e:	f04f 0c00 	mov.w	ip, #0
 800f092:	f108 0202 	add.w	r2, r8, #2
 800f096:	9217      	str	r2, [sp, #92]	; 0x5c
 800f098:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f09c:	e785      	b.n	800efaa <_strtod_l+0x1a2>
 800f09e:	f04f 0c01 	mov.w	ip, #1
 800f0a2:	e7f6      	b.n	800f092 <_strtod_l+0x28a>
 800f0a4:	08014454 	.word	0x08014454
 800f0a8:	080141a4 	.word	0x080141a4
 800f0ac:	7ff00000 	.word	0x7ff00000
 800f0b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f0b2:	1c51      	adds	r1, r2, #1
 800f0b4:	9117      	str	r1, [sp, #92]	; 0x5c
 800f0b6:	7852      	ldrb	r2, [r2, #1]
 800f0b8:	2a30      	cmp	r2, #48	; 0x30
 800f0ba:	d0f9      	beq.n	800f0b0 <_strtod_l+0x2a8>
 800f0bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f0c0:	2908      	cmp	r1, #8
 800f0c2:	f63f af79 	bhi.w	800efb8 <_strtod_l+0x1b0>
 800f0c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f0ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f0cc:	9206      	str	r2, [sp, #24]
 800f0ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f0d0:	1c51      	adds	r1, r2, #1
 800f0d2:	9117      	str	r1, [sp, #92]	; 0x5c
 800f0d4:	7852      	ldrb	r2, [r2, #1]
 800f0d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f0da:	2e09      	cmp	r6, #9
 800f0dc:	d937      	bls.n	800f14e <_strtod_l+0x346>
 800f0de:	9e06      	ldr	r6, [sp, #24]
 800f0e0:	1b89      	subs	r1, r1, r6
 800f0e2:	2908      	cmp	r1, #8
 800f0e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f0e8:	dc02      	bgt.n	800f0f0 <_strtod_l+0x2e8>
 800f0ea:	4576      	cmp	r6, lr
 800f0ec:	bfa8      	it	ge
 800f0ee:	4676      	movge	r6, lr
 800f0f0:	f1bc 0f00 	cmp.w	ip, #0
 800f0f4:	d000      	beq.n	800f0f8 <_strtod_l+0x2f0>
 800f0f6:	4276      	negs	r6, r6
 800f0f8:	2d00      	cmp	r5, #0
 800f0fa:	d14d      	bne.n	800f198 <_strtod_l+0x390>
 800f0fc:	9904      	ldr	r1, [sp, #16]
 800f0fe:	4301      	orrs	r1, r0
 800f100:	f47f aec6 	bne.w	800ee90 <_strtod_l+0x88>
 800f104:	2b00      	cmp	r3, #0
 800f106:	f47f aee1 	bne.w	800eecc <_strtod_l+0xc4>
 800f10a:	2a69      	cmp	r2, #105	; 0x69
 800f10c:	d027      	beq.n	800f15e <_strtod_l+0x356>
 800f10e:	dc24      	bgt.n	800f15a <_strtod_l+0x352>
 800f110:	2a49      	cmp	r2, #73	; 0x49
 800f112:	d024      	beq.n	800f15e <_strtod_l+0x356>
 800f114:	2a4e      	cmp	r2, #78	; 0x4e
 800f116:	f47f aed9 	bne.w	800eecc <_strtod_l+0xc4>
 800f11a:	499f      	ldr	r1, [pc, #636]	; (800f398 <_strtod_l+0x590>)
 800f11c:	a817      	add	r0, sp, #92	; 0x5c
 800f11e:	f002 f8cb 	bl	80112b8 <__match>
 800f122:	2800      	cmp	r0, #0
 800f124:	f43f aed2 	beq.w	800eecc <_strtod_l+0xc4>
 800f128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b28      	cmp	r3, #40	; 0x28
 800f12e:	d12d      	bne.n	800f18c <_strtod_l+0x384>
 800f130:	499a      	ldr	r1, [pc, #616]	; (800f39c <_strtod_l+0x594>)
 800f132:	aa1a      	add	r2, sp, #104	; 0x68
 800f134:	a817      	add	r0, sp, #92	; 0x5c
 800f136:	f002 f8d3 	bl	80112e0 <__hexnan>
 800f13a:	2805      	cmp	r0, #5
 800f13c:	d126      	bne.n	800f18c <_strtod_l+0x384>
 800f13e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f140:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f144:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f148:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f14c:	e6a0      	b.n	800ee90 <_strtod_l+0x88>
 800f14e:	210a      	movs	r1, #10
 800f150:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f154:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f158:	e7b9      	b.n	800f0ce <_strtod_l+0x2c6>
 800f15a:	2a6e      	cmp	r2, #110	; 0x6e
 800f15c:	e7db      	b.n	800f116 <_strtod_l+0x30e>
 800f15e:	4990      	ldr	r1, [pc, #576]	; (800f3a0 <_strtod_l+0x598>)
 800f160:	a817      	add	r0, sp, #92	; 0x5c
 800f162:	f002 f8a9 	bl	80112b8 <__match>
 800f166:	2800      	cmp	r0, #0
 800f168:	f43f aeb0 	beq.w	800eecc <_strtod_l+0xc4>
 800f16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f16e:	498d      	ldr	r1, [pc, #564]	; (800f3a4 <_strtod_l+0x59c>)
 800f170:	3b01      	subs	r3, #1
 800f172:	a817      	add	r0, sp, #92	; 0x5c
 800f174:	9317      	str	r3, [sp, #92]	; 0x5c
 800f176:	f002 f89f 	bl	80112b8 <__match>
 800f17a:	b910      	cbnz	r0, 800f182 <_strtod_l+0x37a>
 800f17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f17e:	3301      	adds	r3, #1
 800f180:	9317      	str	r3, [sp, #92]	; 0x5c
 800f182:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f3b4 <_strtod_l+0x5ac>
 800f186:	f04f 0a00 	mov.w	sl, #0
 800f18a:	e681      	b.n	800ee90 <_strtod_l+0x88>
 800f18c:	4886      	ldr	r0, [pc, #536]	; (800f3a8 <_strtod_l+0x5a0>)
 800f18e:	f003 fa37 	bl	8012600 <nan>
 800f192:	ec5b ab10 	vmov	sl, fp, d0
 800f196:	e67b      	b.n	800ee90 <_strtod_l+0x88>
 800f198:	9b05      	ldr	r3, [sp, #20]
 800f19a:	9807      	ldr	r0, [sp, #28]
 800f19c:	1af3      	subs	r3, r6, r3
 800f19e:	2f00      	cmp	r7, #0
 800f1a0:	bf08      	it	eq
 800f1a2:	462f      	moveq	r7, r5
 800f1a4:	2d10      	cmp	r5, #16
 800f1a6:	9306      	str	r3, [sp, #24]
 800f1a8:	46a8      	mov	r8, r5
 800f1aa:	bfa8      	it	ge
 800f1ac:	f04f 0810 	movge.w	r8, #16
 800f1b0:	f7f1 f9d0 	bl	8000554 <__aeabi_ui2d>
 800f1b4:	2d09      	cmp	r5, #9
 800f1b6:	4682      	mov	sl, r0
 800f1b8:	468b      	mov	fp, r1
 800f1ba:	dd13      	ble.n	800f1e4 <_strtod_l+0x3dc>
 800f1bc:	4b7b      	ldr	r3, [pc, #492]	; (800f3ac <_strtod_l+0x5a4>)
 800f1be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f1c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f1c6:	f7f1 fa3f 	bl	8000648 <__aeabi_dmul>
 800f1ca:	4682      	mov	sl, r0
 800f1cc:	4648      	mov	r0, r9
 800f1ce:	468b      	mov	fp, r1
 800f1d0:	f7f1 f9c0 	bl	8000554 <__aeabi_ui2d>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4650      	mov	r0, sl
 800f1da:	4659      	mov	r1, fp
 800f1dc:	f7f1 f87e 	bl	80002dc <__adddf3>
 800f1e0:	4682      	mov	sl, r0
 800f1e2:	468b      	mov	fp, r1
 800f1e4:	2d0f      	cmp	r5, #15
 800f1e6:	dc38      	bgt.n	800f25a <_strtod_l+0x452>
 800f1e8:	9b06      	ldr	r3, [sp, #24]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f43f ae50 	beq.w	800ee90 <_strtod_l+0x88>
 800f1f0:	dd24      	ble.n	800f23c <_strtod_l+0x434>
 800f1f2:	2b16      	cmp	r3, #22
 800f1f4:	dc0b      	bgt.n	800f20e <_strtod_l+0x406>
 800f1f6:	496d      	ldr	r1, [pc, #436]	; (800f3ac <_strtod_l+0x5a4>)
 800f1f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f200:	4652      	mov	r2, sl
 800f202:	465b      	mov	r3, fp
 800f204:	f7f1 fa20 	bl	8000648 <__aeabi_dmul>
 800f208:	4682      	mov	sl, r0
 800f20a:	468b      	mov	fp, r1
 800f20c:	e640      	b.n	800ee90 <_strtod_l+0x88>
 800f20e:	9a06      	ldr	r2, [sp, #24]
 800f210:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f214:	4293      	cmp	r3, r2
 800f216:	db20      	blt.n	800f25a <_strtod_l+0x452>
 800f218:	4c64      	ldr	r4, [pc, #400]	; (800f3ac <_strtod_l+0x5a4>)
 800f21a:	f1c5 050f 	rsb	r5, r5, #15
 800f21e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f222:	4652      	mov	r2, sl
 800f224:	465b      	mov	r3, fp
 800f226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f22a:	f7f1 fa0d 	bl	8000648 <__aeabi_dmul>
 800f22e:	9b06      	ldr	r3, [sp, #24]
 800f230:	1b5d      	subs	r5, r3, r5
 800f232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f236:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f23a:	e7e3      	b.n	800f204 <_strtod_l+0x3fc>
 800f23c:	9b06      	ldr	r3, [sp, #24]
 800f23e:	3316      	adds	r3, #22
 800f240:	db0b      	blt.n	800f25a <_strtod_l+0x452>
 800f242:	9b05      	ldr	r3, [sp, #20]
 800f244:	1b9e      	subs	r6, r3, r6
 800f246:	4b59      	ldr	r3, [pc, #356]	; (800f3ac <_strtod_l+0x5a4>)
 800f248:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f24c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f250:	4650      	mov	r0, sl
 800f252:	4659      	mov	r1, fp
 800f254:	f7f1 fb22 	bl	800089c <__aeabi_ddiv>
 800f258:	e7d6      	b.n	800f208 <_strtod_l+0x400>
 800f25a:	9b06      	ldr	r3, [sp, #24]
 800f25c:	eba5 0808 	sub.w	r8, r5, r8
 800f260:	4498      	add	r8, r3
 800f262:	f1b8 0f00 	cmp.w	r8, #0
 800f266:	dd74      	ble.n	800f352 <_strtod_l+0x54a>
 800f268:	f018 030f 	ands.w	r3, r8, #15
 800f26c:	d00a      	beq.n	800f284 <_strtod_l+0x47c>
 800f26e:	494f      	ldr	r1, [pc, #316]	; (800f3ac <_strtod_l+0x5a4>)
 800f270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f274:	4652      	mov	r2, sl
 800f276:	465b      	mov	r3, fp
 800f278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f27c:	f7f1 f9e4 	bl	8000648 <__aeabi_dmul>
 800f280:	4682      	mov	sl, r0
 800f282:	468b      	mov	fp, r1
 800f284:	f038 080f 	bics.w	r8, r8, #15
 800f288:	d04f      	beq.n	800f32a <_strtod_l+0x522>
 800f28a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f28e:	dd22      	ble.n	800f2d6 <_strtod_l+0x4ce>
 800f290:	2500      	movs	r5, #0
 800f292:	462e      	mov	r6, r5
 800f294:	9507      	str	r5, [sp, #28]
 800f296:	9505      	str	r5, [sp, #20]
 800f298:	2322      	movs	r3, #34	; 0x22
 800f29a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f3b4 <_strtod_l+0x5ac>
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	f04f 0a00 	mov.w	sl, #0
 800f2a4:	9b07      	ldr	r3, [sp, #28]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f43f adf2 	beq.w	800ee90 <_strtod_l+0x88>
 800f2ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f002 f978 	bl	80115a4 <_Bfree>
 800f2b4:	9905      	ldr	r1, [sp, #20]
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f002 f974 	bl	80115a4 <_Bfree>
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f002 f970 	bl	80115a4 <_Bfree>
 800f2c4:	9907      	ldr	r1, [sp, #28]
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f002 f96c 	bl	80115a4 <_Bfree>
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f002 f968 	bl	80115a4 <_Bfree>
 800f2d4:	e5dc      	b.n	800ee90 <_strtod_l+0x88>
 800f2d6:	4b36      	ldr	r3, [pc, #216]	; (800f3b0 <_strtod_l+0x5a8>)
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	2300      	movs	r3, #0
 800f2dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f2e0:	4650      	mov	r0, sl
 800f2e2:	4659      	mov	r1, fp
 800f2e4:	4699      	mov	r9, r3
 800f2e6:	f1b8 0f01 	cmp.w	r8, #1
 800f2ea:	dc21      	bgt.n	800f330 <_strtod_l+0x528>
 800f2ec:	b10b      	cbz	r3, 800f2f2 <_strtod_l+0x4ea>
 800f2ee:	4682      	mov	sl, r0
 800f2f0:	468b      	mov	fp, r1
 800f2f2:	4b2f      	ldr	r3, [pc, #188]	; (800f3b0 <_strtod_l+0x5a8>)
 800f2f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f2f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f2fc:	4652      	mov	r2, sl
 800f2fe:	465b      	mov	r3, fp
 800f300:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f304:	f7f1 f9a0 	bl	8000648 <__aeabi_dmul>
 800f308:	4b2a      	ldr	r3, [pc, #168]	; (800f3b4 <_strtod_l+0x5ac>)
 800f30a:	460a      	mov	r2, r1
 800f30c:	400b      	ands	r3, r1
 800f30e:	492a      	ldr	r1, [pc, #168]	; (800f3b8 <_strtod_l+0x5b0>)
 800f310:	428b      	cmp	r3, r1
 800f312:	4682      	mov	sl, r0
 800f314:	d8bc      	bhi.n	800f290 <_strtod_l+0x488>
 800f316:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f31a:	428b      	cmp	r3, r1
 800f31c:	bf86      	itte	hi
 800f31e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f3bc <_strtod_l+0x5b4>
 800f322:	f04f 3aff 	movhi.w	sl, #4294967295
 800f326:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f32a:	2300      	movs	r3, #0
 800f32c:	9304      	str	r3, [sp, #16]
 800f32e:	e084      	b.n	800f43a <_strtod_l+0x632>
 800f330:	f018 0f01 	tst.w	r8, #1
 800f334:	d005      	beq.n	800f342 <_strtod_l+0x53a>
 800f336:	9b04      	ldr	r3, [sp, #16]
 800f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33c:	f7f1 f984 	bl	8000648 <__aeabi_dmul>
 800f340:	2301      	movs	r3, #1
 800f342:	9a04      	ldr	r2, [sp, #16]
 800f344:	3208      	adds	r2, #8
 800f346:	f109 0901 	add.w	r9, r9, #1
 800f34a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f34e:	9204      	str	r2, [sp, #16]
 800f350:	e7c9      	b.n	800f2e6 <_strtod_l+0x4de>
 800f352:	d0ea      	beq.n	800f32a <_strtod_l+0x522>
 800f354:	f1c8 0800 	rsb	r8, r8, #0
 800f358:	f018 020f 	ands.w	r2, r8, #15
 800f35c:	d00a      	beq.n	800f374 <_strtod_l+0x56c>
 800f35e:	4b13      	ldr	r3, [pc, #76]	; (800f3ac <_strtod_l+0x5a4>)
 800f360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f364:	4650      	mov	r0, sl
 800f366:	4659      	mov	r1, fp
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	f7f1 fa96 	bl	800089c <__aeabi_ddiv>
 800f370:	4682      	mov	sl, r0
 800f372:	468b      	mov	fp, r1
 800f374:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f378:	d0d7      	beq.n	800f32a <_strtod_l+0x522>
 800f37a:	f1b8 0f1f 	cmp.w	r8, #31
 800f37e:	dd1f      	ble.n	800f3c0 <_strtod_l+0x5b8>
 800f380:	2500      	movs	r5, #0
 800f382:	462e      	mov	r6, r5
 800f384:	9507      	str	r5, [sp, #28]
 800f386:	9505      	str	r5, [sp, #20]
 800f388:	2322      	movs	r3, #34	; 0x22
 800f38a:	f04f 0a00 	mov.w	sl, #0
 800f38e:	f04f 0b00 	mov.w	fp, #0
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	e786      	b.n	800f2a4 <_strtod_l+0x49c>
 800f396:	bf00      	nop
 800f398:	08014175 	.word	0x08014175
 800f39c:	080141b8 	.word	0x080141b8
 800f3a0:	0801416d 	.word	0x0801416d
 800f3a4:	080142fc 	.word	0x080142fc
 800f3a8:	08014610 	.word	0x08014610
 800f3ac:	080144f0 	.word	0x080144f0
 800f3b0:	080144c8 	.word	0x080144c8
 800f3b4:	7ff00000 	.word	0x7ff00000
 800f3b8:	7ca00000 	.word	0x7ca00000
 800f3bc:	7fefffff 	.word	0x7fefffff
 800f3c0:	f018 0310 	ands.w	r3, r8, #16
 800f3c4:	bf18      	it	ne
 800f3c6:	236a      	movne	r3, #106	; 0x6a
 800f3c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f778 <_strtod_l+0x970>
 800f3cc:	9304      	str	r3, [sp, #16]
 800f3ce:	4650      	mov	r0, sl
 800f3d0:	4659      	mov	r1, fp
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	f018 0f01 	tst.w	r8, #1
 800f3d8:	d004      	beq.n	800f3e4 <_strtod_l+0x5dc>
 800f3da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f3de:	f7f1 f933 	bl	8000648 <__aeabi_dmul>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f3e8:	f109 0908 	add.w	r9, r9, #8
 800f3ec:	d1f2      	bne.n	800f3d4 <_strtod_l+0x5cc>
 800f3ee:	b10b      	cbz	r3, 800f3f4 <_strtod_l+0x5ec>
 800f3f0:	4682      	mov	sl, r0
 800f3f2:	468b      	mov	fp, r1
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	b1c3      	cbz	r3, 800f42a <_strtod_l+0x622>
 800f3f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f3fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f400:	2b00      	cmp	r3, #0
 800f402:	4659      	mov	r1, fp
 800f404:	dd11      	ble.n	800f42a <_strtod_l+0x622>
 800f406:	2b1f      	cmp	r3, #31
 800f408:	f340 8124 	ble.w	800f654 <_strtod_l+0x84c>
 800f40c:	2b34      	cmp	r3, #52	; 0x34
 800f40e:	bfde      	ittt	le
 800f410:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f414:	f04f 33ff 	movle.w	r3, #4294967295
 800f418:	fa03 f202 	lslle.w	r2, r3, r2
 800f41c:	f04f 0a00 	mov.w	sl, #0
 800f420:	bfcc      	ite	gt
 800f422:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f426:	ea02 0b01 	andle.w	fp, r2, r1
 800f42a:	2200      	movs	r2, #0
 800f42c:	2300      	movs	r3, #0
 800f42e:	4650      	mov	r0, sl
 800f430:	4659      	mov	r1, fp
 800f432:	f7f1 fb71 	bl	8000b18 <__aeabi_dcmpeq>
 800f436:	2800      	cmp	r0, #0
 800f438:	d1a2      	bne.n	800f380 <_strtod_l+0x578>
 800f43a:	9b07      	ldr	r3, [sp, #28]
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	9908      	ldr	r1, [sp, #32]
 800f440:	462b      	mov	r3, r5
 800f442:	463a      	mov	r2, r7
 800f444:	4620      	mov	r0, r4
 800f446:	f002 f915 	bl	8011674 <__s2b>
 800f44a:	9007      	str	r0, [sp, #28]
 800f44c:	2800      	cmp	r0, #0
 800f44e:	f43f af1f 	beq.w	800f290 <_strtod_l+0x488>
 800f452:	9b05      	ldr	r3, [sp, #20]
 800f454:	1b9e      	subs	r6, r3, r6
 800f456:	9b06      	ldr	r3, [sp, #24]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	bfb4      	ite	lt
 800f45c:	4633      	movlt	r3, r6
 800f45e:	2300      	movge	r3, #0
 800f460:	930c      	str	r3, [sp, #48]	; 0x30
 800f462:	9b06      	ldr	r3, [sp, #24]
 800f464:	2500      	movs	r5, #0
 800f466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f46a:	9312      	str	r3, [sp, #72]	; 0x48
 800f46c:	462e      	mov	r6, r5
 800f46e:	9b07      	ldr	r3, [sp, #28]
 800f470:	4620      	mov	r0, r4
 800f472:	6859      	ldr	r1, [r3, #4]
 800f474:	f002 f856 	bl	8011524 <_Balloc>
 800f478:	9005      	str	r0, [sp, #20]
 800f47a:	2800      	cmp	r0, #0
 800f47c:	f43f af0c 	beq.w	800f298 <_strtod_l+0x490>
 800f480:	9b07      	ldr	r3, [sp, #28]
 800f482:	691a      	ldr	r2, [r3, #16]
 800f484:	3202      	adds	r2, #2
 800f486:	f103 010c 	add.w	r1, r3, #12
 800f48a:	0092      	lsls	r2, r2, #2
 800f48c:	300c      	adds	r0, #12
 800f48e:	f7fe fd59 	bl	800df44 <memcpy>
 800f492:	ec4b ab10 	vmov	d0, sl, fp
 800f496:	aa1a      	add	r2, sp, #104	; 0x68
 800f498:	a919      	add	r1, sp, #100	; 0x64
 800f49a:	4620      	mov	r0, r4
 800f49c:	f002 fc30 	bl	8011d00 <__d2b>
 800f4a0:	ec4b ab18 	vmov	d8, sl, fp
 800f4a4:	9018      	str	r0, [sp, #96]	; 0x60
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f43f aef6 	beq.w	800f298 <_strtod_l+0x490>
 800f4ac:	2101      	movs	r1, #1
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f002 f97a 	bl	80117a8 <__i2b>
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	f43f aeee 	beq.w	800f298 <_strtod_l+0x490>
 800f4bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f4be:	9904      	ldr	r1, [sp, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	bfab      	itete	ge
 800f4c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f4c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f4c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f4ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f4ce:	bfac      	ite	ge
 800f4d0:	eb03 0902 	addge.w	r9, r3, r2
 800f4d4:	1ad7      	sublt	r7, r2, r3
 800f4d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f4d8:	eba3 0801 	sub.w	r8, r3, r1
 800f4dc:	4490      	add	r8, r2
 800f4de:	4ba1      	ldr	r3, [pc, #644]	; (800f764 <_strtod_l+0x95c>)
 800f4e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4e4:	4598      	cmp	r8, r3
 800f4e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f4ea:	f280 80c7 	bge.w	800f67c <_strtod_l+0x874>
 800f4ee:	eba3 0308 	sub.w	r3, r3, r8
 800f4f2:	2b1f      	cmp	r3, #31
 800f4f4:	eba2 0203 	sub.w	r2, r2, r3
 800f4f8:	f04f 0101 	mov.w	r1, #1
 800f4fc:	f300 80b1 	bgt.w	800f662 <_strtod_l+0x85a>
 800f500:	fa01 f303 	lsl.w	r3, r1, r3
 800f504:	930d      	str	r3, [sp, #52]	; 0x34
 800f506:	2300      	movs	r3, #0
 800f508:	9308      	str	r3, [sp, #32]
 800f50a:	eb09 0802 	add.w	r8, r9, r2
 800f50e:	9b04      	ldr	r3, [sp, #16]
 800f510:	45c1      	cmp	r9, r8
 800f512:	4417      	add	r7, r2
 800f514:	441f      	add	r7, r3
 800f516:	464b      	mov	r3, r9
 800f518:	bfa8      	it	ge
 800f51a:	4643      	movge	r3, r8
 800f51c:	42bb      	cmp	r3, r7
 800f51e:	bfa8      	it	ge
 800f520:	463b      	movge	r3, r7
 800f522:	2b00      	cmp	r3, #0
 800f524:	bfc2      	ittt	gt
 800f526:	eba8 0803 	subgt.w	r8, r8, r3
 800f52a:	1aff      	subgt	r7, r7, r3
 800f52c:	eba9 0903 	subgt.w	r9, r9, r3
 800f530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f532:	2b00      	cmp	r3, #0
 800f534:	dd17      	ble.n	800f566 <_strtod_l+0x75e>
 800f536:	4631      	mov	r1, r6
 800f538:	461a      	mov	r2, r3
 800f53a:	4620      	mov	r0, r4
 800f53c:	f002 f9f4 	bl	8011928 <__pow5mult>
 800f540:	4606      	mov	r6, r0
 800f542:	2800      	cmp	r0, #0
 800f544:	f43f aea8 	beq.w	800f298 <_strtod_l+0x490>
 800f548:	4601      	mov	r1, r0
 800f54a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f54c:	4620      	mov	r0, r4
 800f54e:	f002 f941 	bl	80117d4 <__multiply>
 800f552:	900b      	str	r0, [sp, #44]	; 0x2c
 800f554:	2800      	cmp	r0, #0
 800f556:	f43f ae9f 	beq.w	800f298 <_strtod_l+0x490>
 800f55a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f55c:	4620      	mov	r0, r4
 800f55e:	f002 f821 	bl	80115a4 <_Bfree>
 800f562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f564:	9318      	str	r3, [sp, #96]	; 0x60
 800f566:	f1b8 0f00 	cmp.w	r8, #0
 800f56a:	f300 808c 	bgt.w	800f686 <_strtod_l+0x87e>
 800f56e:	9b06      	ldr	r3, [sp, #24]
 800f570:	2b00      	cmp	r3, #0
 800f572:	dd08      	ble.n	800f586 <_strtod_l+0x77e>
 800f574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f576:	9905      	ldr	r1, [sp, #20]
 800f578:	4620      	mov	r0, r4
 800f57a:	f002 f9d5 	bl	8011928 <__pow5mult>
 800f57e:	9005      	str	r0, [sp, #20]
 800f580:	2800      	cmp	r0, #0
 800f582:	f43f ae89 	beq.w	800f298 <_strtod_l+0x490>
 800f586:	2f00      	cmp	r7, #0
 800f588:	dd08      	ble.n	800f59c <_strtod_l+0x794>
 800f58a:	9905      	ldr	r1, [sp, #20]
 800f58c:	463a      	mov	r2, r7
 800f58e:	4620      	mov	r0, r4
 800f590:	f002 fa24 	bl	80119dc <__lshift>
 800f594:	9005      	str	r0, [sp, #20]
 800f596:	2800      	cmp	r0, #0
 800f598:	f43f ae7e 	beq.w	800f298 <_strtod_l+0x490>
 800f59c:	f1b9 0f00 	cmp.w	r9, #0
 800f5a0:	dd08      	ble.n	800f5b4 <_strtod_l+0x7ac>
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	464a      	mov	r2, r9
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f002 fa18 	bl	80119dc <__lshift>
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f43f ae72 	beq.w	800f298 <_strtod_l+0x490>
 800f5b4:	9a05      	ldr	r2, [sp, #20]
 800f5b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f002 fa9b 	bl	8011af4 <__mdiff>
 800f5be:	4605      	mov	r5, r0
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	f43f ae69 	beq.w	800f298 <_strtod_l+0x490>
 800f5c6:	68c3      	ldr	r3, [r0, #12]
 800f5c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60c3      	str	r3, [r0, #12]
 800f5ce:	4631      	mov	r1, r6
 800f5d0:	f002 fa74 	bl	8011abc <__mcmp>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	da60      	bge.n	800f69a <_strtod_l+0x892>
 800f5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5da:	ea53 030a 	orrs.w	r3, r3, sl
 800f5de:	f040 8082 	bne.w	800f6e6 <_strtod_l+0x8de>
 800f5e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d17d      	bne.n	800f6e6 <_strtod_l+0x8de>
 800f5ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5ee:	0d1b      	lsrs	r3, r3, #20
 800f5f0:	051b      	lsls	r3, r3, #20
 800f5f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f5f6:	d976      	bls.n	800f6e6 <_strtod_l+0x8de>
 800f5f8:	696b      	ldr	r3, [r5, #20]
 800f5fa:	b913      	cbnz	r3, 800f602 <_strtod_l+0x7fa>
 800f5fc:	692b      	ldr	r3, [r5, #16]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	dd71      	ble.n	800f6e6 <_strtod_l+0x8de>
 800f602:	4629      	mov	r1, r5
 800f604:	2201      	movs	r2, #1
 800f606:	4620      	mov	r0, r4
 800f608:	f002 f9e8 	bl	80119dc <__lshift>
 800f60c:	4631      	mov	r1, r6
 800f60e:	4605      	mov	r5, r0
 800f610:	f002 fa54 	bl	8011abc <__mcmp>
 800f614:	2800      	cmp	r0, #0
 800f616:	dd66      	ble.n	800f6e6 <_strtod_l+0x8de>
 800f618:	9904      	ldr	r1, [sp, #16]
 800f61a:	4a53      	ldr	r2, [pc, #332]	; (800f768 <_strtod_l+0x960>)
 800f61c:	465b      	mov	r3, fp
 800f61e:	2900      	cmp	r1, #0
 800f620:	f000 8081 	beq.w	800f726 <_strtod_l+0x91e>
 800f624:	ea02 010b 	and.w	r1, r2, fp
 800f628:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f62c:	dc7b      	bgt.n	800f726 <_strtod_l+0x91e>
 800f62e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f632:	f77f aea9 	ble.w	800f388 <_strtod_l+0x580>
 800f636:	4b4d      	ldr	r3, [pc, #308]	; (800f76c <_strtod_l+0x964>)
 800f638:	4650      	mov	r0, sl
 800f63a:	4659      	mov	r1, fp
 800f63c:	2200      	movs	r2, #0
 800f63e:	f7f1 f803 	bl	8000648 <__aeabi_dmul>
 800f642:	460b      	mov	r3, r1
 800f644:	4303      	orrs	r3, r0
 800f646:	bf08      	it	eq
 800f648:	2322      	moveq	r3, #34	; 0x22
 800f64a:	4682      	mov	sl, r0
 800f64c:	468b      	mov	fp, r1
 800f64e:	bf08      	it	eq
 800f650:	6023      	streq	r3, [r4, #0]
 800f652:	e62b      	b.n	800f2ac <_strtod_l+0x4a4>
 800f654:	f04f 32ff 	mov.w	r2, #4294967295
 800f658:	fa02 f303 	lsl.w	r3, r2, r3
 800f65c:	ea03 0a0a 	and.w	sl, r3, sl
 800f660:	e6e3      	b.n	800f42a <_strtod_l+0x622>
 800f662:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f666:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f66a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f66e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f672:	fa01 f308 	lsl.w	r3, r1, r8
 800f676:	9308      	str	r3, [sp, #32]
 800f678:	910d      	str	r1, [sp, #52]	; 0x34
 800f67a:	e746      	b.n	800f50a <_strtod_l+0x702>
 800f67c:	2300      	movs	r3, #0
 800f67e:	9308      	str	r3, [sp, #32]
 800f680:	2301      	movs	r3, #1
 800f682:	930d      	str	r3, [sp, #52]	; 0x34
 800f684:	e741      	b.n	800f50a <_strtod_l+0x702>
 800f686:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f688:	4642      	mov	r2, r8
 800f68a:	4620      	mov	r0, r4
 800f68c:	f002 f9a6 	bl	80119dc <__lshift>
 800f690:	9018      	str	r0, [sp, #96]	; 0x60
 800f692:	2800      	cmp	r0, #0
 800f694:	f47f af6b 	bne.w	800f56e <_strtod_l+0x766>
 800f698:	e5fe      	b.n	800f298 <_strtod_l+0x490>
 800f69a:	465f      	mov	r7, fp
 800f69c:	d16e      	bne.n	800f77c <_strtod_l+0x974>
 800f69e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f6a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6a4:	b342      	cbz	r2, 800f6f8 <_strtod_l+0x8f0>
 800f6a6:	4a32      	ldr	r2, [pc, #200]	; (800f770 <_strtod_l+0x968>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d128      	bne.n	800f6fe <_strtod_l+0x8f6>
 800f6ac:	9b04      	ldr	r3, [sp, #16]
 800f6ae:	4651      	mov	r1, sl
 800f6b0:	b1eb      	cbz	r3, 800f6ee <_strtod_l+0x8e6>
 800f6b2:	4b2d      	ldr	r3, [pc, #180]	; (800f768 <_strtod_l+0x960>)
 800f6b4:	403b      	ands	r3, r7
 800f6b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f6be:	d819      	bhi.n	800f6f4 <_strtod_l+0x8ec>
 800f6c0:	0d1b      	lsrs	r3, r3, #20
 800f6c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ca:	4299      	cmp	r1, r3
 800f6cc:	d117      	bne.n	800f6fe <_strtod_l+0x8f6>
 800f6ce:	4b29      	ldr	r3, [pc, #164]	; (800f774 <_strtod_l+0x96c>)
 800f6d0:	429f      	cmp	r7, r3
 800f6d2:	d102      	bne.n	800f6da <_strtod_l+0x8d2>
 800f6d4:	3101      	adds	r1, #1
 800f6d6:	f43f addf 	beq.w	800f298 <_strtod_l+0x490>
 800f6da:	4b23      	ldr	r3, [pc, #140]	; (800f768 <_strtod_l+0x960>)
 800f6dc:	403b      	ands	r3, r7
 800f6de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f6e2:	f04f 0a00 	mov.w	sl, #0
 800f6e6:	9b04      	ldr	r3, [sp, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d1a4      	bne.n	800f636 <_strtod_l+0x82e>
 800f6ec:	e5de      	b.n	800f2ac <_strtod_l+0x4a4>
 800f6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f2:	e7ea      	b.n	800f6ca <_strtod_l+0x8c2>
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	e7e8      	b.n	800f6ca <_strtod_l+0x8c2>
 800f6f8:	ea53 030a 	orrs.w	r3, r3, sl
 800f6fc:	d08c      	beq.n	800f618 <_strtod_l+0x810>
 800f6fe:	9b08      	ldr	r3, [sp, #32]
 800f700:	b1db      	cbz	r3, 800f73a <_strtod_l+0x932>
 800f702:	423b      	tst	r3, r7
 800f704:	d0ef      	beq.n	800f6e6 <_strtod_l+0x8de>
 800f706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	4650      	mov	r0, sl
 800f70c:	4659      	mov	r1, fp
 800f70e:	b1c3      	cbz	r3, 800f742 <_strtod_l+0x93a>
 800f710:	f7ff fb5c 	bl	800edcc <sulp>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	ec51 0b18 	vmov	r0, r1, d8
 800f71c:	f7f0 fdde 	bl	80002dc <__adddf3>
 800f720:	4682      	mov	sl, r0
 800f722:	468b      	mov	fp, r1
 800f724:	e7df      	b.n	800f6e6 <_strtod_l+0x8de>
 800f726:	4013      	ands	r3, r2
 800f728:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f72c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f730:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f734:	f04f 3aff 	mov.w	sl, #4294967295
 800f738:	e7d5      	b.n	800f6e6 <_strtod_l+0x8de>
 800f73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f73c:	ea13 0f0a 	tst.w	r3, sl
 800f740:	e7e0      	b.n	800f704 <_strtod_l+0x8fc>
 800f742:	f7ff fb43 	bl	800edcc <sulp>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	ec51 0b18 	vmov	r0, r1, d8
 800f74e:	f7f0 fdc3 	bl	80002d8 <__aeabi_dsub>
 800f752:	2200      	movs	r2, #0
 800f754:	2300      	movs	r3, #0
 800f756:	4682      	mov	sl, r0
 800f758:	468b      	mov	fp, r1
 800f75a:	f7f1 f9dd 	bl	8000b18 <__aeabi_dcmpeq>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0c1      	beq.n	800f6e6 <_strtod_l+0x8de>
 800f762:	e611      	b.n	800f388 <_strtod_l+0x580>
 800f764:	fffffc02 	.word	0xfffffc02
 800f768:	7ff00000 	.word	0x7ff00000
 800f76c:	39500000 	.word	0x39500000
 800f770:	000fffff 	.word	0x000fffff
 800f774:	7fefffff 	.word	0x7fefffff
 800f778:	080141d0 	.word	0x080141d0
 800f77c:	4631      	mov	r1, r6
 800f77e:	4628      	mov	r0, r5
 800f780:	f002 fb1a 	bl	8011db8 <__ratio>
 800f784:	ec59 8b10 	vmov	r8, r9, d0
 800f788:	ee10 0a10 	vmov	r0, s0
 800f78c:	2200      	movs	r2, #0
 800f78e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f792:	4649      	mov	r1, r9
 800f794:	f7f1 f9d4 	bl	8000b40 <__aeabi_dcmple>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d07a      	beq.n	800f892 <_strtod_l+0xa8a>
 800f79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d04a      	beq.n	800f838 <_strtod_l+0xa30>
 800f7a2:	4b95      	ldr	r3, [pc, #596]	; (800f9f8 <_strtod_l+0xbf0>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f7aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f9f8 <_strtod_l+0xbf0>
 800f7ae:	f04f 0800 	mov.w	r8, #0
 800f7b2:	4b92      	ldr	r3, [pc, #584]	; (800f9fc <_strtod_l+0xbf4>)
 800f7b4:	403b      	ands	r3, r7
 800f7b6:	930d      	str	r3, [sp, #52]	; 0x34
 800f7b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7ba:	4b91      	ldr	r3, [pc, #580]	; (800fa00 <_strtod_l+0xbf8>)
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	f040 80b0 	bne.w	800f922 <_strtod_l+0xb1a>
 800f7c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f7ca:	ec4b ab10 	vmov	d0, sl, fp
 800f7ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7d2:	f002 fa19 	bl	8011c08 <__ulp>
 800f7d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7da:	ec53 2b10 	vmov	r2, r3, d0
 800f7de:	f7f0 ff33 	bl	8000648 <__aeabi_dmul>
 800f7e2:	4652      	mov	r2, sl
 800f7e4:	465b      	mov	r3, fp
 800f7e6:	f7f0 fd79 	bl	80002dc <__adddf3>
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	4983      	ldr	r1, [pc, #524]	; (800f9fc <_strtod_l+0xbf4>)
 800f7ee:	4a85      	ldr	r2, [pc, #532]	; (800fa04 <_strtod_l+0xbfc>)
 800f7f0:	4019      	ands	r1, r3
 800f7f2:	4291      	cmp	r1, r2
 800f7f4:	4682      	mov	sl, r0
 800f7f6:	d960      	bls.n	800f8ba <_strtod_l+0xab2>
 800f7f8:	ee18 3a90 	vmov	r3, s17
 800f7fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f800:	4293      	cmp	r3, r2
 800f802:	d104      	bne.n	800f80e <_strtod_l+0xa06>
 800f804:	ee18 3a10 	vmov	r3, s16
 800f808:	3301      	adds	r3, #1
 800f80a:	f43f ad45 	beq.w	800f298 <_strtod_l+0x490>
 800f80e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fa10 <_strtod_l+0xc08>
 800f812:	f04f 3aff 	mov.w	sl, #4294967295
 800f816:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f818:	4620      	mov	r0, r4
 800f81a:	f001 fec3 	bl	80115a4 <_Bfree>
 800f81e:	9905      	ldr	r1, [sp, #20]
 800f820:	4620      	mov	r0, r4
 800f822:	f001 febf 	bl	80115a4 <_Bfree>
 800f826:	4631      	mov	r1, r6
 800f828:	4620      	mov	r0, r4
 800f82a:	f001 febb 	bl	80115a4 <_Bfree>
 800f82e:	4629      	mov	r1, r5
 800f830:	4620      	mov	r0, r4
 800f832:	f001 feb7 	bl	80115a4 <_Bfree>
 800f836:	e61a      	b.n	800f46e <_strtod_l+0x666>
 800f838:	f1ba 0f00 	cmp.w	sl, #0
 800f83c:	d11b      	bne.n	800f876 <_strtod_l+0xa6e>
 800f83e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f842:	b9f3      	cbnz	r3, 800f882 <_strtod_l+0xa7a>
 800f844:	4b6c      	ldr	r3, [pc, #432]	; (800f9f8 <_strtod_l+0xbf0>)
 800f846:	2200      	movs	r2, #0
 800f848:	4640      	mov	r0, r8
 800f84a:	4649      	mov	r1, r9
 800f84c:	f7f1 f96e 	bl	8000b2c <__aeabi_dcmplt>
 800f850:	b9d0      	cbnz	r0, 800f888 <_strtod_l+0xa80>
 800f852:	4640      	mov	r0, r8
 800f854:	4649      	mov	r1, r9
 800f856:	4b6c      	ldr	r3, [pc, #432]	; (800fa08 <_strtod_l+0xc00>)
 800f858:	2200      	movs	r2, #0
 800f85a:	f7f0 fef5 	bl	8000648 <__aeabi_dmul>
 800f85e:	4680      	mov	r8, r0
 800f860:	4689      	mov	r9, r1
 800f862:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f866:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f86a:	9315      	str	r3, [sp, #84]	; 0x54
 800f86c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f874:	e79d      	b.n	800f7b2 <_strtod_l+0x9aa>
 800f876:	f1ba 0f01 	cmp.w	sl, #1
 800f87a:	d102      	bne.n	800f882 <_strtod_l+0xa7a>
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	f43f ad83 	beq.w	800f388 <_strtod_l+0x580>
 800f882:	4b62      	ldr	r3, [pc, #392]	; (800fa0c <_strtod_l+0xc04>)
 800f884:	2200      	movs	r2, #0
 800f886:	e78e      	b.n	800f7a6 <_strtod_l+0x99e>
 800f888:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fa08 <_strtod_l+0xc00>
 800f88c:	f04f 0800 	mov.w	r8, #0
 800f890:	e7e7      	b.n	800f862 <_strtod_l+0xa5a>
 800f892:	4b5d      	ldr	r3, [pc, #372]	; (800fa08 <_strtod_l+0xc00>)
 800f894:	4640      	mov	r0, r8
 800f896:	4649      	mov	r1, r9
 800f898:	2200      	movs	r2, #0
 800f89a:	f7f0 fed5 	bl	8000648 <__aeabi_dmul>
 800f89e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8a0:	4680      	mov	r8, r0
 800f8a2:	4689      	mov	r9, r1
 800f8a4:	b933      	cbnz	r3, 800f8b4 <_strtod_l+0xaac>
 800f8a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8aa:	900e      	str	r0, [sp, #56]	; 0x38
 800f8ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f8b2:	e7dd      	b.n	800f870 <_strtod_l+0xa68>
 800f8b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f8b8:	e7f9      	b.n	800f8ae <_strtod_l+0xaa6>
 800f8ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f8be:	9b04      	ldr	r3, [sp, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1a8      	bne.n	800f816 <_strtod_l+0xa0e>
 800f8c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f8c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8ca:	0d1b      	lsrs	r3, r3, #20
 800f8cc:	051b      	lsls	r3, r3, #20
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d1a1      	bne.n	800f816 <_strtod_l+0xa0e>
 800f8d2:	4640      	mov	r0, r8
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	f7f1 fa17 	bl	8000d08 <__aeabi_d2lz>
 800f8da:	f7f0 fe87 	bl	80005ec <__aeabi_l2d>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	f7f0 fcf7 	bl	80002d8 <__aeabi_dsub>
 800f8ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8f0:	ea43 030a 	orr.w	r3, r3, sl
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4689      	mov	r9, r1
 800f8fa:	d055      	beq.n	800f9a8 <_strtod_l+0xba0>
 800f8fc:	a336      	add	r3, pc, #216	; (adr r3, 800f9d8 <_strtod_l+0xbd0>)
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f7f1 f913 	bl	8000b2c <__aeabi_dcmplt>
 800f906:	2800      	cmp	r0, #0
 800f908:	f47f acd0 	bne.w	800f2ac <_strtod_l+0x4a4>
 800f90c:	a334      	add	r3, pc, #208	; (adr r3, 800f9e0 <_strtod_l+0xbd8>)
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	4640      	mov	r0, r8
 800f914:	4649      	mov	r1, r9
 800f916:	f7f1 f927 	bl	8000b68 <__aeabi_dcmpgt>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	f43f af7b 	beq.w	800f816 <_strtod_l+0xa0e>
 800f920:	e4c4      	b.n	800f2ac <_strtod_l+0x4a4>
 800f922:	9b04      	ldr	r3, [sp, #16]
 800f924:	b333      	cbz	r3, 800f974 <_strtod_l+0xb6c>
 800f926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f928:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f92c:	d822      	bhi.n	800f974 <_strtod_l+0xb6c>
 800f92e:	a32e      	add	r3, pc, #184	; (adr r3, 800f9e8 <_strtod_l+0xbe0>)
 800f930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f934:	4640      	mov	r0, r8
 800f936:	4649      	mov	r1, r9
 800f938:	f7f1 f902 	bl	8000b40 <__aeabi_dcmple>
 800f93c:	b1a0      	cbz	r0, 800f968 <_strtod_l+0xb60>
 800f93e:	4649      	mov	r1, r9
 800f940:	4640      	mov	r0, r8
 800f942:	f7f1 f959 	bl	8000bf8 <__aeabi_d2uiz>
 800f946:	2801      	cmp	r0, #1
 800f948:	bf38      	it	cc
 800f94a:	2001      	movcc	r0, #1
 800f94c:	f7f0 fe02 	bl	8000554 <__aeabi_ui2d>
 800f950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f952:	4680      	mov	r8, r0
 800f954:	4689      	mov	r9, r1
 800f956:	bb23      	cbnz	r3, 800f9a2 <_strtod_l+0xb9a>
 800f958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f95c:	9010      	str	r0, [sp, #64]	; 0x40
 800f95e:	9311      	str	r3, [sp, #68]	; 0x44
 800f960:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f964:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f96a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f96c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f970:	1a9b      	subs	r3, r3, r2
 800f972:	9309      	str	r3, [sp, #36]	; 0x24
 800f974:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f978:	eeb0 0a48 	vmov.f32	s0, s16
 800f97c:	eef0 0a68 	vmov.f32	s1, s17
 800f980:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f984:	f002 f940 	bl	8011c08 <__ulp>
 800f988:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f98c:	ec53 2b10 	vmov	r2, r3, d0
 800f990:	f7f0 fe5a 	bl	8000648 <__aeabi_dmul>
 800f994:	ec53 2b18 	vmov	r2, r3, d8
 800f998:	f7f0 fca0 	bl	80002dc <__adddf3>
 800f99c:	4682      	mov	sl, r0
 800f99e:	468b      	mov	fp, r1
 800f9a0:	e78d      	b.n	800f8be <_strtod_l+0xab6>
 800f9a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f9a6:	e7db      	b.n	800f960 <_strtod_l+0xb58>
 800f9a8:	a311      	add	r3, pc, #68	; (adr r3, 800f9f0 <_strtod_l+0xbe8>)
 800f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ae:	f7f1 f8bd 	bl	8000b2c <__aeabi_dcmplt>
 800f9b2:	e7b2      	b.n	800f91a <_strtod_l+0xb12>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f9b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f9ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9bc:	6013      	str	r3, [r2, #0]
 800f9be:	f7ff ba6b 	b.w	800ee98 <_strtod_l+0x90>
 800f9c2:	2a65      	cmp	r2, #101	; 0x65
 800f9c4:	f43f ab5f 	beq.w	800f086 <_strtod_l+0x27e>
 800f9c8:	2a45      	cmp	r2, #69	; 0x45
 800f9ca:	f43f ab5c 	beq.w	800f086 <_strtod_l+0x27e>
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	f7ff bb94 	b.w	800f0fc <_strtod_l+0x2f4>
 800f9d4:	f3af 8000 	nop.w
 800f9d8:	94a03595 	.word	0x94a03595
 800f9dc:	3fdfffff 	.word	0x3fdfffff
 800f9e0:	35afe535 	.word	0x35afe535
 800f9e4:	3fe00000 	.word	0x3fe00000
 800f9e8:	ffc00000 	.word	0xffc00000
 800f9ec:	41dfffff 	.word	0x41dfffff
 800f9f0:	94a03595 	.word	0x94a03595
 800f9f4:	3fcfffff 	.word	0x3fcfffff
 800f9f8:	3ff00000 	.word	0x3ff00000
 800f9fc:	7ff00000 	.word	0x7ff00000
 800fa00:	7fe00000 	.word	0x7fe00000
 800fa04:	7c9fffff 	.word	0x7c9fffff
 800fa08:	3fe00000 	.word	0x3fe00000
 800fa0c:	bff00000 	.word	0xbff00000
 800fa10:	7fefffff 	.word	0x7fefffff

0800fa14 <_strtod_r>:
 800fa14:	4b01      	ldr	r3, [pc, #4]	; (800fa1c <_strtod_r+0x8>)
 800fa16:	f7ff b9f7 	b.w	800ee08 <_strtod_l>
 800fa1a:	bf00      	nop
 800fa1c:	20000094 	.word	0x20000094

0800fa20 <strtod>:
 800fa20:	460a      	mov	r2, r1
 800fa22:	4601      	mov	r1, r0
 800fa24:	4802      	ldr	r0, [pc, #8]	; (800fa30 <strtod+0x10>)
 800fa26:	4b03      	ldr	r3, [pc, #12]	; (800fa34 <strtod+0x14>)
 800fa28:	6800      	ldr	r0, [r0, #0]
 800fa2a:	f7ff b9ed 	b.w	800ee08 <_strtod_l>
 800fa2e:	bf00      	nop
 800fa30:	2000002c 	.word	0x2000002c
 800fa34:	20000094 	.word	0x20000094

0800fa38 <_strtol_l.constprop.0>:
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa3e:	d001      	beq.n	800fa44 <_strtol_l.constprop.0+0xc>
 800fa40:	2b24      	cmp	r3, #36	; 0x24
 800fa42:	d906      	bls.n	800fa52 <_strtol_l.constprop.0+0x1a>
 800fa44:	f7fe fa54 	bl	800def0 <__errno>
 800fa48:	2316      	movs	r3, #22
 800fa4a:	6003      	str	r3, [r0, #0]
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fb38 <_strtol_l.constprop.0+0x100>
 800fa56:	460d      	mov	r5, r1
 800fa58:	462e      	mov	r6, r5
 800fa5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fa62:	f017 0708 	ands.w	r7, r7, #8
 800fa66:	d1f7      	bne.n	800fa58 <_strtol_l.constprop.0+0x20>
 800fa68:	2c2d      	cmp	r4, #45	; 0x2d
 800fa6a:	d132      	bne.n	800fad2 <_strtol_l.constprop.0+0x9a>
 800fa6c:	782c      	ldrb	r4, [r5, #0]
 800fa6e:	2701      	movs	r7, #1
 800fa70:	1cb5      	adds	r5, r6, #2
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d05b      	beq.n	800fb2e <_strtol_l.constprop.0+0xf6>
 800fa76:	2b10      	cmp	r3, #16
 800fa78:	d109      	bne.n	800fa8e <_strtol_l.constprop.0+0x56>
 800fa7a:	2c30      	cmp	r4, #48	; 0x30
 800fa7c:	d107      	bne.n	800fa8e <_strtol_l.constprop.0+0x56>
 800fa7e:	782c      	ldrb	r4, [r5, #0]
 800fa80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fa84:	2c58      	cmp	r4, #88	; 0x58
 800fa86:	d14d      	bne.n	800fb24 <_strtol_l.constprop.0+0xec>
 800fa88:	786c      	ldrb	r4, [r5, #1]
 800fa8a:	2310      	movs	r3, #16
 800fa8c:	3502      	adds	r5, #2
 800fa8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fa92:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa96:	f04f 0c00 	mov.w	ip, #0
 800fa9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fa9e:	4666      	mov	r6, ip
 800faa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800faa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800faa8:	f1be 0f09 	cmp.w	lr, #9
 800faac:	d816      	bhi.n	800fadc <_strtol_l.constprop.0+0xa4>
 800faae:	4674      	mov	r4, lr
 800fab0:	42a3      	cmp	r3, r4
 800fab2:	dd24      	ble.n	800fafe <_strtol_l.constprop.0+0xc6>
 800fab4:	f1bc 0f00 	cmp.w	ip, #0
 800fab8:	db1e      	blt.n	800faf8 <_strtol_l.constprop.0+0xc0>
 800faba:	45b1      	cmp	r9, r6
 800fabc:	d31c      	bcc.n	800faf8 <_strtol_l.constprop.0+0xc0>
 800fabe:	d101      	bne.n	800fac4 <_strtol_l.constprop.0+0x8c>
 800fac0:	45a2      	cmp	sl, r4
 800fac2:	db19      	blt.n	800faf8 <_strtol_l.constprop.0+0xc0>
 800fac4:	fb06 4603 	mla	r6, r6, r3, r4
 800fac8:	f04f 0c01 	mov.w	ip, #1
 800facc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fad0:	e7e8      	b.n	800faa4 <_strtol_l.constprop.0+0x6c>
 800fad2:	2c2b      	cmp	r4, #43	; 0x2b
 800fad4:	bf04      	itt	eq
 800fad6:	782c      	ldrbeq	r4, [r5, #0]
 800fad8:	1cb5      	addeq	r5, r6, #2
 800fada:	e7ca      	b.n	800fa72 <_strtol_l.constprop.0+0x3a>
 800fadc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fae0:	f1be 0f19 	cmp.w	lr, #25
 800fae4:	d801      	bhi.n	800faea <_strtol_l.constprop.0+0xb2>
 800fae6:	3c37      	subs	r4, #55	; 0x37
 800fae8:	e7e2      	b.n	800fab0 <_strtol_l.constprop.0+0x78>
 800faea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800faee:	f1be 0f19 	cmp.w	lr, #25
 800faf2:	d804      	bhi.n	800fafe <_strtol_l.constprop.0+0xc6>
 800faf4:	3c57      	subs	r4, #87	; 0x57
 800faf6:	e7db      	b.n	800fab0 <_strtol_l.constprop.0+0x78>
 800faf8:	f04f 3cff 	mov.w	ip, #4294967295
 800fafc:	e7e6      	b.n	800facc <_strtol_l.constprop.0+0x94>
 800fafe:	f1bc 0f00 	cmp.w	ip, #0
 800fb02:	da05      	bge.n	800fb10 <_strtol_l.constprop.0+0xd8>
 800fb04:	2322      	movs	r3, #34	; 0x22
 800fb06:	6003      	str	r3, [r0, #0]
 800fb08:	4646      	mov	r6, r8
 800fb0a:	b942      	cbnz	r2, 800fb1e <_strtol_l.constprop.0+0xe6>
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	e79e      	b.n	800fa4e <_strtol_l.constprop.0+0x16>
 800fb10:	b107      	cbz	r7, 800fb14 <_strtol_l.constprop.0+0xdc>
 800fb12:	4276      	negs	r6, r6
 800fb14:	2a00      	cmp	r2, #0
 800fb16:	d0f9      	beq.n	800fb0c <_strtol_l.constprop.0+0xd4>
 800fb18:	f1bc 0f00 	cmp.w	ip, #0
 800fb1c:	d000      	beq.n	800fb20 <_strtol_l.constprop.0+0xe8>
 800fb1e:	1e69      	subs	r1, r5, #1
 800fb20:	6011      	str	r1, [r2, #0]
 800fb22:	e7f3      	b.n	800fb0c <_strtol_l.constprop.0+0xd4>
 800fb24:	2430      	movs	r4, #48	; 0x30
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1b1      	bne.n	800fa8e <_strtol_l.constprop.0+0x56>
 800fb2a:	2308      	movs	r3, #8
 800fb2c:	e7af      	b.n	800fa8e <_strtol_l.constprop.0+0x56>
 800fb2e:	2c30      	cmp	r4, #48	; 0x30
 800fb30:	d0a5      	beq.n	800fa7e <_strtol_l.constprop.0+0x46>
 800fb32:	230a      	movs	r3, #10
 800fb34:	e7ab      	b.n	800fa8e <_strtol_l.constprop.0+0x56>
 800fb36:	bf00      	nop
 800fb38:	080141f9 	.word	0x080141f9

0800fb3c <_strtol_r>:
 800fb3c:	f7ff bf7c 	b.w	800fa38 <_strtol_l.constprop.0>

0800fb40 <strtol>:
 800fb40:	4613      	mov	r3, r2
 800fb42:	460a      	mov	r2, r1
 800fb44:	4601      	mov	r1, r0
 800fb46:	4802      	ldr	r0, [pc, #8]	; (800fb50 <strtol+0x10>)
 800fb48:	6800      	ldr	r0, [r0, #0]
 800fb4a:	f7ff bf75 	b.w	800fa38 <_strtol_l.constprop.0>
 800fb4e:	bf00      	nop
 800fb50:	2000002c 	.word	0x2000002c

0800fb54 <__swbuf_r>:
 800fb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb56:	460e      	mov	r6, r1
 800fb58:	4614      	mov	r4, r2
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	b118      	cbz	r0, 800fb66 <__swbuf_r+0x12>
 800fb5e:	6983      	ldr	r3, [r0, #24]
 800fb60:	b90b      	cbnz	r3, 800fb66 <__swbuf_r+0x12>
 800fb62:	f001 f84d 	bl	8010c00 <__sinit>
 800fb66:	4b21      	ldr	r3, [pc, #132]	; (800fbec <__swbuf_r+0x98>)
 800fb68:	429c      	cmp	r4, r3
 800fb6a:	d12b      	bne.n	800fbc4 <__swbuf_r+0x70>
 800fb6c:	686c      	ldr	r4, [r5, #4]
 800fb6e:	69a3      	ldr	r3, [r4, #24]
 800fb70:	60a3      	str	r3, [r4, #8]
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	071a      	lsls	r2, r3, #28
 800fb76:	d52f      	bpl.n	800fbd8 <__swbuf_r+0x84>
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	b36b      	cbz	r3, 800fbd8 <__swbuf_r+0x84>
 800fb7c:	6923      	ldr	r3, [r4, #16]
 800fb7e:	6820      	ldr	r0, [r4, #0]
 800fb80:	1ac0      	subs	r0, r0, r3
 800fb82:	6963      	ldr	r3, [r4, #20]
 800fb84:	b2f6      	uxtb	r6, r6
 800fb86:	4283      	cmp	r3, r0
 800fb88:	4637      	mov	r7, r6
 800fb8a:	dc04      	bgt.n	800fb96 <__swbuf_r+0x42>
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f000 ffa2 	bl	8010ad8 <_fflush_r>
 800fb94:	bb30      	cbnz	r0, 800fbe4 <__swbuf_r+0x90>
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	3b01      	subs	r3, #1
 800fb9a:	60a3      	str	r3, [r4, #8]
 800fb9c:	6823      	ldr	r3, [r4, #0]
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	6022      	str	r2, [r4, #0]
 800fba2:	701e      	strb	r6, [r3, #0]
 800fba4:	6963      	ldr	r3, [r4, #20]
 800fba6:	3001      	adds	r0, #1
 800fba8:	4283      	cmp	r3, r0
 800fbaa:	d004      	beq.n	800fbb6 <__swbuf_r+0x62>
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	07db      	lsls	r3, r3, #31
 800fbb0:	d506      	bpl.n	800fbc0 <__swbuf_r+0x6c>
 800fbb2:	2e0a      	cmp	r6, #10
 800fbb4:	d104      	bne.n	800fbc0 <__swbuf_r+0x6c>
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	4628      	mov	r0, r5
 800fbba:	f000 ff8d 	bl	8010ad8 <_fflush_r>
 800fbbe:	b988      	cbnz	r0, 800fbe4 <__swbuf_r+0x90>
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc4:	4b0a      	ldr	r3, [pc, #40]	; (800fbf0 <__swbuf_r+0x9c>)
 800fbc6:	429c      	cmp	r4, r3
 800fbc8:	d101      	bne.n	800fbce <__swbuf_r+0x7a>
 800fbca:	68ac      	ldr	r4, [r5, #8]
 800fbcc:	e7cf      	b.n	800fb6e <__swbuf_r+0x1a>
 800fbce:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <__swbuf_r+0xa0>)
 800fbd0:	429c      	cmp	r4, r3
 800fbd2:	bf08      	it	eq
 800fbd4:	68ec      	ldreq	r4, [r5, #12]
 800fbd6:	e7ca      	b.n	800fb6e <__swbuf_r+0x1a>
 800fbd8:	4621      	mov	r1, r4
 800fbda:	4628      	mov	r0, r5
 800fbdc:	f000 f80c 	bl	800fbf8 <__swsetup_r>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d0cb      	beq.n	800fb7c <__swbuf_r+0x28>
 800fbe4:	f04f 37ff 	mov.w	r7, #4294967295
 800fbe8:	e7ea      	b.n	800fbc0 <__swbuf_r+0x6c>
 800fbea:	bf00      	nop
 800fbec:	080143ac 	.word	0x080143ac
 800fbf0:	080143cc 	.word	0x080143cc
 800fbf4:	0801438c 	.word	0x0801438c

0800fbf8 <__swsetup_r>:
 800fbf8:	4b32      	ldr	r3, [pc, #200]	; (800fcc4 <__swsetup_r+0xcc>)
 800fbfa:	b570      	push	{r4, r5, r6, lr}
 800fbfc:	681d      	ldr	r5, [r3, #0]
 800fbfe:	4606      	mov	r6, r0
 800fc00:	460c      	mov	r4, r1
 800fc02:	b125      	cbz	r5, 800fc0e <__swsetup_r+0x16>
 800fc04:	69ab      	ldr	r3, [r5, #24]
 800fc06:	b913      	cbnz	r3, 800fc0e <__swsetup_r+0x16>
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f000 fff9 	bl	8010c00 <__sinit>
 800fc0e:	4b2e      	ldr	r3, [pc, #184]	; (800fcc8 <__swsetup_r+0xd0>)
 800fc10:	429c      	cmp	r4, r3
 800fc12:	d10f      	bne.n	800fc34 <__swsetup_r+0x3c>
 800fc14:	686c      	ldr	r4, [r5, #4]
 800fc16:	89a3      	ldrh	r3, [r4, #12]
 800fc18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc1c:	0719      	lsls	r1, r3, #28
 800fc1e:	d42c      	bmi.n	800fc7a <__swsetup_r+0x82>
 800fc20:	06dd      	lsls	r5, r3, #27
 800fc22:	d411      	bmi.n	800fc48 <__swsetup_r+0x50>
 800fc24:	2309      	movs	r3, #9
 800fc26:	6033      	str	r3, [r6, #0]
 800fc28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc2c:	81a3      	strh	r3, [r4, #12]
 800fc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc32:	e03e      	b.n	800fcb2 <__swsetup_r+0xba>
 800fc34:	4b25      	ldr	r3, [pc, #148]	; (800fccc <__swsetup_r+0xd4>)
 800fc36:	429c      	cmp	r4, r3
 800fc38:	d101      	bne.n	800fc3e <__swsetup_r+0x46>
 800fc3a:	68ac      	ldr	r4, [r5, #8]
 800fc3c:	e7eb      	b.n	800fc16 <__swsetup_r+0x1e>
 800fc3e:	4b24      	ldr	r3, [pc, #144]	; (800fcd0 <__swsetup_r+0xd8>)
 800fc40:	429c      	cmp	r4, r3
 800fc42:	bf08      	it	eq
 800fc44:	68ec      	ldreq	r4, [r5, #12]
 800fc46:	e7e6      	b.n	800fc16 <__swsetup_r+0x1e>
 800fc48:	0758      	lsls	r0, r3, #29
 800fc4a:	d512      	bpl.n	800fc72 <__swsetup_r+0x7a>
 800fc4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc4e:	b141      	cbz	r1, 800fc62 <__swsetup_r+0x6a>
 800fc50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc54:	4299      	cmp	r1, r3
 800fc56:	d002      	beq.n	800fc5e <__swsetup_r+0x66>
 800fc58:	4630      	mov	r0, r6
 800fc5a:	f002 f93b 	bl	8011ed4 <_free_r>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	6363      	str	r3, [r4, #52]	; 0x34
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	6063      	str	r3, [r4, #4]
 800fc6e:	6923      	ldr	r3, [r4, #16]
 800fc70:	6023      	str	r3, [r4, #0]
 800fc72:	89a3      	ldrh	r3, [r4, #12]
 800fc74:	f043 0308 	orr.w	r3, r3, #8
 800fc78:	81a3      	strh	r3, [r4, #12]
 800fc7a:	6923      	ldr	r3, [r4, #16]
 800fc7c:	b94b      	cbnz	r3, 800fc92 <__swsetup_r+0x9a>
 800fc7e:	89a3      	ldrh	r3, [r4, #12]
 800fc80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc88:	d003      	beq.n	800fc92 <__swsetup_r+0x9a>
 800fc8a:	4621      	mov	r1, r4
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	f001 fbef 	bl	8011470 <__smakebuf_r>
 800fc92:	89a0      	ldrh	r0, [r4, #12]
 800fc94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc98:	f010 0301 	ands.w	r3, r0, #1
 800fc9c:	d00a      	beq.n	800fcb4 <__swsetup_r+0xbc>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	60a3      	str	r3, [r4, #8]
 800fca2:	6963      	ldr	r3, [r4, #20]
 800fca4:	425b      	negs	r3, r3
 800fca6:	61a3      	str	r3, [r4, #24]
 800fca8:	6923      	ldr	r3, [r4, #16]
 800fcaa:	b943      	cbnz	r3, 800fcbe <__swsetup_r+0xc6>
 800fcac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fcb0:	d1ba      	bne.n	800fc28 <__swsetup_r+0x30>
 800fcb2:	bd70      	pop	{r4, r5, r6, pc}
 800fcb4:	0781      	lsls	r1, r0, #30
 800fcb6:	bf58      	it	pl
 800fcb8:	6963      	ldrpl	r3, [r4, #20]
 800fcba:	60a3      	str	r3, [r4, #8]
 800fcbc:	e7f4      	b.n	800fca8 <__swsetup_r+0xb0>
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	e7f7      	b.n	800fcb2 <__swsetup_r+0xba>
 800fcc2:	bf00      	nop
 800fcc4:	2000002c 	.word	0x2000002c
 800fcc8:	080143ac 	.word	0x080143ac
 800fccc:	080143cc 	.word	0x080143cc
 800fcd0:	0801438c 	.word	0x0801438c

0800fcd4 <quorem>:
 800fcd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd8:	6903      	ldr	r3, [r0, #16]
 800fcda:	690c      	ldr	r4, [r1, #16]
 800fcdc:	42a3      	cmp	r3, r4
 800fcde:	4607      	mov	r7, r0
 800fce0:	f2c0 8081 	blt.w	800fde6 <quorem+0x112>
 800fce4:	3c01      	subs	r4, #1
 800fce6:	f101 0814 	add.w	r8, r1, #20
 800fcea:	f100 0514 	add.w	r5, r0, #20
 800fcee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcf2:	9301      	str	r3, [sp, #4]
 800fcf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fcf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd08:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd0c:	d331      	bcc.n	800fd72 <quorem+0x9e>
 800fd0e:	f04f 0e00 	mov.w	lr, #0
 800fd12:	4640      	mov	r0, r8
 800fd14:	46ac      	mov	ip, r5
 800fd16:	46f2      	mov	sl, lr
 800fd18:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd1c:	b293      	uxth	r3, r2
 800fd1e:	fb06 e303 	mla	r3, r6, r3, lr
 800fd22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	ebaa 0303 	sub.w	r3, sl, r3
 800fd2c:	f8dc a000 	ldr.w	sl, [ip]
 800fd30:	0c12      	lsrs	r2, r2, #16
 800fd32:	fa13 f38a 	uxtah	r3, r3, sl
 800fd36:	fb06 e202 	mla	r2, r6, r2, lr
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	9b00      	ldr	r3, [sp, #0]
 800fd3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd42:	b292      	uxth	r2, r2
 800fd44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fd48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd4c:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd50:	4581      	cmp	r9, r0
 800fd52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd56:	f84c 3b04 	str.w	r3, [ip], #4
 800fd5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd5e:	d2db      	bcs.n	800fd18 <quorem+0x44>
 800fd60:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd64:	b92b      	cbnz	r3, 800fd72 <quorem+0x9e>
 800fd66:	9b01      	ldr	r3, [sp, #4]
 800fd68:	3b04      	subs	r3, #4
 800fd6a:	429d      	cmp	r5, r3
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	d32e      	bcc.n	800fdce <quorem+0xfa>
 800fd70:	613c      	str	r4, [r7, #16]
 800fd72:	4638      	mov	r0, r7
 800fd74:	f001 fea2 	bl	8011abc <__mcmp>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	db24      	blt.n	800fdc6 <quorem+0xf2>
 800fd7c:	3601      	adds	r6, #1
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f04f 0c00 	mov.w	ip, #0
 800fd84:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd88:	f8d0 e000 	ldr.w	lr, [r0]
 800fd8c:	b293      	uxth	r3, r2
 800fd8e:	ebac 0303 	sub.w	r3, ip, r3
 800fd92:	0c12      	lsrs	r2, r2, #16
 800fd94:	fa13 f38e 	uxtah	r3, r3, lr
 800fd98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fd9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fda6:	45c1      	cmp	r9, r8
 800fda8:	f840 3b04 	str.w	r3, [r0], #4
 800fdac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fdb0:	d2e8      	bcs.n	800fd84 <quorem+0xb0>
 800fdb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdba:	b922      	cbnz	r2, 800fdc6 <quorem+0xf2>
 800fdbc:	3b04      	subs	r3, #4
 800fdbe:	429d      	cmp	r5, r3
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	d30a      	bcc.n	800fdda <quorem+0x106>
 800fdc4:	613c      	str	r4, [r7, #16]
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	b003      	add	sp, #12
 800fdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdce:	6812      	ldr	r2, [r2, #0]
 800fdd0:	3b04      	subs	r3, #4
 800fdd2:	2a00      	cmp	r2, #0
 800fdd4:	d1cc      	bne.n	800fd70 <quorem+0x9c>
 800fdd6:	3c01      	subs	r4, #1
 800fdd8:	e7c7      	b.n	800fd6a <quorem+0x96>
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	3b04      	subs	r3, #4
 800fdde:	2a00      	cmp	r2, #0
 800fde0:	d1f0      	bne.n	800fdc4 <quorem+0xf0>
 800fde2:	3c01      	subs	r4, #1
 800fde4:	e7eb      	b.n	800fdbe <quorem+0xea>
 800fde6:	2000      	movs	r0, #0
 800fde8:	e7ee      	b.n	800fdc8 <quorem+0xf4>
 800fdea:	0000      	movs	r0, r0
 800fdec:	0000      	movs	r0, r0
	...

0800fdf0 <_dtoa_r>:
 800fdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf4:	ed2d 8b04 	vpush	{d8-d9}
 800fdf8:	ec57 6b10 	vmov	r6, r7, d0
 800fdfc:	b093      	sub	sp, #76	; 0x4c
 800fdfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe04:	9106      	str	r1, [sp, #24]
 800fe06:	ee10 aa10 	vmov	sl, s0
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe0e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe10:	46bb      	mov	fp, r7
 800fe12:	b975      	cbnz	r5, 800fe32 <_dtoa_r+0x42>
 800fe14:	2010      	movs	r0, #16
 800fe16:	f001 fb6b 	bl	80114f0 <malloc>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	6260      	str	r0, [r4, #36]	; 0x24
 800fe1e:	b920      	cbnz	r0, 800fe2a <_dtoa_r+0x3a>
 800fe20:	4ba7      	ldr	r3, [pc, #668]	; (80100c0 <_dtoa_r+0x2d0>)
 800fe22:	21ea      	movs	r1, #234	; 0xea
 800fe24:	48a7      	ldr	r0, [pc, #668]	; (80100c4 <_dtoa_r+0x2d4>)
 800fe26:	f002 fc79 	bl	801271c <__assert_func>
 800fe2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe2e:	6005      	str	r5, [r0, #0]
 800fe30:	60c5      	str	r5, [r0, #12]
 800fe32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe34:	6819      	ldr	r1, [r3, #0]
 800fe36:	b151      	cbz	r1, 800fe4e <_dtoa_r+0x5e>
 800fe38:	685a      	ldr	r2, [r3, #4]
 800fe3a:	604a      	str	r2, [r1, #4]
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	4093      	lsls	r3, r2
 800fe40:	608b      	str	r3, [r1, #8]
 800fe42:	4620      	mov	r0, r4
 800fe44:	f001 fbae 	bl	80115a4 <_Bfree>
 800fe48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	1e3b      	subs	r3, r7, #0
 800fe50:	bfaa      	itet	ge
 800fe52:	2300      	movge	r3, #0
 800fe54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fe58:	f8c8 3000 	strge.w	r3, [r8]
 800fe5c:	4b9a      	ldr	r3, [pc, #616]	; (80100c8 <_dtoa_r+0x2d8>)
 800fe5e:	bfbc      	itt	lt
 800fe60:	2201      	movlt	r2, #1
 800fe62:	f8c8 2000 	strlt.w	r2, [r8]
 800fe66:	ea33 030b 	bics.w	r3, r3, fp
 800fe6a:	d11b      	bne.n	800fea4 <_dtoa_r+0xb4>
 800fe6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe72:	6013      	str	r3, [r2, #0]
 800fe74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe78:	4333      	orrs	r3, r6
 800fe7a:	f000 8592 	beq.w	80109a2 <_dtoa_r+0xbb2>
 800fe7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe80:	b963      	cbnz	r3, 800fe9c <_dtoa_r+0xac>
 800fe82:	4b92      	ldr	r3, [pc, #584]	; (80100cc <_dtoa_r+0x2dc>)
 800fe84:	e022      	b.n	800fecc <_dtoa_r+0xdc>
 800fe86:	4b92      	ldr	r3, [pc, #584]	; (80100d0 <_dtoa_r+0x2e0>)
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	3308      	adds	r3, #8
 800fe8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	9801      	ldr	r0, [sp, #4]
 800fe92:	b013      	add	sp, #76	; 0x4c
 800fe94:	ecbd 8b04 	vpop	{d8-d9}
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9c:	4b8b      	ldr	r3, [pc, #556]	; (80100cc <_dtoa_r+0x2dc>)
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	3303      	adds	r3, #3
 800fea2:	e7f3      	b.n	800fe8c <_dtoa_r+0x9c>
 800fea4:	2200      	movs	r2, #0
 800fea6:	2300      	movs	r3, #0
 800fea8:	4650      	mov	r0, sl
 800feaa:	4659      	mov	r1, fp
 800feac:	f7f0 fe34 	bl	8000b18 <__aeabi_dcmpeq>
 800feb0:	ec4b ab19 	vmov	d9, sl, fp
 800feb4:	4680      	mov	r8, r0
 800feb6:	b158      	cbz	r0, 800fed0 <_dtoa_r+0xe0>
 800feb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800feba:	2301      	movs	r3, #1
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f000 856b 	beq.w	801099c <_dtoa_r+0xbac>
 800fec6:	4883      	ldr	r0, [pc, #524]	; (80100d4 <_dtoa_r+0x2e4>)
 800fec8:	6018      	str	r0, [r3, #0]
 800feca:	1e43      	subs	r3, r0, #1
 800fecc:	9301      	str	r3, [sp, #4]
 800fece:	e7df      	b.n	800fe90 <_dtoa_r+0xa0>
 800fed0:	ec4b ab10 	vmov	d0, sl, fp
 800fed4:	aa10      	add	r2, sp, #64	; 0x40
 800fed6:	a911      	add	r1, sp, #68	; 0x44
 800fed8:	4620      	mov	r0, r4
 800feda:	f001 ff11 	bl	8011d00 <__d2b>
 800fede:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fee2:	ee08 0a10 	vmov	s16, r0
 800fee6:	2d00      	cmp	r5, #0
 800fee8:	f000 8084 	beq.w	800fff4 <_dtoa_r+0x204>
 800feec:	ee19 3a90 	vmov	r3, s19
 800fef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fef4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fef8:	4656      	mov	r6, sl
 800fefa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fefe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff06:	4b74      	ldr	r3, [pc, #464]	; (80100d8 <_dtoa_r+0x2e8>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	f7f0 f9e3 	bl	80002d8 <__aeabi_dsub>
 800ff12:	a365      	add	r3, pc, #404	; (adr r3, 80100a8 <_dtoa_r+0x2b8>)
 800ff14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff18:	f7f0 fb96 	bl	8000648 <__aeabi_dmul>
 800ff1c:	a364      	add	r3, pc, #400	; (adr r3, 80100b0 <_dtoa_r+0x2c0>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	f7f0 f9db 	bl	80002dc <__adddf3>
 800ff26:	4606      	mov	r6, r0
 800ff28:	4628      	mov	r0, r5
 800ff2a:	460f      	mov	r7, r1
 800ff2c:	f7f0 fb22 	bl	8000574 <__aeabi_i2d>
 800ff30:	a361      	add	r3, pc, #388	; (adr r3, 80100b8 <_dtoa_r+0x2c8>)
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	f7f0 fb87 	bl	8000648 <__aeabi_dmul>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4630      	mov	r0, r6
 800ff40:	4639      	mov	r1, r7
 800ff42:	f7f0 f9cb 	bl	80002dc <__adddf3>
 800ff46:	4606      	mov	r6, r0
 800ff48:	460f      	mov	r7, r1
 800ff4a:	f7f0 fe2d 	bl	8000ba8 <__aeabi_d2iz>
 800ff4e:	2200      	movs	r2, #0
 800ff50:	9000      	str	r0, [sp, #0]
 800ff52:	2300      	movs	r3, #0
 800ff54:	4630      	mov	r0, r6
 800ff56:	4639      	mov	r1, r7
 800ff58:	f7f0 fde8 	bl	8000b2c <__aeabi_dcmplt>
 800ff5c:	b150      	cbz	r0, 800ff74 <_dtoa_r+0x184>
 800ff5e:	9800      	ldr	r0, [sp, #0]
 800ff60:	f7f0 fb08 	bl	8000574 <__aeabi_i2d>
 800ff64:	4632      	mov	r2, r6
 800ff66:	463b      	mov	r3, r7
 800ff68:	f7f0 fdd6 	bl	8000b18 <__aeabi_dcmpeq>
 800ff6c:	b910      	cbnz	r0, 800ff74 <_dtoa_r+0x184>
 800ff6e:	9b00      	ldr	r3, [sp, #0]
 800ff70:	3b01      	subs	r3, #1
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	9b00      	ldr	r3, [sp, #0]
 800ff76:	2b16      	cmp	r3, #22
 800ff78:	d85a      	bhi.n	8010030 <_dtoa_r+0x240>
 800ff7a:	9a00      	ldr	r2, [sp, #0]
 800ff7c:	4b57      	ldr	r3, [pc, #348]	; (80100dc <_dtoa_r+0x2ec>)
 800ff7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	ec51 0b19 	vmov	r0, r1, d9
 800ff8a:	f7f0 fdcf 	bl	8000b2c <__aeabi_dcmplt>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d050      	beq.n	8010034 <_dtoa_r+0x244>
 800ff92:	9b00      	ldr	r3, [sp, #0]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff9e:	1b5d      	subs	r5, r3, r5
 800ffa0:	1e6b      	subs	r3, r5, #1
 800ffa2:	9305      	str	r3, [sp, #20]
 800ffa4:	bf45      	ittet	mi
 800ffa6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ffaa:	9304      	strmi	r3, [sp, #16]
 800ffac:	2300      	movpl	r3, #0
 800ffae:	2300      	movmi	r3, #0
 800ffb0:	bf4c      	ite	mi
 800ffb2:	9305      	strmi	r3, [sp, #20]
 800ffb4:	9304      	strpl	r3, [sp, #16]
 800ffb6:	9b00      	ldr	r3, [sp, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	db3d      	blt.n	8010038 <_dtoa_r+0x248>
 800ffbc:	9b05      	ldr	r3, [sp, #20]
 800ffbe:	9a00      	ldr	r2, [sp, #0]
 800ffc0:	920a      	str	r2, [sp, #40]	; 0x28
 800ffc2:	4413      	add	r3, r2
 800ffc4:	9305      	str	r3, [sp, #20]
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	9307      	str	r3, [sp, #28]
 800ffca:	9b06      	ldr	r3, [sp, #24]
 800ffcc:	2b09      	cmp	r3, #9
 800ffce:	f200 8089 	bhi.w	80100e4 <_dtoa_r+0x2f4>
 800ffd2:	2b05      	cmp	r3, #5
 800ffd4:	bfc4      	itt	gt
 800ffd6:	3b04      	subgt	r3, #4
 800ffd8:	9306      	strgt	r3, [sp, #24]
 800ffda:	9b06      	ldr	r3, [sp, #24]
 800ffdc:	f1a3 0302 	sub.w	r3, r3, #2
 800ffe0:	bfcc      	ite	gt
 800ffe2:	2500      	movgt	r5, #0
 800ffe4:	2501      	movle	r5, #1
 800ffe6:	2b03      	cmp	r3, #3
 800ffe8:	f200 8087 	bhi.w	80100fa <_dtoa_r+0x30a>
 800ffec:	e8df f003 	tbb	[pc, r3]
 800fff0:	59383a2d 	.word	0x59383a2d
 800fff4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fff8:	441d      	add	r5, r3
 800fffa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fffe:	2b20      	cmp	r3, #32
 8010000:	bfc1      	itttt	gt
 8010002:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010006:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801000a:	fa0b f303 	lslgt.w	r3, fp, r3
 801000e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010012:	bfda      	itte	le
 8010014:	f1c3 0320 	rsble	r3, r3, #32
 8010018:	fa06 f003 	lslle.w	r0, r6, r3
 801001c:	4318      	orrgt	r0, r3
 801001e:	f7f0 fa99 	bl	8000554 <__aeabi_ui2d>
 8010022:	2301      	movs	r3, #1
 8010024:	4606      	mov	r6, r0
 8010026:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801002a:	3d01      	subs	r5, #1
 801002c:	930e      	str	r3, [sp, #56]	; 0x38
 801002e:	e76a      	b.n	800ff06 <_dtoa_r+0x116>
 8010030:	2301      	movs	r3, #1
 8010032:	e7b2      	b.n	800ff9a <_dtoa_r+0x1aa>
 8010034:	900b      	str	r0, [sp, #44]	; 0x2c
 8010036:	e7b1      	b.n	800ff9c <_dtoa_r+0x1ac>
 8010038:	9b04      	ldr	r3, [sp, #16]
 801003a:	9a00      	ldr	r2, [sp, #0]
 801003c:	1a9b      	subs	r3, r3, r2
 801003e:	9304      	str	r3, [sp, #16]
 8010040:	4253      	negs	r3, r2
 8010042:	9307      	str	r3, [sp, #28]
 8010044:	2300      	movs	r3, #0
 8010046:	930a      	str	r3, [sp, #40]	; 0x28
 8010048:	e7bf      	b.n	800ffca <_dtoa_r+0x1da>
 801004a:	2300      	movs	r3, #0
 801004c:	9308      	str	r3, [sp, #32]
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	2b00      	cmp	r3, #0
 8010052:	dc55      	bgt.n	8010100 <_dtoa_r+0x310>
 8010054:	2301      	movs	r3, #1
 8010056:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801005a:	461a      	mov	r2, r3
 801005c:	9209      	str	r2, [sp, #36]	; 0x24
 801005e:	e00c      	b.n	801007a <_dtoa_r+0x28a>
 8010060:	2301      	movs	r3, #1
 8010062:	e7f3      	b.n	801004c <_dtoa_r+0x25c>
 8010064:	2300      	movs	r3, #0
 8010066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010068:	9308      	str	r3, [sp, #32]
 801006a:	9b00      	ldr	r3, [sp, #0]
 801006c:	4413      	add	r3, r2
 801006e:	9302      	str	r3, [sp, #8]
 8010070:	3301      	adds	r3, #1
 8010072:	2b01      	cmp	r3, #1
 8010074:	9303      	str	r3, [sp, #12]
 8010076:	bfb8      	it	lt
 8010078:	2301      	movlt	r3, #1
 801007a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801007c:	2200      	movs	r2, #0
 801007e:	6042      	str	r2, [r0, #4]
 8010080:	2204      	movs	r2, #4
 8010082:	f102 0614 	add.w	r6, r2, #20
 8010086:	429e      	cmp	r6, r3
 8010088:	6841      	ldr	r1, [r0, #4]
 801008a:	d93d      	bls.n	8010108 <_dtoa_r+0x318>
 801008c:	4620      	mov	r0, r4
 801008e:	f001 fa49 	bl	8011524 <_Balloc>
 8010092:	9001      	str	r0, [sp, #4]
 8010094:	2800      	cmp	r0, #0
 8010096:	d13b      	bne.n	8010110 <_dtoa_r+0x320>
 8010098:	4b11      	ldr	r3, [pc, #68]	; (80100e0 <_dtoa_r+0x2f0>)
 801009a:	4602      	mov	r2, r0
 801009c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80100a0:	e6c0      	b.n	800fe24 <_dtoa_r+0x34>
 80100a2:	2301      	movs	r3, #1
 80100a4:	e7df      	b.n	8010066 <_dtoa_r+0x276>
 80100a6:	bf00      	nop
 80100a8:	636f4361 	.word	0x636f4361
 80100ac:	3fd287a7 	.word	0x3fd287a7
 80100b0:	8b60c8b3 	.word	0x8b60c8b3
 80100b4:	3fc68a28 	.word	0x3fc68a28
 80100b8:	509f79fb 	.word	0x509f79fb
 80100bc:	3fd34413 	.word	0x3fd34413
 80100c0:	08014306 	.word	0x08014306
 80100c4:	0801431d 	.word	0x0801431d
 80100c8:	7ff00000 	.word	0x7ff00000
 80100cc:	08014302 	.word	0x08014302
 80100d0:	080142f9 	.word	0x080142f9
 80100d4:	08014179 	.word	0x08014179
 80100d8:	3ff80000 	.word	0x3ff80000
 80100dc:	080144f0 	.word	0x080144f0
 80100e0:	08014378 	.word	0x08014378
 80100e4:	2501      	movs	r5, #1
 80100e6:	2300      	movs	r3, #0
 80100e8:	9306      	str	r3, [sp, #24]
 80100ea:	9508      	str	r5, [sp, #32]
 80100ec:	f04f 33ff 	mov.w	r3, #4294967295
 80100f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80100f4:	2200      	movs	r2, #0
 80100f6:	2312      	movs	r3, #18
 80100f8:	e7b0      	b.n	801005c <_dtoa_r+0x26c>
 80100fa:	2301      	movs	r3, #1
 80100fc:	9308      	str	r3, [sp, #32]
 80100fe:	e7f5      	b.n	80100ec <_dtoa_r+0x2fc>
 8010100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010102:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010106:	e7b8      	b.n	801007a <_dtoa_r+0x28a>
 8010108:	3101      	adds	r1, #1
 801010a:	6041      	str	r1, [r0, #4]
 801010c:	0052      	lsls	r2, r2, #1
 801010e:	e7b8      	b.n	8010082 <_dtoa_r+0x292>
 8010110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010112:	9a01      	ldr	r2, [sp, #4]
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	9b03      	ldr	r3, [sp, #12]
 8010118:	2b0e      	cmp	r3, #14
 801011a:	f200 809d 	bhi.w	8010258 <_dtoa_r+0x468>
 801011e:	2d00      	cmp	r5, #0
 8010120:	f000 809a 	beq.w	8010258 <_dtoa_r+0x468>
 8010124:	9b00      	ldr	r3, [sp, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	dd32      	ble.n	8010190 <_dtoa_r+0x3a0>
 801012a:	4ab7      	ldr	r2, [pc, #732]	; (8010408 <_dtoa_r+0x618>)
 801012c:	f003 030f 	and.w	r3, r3, #15
 8010130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010138:	9b00      	ldr	r3, [sp, #0]
 801013a:	05d8      	lsls	r0, r3, #23
 801013c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010140:	d516      	bpl.n	8010170 <_dtoa_r+0x380>
 8010142:	4bb2      	ldr	r3, [pc, #712]	; (801040c <_dtoa_r+0x61c>)
 8010144:	ec51 0b19 	vmov	r0, r1, d9
 8010148:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801014c:	f7f0 fba6 	bl	800089c <__aeabi_ddiv>
 8010150:	f007 070f 	and.w	r7, r7, #15
 8010154:	4682      	mov	sl, r0
 8010156:	468b      	mov	fp, r1
 8010158:	2503      	movs	r5, #3
 801015a:	4eac      	ldr	r6, [pc, #688]	; (801040c <_dtoa_r+0x61c>)
 801015c:	b957      	cbnz	r7, 8010174 <_dtoa_r+0x384>
 801015e:	4642      	mov	r2, r8
 8010160:	464b      	mov	r3, r9
 8010162:	4650      	mov	r0, sl
 8010164:	4659      	mov	r1, fp
 8010166:	f7f0 fb99 	bl	800089c <__aeabi_ddiv>
 801016a:	4682      	mov	sl, r0
 801016c:	468b      	mov	fp, r1
 801016e:	e028      	b.n	80101c2 <_dtoa_r+0x3d2>
 8010170:	2502      	movs	r5, #2
 8010172:	e7f2      	b.n	801015a <_dtoa_r+0x36a>
 8010174:	07f9      	lsls	r1, r7, #31
 8010176:	d508      	bpl.n	801018a <_dtoa_r+0x39a>
 8010178:	4640      	mov	r0, r8
 801017a:	4649      	mov	r1, r9
 801017c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010180:	f7f0 fa62 	bl	8000648 <__aeabi_dmul>
 8010184:	3501      	adds	r5, #1
 8010186:	4680      	mov	r8, r0
 8010188:	4689      	mov	r9, r1
 801018a:	107f      	asrs	r7, r7, #1
 801018c:	3608      	adds	r6, #8
 801018e:	e7e5      	b.n	801015c <_dtoa_r+0x36c>
 8010190:	f000 809b 	beq.w	80102ca <_dtoa_r+0x4da>
 8010194:	9b00      	ldr	r3, [sp, #0]
 8010196:	4f9d      	ldr	r7, [pc, #628]	; (801040c <_dtoa_r+0x61c>)
 8010198:	425e      	negs	r6, r3
 801019a:	4b9b      	ldr	r3, [pc, #620]	; (8010408 <_dtoa_r+0x618>)
 801019c:	f006 020f 	and.w	r2, r6, #15
 80101a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a8:	ec51 0b19 	vmov	r0, r1, d9
 80101ac:	f7f0 fa4c 	bl	8000648 <__aeabi_dmul>
 80101b0:	1136      	asrs	r6, r6, #4
 80101b2:	4682      	mov	sl, r0
 80101b4:	468b      	mov	fp, r1
 80101b6:	2300      	movs	r3, #0
 80101b8:	2502      	movs	r5, #2
 80101ba:	2e00      	cmp	r6, #0
 80101bc:	d17a      	bne.n	80102b4 <_dtoa_r+0x4c4>
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1d3      	bne.n	801016a <_dtoa_r+0x37a>
 80101c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f000 8082 	beq.w	80102ce <_dtoa_r+0x4de>
 80101ca:	4b91      	ldr	r3, [pc, #580]	; (8010410 <_dtoa_r+0x620>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	4650      	mov	r0, sl
 80101d0:	4659      	mov	r1, fp
 80101d2:	f7f0 fcab 	bl	8000b2c <__aeabi_dcmplt>
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d079      	beq.n	80102ce <_dtoa_r+0x4de>
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d076      	beq.n	80102ce <_dtoa_r+0x4de>
 80101e0:	9b02      	ldr	r3, [sp, #8]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	dd36      	ble.n	8010254 <_dtoa_r+0x464>
 80101e6:	9b00      	ldr	r3, [sp, #0]
 80101e8:	4650      	mov	r0, sl
 80101ea:	4659      	mov	r1, fp
 80101ec:	1e5f      	subs	r7, r3, #1
 80101ee:	2200      	movs	r2, #0
 80101f0:	4b88      	ldr	r3, [pc, #544]	; (8010414 <_dtoa_r+0x624>)
 80101f2:	f7f0 fa29 	bl	8000648 <__aeabi_dmul>
 80101f6:	9e02      	ldr	r6, [sp, #8]
 80101f8:	4682      	mov	sl, r0
 80101fa:	468b      	mov	fp, r1
 80101fc:	3501      	adds	r5, #1
 80101fe:	4628      	mov	r0, r5
 8010200:	f7f0 f9b8 	bl	8000574 <__aeabi_i2d>
 8010204:	4652      	mov	r2, sl
 8010206:	465b      	mov	r3, fp
 8010208:	f7f0 fa1e 	bl	8000648 <__aeabi_dmul>
 801020c:	4b82      	ldr	r3, [pc, #520]	; (8010418 <_dtoa_r+0x628>)
 801020e:	2200      	movs	r2, #0
 8010210:	f7f0 f864 	bl	80002dc <__adddf3>
 8010214:	46d0      	mov	r8, sl
 8010216:	46d9      	mov	r9, fp
 8010218:	4682      	mov	sl, r0
 801021a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801021e:	2e00      	cmp	r6, #0
 8010220:	d158      	bne.n	80102d4 <_dtoa_r+0x4e4>
 8010222:	4b7e      	ldr	r3, [pc, #504]	; (801041c <_dtoa_r+0x62c>)
 8010224:	2200      	movs	r2, #0
 8010226:	4640      	mov	r0, r8
 8010228:	4649      	mov	r1, r9
 801022a:	f7f0 f855 	bl	80002d8 <__aeabi_dsub>
 801022e:	4652      	mov	r2, sl
 8010230:	465b      	mov	r3, fp
 8010232:	4680      	mov	r8, r0
 8010234:	4689      	mov	r9, r1
 8010236:	f7f0 fc97 	bl	8000b68 <__aeabi_dcmpgt>
 801023a:	2800      	cmp	r0, #0
 801023c:	f040 8295 	bne.w	801076a <_dtoa_r+0x97a>
 8010240:	4652      	mov	r2, sl
 8010242:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	f7f0 fc6f 	bl	8000b2c <__aeabi_dcmplt>
 801024e:	2800      	cmp	r0, #0
 8010250:	f040 8289 	bne.w	8010766 <_dtoa_r+0x976>
 8010254:	ec5b ab19 	vmov	sl, fp, d9
 8010258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801025a:	2b00      	cmp	r3, #0
 801025c:	f2c0 8148 	blt.w	80104f0 <_dtoa_r+0x700>
 8010260:	9a00      	ldr	r2, [sp, #0]
 8010262:	2a0e      	cmp	r2, #14
 8010264:	f300 8144 	bgt.w	80104f0 <_dtoa_r+0x700>
 8010268:	4b67      	ldr	r3, [pc, #412]	; (8010408 <_dtoa_r+0x618>)
 801026a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801026e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010274:	2b00      	cmp	r3, #0
 8010276:	f280 80d5 	bge.w	8010424 <_dtoa_r+0x634>
 801027a:	9b03      	ldr	r3, [sp, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	f300 80d1 	bgt.w	8010424 <_dtoa_r+0x634>
 8010282:	f040 826f 	bne.w	8010764 <_dtoa_r+0x974>
 8010286:	4b65      	ldr	r3, [pc, #404]	; (801041c <_dtoa_r+0x62c>)
 8010288:	2200      	movs	r2, #0
 801028a:	4640      	mov	r0, r8
 801028c:	4649      	mov	r1, r9
 801028e:	f7f0 f9db 	bl	8000648 <__aeabi_dmul>
 8010292:	4652      	mov	r2, sl
 8010294:	465b      	mov	r3, fp
 8010296:	f7f0 fc5d 	bl	8000b54 <__aeabi_dcmpge>
 801029a:	9e03      	ldr	r6, [sp, #12]
 801029c:	4637      	mov	r7, r6
 801029e:	2800      	cmp	r0, #0
 80102a0:	f040 8245 	bne.w	801072e <_dtoa_r+0x93e>
 80102a4:	9d01      	ldr	r5, [sp, #4]
 80102a6:	2331      	movs	r3, #49	; 0x31
 80102a8:	f805 3b01 	strb.w	r3, [r5], #1
 80102ac:	9b00      	ldr	r3, [sp, #0]
 80102ae:	3301      	adds	r3, #1
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	e240      	b.n	8010736 <_dtoa_r+0x946>
 80102b4:	07f2      	lsls	r2, r6, #31
 80102b6:	d505      	bpl.n	80102c4 <_dtoa_r+0x4d4>
 80102b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102bc:	f7f0 f9c4 	bl	8000648 <__aeabi_dmul>
 80102c0:	3501      	adds	r5, #1
 80102c2:	2301      	movs	r3, #1
 80102c4:	1076      	asrs	r6, r6, #1
 80102c6:	3708      	adds	r7, #8
 80102c8:	e777      	b.n	80101ba <_dtoa_r+0x3ca>
 80102ca:	2502      	movs	r5, #2
 80102cc:	e779      	b.n	80101c2 <_dtoa_r+0x3d2>
 80102ce:	9f00      	ldr	r7, [sp, #0]
 80102d0:	9e03      	ldr	r6, [sp, #12]
 80102d2:	e794      	b.n	80101fe <_dtoa_r+0x40e>
 80102d4:	9901      	ldr	r1, [sp, #4]
 80102d6:	4b4c      	ldr	r3, [pc, #304]	; (8010408 <_dtoa_r+0x618>)
 80102d8:	4431      	add	r1, r6
 80102da:	910d      	str	r1, [sp, #52]	; 0x34
 80102dc:	9908      	ldr	r1, [sp, #32]
 80102de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80102e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102e6:	2900      	cmp	r1, #0
 80102e8:	d043      	beq.n	8010372 <_dtoa_r+0x582>
 80102ea:	494d      	ldr	r1, [pc, #308]	; (8010420 <_dtoa_r+0x630>)
 80102ec:	2000      	movs	r0, #0
 80102ee:	f7f0 fad5 	bl	800089c <__aeabi_ddiv>
 80102f2:	4652      	mov	r2, sl
 80102f4:	465b      	mov	r3, fp
 80102f6:	f7ef ffef 	bl	80002d8 <__aeabi_dsub>
 80102fa:	9d01      	ldr	r5, [sp, #4]
 80102fc:	4682      	mov	sl, r0
 80102fe:	468b      	mov	fp, r1
 8010300:	4649      	mov	r1, r9
 8010302:	4640      	mov	r0, r8
 8010304:	f7f0 fc50 	bl	8000ba8 <__aeabi_d2iz>
 8010308:	4606      	mov	r6, r0
 801030a:	f7f0 f933 	bl	8000574 <__aeabi_i2d>
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	4640      	mov	r0, r8
 8010314:	4649      	mov	r1, r9
 8010316:	f7ef ffdf 	bl	80002d8 <__aeabi_dsub>
 801031a:	3630      	adds	r6, #48	; 0x30
 801031c:	f805 6b01 	strb.w	r6, [r5], #1
 8010320:	4652      	mov	r2, sl
 8010322:	465b      	mov	r3, fp
 8010324:	4680      	mov	r8, r0
 8010326:	4689      	mov	r9, r1
 8010328:	f7f0 fc00 	bl	8000b2c <__aeabi_dcmplt>
 801032c:	2800      	cmp	r0, #0
 801032e:	d163      	bne.n	80103f8 <_dtoa_r+0x608>
 8010330:	4642      	mov	r2, r8
 8010332:	464b      	mov	r3, r9
 8010334:	4936      	ldr	r1, [pc, #216]	; (8010410 <_dtoa_r+0x620>)
 8010336:	2000      	movs	r0, #0
 8010338:	f7ef ffce 	bl	80002d8 <__aeabi_dsub>
 801033c:	4652      	mov	r2, sl
 801033e:	465b      	mov	r3, fp
 8010340:	f7f0 fbf4 	bl	8000b2c <__aeabi_dcmplt>
 8010344:	2800      	cmp	r0, #0
 8010346:	f040 80b5 	bne.w	80104b4 <_dtoa_r+0x6c4>
 801034a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801034c:	429d      	cmp	r5, r3
 801034e:	d081      	beq.n	8010254 <_dtoa_r+0x464>
 8010350:	4b30      	ldr	r3, [pc, #192]	; (8010414 <_dtoa_r+0x624>)
 8010352:	2200      	movs	r2, #0
 8010354:	4650      	mov	r0, sl
 8010356:	4659      	mov	r1, fp
 8010358:	f7f0 f976 	bl	8000648 <__aeabi_dmul>
 801035c:	4b2d      	ldr	r3, [pc, #180]	; (8010414 <_dtoa_r+0x624>)
 801035e:	4682      	mov	sl, r0
 8010360:	468b      	mov	fp, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	2200      	movs	r2, #0
 8010368:	f7f0 f96e 	bl	8000648 <__aeabi_dmul>
 801036c:	4680      	mov	r8, r0
 801036e:	4689      	mov	r9, r1
 8010370:	e7c6      	b.n	8010300 <_dtoa_r+0x510>
 8010372:	4650      	mov	r0, sl
 8010374:	4659      	mov	r1, fp
 8010376:	f7f0 f967 	bl	8000648 <__aeabi_dmul>
 801037a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801037c:	9d01      	ldr	r5, [sp, #4]
 801037e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010380:	4682      	mov	sl, r0
 8010382:	468b      	mov	fp, r1
 8010384:	4649      	mov	r1, r9
 8010386:	4640      	mov	r0, r8
 8010388:	f7f0 fc0e 	bl	8000ba8 <__aeabi_d2iz>
 801038c:	4606      	mov	r6, r0
 801038e:	f7f0 f8f1 	bl	8000574 <__aeabi_i2d>
 8010392:	3630      	adds	r6, #48	; 0x30
 8010394:	4602      	mov	r2, r0
 8010396:	460b      	mov	r3, r1
 8010398:	4640      	mov	r0, r8
 801039a:	4649      	mov	r1, r9
 801039c:	f7ef ff9c 	bl	80002d8 <__aeabi_dsub>
 80103a0:	f805 6b01 	strb.w	r6, [r5], #1
 80103a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103a6:	429d      	cmp	r5, r3
 80103a8:	4680      	mov	r8, r0
 80103aa:	4689      	mov	r9, r1
 80103ac:	f04f 0200 	mov.w	r2, #0
 80103b0:	d124      	bne.n	80103fc <_dtoa_r+0x60c>
 80103b2:	4b1b      	ldr	r3, [pc, #108]	; (8010420 <_dtoa_r+0x630>)
 80103b4:	4650      	mov	r0, sl
 80103b6:	4659      	mov	r1, fp
 80103b8:	f7ef ff90 	bl	80002dc <__adddf3>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	4640      	mov	r0, r8
 80103c2:	4649      	mov	r1, r9
 80103c4:	f7f0 fbd0 	bl	8000b68 <__aeabi_dcmpgt>
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d173      	bne.n	80104b4 <_dtoa_r+0x6c4>
 80103cc:	4652      	mov	r2, sl
 80103ce:	465b      	mov	r3, fp
 80103d0:	4913      	ldr	r1, [pc, #76]	; (8010420 <_dtoa_r+0x630>)
 80103d2:	2000      	movs	r0, #0
 80103d4:	f7ef ff80 	bl	80002d8 <__aeabi_dsub>
 80103d8:	4602      	mov	r2, r0
 80103da:	460b      	mov	r3, r1
 80103dc:	4640      	mov	r0, r8
 80103de:	4649      	mov	r1, r9
 80103e0:	f7f0 fba4 	bl	8000b2c <__aeabi_dcmplt>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	f43f af35 	beq.w	8010254 <_dtoa_r+0x464>
 80103ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80103ec:	1e6b      	subs	r3, r5, #1
 80103ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80103f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80103f4:	2b30      	cmp	r3, #48	; 0x30
 80103f6:	d0f8      	beq.n	80103ea <_dtoa_r+0x5fa>
 80103f8:	9700      	str	r7, [sp, #0]
 80103fa:	e049      	b.n	8010490 <_dtoa_r+0x6a0>
 80103fc:	4b05      	ldr	r3, [pc, #20]	; (8010414 <_dtoa_r+0x624>)
 80103fe:	f7f0 f923 	bl	8000648 <__aeabi_dmul>
 8010402:	4680      	mov	r8, r0
 8010404:	4689      	mov	r9, r1
 8010406:	e7bd      	b.n	8010384 <_dtoa_r+0x594>
 8010408:	080144f0 	.word	0x080144f0
 801040c:	080144c8 	.word	0x080144c8
 8010410:	3ff00000 	.word	0x3ff00000
 8010414:	40240000 	.word	0x40240000
 8010418:	401c0000 	.word	0x401c0000
 801041c:	40140000 	.word	0x40140000
 8010420:	3fe00000 	.word	0x3fe00000
 8010424:	9d01      	ldr	r5, [sp, #4]
 8010426:	4656      	mov	r6, sl
 8010428:	465f      	mov	r7, fp
 801042a:	4642      	mov	r2, r8
 801042c:	464b      	mov	r3, r9
 801042e:	4630      	mov	r0, r6
 8010430:	4639      	mov	r1, r7
 8010432:	f7f0 fa33 	bl	800089c <__aeabi_ddiv>
 8010436:	f7f0 fbb7 	bl	8000ba8 <__aeabi_d2iz>
 801043a:	4682      	mov	sl, r0
 801043c:	f7f0 f89a 	bl	8000574 <__aeabi_i2d>
 8010440:	4642      	mov	r2, r8
 8010442:	464b      	mov	r3, r9
 8010444:	f7f0 f900 	bl	8000648 <__aeabi_dmul>
 8010448:	4602      	mov	r2, r0
 801044a:	460b      	mov	r3, r1
 801044c:	4630      	mov	r0, r6
 801044e:	4639      	mov	r1, r7
 8010450:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010454:	f7ef ff40 	bl	80002d8 <__aeabi_dsub>
 8010458:	f805 6b01 	strb.w	r6, [r5], #1
 801045c:	9e01      	ldr	r6, [sp, #4]
 801045e:	9f03      	ldr	r7, [sp, #12]
 8010460:	1bae      	subs	r6, r5, r6
 8010462:	42b7      	cmp	r7, r6
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	d135      	bne.n	80104d6 <_dtoa_r+0x6e6>
 801046a:	f7ef ff37 	bl	80002dc <__adddf3>
 801046e:	4642      	mov	r2, r8
 8010470:	464b      	mov	r3, r9
 8010472:	4606      	mov	r6, r0
 8010474:	460f      	mov	r7, r1
 8010476:	f7f0 fb77 	bl	8000b68 <__aeabi_dcmpgt>
 801047a:	b9d0      	cbnz	r0, 80104b2 <_dtoa_r+0x6c2>
 801047c:	4642      	mov	r2, r8
 801047e:	464b      	mov	r3, r9
 8010480:	4630      	mov	r0, r6
 8010482:	4639      	mov	r1, r7
 8010484:	f7f0 fb48 	bl	8000b18 <__aeabi_dcmpeq>
 8010488:	b110      	cbz	r0, 8010490 <_dtoa_r+0x6a0>
 801048a:	f01a 0f01 	tst.w	sl, #1
 801048e:	d110      	bne.n	80104b2 <_dtoa_r+0x6c2>
 8010490:	4620      	mov	r0, r4
 8010492:	ee18 1a10 	vmov	r1, s16
 8010496:	f001 f885 	bl	80115a4 <_Bfree>
 801049a:	2300      	movs	r3, #0
 801049c:	9800      	ldr	r0, [sp, #0]
 801049e:	702b      	strb	r3, [r5, #0]
 80104a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104a2:	3001      	adds	r0, #1
 80104a4:	6018      	str	r0, [r3, #0]
 80104a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f43f acf1 	beq.w	800fe90 <_dtoa_r+0xa0>
 80104ae:	601d      	str	r5, [r3, #0]
 80104b0:	e4ee      	b.n	800fe90 <_dtoa_r+0xa0>
 80104b2:	9f00      	ldr	r7, [sp, #0]
 80104b4:	462b      	mov	r3, r5
 80104b6:	461d      	mov	r5, r3
 80104b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104bc:	2a39      	cmp	r2, #57	; 0x39
 80104be:	d106      	bne.n	80104ce <_dtoa_r+0x6de>
 80104c0:	9a01      	ldr	r2, [sp, #4]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d1f7      	bne.n	80104b6 <_dtoa_r+0x6c6>
 80104c6:	9901      	ldr	r1, [sp, #4]
 80104c8:	2230      	movs	r2, #48	; 0x30
 80104ca:	3701      	adds	r7, #1
 80104cc:	700a      	strb	r2, [r1, #0]
 80104ce:	781a      	ldrb	r2, [r3, #0]
 80104d0:	3201      	adds	r2, #1
 80104d2:	701a      	strb	r2, [r3, #0]
 80104d4:	e790      	b.n	80103f8 <_dtoa_r+0x608>
 80104d6:	4ba6      	ldr	r3, [pc, #664]	; (8010770 <_dtoa_r+0x980>)
 80104d8:	2200      	movs	r2, #0
 80104da:	f7f0 f8b5 	bl	8000648 <__aeabi_dmul>
 80104de:	2200      	movs	r2, #0
 80104e0:	2300      	movs	r3, #0
 80104e2:	4606      	mov	r6, r0
 80104e4:	460f      	mov	r7, r1
 80104e6:	f7f0 fb17 	bl	8000b18 <__aeabi_dcmpeq>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d09d      	beq.n	801042a <_dtoa_r+0x63a>
 80104ee:	e7cf      	b.n	8010490 <_dtoa_r+0x6a0>
 80104f0:	9a08      	ldr	r2, [sp, #32]
 80104f2:	2a00      	cmp	r2, #0
 80104f4:	f000 80d7 	beq.w	80106a6 <_dtoa_r+0x8b6>
 80104f8:	9a06      	ldr	r2, [sp, #24]
 80104fa:	2a01      	cmp	r2, #1
 80104fc:	f300 80ba 	bgt.w	8010674 <_dtoa_r+0x884>
 8010500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010502:	2a00      	cmp	r2, #0
 8010504:	f000 80b2 	beq.w	801066c <_dtoa_r+0x87c>
 8010508:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801050c:	9e07      	ldr	r6, [sp, #28]
 801050e:	9d04      	ldr	r5, [sp, #16]
 8010510:	9a04      	ldr	r2, [sp, #16]
 8010512:	441a      	add	r2, r3
 8010514:	9204      	str	r2, [sp, #16]
 8010516:	9a05      	ldr	r2, [sp, #20]
 8010518:	2101      	movs	r1, #1
 801051a:	441a      	add	r2, r3
 801051c:	4620      	mov	r0, r4
 801051e:	9205      	str	r2, [sp, #20]
 8010520:	f001 f942 	bl	80117a8 <__i2b>
 8010524:	4607      	mov	r7, r0
 8010526:	2d00      	cmp	r5, #0
 8010528:	dd0c      	ble.n	8010544 <_dtoa_r+0x754>
 801052a:	9b05      	ldr	r3, [sp, #20]
 801052c:	2b00      	cmp	r3, #0
 801052e:	dd09      	ble.n	8010544 <_dtoa_r+0x754>
 8010530:	42ab      	cmp	r3, r5
 8010532:	9a04      	ldr	r2, [sp, #16]
 8010534:	bfa8      	it	ge
 8010536:	462b      	movge	r3, r5
 8010538:	1ad2      	subs	r2, r2, r3
 801053a:	9204      	str	r2, [sp, #16]
 801053c:	9a05      	ldr	r2, [sp, #20]
 801053e:	1aed      	subs	r5, r5, r3
 8010540:	1ad3      	subs	r3, r2, r3
 8010542:	9305      	str	r3, [sp, #20]
 8010544:	9b07      	ldr	r3, [sp, #28]
 8010546:	b31b      	cbz	r3, 8010590 <_dtoa_r+0x7a0>
 8010548:	9b08      	ldr	r3, [sp, #32]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 80af 	beq.w	80106ae <_dtoa_r+0x8be>
 8010550:	2e00      	cmp	r6, #0
 8010552:	dd13      	ble.n	801057c <_dtoa_r+0x78c>
 8010554:	4639      	mov	r1, r7
 8010556:	4632      	mov	r2, r6
 8010558:	4620      	mov	r0, r4
 801055a:	f001 f9e5 	bl	8011928 <__pow5mult>
 801055e:	ee18 2a10 	vmov	r2, s16
 8010562:	4601      	mov	r1, r0
 8010564:	4607      	mov	r7, r0
 8010566:	4620      	mov	r0, r4
 8010568:	f001 f934 	bl	80117d4 <__multiply>
 801056c:	ee18 1a10 	vmov	r1, s16
 8010570:	4680      	mov	r8, r0
 8010572:	4620      	mov	r0, r4
 8010574:	f001 f816 	bl	80115a4 <_Bfree>
 8010578:	ee08 8a10 	vmov	s16, r8
 801057c:	9b07      	ldr	r3, [sp, #28]
 801057e:	1b9a      	subs	r2, r3, r6
 8010580:	d006      	beq.n	8010590 <_dtoa_r+0x7a0>
 8010582:	ee18 1a10 	vmov	r1, s16
 8010586:	4620      	mov	r0, r4
 8010588:	f001 f9ce 	bl	8011928 <__pow5mult>
 801058c:	ee08 0a10 	vmov	s16, r0
 8010590:	2101      	movs	r1, #1
 8010592:	4620      	mov	r0, r4
 8010594:	f001 f908 	bl	80117a8 <__i2b>
 8010598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801059a:	2b00      	cmp	r3, #0
 801059c:	4606      	mov	r6, r0
 801059e:	f340 8088 	ble.w	80106b2 <_dtoa_r+0x8c2>
 80105a2:	461a      	mov	r2, r3
 80105a4:	4601      	mov	r1, r0
 80105a6:	4620      	mov	r0, r4
 80105a8:	f001 f9be 	bl	8011928 <__pow5mult>
 80105ac:	9b06      	ldr	r3, [sp, #24]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	4606      	mov	r6, r0
 80105b2:	f340 8081 	ble.w	80106b8 <_dtoa_r+0x8c8>
 80105b6:	f04f 0800 	mov.w	r8, #0
 80105ba:	6933      	ldr	r3, [r6, #16]
 80105bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80105c0:	6918      	ldr	r0, [r3, #16]
 80105c2:	f001 f8a1 	bl	8011708 <__hi0bits>
 80105c6:	f1c0 0020 	rsb	r0, r0, #32
 80105ca:	9b05      	ldr	r3, [sp, #20]
 80105cc:	4418      	add	r0, r3
 80105ce:	f010 001f 	ands.w	r0, r0, #31
 80105d2:	f000 8092 	beq.w	80106fa <_dtoa_r+0x90a>
 80105d6:	f1c0 0320 	rsb	r3, r0, #32
 80105da:	2b04      	cmp	r3, #4
 80105dc:	f340 808a 	ble.w	80106f4 <_dtoa_r+0x904>
 80105e0:	f1c0 001c 	rsb	r0, r0, #28
 80105e4:	9b04      	ldr	r3, [sp, #16]
 80105e6:	4403      	add	r3, r0
 80105e8:	9304      	str	r3, [sp, #16]
 80105ea:	9b05      	ldr	r3, [sp, #20]
 80105ec:	4403      	add	r3, r0
 80105ee:	4405      	add	r5, r0
 80105f0:	9305      	str	r3, [sp, #20]
 80105f2:	9b04      	ldr	r3, [sp, #16]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	dd07      	ble.n	8010608 <_dtoa_r+0x818>
 80105f8:	ee18 1a10 	vmov	r1, s16
 80105fc:	461a      	mov	r2, r3
 80105fe:	4620      	mov	r0, r4
 8010600:	f001 f9ec 	bl	80119dc <__lshift>
 8010604:	ee08 0a10 	vmov	s16, r0
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd05      	ble.n	801061a <_dtoa_r+0x82a>
 801060e:	4631      	mov	r1, r6
 8010610:	461a      	mov	r2, r3
 8010612:	4620      	mov	r0, r4
 8010614:	f001 f9e2 	bl	80119dc <__lshift>
 8010618:	4606      	mov	r6, r0
 801061a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801061c:	2b00      	cmp	r3, #0
 801061e:	d06e      	beq.n	80106fe <_dtoa_r+0x90e>
 8010620:	ee18 0a10 	vmov	r0, s16
 8010624:	4631      	mov	r1, r6
 8010626:	f001 fa49 	bl	8011abc <__mcmp>
 801062a:	2800      	cmp	r0, #0
 801062c:	da67      	bge.n	80106fe <_dtoa_r+0x90e>
 801062e:	9b00      	ldr	r3, [sp, #0]
 8010630:	3b01      	subs	r3, #1
 8010632:	ee18 1a10 	vmov	r1, s16
 8010636:	9300      	str	r3, [sp, #0]
 8010638:	220a      	movs	r2, #10
 801063a:	2300      	movs	r3, #0
 801063c:	4620      	mov	r0, r4
 801063e:	f000 ffd3 	bl	80115e8 <__multadd>
 8010642:	9b08      	ldr	r3, [sp, #32]
 8010644:	ee08 0a10 	vmov	s16, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 81b1 	beq.w	80109b0 <_dtoa_r+0xbc0>
 801064e:	2300      	movs	r3, #0
 8010650:	4639      	mov	r1, r7
 8010652:	220a      	movs	r2, #10
 8010654:	4620      	mov	r0, r4
 8010656:	f000 ffc7 	bl	80115e8 <__multadd>
 801065a:	9b02      	ldr	r3, [sp, #8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	4607      	mov	r7, r0
 8010660:	f300 808e 	bgt.w	8010780 <_dtoa_r+0x990>
 8010664:	9b06      	ldr	r3, [sp, #24]
 8010666:	2b02      	cmp	r3, #2
 8010668:	dc51      	bgt.n	801070e <_dtoa_r+0x91e>
 801066a:	e089      	b.n	8010780 <_dtoa_r+0x990>
 801066c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801066e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010672:	e74b      	b.n	801050c <_dtoa_r+0x71c>
 8010674:	9b03      	ldr	r3, [sp, #12]
 8010676:	1e5e      	subs	r6, r3, #1
 8010678:	9b07      	ldr	r3, [sp, #28]
 801067a:	42b3      	cmp	r3, r6
 801067c:	bfbf      	itttt	lt
 801067e:	9b07      	ldrlt	r3, [sp, #28]
 8010680:	9607      	strlt	r6, [sp, #28]
 8010682:	1af2      	sublt	r2, r6, r3
 8010684:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010686:	bfb6      	itet	lt
 8010688:	189b      	addlt	r3, r3, r2
 801068a:	1b9e      	subge	r6, r3, r6
 801068c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801068e:	9b03      	ldr	r3, [sp, #12]
 8010690:	bfb8      	it	lt
 8010692:	2600      	movlt	r6, #0
 8010694:	2b00      	cmp	r3, #0
 8010696:	bfb7      	itett	lt
 8010698:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801069c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80106a0:	1a9d      	sublt	r5, r3, r2
 80106a2:	2300      	movlt	r3, #0
 80106a4:	e734      	b.n	8010510 <_dtoa_r+0x720>
 80106a6:	9e07      	ldr	r6, [sp, #28]
 80106a8:	9d04      	ldr	r5, [sp, #16]
 80106aa:	9f08      	ldr	r7, [sp, #32]
 80106ac:	e73b      	b.n	8010526 <_dtoa_r+0x736>
 80106ae:	9a07      	ldr	r2, [sp, #28]
 80106b0:	e767      	b.n	8010582 <_dtoa_r+0x792>
 80106b2:	9b06      	ldr	r3, [sp, #24]
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	dc18      	bgt.n	80106ea <_dtoa_r+0x8fa>
 80106b8:	f1ba 0f00 	cmp.w	sl, #0
 80106bc:	d115      	bne.n	80106ea <_dtoa_r+0x8fa>
 80106be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106c2:	b993      	cbnz	r3, 80106ea <_dtoa_r+0x8fa>
 80106c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106c8:	0d1b      	lsrs	r3, r3, #20
 80106ca:	051b      	lsls	r3, r3, #20
 80106cc:	b183      	cbz	r3, 80106f0 <_dtoa_r+0x900>
 80106ce:	9b04      	ldr	r3, [sp, #16]
 80106d0:	3301      	adds	r3, #1
 80106d2:	9304      	str	r3, [sp, #16]
 80106d4:	9b05      	ldr	r3, [sp, #20]
 80106d6:	3301      	adds	r3, #1
 80106d8:	9305      	str	r3, [sp, #20]
 80106da:	f04f 0801 	mov.w	r8, #1
 80106de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f47f af6a 	bne.w	80105ba <_dtoa_r+0x7ca>
 80106e6:	2001      	movs	r0, #1
 80106e8:	e76f      	b.n	80105ca <_dtoa_r+0x7da>
 80106ea:	f04f 0800 	mov.w	r8, #0
 80106ee:	e7f6      	b.n	80106de <_dtoa_r+0x8ee>
 80106f0:	4698      	mov	r8, r3
 80106f2:	e7f4      	b.n	80106de <_dtoa_r+0x8ee>
 80106f4:	f43f af7d 	beq.w	80105f2 <_dtoa_r+0x802>
 80106f8:	4618      	mov	r0, r3
 80106fa:	301c      	adds	r0, #28
 80106fc:	e772      	b.n	80105e4 <_dtoa_r+0x7f4>
 80106fe:	9b03      	ldr	r3, [sp, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	dc37      	bgt.n	8010774 <_dtoa_r+0x984>
 8010704:	9b06      	ldr	r3, [sp, #24]
 8010706:	2b02      	cmp	r3, #2
 8010708:	dd34      	ble.n	8010774 <_dtoa_r+0x984>
 801070a:	9b03      	ldr	r3, [sp, #12]
 801070c:	9302      	str	r3, [sp, #8]
 801070e:	9b02      	ldr	r3, [sp, #8]
 8010710:	b96b      	cbnz	r3, 801072e <_dtoa_r+0x93e>
 8010712:	4631      	mov	r1, r6
 8010714:	2205      	movs	r2, #5
 8010716:	4620      	mov	r0, r4
 8010718:	f000 ff66 	bl	80115e8 <__multadd>
 801071c:	4601      	mov	r1, r0
 801071e:	4606      	mov	r6, r0
 8010720:	ee18 0a10 	vmov	r0, s16
 8010724:	f001 f9ca 	bl	8011abc <__mcmp>
 8010728:	2800      	cmp	r0, #0
 801072a:	f73f adbb 	bgt.w	80102a4 <_dtoa_r+0x4b4>
 801072e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010730:	9d01      	ldr	r5, [sp, #4]
 8010732:	43db      	mvns	r3, r3
 8010734:	9300      	str	r3, [sp, #0]
 8010736:	f04f 0800 	mov.w	r8, #0
 801073a:	4631      	mov	r1, r6
 801073c:	4620      	mov	r0, r4
 801073e:	f000 ff31 	bl	80115a4 <_Bfree>
 8010742:	2f00      	cmp	r7, #0
 8010744:	f43f aea4 	beq.w	8010490 <_dtoa_r+0x6a0>
 8010748:	f1b8 0f00 	cmp.w	r8, #0
 801074c:	d005      	beq.n	801075a <_dtoa_r+0x96a>
 801074e:	45b8      	cmp	r8, r7
 8010750:	d003      	beq.n	801075a <_dtoa_r+0x96a>
 8010752:	4641      	mov	r1, r8
 8010754:	4620      	mov	r0, r4
 8010756:	f000 ff25 	bl	80115a4 <_Bfree>
 801075a:	4639      	mov	r1, r7
 801075c:	4620      	mov	r0, r4
 801075e:	f000 ff21 	bl	80115a4 <_Bfree>
 8010762:	e695      	b.n	8010490 <_dtoa_r+0x6a0>
 8010764:	2600      	movs	r6, #0
 8010766:	4637      	mov	r7, r6
 8010768:	e7e1      	b.n	801072e <_dtoa_r+0x93e>
 801076a:	9700      	str	r7, [sp, #0]
 801076c:	4637      	mov	r7, r6
 801076e:	e599      	b.n	80102a4 <_dtoa_r+0x4b4>
 8010770:	40240000 	.word	0x40240000
 8010774:	9b08      	ldr	r3, [sp, #32]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80ca 	beq.w	8010910 <_dtoa_r+0xb20>
 801077c:	9b03      	ldr	r3, [sp, #12]
 801077e:	9302      	str	r3, [sp, #8]
 8010780:	2d00      	cmp	r5, #0
 8010782:	dd05      	ble.n	8010790 <_dtoa_r+0x9a0>
 8010784:	4639      	mov	r1, r7
 8010786:	462a      	mov	r2, r5
 8010788:	4620      	mov	r0, r4
 801078a:	f001 f927 	bl	80119dc <__lshift>
 801078e:	4607      	mov	r7, r0
 8010790:	f1b8 0f00 	cmp.w	r8, #0
 8010794:	d05b      	beq.n	801084e <_dtoa_r+0xa5e>
 8010796:	6879      	ldr	r1, [r7, #4]
 8010798:	4620      	mov	r0, r4
 801079a:	f000 fec3 	bl	8011524 <_Balloc>
 801079e:	4605      	mov	r5, r0
 80107a0:	b928      	cbnz	r0, 80107ae <_dtoa_r+0x9be>
 80107a2:	4b87      	ldr	r3, [pc, #540]	; (80109c0 <_dtoa_r+0xbd0>)
 80107a4:	4602      	mov	r2, r0
 80107a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107aa:	f7ff bb3b 	b.w	800fe24 <_dtoa_r+0x34>
 80107ae:	693a      	ldr	r2, [r7, #16]
 80107b0:	3202      	adds	r2, #2
 80107b2:	0092      	lsls	r2, r2, #2
 80107b4:	f107 010c 	add.w	r1, r7, #12
 80107b8:	300c      	adds	r0, #12
 80107ba:	f7fd fbc3 	bl	800df44 <memcpy>
 80107be:	2201      	movs	r2, #1
 80107c0:	4629      	mov	r1, r5
 80107c2:	4620      	mov	r0, r4
 80107c4:	f001 f90a 	bl	80119dc <__lshift>
 80107c8:	9b01      	ldr	r3, [sp, #4]
 80107ca:	f103 0901 	add.w	r9, r3, #1
 80107ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80107d2:	4413      	add	r3, r2
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	f00a 0301 	and.w	r3, sl, #1
 80107da:	46b8      	mov	r8, r7
 80107dc:	9304      	str	r3, [sp, #16]
 80107de:	4607      	mov	r7, r0
 80107e0:	4631      	mov	r1, r6
 80107e2:	ee18 0a10 	vmov	r0, s16
 80107e6:	f7ff fa75 	bl	800fcd4 <quorem>
 80107ea:	4641      	mov	r1, r8
 80107ec:	9002      	str	r0, [sp, #8]
 80107ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80107f2:	ee18 0a10 	vmov	r0, s16
 80107f6:	f001 f961 	bl	8011abc <__mcmp>
 80107fa:	463a      	mov	r2, r7
 80107fc:	9003      	str	r0, [sp, #12]
 80107fe:	4631      	mov	r1, r6
 8010800:	4620      	mov	r0, r4
 8010802:	f001 f977 	bl	8011af4 <__mdiff>
 8010806:	68c2      	ldr	r2, [r0, #12]
 8010808:	f109 3bff 	add.w	fp, r9, #4294967295
 801080c:	4605      	mov	r5, r0
 801080e:	bb02      	cbnz	r2, 8010852 <_dtoa_r+0xa62>
 8010810:	4601      	mov	r1, r0
 8010812:	ee18 0a10 	vmov	r0, s16
 8010816:	f001 f951 	bl	8011abc <__mcmp>
 801081a:	4602      	mov	r2, r0
 801081c:	4629      	mov	r1, r5
 801081e:	4620      	mov	r0, r4
 8010820:	9207      	str	r2, [sp, #28]
 8010822:	f000 febf 	bl	80115a4 <_Bfree>
 8010826:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801082a:	ea43 0102 	orr.w	r1, r3, r2
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	430b      	orrs	r3, r1
 8010832:	464d      	mov	r5, r9
 8010834:	d10f      	bne.n	8010856 <_dtoa_r+0xa66>
 8010836:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801083a:	d02a      	beq.n	8010892 <_dtoa_r+0xaa2>
 801083c:	9b03      	ldr	r3, [sp, #12]
 801083e:	2b00      	cmp	r3, #0
 8010840:	dd02      	ble.n	8010848 <_dtoa_r+0xa58>
 8010842:	9b02      	ldr	r3, [sp, #8]
 8010844:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010848:	f88b a000 	strb.w	sl, [fp]
 801084c:	e775      	b.n	801073a <_dtoa_r+0x94a>
 801084e:	4638      	mov	r0, r7
 8010850:	e7ba      	b.n	80107c8 <_dtoa_r+0x9d8>
 8010852:	2201      	movs	r2, #1
 8010854:	e7e2      	b.n	801081c <_dtoa_r+0xa2c>
 8010856:	9b03      	ldr	r3, [sp, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	db04      	blt.n	8010866 <_dtoa_r+0xa76>
 801085c:	9906      	ldr	r1, [sp, #24]
 801085e:	430b      	orrs	r3, r1
 8010860:	9904      	ldr	r1, [sp, #16]
 8010862:	430b      	orrs	r3, r1
 8010864:	d122      	bne.n	80108ac <_dtoa_r+0xabc>
 8010866:	2a00      	cmp	r2, #0
 8010868:	ddee      	ble.n	8010848 <_dtoa_r+0xa58>
 801086a:	ee18 1a10 	vmov	r1, s16
 801086e:	2201      	movs	r2, #1
 8010870:	4620      	mov	r0, r4
 8010872:	f001 f8b3 	bl	80119dc <__lshift>
 8010876:	4631      	mov	r1, r6
 8010878:	ee08 0a10 	vmov	s16, r0
 801087c:	f001 f91e 	bl	8011abc <__mcmp>
 8010880:	2800      	cmp	r0, #0
 8010882:	dc03      	bgt.n	801088c <_dtoa_r+0xa9c>
 8010884:	d1e0      	bne.n	8010848 <_dtoa_r+0xa58>
 8010886:	f01a 0f01 	tst.w	sl, #1
 801088a:	d0dd      	beq.n	8010848 <_dtoa_r+0xa58>
 801088c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010890:	d1d7      	bne.n	8010842 <_dtoa_r+0xa52>
 8010892:	2339      	movs	r3, #57	; 0x39
 8010894:	f88b 3000 	strb.w	r3, [fp]
 8010898:	462b      	mov	r3, r5
 801089a:	461d      	mov	r5, r3
 801089c:	3b01      	subs	r3, #1
 801089e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108a2:	2a39      	cmp	r2, #57	; 0x39
 80108a4:	d071      	beq.n	801098a <_dtoa_r+0xb9a>
 80108a6:	3201      	adds	r2, #1
 80108a8:	701a      	strb	r2, [r3, #0]
 80108aa:	e746      	b.n	801073a <_dtoa_r+0x94a>
 80108ac:	2a00      	cmp	r2, #0
 80108ae:	dd07      	ble.n	80108c0 <_dtoa_r+0xad0>
 80108b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108b4:	d0ed      	beq.n	8010892 <_dtoa_r+0xaa2>
 80108b6:	f10a 0301 	add.w	r3, sl, #1
 80108ba:	f88b 3000 	strb.w	r3, [fp]
 80108be:	e73c      	b.n	801073a <_dtoa_r+0x94a>
 80108c0:	9b05      	ldr	r3, [sp, #20]
 80108c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80108c6:	4599      	cmp	r9, r3
 80108c8:	d047      	beq.n	801095a <_dtoa_r+0xb6a>
 80108ca:	ee18 1a10 	vmov	r1, s16
 80108ce:	2300      	movs	r3, #0
 80108d0:	220a      	movs	r2, #10
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 fe88 	bl	80115e8 <__multadd>
 80108d8:	45b8      	cmp	r8, r7
 80108da:	ee08 0a10 	vmov	s16, r0
 80108de:	f04f 0300 	mov.w	r3, #0
 80108e2:	f04f 020a 	mov.w	r2, #10
 80108e6:	4641      	mov	r1, r8
 80108e8:	4620      	mov	r0, r4
 80108ea:	d106      	bne.n	80108fa <_dtoa_r+0xb0a>
 80108ec:	f000 fe7c 	bl	80115e8 <__multadd>
 80108f0:	4680      	mov	r8, r0
 80108f2:	4607      	mov	r7, r0
 80108f4:	f109 0901 	add.w	r9, r9, #1
 80108f8:	e772      	b.n	80107e0 <_dtoa_r+0x9f0>
 80108fa:	f000 fe75 	bl	80115e8 <__multadd>
 80108fe:	4639      	mov	r1, r7
 8010900:	4680      	mov	r8, r0
 8010902:	2300      	movs	r3, #0
 8010904:	220a      	movs	r2, #10
 8010906:	4620      	mov	r0, r4
 8010908:	f000 fe6e 	bl	80115e8 <__multadd>
 801090c:	4607      	mov	r7, r0
 801090e:	e7f1      	b.n	80108f4 <_dtoa_r+0xb04>
 8010910:	9b03      	ldr	r3, [sp, #12]
 8010912:	9302      	str	r3, [sp, #8]
 8010914:	9d01      	ldr	r5, [sp, #4]
 8010916:	ee18 0a10 	vmov	r0, s16
 801091a:	4631      	mov	r1, r6
 801091c:	f7ff f9da 	bl	800fcd4 <quorem>
 8010920:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010924:	9b01      	ldr	r3, [sp, #4]
 8010926:	f805 ab01 	strb.w	sl, [r5], #1
 801092a:	1aea      	subs	r2, r5, r3
 801092c:	9b02      	ldr	r3, [sp, #8]
 801092e:	4293      	cmp	r3, r2
 8010930:	dd09      	ble.n	8010946 <_dtoa_r+0xb56>
 8010932:	ee18 1a10 	vmov	r1, s16
 8010936:	2300      	movs	r3, #0
 8010938:	220a      	movs	r2, #10
 801093a:	4620      	mov	r0, r4
 801093c:	f000 fe54 	bl	80115e8 <__multadd>
 8010940:	ee08 0a10 	vmov	s16, r0
 8010944:	e7e7      	b.n	8010916 <_dtoa_r+0xb26>
 8010946:	9b02      	ldr	r3, [sp, #8]
 8010948:	2b00      	cmp	r3, #0
 801094a:	bfc8      	it	gt
 801094c:	461d      	movgt	r5, r3
 801094e:	9b01      	ldr	r3, [sp, #4]
 8010950:	bfd8      	it	le
 8010952:	2501      	movle	r5, #1
 8010954:	441d      	add	r5, r3
 8010956:	f04f 0800 	mov.w	r8, #0
 801095a:	ee18 1a10 	vmov	r1, s16
 801095e:	2201      	movs	r2, #1
 8010960:	4620      	mov	r0, r4
 8010962:	f001 f83b 	bl	80119dc <__lshift>
 8010966:	4631      	mov	r1, r6
 8010968:	ee08 0a10 	vmov	s16, r0
 801096c:	f001 f8a6 	bl	8011abc <__mcmp>
 8010970:	2800      	cmp	r0, #0
 8010972:	dc91      	bgt.n	8010898 <_dtoa_r+0xaa8>
 8010974:	d102      	bne.n	801097c <_dtoa_r+0xb8c>
 8010976:	f01a 0f01 	tst.w	sl, #1
 801097a:	d18d      	bne.n	8010898 <_dtoa_r+0xaa8>
 801097c:	462b      	mov	r3, r5
 801097e:	461d      	mov	r5, r3
 8010980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010984:	2a30      	cmp	r2, #48	; 0x30
 8010986:	d0fa      	beq.n	801097e <_dtoa_r+0xb8e>
 8010988:	e6d7      	b.n	801073a <_dtoa_r+0x94a>
 801098a:	9a01      	ldr	r2, [sp, #4]
 801098c:	429a      	cmp	r2, r3
 801098e:	d184      	bne.n	801089a <_dtoa_r+0xaaa>
 8010990:	9b00      	ldr	r3, [sp, #0]
 8010992:	3301      	adds	r3, #1
 8010994:	9300      	str	r3, [sp, #0]
 8010996:	2331      	movs	r3, #49	; 0x31
 8010998:	7013      	strb	r3, [r2, #0]
 801099a:	e6ce      	b.n	801073a <_dtoa_r+0x94a>
 801099c:	4b09      	ldr	r3, [pc, #36]	; (80109c4 <_dtoa_r+0xbd4>)
 801099e:	f7ff ba95 	b.w	800fecc <_dtoa_r+0xdc>
 80109a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f47f aa6e 	bne.w	800fe86 <_dtoa_r+0x96>
 80109aa:	4b07      	ldr	r3, [pc, #28]	; (80109c8 <_dtoa_r+0xbd8>)
 80109ac:	f7ff ba8e 	b.w	800fecc <_dtoa_r+0xdc>
 80109b0:	9b02      	ldr	r3, [sp, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	dcae      	bgt.n	8010914 <_dtoa_r+0xb24>
 80109b6:	9b06      	ldr	r3, [sp, #24]
 80109b8:	2b02      	cmp	r3, #2
 80109ba:	f73f aea8 	bgt.w	801070e <_dtoa_r+0x91e>
 80109be:	e7a9      	b.n	8010914 <_dtoa_r+0xb24>
 80109c0:	08014378 	.word	0x08014378
 80109c4:	08014178 	.word	0x08014178
 80109c8:	080142f9 	.word	0x080142f9

080109cc <__sflush_r>:
 80109cc:	898a      	ldrh	r2, [r1, #12]
 80109ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d2:	4605      	mov	r5, r0
 80109d4:	0710      	lsls	r0, r2, #28
 80109d6:	460c      	mov	r4, r1
 80109d8:	d458      	bmi.n	8010a8c <__sflush_r+0xc0>
 80109da:	684b      	ldr	r3, [r1, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	dc05      	bgt.n	80109ec <__sflush_r+0x20>
 80109e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	dc02      	bgt.n	80109ec <__sflush_r+0x20>
 80109e6:	2000      	movs	r0, #0
 80109e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109ee:	2e00      	cmp	r6, #0
 80109f0:	d0f9      	beq.n	80109e6 <__sflush_r+0x1a>
 80109f2:	2300      	movs	r3, #0
 80109f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109f8:	682f      	ldr	r7, [r5, #0]
 80109fa:	602b      	str	r3, [r5, #0]
 80109fc:	d032      	beq.n	8010a64 <__sflush_r+0x98>
 80109fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a00:	89a3      	ldrh	r3, [r4, #12]
 8010a02:	075a      	lsls	r2, r3, #29
 8010a04:	d505      	bpl.n	8010a12 <__sflush_r+0x46>
 8010a06:	6863      	ldr	r3, [r4, #4]
 8010a08:	1ac0      	subs	r0, r0, r3
 8010a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a0c:	b10b      	cbz	r3, 8010a12 <__sflush_r+0x46>
 8010a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a10:	1ac0      	subs	r0, r0, r3
 8010a12:	2300      	movs	r3, #0
 8010a14:	4602      	mov	r2, r0
 8010a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a18:	6a21      	ldr	r1, [r4, #32]
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	47b0      	blx	r6
 8010a1e:	1c43      	adds	r3, r0, #1
 8010a20:	89a3      	ldrh	r3, [r4, #12]
 8010a22:	d106      	bne.n	8010a32 <__sflush_r+0x66>
 8010a24:	6829      	ldr	r1, [r5, #0]
 8010a26:	291d      	cmp	r1, #29
 8010a28:	d82c      	bhi.n	8010a84 <__sflush_r+0xb8>
 8010a2a:	4a2a      	ldr	r2, [pc, #168]	; (8010ad4 <__sflush_r+0x108>)
 8010a2c:	40ca      	lsrs	r2, r1
 8010a2e:	07d6      	lsls	r6, r2, #31
 8010a30:	d528      	bpl.n	8010a84 <__sflush_r+0xb8>
 8010a32:	2200      	movs	r2, #0
 8010a34:	6062      	str	r2, [r4, #4]
 8010a36:	04d9      	lsls	r1, r3, #19
 8010a38:	6922      	ldr	r2, [r4, #16]
 8010a3a:	6022      	str	r2, [r4, #0]
 8010a3c:	d504      	bpl.n	8010a48 <__sflush_r+0x7c>
 8010a3e:	1c42      	adds	r2, r0, #1
 8010a40:	d101      	bne.n	8010a46 <__sflush_r+0x7a>
 8010a42:	682b      	ldr	r3, [r5, #0]
 8010a44:	b903      	cbnz	r3, 8010a48 <__sflush_r+0x7c>
 8010a46:	6560      	str	r0, [r4, #84]	; 0x54
 8010a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a4a:	602f      	str	r7, [r5, #0]
 8010a4c:	2900      	cmp	r1, #0
 8010a4e:	d0ca      	beq.n	80109e6 <__sflush_r+0x1a>
 8010a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a54:	4299      	cmp	r1, r3
 8010a56:	d002      	beq.n	8010a5e <__sflush_r+0x92>
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f001 fa3b 	bl	8011ed4 <_free_r>
 8010a5e:	2000      	movs	r0, #0
 8010a60:	6360      	str	r0, [r4, #52]	; 0x34
 8010a62:	e7c1      	b.n	80109e8 <__sflush_r+0x1c>
 8010a64:	6a21      	ldr	r1, [r4, #32]
 8010a66:	2301      	movs	r3, #1
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b0      	blx	r6
 8010a6c:	1c41      	adds	r1, r0, #1
 8010a6e:	d1c7      	bne.n	8010a00 <__sflush_r+0x34>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d0c4      	beq.n	8010a00 <__sflush_r+0x34>
 8010a76:	2b1d      	cmp	r3, #29
 8010a78:	d001      	beq.n	8010a7e <__sflush_r+0xb2>
 8010a7a:	2b16      	cmp	r3, #22
 8010a7c:	d101      	bne.n	8010a82 <__sflush_r+0xb6>
 8010a7e:	602f      	str	r7, [r5, #0]
 8010a80:	e7b1      	b.n	80109e6 <__sflush_r+0x1a>
 8010a82:	89a3      	ldrh	r3, [r4, #12]
 8010a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a88:	81a3      	strh	r3, [r4, #12]
 8010a8a:	e7ad      	b.n	80109e8 <__sflush_r+0x1c>
 8010a8c:	690f      	ldr	r7, [r1, #16]
 8010a8e:	2f00      	cmp	r7, #0
 8010a90:	d0a9      	beq.n	80109e6 <__sflush_r+0x1a>
 8010a92:	0793      	lsls	r3, r2, #30
 8010a94:	680e      	ldr	r6, [r1, #0]
 8010a96:	bf08      	it	eq
 8010a98:	694b      	ldreq	r3, [r1, #20]
 8010a9a:	600f      	str	r7, [r1, #0]
 8010a9c:	bf18      	it	ne
 8010a9e:	2300      	movne	r3, #0
 8010aa0:	eba6 0807 	sub.w	r8, r6, r7
 8010aa4:	608b      	str	r3, [r1, #8]
 8010aa6:	f1b8 0f00 	cmp.w	r8, #0
 8010aaa:	dd9c      	ble.n	80109e6 <__sflush_r+0x1a>
 8010aac:	6a21      	ldr	r1, [r4, #32]
 8010aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ab0:	4643      	mov	r3, r8
 8010ab2:	463a      	mov	r2, r7
 8010ab4:	4628      	mov	r0, r5
 8010ab6:	47b0      	blx	r6
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	dc06      	bgt.n	8010aca <__sflush_r+0xfe>
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ac2:	81a3      	strh	r3, [r4, #12]
 8010ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac8:	e78e      	b.n	80109e8 <__sflush_r+0x1c>
 8010aca:	4407      	add	r7, r0
 8010acc:	eba8 0800 	sub.w	r8, r8, r0
 8010ad0:	e7e9      	b.n	8010aa6 <__sflush_r+0xda>
 8010ad2:	bf00      	nop
 8010ad4:	20400001 	.word	0x20400001

08010ad8 <_fflush_r>:
 8010ad8:	b538      	push	{r3, r4, r5, lr}
 8010ada:	690b      	ldr	r3, [r1, #16]
 8010adc:	4605      	mov	r5, r0
 8010ade:	460c      	mov	r4, r1
 8010ae0:	b913      	cbnz	r3, 8010ae8 <_fflush_r+0x10>
 8010ae2:	2500      	movs	r5, #0
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	bd38      	pop	{r3, r4, r5, pc}
 8010ae8:	b118      	cbz	r0, 8010af2 <_fflush_r+0x1a>
 8010aea:	6983      	ldr	r3, [r0, #24]
 8010aec:	b90b      	cbnz	r3, 8010af2 <_fflush_r+0x1a>
 8010aee:	f000 f887 	bl	8010c00 <__sinit>
 8010af2:	4b14      	ldr	r3, [pc, #80]	; (8010b44 <_fflush_r+0x6c>)
 8010af4:	429c      	cmp	r4, r3
 8010af6:	d11b      	bne.n	8010b30 <_fflush_r+0x58>
 8010af8:	686c      	ldr	r4, [r5, #4]
 8010afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d0ef      	beq.n	8010ae2 <_fflush_r+0xa>
 8010b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b04:	07d0      	lsls	r0, r2, #31
 8010b06:	d404      	bmi.n	8010b12 <_fflush_r+0x3a>
 8010b08:	0599      	lsls	r1, r3, #22
 8010b0a:	d402      	bmi.n	8010b12 <_fflush_r+0x3a>
 8010b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b0e:	f000 fc88 	bl	8011422 <__retarget_lock_acquire_recursive>
 8010b12:	4628      	mov	r0, r5
 8010b14:	4621      	mov	r1, r4
 8010b16:	f7ff ff59 	bl	80109cc <__sflush_r>
 8010b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b1c:	07da      	lsls	r2, r3, #31
 8010b1e:	4605      	mov	r5, r0
 8010b20:	d4e0      	bmi.n	8010ae4 <_fflush_r+0xc>
 8010b22:	89a3      	ldrh	r3, [r4, #12]
 8010b24:	059b      	lsls	r3, r3, #22
 8010b26:	d4dd      	bmi.n	8010ae4 <_fflush_r+0xc>
 8010b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b2a:	f000 fc7b 	bl	8011424 <__retarget_lock_release_recursive>
 8010b2e:	e7d9      	b.n	8010ae4 <_fflush_r+0xc>
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <_fflush_r+0x70>)
 8010b32:	429c      	cmp	r4, r3
 8010b34:	d101      	bne.n	8010b3a <_fflush_r+0x62>
 8010b36:	68ac      	ldr	r4, [r5, #8]
 8010b38:	e7df      	b.n	8010afa <_fflush_r+0x22>
 8010b3a:	4b04      	ldr	r3, [pc, #16]	; (8010b4c <_fflush_r+0x74>)
 8010b3c:	429c      	cmp	r4, r3
 8010b3e:	bf08      	it	eq
 8010b40:	68ec      	ldreq	r4, [r5, #12]
 8010b42:	e7da      	b.n	8010afa <_fflush_r+0x22>
 8010b44:	080143ac 	.word	0x080143ac
 8010b48:	080143cc 	.word	0x080143cc
 8010b4c:	0801438c 	.word	0x0801438c

08010b50 <std>:
 8010b50:	2300      	movs	r3, #0
 8010b52:	b510      	push	{r4, lr}
 8010b54:	4604      	mov	r4, r0
 8010b56:	e9c0 3300 	strd	r3, r3, [r0]
 8010b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b5e:	6083      	str	r3, [r0, #8]
 8010b60:	8181      	strh	r1, [r0, #12]
 8010b62:	6643      	str	r3, [r0, #100]	; 0x64
 8010b64:	81c2      	strh	r2, [r0, #14]
 8010b66:	6183      	str	r3, [r0, #24]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	2208      	movs	r2, #8
 8010b6c:	305c      	adds	r0, #92	; 0x5c
 8010b6e:	f7fd f9f7 	bl	800df60 <memset>
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <std+0x38>)
 8010b74:	6263      	str	r3, [r4, #36]	; 0x24
 8010b76:	4b05      	ldr	r3, [pc, #20]	; (8010b8c <std+0x3c>)
 8010b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b7a:	4b05      	ldr	r3, [pc, #20]	; (8010b90 <std+0x40>)
 8010b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b7e:	4b05      	ldr	r3, [pc, #20]	; (8010b94 <std+0x44>)
 8010b80:	6224      	str	r4, [r4, #32]
 8010b82:	6323      	str	r3, [r4, #48]	; 0x30
 8010b84:	bd10      	pop	{r4, pc}
 8010b86:	bf00      	nop
 8010b88:	08012631 	.word	0x08012631
 8010b8c:	08012653 	.word	0x08012653
 8010b90:	0801268b 	.word	0x0801268b
 8010b94:	080126af 	.word	0x080126af

08010b98 <_cleanup_r>:
 8010b98:	4901      	ldr	r1, [pc, #4]	; (8010ba0 <_cleanup_r+0x8>)
 8010b9a:	f000 b8af 	b.w	8010cfc <_fwalk_reent>
 8010b9e:	bf00      	nop
 8010ba0:	08010ad9 	.word	0x08010ad9

08010ba4 <__sfmoreglue>:
 8010ba4:	b570      	push	{r4, r5, r6, lr}
 8010ba6:	2268      	movs	r2, #104	; 0x68
 8010ba8:	1e4d      	subs	r5, r1, #1
 8010baa:	4355      	muls	r5, r2
 8010bac:	460e      	mov	r6, r1
 8010bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010bb2:	f001 f9fb 	bl	8011fac <_malloc_r>
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	b140      	cbz	r0, 8010bcc <__sfmoreglue+0x28>
 8010bba:	2100      	movs	r1, #0
 8010bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8010bc0:	300c      	adds	r0, #12
 8010bc2:	60a0      	str	r0, [r4, #8]
 8010bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010bc8:	f7fd f9ca 	bl	800df60 <memset>
 8010bcc:	4620      	mov	r0, r4
 8010bce:	bd70      	pop	{r4, r5, r6, pc}

08010bd0 <__sfp_lock_acquire>:
 8010bd0:	4801      	ldr	r0, [pc, #4]	; (8010bd8 <__sfp_lock_acquire+0x8>)
 8010bd2:	f000 bc26 	b.w	8011422 <__retarget_lock_acquire_recursive>
 8010bd6:	bf00      	nop
 8010bd8:	20009425 	.word	0x20009425

08010bdc <__sfp_lock_release>:
 8010bdc:	4801      	ldr	r0, [pc, #4]	; (8010be4 <__sfp_lock_release+0x8>)
 8010bde:	f000 bc21 	b.w	8011424 <__retarget_lock_release_recursive>
 8010be2:	bf00      	nop
 8010be4:	20009425 	.word	0x20009425

08010be8 <__sinit_lock_acquire>:
 8010be8:	4801      	ldr	r0, [pc, #4]	; (8010bf0 <__sinit_lock_acquire+0x8>)
 8010bea:	f000 bc1a 	b.w	8011422 <__retarget_lock_acquire_recursive>
 8010bee:	bf00      	nop
 8010bf0:	20009426 	.word	0x20009426

08010bf4 <__sinit_lock_release>:
 8010bf4:	4801      	ldr	r0, [pc, #4]	; (8010bfc <__sinit_lock_release+0x8>)
 8010bf6:	f000 bc15 	b.w	8011424 <__retarget_lock_release_recursive>
 8010bfa:	bf00      	nop
 8010bfc:	20009426 	.word	0x20009426

08010c00 <__sinit>:
 8010c00:	b510      	push	{r4, lr}
 8010c02:	4604      	mov	r4, r0
 8010c04:	f7ff fff0 	bl	8010be8 <__sinit_lock_acquire>
 8010c08:	69a3      	ldr	r3, [r4, #24]
 8010c0a:	b11b      	cbz	r3, 8010c14 <__sinit+0x14>
 8010c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c10:	f7ff bff0 	b.w	8010bf4 <__sinit_lock_release>
 8010c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c18:	6523      	str	r3, [r4, #80]	; 0x50
 8010c1a:	4b13      	ldr	r3, [pc, #76]	; (8010c68 <__sinit+0x68>)
 8010c1c:	4a13      	ldr	r2, [pc, #76]	; (8010c6c <__sinit+0x6c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c22:	42a3      	cmp	r3, r4
 8010c24:	bf04      	itt	eq
 8010c26:	2301      	moveq	r3, #1
 8010c28:	61a3      	streq	r3, [r4, #24]
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f000 f820 	bl	8010c70 <__sfp>
 8010c30:	6060      	str	r0, [r4, #4]
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 f81c 	bl	8010c70 <__sfp>
 8010c38:	60a0      	str	r0, [r4, #8]
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 f818 	bl	8010c70 <__sfp>
 8010c40:	2200      	movs	r2, #0
 8010c42:	60e0      	str	r0, [r4, #12]
 8010c44:	2104      	movs	r1, #4
 8010c46:	6860      	ldr	r0, [r4, #4]
 8010c48:	f7ff ff82 	bl	8010b50 <std>
 8010c4c:	68a0      	ldr	r0, [r4, #8]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	2109      	movs	r1, #9
 8010c52:	f7ff ff7d 	bl	8010b50 <std>
 8010c56:	68e0      	ldr	r0, [r4, #12]
 8010c58:	2202      	movs	r2, #2
 8010c5a:	2112      	movs	r1, #18
 8010c5c:	f7ff ff78 	bl	8010b50 <std>
 8010c60:	2301      	movs	r3, #1
 8010c62:	61a3      	str	r3, [r4, #24]
 8010c64:	e7d2      	b.n	8010c0c <__sinit+0xc>
 8010c66:	bf00      	nop
 8010c68:	08014164 	.word	0x08014164
 8010c6c:	08010b99 	.word	0x08010b99

08010c70 <__sfp>:
 8010c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c72:	4607      	mov	r7, r0
 8010c74:	f7ff ffac 	bl	8010bd0 <__sfp_lock_acquire>
 8010c78:	4b1e      	ldr	r3, [pc, #120]	; (8010cf4 <__sfp+0x84>)
 8010c7a:	681e      	ldr	r6, [r3, #0]
 8010c7c:	69b3      	ldr	r3, [r6, #24]
 8010c7e:	b913      	cbnz	r3, 8010c86 <__sfp+0x16>
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ff ffbd 	bl	8010c00 <__sinit>
 8010c86:	3648      	adds	r6, #72	; 0x48
 8010c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	d503      	bpl.n	8010c98 <__sfp+0x28>
 8010c90:	6833      	ldr	r3, [r6, #0]
 8010c92:	b30b      	cbz	r3, 8010cd8 <__sfp+0x68>
 8010c94:	6836      	ldr	r6, [r6, #0]
 8010c96:	e7f7      	b.n	8010c88 <__sfp+0x18>
 8010c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c9c:	b9d5      	cbnz	r5, 8010cd4 <__sfp+0x64>
 8010c9e:	4b16      	ldr	r3, [pc, #88]	; (8010cf8 <__sfp+0x88>)
 8010ca0:	60e3      	str	r3, [r4, #12]
 8010ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8010ca8:	f000 fbba 	bl	8011420 <__retarget_lock_init_recursive>
 8010cac:	f7ff ff96 	bl	8010bdc <__sfp_lock_release>
 8010cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010cb8:	6025      	str	r5, [r4, #0]
 8010cba:	61a5      	str	r5, [r4, #24]
 8010cbc:	2208      	movs	r2, #8
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010cc4:	f7fd f94c 	bl	800df60 <memset>
 8010cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cd4:	3468      	adds	r4, #104	; 0x68
 8010cd6:	e7d9      	b.n	8010c8c <__sfp+0x1c>
 8010cd8:	2104      	movs	r1, #4
 8010cda:	4638      	mov	r0, r7
 8010cdc:	f7ff ff62 	bl	8010ba4 <__sfmoreglue>
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	6030      	str	r0, [r6, #0]
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d1d5      	bne.n	8010c94 <__sfp+0x24>
 8010ce8:	f7ff ff78 	bl	8010bdc <__sfp_lock_release>
 8010cec:	230c      	movs	r3, #12
 8010cee:	603b      	str	r3, [r7, #0]
 8010cf0:	e7ee      	b.n	8010cd0 <__sfp+0x60>
 8010cf2:	bf00      	nop
 8010cf4:	08014164 	.word	0x08014164
 8010cf8:	ffff0001 	.word	0xffff0001

08010cfc <_fwalk_reent>:
 8010cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d00:	4606      	mov	r6, r0
 8010d02:	4688      	mov	r8, r1
 8010d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d08:	2700      	movs	r7, #0
 8010d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8010d12:	d505      	bpl.n	8010d20 <_fwalk_reent+0x24>
 8010d14:	6824      	ldr	r4, [r4, #0]
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	d1f7      	bne.n	8010d0a <_fwalk_reent+0xe>
 8010d1a:	4638      	mov	r0, r7
 8010d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d20:	89ab      	ldrh	r3, [r5, #12]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d907      	bls.n	8010d36 <_fwalk_reent+0x3a>
 8010d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	d003      	beq.n	8010d36 <_fwalk_reent+0x3a>
 8010d2e:	4629      	mov	r1, r5
 8010d30:	4630      	mov	r0, r6
 8010d32:	47c0      	blx	r8
 8010d34:	4307      	orrs	r7, r0
 8010d36:	3568      	adds	r5, #104	; 0x68
 8010d38:	e7e9      	b.n	8010d0e <_fwalk_reent+0x12>

08010d3a <rshift>:
 8010d3a:	6903      	ldr	r3, [r0, #16]
 8010d3c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d44:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010d48:	f100 0414 	add.w	r4, r0, #20
 8010d4c:	dd45      	ble.n	8010dda <rshift+0xa0>
 8010d4e:	f011 011f 	ands.w	r1, r1, #31
 8010d52:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010d56:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010d5a:	d10c      	bne.n	8010d76 <rshift+0x3c>
 8010d5c:	f100 0710 	add.w	r7, r0, #16
 8010d60:	4629      	mov	r1, r5
 8010d62:	42b1      	cmp	r1, r6
 8010d64:	d334      	bcc.n	8010dd0 <rshift+0x96>
 8010d66:	1a9b      	subs	r3, r3, r2
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	1eea      	subs	r2, r5, #3
 8010d6c:	4296      	cmp	r6, r2
 8010d6e:	bf38      	it	cc
 8010d70:	2300      	movcc	r3, #0
 8010d72:	4423      	add	r3, r4
 8010d74:	e015      	b.n	8010da2 <rshift+0x68>
 8010d76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010d7a:	f1c1 0820 	rsb	r8, r1, #32
 8010d7e:	40cf      	lsrs	r7, r1
 8010d80:	f105 0e04 	add.w	lr, r5, #4
 8010d84:	46a1      	mov	r9, r4
 8010d86:	4576      	cmp	r6, lr
 8010d88:	46f4      	mov	ip, lr
 8010d8a:	d815      	bhi.n	8010db8 <rshift+0x7e>
 8010d8c:	1a9a      	subs	r2, r3, r2
 8010d8e:	0092      	lsls	r2, r2, #2
 8010d90:	3a04      	subs	r2, #4
 8010d92:	3501      	adds	r5, #1
 8010d94:	42ae      	cmp	r6, r5
 8010d96:	bf38      	it	cc
 8010d98:	2200      	movcc	r2, #0
 8010d9a:	18a3      	adds	r3, r4, r2
 8010d9c:	50a7      	str	r7, [r4, r2]
 8010d9e:	b107      	cbz	r7, 8010da2 <rshift+0x68>
 8010da0:	3304      	adds	r3, #4
 8010da2:	1b1a      	subs	r2, r3, r4
 8010da4:	42a3      	cmp	r3, r4
 8010da6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010daa:	bf08      	it	eq
 8010dac:	2300      	moveq	r3, #0
 8010dae:	6102      	str	r2, [r0, #16]
 8010db0:	bf08      	it	eq
 8010db2:	6143      	streq	r3, [r0, #20]
 8010db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010db8:	f8dc c000 	ldr.w	ip, [ip]
 8010dbc:	fa0c fc08 	lsl.w	ip, ip, r8
 8010dc0:	ea4c 0707 	orr.w	r7, ip, r7
 8010dc4:	f849 7b04 	str.w	r7, [r9], #4
 8010dc8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010dcc:	40cf      	lsrs	r7, r1
 8010dce:	e7da      	b.n	8010d86 <rshift+0x4c>
 8010dd0:	f851 cb04 	ldr.w	ip, [r1], #4
 8010dd4:	f847 cf04 	str.w	ip, [r7, #4]!
 8010dd8:	e7c3      	b.n	8010d62 <rshift+0x28>
 8010dda:	4623      	mov	r3, r4
 8010ddc:	e7e1      	b.n	8010da2 <rshift+0x68>

08010dde <__hexdig_fun>:
 8010dde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010de2:	2b09      	cmp	r3, #9
 8010de4:	d802      	bhi.n	8010dec <__hexdig_fun+0xe>
 8010de6:	3820      	subs	r0, #32
 8010de8:	b2c0      	uxtb	r0, r0
 8010dea:	4770      	bx	lr
 8010dec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010df0:	2b05      	cmp	r3, #5
 8010df2:	d801      	bhi.n	8010df8 <__hexdig_fun+0x1a>
 8010df4:	3847      	subs	r0, #71	; 0x47
 8010df6:	e7f7      	b.n	8010de8 <__hexdig_fun+0xa>
 8010df8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010dfc:	2b05      	cmp	r3, #5
 8010dfe:	d801      	bhi.n	8010e04 <__hexdig_fun+0x26>
 8010e00:	3827      	subs	r0, #39	; 0x27
 8010e02:	e7f1      	b.n	8010de8 <__hexdig_fun+0xa>
 8010e04:	2000      	movs	r0, #0
 8010e06:	4770      	bx	lr

08010e08 <__gethex>:
 8010e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e0c:	ed2d 8b02 	vpush	{d8}
 8010e10:	b089      	sub	sp, #36	; 0x24
 8010e12:	ee08 0a10 	vmov	s16, r0
 8010e16:	9304      	str	r3, [sp, #16]
 8010e18:	4bb4      	ldr	r3, [pc, #720]	; (80110ec <__gethex+0x2e4>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	9301      	str	r3, [sp, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	468b      	mov	fp, r1
 8010e22:	4690      	mov	r8, r2
 8010e24:	f7ef f9fc 	bl	8000220 <strlen>
 8010e28:	9b01      	ldr	r3, [sp, #4]
 8010e2a:	f8db 2000 	ldr.w	r2, [fp]
 8010e2e:	4403      	add	r3, r0
 8010e30:	4682      	mov	sl, r0
 8010e32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010e36:	9305      	str	r3, [sp, #20]
 8010e38:	1c93      	adds	r3, r2, #2
 8010e3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010e3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010e42:	32fe      	adds	r2, #254	; 0xfe
 8010e44:	18d1      	adds	r1, r2, r3
 8010e46:	461f      	mov	r7, r3
 8010e48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e4c:	9100      	str	r1, [sp, #0]
 8010e4e:	2830      	cmp	r0, #48	; 0x30
 8010e50:	d0f8      	beq.n	8010e44 <__gethex+0x3c>
 8010e52:	f7ff ffc4 	bl	8010dde <__hexdig_fun>
 8010e56:	4604      	mov	r4, r0
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	d13a      	bne.n	8010ed2 <__gethex+0xca>
 8010e5c:	9901      	ldr	r1, [sp, #4]
 8010e5e:	4652      	mov	r2, sl
 8010e60:	4638      	mov	r0, r7
 8010e62:	f001 fc28 	bl	80126b6 <strncmp>
 8010e66:	4605      	mov	r5, r0
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d168      	bne.n	8010f3e <__gethex+0x136>
 8010e6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010e70:	eb07 060a 	add.w	r6, r7, sl
 8010e74:	f7ff ffb3 	bl	8010dde <__hexdig_fun>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d062      	beq.n	8010f42 <__gethex+0x13a>
 8010e7c:	4633      	mov	r3, r6
 8010e7e:	7818      	ldrb	r0, [r3, #0]
 8010e80:	2830      	cmp	r0, #48	; 0x30
 8010e82:	461f      	mov	r7, r3
 8010e84:	f103 0301 	add.w	r3, r3, #1
 8010e88:	d0f9      	beq.n	8010e7e <__gethex+0x76>
 8010e8a:	f7ff ffa8 	bl	8010dde <__hexdig_fun>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	fab0 f480 	clz	r4, r0
 8010e94:	0964      	lsrs	r4, r4, #5
 8010e96:	4635      	mov	r5, r6
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	463a      	mov	r2, r7
 8010e9c:	4616      	mov	r6, r2
 8010e9e:	3201      	adds	r2, #1
 8010ea0:	7830      	ldrb	r0, [r6, #0]
 8010ea2:	f7ff ff9c 	bl	8010dde <__hexdig_fun>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d1f8      	bne.n	8010e9c <__gethex+0x94>
 8010eaa:	9901      	ldr	r1, [sp, #4]
 8010eac:	4652      	mov	r2, sl
 8010eae:	4630      	mov	r0, r6
 8010eb0:	f001 fc01 	bl	80126b6 <strncmp>
 8010eb4:	b980      	cbnz	r0, 8010ed8 <__gethex+0xd0>
 8010eb6:	b94d      	cbnz	r5, 8010ecc <__gethex+0xc4>
 8010eb8:	eb06 050a 	add.w	r5, r6, sl
 8010ebc:	462a      	mov	r2, r5
 8010ebe:	4616      	mov	r6, r2
 8010ec0:	3201      	adds	r2, #1
 8010ec2:	7830      	ldrb	r0, [r6, #0]
 8010ec4:	f7ff ff8b 	bl	8010dde <__hexdig_fun>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d1f8      	bne.n	8010ebe <__gethex+0xb6>
 8010ecc:	1bad      	subs	r5, r5, r6
 8010ece:	00ad      	lsls	r5, r5, #2
 8010ed0:	e004      	b.n	8010edc <__gethex+0xd4>
 8010ed2:	2400      	movs	r4, #0
 8010ed4:	4625      	mov	r5, r4
 8010ed6:	e7e0      	b.n	8010e9a <__gethex+0x92>
 8010ed8:	2d00      	cmp	r5, #0
 8010eda:	d1f7      	bne.n	8010ecc <__gethex+0xc4>
 8010edc:	7833      	ldrb	r3, [r6, #0]
 8010ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010ee2:	2b50      	cmp	r3, #80	; 0x50
 8010ee4:	d13b      	bne.n	8010f5e <__gethex+0x156>
 8010ee6:	7873      	ldrb	r3, [r6, #1]
 8010ee8:	2b2b      	cmp	r3, #43	; 0x2b
 8010eea:	d02c      	beq.n	8010f46 <__gethex+0x13e>
 8010eec:	2b2d      	cmp	r3, #45	; 0x2d
 8010eee:	d02e      	beq.n	8010f4e <__gethex+0x146>
 8010ef0:	1c71      	adds	r1, r6, #1
 8010ef2:	f04f 0900 	mov.w	r9, #0
 8010ef6:	7808      	ldrb	r0, [r1, #0]
 8010ef8:	f7ff ff71 	bl	8010dde <__hexdig_fun>
 8010efc:	1e43      	subs	r3, r0, #1
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b18      	cmp	r3, #24
 8010f02:	d82c      	bhi.n	8010f5e <__gethex+0x156>
 8010f04:	f1a0 0210 	sub.w	r2, r0, #16
 8010f08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f0c:	f7ff ff67 	bl	8010dde <__hexdig_fun>
 8010f10:	1e43      	subs	r3, r0, #1
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b18      	cmp	r3, #24
 8010f16:	d91d      	bls.n	8010f54 <__gethex+0x14c>
 8010f18:	f1b9 0f00 	cmp.w	r9, #0
 8010f1c:	d000      	beq.n	8010f20 <__gethex+0x118>
 8010f1e:	4252      	negs	r2, r2
 8010f20:	4415      	add	r5, r2
 8010f22:	f8cb 1000 	str.w	r1, [fp]
 8010f26:	b1e4      	cbz	r4, 8010f62 <__gethex+0x15a>
 8010f28:	9b00      	ldr	r3, [sp, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	bf14      	ite	ne
 8010f2e:	2700      	movne	r7, #0
 8010f30:	2706      	moveq	r7, #6
 8010f32:	4638      	mov	r0, r7
 8010f34:	b009      	add	sp, #36	; 0x24
 8010f36:	ecbd 8b02 	vpop	{d8}
 8010f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3e:	463e      	mov	r6, r7
 8010f40:	4625      	mov	r5, r4
 8010f42:	2401      	movs	r4, #1
 8010f44:	e7ca      	b.n	8010edc <__gethex+0xd4>
 8010f46:	f04f 0900 	mov.w	r9, #0
 8010f4a:	1cb1      	adds	r1, r6, #2
 8010f4c:	e7d3      	b.n	8010ef6 <__gethex+0xee>
 8010f4e:	f04f 0901 	mov.w	r9, #1
 8010f52:	e7fa      	b.n	8010f4a <__gethex+0x142>
 8010f54:	230a      	movs	r3, #10
 8010f56:	fb03 0202 	mla	r2, r3, r2, r0
 8010f5a:	3a10      	subs	r2, #16
 8010f5c:	e7d4      	b.n	8010f08 <__gethex+0x100>
 8010f5e:	4631      	mov	r1, r6
 8010f60:	e7df      	b.n	8010f22 <__gethex+0x11a>
 8010f62:	1bf3      	subs	r3, r6, r7
 8010f64:	3b01      	subs	r3, #1
 8010f66:	4621      	mov	r1, r4
 8010f68:	2b07      	cmp	r3, #7
 8010f6a:	dc0b      	bgt.n	8010f84 <__gethex+0x17c>
 8010f6c:	ee18 0a10 	vmov	r0, s16
 8010f70:	f000 fad8 	bl	8011524 <_Balloc>
 8010f74:	4604      	mov	r4, r0
 8010f76:	b940      	cbnz	r0, 8010f8a <__gethex+0x182>
 8010f78:	4b5d      	ldr	r3, [pc, #372]	; (80110f0 <__gethex+0x2e8>)
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	21de      	movs	r1, #222	; 0xde
 8010f7e:	485d      	ldr	r0, [pc, #372]	; (80110f4 <__gethex+0x2ec>)
 8010f80:	f001 fbcc 	bl	801271c <__assert_func>
 8010f84:	3101      	adds	r1, #1
 8010f86:	105b      	asrs	r3, r3, #1
 8010f88:	e7ee      	b.n	8010f68 <__gethex+0x160>
 8010f8a:	f100 0914 	add.w	r9, r0, #20
 8010f8e:	f04f 0b00 	mov.w	fp, #0
 8010f92:	f1ca 0301 	rsb	r3, sl, #1
 8010f96:	f8cd 9008 	str.w	r9, [sp, #8]
 8010f9a:	f8cd b000 	str.w	fp, [sp]
 8010f9e:	9306      	str	r3, [sp, #24]
 8010fa0:	42b7      	cmp	r7, r6
 8010fa2:	d340      	bcc.n	8011026 <__gethex+0x21e>
 8010fa4:	9802      	ldr	r0, [sp, #8]
 8010fa6:	9b00      	ldr	r3, [sp, #0]
 8010fa8:	f840 3b04 	str.w	r3, [r0], #4
 8010fac:	eba0 0009 	sub.w	r0, r0, r9
 8010fb0:	1080      	asrs	r0, r0, #2
 8010fb2:	0146      	lsls	r6, r0, #5
 8010fb4:	6120      	str	r0, [r4, #16]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 fba6 	bl	8011708 <__hi0bits>
 8010fbc:	1a30      	subs	r0, r6, r0
 8010fbe:	f8d8 6000 	ldr.w	r6, [r8]
 8010fc2:	42b0      	cmp	r0, r6
 8010fc4:	dd63      	ble.n	801108e <__gethex+0x286>
 8010fc6:	1b87      	subs	r7, r0, r6
 8010fc8:	4639      	mov	r1, r7
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 ff4a 	bl	8011e64 <__any_on>
 8010fd0:	4682      	mov	sl, r0
 8010fd2:	b1a8      	cbz	r0, 8011000 <__gethex+0x1f8>
 8010fd4:	1e7b      	subs	r3, r7, #1
 8010fd6:	1159      	asrs	r1, r3, #5
 8010fd8:	f003 021f 	and.w	r2, r3, #31
 8010fdc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010fe0:	f04f 0a01 	mov.w	sl, #1
 8010fe4:	fa0a f202 	lsl.w	r2, sl, r2
 8010fe8:	420a      	tst	r2, r1
 8010fea:	d009      	beq.n	8011000 <__gethex+0x1f8>
 8010fec:	4553      	cmp	r3, sl
 8010fee:	dd05      	ble.n	8010ffc <__gethex+0x1f4>
 8010ff0:	1eb9      	subs	r1, r7, #2
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f000 ff36 	bl	8011e64 <__any_on>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d145      	bne.n	8011088 <__gethex+0x280>
 8010ffc:	f04f 0a02 	mov.w	sl, #2
 8011000:	4639      	mov	r1, r7
 8011002:	4620      	mov	r0, r4
 8011004:	f7ff fe99 	bl	8010d3a <rshift>
 8011008:	443d      	add	r5, r7
 801100a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801100e:	42ab      	cmp	r3, r5
 8011010:	da4c      	bge.n	80110ac <__gethex+0x2a4>
 8011012:	ee18 0a10 	vmov	r0, s16
 8011016:	4621      	mov	r1, r4
 8011018:	f000 fac4 	bl	80115a4 <_Bfree>
 801101c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801101e:	2300      	movs	r3, #0
 8011020:	6013      	str	r3, [r2, #0]
 8011022:	27a3      	movs	r7, #163	; 0xa3
 8011024:	e785      	b.n	8010f32 <__gethex+0x12a>
 8011026:	1e73      	subs	r3, r6, #1
 8011028:	9a05      	ldr	r2, [sp, #20]
 801102a:	9303      	str	r3, [sp, #12]
 801102c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011030:	4293      	cmp	r3, r2
 8011032:	d019      	beq.n	8011068 <__gethex+0x260>
 8011034:	f1bb 0f20 	cmp.w	fp, #32
 8011038:	d107      	bne.n	801104a <__gethex+0x242>
 801103a:	9b02      	ldr	r3, [sp, #8]
 801103c:	9a00      	ldr	r2, [sp, #0]
 801103e:	f843 2b04 	str.w	r2, [r3], #4
 8011042:	9302      	str	r3, [sp, #8]
 8011044:	2300      	movs	r3, #0
 8011046:	9300      	str	r3, [sp, #0]
 8011048:	469b      	mov	fp, r3
 801104a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801104e:	f7ff fec6 	bl	8010dde <__hexdig_fun>
 8011052:	9b00      	ldr	r3, [sp, #0]
 8011054:	f000 000f 	and.w	r0, r0, #15
 8011058:	fa00 f00b 	lsl.w	r0, r0, fp
 801105c:	4303      	orrs	r3, r0
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	f10b 0b04 	add.w	fp, fp, #4
 8011064:	9b03      	ldr	r3, [sp, #12]
 8011066:	e00d      	b.n	8011084 <__gethex+0x27c>
 8011068:	9b03      	ldr	r3, [sp, #12]
 801106a:	9a06      	ldr	r2, [sp, #24]
 801106c:	4413      	add	r3, r2
 801106e:	42bb      	cmp	r3, r7
 8011070:	d3e0      	bcc.n	8011034 <__gethex+0x22c>
 8011072:	4618      	mov	r0, r3
 8011074:	9901      	ldr	r1, [sp, #4]
 8011076:	9307      	str	r3, [sp, #28]
 8011078:	4652      	mov	r2, sl
 801107a:	f001 fb1c 	bl	80126b6 <strncmp>
 801107e:	9b07      	ldr	r3, [sp, #28]
 8011080:	2800      	cmp	r0, #0
 8011082:	d1d7      	bne.n	8011034 <__gethex+0x22c>
 8011084:	461e      	mov	r6, r3
 8011086:	e78b      	b.n	8010fa0 <__gethex+0x198>
 8011088:	f04f 0a03 	mov.w	sl, #3
 801108c:	e7b8      	b.n	8011000 <__gethex+0x1f8>
 801108e:	da0a      	bge.n	80110a6 <__gethex+0x29e>
 8011090:	1a37      	subs	r7, r6, r0
 8011092:	4621      	mov	r1, r4
 8011094:	ee18 0a10 	vmov	r0, s16
 8011098:	463a      	mov	r2, r7
 801109a:	f000 fc9f 	bl	80119dc <__lshift>
 801109e:	1bed      	subs	r5, r5, r7
 80110a0:	4604      	mov	r4, r0
 80110a2:	f100 0914 	add.w	r9, r0, #20
 80110a6:	f04f 0a00 	mov.w	sl, #0
 80110aa:	e7ae      	b.n	801100a <__gethex+0x202>
 80110ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80110b0:	42a8      	cmp	r0, r5
 80110b2:	dd72      	ble.n	801119a <__gethex+0x392>
 80110b4:	1b45      	subs	r5, r0, r5
 80110b6:	42ae      	cmp	r6, r5
 80110b8:	dc36      	bgt.n	8011128 <__gethex+0x320>
 80110ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	d02a      	beq.n	8011118 <__gethex+0x310>
 80110c2:	2b03      	cmp	r3, #3
 80110c4:	d02c      	beq.n	8011120 <__gethex+0x318>
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d11c      	bne.n	8011104 <__gethex+0x2fc>
 80110ca:	42ae      	cmp	r6, r5
 80110cc:	d11a      	bne.n	8011104 <__gethex+0x2fc>
 80110ce:	2e01      	cmp	r6, #1
 80110d0:	d112      	bne.n	80110f8 <__gethex+0x2f0>
 80110d2:	9a04      	ldr	r2, [sp, #16]
 80110d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	2301      	movs	r3, #1
 80110dc:	6123      	str	r3, [r4, #16]
 80110de:	f8c9 3000 	str.w	r3, [r9]
 80110e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110e4:	2762      	movs	r7, #98	; 0x62
 80110e6:	601c      	str	r4, [r3, #0]
 80110e8:	e723      	b.n	8010f32 <__gethex+0x12a>
 80110ea:	bf00      	nop
 80110ec:	08014454 	.word	0x08014454
 80110f0:	08014378 	.word	0x08014378
 80110f4:	080143ec 	.word	0x080143ec
 80110f8:	1e71      	subs	r1, r6, #1
 80110fa:	4620      	mov	r0, r4
 80110fc:	f000 feb2 	bl	8011e64 <__any_on>
 8011100:	2800      	cmp	r0, #0
 8011102:	d1e6      	bne.n	80110d2 <__gethex+0x2ca>
 8011104:	ee18 0a10 	vmov	r0, s16
 8011108:	4621      	mov	r1, r4
 801110a:	f000 fa4b 	bl	80115a4 <_Bfree>
 801110e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011110:	2300      	movs	r3, #0
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	2750      	movs	r7, #80	; 0x50
 8011116:	e70c      	b.n	8010f32 <__gethex+0x12a>
 8011118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1f2      	bne.n	8011104 <__gethex+0x2fc>
 801111e:	e7d8      	b.n	80110d2 <__gethex+0x2ca>
 8011120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011122:	2b00      	cmp	r3, #0
 8011124:	d1d5      	bne.n	80110d2 <__gethex+0x2ca>
 8011126:	e7ed      	b.n	8011104 <__gethex+0x2fc>
 8011128:	1e6f      	subs	r7, r5, #1
 801112a:	f1ba 0f00 	cmp.w	sl, #0
 801112e:	d131      	bne.n	8011194 <__gethex+0x38c>
 8011130:	b127      	cbz	r7, 801113c <__gethex+0x334>
 8011132:	4639      	mov	r1, r7
 8011134:	4620      	mov	r0, r4
 8011136:	f000 fe95 	bl	8011e64 <__any_on>
 801113a:	4682      	mov	sl, r0
 801113c:	117b      	asrs	r3, r7, #5
 801113e:	2101      	movs	r1, #1
 8011140:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011144:	f007 071f 	and.w	r7, r7, #31
 8011148:	fa01 f707 	lsl.w	r7, r1, r7
 801114c:	421f      	tst	r7, r3
 801114e:	4629      	mov	r1, r5
 8011150:	4620      	mov	r0, r4
 8011152:	bf18      	it	ne
 8011154:	f04a 0a02 	orrne.w	sl, sl, #2
 8011158:	1b76      	subs	r6, r6, r5
 801115a:	f7ff fdee 	bl	8010d3a <rshift>
 801115e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011162:	2702      	movs	r7, #2
 8011164:	f1ba 0f00 	cmp.w	sl, #0
 8011168:	d048      	beq.n	80111fc <__gethex+0x3f4>
 801116a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801116e:	2b02      	cmp	r3, #2
 8011170:	d015      	beq.n	801119e <__gethex+0x396>
 8011172:	2b03      	cmp	r3, #3
 8011174:	d017      	beq.n	80111a6 <__gethex+0x39e>
 8011176:	2b01      	cmp	r3, #1
 8011178:	d109      	bne.n	801118e <__gethex+0x386>
 801117a:	f01a 0f02 	tst.w	sl, #2
 801117e:	d006      	beq.n	801118e <__gethex+0x386>
 8011180:	f8d9 0000 	ldr.w	r0, [r9]
 8011184:	ea4a 0a00 	orr.w	sl, sl, r0
 8011188:	f01a 0f01 	tst.w	sl, #1
 801118c:	d10e      	bne.n	80111ac <__gethex+0x3a4>
 801118e:	f047 0710 	orr.w	r7, r7, #16
 8011192:	e033      	b.n	80111fc <__gethex+0x3f4>
 8011194:	f04f 0a01 	mov.w	sl, #1
 8011198:	e7d0      	b.n	801113c <__gethex+0x334>
 801119a:	2701      	movs	r7, #1
 801119c:	e7e2      	b.n	8011164 <__gethex+0x35c>
 801119e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111a0:	f1c3 0301 	rsb	r3, r3, #1
 80111a4:	9315      	str	r3, [sp, #84]	; 0x54
 80111a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d0f0      	beq.n	801118e <__gethex+0x386>
 80111ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80111b0:	f104 0314 	add.w	r3, r4, #20
 80111b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80111b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80111bc:	f04f 0c00 	mov.w	ip, #0
 80111c0:	4618      	mov	r0, r3
 80111c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80111c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80111ca:	d01c      	beq.n	8011206 <__gethex+0x3fe>
 80111cc:	3201      	adds	r2, #1
 80111ce:	6002      	str	r2, [r0, #0]
 80111d0:	2f02      	cmp	r7, #2
 80111d2:	f104 0314 	add.w	r3, r4, #20
 80111d6:	d13f      	bne.n	8011258 <__gethex+0x450>
 80111d8:	f8d8 2000 	ldr.w	r2, [r8]
 80111dc:	3a01      	subs	r2, #1
 80111de:	42b2      	cmp	r2, r6
 80111e0:	d10a      	bne.n	80111f8 <__gethex+0x3f0>
 80111e2:	1171      	asrs	r1, r6, #5
 80111e4:	2201      	movs	r2, #1
 80111e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111ea:	f006 061f 	and.w	r6, r6, #31
 80111ee:	fa02 f606 	lsl.w	r6, r2, r6
 80111f2:	421e      	tst	r6, r3
 80111f4:	bf18      	it	ne
 80111f6:	4617      	movne	r7, r2
 80111f8:	f047 0720 	orr.w	r7, r7, #32
 80111fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80111fe:	601c      	str	r4, [r3, #0]
 8011200:	9b04      	ldr	r3, [sp, #16]
 8011202:	601d      	str	r5, [r3, #0]
 8011204:	e695      	b.n	8010f32 <__gethex+0x12a>
 8011206:	4299      	cmp	r1, r3
 8011208:	f843 cc04 	str.w	ip, [r3, #-4]
 801120c:	d8d8      	bhi.n	80111c0 <__gethex+0x3b8>
 801120e:	68a3      	ldr	r3, [r4, #8]
 8011210:	459b      	cmp	fp, r3
 8011212:	db19      	blt.n	8011248 <__gethex+0x440>
 8011214:	6861      	ldr	r1, [r4, #4]
 8011216:	ee18 0a10 	vmov	r0, s16
 801121a:	3101      	adds	r1, #1
 801121c:	f000 f982 	bl	8011524 <_Balloc>
 8011220:	4681      	mov	r9, r0
 8011222:	b918      	cbnz	r0, 801122c <__gethex+0x424>
 8011224:	4b1a      	ldr	r3, [pc, #104]	; (8011290 <__gethex+0x488>)
 8011226:	4602      	mov	r2, r0
 8011228:	2184      	movs	r1, #132	; 0x84
 801122a:	e6a8      	b.n	8010f7e <__gethex+0x176>
 801122c:	6922      	ldr	r2, [r4, #16]
 801122e:	3202      	adds	r2, #2
 8011230:	f104 010c 	add.w	r1, r4, #12
 8011234:	0092      	lsls	r2, r2, #2
 8011236:	300c      	adds	r0, #12
 8011238:	f7fc fe84 	bl	800df44 <memcpy>
 801123c:	4621      	mov	r1, r4
 801123e:	ee18 0a10 	vmov	r0, s16
 8011242:	f000 f9af 	bl	80115a4 <_Bfree>
 8011246:	464c      	mov	r4, r9
 8011248:	6923      	ldr	r3, [r4, #16]
 801124a:	1c5a      	adds	r2, r3, #1
 801124c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011250:	6122      	str	r2, [r4, #16]
 8011252:	2201      	movs	r2, #1
 8011254:	615a      	str	r2, [r3, #20]
 8011256:	e7bb      	b.n	80111d0 <__gethex+0x3c8>
 8011258:	6922      	ldr	r2, [r4, #16]
 801125a:	455a      	cmp	r2, fp
 801125c:	dd0b      	ble.n	8011276 <__gethex+0x46e>
 801125e:	2101      	movs	r1, #1
 8011260:	4620      	mov	r0, r4
 8011262:	f7ff fd6a 	bl	8010d3a <rshift>
 8011266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801126a:	3501      	adds	r5, #1
 801126c:	42ab      	cmp	r3, r5
 801126e:	f6ff aed0 	blt.w	8011012 <__gethex+0x20a>
 8011272:	2701      	movs	r7, #1
 8011274:	e7c0      	b.n	80111f8 <__gethex+0x3f0>
 8011276:	f016 061f 	ands.w	r6, r6, #31
 801127a:	d0fa      	beq.n	8011272 <__gethex+0x46a>
 801127c:	4453      	add	r3, sl
 801127e:	f1c6 0620 	rsb	r6, r6, #32
 8011282:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011286:	f000 fa3f 	bl	8011708 <__hi0bits>
 801128a:	42b0      	cmp	r0, r6
 801128c:	dbe7      	blt.n	801125e <__gethex+0x456>
 801128e:	e7f0      	b.n	8011272 <__gethex+0x46a>
 8011290:	08014378 	.word	0x08014378

08011294 <L_shift>:
 8011294:	f1c2 0208 	rsb	r2, r2, #8
 8011298:	0092      	lsls	r2, r2, #2
 801129a:	b570      	push	{r4, r5, r6, lr}
 801129c:	f1c2 0620 	rsb	r6, r2, #32
 80112a0:	6843      	ldr	r3, [r0, #4]
 80112a2:	6804      	ldr	r4, [r0, #0]
 80112a4:	fa03 f506 	lsl.w	r5, r3, r6
 80112a8:	432c      	orrs	r4, r5
 80112aa:	40d3      	lsrs	r3, r2
 80112ac:	6004      	str	r4, [r0, #0]
 80112ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80112b2:	4288      	cmp	r0, r1
 80112b4:	d3f4      	bcc.n	80112a0 <L_shift+0xc>
 80112b6:	bd70      	pop	{r4, r5, r6, pc}

080112b8 <__match>:
 80112b8:	b530      	push	{r4, r5, lr}
 80112ba:	6803      	ldr	r3, [r0, #0]
 80112bc:	3301      	adds	r3, #1
 80112be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c2:	b914      	cbnz	r4, 80112ca <__match+0x12>
 80112c4:	6003      	str	r3, [r0, #0]
 80112c6:	2001      	movs	r0, #1
 80112c8:	bd30      	pop	{r4, r5, pc}
 80112ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80112d2:	2d19      	cmp	r5, #25
 80112d4:	bf98      	it	ls
 80112d6:	3220      	addls	r2, #32
 80112d8:	42a2      	cmp	r2, r4
 80112da:	d0f0      	beq.n	80112be <__match+0x6>
 80112dc:	2000      	movs	r0, #0
 80112de:	e7f3      	b.n	80112c8 <__match+0x10>

080112e0 <__hexnan>:
 80112e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e4:	680b      	ldr	r3, [r1, #0]
 80112e6:	115e      	asrs	r6, r3, #5
 80112e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80112ec:	f013 031f 	ands.w	r3, r3, #31
 80112f0:	b087      	sub	sp, #28
 80112f2:	bf18      	it	ne
 80112f4:	3604      	addne	r6, #4
 80112f6:	2500      	movs	r5, #0
 80112f8:	1f37      	subs	r7, r6, #4
 80112fa:	4690      	mov	r8, r2
 80112fc:	6802      	ldr	r2, [r0, #0]
 80112fe:	9301      	str	r3, [sp, #4]
 8011300:	4682      	mov	sl, r0
 8011302:	f846 5c04 	str.w	r5, [r6, #-4]
 8011306:	46b9      	mov	r9, r7
 8011308:	463c      	mov	r4, r7
 801130a:	9502      	str	r5, [sp, #8]
 801130c:	46ab      	mov	fp, r5
 801130e:	7851      	ldrb	r1, [r2, #1]
 8011310:	1c53      	adds	r3, r2, #1
 8011312:	9303      	str	r3, [sp, #12]
 8011314:	b341      	cbz	r1, 8011368 <__hexnan+0x88>
 8011316:	4608      	mov	r0, r1
 8011318:	9205      	str	r2, [sp, #20]
 801131a:	9104      	str	r1, [sp, #16]
 801131c:	f7ff fd5f 	bl	8010dde <__hexdig_fun>
 8011320:	2800      	cmp	r0, #0
 8011322:	d14f      	bne.n	80113c4 <__hexnan+0xe4>
 8011324:	9904      	ldr	r1, [sp, #16]
 8011326:	9a05      	ldr	r2, [sp, #20]
 8011328:	2920      	cmp	r1, #32
 801132a:	d818      	bhi.n	801135e <__hexnan+0x7e>
 801132c:	9b02      	ldr	r3, [sp, #8]
 801132e:	459b      	cmp	fp, r3
 8011330:	dd13      	ble.n	801135a <__hexnan+0x7a>
 8011332:	454c      	cmp	r4, r9
 8011334:	d206      	bcs.n	8011344 <__hexnan+0x64>
 8011336:	2d07      	cmp	r5, #7
 8011338:	dc04      	bgt.n	8011344 <__hexnan+0x64>
 801133a:	462a      	mov	r2, r5
 801133c:	4649      	mov	r1, r9
 801133e:	4620      	mov	r0, r4
 8011340:	f7ff ffa8 	bl	8011294 <L_shift>
 8011344:	4544      	cmp	r4, r8
 8011346:	d950      	bls.n	80113ea <__hexnan+0x10a>
 8011348:	2300      	movs	r3, #0
 801134a:	f1a4 0904 	sub.w	r9, r4, #4
 801134e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011352:	f8cd b008 	str.w	fp, [sp, #8]
 8011356:	464c      	mov	r4, r9
 8011358:	461d      	mov	r5, r3
 801135a:	9a03      	ldr	r2, [sp, #12]
 801135c:	e7d7      	b.n	801130e <__hexnan+0x2e>
 801135e:	2929      	cmp	r1, #41	; 0x29
 8011360:	d156      	bne.n	8011410 <__hexnan+0x130>
 8011362:	3202      	adds	r2, #2
 8011364:	f8ca 2000 	str.w	r2, [sl]
 8011368:	f1bb 0f00 	cmp.w	fp, #0
 801136c:	d050      	beq.n	8011410 <__hexnan+0x130>
 801136e:	454c      	cmp	r4, r9
 8011370:	d206      	bcs.n	8011380 <__hexnan+0xa0>
 8011372:	2d07      	cmp	r5, #7
 8011374:	dc04      	bgt.n	8011380 <__hexnan+0xa0>
 8011376:	462a      	mov	r2, r5
 8011378:	4649      	mov	r1, r9
 801137a:	4620      	mov	r0, r4
 801137c:	f7ff ff8a 	bl	8011294 <L_shift>
 8011380:	4544      	cmp	r4, r8
 8011382:	d934      	bls.n	80113ee <__hexnan+0x10e>
 8011384:	f1a8 0204 	sub.w	r2, r8, #4
 8011388:	4623      	mov	r3, r4
 801138a:	f853 1b04 	ldr.w	r1, [r3], #4
 801138e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011392:	429f      	cmp	r7, r3
 8011394:	d2f9      	bcs.n	801138a <__hexnan+0xaa>
 8011396:	1b3b      	subs	r3, r7, r4
 8011398:	f023 0303 	bic.w	r3, r3, #3
 801139c:	3304      	adds	r3, #4
 801139e:	3401      	adds	r4, #1
 80113a0:	3e03      	subs	r6, #3
 80113a2:	42b4      	cmp	r4, r6
 80113a4:	bf88      	it	hi
 80113a6:	2304      	movhi	r3, #4
 80113a8:	4443      	add	r3, r8
 80113aa:	2200      	movs	r2, #0
 80113ac:	f843 2b04 	str.w	r2, [r3], #4
 80113b0:	429f      	cmp	r7, r3
 80113b2:	d2fb      	bcs.n	80113ac <__hexnan+0xcc>
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	b91b      	cbnz	r3, 80113c0 <__hexnan+0xe0>
 80113b8:	4547      	cmp	r7, r8
 80113ba:	d127      	bne.n	801140c <__hexnan+0x12c>
 80113bc:	2301      	movs	r3, #1
 80113be:	603b      	str	r3, [r7, #0]
 80113c0:	2005      	movs	r0, #5
 80113c2:	e026      	b.n	8011412 <__hexnan+0x132>
 80113c4:	3501      	adds	r5, #1
 80113c6:	2d08      	cmp	r5, #8
 80113c8:	f10b 0b01 	add.w	fp, fp, #1
 80113cc:	dd06      	ble.n	80113dc <__hexnan+0xfc>
 80113ce:	4544      	cmp	r4, r8
 80113d0:	d9c3      	bls.n	801135a <__hexnan+0x7a>
 80113d2:	2300      	movs	r3, #0
 80113d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80113d8:	2501      	movs	r5, #1
 80113da:	3c04      	subs	r4, #4
 80113dc:	6822      	ldr	r2, [r4, #0]
 80113de:	f000 000f 	and.w	r0, r0, #15
 80113e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80113e6:	6022      	str	r2, [r4, #0]
 80113e8:	e7b7      	b.n	801135a <__hexnan+0x7a>
 80113ea:	2508      	movs	r5, #8
 80113ec:	e7b5      	b.n	801135a <__hexnan+0x7a>
 80113ee:	9b01      	ldr	r3, [sp, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d0df      	beq.n	80113b4 <__hexnan+0xd4>
 80113f4:	f04f 32ff 	mov.w	r2, #4294967295
 80113f8:	f1c3 0320 	rsb	r3, r3, #32
 80113fc:	fa22 f303 	lsr.w	r3, r2, r3
 8011400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011404:	401a      	ands	r2, r3
 8011406:	f846 2c04 	str.w	r2, [r6, #-4]
 801140a:	e7d3      	b.n	80113b4 <__hexnan+0xd4>
 801140c:	3f04      	subs	r7, #4
 801140e:	e7d1      	b.n	80113b4 <__hexnan+0xd4>
 8011410:	2004      	movs	r0, #4
 8011412:	b007      	add	sp, #28
 8011414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011418 <_localeconv_r>:
 8011418:	4800      	ldr	r0, [pc, #0]	; (801141c <_localeconv_r+0x4>)
 801141a:	4770      	bx	lr
 801141c:	20000184 	.word	0x20000184

08011420 <__retarget_lock_init_recursive>:
 8011420:	4770      	bx	lr

08011422 <__retarget_lock_acquire_recursive>:
 8011422:	4770      	bx	lr

08011424 <__retarget_lock_release_recursive>:
 8011424:	4770      	bx	lr

08011426 <__swhatbuf_r>:
 8011426:	b570      	push	{r4, r5, r6, lr}
 8011428:	460e      	mov	r6, r1
 801142a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801142e:	2900      	cmp	r1, #0
 8011430:	b096      	sub	sp, #88	; 0x58
 8011432:	4614      	mov	r4, r2
 8011434:	461d      	mov	r5, r3
 8011436:	da08      	bge.n	801144a <__swhatbuf_r+0x24>
 8011438:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801143c:	2200      	movs	r2, #0
 801143e:	602a      	str	r2, [r5, #0]
 8011440:	061a      	lsls	r2, r3, #24
 8011442:	d410      	bmi.n	8011466 <__swhatbuf_r+0x40>
 8011444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011448:	e00e      	b.n	8011468 <__swhatbuf_r+0x42>
 801144a:	466a      	mov	r2, sp
 801144c:	f001 f9a6 	bl	801279c <_fstat_r>
 8011450:	2800      	cmp	r0, #0
 8011452:	dbf1      	blt.n	8011438 <__swhatbuf_r+0x12>
 8011454:	9a01      	ldr	r2, [sp, #4]
 8011456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801145a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801145e:	425a      	negs	r2, r3
 8011460:	415a      	adcs	r2, r3
 8011462:	602a      	str	r2, [r5, #0]
 8011464:	e7ee      	b.n	8011444 <__swhatbuf_r+0x1e>
 8011466:	2340      	movs	r3, #64	; 0x40
 8011468:	2000      	movs	r0, #0
 801146a:	6023      	str	r3, [r4, #0]
 801146c:	b016      	add	sp, #88	; 0x58
 801146e:	bd70      	pop	{r4, r5, r6, pc}

08011470 <__smakebuf_r>:
 8011470:	898b      	ldrh	r3, [r1, #12]
 8011472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011474:	079d      	lsls	r5, r3, #30
 8011476:	4606      	mov	r6, r0
 8011478:	460c      	mov	r4, r1
 801147a:	d507      	bpl.n	801148c <__smakebuf_r+0x1c>
 801147c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	6123      	str	r3, [r4, #16]
 8011484:	2301      	movs	r3, #1
 8011486:	6163      	str	r3, [r4, #20]
 8011488:	b002      	add	sp, #8
 801148a:	bd70      	pop	{r4, r5, r6, pc}
 801148c:	ab01      	add	r3, sp, #4
 801148e:	466a      	mov	r2, sp
 8011490:	f7ff ffc9 	bl	8011426 <__swhatbuf_r>
 8011494:	9900      	ldr	r1, [sp, #0]
 8011496:	4605      	mov	r5, r0
 8011498:	4630      	mov	r0, r6
 801149a:	f000 fd87 	bl	8011fac <_malloc_r>
 801149e:	b948      	cbnz	r0, 80114b4 <__smakebuf_r+0x44>
 80114a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114a4:	059a      	lsls	r2, r3, #22
 80114a6:	d4ef      	bmi.n	8011488 <__smakebuf_r+0x18>
 80114a8:	f023 0303 	bic.w	r3, r3, #3
 80114ac:	f043 0302 	orr.w	r3, r3, #2
 80114b0:	81a3      	strh	r3, [r4, #12]
 80114b2:	e7e3      	b.n	801147c <__smakebuf_r+0xc>
 80114b4:	4b0d      	ldr	r3, [pc, #52]	; (80114ec <__smakebuf_r+0x7c>)
 80114b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	6020      	str	r0, [r4, #0]
 80114bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c0:	81a3      	strh	r3, [r4, #12]
 80114c2:	9b00      	ldr	r3, [sp, #0]
 80114c4:	6163      	str	r3, [r4, #20]
 80114c6:	9b01      	ldr	r3, [sp, #4]
 80114c8:	6120      	str	r0, [r4, #16]
 80114ca:	b15b      	cbz	r3, 80114e4 <__smakebuf_r+0x74>
 80114cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114d0:	4630      	mov	r0, r6
 80114d2:	f001 f975 	bl	80127c0 <_isatty_r>
 80114d6:	b128      	cbz	r0, 80114e4 <__smakebuf_r+0x74>
 80114d8:	89a3      	ldrh	r3, [r4, #12]
 80114da:	f023 0303 	bic.w	r3, r3, #3
 80114de:	f043 0301 	orr.w	r3, r3, #1
 80114e2:	81a3      	strh	r3, [r4, #12]
 80114e4:	89a0      	ldrh	r0, [r4, #12]
 80114e6:	4305      	orrs	r5, r0
 80114e8:	81a5      	strh	r5, [r4, #12]
 80114ea:	e7cd      	b.n	8011488 <__smakebuf_r+0x18>
 80114ec:	08010b99 	.word	0x08010b99

080114f0 <malloc>:
 80114f0:	4b02      	ldr	r3, [pc, #8]	; (80114fc <malloc+0xc>)
 80114f2:	4601      	mov	r1, r0
 80114f4:	6818      	ldr	r0, [r3, #0]
 80114f6:	f000 bd59 	b.w	8011fac <_malloc_r>
 80114fa:	bf00      	nop
 80114fc:	2000002c 	.word	0x2000002c

08011500 <__ascii_mbtowc>:
 8011500:	b082      	sub	sp, #8
 8011502:	b901      	cbnz	r1, 8011506 <__ascii_mbtowc+0x6>
 8011504:	a901      	add	r1, sp, #4
 8011506:	b142      	cbz	r2, 801151a <__ascii_mbtowc+0x1a>
 8011508:	b14b      	cbz	r3, 801151e <__ascii_mbtowc+0x1e>
 801150a:	7813      	ldrb	r3, [r2, #0]
 801150c:	600b      	str	r3, [r1, #0]
 801150e:	7812      	ldrb	r2, [r2, #0]
 8011510:	1e10      	subs	r0, r2, #0
 8011512:	bf18      	it	ne
 8011514:	2001      	movne	r0, #1
 8011516:	b002      	add	sp, #8
 8011518:	4770      	bx	lr
 801151a:	4610      	mov	r0, r2
 801151c:	e7fb      	b.n	8011516 <__ascii_mbtowc+0x16>
 801151e:	f06f 0001 	mvn.w	r0, #1
 8011522:	e7f8      	b.n	8011516 <__ascii_mbtowc+0x16>

08011524 <_Balloc>:
 8011524:	b570      	push	{r4, r5, r6, lr}
 8011526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011528:	4604      	mov	r4, r0
 801152a:	460d      	mov	r5, r1
 801152c:	b976      	cbnz	r6, 801154c <_Balloc+0x28>
 801152e:	2010      	movs	r0, #16
 8011530:	f7ff ffde 	bl	80114f0 <malloc>
 8011534:	4602      	mov	r2, r0
 8011536:	6260      	str	r0, [r4, #36]	; 0x24
 8011538:	b920      	cbnz	r0, 8011544 <_Balloc+0x20>
 801153a:	4b18      	ldr	r3, [pc, #96]	; (801159c <_Balloc+0x78>)
 801153c:	4818      	ldr	r0, [pc, #96]	; (80115a0 <_Balloc+0x7c>)
 801153e:	2166      	movs	r1, #102	; 0x66
 8011540:	f001 f8ec 	bl	801271c <__assert_func>
 8011544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011548:	6006      	str	r6, [r0, #0]
 801154a:	60c6      	str	r6, [r0, #12]
 801154c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801154e:	68f3      	ldr	r3, [r6, #12]
 8011550:	b183      	cbz	r3, 8011574 <_Balloc+0x50>
 8011552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801155a:	b9b8      	cbnz	r0, 801158c <_Balloc+0x68>
 801155c:	2101      	movs	r1, #1
 801155e:	fa01 f605 	lsl.w	r6, r1, r5
 8011562:	1d72      	adds	r2, r6, #5
 8011564:	0092      	lsls	r2, r2, #2
 8011566:	4620      	mov	r0, r4
 8011568:	f000 fc9d 	bl	8011ea6 <_calloc_r>
 801156c:	b160      	cbz	r0, 8011588 <_Balloc+0x64>
 801156e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011572:	e00e      	b.n	8011592 <_Balloc+0x6e>
 8011574:	2221      	movs	r2, #33	; 0x21
 8011576:	2104      	movs	r1, #4
 8011578:	4620      	mov	r0, r4
 801157a:	f000 fc94 	bl	8011ea6 <_calloc_r>
 801157e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011580:	60f0      	str	r0, [r6, #12]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d1e4      	bne.n	8011552 <_Balloc+0x2e>
 8011588:	2000      	movs	r0, #0
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	6802      	ldr	r2, [r0, #0]
 801158e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011592:	2300      	movs	r3, #0
 8011594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011598:	e7f7      	b.n	801158a <_Balloc+0x66>
 801159a:	bf00      	nop
 801159c:	08014306 	.word	0x08014306
 80115a0:	08014468 	.word	0x08014468

080115a4 <_Bfree>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115a8:	4605      	mov	r5, r0
 80115aa:	460c      	mov	r4, r1
 80115ac:	b976      	cbnz	r6, 80115cc <_Bfree+0x28>
 80115ae:	2010      	movs	r0, #16
 80115b0:	f7ff ff9e 	bl	80114f0 <malloc>
 80115b4:	4602      	mov	r2, r0
 80115b6:	6268      	str	r0, [r5, #36]	; 0x24
 80115b8:	b920      	cbnz	r0, 80115c4 <_Bfree+0x20>
 80115ba:	4b09      	ldr	r3, [pc, #36]	; (80115e0 <_Bfree+0x3c>)
 80115bc:	4809      	ldr	r0, [pc, #36]	; (80115e4 <_Bfree+0x40>)
 80115be:	218a      	movs	r1, #138	; 0x8a
 80115c0:	f001 f8ac 	bl	801271c <__assert_func>
 80115c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115c8:	6006      	str	r6, [r0, #0]
 80115ca:	60c6      	str	r6, [r0, #12]
 80115cc:	b13c      	cbz	r4, 80115de <_Bfree+0x3a>
 80115ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115d0:	6862      	ldr	r2, [r4, #4]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115d8:	6021      	str	r1, [r4, #0]
 80115da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	08014306 	.word	0x08014306
 80115e4:	08014468 	.word	0x08014468

080115e8 <__multadd>:
 80115e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ec:	690d      	ldr	r5, [r1, #16]
 80115ee:	4607      	mov	r7, r0
 80115f0:	460c      	mov	r4, r1
 80115f2:	461e      	mov	r6, r3
 80115f4:	f101 0c14 	add.w	ip, r1, #20
 80115f8:	2000      	movs	r0, #0
 80115fa:	f8dc 3000 	ldr.w	r3, [ip]
 80115fe:	b299      	uxth	r1, r3
 8011600:	fb02 6101 	mla	r1, r2, r1, r6
 8011604:	0c1e      	lsrs	r6, r3, #16
 8011606:	0c0b      	lsrs	r3, r1, #16
 8011608:	fb02 3306 	mla	r3, r2, r6, r3
 801160c:	b289      	uxth	r1, r1
 801160e:	3001      	adds	r0, #1
 8011610:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011614:	4285      	cmp	r5, r0
 8011616:	f84c 1b04 	str.w	r1, [ip], #4
 801161a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801161e:	dcec      	bgt.n	80115fa <__multadd+0x12>
 8011620:	b30e      	cbz	r6, 8011666 <__multadd+0x7e>
 8011622:	68a3      	ldr	r3, [r4, #8]
 8011624:	42ab      	cmp	r3, r5
 8011626:	dc19      	bgt.n	801165c <__multadd+0x74>
 8011628:	6861      	ldr	r1, [r4, #4]
 801162a:	4638      	mov	r0, r7
 801162c:	3101      	adds	r1, #1
 801162e:	f7ff ff79 	bl	8011524 <_Balloc>
 8011632:	4680      	mov	r8, r0
 8011634:	b928      	cbnz	r0, 8011642 <__multadd+0x5a>
 8011636:	4602      	mov	r2, r0
 8011638:	4b0c      	ldr	r3, [pc, #48]	; (801166c <__multadd+0x84>)
 801163a:	480d      	ldr	r0, [pc, #52]	; (8011670 <__multadd+0x88>)
 801163c:	21b5      	movs	r1, #181	; 0xb5
 801163e:	f001 f86d 	bl	801271c <__assert_func>
 8011642:	6922      	ldr	r2, [r4, #16]
 8011644:	3202      	adds	r2, #2
 8011646:	f104 010c 	add.w	r1, r4, #12
 801164a:	0092      	lsls	r2, r2, #2
 801164c:	300c      	adds	r0, #12
 801164e:	f7fc fc79 	bl	800df44 <memcpy>
 8011652:	4621      	mov	r1, r4
 8011654:	4638      	mov	r0, r7
 8011656:	f7ff ffa5 	bl	80115a4 <_Bfree>
 801165a:	4644      	mov	r4, r8
 801165c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011660:	3501      	adds	r5, #1
 8011662:	615e      	str	r6, [r3, #20]
 8011664:	6125      	str	r5, [r4, #16]
 8011666:	4620      	mov	r0, r4
 8011668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801166c:	08014378 	.word	0x08014378
 8011670:	08014468 	.word	0x08014468

08011674 <__s2b>:
 8011674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011678:	460c      	mov	r4, r1
 801167a:	4615      	mov	r5, r2
 801167c:	461f      	mov	r7, r3
 801167e:	2209      	movs	r2, #9
 8011680:	3308      	adds	r3, #8
 8011682:	4606      	mov	r6, r0
 8011684:	fb93 f3f2 	sdiv	r3, r3, r2
 8011688:	2100      	movs	r1, #0
 801168a:	2201      	movs	r2, #1
 801168c:	429a      	cmp	r2, r3
 801168e:	db09      	blt.n	80116a4 <__s2b+0x30>
 8011690:	4630      	mov	r0, r6
 8011692:	f7ff ff47 	bl	8011524 <_Balloc>
 8011696:	b940      	cbnz	r0, 80116aa <__s2b+0x36>
 8011698:	4602      	mov	r2, r0
 801169a:	4b19      	ldr	r3, [pc, #100]	; (8011700 <__s2b+0x8c>)
 801169c:	4819      	ldr	r0, [pc, #100]	; (8011704 <__s2b+0x90>)
 801169e:	21ce      	movs	r1, #206	; 0xce
 80116a0:	f001 f83c 	bl	801271c <__assert_func>
 80116a4:	0052      	lsls	r2, r2, #1
 80116a6:	3101      	adds	r1, #1
 80116a8:	e7f0      	b.n	801168c <__s2b+0x18>
 80116aa:	9b08      	ldr	r3, [sp, #32]
 80116ac:	6143      	str	r3, [r0, #20]
 80116ae:	2d09      	cmp	r5, #9
 80116b0:	f04f 0301 	mov.w	r3, #1
 80116b4:	6103      	str	r3, [r0, #16]
 80116b6:	dd16      	ble.n	80116e6 <__s2b+0x72>
 80116b8:	f104 0909 	add.w	r9, r4, #9
 80116bc:	46c8      	mov	r8, r9
 80116be:	442c      	add	r4, r5
 80116c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80116c4:	4601      	mov	r1, r0
 80116c6:	3b30      	subs	r3, #48	; 0x30
 80116c8:	220a      	movs	r2, #10
 80116ca:	4630      	mov	r0, r6
 80116cc:	f7ff ff8c 	bl	80115e8 <__multadd>
 80116d0:	45a0      	cmp	r8, r4
 80116d2:	d1f5      	bne.n	80116c0 <__s2b+0x4c>
 80116d4:	f1a5 0408 	sub.w	r4, r5, #8
 80116d8:	444c      	add	r4, r9
 80116da:	1b2d      	subs	r5, r5, r4
 80116dc:	1963      	adds	r3, r4, r5
 80116de:	42bb      	cmp	r3, r7
 80116e0:	db04      	blt.n	80116ec <__s2b+0x78>
 80116e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e6:	340a      	adds	r4, #10
 80116e8:	2509      	movs	r5, #9
 80116ea:	e7f6      	b.n	80116da <__s2b+0x66>
 80116ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116f0:	4601      	mov	r1, r0
 80116f2:	3b30      	subs	r3, #48	; 0x30
 80116f4:	220a      	movs	r2, #10
 80116f6:	4630      	mov	r0, r6
 80116f8:	f7ff ff76 	bl	80115e8 <__multadd>
 80116fc:	e7ee      	b.n	80116dc <__s2b+0x68>
 80116fe:	bf00      	nop
 8011700:	08014378 	.word	0x08014378
 8011704:	08014468 	.word	0x08014468

08011708 <__hi0bits>:
 8011708:	0c03      	lsrs	r3, r0, #16
 801170a:	041b      	lsls	r3, r3, #16
 801170c:	b9d3      	cbnz	r3, 8011744 <__hi0bits+0x3c>
 801170e:	0400      	lsls	r0, r0, #16
 8011710:	2310      	movs	r3, #16
 8011712:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011716:	bf04      	itt	eq
 8011718:	0200      	lsleq	r0, r0, #8
 801171a:	3308      	addeq	r3, #8
 801171c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011720:	bf04      	itt	eq
 8011722:	0100      	lsleq	r0, r0, #4
 8011724:	3304      	addeq	r3, #4
 8011726:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801172a:	bf04      	itt	eq
 801172c:	0080      	lsleq	r0, r0, #2
 801172e:	3302      	addeq	r3, #2
 8011730:	2800      	cmp	r0, #0
 8011732:	db05      	blt.n	8011740 <__hi0bits+0x38>
 8011734:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011738:	f103 0301 	add.w	r3, r3, #1
 801173c:	bf08      	it	eq
 801173e:	2320      	moveq	r3, #32
 8011740:	4618      	mov	r0, r3
 8011742:	4770      	bx	lr
 8011744:	2300      	movs	r3, #0
 8011746:	e7e4      	b.n	8011712 <__hi0bits+0xa>

08011748 <__lo0bits>:
 8011748:	6803      	ldr	r3, [r0, #0]
 801174a:	f013 0207 	ands.w	r2, r3, #7
 801174e:	4601      	mov	r1, r0
 8011750:	d00b      	beq.n	801176a <__lo0bits+0x22>
 8011752:	07da      	lsls	r2, r3, #31
 8011754:	d423      	bmi.n	801179e <__lo0bits+0x56>
 8011756:	0798      	lsls	r0, r3, #30
 8011758:	bf49      	itett	mi
 801175a:	085b      	lsrmi	r3, r3, #1
 801175c:	089b      	lsrpl	r3, r3, #2
 801175e:	2001      	movmi	r0, #1
 8011760:	600b      	strmi	r3, [r1, #0]
 8011762:	bf5c      	itt	pl
 8011764:	600b      	strpl	r3, [r1, #0]
 8011766:	2002      	movpl	r0, #2
 8011768:	4770      	bx	lr
 801176a:	b298      	uxth	r0, r3
 801176c:	b9a8      	cbnz	r0, 801179a <__lo0bits+0x52>
 801176e:	0c1b      	lsrs	r3, r3, #16
 8011770:	2010      	movs	r0, #16
 8011772:	b2da      	uxtb	r2, r3
 8011774:	b90a      	cbnz	r2, 801177a <__lo0bits+0x32>
 8011776:	3008      	adds	r0, #8
 8011778:	0a1b      	lsrs	r3, r3, #8
 801177a:	071a      	lsls	r2, r3, #28
 801177c:	bf04      	itt	eq
 801177e:	091b      	lsreq	r3, r3, #4
 8011780:	3004      	addeq	r0, #4
 8011782:	079a      	lsls	r2, r3, #30
 8011784:	bf04      	itt	eq
 8011786:	089b      	lsreq	r3, r3, #2
 8011788:	3002      	addeq	r0, #2
 801178a:	07da      	lsls	r2, r3, #31
 801178c:	d403      	bmi.n	8011796 <__lo0bits+0x4e>
 801178e:	085b      	lsrs	r3, r3, #1
 8011790:	f100 0001 	add.w	r0, r0, #1
 8011794:	d005      	beq.n	80117a2 <__lo0bits+0x5a>
 8011796:	600b      	str	r3, [r1, #0]
 8011798:	4770      	bx	lr
 801179a:	4610      	mov	r0, r2
 801179c:	e7e9      	b.n	8011772 <__lo0bits+0x2a>
 801179e:	2000      	movs	r0, #0
 80117a0:	4770      	bx	lr
 80117a2:	2020      	movs	r0, #32
 80117a4:	4770      	bx	lr
	...

080117a8 <__i2b>:
 80117a8:	b510      	push	{r4, lr}
 80117aa:	460c      	mov	r4, r1
 80117ac:	2101      	movs	r1, #1
 80117ae:	f7ff feb9 	bl	8011524 <_Balloc>
 80117b2:	4602      	mov	r2, r0
 80117b4:	b928      	cbnz	r0, 80117c2 <__i2b+0x1a>
 80117b6:	4b05      	ldr	r3, [pc, #20]	; (80117cc <__i2b+0x24>)
 80117b8:	4805      	ldr	r0, [pc, #20]	; (80117d0 <__i2b+0x28>)
 80117ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80117be:	f000 ffad 	bl	801271c <__assert_func>
 80117c2:	2301      	movs	r3, #1
 80117c4:	6144      	str	r4, [r0, #20]
 80117c6:	6103      	str	r3, [r0, #16]
 80117c8:	bd10      	pop	{r4, pc}
 80117ca:	bf00      	nop
 80117cc:	08014378 	.word	0x08014378
 80117d0:	08014468 	.word	0x08014468

080117d4 <__multiply>:
 80117d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	4691      	mov	r9, r2
 80117da:	690a      	ldr	r2, [r1, #16]
 80117dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	bfb8      	it	lt
 80117e4:	460b      	movlt	r3, r1
 80117e6:	460c      	mov	r4, r1
 80117e8:	bfbc      	itt	lt
 80117ea:	464c      	movlt	r4, r9
 80117ec:	4699      	movlt	r9, r3
 80117ee:	6927      	ldr	r7, [r4, #16]
 80117f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117f4:	68a3      	ldr	r3, [r4, #8]
 80117f6:	6861      	ldr	r1, [r4, #4]
 80117f8:	eb07 060a 	add.w	r6, r7, sl
 80117fc:	42b3      	cmp	r3, r6
 80117fe:	b085      	sub	sp, #20
 8011800:	bfb8      	it	lt
 8011802:	3101      	addlt	r1, #1
 8011804:	f7ff fe8e 	bl	8011524 <_Balloc>
 8011808:	b930      	cbnz	r0, 8011818 <__multiply+0x44>
 801180a:	4602      	mov	r2, r0
 801180c:	4b44      	ldr	r3, [pc, #272]	; (8011920 <__multiply+0x14c>)
 801180e:	4845      	ldr	r0, [pc, #276]	; (8011924 <__multiply+0x150>)
 8011810:	f240 115d 	movw	r1, #349	; 0x15d
 8011814:	f000 ff82 	bl	801271c <__assert_func>
 8011818:	f100 0514 	add.w	r5, r0, #20
 801181c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011820:	462b      	mov	r3, r5
 8011822:	2200      	movs	r2, #0
 8011824:	4543      	cmp	r3, r8
 8011826:	d321      	bcc.n	801186c <__multiply+0x98>
 8011828:	f104 0314 	add.w	r3, r4, #20
 801182c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011830:	f109 0314 	add.w	r3, r9, #20
 8011834:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011838:	9202      	str	r2, [sp, #8]
 801183a:	1b3a      	subs	r2, r7, r4
 801183c:	3a15      	subs	r2, #21
 801183e:	f022 0203 	bic.w	r2, r2, #3
 8011842:	3204      	adds	r2, #4
 8011844:	f104 0115 	add.w	r1, r4, #21
 8011848:	428f      	cmp	r7, r1
 801184a:	bf38      	it	cc
 801184c:	2204      	movcc	r2, #4
 801184e:	9201      	str	r2, [sp, #4]
 8011850:	9a02      	ldr	r2, [sp, #8]
 8011852:	9303      	str	r3, [sp, #12]
 8011854:	429a      	cmp	r2, r3
 8011856:	d80c      	bhi.n	8011872 <__multiply+0x9e>
 8011858:	2e00      	cmp	r6, #0
 801185a:	dd03      	ble.n	8011864 <__multiply+0x90>
 801185c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011860:	2b00      	cmp	r3, #0
 8011862:	d05a      	beq.n	801191a <__multiply+0x146>
 8011864:	6106      	str	r6, [r0, #16]
 8011866:	b005      	add	sp, #20
 8011868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	f843 2b04 	str.w	r2, [r3], #4
 8011870:	e7d8      	b.n	8011824 <__multiply+0x50>
 8011872:	f8b3 a000 	ldrh.w	sl, [r3]
 8011876:	f1ba 0f00 	cmp.w	sl, #0
 801187a:	d024      	beq.n	80118c6 <__multiply+0xf2>
 801187c:	f104 0e14 	add.w	lr, r4, #20
 8011880:	46a9      	mov	r9, r5
 8011882:	f04f 0c00 	mov.w	ip, #0
 8011886:	f85e 2b04 	ldr.w	r2, [lr], #4
 801188a:	f8d9 1000 	ldr.w	r1, [r9]
 801188e:	fa1f fb82 	uxth.w	fp, r2
 8011892:	b289      	uxth	r1, r1
 8011894:	fb0a 110b 	mla	r1, sl, fp, r1
 8011898:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801189c:	f8d9 2000 	ldr.w	r2, [r9]
 80118a0:	4461      	add	r1, ip
 80118a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80118a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80118aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80118ae:	b289      	uxth	r1, r1
 80118b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80118b4:	4577      	cmp	r7, lr
 80118b6:	f849 1b04 	str.w	r1, [r9], #4
 80118ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80118be:	d8e2      	bhi.n	8011886 <__multiply+0xb2>
 80118c0:	9a01      	ldr	r2, [sp, #4]
 80118c2:	f845 c002 	str.w	ip, [r5, r2]
 80118c6:	9a03      	ldr	r2, [sp, #12]
 80118c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80118cc:	3304      	adds	r3, #4
 80118ce:	f1b9 0f00 	cmp.w	r9, #0
 80118d2:	d020      	beq.n	8011916 <__multiply+0x142>
 80118d4:	6829      	ldr	r1, [r5, #0]
 80118d6:	f104 0c14 	add.w	ip, r4, #20
 80118da:	46ae      	mov	lr, r5
 80118dc:	f04f 0a00 	mov.w	sl, #0
 80118e0:	f8bc b000 	ldrh.w	fp, [ip]
 80118e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80118e8:	fb09 220b 	mla	r2, r9, fp, r2
 80118ec:	4492      	add	sl, r2
 80118ee:	b289      	uxth	r1, r1
 80118f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80118f4:	f84e 1b04 	str.w	r1, [lr], #4
 80118f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80118fc:	f8be 1000 	ldrh.w	r1, [lr]
 8011900:	0c12      	lsrs	r2, r2, #16
 8011902:	fb09 1102 	mla	r1, r9, r2, r1
 8011906:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801190a:	4567      	cmp	r7, ip
 801190c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011910:	d8e6      	bhi.n	80118e0 <__multiply+0x10c>
 8011912:	9a01      	ldr	r2, [sp, #4]
 8011914:	50a9      	str	r1, [r5, r2]
 8011916:	3504      	adds	r5, #4
 8011918:	e79a      	b.n	8011850 <__multiply+0x7c>
 801191a:	3e01      	subs	r6, #1
 801191c:	e79c      	b.n	8011858 <__multiply+0x84>
 801191e:	bf00      	nop
 8011920:	08014378 	.word	0x08014378
 8011924:	08014468 	.word	0x08014468

08011928 <__pow5mult>:
 8011928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801192c:	4615      	mov	r5, r2
 801192e:	f012 0203 	ands.w	r2, r2, #3
 8011932:	4606      	mov	r6, r0
 8011934:	460f      	mov	r7, r1
 8011936:	d007      	beq.n	8011948 <__pow5mult+0x20>
 8011938:	4c25      	ldr	r4, [pc, #148]	; (80119d0 <__pow5mult+0xa8>)
 801193a:	3a01      	subs	r2, #1
 801193c:	2300      	movs	r3, #0
 801193e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011942:	f7ff fe51 	bl	80115e8 <__multadd>
 8011946:	4607      	mov	r7, r0
 8011948:	10ad      	asrs	r5, r5, #2
 801194a:	d03d      	beq.n	80119c8 <__pow5mult+0xa0>
 801194c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801194e:	b97c      	cbnz	r4, 8011970 <__pow5mult+0x48>
 8011950:	2010      	movs	r0, #16
 8011952:	f7ff fdcd 	bl	80114f0 <malloc>
 8011956:	4602      	mov	r2, r0
 8011958:	6270      	str	r0, [r6, #36]	; 0x24
 801195a:	b928      	cbnz	r0, 8011968 <__pow5mult+0x40>
 801195c:	4b1d      	ldr	r3, [pc, #116]	; (80119d4 <__pow5mult+0xac>)
 801195e:	481e      	ldr	r0, [pc, #120]	; (80119d8 <__pow5mult+0xb0>)
 8011960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011964:	f000 feda 	bl	801271c <__assert_func>
 8011968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801196c:	6004      	str	r4, [r0, #0]
 801196e:	60c4      	str	r4, [r0, #12]
 8011970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011978:	b94c      	cbnz	r4, 801198e <__pow5mult+0x66>
 801197a:	f240 2171 	movw	r1, #625	; 0x271
 801197e:	4630      	mov	r0, r6
 8011980:	f7ff ff12 	bl	80117a8 <__i2b>
 8011984:	2300      	movs	r3, #0
 8011986:	f8c8 0008 	str.w	r0, [r8, #8]
 801198a:	4604      	mov	r4, r0
 801198c:	6003      	str	r3, [r0, #0]
 801198e:	f04f 0900 	mov.w	r9, #0
 8011992:	07eb      	lsls	r3, r5, #31
 8011994:	d50a      	bpl.n	80119ac <__pow5mult+0x84>
 8011996:	4639      	mov	r1, r7
 8011998:	4622      	mov	r2, r4
 801199a:	4630      	mov	r0, r6
 801199c:	f7ff ff1a 	bl	80117d4 <__multiply>
 80119a0:	4639      	mov	r1, r7
 80119a2:	4680      	mov	r8, r0
 80119a4:	4630      	mov	r0, r6
 80119a6:	f7ff fdfd 	bl	80115a4 <_Bfree>
 80119aa:	4647      	mov	r7, r8
 80119ac:	106d      	asrs	r5, r5, #1
 80119ae:	d00b      	beq.n	80119c8 <__pow5mult+0xa0>
 80119b0:	6820      	ldr	r0, [r4, #0]
 80119b2:	b938      	cbnz	r0, 80119c4 <__pow5mult+0x9c>
 80119b4:	4622      	mov	r2, r4
 80119b6:	4621      	mov	r1, r4
 80119b8:	4630      	mov	r0, r6
 80119ba:	f7ff ff0b 	bl	80117d4 <__multiply>
 80119be:	6020      	str	r0, [r4, #0]
 80119c0:	f8c0 9000 	str.w	r9, [r0]
 80119c4:	4604      	mov	r4, r0
 80119c6:	e7e4      	b.n	8011992 <__pow5mult+0x6a>
 80119c8:	4638      	mov	r0, r7
 80119ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ce:	bf00      	nop
 80119d0:	080145b8 	.word	0x080145b8
 80119d4:	08014306 	.word	0x08014306
 80119d8:	08014468 	.word	0x08014468

080119dc <__lshift>:
 80119dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e0:	460c      	mov	r4, r1
 80119e2:	6849      	ldr	r1, [r1, #4]
 80119e4:	6923      	ldr	r3, [r4, #16]
 80119e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119ea:	68a3      	ldr	r3, [r4, #8]
 80119ec:	4607      	mov	r7, r0
 80119ee:	4691      	mov	r9, r2
 80119f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119f4:	f108 0601 	add.w	r6, r8, #1
 80119f8:	42b3      	cmp	r3, r6
 80119fa:	db0b      	blt.n	8011a14 <__lshift+0x38>
 80119fc:	4638      	mov	r0, r7
 80119fe:	f7ff fd91 	bl	8011524 <_Balloc>
 8011a02:	4605      	mov	r5, r0
 8011a04:	b948      	cbnz	r0, 8011a1a <__lshift+0x3e>
 8011a06:	4602      	mov	r2, r0
 8011a08:	4b2a      	ldr	r3, [pc, #168]	; (8011ab4 <__lshift+0xd8>)
 8011a0a:	482b      	ldr	r0, [pc, #172]	; (8011ab8 <__lshift+0xdc>)
 8011a0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011a10:	f000 fe84 	bl	801271c <__assert_func>
 8011a14:	3101      	adds	r1, #1
 8011a16:	005b      	lsls	r3, r3, #1
 8011a18:	e7ee      	b.n	80119f8 <__lshift+0x1c>
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	f100 0114 	add.w	r1, r0, #20
 8011a20:	f100 0210 	add.w	r2, r0, #16
 8011a24:	4618      	mov	r0, r3
 8011a26:	4553      	cmp	r3, sl
 8011a28:	db37      	blt.n	8011a9a <__lshift+0xbe>
 8011a2a:	6920      	ldr	r0, [r4, #16]
 8011a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a30:	f104 0314 	add.w	r3, r4, #20
 8011a34:	f019 091f 	ands.w	r9, r9, #31
 8011a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011a40:	d02f      	beq.n	8011aa2 <__lshift+0xc6>
 8011a42:	f1c9 0e20 	rsb	lr, r9, #32
 8011a46:	468a      	mov	sl, r1
 8011a48:	f04f 0c00 	mov.w	ip, #0
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	fa02 f209 	lsl.w	r2, r2, r9
 8011a52:	ea42 020c 	orr.w	r2, r2, ip
 8011a56:	f84a 2b04 	str.w	r2, [sl], #4
 8011a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a5e:	4298      	cmp	r0, r3
 8011a60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011a64:	d8f2      	bhi.n	8011a4c <__lshift+0x70>
 8011a66:	1b03      	subs	r3, r0, r4
 8011a68:	3b15      	subs	r3, #21
 8011a6a:	f023 0303 	bic.w	r3, r3, #3
 8011a6e:	3304      	adds	r3, #4
 8011a70:	f104 0215 	add.w	r2, r4, #21
 8011a74:	4290      	cmp	r0, r2
 8011a76:	bf38      	it	cc
 8011a78:	2304      	movcc	r3, #4
 8011a7a:	f841 c003 	str.w	ip, [r1, r3]
 8011a7e:	f1bc 0f00 	cmp.w	ip, #0
 8011a82:	d001      	beq.n	8011a88 <__lshift+0xac>
 8011a84:	f108 0602 	add.w	r6, r8, #2
 8011a88:	3e01      	subs	r6, #1
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	612e      	str	r6, [r5, #16]
 8011a8e:	4621      	mov	r1, r4
 8011a90:	f7ff fd88 	bl	80115a4 <_Bfree>
 8011a94:	4628      	mov	r0, r5
 8011a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	e7c1      	b.n	8011a26 <__lshift+0x4a>
 8011aa2:	3904      	subs	r1, #4
 8011aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011aac:	4298      	cmp	r0, r3
 8011aae:	d8f9      	bhi.n	8011aa4 <__lshift+0xc8>
 8011ab0:	e7ea      	b.n	8011a88 <__lshift+0xac>
 8011ab2:	bf00      	nop
 8011ab4:	08014378 	.word	0x08014378
 8011ab8:	08014468 	.word	0x08014468

08011abc <__mcmp>:
 8011abc:	b530      	push	{r4, r5, lr}
 8011abe:	6902      	ldr	r2, [r0, #16]
 8011ac0:	690c      	ldr	r4, [r1, #16]
 8011ac2:	1b12      	subs	r2, r2, r4
 8011ac4:	d10e      	bne.n	8011ae4 <__mcmp+0x28>
 8011ac6:	f100 0314 	add.w	r3, r0, #20
 8011aca:	3114      	adds	r1, #20
 8011acc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ad4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ad8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011adc:	42a5      	cmp	r5, r4
 8011ade:	d003      	beq.n	8011ae8 <__mcmp+0x2c>
 8011ae0:	d305      	bcc.n	8011aee <__mcmp+0x32>
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	bd30      	pop	{r4, r5, pc}
 8011ae8:	4283      	cmp	r3, r0
 8011aea:	d3f3      	bcc.n	8011ad4 <__mcmp+0x18>
 8011aec:	e7fa      	b.n	8011ae4 <__mcmp+0x28>
 8011aee:	f04f 32ff 	mov.w	r2, #4294967295
 8011af2:	e7f7      	b.n	8011ae4 <__mcmp+0x28>

08011af4 <__mdiff>:
 8011af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af8:	460c      	mov	r4, r1
 8011afa:	4606      	mov	r6, r0
 8011afc:	4611      	mov	r1, r2
 8011afe:	4620      	mov	r0, r4
 8011b00:	4690      	mov	r8, r2
 8011b02:	f7ff ffdb 	bl	8011abc <__mcmp>
 8011b06:	1e05      	subs	r5, r0, #0
 8011b08:	d110      	bne.n	8011b2c <__mdiff+0x38>
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7ff fd09 	bl	8011524 <_Balloc>
 8011b12:	b930      	cbnz	r0, 8011b22 <__mdiff+0x2e>
 8011b14:	4b3a      	ldr	r3, [pc, #232]	; (8011c00 <__mdiff+0x10c>)
 8011b16:	4602      	mov	r2, r0
 8011b18:	f240 2132 	movw	r1, #562	; 0x232
 8011b1c:	4839      	ldr	r0, [pc, #228]	; (8011c04 <__mdiff+0x110>)
 8011b1e:	f000 fdfd 	bl	801271c <__assert_func>
 8011b22:	2301      	movs	r3, #1
 8011b24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b2c:	bfa4      	itt	ge
 8011b2e:	4643      	movge	r3, r8
 8011b30:	46a0      	movge	r8, r4
 8011b32:	4630      	mov	r0, r6
 8011b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b38:	bfa6      	itte	ge
 8011b3a:	461c      	movge	r4, r3
 8011b3c:	2500      	movge	r5, #0
 8011b3e:	2501      	movlt	r5, #1
 8011b40:	f7ff fcf0 	bl	8011524 <_Balloc>
 8011b44:	b920      	cbnz	r0, 8011b50 <__mdiff+0x5c>
 8011b46:	4b2e      	ldr	r3, [pc, #184]	; (8011c00 <__mdiff+0x10c>)
 8011b48:	4602      	mov	r2, r0
 8011b4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b4e:	e7e5      	b.n	8011b1c <__mdiff+0x28>
 8011b50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b54:	6926      	ldr	r6, [r4, #16]
 8011b56:	60c5      	str	r5, [r0, #12]
 8011b58:	f104 0914 	add.w	r9, r4, #20
 8011b5c:	f108 0514 	add.w	r5, r8, #20
 8011b60:	f100 0e14 	add.w	lr, r0, #20
 8011b64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b6c:	f108 0210 	add.w	r2, r8, #16
 8011b70:	46f2      	mov	sl, lr
 8011b72:	2100      	movs	r1, #0
 8011b74:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b7c:	fa1f f883 	uxth.w	r8, r3
 8011b80:	fa11 f18b 	uxtah	r1, r1, fp
 8011b84:	0c1b      	lsrs	r3, r3, #16
 8011b86:	eba1 0808 	sub.w	r8, r1, r8
 8011b8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b92:	fa1f f888 	uxth.w	r8, r8
 8011b96:	1419      	asrs	r1, r3, #16
 8011b98:	454e      	cmp	r6, r9
 8011b9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b9e:	f84a 3b04 	str.w	r3, [sl], #4
 8011ba2:	d8e7      	bhi.n	8011b74 <__mdiff+0x80>
 8011ba4:	1b33      	subs	r3, r6, r4
 8011ba6:	3b15      	subs	r3, #21
 8011ba8:	f023 0303 	bic.w	r3, r3, #3
 8011bac:	3304      	adds	r3, #4
 8011bae:	3415      	adds	r4, #21
 8011bb0:	42a6      	cmp	r6, r4
 8011bb2:	bf38      	it	cc
 8011bb4:	2304      	movcc	r3, #4
 8011bb6:	441d      	add	r5, r3
 8011bb8:	4473      	add	r3, lr
 8011bba:	469e      	mov	lr, r3
 8011bbc:	462e      	mov	r6, r5
 8011bbe:	4566      	cmp	r6, ip
 8011bc0:	d30e      	bcc.n	8011be0 <__mdiff+0xec>
 8011bc2:	f10c 0203 	add.w	r2, ip, #3
 8011bc6:	1b52      	subs	r2, r2, r5
 8011bc8:	f022 0203 	bic.w	r2, r2, #3
 8011bcc:	3d03      	subs	r5, #3
 8011bce:	45ac      	cmp	ip, r5
 8011bd0:	bf38      	it	cc
 8011bd2:	2200      	movcc	r2, #0
 8011bd4:	441a      	add	r2, r3
 8011bd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011bda:	b17b      	cbz	r3, 8011bfc <__mdiff+0x108>
 8011bdc:	6107      	str	r7, [r0, #16]
 8011bde:	e7a3      	b.n	8011b28 <__mdiff+0x34>
 8011be0:	f856 8b04 	ldr.w	r8, [r6], #4
 8011be4:	fa11 f288 	uxtah	r2, r1, r8
 8011be8:	1414      	asrs	r4, r2, #16
 8011bea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011bee:	b292      	uxth	r2, r2
 8011bf0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011bf4:	f84e 2b04 	str.w	r2, [lr], #4
 8011bf8:	1421      	asrs	r1, r4, #16
 8011bfa:	e7e0      	b.n	8011bbe <__mdiff+0xca>
 8011bfc:	3f01      	subs	r7, #1
 8011bfe:	e7ea      	b.n	8011bd6 <__mdiff+0xe2>
 8011c00:	08014378 	.word	0x08014378
 8011c04:	08014468 	.word	0x08014468

08011c08 <__ulp>:
 8011c08:	b082      	sub	sp, #8
 8011c0a:	ed8d 0b00 	vstr	d0, [sp]
 8011c0e:	9b01      	ldr	r3, [sp, #4]
 8011c10:	4912      	ldr	r1, [pc, #72]	; (8011c5c <__ulp+0x54>)
 8011c12:	4019      	ands	r1, r3
 8011c14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011c18:	2900      	cmp	r1, #0
 8011c1a:	dd05      	ble.n	8011c28 <__ulp+0x20>
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	ec43 2b10 	vmov	d0, r2, r3
 8011c24:	b002      	add	sp, #8
 8011c26:	4770      	bx	lr
 8011c28:	4249      	negs	r1, r1
 8011c2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011c2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011c32:	f04f 0200 	mov.w	r2, #0
 8011c36:	f04f 0300 	mov.w	r3, #0
 8011c3a:	da04      	bge.n	8011c46 <__ulp+0x3e>
 8011c3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011c40:	fa41 f300 	asr.w	r3, r1, r0
 8011c44:	e7ec      	b.n	8011c20 <__ulp+0x18>
 8011c46:	f1a0 0114 	sub.w	r1, r0, #20
 8011c4a:	291e      	cmp	r1, #30
 8011c4c:	bfda      	itte	le
 8011c4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011c52:	fa20 f101 	lsrle.w	r1, r0, r1
 8011c56:	2101      	movgt	r1, #1
 8011c58:	460a      	mov	r2, r1
 8011c5a:	e7e1      	b.n	8011c20 <__ulp+0x18>
 8011c5c:	7ff00000 	.word	0x7ff00000

08011c60 <__b2d>:
 8011c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c62:	6905      	ldr	r5, [r0, #16]
 8011c64:	f100 0714 	add.w	r7, r0, #20
 8011c68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011c6c:	1f2e      	subs	r6, r5, #4
 8011c6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7ff fd48 	bl	8011708 <__hi0bits>
 8011c78:	f1c0 0320 	rsb	r3, r0, #32
 8011c7c:	280a      	cmp	r0, #10
 8011c7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011cfc <__b2d+0x9c>
 8011c82:	600b      	str	r3, [r1, #0]
 8011c84:	dc14      	bgt.n	8011cb0 <__b2d+0x50>
 8011c86:	f1c0 0e0b 	rsb	lr, r0, #11
 8011c8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8011c8e:	42b7      	cmp	r7, r6
 8011c90:	ea41 030c 	orr.w	r3, r1, ip
 8011c94:	bf34      	ite	cc
 8011c96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c9a:	2100      	movcs	r1, #0
 8011c9c:	3015      	adds	r0, #21
 8011c9e:	fa04 f000 	lsl.w	r0, r4, r0
 8011ca2:	fa21 f10e 	lsr.w	r1, r1, lr
 8011ca6:	ea40 0201 	orr.w	r2, r0, r1
 8011caa:	ec43 2b10 	vmov	d0, r2, r3
 8011cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb0:	42b7      	cmp	r7, r6
 8011cb2:	bf3a      	itte	cc
 8011cb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011cb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8011cbc:	2100      	movcs	r1, #0
 8011cbe:	380b      	subs	r0, #11
 8011cc0:	d017      	beq.n	8011cf2 <__b2d+0x92>
 8011cc2:	f1c0 0c20 	rsb	ip, r0, #32
 8011cc6:	fa04 f500 	lsl.w	r5, r4, r0
 8011cca:	42be      	cmp	r6, r7
 8011ccc:	fa21 f40c 	lsr.w	r4, r1, ip
 8011cd0:	ea45 0504 	orr.w	r5, r5, r4
 8011cd4:	bf8c      	ite	hi
 8011cd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011cda:	2400      	movls	r4, #0
 8011cdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011ce0:	fa01 f000 	lsl.w	r0, r1, r0
 8011ce4:	fa24 f40c 	lsr.w	r4, r4, ip
 8011ce8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011cec:	ea40 0204 	orr.w	r2, r0, r4
 8011cf0:	e7db      	b.n	8011caa <__b2d+0x4a>
 8011cf2:	ea44 030c 	orr.w	r3, r4, ip
 8011cf6:	460a      	mov	r2, r1
 8011cf8:	e7d7      	b.n	8011caa <__b2d+0x4a>
 8011cfa:	bf00      	nop
 8011cfc:	3ff00000 	.word	0x3ff00000

08011d00 <__d2b>:
 8011d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d04:	4689      	mov	r9, r1
 8011d06:	2101      	movs	r1, #1
 8011d08:	ec57 6b10 	vmov	r6, r7, d0
 8011d0c:	4690      	mov	r8, r2
 8011d0e:	f7ff fc09 	bl	8011524 <_Balloc>
 8011d12:	4604      	mov	r4, r0
 8011d14:	b930      	cbnz	r0, 8011d24 <__d2b+0x24>
 8011d16:	4602      	mov	r2, r0
 8011d18:	4b25      	ldr	r3, [pc, #148]	; (8011db0 <__d2b+0xb0>)
 8011d1a:	4826      	ldr	r0, [pc, #152]	; (8011db4 <__d2b+0xb4>)
 8011d1c:	f240 310a 	movw	r1, #778	; 0x30a
 8011d20:	f000 fcfc 	bl	801271c <__assert_func>
 8011d24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d2c:	bb35      	cbnz	r5, 8011d7c <__d2b+0x7c>
 8011d2e:	2e00      	cmp	r6, #0
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	d028      	beq.n	8011d86 <__d2b+0x86>
 8011d34:	4668      	mov	r0, sp
 8011d36:	9600      	str	r6, [sp, #0]
 8011d38:	f7ff fd06 	bl	8011748 <__lo0bits>
 8011d3c:	9900      	ldr	r1, [sp, #0]
 8011d3e:	b300      	cbz	r0, 8011d82 <__d2b+0x82>
 8011d40:	9a01      	ldr	r2, [sp, #4]
 8011d42:	f1c0 0320 	rsb	r3, r0, #32
 8011d46:	fa02 f303 	lsl.w	r3, r2, r3
 8011d4a:	430b      	orrs	r3, r1
 8011d4c:	40c2      	lsrs	r2, r0
 8011d4e:	6163      	str	r3, [r4, #20]
 8011d50:	9201      	str	r2, [sp, #4]
 8011d52:	9b01      	ldr	r3, [sp, #4]
 8011d54:	61a3      	str	r3, [r4, #24]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	bf14      	ite	ne
 8011d5a:	2202      	movne	r2, #2
 8011d5c:	2201      	moveq	r2, #1
 8011d5e:	6122      	str	r2, [r4, #16]
 8011d60:	b1d5      	cbz	r5, 8011d98 <__d2b+0x98>
 8011d62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d66:	4405      	add	r5, r0
 8011d68:	f8c9 5000 	str.w	r5, [r9]
 8011d6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d70:	f8c8 0000 	str.w	r0, [r8]
 8011d74:	4620      	mov	r0, r4
 8011d76:	b003      	add	sp, #12
 8011d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d80:	e7d5      	b.n	8011d2e <__d2b+0x2e>
 8011d82:	6161      	str	r1, [r4, #20]
 8011d84:	e7e5      	b.n	8011d52 <__d2b+0x52>
 8011d86:	a801      	add	r0, sp, #4
 8011d88:	f7ff fcde 	bl	8011748 <__lo0bits>
 8011d8c:	9b01      	ldr	r3, [sp, #4]
 8011d8e:	6163      	str	r3, [r4, #20]
 8011d90:	2201      	movs	r2, #1
 8011d92:	6122      	str	r2, [r4, #16]
 8011d94:	3020      	adds	r0, #32
 8011d96:	e7e3      	b.n	8011d60 <__d2b+0x60>
 8011d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011da0:	f8c9 0000 	str.w	r0, [r9]
 8011da4:	6918      	ldr	r0, [r3, #16]
 8011da6:	f7ff fcaf 	bl	8011708 <__hi0bits>
 8011daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011dae:	e7df      	b.n	8011d70 <__d2b+0x70>
 8011db0:	08014378 	.word	0x08014378
 8011db4:	08014468 	.word	0x08014468

08011db8 <__ratio>:
 8011db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dbc:	4688      	mov	r8, r1
 8011dbe:	4669      	mov	r1, sp
 8011dc0:	4681      	mov	r9, r0
 8011dc2:	f7ff ff4d 	bl	8011c60 <__b2d>
 8011dc6:	a901      	add	r1, sp, #4
 8011dc8:	4640      	mov	r0, r8
 8011dca:	ec55 4b10 	vmov	r4, r5, d0
 8011dce:	f7ff ff47 	bl	8011c60 <__b2d>
 8011dd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011dd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011dda:	eba3 0c02 	sub.w	ip, r3, r2
 8011dde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011de2:	1a9b      	subs	r3, r3, r2
 8011de4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011de8:	ec51 0b10 	vmov	r0, r1, d0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	bfd6      	itet	le
 8011df0:	460a      	movle	r2, r1
 8011df2:	462a      	movgt	r2, r5
 8011df4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011df8:	468b      	mov	fp, r1
 8011dfa:	462f      	mov	r7, r5
 8011dfc:	bfd4      	ite	le
 8011dfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011e02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011e06:	4620      	mov	r0, r4
 8011e08:	ee10 2a10 	vmov	r2, s0
 8011e0c:	465b      	mov	r3, fp
 8011e0e:	4639      	mov	r1, r7
 8011e10:	f7ee fd44 	bl	800089c <__aeabi_ddiv>
 8011e14:	ec41 0b10 	vmov	d0, r0, r1
 8011e18:	b003      	add	sp, #12
 8011e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e1e <__copybits>:
 8011e1e:	3901      	subs	r1, #1
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	1149      	asrs	r1, r1, #5
 8011e24:	6914      	ldr	r4, [r2, #16]
 8011e26:	3101      	adds	r1, #1
 8011e28:	f102 0314 	add.w	r3, r2, #20
 8011e2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011e30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e34:	1f05      	subs	r5, r0, #4
 8011e36:	42a3      	cmp	r3, r4
 8011e38:	d30c      	bcc.n	8011e54 <__copybits+0x36>
 8011e3a:	1aa3      	subs	r3, r4, r2
 8011e3c:	3b11      	subs	r3, #17
 8011e3e:	f023 0303 	bic.w	r3, r3, #3
 8011e42:	3211      	adds	r2, #17
 8011e44:	42a2      	cmp	r2, r4
 8011e46:	bf88      	it	hi
 8011e48:	2300      	movhi	r3, #0
 8011e4a:	4418      	add	r0, r3
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	4288      	cmp	r0, r1
 8011e50:	d305      	bcc.n	8011e5e <__copybits+0x40>
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e58:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e5c:	e7eb      	b.n	8011e36 <__copybits+0x18>
 8011e5e:	f840 3b04 	str.w	r3, [r0], #4
 8011e62:	e7f4      	b.n	8011e4e <__copybits+0x30>

08011e64 <__any_on>:
 8011e64:	f100 0214 	add.w	r2, r0, #20
 8011e68:	6900      	ldr	r0, [r0, #16]
 8011e6a:	114b      	asrs	r3, r1, #5
 8011e6c:	4298      	cmp	r0, r3
 8011e6e:	b510      	push	{r4, lr}
 8011e70:	db11      	blt.n	8011e96 <__any_on+0x32>
 8011e72:	dd0a      	ble.n	8011e8a <__any_on+0x26>
 8011e74:	f011 011f 	ands.w	r1, r1, #31
 8011e78:	d007      	beq.n	8011e8a <__any_on+0x26>
 8011e7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e7e:	fa24 f001 	lsr.w	r0, r4, r1
 8011e82:	fa00 f101 	lsl.w	r1, r0, r1
 8011e86:	428c      	cmp	r4, r1
 8011e88:	d10b      	bne.n	8011ea2 <__any_on+0x3e>
 8011e8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d803      	bhi.n	8011e9a <__any_on+0x36>
 8011e92:	2000      	movs	r0, #0
 8011e94:	bd10      	pop	{r4, pc}
 8011e96:	4603      	mov	r3, r0
 8011e98:	e7f7      	b.n	8011e8a <__any_on+0x26>
 8011e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e9e:	2900      	cmp	r1, #0
 8011ea0:	d0f5      	beq.n	8011e8e <__any_on+0x2a>
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	e7f6      	b.n	8011e94 <__any_on+0x30>

08011ea6 <_calloc_r>:
 8011ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ea8:	fba1 2402 	umull	r2, r4, r1, r2
 8011eac:	b94c      	cbnz	r4, 8011ec2 <_calloc_r+0x1c>
 8011eae:	4611      	mov	r1, r2
 8011eb0:	9201      	str	r2, [sp, #4]
 8011eb2:	f000 f87b 	bl	8011fac <_malloc_r>
 8011eb6:	9a01      	ldr	r2, [sp, #4]
 8011eb8:	4605      	mov	r5, r0
 8011eba:	b930      	cbnz	r0, 8011eca <_calloc_r+0x24>
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	b003      	add	sp, #12
 8011ec0:	bd30      	pop	{r4, r5, pc}
 8011ec2:	220c      	movs	r2, #12
 8011ec4:	6002      	str	r2, [r0, #0]
 8011ec6:	2500      	movs	r5, #0
 8011ec8:	e7f8      	b.n	8011ebc <_calloc_r+0x16>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	f7fc f848 	bl	800df60 <memset>
 8011ed0:	e7f4      	b.n	8011ebc <_calloc_r+0x16>
	...

08011ed4 <_free_r>:
 8011ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ed6:	2900      	cmp	r1, #0
 8011ed8:	d044      	beq.n	8011f64 <_free_r+0x90>
 8011eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ede:	9001      	str	r0, [sp, #4]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ee6:	bfb8      	it	lt
 8011ee8:	18e4      	addlt	r4, r4, r3
 8011eea:	f000 fca5 	bl	8012838 <__malloc_lock>
 8011eee:	4a1e      	ldr	r2, [pc, #120]	; (8011f68 <_free_r+0x94>)
 8011ef0:	9801      	ldr	r0, [sp, #4]
 8011ef2:	6813      	ldr	r3, [r2, #0]
 8011ef4:	b933      	cbnz	r3, 8011f04 <_free_r+0x30>
 8011ef6:	6063      	str	r3, [r4, #4]
 8011ef8:	6014      	str	r4, [r2, #0]
 8011efa:	b003      	add	sp, #12
 8011efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f00:	f000 bca0 	b.w	8012844 <__malloc_unlock>
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	d908      	bls.n	8011f1a <_free_r+0x46>
 8011f08:	6825      	ldr	r5, [r4, #0]
 8011f0a:	1961      	adds	r1, r4, r5
 8011f0c:	428b      	cmp	r3, r1
 8011f0e:	bf01      	itttt	eq
 8011f10:	6819      	ldreq	r1, [r3, #0]
 8011f12:	685b      	ldreq	r3, [r3, #4]
 8011f14:	1949      	addeq	r1, r1, r5
 8011f16:	6021      	streq	r1, [r4, #0]
 8011f18:	e7ed      	b.n	8011ef6 <_free_r+0x22>
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	b10b      	cbz	r3, 8011f24 <_free_r+0x50>
 8011f20:	42a3      	cmp	r3, r4
 8011f22:	d9fa      	bls.n	8011f1a <_free_r+0x46>
 8011f24:	6811      	ldr	r1, [r2, #0]
 8011f26:	1855      	adds	r5, r2, r1
 8011f28:	42a5      	cmp	r5, r4
 8011f2a:	d10b      	bne.n	8011f44 <_free_r+0x70>
 8011f2c:	6824      	ldr	r4, [r4, #0]
 8011f2e:	4421      	add	r1, r4
 8011f30:	1854      	adds	r4, r2, r1
 8011f32:	42a3      	cmp	r3, r4
 8011f34:	6011      	str	r1, [r2, #0]
 8011f36:	d1e0      	bne.n	8011efa <_free_r+0x26>
 8011f38:	681c      	ldr	r4, [r3, #0]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	6053      	str	r3, [r2, #4]
 8011f3e:	4421      	add	r1, r4
 8011f40:	6011      	str	r1, [r2, #0]
 8011f42:	e7da      	b.n	8011efa <_free_r+0x26>
 8011f44:	d902      	bls.n	8011f4c <_free_r+0x78>
 8011f46:	230c      	movs	r3, #12
 8011f48:	6003      	str	r3, [r0, #0]
 8011f4a:	e7d6      	b.n	8011efa <_free_r+0x26>
 8011f4c:	6825      	ldr	r5, [r4, #0]
 8011f4e:	1961      	adds	r1, r4, r5
 8011f50:	428b      	cmp	r3, r1
 8011f52:	bf04      	itt	eq
 8011f54:	6819      	ldreq	r1, [r3, #0]
 8011f56:	685b      	ldreq	r3, [r3, #4]
 8011f58:	6063      	str	r3, [r4, #4]
 8011f5a:	bf04      	itt	eq
 8011f5c:	1949      	addeq	r1, r1, r5
 8011f5e:	6021      	streq	r1, [r4, #0]
 8011f60:	6054      	str	r4, [r2, #4]
 8011f62:	e7ca      	b.n	8011efa <_free_r+0x26>
 8011f64:	b003      	add	sp, #12
 8011f66:	bd30      	pop	{r4, r5, pc}
 8011f68:	20009428 	.word	0x20009428

08011f6c <sbrk_aligned>:
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	4e0e      	ldr	r6, [pc, #56]	; (8011fa8 <sbrk_aligned+0x3c>)
 8011f70:	460c      	mov	r4, r1
 8011f72:	6831      	ldr	r1, [r6, #0]
 8011f74:	4605      	mov	r5, r0
 8011f76:	b911      	cbnz	r1, 8011f7e <sbrk_aligned+0x12>
 8011f78:	f000 fb4a 	bl	8012610 <_sbrk_r>
 8011f7c:	6030      	str	r0, [r6, #0]
 8011f7e:	4621      	mov	r1, r4
 8011f80:	4628      	mov	r0, r5
 8011f82:	f000 fb45 	bl	8012610 <_sbrk_r>
 8011f86:	1c43      	adds	r3, r0, #1
 8011f88:	d00a      	beq.n	8011fa0 <sbrk_aligned+0x34>
 8011f8a:	1cc4      	adds	r4, r0, #3
 8011f8c:	f024 0403 	bic.w	r4, r4, #3
 8011f90:	42a0      	cmp	r0, r4
 8011f92:	d007      	beq.n	8011fa4 <sbrk_aligned+0x38>
 8011f94:	1a21      	subs	r1, r4, r0
 8011f96:	4628      	mov	r0, r5
 8011f98:	f000 fb3a 	bl	8012610 <_sbrk_r>
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	d101      	bne.n	8011fa4 <sbrk_aligned+0x38>
 8011fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
 8011fa8:	2000942c 	.word	0x2000942c

08011fac <_malloc_r>:
 8011fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb0:	1ccd      	adds	r5, r1, #3
 8011fb2:	f025 0503 	bic.w	r5, r5, #3
 8011fb6:	3508      	adds	r5, #8
 8011fb8:	2d0c      	cmp	r5, #12
 8011fba:	bf38      	it	cc
 8011fbc:	250c      	movcc	r5, #12
 8011fbe:	2d00      	cmp	r5, #0
 8011fc0:	4607      	mov	r7, r0
 8011fc2:	db01      	blt.n	8011fc8 <_malloc_r+0x1c>
 8011fc4:	42a9      	cmp	r1, r5
 8011fc6:	d905      	bls.n	8011fd4 <_malloc_r+0x28>
 8011fc8:	230c      	movs	r3, #12
 8011fca:	603b      	str	r3, [r7, #0]
 8011fcc:	2600      	movs	r6, #0
 8011fce:	4630      	mov	r0, r6
 8011fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fd4:	4e2e      	ldr	r6, [pc, #184]	; (8012090 <_malloc_r+0xe4>)
 8011fd6:	f000 fc2f 	bl	8012838 <__malloc_lock>
 8011fda:	6833      	ldr	r3, [r6, #0]
 8011fdc:	461c      	mov	r4, r3
 8011fde:	bb34      	cbnz	r4, 801202e <_malloc_r+0x82>
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	f7ff ffc2 	bl	8011f6c <sbrk_aligned>
 8011fe8:	1c43      	adds	r3, r0, #1
 8011fea:	4604      	mov	r4, r0
 8011fec:	d14d      	bne.n	801208a <_malloc_r+0xde>
 8011fee:	6834      	ldr	r4, [r6, #0]
 8011ff0:	4626      	mov	r6, r4
 8011ff2:	2e00      	cmp	r6, #0
 8011ff4:	d140      	bne.n	8012078 <_malloc_r+0xcc>
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	4631      	mov	r1, r6
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	eb04 0803 	add.w	r8, r4, r3
 8012000:	f000 fb06 	bl	8012610 <_sbrk_r>
 8012004:	4580      	cmp	r8, r0
 8012006:	d13a      	bne.n	801207e <_malloc_r+0xd2>
 8012008:	6821      	ldr	r1, [r4, #0]
 801200a:	3503      	adds	r5, #3
 801200c:	1a6d      	subs	r5, r5, r1
 801200e:	f025 0503 	bic.w	r5, r5, #3
 8012012:	3508      	adds	r5, #8
 8012014:	2d0c      	cmp	r5, #12
 8012016:	bf38      	it	cc
 8012018:	250c      	movcc	r5, #12
 801201a:	4629      	mov	r1, r5
 801201c:	4638      	mov	r0, r7
 801201e:	f7ff ffa5 	bl	8011f6c <sbrk_aligned>
 8012022:	3001      	adds	r0, #1
 8012024:	d02b      	beq.n	801207e <_malloc_r+0xd2>
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	442b      	add	r3, r5
 801202a:	6023      	str	r3, [r4, #0]
 801202c:	e00e      	b.n	801204c <_malloc_r+0xa0>
 801202e:	6822      	ldr	r2, [r4, #0]
 8012030:	1b52      	subs	r2, r2, r5
 8012032:	d41e      	bmi.n	8012072 <_malloc_r+0xc6>
 8012034:	2a0b      	cmp	r2, #11
 8012036:	d916      	bls.n	8012066 <_malloc_r+0xba>
 8012038:	1961      	adds	r1, r4, r5
 801203a:	42a3      	cmp	r3, r4
 801203c:	6025      	str	r5, [r4, #0]
 801203e:	bf18      	it	ne
 8012040:	6059      	strne	r1, [r3, #4]
 8012042:	6863      	ldr	r3, [r4, #4]
 8012044:	bf08      	it	eq
 8012046:	6031      	streq	r1, [r6, #0]
 8012048:	5162      	str	r2, [r4, r5]
 801204a:	604b      	str	r3, [r1, #4]
 801204c:	4638      	mov	r0, r7
 801204e:	f104 060b 	add.w	r6, r4, #11
 8012052:	f000 fbf7 	bl	8012844 <__malloc_unlock>
 8012056:	f026 0607 	bic.w	r6, r6, #7
 801205a:	1d23      	adds	r3, r4, #4
 801205c:	1af2      	subs	r2, r6, r3
 801205e:	d0b6      	beq.n	8011fce <_malloc_r+0x22>
 8012060:	1b9b      	subs	r3, r3, r6
 8012062:	50a3      	str	r3, [r4, r2]
 8012064:	e7b3      	b.n	8011fce <_malloc_r+0x22>
 8012066:	6862      	ldr	r2, [r4, #4]
 8012068:	42a3      	cmp	r3, r4
 801206a:	bf0c      	ite	eq
 801206c:	6032      	streq	r2, [r6, #0]
 801206e:	605a      	strne	r2, [r3, #4]
 8012070:	e7ec      	b.n	801204c <_malloc_r+0xa0>
 8012072:	4623      	mov	r3, r4
 8012074:	6864      	ldr	r4, [r4, #4]
 8012076:	e7b2      	b.n	8011fde <_malloc_r+0x32>
 8012078:	4634      	mov	r4, r6
 801207a:	6876      	ldr	r6, [r6, #4]
 801207c:	e7b9      	b.n	8011ff2 <_malloc_r+0x46>
 801207e:	230c      	movs	r3, #12
 8012080:	603b      	str	r3, [r7, #0]
 8012082:	4638      	mov	r0, r7
 8012084:	f000 fbde 	bl	8012844 <__malloc_unlock>
 8012088:	e7a1      	b.n	8011fce <_malloc_r+0x22>
 801208a:	6025      	str	r5, [r4, #0]
 801208c:	e7de      	b.n	801204c <_malloc_r+0xa0>
 801208e:	bf00      	nop
 8012090:	20009428 	.word	0x20009428

08012094 <__ssputs_r>:
 8012094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012098:	688e      	ldr	r6, [r1, #8]
 801209a:	429e      	cmp	r6, r3
 801209c:	4682      	mov	sl, r0
 801209e:	460c      	mov	r4, r1
 80120a0:	4690      	mov	r8, r2
 80120a2:	461f      	mov	r7, r3
 80120a4:	d838      	bhi.n	8012118 <__ssputs_r+0x84>
 80120a6:	898a      	ldrh	r2, [r1, #12]
 80120a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80120ac:	d032      	beq.n	8012114 <__ssputs_r+0x80>
 80120ae:	6825      	ldr	r5, [r4, #0]
 80120b0:	6909      	ldr	r1, [r1, #16]
 80120b2:	eba5 0901 	sub.w	r9, r5, r1
 80120b6:	6965      	ldr	r5, [r4, #20]
 80120b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120c0:	3301      	adds	r3, #1
 80120c2:	444b      	add	r3, r9
 80120c4:	106d      	asrs	r5, r5, #1
 80120c6:	429d      	cmp	r5, r3
 80120c8:	bf38      	it	cc
 80120ca:	461d      	movcc	r5, r3
 80120cc:	0553      	lsls	r3, r2, #21
 80120ce:	d531      	bpl.n	8012134 <__ssputs_r+0xa0>
 80120d0:	4629      	mov	r1, r5
 80120d2:	f7ff ff6b 	bl	8011fac <_malloc_r>
 80120d6:	4606      	mov	r6, r0
 80120d8:	b950      	cbnz	r0, 80120f0 <__ssputs_r+0x5c>
 80120da:	230c      	movs	r3, #12
 80120dc:	f8ca 3000 	str.w	r3, [sl]
 80120e0:	89a3      	ldrh	r3, [r4, #12]
 80120e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120e6:	81a3      	strh	r3, [r4, #12]
 80120e8:	f04f 30ff 	mov.w	r0, #4294967295
 80120ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f0:	6921      	ldr	r1, [r4, #16]
 80120f2:	464a      	mov	r2, r9
 80120f4:	f7fb ff26 	bl	800df44 <memcpy>
 80120f8:	89a3      	ldrh	r3, [r4, #12]
 80120fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012102:	81a3      	strh	r3, [r4, #12]
 8012104:	6126      	str	r6, [r4, #16]
 8012106:	6165      	str	r5, [r4, #20]
 8012108:	444e      	add	r6, r9
 801210a:	eba5 0509 	sub.w	r5, r5, r9
 801210e:	6026      	str	r6, [r4, #0]
 8012110:	60a5      	str	r5, [r4, #8]
 8012112:	463e      	mov	r6, r7
 8012114:	42be      	cmp	r6, r7
 8012116:	d900      	bls.n	801211a <__ssputs_r+0x86>
 8012118:	463e      	mov	r6, r7
 801211a:	6820      	ldr	r0, [r4, #0]
 801211c:	4632      	mov	r2, r6
 801211e:	4641      	mov	r1, r8
 8012120:	f000 fb70 	bl	8012804 <memmove>
 8012124:	68a3      	ldr	r3, [r4, #8]
 8012126:	1b9b      	subs	r3, r3, r6
 8012128:	60a3      	str	r3, [r4, #8]
 801212a:	6823      	ldr	r3, [r4, #0]
 801212c:	4433      	add	r3, r6
 801212e:	6023      	str	r3, [r4, #0]
 8012130:	2000      	movs	r0, #0
 8012132:	e7db      	b.n	80120ec <__ssputs_r+0x58>
 8012134:	462a      	mov	r2, r5
 8012136:	f000 fb8b 	bl	8012850 <_realloc_r>
 801213a:	4606      	mov	r6, r0
 801213c:	2800      	cmp	r0, #0
 801213e:	d1e1      	bne.n	8012104 <__ssputs_r+0x70>
 8012140:	6921      	ldr	r1, [r4, #16]
 8012142:	4650      	mov	r0, sl
 8012144:	f7ff fec6 	bl	8011ed4 <_free_r>
 8012148:	e7c7      	b.n	80120da <__ssputs_r+0x46>
	...

0801214c <_svfiprintf_r>:
 801214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012150:	4698      	mov	r8, r3
 8012152:	898b      	ldrh	r3, [r1, #12]
 8012154:	061b      	lsls	r3, r3, #24
 8012156:	b09d      	sub	sp, #116	; 0x74
 8012158:	4607      	mov	r7, r0
 801215a:	460d      	mov	r5, r1
 801215c:	4614      	mov	r4, r2
 801215e:	d50e      	bpl.n	801217e <_svfiprintf_r+0x32>
 8012160:	690b      	ldr	r3, [r1, #16]
 8012162:	b963      	cbnz	r3, 801217e <_svfiprintf_r+0x32>
 8012164:	2140      	movs	r1, #64	; 0x40
 8012166:	f7ff ff21 	bl	8011fac <_malloc_r>
 801216a:	6028      	str	r0, [r5, #0]
 801216c:	6128      	str	r0, [r5, #16]
 801216e:	b920      	cbnz	r0, 801217a <_svfiprintf_r+0x2e>
 8012170:	230c      	movs	r3, #12
 8012172:	603b      	str	r3, [r7, #0]
 8012174:	f04f 30ff 	mov.w	r0, #4294967295
 8012178:	e0d1      	b.n	801231e <_svfiprintf_r+0x1d2>
 801217a:	2340      	movs	r3, #64	; 0x40
 801217c:	616b      	str	r3, [r5, #20]
 801217e:	2300      	movs	r3, #0
 8012180:	9309      	str	r3, [sp, #36]	; 0x24
 8012182:	2320      	movs	r3, #32
 8012184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012188:	f8cd 800c 	str.w	r8, [sp, #12]
 801218c:	2330      	movs	r3, #48	; 0x30
 801218e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012338 <_svfiprintf_r+0x1ec>
 8012192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012196:	f04f 0901 	mov.w	r9, #1
 801219a:	4623      	mov	r3, r4
 801219c:	469a      	mov	sl, r3
 801219e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121a2:	b10a      	cbz	r2, 80121a8 <_svfiprintf_r+0x5c>
 80121a4:	2a25      	cmp	r2, #37	; 0x25
 80121a6:	d1f9      	bne.n	801219c <_svfiprintf_r+0x50>
 80121a8:	ebba 0b04 	subs.w	fp, sl, r4
 80121ac:	d00b      	beq.n	80121c6 <_svfiprintf_r+0x7a>
 80121ae:	465b      	mov	r3, fp
 80121b0:	4622      	mov	r2, r4
 80121b2:	4629      	mov	r1, r5
 80121b4:	4638      	mov	r0, r7
 80121b6:	f7ff ff6d 	bl	8012094 <__ssputs_r>
 80121ba:	3001      	adds	r0, #1
 80121bc:	f000 80aa 	beq.w	8012314 <_svfiprintf_r+0x1c8>
 80121c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121c2:	445a      	add	r2, fp
 80121c4:	9209      	str	r2, [sp, #36]	; 0x24
 80121c6:	f89a 3000 	ldrb.w	r3, [sl]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f000 80a2 	beq.w	8012314 <_svfiprintf_r+0x1c8>
 80121d0:	2300      	movs	r3, #0
 80121d2:	f04f 32ff 	mov.w	r2, #4294967295
 80121d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121da:	f10a 0a01 	add.w	sl, sl, #1
 80121de:	9304      	str	r3, [sp, #16]
 80121e0:	9307      	str	r3, [sp, #28]
 80121e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121e6:	931a      	str	r3, [sp, #104]	; 0x68
 80121e8:	4654      	mov	r4, sl
 80121ea:	2205      	movs	r2, #5
 80121ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121f0:	4851      	ldr	r0, [pc, #324]	; (8012338 <_svfiprintf_r+0x1ec>)
 80121f2:	f7ee f81d 	bl	8000230 <memchr>
 80121f6:	9a04      	ldr	r2, [sp, #16]
 80121f8:	b9d8      	cbnz	r0, 8012232 <_svfiprintf_r+0xe6>
 80121fa:	06d0      	lsls	r0, r2, #27
 80121fc:	bf44      	itt	mi
 80121fe:	2320      	movmi	r3, #32
 8012200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012204:	0711      	lsls	r1, r2, #28
 8012206:	bf44      	itt	mi
 8012208:	232b      	movmi	r3, #43	; 0x2b
 801220a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801220e:	f89a 3000 	ldrb.w	r3, [sl]
 8012212:	2b2a      	cmp	r3, #42	; 0x2a
 8012214:	d015      	beq.n	8012242 <_svfiprintf_r+0xf6>
 8012216:	9a07      	ldr	r2, [sp, #28]
 8012218:	4654      	mov	r4, sl
 801221a:	2000      	movs	r0, #0
 801221c:	f04f 0c0a 	mov.w	ip, #10
 8012220:	4621      	mov	r1, r4
 8012222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012226:	3b30      	subs	r3, #48	; 0x30
 8012228:	2b09      	cmp	r3, #9
 801222a:	d94e      	bls.n	80122ca <_svfiprintf_r+0x17e>
 801222c:	b1b0      	cbz	r0, 801225c <_svfiprintf_r+0x110>
 801222e:	9207      	str	r2, [sp, #28]
 8012230:	e014      	b.n	801225c <_svfiprintf_r+0x110>
 8012232:	eba0 0308 	sub.w	r3, r0, r8
 8012236:	fa09 f303 	lsl.w	r3, r9, r3
 801223a:	4313      	orrs	r3, r2
 801223c:	9304      	str	r3, [sp, #16]
 801223e:	46a2      	mov	sl, r4
 8012240:	e7d2      	b.n	80121e8 <_svfiprintf_r+0x9c>
 8012242:	9b03      	ldr	r3, [sp, #12]
 8012244:	1d19      	adds	r1, r3, #4
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	9103      	str	r1, [sp, #12]
 801224a:	2b00      	cmp	r3, #0
 801224c:	bfbb      	ittet	lt
 801224e:	425b      	neglt	r3, r3
 8012250:	f042 0202 	orrlt.w	r2, r2, #2
 8012254:	9307      	strge	r3, [sp, #28]
 8012256:	9307      	strlt	r3, [sp, #28]
 8012258:	bfb8      	it	lt
 801225a:	9204      	strlt	r2, [sp, #16]
 801225c:	7823      	ldrb	r3, [r4, #0]
 801225e:	2b2e      	cmp	r3, #46	; 0x2e
 8012260:	d10c      	bne.n	801227c <_svfiprintf_r+0x130>
 8012262:	7863      	ldrb	r3, [r4, #1]
 8012264:	2b2a      	cmp	r3, #42	; 0x2a
 8012266:	d135      	bne.n	80122d4 <_svfiprintf_r+0x188>
 8012268:	9b03      	ldr	r3, [sp, #12]
 801226a:	1d1a      	adds	r2, r3, #4
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	9203      	str	r2, [sp, #12]
 8012270:	2b00      	cmp	r3, #0
 8012272:	bfb8      	it	lt
 8012274:	f04f 33ff 	movlt.w	r3, #4294967295
 8012278:	3402      	adds	r4, #2
 801227a:	9305      	str	r3, [sp, #20]
 801227c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012348 <_svfiprintf_r+0x1fc>
 8012280:	7821      	ldrb	r1, [r4, #0]
 8012282:	2203      	movs	r2, #3
 8012284:	4650      	mov	r0, sl
 8012286:	f7ed ffd3 	bl	8000230 <memchr>
 801228a:	b140      	cbz	r0, 801229e <_svfiprintf_r+0x152>
 801228c:	2340      	movs	r3, #64	; 0x40
 801228e:	eba0 000a 	sub.w	r0, r0, sl
 8012292:	fa03 f000 	lsl.w	r0, r3, r0
 8012296:	9b04      	ldr	r3, [sp, #16]
 8012298:	4303      	orrs	r3, r0
 801229a:	3401      	adds	r4, #1
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122a2:	4826      	ldr	r0, [pc, #152]	; (801233c <_svfiprintf_r+0x1f0>)
 80122a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122a8:	2206      	movs	r2, #6
 80122aa:	f7ed ffc1 	bl	8000230 <memchr>
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d038      	beq.n	8012324 <_svfiprintf_r+0x1d8>
 80122b2:	4b23      	ldr	r3, [pc, #140]	; (8012340 <_svfiprintf_r+0x1f4>)
 80122b4:	bb1b      	cbnz	r3, 80122fe <_svfiprintf_r+0x1b2>
 80122b6:	9b03      	ldr	r3, [sp, #12]
 80122b8:	3307      	adds	r3, #7
 80122ba:	f023 0307 	bic.w	r3, r3, #7
 80122be:	3308      	adds	r3, #8
 80122c0:	9303      	str	r3, [sp, #12]
 80122c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c4:	4433      	add	r3, r6
 80122c6:	9309      	str	r3, [sp, #36]	; 0x24
 80122c8:	e767      	b.n	801219a <_svfiprintf_r+0x4e>
 80122ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80122ce:	460c      	mov	r4, r1
 80122d0:	2001      	movs	r0, #1
 80122d2:	e7a5      	b.n	8012220 <_svfiprintf_r+0xd4>
 80122d4:	2300      	movs	r3, #0
 80122d6:	3401      	adds	r4, #1
 80122d8:	9305      	str	r3, [sp, #20]
 80122da:	4619      	mov	r1, r3
 80122dc:	f04f 0c0a 	mov.w	ip, #10
 80122e0:	4620      	mov	r0, r4
 80122e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122e6:	3a30      	subs	r2, #48	; 0x30
 80122e8:	2a09      	cmp	r2, #9
 80122ea:	d903      	bls.n	80122f4 <_svfiprintf_r+0x1a8>
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d0c5      	beq.n	801227c <_svfiprintf_r+0x130>
 80122f0:	9105      	str	r1, [sp, #20]
 80122f2:	e7c3      	b.n	801227c <_svfiprintf_r+0x130>
 80122f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80122f8:	4604      	mov	r4, r0
 80122fa:	2301      	movs	r3, #1
 80122fc:	e7f0      	b.n	80122e0 <_svfiprintf_r+0x194>
 80122fe:	ab03      	add	r3, sp, #12
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	462a      	mov	r2, r5
 8012304:	4b0f      	ldr	r3, [pc, #60]	; (8012344 <_svfiprintf_r+0x1f8>)
 8012306:	a904      	add	r1, sp, #16
 8012308:	4638      	mov	r0, r7
 801230a:	f7fb fed1 	bl	800e0b0 <_printf_float>
 801230e:	1c42      	adds	r2, r0, #1
 8012310:	4606      	mov	r6, r0
 8012312:	d1d6      	bne.n	80122c2 <_svfiprintf_r+0x176>
 8012314:	89ab      	ldrh	r3, [r5, #12]
 8012316:	065b      	lsls	r3, r3, #25
 8012318:	f53f af2c 	bmi.w	8012174 <_svfiprintf_r+0x28>
 801231c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801231e:	b01d      	add	sp, #116	; 0x74
 8012320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012324:	ab03      	add	r3, sp, #12
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	462a      	mov	r2, r5
 801232a:	4b06      	ldr	r3, [pc, #24]	; (8012344 <_svfiprintf_r+0x1f8>)
 801232c:	a904      	add	r1, sp, #16
 801232e:	4638      	mov	r0, r7
 8012330:	f7fc f962 	bl	800e5f8 <_printf_i>
 8012334:	e7eb      	b.n	801230e <_svfiprintf_r+0x1c2>
 8012336:	bf00      	nop
 8012338:	080145c4 	.word	0x080145c4
 801233c:	080145ce 	.word	0x080145ce
 8012340:	0800e0b1 	.word	0x0800e0b1
 8012344:	08012095 	.word	0x08012095
 8012348:	080145ca 	.word	0x080145ca

0801234c <__sfputc_r>:
 801234c:	6893      	ldr	r3, [r2, #8]
 801234e:	3b01      	subs	r3, #1
 8012350:	2b00      	cmp	r3, #0
 8012352:	b410      	push	{r4}
 8012354:	6093      	str	r3, [r2, #8]
 8012356:	da08      	bge.n	801236a <__sfputc_r+0x1e>
 8012358:	6994      	ldr	r4, [r2, #24]
 801235a:	42a3      	cmp	r3, r4
 801235c:	db01      	blt.n	8012362 <__sfputc_r+0x16>
 801235e:	290a      	cmp	r1, #10
 8012360:	d103      	bne.n	801236a <__sfputc_r+0x1e>
 8012362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012366:	f7fd bbf5 	b.w	800fb54 <__swbuf_r>
 801236a:	6813      	ldr	r3, [r2, #0]
 801236c:	1c58      	adds	r0, r3, #1
 801236e:	6010      	str	r0, [r2, #0]
 8012370:	7019      	strb	r1, [r3, #0]
 8012372:	4608      	mov	r0, r1
 8012374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012378:	4770      	bx	lr

0801237a <__sfputs_r>:
 801237a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237c:	4606      	mov	r6, r0
 801237e:	460f      	mov	r7, r1
 8012380:	4614      	mov	r4, r2
 8012382:	18d5      	adds	r5, r2, r3
 8012384:	42ac      	cmp	r4, r5
 8012386:	d101      	bne.n	801238c <__sfputs_r+0x12>
 8012388:	2000      	movs	r0, #0
 801238a:	e007      	b.n	801239c <__sfputs_r+0x22>
 801238c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012390:	463a      	mov	r2, r7
 8012392:	4630      	mov	r0, r6
 8012394:	f7ff ffda 	bl	801234c <__sfputc_r>
 8012398:	1c43      	adds	r3, r0, #1
 801239a:	d1f3      	bne.n	8012384 <__sfputs_r+0xa>
 801239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080123a0 <_vfiprintf_r>:
 80123a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a4:	460d      	mov	r5, r1
 80123a6:	b09d      	sub	sp, #116	; 0x74
 80123a8:	4614      	mov	r4, r2
 80123aa:	4698      	mov	r8, r3
 80123ac:	4606      	mov	r6, r0
 80123ae:	b118      	cbz	r0, 80123b8 <_vfiprintf_r+0x18>
 80123b0:	6983      	ldr	r3, [r0, #24]
 80123b2:	b90b      	cbnz	r3, 80123b8 <_vfiprintf_r+0x18>
 80123b4:	f7fe fc24 	bl	8010c00 <__sinit>
 80123b8:	4b89      	ldr	r3, [pc, #548]	; (80125e0 <_vfiprintf_r+0x240>)
 80123ba:	429d      	cmp	r5, r3
 80123bc:	d11b      	bne.n	80123f6 <_vfiprintf_r+0x56>
 80123be:	6875      	ldr	r5, [r6, #4]
 80123c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123c2:	07d9      	lsls	r1, r3, #31
 80123c4:	d405      	bmi.n	80123d2 <_vfiprintf_r+0x32>
 80123c6:	89ab      	ldrh	r3, [r5, #12]
 80123c8:	059a      	lsls	r2, r3, #22
 80123ca:	d402      	bmi.n	80123d2 <_vfiprintf_r+0x32>
 80123cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ce:	f7ff f828 	bl	8011422 <__retarget_lock_acquire_recursive>
 80123d2:	89ab      	ldrh	r3, [r5, #12]
 80123d4:	071b      	lsls	r3, r3, #28
 80123d6:	d501      	bpl.n	80123dc <_vfiprintf_r+0x3c>
 80123d8:	692b      	ldr	r3, [r5, #16]
 80123da:	b9eb      	cbnz	r3, 8012418 <_vfiprintf_r+0x78>
 80123dc:	4629      	mov	r1, r5
 80123de:	4630      	mov	r0, r6
 80123e0:	f7fd fc0a 	bl	800fbf8 <__swsetup_r>
 80123e4:	b1c0      	cbz	r0, 8012418 <_vfiprintf_r+0x78>
 80123e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123e8:	07dc      	lsls	r4, r3, #31
 80123ea:	d50e      	bpl.n	801240a <_vfiprintf_r+0x6a>
 80123ec:	f04f 30ff 	mov.w	r0, #4294967295
 80123f0:	b01d      	add	sp, #116	; 0x74
 80123f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f6:	4b7b      	ldr	r3, [pc, #492]	; (80125e4 <_vfiprintf_r+0x244>)
 80123f8:	429d      	cmp	r5, r3
 80123fa:	d101      	bne.n	8012400 <_vfiprintf_r+0x60>
 80123fc:	68b5      	ldr	r5, [r6, #8]
 80123fe:	e7df      	b.n	80123c0 <_vfiprintf_r+0x20>
 8012400:	4b79      	ldr	r3, [pc, #484]	; (80125e8 <_vfiprintf_r+0x248>)
 8012402:	429d      	cmp	r5, r3
 8012404:	bf08      	it	eq
 8012406:	68f5      	ldreq	r5, [r6, #12]
 8012408:	e7da      	b.n	80123c0 <_vfiprintf_r+0x20>
 801240a:	89ab      	ldrh	r3, [r5, #12]
 801240c:	0598      	lsls	r0, r3, #22
 801240e:	d4ed      	bmi.n	80123ec <_vfiprintf_r+0x4c>
 8012410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012412:	f7ff f807 	bl	8011424 <__retarget_lock_release_recursive>
 8012416:	e7e9      	b.n	80123ec <_vfiprintf_r+0x4c>
 8012418:	2300      	movs	r3, #0
 801241a:	9309      	str	r3, [sp, #36]	; 0x24
 801241c:	2320      	movs	r3, #32
 801241e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012422:	f8cd 800c 	str.w	r8, [sp, #12]
 8012426:	2330      	movs	r3, #48	; 0x30
 8012428:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80125ec <_vfiprintf_r+0x24c>
 801242c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012430:	f04f 0901 	mov.w	r9, #1
 8012434:	4623      	mov	r3, r4
 8012436:	469a      	mov	sl, r3
 8012438:	f813 2b01 	ldrb.w	r2, [r3], #1
 801243c:	b10a      	cbz	r2, 8012442 <_vfiprintf_r+0xa2>
 801243e:	2a25      	cmp	r2, #37	; 0x25
 8012440:	d1f9      	bne.n	8012436 <_vfiprintf_r+0x96>
 8012442:	ebba 0b04 	subs.w	fp, sl, r4
 8012446:	d00b      	beq.n	8012460 <_vfiprintf_r+0xc0>
 8012448:	465b      	mov	r3, fp
 801244a:	4622      	mov	r2, r4
 801244c:	4629      	mov	r1, r5
 801244e:	4630      	mov	r0, r6
 8012450:	f7ff ff93 	bl	801237a <__sfputs_r>
 8012454:	3001      	adds	r0, #1
 8012456:	f000 80aa 	beq.w	80125ae <_vfiprintf_r+0x20e>
 801245a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801245c:	445a      	add	r2, fp
 801245e:	9209      	str	r2, [sp, #36]	; 0x24
 8012460:	f89a 3000 	ldrb.w	r3, [sl]
 8012464:	2b00      	cmp	r3, #0
 8012466:	f000 80a2 	beq.w	80125ae <_vfiprintf_r+0x20e>
 801246a:	2300      	movs	r3, #0
 801246c:	f04f 32ff 	mov.w	r2, #4294967295
 8012470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012474:	f10a 0a01 	add.w	sl, sl, #1
 8012478:	9304      	str	r3, [sp, #16]
 801247a:	9307      	str	r3, [sp, #28]
 801247c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012480:	931a      	str	r3, [sp, #104]	; 0x68
 8012482:	4654      	mov	r4, sl
 8012484:	2205      	movs	r2, #5
 8012486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801248a:	4858      	ldr	r0, [pc, #352]	; (80125ec <_vfiprintf_r+0x24c>)
 801248c:	f7ed fed0 	bl	8000230 <memchr>
 8012490:	9a04      	ldr	r2, [sp, #16]
 8012492:	b9d8      	cbnz	r0, 80124cc <_vfiprintf_r+0x12c>
 8012494:	06d1      	lsls	r1, r2, #27
 8012496:	bf44      	itt	mi
 8012498:	2320      	movmi	r3, #32
 801249a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801249e:	0713      	lsls	r3, r2, #28
 80124a0:	bf44      	itt	mi
 80124a2:	232b      	movmi	r3, #43	; 0x2b
 80124a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124a8:	f89a 3000 	ldrb.w	r3, [sl]
 80124ac:	2b2a      	cmp	r3, #42	; 0x2a
 80124ae:	d015      	beq.n	80124dc <_vfiprintf_r+0x13c>
 80124b0:	9a07      	ldr	r2, [sp, #28]
 80124b2:	4654      	mov	r4, sl
 80124b4:	2000      	movs	r0, #0
 80124b6:	f04f 0c0a 	mov.w	ip, #10
 80124ba:	4621      	mov	r1, r4
 80124bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124c0:	3b30      	subs	r3, #48	; 0x30
 80124c2:	2b09      	cmp	r3, #9
 80124c4:	d94e      	bls.n	8012564 <_vfiprintf_r+0x1c4>
 80124c6:	b1b0      	cbz	r0, 80124f6 <_vfiprintf_r+0x156>
 80124c8:	9207      	str	r2, [sp, #28]
 80124ca:	e014      	b.n	80124f6 <_vfiprintf_r+0x156>
 80124cc:	eba0 0308 	sub.w	r3, r0, r8
 80124d0:	fa09 f303 	lsl.w	r3, r9, r3
 80124d4:	4313      	orrs	r3, r2
 80124d6:	9304      	str	r3, [sp, #16]
 80124d8:	46a2      	mov	sl, r4
 80124da:	e7d2      	b.n	8012482 <_vfiprintf_r+0xe2>
 80124dc:	9b03      	ldr	r3, [sp, #12]
 80124de:	1d19      	adds	r1, r3, #4
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	9103      	str	r1, [sp, #12]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	bfbb      	ittet	lt
 80124e8:	425b      	neglt	r3, r3
 80124ea:	f042 0202 	orrlt.w	r2, r2, #2
 80124ee:	9307      	strge	r3, [sp, #28]
 80124f0:	9307      	strlt	r3, [sp, #28]
 80124f2:	bfb8      	it	lt
 80124f4:	9204      	strlt	r2, [sp, #16]
 80124f6:	7823      	ldrb	r3, [r4, #0]
 80124f8:	2b2e      	cmp	r3, #46	; 0x2e
 80124fa:	d10c      	bne.n	8012516 <_vfiprintf_r+0x176>
 80124fc:	7863      	ldrb	r3, [r4, #1]
 80124fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012500:	d135      	bne.n	801256e <_vfiprintf_r+0x1ce>
 8012502:	9b03      	ldr	r3, [sp, #12]
 8012504:	1d1a      	adds	r2, r3, #4
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	9203      	str	r2, [sp, #12]
 801250a:	2b00      	cmp	r3, #0
 801250c:	bfb8      	it	lt
 801250e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012512:	3402      	adds	r4, #2
 8012514:	9305      	str	r3, [sp, #20]
 8012516:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80125fc <_vfiprintf_r+0x25c>
 801251a:	7821      	ldrb	r1, [r4, #0]
 801251c:	2203      	movs	r2, #3
 801251e:	4650      	mov	r0, sl
 8012520:	f7ed fe86 	bl	8000230 <memchr>
 8012524:	b140      	cbz	r0, 8012538 <_vfiprintf_r+0x198>
 8012526:	2340      	movs	r3, #64	; 0x40
 8012528:	eba0 000a 	sub.w	r0, r0, sl
 801252c:	fa03 f000 	lsl.w	r0, r3, r0
 8012530:	9b04      	ldr	r3, [sp, #16]
 8012532:	4303      	orrs	r3, r0
 8012534:	3401      	adds	r4, #1
 8012536:	9304      	str	r3, [sp, #16]
 8012538:	f814 1b01 	ldrb.w	r1, [r4], #1
 801253c:	482c      	ldr	r0, [pc, #176]	; (80125f0 <_vfiprintf_r+0x250>)
 801253e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012542:	2206      	movs	r2, #6
 8012544:	f7ed fe74 	bl	8000230 <memchr>
 8012548:	2800      	cmp	r0, #0
 801254a:	d03f      	beq.n	80125cc <_vfiprintf_r+0x22c>
 801254c:	4b29      	ldr	r3, [pc, #164]	; (80125f4 <_vfiprintf_r+0x254>)
 801254e:	bb1b      	cbnz	r3, 8012598 <_vfiprintf_r+0x1f8>
 8012550:	9b03      	ldr	r3, [sp, #12]
 8012552:	3307      	adds	r3, #7
 8012554:	f023 0307 	bic.w	r3, r3, #7
 8012558:	3308      	adds	r3, #8
 801255a:	9303      	str	r3, [sp, #12]
 801255c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801255e:	443b      	add	r3, r7
 8012560:	9309      	str	r3, [sp, #36]	; 0x24
 8012562:	e767      	b.n	8012434 <_vfiprintf_r+0x94>
 8012564:	fb0c 3202 	mla	r2, ip, r2, r3
 8012568:	460c      	mov	r4, r1
 801256a:	2001      	movs	r0, #1
 801256c:	e7a5      	b.n	80124ba <_vfiprintf_r+0x11a>
 801256e:	2300      	movs	r3, #0
 8012570:	3401      	adds	r4, #1
 8012572:	9305      	str	r3, [sp, #20]
 8012574:	4619      	mov	r1, r3
 8012576:	f04f 0c0a 	mov.w	ip, #10
 801257a:	4620      	mov	r0, r4
 801257c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012580:	3a30      	subs	r2, #48	; 0x30
 8012582:	2a09      	cmp	r2, #9
 8012584:	d903      	bls.n	801258e <_vfiprintf_r+0x1ee>
 8012586:	2b00      	cmp	r3, #0
 8012588:	d0c5      	beq.n	8012516 <_vfiprintf_r+0x176>
 801258a:	9105      	str	r1, [sp, #20]
 801258c:	e7c3      	b.n	8012516 <_vfiprintf_r+0x176>
 801258e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012592:	4604      	mov	r4, r0
 8012594:	2301      	movs	r3, #1
 8012596:	e7f0      	b.n	801257a <_vfiprintf_r+0x1da>
 8012598:	ab03      	add	r3, sp, #12
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	462a      	mov	r2, r5
 801259e:	4b16      	ldr	r3, [pc, #88]	; (80125f8 <_vfiprintf_r+0x258>)
 80125a0:	a904      	add	r1, sp, #16
 80125a2:	4630      	mov	r0, r6
 80125a4:	f7fb fd84 	bl	800e0b0 <_printf_float>
 80125a8:	4607      	mov	r7, r0
 80125aa:	1c78      	adds	r0, r7, #1
 80125ac:	d1d6      	bne.n	801255c <_vfiprintf_r+0x1bc>
 80125ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125b0:	07d9      	lsls	r1, r3, #31
 80125b2:	d405      	bmi.n	80125c0 <_vfiprintf_r+0x220>
 80125b4:	89ab      	ldrh	r3, [r5, #12]
 80125b6:	059a      	lsls	r2, r3, #22
 80125b8:	d402      	bmi.n	80125c0 <_vfiprintf_r+0x220>
 80125ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125bc:	f7fe ff32 	bl	8011424 <__retarget_lock_release_recursive>
 80125c0:	89ab      	ldrh	r3, [r5, #12]
 80125c2:	065b      	lsls	r3, r3, #25
 80125c4:	f53f af12 	bmi.w	80123ec <_vfiprintf_r+0x4c>
 80125c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125ca:	e711      	b.n	80123f0 <_vfiprintf_r+0x50>
 80125cc:	ab03      	add	r3, sp, #12
 80125ce:	9300      	str	r3, [sp, #0]
 80125d0:	462a      	mov	r2, r5
 80125d2:	4b09      	ldr	r3, [pc, #36]	; (80125f8 <_vfiprintf_r+0x258>)
 80125d4:	a904      	add	r1, sp, #16
 80125d6:	4630      	mov	r0, r6
 80125d8:	f7fc f80e 	bl	800e5f8 <_printf_i>
 80125dc:	e7e4      	b.n	80125a8 <_vfiprintf_r+0x208>
 80125de:	bf00      	nop
 80125e0:	080143ac 	.word	0x080143ac
 80125e4:	080143cc 	.word	0x080143cc
 80125e8:	0801438c 	.word	0x0801438c
 80125ec:	080145c4 	.word	0x080145c4
 80125f0:	080145ce 	.word	0x080145ce
 80125f4:	0800e0b1 	.word	0x0800e0b1
 80125f8:	0801237b 	.word	0x0801237b
 80125fc:	080145ca 	.word	0x080145ca

08012600 <nan>:
 8012600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012608 <nan+0x8>
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	00000000 	.word	0x00000000
 801260c:	7ff80000 	.word	0x7ff80000

08012610 <_sbrk_r>:
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	4d06      	ldr	r5, [pc, #24]	; (801262c <_sbrk_r+0x1c>)
 8012614:	2300      	movs	r3, #0
 8012616:	4604      	mov	r4, r0
 8012618:	4608      	mov	r0, r1
 801261a:	602b      	str	r3, [r5, #0]
 801261c:	f7f3 fc16 	bl	8005e4c <_sbrk>
 8012620:	1c43      	adds	r3, r0, #1
 8012622:	d102      	bne.n	801262a <_sbrk_r+0x1a>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	b103      	cbz	r3, 801262a <_sbrk_r+0x1a>
 8012628:	6023      	str	r3, [r4, #0]
 801262a:	bd38      	pop	{r3, r4, r5, pc}
 801262c:	20009430 	.word	0x20009430

08012630 <__sread>:
 8012630:	b510      	push	{r4, lr}
 8012632:	460c      	mov	r4, r1
 8012634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012638:	f000 f93a 	bl	80128b0 <_read_r>
 801263c:	2800      	cmp	r0, #0
 801263e:	bfab      	itete	ge
 8012640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012642:	89a3      	ldrhlt	r3, [r4, #12]
 8012644:	181b      	addge	r3, r3, r0
 8012646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801264a:	bfac      	ite	ge
 801264c:	6563      	strge	r3, [r4, #84]	; 0x54
 801264e:	81a3      	strhlt	r3, [r4, #12]
 8012650:	bd10      	pop	{r4, pc}

08012652 <__swrite>:
 8012652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012656:	461f      	mov	r7, r3
 8012658:	898b      	ldrh	r3, [r1, #12]
 801265a:	05db      	lsls	r3, r3, #23
 801265c:	4605      	mov	r5, r0
 801265e:	460c      	mov	r4, r1
 8012660:	4616      	mov	r6, r2
 8012662:	d505      	bpl.n	8012670 <__swrite+0x1e>
 8012664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012668:	2302      	movs	r3, #2
 801266a:	2200      	movs	r2, #0
 801266c:	f000 f8b8 	bl	80127e0 <_lseek_r>
 8012670:	89a3      	ldrh	r3, [r4, #12]
 8012672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801267a:	81a3      	strh	r3, [r4, #12]
 801267c:	4632      	mov	r2, r6
 801267e:	463b      	mov	r3, r7
 8012680:	4628      	mov	r0, r5
 8012682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012686:	f000 b837 	b.w	80126f8 <_write_r>

0801268a <__sseek>:
 801268a:	b510      	push	{r4, lr}
 801268c:	460c      	mov	r4, r1
 801268e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012692:	f000 f8a5 	bl	80127e0 <_lseek_r>
 8012696:	1c43      	adds	r3, r0, #1
 8012698:	89a3      	ldrh	r3, [r4, #12]
 801269a:	bf15      	itete	ne
 801269c:	6560      	strne	r0, [r4, #84]	; 0x54
 801269e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126a6:	81a3      	strheq	r3, [r4, #12]
 80126a8:	bf18      	it	ne
 80126aa:	81a3      	strhne	r3, [r4, #12]
 80126ac:	bd10      	pop	{r4, pc}

080126ae <__sclose>:
 80126ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126b2:	f000 b851 	b.w	8012758 <_close_r>

080126b6 <strncmp>:
 80126b6:	b510      	push	{r4, lr}
 80126b8:	b17a      	cbz	r2, 80126da <strncmp+0x24>
 80126ba:	4603      	mov	r3, r0
 80126bc:	3901      	subs	r1, #1
 80126be:	1884      	adds	r4, r0, r2
 80126c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80126c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80126c8:	4290      	cmp	r0, r2
 80126ca:	d101      	bne.n	80126d0 <strncmp+0x1a>
 80126cc:	42a3      	cmp	r3, r4
 80126ce:	d101      	bne.n	80126d4 <strncmp+0x1e>
 80126d0:	1a80      	subs	r0, r0, r2
 80126d2:	bd10      	pop	{r4, pc}
 80126d4:	2800      	cmp	r0, #0
 80126d6:	d1f3      	bne.n	80126c0 <strncmp+0xa>
 80126d8:	e7fa      	b.n	80126d0 <strncmp+0x1a>
 80126da:	4610      	mov	r0, r2
 80126dc:	e7f9      	b.n	80126d2 <strncmp+0x1c>

080126de <__ascii_wctomb>:
 80126de:	b149      	cbz	r1, 80126f4 <__ascii_wctomb+0x16>
 80126e0:	2aff      	cmp	r2, #255	; 0xff
 80126e2:	bf85      	ittet	hi
 80126e4:	238a      	movhi	r3, #138	; 0x8a
 80126e6:	6003      	strhi	r3, [r0, #0]
 80126e8:	700a      	strbls	r2, [r1, #0]
 80126ea:	f04f 30ff 	movhi.w	r0, #4294967295
 80126ee:	bf98      	it	ls
 80126f0:	2001      	movls	r0, #1
 80126f2:	4770      	bx	lr
 80126f4:	4608      	mov	r0, r1
 80126f6:	4770      	bx	lr

080126f8 <_write_r>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4d07      	ldr	r5, [pc, #28]	; (8012718 <_write_r+0x20>)
 80126fc:	4604      	mov	r4, r0
 80126fe:	4608      	mov	r0, r1
 8012700:	4611      	mov	r1, r2
 8012702:	2200      	movs	r2, #0
 8012704:	602a      	str	r2, [r5, #0]
 8012706:	461a      	mov	r2, r3
 8012708:	f7f3 fb50 	bl	8005dac <_write>
 801270c:	1c43      	adds	r3, r0, #1
 801270e:	d102      	bne.n	8012716 <_write_r+0x1e>
 8012710:	682b      	ldr	r3, [r5, #0]
 8012712:	b103      	cbz	r3, 8012716 <_write_r+0x1e>
 8012714:	6023      	str	r3, [r4, #0]
 8012716:	bd38      	pop	{r3, r4, r5, pc}
 8012718:	20009430 	.word	0x20009430

0801271c <__assert_func>:
 801271c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801271e:	4614      	mov	r4, r2
 8012720:	461a      	mov	r2, r3
 8012722:	4b09      	ldr	r3, [pc, #36]	; (8012748 <__assert_func+0x2c>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4605      	mov	r5, r0
 8012728:	68d8      	ldr	r0, [r3, #12]
 801272a:	b14c      	cbz	r4, 8012740 <__assert_func+0x24>
 801272c:	4b07      	ldr	r3, [pc, #28]	; (801274c <__assert_func+0x30>)
 801272e:	9100      	str	r1, [sp, #0]
 8012730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012734:	4906      	ldr	r1, [pc, #24]	; (8012750 <__assert_func+0x34>)
 8012736:	462b      	mov	r3, r5
 8012738:	f000 f81e 	bl	8012778 <fiprintf>
 801273c:	f000 f8ca 	bl	80128d4 <abort>
 8012740:	4b04      	ldr	r3, [pc, #16]	; (8012754 <__assert_func+0x38>)
 8012742:	461c      	mov	r4, r3
 8012744:	e7f3      	b.n	801272e <__assert_func+0x12>
 8012746:	bf00      	nop
 8012748:	2000002c 	.word	0x2000002c
 801274c:	080145d5 	.word	0x080145d5
 8012750:	080145e2 	.word	0x080145e2
 8012754:	08014610 	.word	0x08014610

08012758 <_close_r>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4d06      	ldr	r5, [pc, #24]	; (8012774 <_close_r+0x1c>)
 801275c:	2300      	movs	r3, #0
 801275e:	4604      	mov	r4, r0
 8012760:	4608      	mov	r0, r1
 8012762:	602b      	str	r3, [r5, #0]
 8012764:	f7f3 fb3e 	bl	8005de4 <_close>
 8012768:	1c43      	adds	r3, r0, #1
 801276a:	d102      	bne.n	8012772 <_close_r+0x1a>
 801276c:	682b      	ldr	r3, [r5, #0]
 801276e:	b103      	cbz	r3, 8012772 <_close_r+0x1a>
 8012770:	6023      	str	r3, [r4, #0]
 8012772:	bd38      	pop	{r3, r4, r5, pc}
 8012774:	20009430 	.word	0x20009430

08012778 <fiprintf>:
 8012778:	b40e      	push	{r1, r2, r3}
 801277a:	b503      	push	{r0, r1, lr}
 801277c:	4601      	mov	r1, r0
 801277e:	ab03      	add	r3, sp, #12
 8012780:	4805      	ldr	r0, [pc, #20]	; (8012798 <fiprintf+0x20>)
 8012782:	f853 2b04 	ldr.w	r2, [r3], #4
 8012786:	6800      	ldr	r0, [r0, #0]
 8012788:	9301      	str	r3, [sp, #4]
 801278a:	f7ff fe09 	bl	80123a0 <_vfiprintf_r>
 801278e:	b002      	add	sp, #8
 8012790:	f85d eb04 	ldr.w	lr, [sp], #4
 8012794:	b003      	add	sp, #12
 8012796:	4770      	bx	lr
 8012798:	2000002c 	.word	0x2000002c

0801279c <_fstat_r>:
 801279c:	b538      	push	{r3, r4, r5, lr}
 801279e:	4d07      	ldr	r5, [pc, #28]	; (80127bc <_fstat_r+0x20>)
 80127a0:	2300      	movs	r3, #0
 80127a2:	4604      	mov	r4, r0
 80127a4:	4608      	mov	r0, r1
 80127a6:	4611      	mov	r1, r2
 80127a8:	602b      	str	r3, [r5, #0]
 80127aa:	f7f3 fb27 	bl	8005dfc <_fstat>
 80127ae:	1c43      	adds	r3, r0, #1
 80127b0:	d102      	bne.n	80127b8 <_fstat_r+0x1c>
 80127b2:	682b      	ldr	r3, [r5, #0]
 80127b4:	b103      	cbz	r3, 80127b8 <_fstat_r+0x1c>
 80127b6:	6023      	str	r3, [r4, #0]
 80127b8:	bd38      	pop	{r3, r4, r5, pc}
 80127ba:	bf00      	nop
 80127bc:	20009430 	.word	0x20009430

080127c0 <_isatty_r>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4d06      	ldr	r5, [pc, #24]	; (80127dc <_isatty_r+0x1c>)
 80127c4:	2300      	movs	r3, #0
 80127c6:	4604      	mov	r4, r0
 80127c8:	4608      	mov	r0, r1
 80127ca:	602b      	str	r3, [r5, #0]
 80127cc:	f7f3 fb26 	bl	8005e1c <_isatty>
 80127d0:	1c43      	adds	r3, r0, #1
 80127d2:	d102      	bne.n	80127da <_isatty_r+0x1a>
 80127d4:	682b      	ldr	r3, [r5, #0]
 80127d6:	b103      	cbz	r3, 80127da <_isatty_r+0x1a>
 80127d8:	6023      	str	r3, [r4, #0]
 80127da:	bd38      	pop	{r3, r4, r5, pc}
 80127dc:	20009430 	.word	0x20009430

080127e0 <_lseek_r>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	4d07      	ldr	r5, [pc, #28]	; (8012800 <_lseek_r+0x20>)
 80127e4:	4604      	mov	r4, r0
 80127e6:	4608      	mov	r0, r1
 80127e8:	4611      	mov	r1, r2
 80127ea:	2200      	movs	r2, #0
 80127ec:	602a      	str	r2, [r5, #0]
 80127ee:	461a      	mov	r2, r3
 80127f0:	f7f3 fb1f 	bl	8005e32 <_lseek>
 80127f4:	1c43      	adds	r3, r0, #1
 80127f6:	d102      	bne.n	80127fe <_lseek_r+0x1e>
 80127f8:	682b      	ldr	r3, [r5, #0]
 80127fa:	b103      	cbz	r3, 80127fe <_lseek_r+0x1e>
 80127fc:	6023      	str	r3, [r4, #0]
 80127fe:	bd38      	pop	{r3, r4, r5, pc}
 8012800:	20009430 	.word	0x20009430

08012804 <memmove>:
 8012804:	4288      	cmp	r0, r1
 8012806:	b510      	push	{r4, lr}
 8012808:	eb01 0402 	add.w	r4, r1, r2
 801280c:	d902      	bls.n	8012814 <memmove+0x10>
 801280e:	4284      	cmp	r4, r0
 8012810:	4623      	mov	r3, r4
 8012812:	d807      	bhi.n	8012824 <memmove+0x20>
 8012814:	1e43      	subs	r3, r0, #1
 8012816:	42a1      	cmp	r1, r4
 8012818:	d008      	beq.n	801282c <memmove+0x28>
 801281a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801281e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012822:	e7f8      	b.n	8012816 <memmove+0x12>
 8012824:	4402      	add	r2, r0
 8012826:	4601      	mov	r1, r0
 8012828:	428a      	cmp	r2, r1
 801282a:	d100      	bne.n	801282e <memmove+0x2a>
 801282c:	bd10      	pop	{r4, pc}
 801282e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012836:	e7f7      	b.n	8012828 <memmove+0x24>

08012838 <__malloc_lock>:
 8012838:	4801      	ldr	r0, [pc, #4]	; (8012840 <__malloc_lock+0x8>)
 801283a:	f7fe bdf2 	b.w	8011422 <__retarget_lock_acquire_recursive>
 801283e:	bf00      	nop
 8012840:	20009424 	.word	0x20009424

08012844 <__malloc_unlock>:
 8012844:	4801      	ldr	r0, [pc, #4]	; (801284c <__malloc_unlock+0x8>)
 8012846:	f7fe bded 	b.w	8011424 <__retarget_lock_release_recursive>
 801284a:	bf00      	nop
 801284c:	20009424 	.word	0x20009424

08012850 <_realloc_r>:
 8012850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012854:	4680      	mov	r8, r0
 8012856:	4614      	mov	r4, r2
 8012858:	460e      	mov	r6, r1
 801285a:	b921      	cbnz	r1, 8012866 <_realloc_r+0x16>
 801285c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012860:	4611      	mov	r1, r2
 8012862:	f7ff bba3 	b.w	8011fac <_malloc_r>
 8012866:	b92a      	cbnz	r2, 8012874 <_realloc_r+0x24>
 8012868:	f7ff fb34 	bl	8011ed4 <_free_r>
 801286c:	4625      	mov	r5, r4
 801286e:	4628      	mov	r0, r5
 8012870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012874:	f000 f835 	bl	80128e2 <_malloc_usable_size_r>
 8012878:	4284      	cmp	r4, r0
 801287a:	4607      	mov	r7, r0
 801287c:	d802      	bhi.n	8012884 <_realloc_r+0x34>
 801287e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012882:	d812      	bhi.n	80128aa <_realloc_r+0x5a>
 8012884:	4621      	mov	r1, r4
 8012886:	4640      	mov	r0, r8
 8012888:	f7ff fb90 	bl	8011fac <_malloc_r>
 801288c:	4605      	mov	r5, r0
 801288e:	2800      	cmp	r0, #0
 8012890:	d0ed      	beq.n	801286e <_realloc_r+0x1e>
 8012892:	42bc      	cmp	r4, r7
 8012894:	4622      	mov	r2, r4
 8012896:	4631      	mov	r1, r6
 8012898:	bf28      	it	cs
 801289a:	463a      	movcs	r2, r7
 801289c:	f7fb fb52 	bl	800df44 <memcpy>
 80128a0:	4631      	mov	r1, r6
 80128a2:	4640      	mov	r0, r8
 80128a4:	f7ff fb16 	bl	8011ed4 <_free_r>
 80128a8:	e7e1      	b.n	801286e <_realloc_r+0x1e>
 80128aa:	4635      	mov	r5, r6
 80128ac:	e7df      	b.n	801286e <_realloc_r+0x1e>
	...

080128b0 <_read_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	4d07      	ldr	r5, [pc, #28]	; (80128d0 <_read_r+0x20>)
 80128b4:	4604      	mov	r4, r0
 80128b6:	4608      	mov	r0, r1
 80128b8:	4611      	mov	r1, r2
 80128ba:	2200      	movs	r2, #0
 80128bc:	602a      	str	r2, [r5, #0]
 80128be:	461a      	mov	r2, r3
 80128c0:	f7f3 fa57 	bl	8005d72 <_read>
 80128c4:	1c43      	adds	r3, r0, #1
 80128c6:	d102      	bne.n	80128ce <_read_r+0x1e>
 80128c8:	682b      	ldr	r3, [r5, #0]
 80128ca:	b103      	cbz	r3, 80128ce <_read_r+0x1e>
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	bd38      	pop	{r3, r4, r5, pc}
 80128d0:	20009430 	.word	0x20009430

080128d4 <abort>:
 80128d4:	b508      	push	{r3, lr}
 80128d6:	2006      	movs	r0, #6
 80128d8:	f000 f834 	bl	8012944 <raise>
 80128dc:	2001      	movs	r0, #1
 80128de:	f7f3 fa3e 	bl	8005d5e <_exit>

080128e2 <_malloc_usable_size_r>:
 80128e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128e6:	1f18      	subs	r0, r3, #4
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	bfbc      	itt	lt
 80128ec:	580b      	ldrlt	r3, [r1, r0]
 80128ee:	18c0      	addlt	r0, r0, r3
 80128f0:	4770      	bx	lr

080128f2 <_raise_r>:
 80128f2:	291f      	cmp	r1, #31
 80128f4:	b538      	push	{r3, r4, r5, lr}
 80128f6:	4604      	mov	r4, r0
 80128f8:	460d      	mov	r5, r1
 80128fa:	d904      	bls.n	8012906 <_raise_r+0x14>
 80128fc:	2316      	movs	r3, #22
 80128fe:	6003      	str	r3, [r0, #0]
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012908:	b112      	cbz	r2, 8012910 <_raise_r+0x1e>
 801290a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801290e:	b94b      	cbnz	r3, 8012924 <_raise_r+0x32>
 8012910:	4620      	mov	r0, r4
 8012912:	f000 f831 	bl	8012978 <_getpid_r>
 8012916:	462a      	mov	r2, r5
 8012918:	4601      	mov	r1, r0
 801291a:	4620      	mov	r0, r4
 801291c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012920:	f000 b818 	b.w	8012954 <_kill_r>
 8012924:	2b01      	cmp	r3, #1
 8012926:	d00a      	beq.n	801293e <_raise_r+0x4c>
 8012928:	1c59      	adds	r1, r3, #1
 801292a:	d103      	bne.n	8012934 <_raise_r+0x42>
 801292c:	2316      	movs	r3, #22
 801292e:	6003      	str	r3, [r0, #0]
 8012930:	2001      	movs	r0, #1
 8012932:	e7e7      	b.n	8012904 <_raise_r+0x12>
 8012934:	2400      	movs	r4, #0
 8012936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801293a:	4628      	mov	r0, r5
 801293c:	4798      	blx	r3
 801293e:	2000      	movs	r0, #0
 8012940:	e7e0      	b.n	8012904 <_raise_r+0x12>
	...

08012944 <raise>:
 8012944:	4b02      	ldr	r3, [pc, #8]	; (8012950 <raise+0xc>)
 8012946:	4601      	mov	r1, r0
 8012948:	6818      	ldr	r0, [r3, #0]
 801294a:	f7ff bfd2 	b.w	80128f2 <_raise_r>
 801294e:	bf00      	nop
 8012950:	2000002c 	.word	0x2000002c

08012954 <_kill_r>:
 8012954:	b538      	push	{r3, r4, r5, lr}
 8012956:	4d07      	ldr	r5, [pc, #28]	; (8012974 <_kill_r+0x20>)
 8012958:	2300      	movs	r3, #0
 801295a:	4604      	mov	r4, r0
 801295c:	4608      	mov	r0, r1
 801295e:	4611      	mov	r1, r2
 8012960:	602b      	str	r3, [r5, #0]
 8012962:	f7f3 f9ec 	bl	8005d3e <_kill>
 8012966:	1c43      	adds	r3, r0, #1
 8012968:	d102      	bne.n	8012970 <_kill_r+0x1c>
 801296a:	682b      	ldr	r3, [r5, #0]
 801296c:	b103      	cbz	r3, 8012970 <_kill_r+0x1c>
 801296e:	6023      	str	r3, [r4, #0]
 8012970:	bd38      	pop	{r3, r4, r5, pc}
 8012972:	bf00      	nop
 8012974:	20009430 	.word	0x20009430

08012978 <_getpid_r>:
 8012978:	f7f3 b9d9 	b.w	8005d2e <_getpid>

0801297c <round>:
 801297c:	ec51 0b10 	vmov	r0, r1, d0
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8012986:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801298a:	2c13      	cmp	r4, #19
 801298c:	ee10 2a10 	vmov	r2, s0
 8012990:	460b      	mov	r3, r1
 8012992:	dc19      	bgt.n	80129c8 <round+0x4c>
 8012994:	2c00      	cmp	r4, #0
 8012996:	da09      	bge.n	80129ac <round+0x30>
 8012998:	3401      	adds	r4, #1
 801299a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801299e:	d103      	bne.n	80129a8 <round+0x2c>
 80129a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80129a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80129a8:	2200      	movs	r2, #0
 80129aa:	e028      	b.n	80129fe <round+0x82>
 80129ac:	4d15      	ldr	r5, [pc, #84]	; (8012a04 <round+0x88>)
 80129ae:	4125      	asrs	r5, r4
 80129b0:	ea01 0605 	and.w	r6, r1, r5
 80129b4:	4332      	orrs	r2, r6
 80129b6:	d00e      	beq.n	80129d6 <round+0x5a>
 80129b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80129bc:	fa42 f404 	asr.w	r4, r2, r4
 80129c0:	4423      	add	r3, r4
 80129c2:	ea23 0305 	bic.w	r3, r3, r5
 80129c6:	e7ef      	b.n	80129a8 <round+0x2c>
 80129c8:	2c33      	cmp	r4, #51	; 0x33
 80129ca:	dd07      	ble.n	80129dc <round+0x60>
 80129cc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80129d0:	d101      	bne.n	80129d6 <round+0x5a>
 80129d2:	f7ed fc83 	bl	80002dc <__adddf3>
 80129d6:	ec41 0b10 	vmov	d0, r0, r1
 80129da:	bd70      	pop	{r4, r5, r6, pc}
 80129dc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80129e0:	f04f 35ff 	mov.w	r5, #4294967295
 80129e4:	40f5      	lsrs	r5, r6
 80129e6:	4228      	tst	r0, r5
 80129e8:	d0f5      	beq.n	80129d6 <round+0x5a>
 80129ea:	2101      	movs	r1, #1
 80129ec:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80129f0:	fa01 f404 	lsl.w	r4, r1, r4
 80129f4:	1912      	adds	r2, r2, r4
 80129f6:	bf28      	it	cs
 80129f8:	185b      	addcs	r3, r3, r1
 80129fa:	ea22 0205 	bic.w	r2, r2, r5
 80129fe:	4619      	mov	r1, r3
 8012a00:	4610      	mov	r0, r2
 8012a02:	e7e8      	b.n	80129d6 <round+0x5a>
 8012a04:	000fffff 	.word	0x000fffff

08012a08 <fmaxf>:
 8012a08:	b508      	push	{r3, lr}
 8012a0a:	ed2d 8b02 	vpush	{d8}
 8012a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a12:	eef0 8a60 	vmov.f32	s17, s1
 8012a16:	f000 f82d 	bl	8012a74 <__fpclassifyf>
 8012a1a:	b148      	cbz	r0, 8012a30 <fmaxf+0x28>
 8012a1c:	eeb0 0a68 	vmov.f32	s0, s17
 8012a20:	f000 f828 	bl	8012a74 <__fpclassifyf>
 8012a24:	b130      	cbz	r0, 8012a34 <fmaxf+0x2c>
 8012a26:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2e:	dc01      	bgt.n	8012a34 <fmaxf+0x2c>
 8012a30:	eeb0 8a68 	vmov.f32	s16, s17
 8012a34:	eeb0 0a48 	vmov.f32	s0, s16
 8012a38:	ecbd 8b02 	vpop	{d8}
 8012a3c:	bd08      	pop	{r3, pc}

08012a3e <fminf>:
 8012a3e:	b508      	push	{r3, lr}
 8012a40:	ed2d 8b02 	vpush	{d8}
 8012a44:	eeb0 8a40 	vmov.f32	s16, s0
 8012a48:	eef0 8a60 	vmov.f32	s17, s1
 8012a4c:	f000 f812 	bl	8012a74 <__fpclassifyf>
 8012a50:	b148      	cbz	r0, 8012a66 <fminf+0x28>
 8012a52:	eeb0 0a68 	vmov.f32	s0, s17
 8012a56:	f000 f80d 	bl	8012a74 <__fpclassifyf>
 8012a5a:	b130      	cbz	r0, 8012a6a <fminf+0x2c>
 8012a5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a64:	d401      	bmi.n	8012a6a <fminf+0x2c>
 8012a66:	eeb0 8a68 	vmov.f32	s16, s17
 8012a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8012a6e:	ecbd 8b02 	vpop	{d8}
 8012a72:	bd08      	pop	{r3, pc}

08012a74 <__fpclassifyf>:
 8012a74:	ee10 3a10 	vmov	r3, s0
 8012a78:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8012a7c:	d00d      	beq.n	8012a9a <__fpclassifyf+0x26>
 8012a7e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8012a82:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012a86:	d30a      	bcc.n	8012a9e <__fpclassifyf+0x2a>
 8012a88:	4b07      	ldr	r3, [pc, #28]	; (8012aa8 <__fpclassifyf+0x34>)
 8012a8a:	1e42      	subs	r2, r0, #1
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d908      	bls.n	8012aa2 <__fpclassifyf+0x2e>
 8012a90:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8012a94:	4258      	negs	r0, r3
 8012a96:	4158      	adcs	r0, r3
 8012a98:	4770      	bx	lr
 8012a9a:	2002      	movs	r0, #2
 8012a9c:	4770      	bx	lr
 8012a9e:	2004      	movs	r0, #4
 8012aa0:	4770      	bx	lr
 8012aa2:	2003      	movs	r0, #3
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop
 8012aa8:	007ffffe 	.word	0x007ffffe
 8012aac:	00000000 	.word	0x00000000

08012ab0 <exp>:
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	ed2d 8b02 	vpush	{d8}
 8012ab6:	ec55 4b10 	vmov	r4, r5, d0
 8012aba:	f000 f881 	bl	8012bc0 <__ieee754_exp>
 8012abe:	eeb0 8a40 	vmov.f32	s16, s0
 8012ac2:	eef0 8a60 	vmov.f32	s17, s1
 8012ac6:	ec45 4b10 	vmov	d0, r4, r5
 8012aca:	f000 fab0 	bl	801302e <finite>
 8012ace:	b168      	cbz	r0, 8012aec <exp+0x3c>
 8012ad0:	a317      	add	r3, pc, #92	; (adr r3, 8012b30 <exp+0x80>)
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	4629      	mov	r1, r5
 8012ada:	f7ee f845 	bl	8000b68 <__aeabi_dcmpgt>
 8012ade:	b160      	cbz	r0, 8012afa <exp+0x4a>
 8012ae0:	f7fb fa06 	bl	800def0 <__errno>
 8012ae4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8012b20 <exp+0x70>
 8012ae8:	2322      	movs	r3, #34	; 0x22
 8012aea:	6003      	str	r3, [r0, #0]
 8012aec:	eeb0 0a48 	vmov.f32	s0, s16
 8012af0:	eef0 0a68 	vmov.f32	s1, s17
 8012af4:	ecbd 8b02 	vpop	{d8}
 8012af8:	bd38      	pop	{r3, r4, r5, pc}
 8012afa:	a30f      	add	r3, pc, #60	; (adr r3, 8012b38 <exp+0x88>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	4620      	mov	r0, r4
 8012b02:	4629      	mov	r1, r5
 8012b04:	f7ee f812 	bl	8000b2c <__aeabi_dcmplt>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d0ef      	beq.n	8012aec <exp+0x3c>
 8012b0c:	f7fb f9f0 	bl	800def0 <__errno>
 8012b10:	2322      	movs	r3, #34	; 0x22
 8012b12:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8012b28 <exp+0x78>
 8012b16:	6003      	str	r3, [r0, #0]
 8012b18:	e7e8      	b.n	8012aec <exp+0x3c>
 8012b1a:	bf00      	nop
 8012b1c:	f3af 8000 	nop.w
 8012b20:	00000000 	.word	0x00000000
 8012b24:	7ff00000 	.word	0x7ff00000
	...
 8012b30:	fefa39ef 	.word	0xfefa39ef
 8012b34:	40862e42 	.word	0x40862e42
 8012b38:	d52d3051 	.word	0xd52d3051
 8012b3c:	c0874910 	.word	0xc0874910

08012b40 <fmodf>:
 8012b40:	b508      	push	{r3, lr}
 8012b42:	ed2d 8b02 	vpush	{d8}
 8012b46:	eef0 8a40 	vmov.f32	s17, s0
 8012b4a:	eeb0 8a60 	vmov.f32	s16, s1
 8012b4e:	f000 f9b9 	bl	8012ec4 <__ieee754_fmodf>
 8012b52:	eef4 8a48 	vcmp.f32	s17, s16
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	d60c      	bvs.n	8012b76 <fmodf+0x36>
 8012b5c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012b7c <fmodf+0x3c>
 8012b60:	eeb4 8a68 	vcmp.f32	s16, s17
 8012b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b68:	d105      	bne.n	8012b76 <fmodf+0x36>
 8012b6a:	f7fb f9c1 	bl	800def0 <__errno>
 8012b6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012b72:	2321      	movs	r3, #33	; 0x21
 8012b74:	6003      	str	r3, [r0, #0]
 8012b76:	ecbd 8b02 	vpop	{d8}
 8012b7a:	bd08      	pop	{r3, pc}
 8012b7c:	00000000 	.word	0x00000000

08012b80 <sqrtf>:
 8012b80:	b508      	push	{r3, lr}
 8012b82:	ed2d 8b02 	vpush	{d8}
 8012b86:	eeb0 8a40 	vmov.f32	s16, s0
 8012b8a:	f000 fa1d 	bl	8012fc8 <__ieee754_sqrtf>
 8012b8e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b96:	d60c      	bvs.n	8012bb2 <sqrtf+0x32>
 8012b98:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012bb8 <sqrtf+0x38>
 8012b9c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba4:	d505      	bpl.n	8012bb2 <sqrtf+0x32>
 8012ba6:	f7fb f9a3 	bl	800def0 <__errno>
 8012baa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012bae:	2321      	movs	r3, #33	; 0x21
 8012bb0:	6003      	str	r3, [r0, #0]
 8012bb2:	ecbd 8b02 	vpop	{d8}
 8012bb6:	bd08      	pop	{r3, pc}
	...

08012bc0 <__ieee754_exp>:
 8012bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc4:	ec55 4b10 	vmov	r4, r5, d0
 8012bc8:	49b5      	ldr	r1, [pc, #724]	; (8012ea0 <__ieee754_exp+0x2e0>)
 8012bca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bce:	428b      	cmp	r3, r1
 8012bd0:	ed2d 8b04 	vpush	{d8-d9}
 8012bd4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8012bd8:	d93d      	bls.n	8012c56 <__ieee754_exp+0x96>
 8012bda:	49b2      	ldr	r1, [pc, #712]	; (8012ea4 <__ieee754_exp+0x2e4>)
 8012bdc:	428b      	cmp	r3, r1
 8012bde:	d918      	bls.n	8012c12 <__ieee754_exp+0x52>
 8012be0:	ee10 3a10 	vmov	r3, s0
 8012be4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8012be8:	4313      	orrs	r3, r2
 8012bea:	d009      	beq.n	8012c00 <__ieee754_exp+0x40>
 8012bec:	ee10 2a10 	vmov	r2, s0
 8012bf0:	462b      	mov	r3, r5
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	4629      	mov	r1, r5
 8012bf6:	f7ed fb71 	bl	80002dc <__adddf3>
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	e002      	b.n	8012c06 <__ieee754_exp+0x46>
 8012c00:	b10e      	cbz	r6, 8012c06 <__ieee754_exp+0x46>
 8012c02:	2400      	movs	r4, #0
 8012c04:	2500      	movs	r5, #0
 8012c06:	ecbd 8b04 	vpop	{d8-d9}
 8012c0a:	ec45 4b10 	vmov	d0, r4, r5
 8012c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c12:	a38d      	add	r3, pc, #564	; (adr r3, 8012e48 <__ieee754_exp+0x288>)
 8012c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c18:	ee10 0a10 	vmov	r0, s0
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	f7ed ffa3 	bl	8000b68 <__aeabi_dcmpgt>
 8012c22:	4607      	mov	r7, r0
 8012c24:	b130      	cbz	r0, 8012c34 <__ieee754_exp+0x74>
 8012c26:	ecbd 8b04 	vpop	{d8-d9}
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c30:	f000 b9f4 	b.w	801301c <__math_oflow>
 8012c34:	a386      	add	r3, pc, #536	; (adr r3, 8012e50 <__ieee754_exp+0x290>)
 8012c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	f7ed ff75 	bl	8000b2c <__aeabi_dcmplt>
 8012c42:	2800      	cmp	r0, #0
 8012c44:	f000 808b 	beq.w	8012d5e <__ieee754_exp+0x19e>
 8012c48:	ecbd 8b04 	vpop	{d8-d9}
 8012c4c:	4638      	mov	r0, r7
 8012c4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c52:	f000 b9da 	b.w	801300a <__math_uflow>
 8012c56:	4a94      	ldr	r2, [pc, #592]	; (8012ea8 <__ieee754_exp+0x2e8>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	f240 80ac 	bls.w	8012db6 <__ieee754_exp+0x1f6>
 8012c5e:	4a93      	ldr	r2, [pc, #588]	; (8012eac <__ieee754_exp+0x2ec>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d87c      	bhi.n	8012d5e <__ieee754_exp+0x19e>
 8012c64:	4b92      	ldr	r3, [pc, #584]	; (8012eb0 <__ieee754_exp+0x2f0>)
 8012c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6e:	ee10 0a10 	vmov	r0, s0
 8012c72:	4629      	mov	r1, r5
 8012c74:	f7ed fb30 	bl	80002d8 <__aeabi_dsub>
 8012c78:	4b8e      	ldr	r3, [pc, #568]	; (8012eb4 <__ieee754_exp+0x2f4>)
 8012c7a:	00f7      	lsls	r7, r6, #3
 8012c7c:	443b      	add	r3, r7
 8012c7e:	ed93 7b00 	vldr	d7, [r3]
 8012c82:	f1c6 0a01 	rsb	sl, r6, #1
 8012c86:	4680      	mov	r8, r0
 8012c88:	4689      	mov	r9, r1
 8012c8a:	ebaa 0a06 	sub.w	sl, sl, r6
 8012c8e:	eeb0 8a47 	vmov.f32	s16, s14
 8012c92:	eef0 8a67 	vmov.f32	s17, s15
 8012c96:	ec53 2b18 	vmov	r2, r3, d8
 8012c9a:	4640      	mov	r0, r8
 8012c9c:	4649      	mov	r1, r9
 8012c9e:	f7ed fb1b 	bl	80002d8 <__aeabi_dsub>
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	4622      	mov	r2, r4
 8012ca8:	462b      	mov	r3, r5
 8012caa:	4620      	mov	r0, r4
 8012cac:	4629      	mov	r1, r5
 8012cae:	f7ed fccb 	bl	8000648 <__aeabi_dmul>
 8012cb2:	a369      	add	r3, pc, #420	; (adr r3, 8012e58 <__ieee754_exp+0x298>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	f7ed fcc4 	bl	8000648 <__aeabi_dmul>
 8012cc0:	a367      	add	r3, pc, #412	; (adr r3, 8012e60 <__ieee754_exp+0x2a0>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	f7ed fb07 	bl	80002d8 <__aeabi_dsub>
 8012cca:	4632      	mov	r2, r6
 8012ccc:	463b      	mov	r3, r7
 8012cce:	f7ed fcbb 	bl	8000648 <__aeabi_dmul>
 8012cd2:	a365      	add	r3, pc, #404	; (adr r3, 8012e68 <__ieee754_exp+0x2a8>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	f7ed fb00 	bl	80002dc <__adddf3>
 8012cdc:	4632      	mov	r2, r6
 8012cde:	463b      	mov	r3, r7
 8012ce0:	f7ed fcb2 	bl	8000648 <__aeabi_dmul>
 8012ce4:	a362      	add	r3, pc, #392	; (adr r3, 8012e70 <__ieee754_exp+0x2b0>)
 8012ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cea:	f7ed faf5 	bl	80002d8 <__aeabi_dsub>
 8012cee:	4632      	mov	r2, r6
 8012cf0:	463b      	mov	r3, r7
 8012cf2:	f7ed fca9 	bl	8000648 <__aeabi_dmul>
 8012cf6:	a360      	add	r3, pc, #384	; (adr r3, 8012e78 <__ieee754_exp+0x2b8>)
 8012cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfc:	f7ed faee 	bl	80002dc <__adddf3>
 8012d00:	4632      	mov	r2, r6
 8012d02:	463b      	mov	r3, r7
 8012d04:	f7ed fca0 	bl	8000648 <__aeabi_dmul>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	4629      	mov	r1, r5
 8012d10:	f7ed fae2 	bl	80002d8 <__aeabi_dsub>
 8012d14:	4602      	mov	r2, r0
 8012d16:	460b      	mov	r3, r1
 8012d18:	4606      	mov	r6, r0
 8012d1a:	460f      	mov	r7, r1
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	4629      	mov	r1, r5
 8012d20:	f7ed fc92 	bl	8000648 <__aeabi_dmul>
 8012d24:	ec41 0b19 	vmov	d9, r0, r1
 8012d28:	f1ba 0f00 	cmp.w	sl, #0
 8012d2c:	d15d      	bne.n	8012dea <__ieee754_exp+0x22a>
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012d34:	4630      	mov	r0, r6
 8012d36:	4639      	mov	r1, r7
 8012d38:	f7ed face 	bl	80002d8 <__aeabi_dsub>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	460b      	mov	r3, r1
 8012d40:	ec51 0b19 	vmov	r0, r1, d9
 8012d44:	f7ed fdaa 	bl	800089c <__aeabi_ddiv>
 8012d48:	4622      	mov	r2, r4
 8012d4a:	462b      	mov	r3, r5
 8012d4c:	f7ed fac4 	bl	80002d8 <__aeabi_dsub>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	2000      	movs	r0, #0
 8012d56:	4958      	ldr	r1, [pc, #352]	; (8012eb8 <__ieee754_exp+0x2f8>)
 8012d58:	f7ed fabe 	bl	80002d8 <__aeabi_dsub>
 8012d5c:	e74d      	b.n	8012bfa <__ieee754_exp+0x3a>
 8012d5e:	4857      	ldr	r0, [pc, #348]	; (8012ebc <__ieee754_exp+0x2fc>)
 8012d60:	a347      	add	r3, pc, #284	; (adr r3, 8012e80 <__ieee754_exp+0x2c0>)
 8012d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d66:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f7ed fc6b 	bl	8000648 <__aeabi_dmul>
 8012d72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012d76:	f7ed fab1 	bl	80002dc <__adddf3>
 8012d7a:	f7ed ff15 	bl	8000ba8 <__aeabi_d2iz>
 8012d7e:	4682      	mov	sl, r0
 8012d80:	f7ed fbf8 	bl	8000574 <__aeabi_i2d>
 8012d84:	a340      	add	r3, pc, #256	; (adr r3, 8012e88 <__ieee754_exp+0x2c8>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	460f      	mov	r7, r1
 8012d8e:	f7ed fc5b 	bl	8000648 <__aeabi_dmul>
 8012d92:	4602      	mov	r2, r0
 8012d94:	460b      	mov	r3, r1
 8012d96:	4620      	mov	r0, r4
 8012d98:	4629      	mov	r1, r5
 8012d9a:	f7ed fa9d 	bl	80002d8 <__aeabi_dsub>
 8012d9e:	a33c      	add	r3, pc, #240	; (adr r3, 8012e90 <__ieee754_exp+0x2d0>)
 8012da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da4:	4680      	mov	r8, r0
 8012da6:	4689      	mov	r9, r1
 8012da8:	4630      	mov	r0, r6
 8012daa:	4639      	mov	r1, r7
 8012dac:	f7ed fc4c 	bl	8000648 <__aeabi_dmul>
 8012db0:	ec41 0b18 	vmov	d8, r0, r1
 8012db4:	e76f      	b.n	8012c96 <__ieee754_exp+0xd6>
 8012db6:	4a42      	ldr	r2, [pc, #264]	; (8012ec0 <__ieee754_exp+0x300>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d811      	bhi.n	8012de0 <__ieee754_exp+0x220>
 8012dbc:	a336      	add	r3, pc, #216	; (adr r3, 8012e98 <__ieee754_exp+0x2d8>)
 8012dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc2:	ee10 0a10 	vmov	r0, s0
 8012dc6:	4629      	mov	r1, r5
 8012dc8:	f7ed fa88 	bl	80002dc <__adddf3>
 8012dcc:	4b3a      	ldr	r3, [pc, #232]	; (8012eb8 <__ieee754_exp+0x2f8>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f7ed feca 	bl	8000b68 <__aeabi_dcmpgt>
 8012dd4:	b138      	cbz	r0, 8012de6 <__ieee754_exp+0x226>
 8012dd6:	4b38      	ldr	r3, [pc, #224]	; (8012eb8 <__ieee754_exp+0x2f8>)
 8012dd8:	2200      	movs	r2, #0
 8012dda:	4620      	mov	r0, r4
 8012ddc:	4629      	mov	r1, r5
 8012dde:	e70a      	b.n	8012bf6 <__ieee754_exp+0x36>
 8012de0:	f04f 0a00 	mov.w	sl, #0
 8012de4:	e75f      	b.n	8012ca6 <__ieee754_exp+0xe6>
 8012de6:	4682      	mov	sl, r0
 8012de8:	e75d      	b.n	8012ca6 <__ieee754_exp+0xe6>
 8012dea:	4632      	mov	r2, r6
 8012dec:	463b      	mov	r3, r7
 8012dee:	2000      	movs	r0, #0
 8012df0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012df4:	f7ed fa70 	bl	80002d8 <__aeabi_dsub>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	ec51 0b19 	vmov	r0, r1, d9
 8012e00:	f7ed fd4c 	bl	800089c <__aeabi_ddiv>
 8012e04:	4602      	mov	r2, r0
 8012e06:	460b      	mov	r3, r1
 8012e08:	ec51 0b18 	vmov	r0, r1, d8
 8012e0c:	f7ed fa64 	bl	80002d8 <__aeabi_dsub>
 8012e10:	4642      	mov	r2, r8
 8012e12:	464b      	mov	r3, r9
 8012e14:	f7ed fa60 	bl	80002d8 <__aeabi_dsub>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	4926      	ldr	r1, [pc, #152]	; (8012eb8 <__ieee754_exp+0x2f8>)
 8012e20:	f7ed fa5a 	bl	80002d8 <__aeabi_dsub>
 8012e24:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012e28:	4592      	cmp	sl, r2
 8012e2a:	db02      	blt.n	8012e32 <__ieee754_exp+0x272>
 8012e2c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012e30:	e6e3      	b.n	8012bfa <__ieee754_exp+0x3a>
 8012e32:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012e36:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012e40:	f7ed fc02 	bl	8000648 <__aeabi_dmul>
 8012e44:	e6d9      	b.n	8012bfa <__ieee754_exp+0x3a>
 8012e46:	bf00      	nop
 8012e48:	fefa39ef 	.word	0xfefa39ef
 8012e4c:	40862e42 	.word	0x40862e42
 8012e50:	d52d3051 	.word	0xd52d3051
 8012e54:	c0874910 	.word	0xc0874910
 8012e58:	72bea4d0 	.word	0x72bea4d0
 8012e5c:	3e663769 	.word	0x3e663769
 8012e60:	c5d26bf1 	.word	0xc5d26bf1
 8012e64:	3ebbbd41 	.word	0x3ebbbd41
 8012e68:	af25de2c 	.word	0xaf25de2c
 8012e6c:	3f11566a 	.word	0x3f11566a
 8012e70:	16bebd93 	.word	0x16bebd93
 8012e74:	3f66c16c 	.word	0x3f66c16c
 8012e78:	5555553e 	.word	0x5555553e
 8012e7c:	3fc55555 	.word	0x3fc55555
 8012e80:	652b82fe 	.word	0x652b82fe
 8012e84:	3ff71547 	.word	0x3ff71547
 8012e88:	fee00000 	.word	0xfee00000
 8012e8c:	3fe62e42 	.word	0x3fe62e42
 8012e90:	35793c76 	.word	0x35793c76
 8012e94:	3dea39ef 	.word	0x3dea39ef
 8012e98:	8800759c 	.word	0x8800759c
 8012e9c:	7e37e43c 	.word	0x7e37e43c
 8012ea0:	40862e41 	.word	0x40862e41
 8012ea4:	7fefffff 	.word	0x7fefffff
 8012ea8:	3fd62e42 	.word	0x3fd62e42
 8012eac:	3ff0a2b1 	.word	0x3ff0a2b1
 8012eb0:	08014628 	.word	0x08014628
 8012eb4:	08014638 	.word	0x08014638
 8012eb8:	3ff00000 	.word	0x3ff00000
 8012ebc:	08014618 	.word	0x08014618
 8012ec0:	3defffff 	.word	0x3defffff

08012ec4 <__ieee754_fmodf>:
 8012ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ec6:	ee10 5a90 	vmov	r5, s1
 8012eca:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8012ece:	d009      	beq.n	8012ee4 <__ieee754_fmodf+0x20>
 8012ed0:	ee10 2a10 	vmov	r2, s0
 8012ed4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012ed8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012edc:	da02      	bge.n	8012ee4 <__ieee754_fmodf+0x20>
 8012ede:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012ee2:	dd04      	ble.n	8012eee <__ieee754_fmodf+0x2a>
 8012ee4:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012ee8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eee:	42a3      	cmp	r3, r4
 8012ef0:	dbfc      	blt.n	8012eec <__ieee754_fmodf+0x28>
 8012ef2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8012ef6:	d105      	bne.n	8012f04 <__ieee754_fmodf+0x40>
 8012ef8:	4b32      	ldr	r3, [pc, #200]	; (8012fc4 <__ieee754_fmodf+0x100>)
 8012efa:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8012efe:	ed93 0a00 	vldr	s0, [r3]
 8012f02:	e7f3      	b.n	8012eec <__ieee754_fmodf+0x28>
 8012f04:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8012f08:	d13f      	bne.n	8012f8a <__ieee754_fmodf+0xc6>
 8012f0a:	0219      	lsls	r1, r3, #8
 8012f0c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012f10:	2900      	cmp	r1, #0
 8012f12:	dc37      	bgt.n	8012f84 <__ieee754_fmodf+0xc0>
 8012f14:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8012f18:	d13d      	bne.n	8012f96 <__ieee754_fmodf+0xd2>
 8012f1a:	0227      	lsls	r7, r4, #8
 8012f1c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8012f20:	2f00      	cmp	r7, #0
 8012f22:	da35      	bge.n	8012f90 <__ieee754_fmodf+0xcc>
 8012f24:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012f28:	bfbb      	ittet	lt
 8012f2a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012f2e:	1a12      	sublt	r2, r2, r0
 8012f30:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8012f34:	4093      	lsllt	r3, r2
 8012f36:	bfa8      	it	ge
 8012f38:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8012f3c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012f40:	bfb5      	itete	lt
 8012f42:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012f46:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8012f4a:	1a52      	sublt	r2, r2, r1
 8012f4c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8012f50:	bfb8      	it	lt
 8012f52:	4094      	lsllt	r4, r2
 8012f54:	1a40      	subs	r0, r0, r1
 8012f56:	1b1a      	subs	r2, r3, r4
 8012f58:	bb00      	cbnz	r0, 8012f9c <__ieee754_fmodf+0xd8>
 8012f5a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8012f5e:	bf38      	it	cc
 8012f60:	4613      	movcc	r3, r2
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d0c8      	beq.n	8012ef8 <__ieee754_fmodf+0x34>
 8012f66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f6a:	db1f      	blt.n	8012fac <__ieee754_fmodf+0xe8>
 8012f6c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012f70:	db1f      	blt.n	8012fb2 <__ieee754_fmodf+0xee>
 8012f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012f76:	317f      	adds	r1, #127	; 0x7f
 8012f78:	4333      	orrs	r3, r6
 8012f7a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012f7e:	ee00 3a10 	vmov	s0, r3
 8012f82:	e7b3      	b.n	8012eec <__ieee754_fmodf+0x28>
 8012f84:	3801      	subs	r0, #1
 8012f86:	0049      	lsls	r1, r1, #1
 8012f88:	e7c2      	b.n	8012f10 <__ieee754_fmodf+0x4c>
 8012f8a:	15d8      	asrs	r0, r3, #23
 8012f8c:	387f      	subs	r0, #127	; 0x7f
 8012f8e:	e7c1      	b.n	8012f14 <__ieee754_fmodf+0x50>
 8012f90:	3901      	subs	r1, #1
 8012f92:	007f      	lsls	r7, r7, #1
 8012f94:	e7c4      	b.n	8012f20 <__ieee754_fmodf+0x5c>
 8012f96:	15e1      	asrs	r1, r4, #23
 8012f98:	397f      	subs	r1, #127	; 0x7f
 8012f9a:	e7c3      	b.n	8012f24 <__ieee754_fmodf+0x60>
 8012f9c:	2a00      	cmp	r2, #0
 8012f9e:	da02      	bge.n	8012fa6 <__ieee754_fmodf+0xe2>
 8012fa0:	005b      	lsls	r3, r3, #1
 8012fa2:	3801      	subs	r0, #1
 8012fa4:	e7d7      	b.n	8012f56 <__ieee754_fmodf+0x92>
 8012fa6:	d0a7      	beq.n	8012ef8 <__ieee754_fmodf+0x34>
 8012fa8:	0053      	lsls	r3, r2, #1
 8012faa:	e7fa      	b.n	8012fa2 <__ieee754_fmodf+0xde>
 8012fac:	005b      	lsls	r3, r3, #1
 8012fae:	3901      	subs	r1, #1
 8012fb0:	e7d9      	b.n	8012f66 <__ieee754_fmodf+0xa2>
 8012fb2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012fb6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8012fba:	3182      	adds	r1, #130	; 0x82
 8012fbc:	410b      	asrs	r3, r1
 8012fbe:	4333      	orrs	r3, r6
 8012fc0:	e7dd      	b.n	8012f7e <__ieee754_fmodf+0xba>
 8012fc2:	bf00      	nop
 8012fc4:	08014648 	.word	0x08014648

08012fc8 <__ieee754_sqrtf>:
 8012fc8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012fcc:	4770      	bx	lr

08012fce <with_errno>:
 8012fce:	b570      	push	{r4, r5, r6, lr}
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	460d      	mov	r5, r1
 8012fd4:	4616      	mov	r6, r2
 8012fd6:	f7fa ff8b 	bl	800def0 <__errno>
 8012fda:	4629      	mov	r1, r5
 8012fdc:	6006      	str	r6, [r0, #0]
 8012fde:	4620      	mov	r0, r4
 8012fe0:	bd70      	pop	{r4, r5, r6, pc}

08012fe2 <xflow>:
 8012fe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fe4:	4614      	mov	r4, r2
 8012fe6:	461d      	mov	r5, r3
 8012fe8:	b108      	cbz	r0, 8012fee <xflow+0xc>
 8012fea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012fee:	e9cd 2300 	strd	r2, r3, [sp]
 8012ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed fb25 	bl	8000648 <__aeabi_dmul>
 8012ffe:	2222      	movs	r2, #34	; 0x22
 8013000:	b003      	add	sp, #12
 8013002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013006:	f7ff bfe2 	b.w	8012fce <with_errno>

0801300a <__math_uflow>:
 801300a:	b508      	push	{r3, lr}
 801300c:	2200      	movs	r2, #0
 801300e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013012:	f7ff ffe6 	bl	8012fe2 <xflow>
 8013016:	ec41 0b10 	vmov	d0, r0, r1
 801301a:	bd08      	pop	{r3, pc}

0801301c <__math_oflow>:
 801301c:	b508      	push	{r3, lr}
 801301e:	2200      	movs	r2, #0
 8013020:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013024:	f7ff ffdd 	bl	8012fe2 <xflow>
 8013028:	ec41 0b10 	vmov	d0, r0, r1
 801302c:	bd08      	pop	{r3, pc}

0801302e <finite>:
 801302e:	b082      	sub	sp, #8
 8013030:	ed8d 0b00 	vstr	d0, [sp]
 8013034:	9801      	ldr	r0, [sp, #4]
 8013036:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801303a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801303e:	0fc0      	lsrs	r0, r0, #31
 8013040:	b002      	add	sp, #8
 8013042:	4770      	bx	lr

08013044 <_init>:
 8013044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013046:	bf00      	nop
 8013048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801304a:	bc08      	pop	{r3}
 801304c:	469e      	mov	lr, r3
 801304e:	4770      	bx	lr

08013050 <_fini>:
 8013050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013052:	bf00      	nop
 8013054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013056:	bc08      	pop	{r3}
 8013058:	469e      	mov	lr, r3
 801305a:	4770      	bx	lr
