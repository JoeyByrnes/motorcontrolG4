
motorcontrolG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001600  08013fd0  08013fd0  00023fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155d0  080155d0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080155d0  080155d0  000255d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155d8  080155d8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155d8  080155d8  000255d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155dc  080155dc  000255dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080155e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009234  20000200  080157e0  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009434  080157e0  00039434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028411  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005276  00000000  00000000  00058641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  0005d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c80  00000000  00000000  0005f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4dd  00000000  00000000  000613d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027043  00000000  00000000  0008f8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e342  00000000  00000000  000b68f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d4c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bd4  00000000  00000000  001d4c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013fb4 	.word	0x08013fb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08013fb4 	.word	0x08013fb4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00d ff37 	bl	800eed4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010d2:	f005 feb5 	bl	8006e40 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010dc:	f004 fa84 	bl	80055e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ec:	f006 ff2a 	bl	8007f44 <HAL_ADCEx_MultiModeConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f6:	f004 fa77 	bl	80055e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_ADC1_Init+0xec>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001106:	237f      	movs	r3, #127	; 0x7f
 8001108:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001118:	f006 fa4c 	bl	80075b4 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001122:	f004 fa61 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000021c 	.word	0x2000021c
 8001134:	32601000 	.word	0x32601000

08001138 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00d fec5 	bl	800eed4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <MX_ADC2_Init+0xc4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001172:	2204      	movs	r2, #4
 8001174:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011b4:	f005 fe44 	bl	8006e40 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011be:	f004 fa13 	bl	80055e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC2_Init+0xc8>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	; 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011e0:	f006 f9e8 	bl	80075b4 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011ea:	f004 f9fd 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000288 	.word	0x20000288
 80011fc:	50000100 	.word	0x50000100
 8001200:	32601000 	.word	0x32601000

08001204 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00d fe59 	bl	800eed4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <MX_ADC3_Init+0xe8>)
 8001226:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800122a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800122e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800124a:	2204      	movs	r2, #4
 800124c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800125c:	2201      	movs	r2, #1
 800125e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800128c:	f005 fdd8 	bl	8006e40 <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001296:	f004 f9a7 	bl	80055e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012a6:	f006 fe4d 	bl	8007f44 <HAL_ADCEx_MultiModeConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f004 f99a 	bl	80055e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_ADC3_Init+0xec>)
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c0:	237f      	movs	r3, #127	; 0x7f
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012d2:	f006 f96f 	bl	80075b4 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012dc:	f004 f984 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200002f4 	.word	0x200002f4
 80012ec:	50000400 	.word	0x50000400
 80012f0:	32601000 	.word	0x32601000

080012f4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00d fde7 	bl	800eed4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <MX_ADC4_Init+0xc4>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800130e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001312:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800132e:	2204      	movs	r2, #4
 8001330:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001340:	2201      	movs	r2, #1
 8001342:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001370:	f005 fd66 	bl	8006e40 <HAL_ADC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800137a:	f004 f935 	bl	80055e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_ADC4_Init+0xc8>)
 8001380:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001382:	2306      	movs	r3, #6
 8001384:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138a:	237f      	movs	r3, #127	; 0x7f
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138e:	2304      	movs	r3, #4
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800139c:	f006 f90a 	bl	80075b4 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80013a6:	f004 f91f 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000360 	.word	0x20000360
 80013b8:	50000500 	.word	0x50000500
 80013bc:	0c900008 	.word	0x0c900008

080013c0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00d fd81 	bl	800eed4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <MX_ADC5_Init+0xc4>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013de:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001400:	2200      	movs	r2, #0
 8001402:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001406:	2200      	movs	r2, #0
 8001408:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC5_Init+0xc0>)
 800140c:	2201      	movs	r2, #1
 800140e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_ADC5_Init+0xc0>)
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC5_Init+0xc0>)
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_ADC5_Init+0xc0>)
 800143c:	f005 fd00 	bl	8006e40 <HAL_ADC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001446:	f004 f8cf 	bl	80055e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC5_Init+0xc8>)
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144e:	2306      	movs	r3, #6
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001456:	237f      	movs	r3, #127	; 0x7f
 8001458:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145a:	2304      	movs	r3, #4
 800145c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001468:	f006 f8a4 	bl	80075b4 <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001472:	f004 f8b9 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003cc 	.word	0x200003cc
 8001484:	50000600 	.word	0x50000600
 8001488:	04300002 	.word	0x04300002

0800148c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a6      	sub	sp, #152	; 0x98
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2254      	movs	r2, #84	; 0x54
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00d fd11 	bl	800eed4 <memset>
  if(adcHandle->Instance==ADC1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ba:	d16b      	bne.n	8001594 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 fa4b 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014d8:	f004 f886 	bl	80055e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014dc:	4b9f      	ldr	r3, [pc, #636]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a9e      	ldr	r2, [pc, #632]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014e6:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014ee:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a9b      	ldr	r2, [pc, #620]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b99      	ldr	r3, [pc, #612]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a95      	ldr	r2, [pc, #596]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001534:	4619      	mov	r1, r3
 8001536:	488b      	ldr	r0, [pc, #556]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 8001538:	f008 faa4 	bl	8009a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800153e:	4a8b      	ldr	r2, [pc, #556]	; (800176c <HAL_ADC_MspInit+0x2e0>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001544:	2205      	movs	r2, #5
 8001546:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001548:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001576:	487c      	ldr	r0, [pc, #496]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001578:	f006 fefc 	bl	8008374 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001582:	f004 f831 	bl	80055e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
 800158c:	4a76      	ldr	r2, [pc, #472]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001592:	e1b4      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a75      	ldr	r2, [pc, #468]	; (8001770 <HAL_ADC_MspInit+0x2e4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d16b      	bne.n	8001676 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015a8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	4618      	mov	r0, r3
 80015b0:	f009 f9da 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0x132>
      Error_Handler();
 80015ba:	f004 f815 	bl	80055e8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10b      	bne.n	80015e8 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a62      	ldr	r2, [pc, #392]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a5c      	ldr	r2, [pc, #368]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001616:	4619      	mov	r1, r3
 8001618:	4852      	ldr	r0, [pc, #328]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 800161a:	f008 fa33 	bl	8009a84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_ADC_MspInit+0x2ec>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001658:	4846      	ldr	r0, [pc, #280]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800165a:	f006 fe8b 	bl	8008374 <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001664:	f003 ffc0 	bl	80055e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a42      	ldr	r2, [pc, #264]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
 800166e:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001674:	e143      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_ADC_MspInit+0x2f0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 8085 	bne.w	800178c <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f009 f968 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800169e:	f003 ffa3 	bl	80055e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016fa:	4619      	mov	r1, r3
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 80016fe:	f008 f9c1 	bl	8009a84 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_ADC_MspInit+0x2fc>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800170a:	2225      	movs	r2, #37	; 0x25
 800170c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800173e:	f006 fe19 	bl	8008374 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_ADC_MspInit+0x2c0>
      Error_Handler();
 8001748:	f003 ff4e 	bl	80055e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001758:	e0d1      	b.n	80018fe <HAL_ADC_MspInit+0x472>
 800175a:	bf00      	nop
 800175c:	200005b8 	.word	0x200005b8
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400
 8001768:	20000438 	.word	0x20000438
 800176c:	40020008 	.word	0x40020008
 8001770:	50000100 	.word	0x50000100
 8001774:	20000498 	.word	0x20000498
 8001778:	4002001c 	.word	0x4002001c
 800177c:	50000400 	.word	0x50000400
 8001780:	200005bc 	.word	0x200005bc
 8001784:	200004f8 	.word	0x200004f8
 8001788:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_ADC_MspInit+0x47c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d16c      	bne.n	8001870 <HAL_ADC_MspInit+0x3e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800179c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a6:	4618      	mov	r0, r3
 80017a8:	f009 f8de 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80017b2:	f003 ff19 	bl	80055e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001810:	4619      	mov	r1, r3
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <HAL_ADC_MspInit+0x488>)
 8001814:	f008 f936 	bl	8009a84 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800181a:	4a40      	ldr	r2, [pc, #256]	; (800191c <HAL_ADC_MspInit+0x490>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001820:	2226      	movs	r2, #38	; 0x26
 8001822:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001852:	4831      	ldr	r0, [pc, #196]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001854:	f006 fd8e 	bl	8008374 <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 800185e:	f003 fec3 	bl	80055e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800186e:	e046      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC5)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x494>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d141      	bne.n	80018fe <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001884:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188a:	4618      	mov	r0, r3
 800188c:	f009 f86c 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_ADC_MspInit+0x40e>
      Error_Handler();
 8001896:	f003 fea7 	bl	80055e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_ADC_MspInit+0x480>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0x438>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f008 f8c3 	bl	8009a84 <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3798      	adds	r7, #152	; 0x98
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	50000500 	.word	0x50000500
 800190c:	200005bc 	.word	0x200005bc
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400
 8001918:	20000558 	.word	0x20000558
 800191c:	40020044 	.word	0x40020044
 8001920:	50000600 	.word	0x50000600

08001924 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <order_phases+0x1e8>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 8001940:	4873      	ldr	r0, [pc, #460]	; (8001b10 <order_phases+0x1ec>)
 8001942:	f00e f9cf 	bl	800fce4 <puts>
		cal->started = 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001b14 <order_phases+0x1f0>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 7a05 	vldr	s15, [r3, #20]
 8001976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d529      	bpl.n	80019d8 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001996:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        cal->cal_position.elec_velocity = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019a0:	461a      	mov	r2, r3
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <order_phases+0x1f4>)
 80019ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80019c4:	332c      	adds	r3, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f001 fe0f 	bl	80035ec <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
    	return;
 80019d6:	e096      	b.n	8001b06 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a05 	vldr	s15, [r3, #20]
 80019de:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b1c <order_phases+0x1f8>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d51d      	bpl.n	8001a28 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80019f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a12:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a1c:	332c      	adds	r3, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f001 fde3 	bl	80035ec <commutate>
    	return;
 8001a26:	e06e      	b.n	8001b06 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f001 fcf7 	bl	800341c <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	eef0 7ae7 	vabs.f32	s15, s15
 8001a46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b20 <order_phases+0x1fc>
 8001a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a4e:	ee16 0a90 	vmov	r0, s13
 8001a52:	f7fe fda1 	bl	8000598 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f011 ff45 	bl	80138ec <round>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8c5 	bl	8000bf8 <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd07      	ble.n	8001a9a <order_phases+0x176>
		cal->phase_order = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <order_phases+0x200>)
 8001a94:	f00e f926 	bl	800fce4 <puts>
 8001a98:	e006      	b.n	8001aa8 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001aa2:	4821      	ldr	r0, [pc, #132]	; (8001b28 <order_phases+0x204>)
 8001aa4:	f00e f91e 	bl	800fce4 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	481f      	ldr	r0, [pc, #124]	; (8001b2c <order_phases+0x208>)
 8001ab0:	f00e f892 	bl	800fbd8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd6d 	bl	8000598 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7fe fd68 	bl	8000598 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	4816      	ldr	r0, [pc, #88]	; (8001b30 <order_phases+0x20c>)
 8001ad6:	f00e f87f 	bl	800fbd8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <order_phases+0x1e8>)
 8001ae4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <order_phases+0x1f4>)
 8001af4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	200006c4 	.word	0x200006c4
 8001b10:	08013fd0 	.word	0x08013fd0
 8001b14:	37d1b717 	.word	0x37d1b717
 8001b18:	20000624 	.word	0x20000624
 8001b1c:	3fd06cbe 	.word	0x3fd06cbe
 8001b20:	40c90fdb 	.word	0x40c90fdb
 8001b24:	08013ff4 	.word	0x08013ff4
 8001b28:	0801400c 	.word	0x0801400c
 8001b2c:	08014024 	.word	0x08014024
 8001b30:	08014038 	.word	0x08014038

08001b34 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7c1b      	ldrb	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001b4a:	489e      	ldr	r0, [pc, #632]	; (8001dc4 <calibrate_encoder+0x290>)
 8001b4c:	f00e f8ca 	bl	800fce4 <puts>
			cal->started = 1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001dc8 <calibrate_encoder+0x294>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d525      	bpl.n	8001be8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bae:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        controller->i_d_des = I_CAL;
 8001bb2:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <calibrate_encoder+0x298>)
 8001bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001bcc:	332c      	adds	r3, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f001 fd0b 	bl	80035ec <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001be6:	e258      	b.n	800209a <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <calibrate_encoder+0x298>)
 8001bf0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bf4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001dd0 <calibrate_encoder+0x29c>
 8001bf8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bfc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001c00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	f140 808f 	bpl.w	8001d36 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001c36:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001c40:	332c      	adds	r3, #44	; 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f001 fcd1 	bl	80035ec <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dc00      	bgt.n	8001c62 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001c60:	e21b      	b.n	800209a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001de8 <calibrate_encoder+0x2b4>
 8001c6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c70:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <calibrate_encoder+0x298>)
 8001c72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c76:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001dd0 <calibrate_encoder+0x29c>
 8001c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c86:	ee17 3a90 	vmov	r3, s15
 8001c8a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	145b      	asrs	r3, r3, #17
 8001c9a:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	f100 030a 	add.w	r3, r0, #10
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cb8:	461d      	mov	r5, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	685c      	ldr	r4, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc63 	bl	8000598 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4623      	mov	r3, r4
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4629      	mov	r1, r5
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <calibrate_encoder+0x2a4>)
 8001ce2:	f00d ff79 	bl	800fbd8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ddc <calibrate_encoder+0x2a8>
 8001cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <calibrate_encoder+0x298>)
 8001d08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d0c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001de0 <calibrate_encoder+0x2ac>
 8001d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	f000 81b6 	beq.w	8002094 <calibrate_encoder+0x560>
			cal->sample_count++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001d34:	e1b1      	b.n	800209a <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <calibrate_encoder+0x298>)
 8001d3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d42:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001de4 <calibrate_encoder+0x2b0>
 8001d46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d4a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001d4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	f140 80a9 	bpl.w	8001eb8 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d6c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <calibrate_encoder+0x298>)
 8001d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001d98:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001da2:	332c      	adds	r3, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f001 fc20 	bl	80035ec <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dc14      	bgt.n	8001dec <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001dc2:	e169      	b.n	8002098 <calibrate_encoder+0x564>
 8001dc4:	08014054 	.word	0x08014054
 8001dc8:	37d1b717 	.word	0x37d1b717
 8001dcc:	20000624 	.word	0x20000624
 8001dd0:	40c90fdb 	.word	0x40c90fdb
 8001dd4:	3983126e 	.word	0x3983126e
 8001dd8:	0801407c 	.word	0x0801407c
 8001ddc:	3ba0d97c 	.word	0x3ba0d97c
 8001de0:	43000000 	.word	0x43000000
 8001de4:	41490fdb 	.word	0x41490fdb
 8001de8:	46800000 	.word	0x46800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8151 	beq.w	8002098 <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfc:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001de8 <calibrate_encoder+0x2b4>
 8001e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e04:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <calibrate_encoder+0x56c>)
 8001e06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e0a:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80020a4 <calibrate_encoder+0x570>
 8001e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1a:	ee17 3a90 	vmov	r3, s15
 8001e1e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	145b      	asrs	r3, r3, #17
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001e4e:	4610      	mov	r0, r2
 8001e50:	0fda      	lsrs	r2, r3, #31
 8001e52:	4413      	add	r3, r2
 8001e54:	105b      	asrs	r3, r3, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	f100 030a 	add.w	r3, r0, #10
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e68:	461d      	mov	r5, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	330a      	adds	r3, #10
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	685c      	ldr	r4, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb8b 	bl	8000598 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9cd 2300 	strd	r2, r3, [sp]
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4885      	ldr	r0, [pc, #532]	; (80020a8 <calibrate_encoder+0x574>)
 8001e92:	f00d fea1 	bl	800fbd8 <iprintf>
			cal->sample_count--;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ea8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80020ac <calibrate_encoder+0x578>
 8001eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001eb6:	e0ef      	b.n	8002098 <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f001 faaf 	bl	800341c <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec6:	e00b      	b.n	8001ee0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ecc:	330a      	adds	r3, #10
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed6:	4413      	add	r3, r2
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001edc:	3301      	adds	r3, #1
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <calibrate_encoder+0x56c>)
 8001ee2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbe8      	blt.n	8001ec8 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f00:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <calibrate_encoder+0x56c>)
 8001f02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f06:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80020b0 <calibrate_encoder+0x57c>
 8001f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	ee17 2a90 	vmov	r2, s15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da00      	bge.n	8001f30 <calibrate_encoder+0x3fc>
 8001f2e:	337f      	adds	r3, #127	; 0x7f
 8001f30:	11db      	asrs	r3, r3, #7
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f38:	e0a0      	b.n	800207c <calibrate_encoder+0x548>
			int moving_avg = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	0fda      	lsrs	r2, r3, #31
 8001f42:	4413      	add	r3, r2
 8001f44:	105b      	asrs	r3, r3, #1
 8001f46:	425b      	negs	r3, r3
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4a:	e068      	b.n	800201e <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <calibrate_encoder+0x56c>)
 8001f58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f60:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80020b0 <calibrate_encoder+0x57c>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	eddf 6a51 	vldr	s13, [pc, #324]	; 80020b0 <calibrate_encoder+0x57c>
 8001f6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f82:	ee17 3a90 	vmov	r3, s15
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da13      	bge.n	8001fb6 <calibrate_encoder+0x482>
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <calibrate_encoder+0x56c>)
 8001f9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f9e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80020b0 <calibrate_encoder+0x57c>
 8001fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fae:	ee17 3a90 	vmov	r3, s15
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb4:	e027      	b.n	8002006 <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc0:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <calibrate_encoder+0x56c>)
 8001fc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fc6:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80020b0 <calibrate_encoder+0x57c>
 8001fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	dd12      	ble.n	8002006 <calibrate_encoder+0x4d2>
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <calibrate_encoder+0x56c>)
 8001fec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ff0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80020b0 <calibrate_encoder+0x57c>
 8001ff4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	330a      	adds	r3, #10
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002014:	4413      	add	r3, r2
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	3301      	adds	r3, #1
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	0fda      	lsrs	r2, r3, #31
 8002022:	4413      	add	r3, r2
 8002024:	105b      	asrs	r3, r3, #1
 8002026:	461a      	mov	r2, r3
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	4293      	cmp	r3, r2
 800202c:	db8e      	blt.n	8001f4c <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 800202e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	fb92 f3f3 	sdiv	r3, r2, r3
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203c:	4413      	add	r3, r2
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	2b7f      	cmp	r3, #127	; 0x7f
 8002044:	dd02      	ble.n	800204c <calibrate_encoder+0x518>
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	3b80      	subs	r3, #128	; 0x80
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800205c:	330a      	adds	r3, #10
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002070:	4810      	ldr	r0, [pc, #64]	; (80020b4 <calibrate_encoder+0x580>)
 8002072:	f00d fdb1 	bl	800fbd8 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	3301      	adds	r3, #1
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	2b7f      	cmp	r3, #127	; 0x7f
 8002080:	f77f af5b 	ble.w	8001f3a <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002092:	e002      	b.n	800209a <calibrate_encoder+0x566>
				return;
 8002094:	bf00      	nop
 8002096:	e000      	b.n	800209a <calibrate_encoder+0x566>
		return;
 8002098:	bf00      	nop
}
 800209a:	3748      	adds	r7, #72	; 0x48
 800209c:	46bd      	mov	sp, r7
 800209e:	bdb0      	pop	{r4, r5, r7, pc}
 80020a0:	20000624 	.word	0x20000624
 80020a4:	40c90fdb 	.word	0x40c90fdb
 80020a8:	0801407c 	.word	0x0801407c
 80020ac:	3ba0d97c 	.word	0x3ba0d97c
 80020b0:	43000000 	.word	0x43000000
 80020b4:	0801408c 	.word	0x0801408c

080020b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <MX_DMA_Init+0x80>)
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <MX_DMA_Init+0x80>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6493      	str	r3, [r2, #72]	; 0x48
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <MX_DMA_Init+0x80>)
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <MX_DMA_Init+0x80>)
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <MX_DMA_Init+0x80>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6493      	str	r3, [r2, #72]	; 0x48
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <MX_DMA_Init+0x80>)
 80020e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	200b      	movs	r0, #11
 80020f4:	f006 f909 	bl	800830a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020f8:	200b      	movs	r0, #11
 80020fa:	f006 f920 	bl	800833e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	200c      	movs	r0, #12
 8002104:	f006 f901 	bl	800830a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002108:	200c      	movs	r0, #12
 800210a:	f006 f918 	bl	800833e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	200d      	movs	r0, #13
 8002114:	f006 f8f9 	bl	800830a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002118:	200d      	movs	r0, #13
 800211a:	f006 f910 	bl	800833e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	200e      	movs	r0, #14
 8002124:	f006 f8f1 	bl	800830a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002128:	200e      	movs	r0, #14
 800212a:	f006 f908 	bl	800833e <HAL_NVIC_EnableIRQ>

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <drv_spi_write>:
//	SPI1->CR1 &= ~(SPI_CR1_SPE);
//	DRV_CS_HIGH;
//	return (result);
//}

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
//	return drv_spi_write_cmsis(drv, val);
	drv->spi_tx_word = val;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 800214e:	2200      	movs	r2, #0
 8002150:	2110      	movs	r1, #16
 8002152:	480f      	ldr	r0, [pc, #60]	; (8002190 <drv_spi_write+0x54>)
 8002154:	f007 fe18 	bl	8009d88 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	2364      	movs	r3, #100	; 0x64
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <drv_spi_write+0x58>)
 8002166:	f008 fef8 	bl	800af5a <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800216a:	bf00      	nop
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <drv_spi_write+0x58>)
 800216e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d0f9      	beq.n	800216c <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8002178:	2201      	movs	r2, #1
 800217a:	2110      	movs	r1, #16
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <drv_spi_write+0x54>)
 800217e:	f007 fe03 	bl	8009d88 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	885b      	ldrh	r3, [r3, #2]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	48000800 	.word	0x48000800
 8002194:	20009278 	.word	0x20009278

08002198 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	463b      	mov	r3, r7
 80021a0:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 80021a4:	463b      	mov	r3, r7
 80021a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ffc6 	bl	800213c <drv_spi_write>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	463b      	mov	r3, r7
 80021c2:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 80021c6:	463b      	mov	r3, r7
 80021c8:	f248 0101 	movw	r1, #32769	; 0x8001
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ffb5 	bl	800213c <drv_spi_write>
 80021d2:	4603      	mov	r3, r0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80021ea:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	02db      	lsls	r3, r3, #11
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff99 	bl	800213c <drv_spi_write>
 800220a:	4603      	mov	r3, r0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	f107 0408 	add.w	r4, r7, #8
 800221e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	02db      	lsls	r3, r3, #11
 800222a:	b21a      	sxth	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21b      	sxth	r3, r3
 8002234:	b29a      	uxth	r2, r3
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff7d 	bl	800213c <drv_spi_write>
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bd90      	pop	{r4, r7, pc}

0800224a <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	f107 0408 	add.w	r4, r7, #8
 8002254:	e884 0003 	stmia.w	r4, {r0, r1}
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	b21b      	sxth	r3, r3
 8002262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002266:	b21a      	sxth	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21b      	sxth	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b21a      	sxth	r2, r3
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	01db      	lsls	r3, r3, #7
 8002276:	b21b      	sxth	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b21a      	sxth	r2, r3
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21a      	sxth	r2, r3
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	b21b      	sxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b21a      	sxth	r2, r3
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21a      	sxth	r2, r3
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80022b8:	8afa      	ldrh	r2, [r7, #22]
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff3b 	bl	800213c <drv_spi_write>
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}

080022ce <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	f107 0408 	add.w	r4, r7, #8
 80022d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	029b      	lsls	r3, r3, #10
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b21a      	sxth	r2, r3
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b21a      	sxth	r2, r3
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002314:	8afa      	ldrh	r2, [r7, #22]
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff0d 	bl	800213c <drv_spi_write>
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b087      	sub	sp, #28
 800232e:	af00      	add	r7, sp, #0
 8002330:	f107 0408 	add.w	r4, r7, #8
 8002334:	e884 0003 	stmia.w	r4, {r0, r1}
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	029b      	lsls	r3, r3, #10
 8002340:	b21b      	sxth	r3, r3
 8002342:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002346:	b21a      	sxth	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	b21b      	sxth	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b21a      	sxth	r2, r3
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b21a      	sxth	r2, r3
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	019b      	lsls	r3, r3, #6
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21a      	sxth	r2, r3
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	015b      	lsls	r3, r3, #5
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21a      	sxth	r2, r3
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	b21b      	sxth	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b21a      	sxth	r2, r3
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21a      	sxth	r2, r3
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21b      	sxth	r3, r3
 8002396:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002398:	8afa      	ldrh	r2, [r7, #22]
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fecb 	bl	800213c <drv_spi_write>
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}

080023ae <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	463b      	mov	r3, r7
 80023b6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80023ba:	2202      	movs	r2, #2
 80023bc:	463b      	mov	r3, r7
 80023be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023c2:	f7ff ff0b 	bl	80021dc <drv_read_register>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4639      	mov	r1, r7
 80023d4:	c903      	ldmia	r1, {r0, r1}
 80023d6:	f7ff ff1d 	bl	8002214 <drv_write_register>
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	463b      	mov	r3, r7
 80023ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 80023ee:	2202      	movs	r2, #2
 80023f0:	463b      	mov	r3, r7
 80023f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023f6:	f7ff fef1 	bl	80021dc <drv_read_register>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	2202      	movs	r2, #2
 8002406:	4639      	mov	r1, r7
 8002408:	c903      	ldmia	r1, {r0, r1}
 800240a:	f7ff ff03 	bl	8002214 <drv_write_register>
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	463b      	mov	r3, r7
 8002420:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8002424:	463b      	mov	r3, r7
 8002426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800242a:	f7ff feb5 	bl	8002198 <drv_read_FSR1>
 800242e:	4603      	mov	r3, r0
 8002430:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 8002432:	463b      	mov	r3, r7
 8002434:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002438:	f7ff febf 	bl	80021ba <drv_read_FSR2>
 800243c:	4603      	mov	r3, r0
 800243e:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <drv_print_faults+0x38>
 800244a:	4857      	ldr	r0, [pc, #348]	; (80025a8 <drv_print_faults+0x190>)
 800244c:	f00d fbc4 	bl	800fbd8 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8002450:	89fb      	ldrh	r3, [r7, #14]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <drv_print_faults+0x48>
 800245a:	4854      	ldr	r0, [pc, #336]	; (80025ac <drv_print_faults+0x194>)
 800245c:	f00d fbbc 	bl	800fbd8 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8002460:	89fb      	ldrh	r3, [r7, #14]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <drv_print_faults+0x58>
 800246a:	4851      	ldr	r0, [pc, #324]	; (80025b0 <drv_print_faults+0x198>)
 800246c:	f00d fbb4 	bl	800fbd8 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <drv_print_faults+0x68>
 800247a:	484e      	ldr	r0, [pc, #312]	; (80025b4 <drv_print_faults+0x19c>)
 800247c:	f00d fbac 	bl	800fbd8 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <drv_print_faults+0x78>
 800248a:	484b      	ldr	r0, [pc, #300]	; (80025b8 <drv_print_faults+0x1a0>)
 800248c:	f00d fba4 	bl	800fbd8 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <drv_print_faults+0x88>
 800249a:	4848      	ldr	r0, [pc, #288]	; (80025bc <drv_print_faults+0x1a4>)
 800249c:	f00d fb9c 	bl	800fbd8 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80024a0:	89fb      	ldrh	r3, [r7, #14]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <drv_print_faults+0x98>
 80024aa:	4845      	ldr	r0, [pc, #276]	; (80025c0 <drv_print_faults+0x1a8>)
 80024ac:	f00d fb94 	bl	800fbd8 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <drv_print_faults+0xa8>
 80024ba:	4842      	ldr	r0, [pc, #264]	; (80025c4 <drv_print_faults+0x1ac>)
 80024bc:	f00d fb8c 	bl	800fbd8 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <drv_print_faults+0xb8>
 80024ca:	483f      	ldr	r0, [pc, #252]	; (80025c8 <drv_print_faults+0x1b0>)
 80024cc:	f00d fb84 	bl	800fbd8 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <drv_print_faults+0xc8>
 80024da:	483c      	ldr	r0, [pc, #240]	; (80025cc <drv_print_faults+0x1b4>)
 80024dc:	f00d fb7c 	bl	800fbd8 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <drv_print_faults+0xd8>
 80024ea:	4839      	ldr	r0, [pc, #228]	; (80025d0 <drv_print_faults+0x1b8>)
 80024ec:	f00d fb74 	bl	800fbd8 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 80024f0:	89bb      	ldrh	r3, [r7, #12]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <drv_print_faults+0xe8>
 80024fa:	4836      	ldr	r0, [pc, #216]	; (80025d4 <drv_print_faults+0x1bc>)
 80024fc:	f00d fb6c 	bl	800fbd8 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8002500:	89bb      	ldrh	r3, [r7, #12]
 8002502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <drv_print_faults+0xf8>
 800250a:	4833      	ldr	r0, [pc, #204]	; (80025d8 <drv_print_faults+0x1c0>)
 800250c:	f00d fb64 	bl	800fbd8 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8002510:	89bb      	ldrh	r3, [r7, #12]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <drv_print_faults+0x108>
 800251a:	4830      	ldr	r0, [pc, #192]	; (80025dc <drv_print_faults+0x1c4>)
 800251c:	f00d fb5c 	bl	800fbd8 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8002520:	89bb      	ldrh	r3, [r7, #12]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <drv_print_faults+0x118>
 800252a:	482d      	ldr	r0, [pc, #180]	; (80025e0 <drv_print_faults+0x1c8>)
 800252c:	f00d fb54 	bl	800fbd8 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <drv_print_faults+0x128>
 800253a:	482a      	ldr	r0, [pc, #168]	; (80025e4 <drv_print_faults+0x1cc>)
 800253c:	f00d fb4c 	bl	800fbd8 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8002540:	89bb      	ldrh	r3, [r7, #12]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <drv_print_faults+0x138>
 800254a:	4827      	ldr	r0, [pc, #156]	; (80025e8 <drv_print_faults+0x1d0>)
 800254c:	f00d fb44 	bl	800fbd8 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8002550:	89bb      	ldrh	r3, [r7, #12]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <drv_print_faults+0x148>
 800255a:	4824      	ldr	r0, [pc, #144]	; (80025ec <drv_print_faults+0x1d4>)
 800255c:	f00d fb3c 	bl	800fbd8 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002560:	89bb      	ldrh	r3, [r7, #12]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <drv_print_faults+0x158>
 800256a:	4821      	ldr	r0, [pc, #132]	; (80025f0 <drv_print_faults+0x1d8>)
 800256c:	f00d fb34 	bl	800fbd8 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8002570:	89bb      	ldrh	r3, [r7, #12]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <drv_print_faults+0x168>
 800257a:	481e      	ldr	r0, [pc, #120]	; (80025f4 <drv_print_faults+0x1dc>)
 800257c:	f00d fb2c 	bl	800fbd8 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8002580:	89bb      	ldrh	r3, [r7, #12]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <drv_print_faults+0x178>
 800258a:	481b      	ldr	r0, [pc, #108]	; (80025f8 <drv_print_faults+0x1e0>)
 800258c:	f00d fb24 	bl	800fbd8 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002590:	89bb      	ldrh	r3, [r7, #12]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <drv_print_faults+0x188>
 800259a:	4818      	ldr	r0, [pc, #96]	; (80025fc <drv_print_faults+0x1e4>)
 800259c:	f00d fb1c 	bl	800fbd8 <iprintf>

}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	08014098 	.word	0x08014098
 80025ac:	080140a4 	.word	0x080140a4
 80025b0:	080140b0 	.word	0x080140b0
 80025b4:	080140b8 	.word	0x080140b8
 80025b8:	080140c0 	.word	0x080140c0
 80025bc:	080140c8 	.word	0x080140c8
 80025c0:	080140d4 	.word	0x080140d4
 80025c4:	080140e0 	.word	0x080140e0
 80025c8:	080140ec 	.word	0x080140ec
 80025cc:	080140f8 	.word	0x080140f8
 80025d0:	08014104 	.word	0x08014104
 80025d4:	08014110 	.word	0x08014110
 80025d8:	08014118 	.word	0x08014118
 80025dc:	08014120 	.word	0x08014120
 80025e0:	08014128 	.word	0x08014128
 80025e4:	08014130 	.word	0x08014130
 80025e8:	08014138 	.word	0x08014138
 80025ec:	08014144 	.word	0x08014144
 80025f0:	08014150 	.word	0x08014150
 80025f4:	0801415c 	.word	0x0801415c
 80025f8:	08014168 	.word	0x08014168
 80025fc:	08014174 	.word	0x08014174

08002600 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <MX_FDCAN1_Init+0x88>)
 8002608:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800261e:	2200      	movs	r2, #0
 8002620:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002624:	2200      	movs	r2, #0
 8002626:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800262a:	2200      	movs	r2, #0
 800262c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 34;
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002630:	2222      	movs	r2, #34	; 0x22
 8002632:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002636:	2201      	movs	r2, #1
 8002638:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800263c:	2202      	movs	r2, #2
 800263e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002642:	2202      	movs	r2, #2
 8002644:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002648:	2201      	movs	r2, #1
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800264e:	2201      	movs	r2, #1
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002654:	2201      	movs	r2, #1
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800265a:	2201      	movs	r2, #1
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002660:	2200      	movs	r2, #0
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002666:	2200      	movs	r2, #0
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_FDCAN1_Init+0x84>)
 800266c:	2200      	movs	r2, #0
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002670:	4804      	ldr	r0, [pc, #16]	; (8002684 <MX_FDCAN1_Init+0x84>)
 8002672:	f006 f8f9 	bl	8008868 <HAL_FDCAN_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800267c:	f002 ffb4 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200005c0 	.word	0x200005c0
 8002688:	40006400 	.word	0x40006400

0800268c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b09e      	sub	sp, #120	; 0x78
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	2254      	movs	r2, #84	; 0x54
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00c fc11 	bl	800eed4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a24      	ldr	r2, [pc, #144]	; (8002748 <HAL_FDCAN_MspInit+0xbc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d141      	bne.n	8002740 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80026c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	4618      	mov	r0, r3
 80026ce:	f008 f94b 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80026d8:	f002 ff86 	bl	80055e8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_FDCAN_MspInit+0xc0>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_FDCAN_MspInit+0xc0>)
 80026e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_FDCAN_MspInit+0xc0>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_FDCAN_MspInit+0xc0>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	4a14      	ldr	r2, [pc, #80]	; (800274c <HAL_FDCAN_MspInit+0xc0>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_FDCAN_MspInit+0xc0>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800270c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002710:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800271e:	2309      	movs	r3, #9
 8002720:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272c:	f007 f9aa 	bl	8009a84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2015      	movs	r0, #21
 8002736:	f005 fde8 	bl	800830a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800273a:	2015      	movs	r0, #21
 800273c:	f005 fdff 	bl	800833e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002740:	bf00      	nop
 8002742:	3778      	adds	r7, #120	; 0x78
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40006400 	.word	0x40006400
 800274c:	40021000 	.word	0x40021000

08002750 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

	msg->filter.IdType = FDCAN_STANDARD_ID;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIndex = 0;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterID1 = CAN_ID;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <can_rx_init+0x50>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = 0x7FF;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002780:	649a      	str	r2, [r3, #72]	; 0x48

	if (HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3334      	adds	r3, #52	; 0x34
 8002786:	4619      	mov	r1, r3
 8002788:	4806      	ldr	r0, [pc, #24]	; (80027a4 <can_rx_init+0x54>)
 800278a:	f006 f9c7 	bl	8008b1c <HAL_FDCAN_ConfigFilter>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <can_rx_init+0x48>
	{
		Error_Handler();
 8002794:	f002 ff28 	bl	80055e8 <Error_Handler>
//	if (HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
//	{
//		Error_Handler();
//	}

}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200006c4 	.word	0x200006c4
 80027a4:	200005c0 	.word	0x200005c0

080027a8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

	msg->tx_header.Identifier = CAN_MASTER;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <can_tx_init+0x50>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80027cc:	615a      	str	r2, [r3, #20]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
	msg->tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.MessageMarker = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	200006c4 	.word	0x200006c4

080027fc <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6178      	str	r0, [r7, #20]
 8002804:	460b      	mov	r3, r1
 8002806:	ed87 0a03 	vstr	s0, [r7, #12]
 800280a:	edc7 0a02 	vstr	s1, [r7, #8]
 800280e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002812:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <pack_reply+0xec>)
 8002816:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800281a:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <pack_reply+0xec>)
 800281c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002820:	2010      	movs	r0, #16
 8002822:	eeb0 1a47 	vmov.f32	s2, s14
 8002826:	eef0 0a67 	vmov.f32	s1, s15
 800282a:	ed97 0a03 	vldr	s0, [r7, #12]
 800282e:	f002 ffcb 	bl	80057c8 <float_to_uint>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8002834:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <pack_reply+0xec>)
 8002836:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <pack_reply+0xec>)
 800283c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002840:	200c      	movs	r0, #12
 8002842:	eeb0 1a47 	vmov.f32	s2, s14
 8002846:	eef0 0a67 	vmov.f32	s1, s15
 800284a:	ed97 0a02 	vldr	s0, [r7, #8]
 800284e:	f002 ffbb 	bl	80057c8 <float_to_uint>
 8002852:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <pack_reply+0xec>)
 8002856:	edd3 7a03 	vldr	s15, [r3, #12]
 800285a:	eeb1 7a67 	vneg.f32	s14, s15
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <pack_reply+0xec>)
 8002860:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <pack_reply+0xec>)
 800286a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800286e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <pack_reply+0xec>)
 8002874:	ed93 7a03 	vldr	s14, [r3, #12]
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <pack_reply+0xec>)
 800287a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800287e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <pack_reply+0xec>)
 8002884:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288c:	200c      	movs	r0, #12
 800288e:	eeb0 1a67 	vmov.f32	s2, s15
 8002892:	eef0 0a66 	vmov.f32	s1, s13
 8002896:	ed97 0a01 	vldr	s0, [r7, #4]
 800289a:	f002 ff95 	bl	80057c8 <float_to_uint>
 800289e:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	7cfa      	ldrb	r2, [r7, #19]
 80028a4:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	121b      	asrs	r3, r3, #8
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	111b      	asrs	r3, r3, #4
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	121b      	asrs	r3, r3, #8
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	719a      	strb	r2, [r3, #6]
    }
 80028de:	bf00      	nop
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000624 	.word	0x20000624

080028ec <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 80028ec:	b084      	sub	sp, #16
 80028ee:	b590      	push	{r4, r7, lr}
 80028f0:	b087      	sub	sp, #28
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 80028fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 800290a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002914:	0912      	lsrs	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 800291c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002926:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 800292e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002938:	0912      	lsrs	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	4313      	orrs	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8002940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800294a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800294e:	4313      	orrs	r3, r2
 8002950:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <unpack_cmd+0x160>)
 8002954:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <unpack_cmd+0x160>)
 800295a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800295e:	2110      	movs	r1, #16
 8002960:	eef0 0a47 	vmov.f32	s1, s14
 8002964:	eeb0 0a67 	vmov.f32	s0, s15
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f002 ff60 	bl	800582e <uint_to_float>
 800296e:	eef0 7a40 	vmov.f32	s15, s0
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <unpack_cmd+0x160>)
 800297a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <unpack_cmd+0x160>)
 8002980:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002986:	1d1c      	adds	r4, r3, #4
 8002988:	210c      	movs	r1, #12
 800298a:	eef0 0a47 	vmov.f32	s1, s14
 800298e:	eeb0 0a67 	vmov.f32	s0, s15
 8002992:	6938      	ldr	r0, [r7, #16]
 8002994:	f002 ff4b 	bl	800582e <uint_to_float>
 8002998:	eef0 7a40 	vmov.f32	s15, s0
 800299c:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <unpack_cmd+0x160>)
 80029a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	f103 0408 	add.w	r4, r3, #8
 80029ac:	210c      	movs	r1, #12
 80029ae:	eef0 0a67 	vmov.f32	s1, s15
 80029b2:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002a50 <unpack_cmd+0x164>
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f002 ff39 	bl	800582e <uint_to_float>
 80029bc:	eef0 7a40 	vmov.f32	s15, s0
 80029c0:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <unpack_cmd+0x160>)
 80029c6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80029ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029cc:	f103 040c 	add.w	r4, r3, #12
 80029d0:	210c      	movs	r1, #12
 80029d2:	eef0 0a67 	vmov.f32	s1, s15
 80029d6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002a50 <unpack_cmd+0x164>
 80029da:	68b8      	ldr	r0, [r7, #8]
 80029dc:	f002 ff27 	bl	800582e <uint_to_float>
 80029e0:	eef0 7a40 	vmov.f32	s15, s0
 80029e4:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <unpack_cmd+0x160>)
 80029ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ee:	eeb1 7a67 	vneg.f32	s14, s15
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <unpack_cmd+0x160>)
 80029f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <unpack_cmd+0x160>)
 80029fe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002a02:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <unpack_cmd+0x160>)
 8002a08:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <unpack_cmd+0x160>)
 8002a0e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <unpack_cmd+0x160>)
 8002a18:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a22:	f103 0410 	add.w	r4, r3, #16
 8002a26:	210c      	movs	r1, #12
 8002a28:	eef0 0a67 	vmov.f32	s1, s15
 8002a2c:	eeb0 0a66 	vmov.f32	s0, s13
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f002 fefc 	bl	800582e <uint_to_float>
 8002a36:	eef0 7a40 	vmov.f32	s15, s0
 8002a3a:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a48:	b004      	add	sp, #16
 8002a4a:	4770      	bx	lr
 8002a4c:	20000624 	.word	0x20000624
 8002a50:	00000000 	.word	0x00000000

08002a54 <g4_flash_erase>:

    address -= FLASH_BANK1_BASE;
    *sector = address / FLASH_PAGE_SIZE;
}

void g4_flash_erase(uint8_t page){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
    uint32_t page_err = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitTypeDef erase_conf;
    erase_conf.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
    erase_conf.Banks = FLASH_BANK_2;
 8002a66:	2302      	movs	r3, #2
 8002a68:	613b      	str	r3, [r7, #16]

    if (HAL_FLASHEx_Erase(&erase_conf, &page_err) != HAL_OK)
 8002a6a:	f107 021c 	add.w	r2, r7, #28
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f006 fea3 	bl	80097c0 <HAL_FLASHEx_Erase>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <g4_flash_erase+0x34>
    {
    	printf("\r\nErasing Flash Failed, Please Reboot Manually.\r\n");
 8002a80:	4805      	ldr	r0, [pc, #20]	; (8002a98 <g4_flash_erase+0x44>)
 8002a82:	f00d f92f 	bl	800fce4 <puts>

    }
    else{
    	printf("\r\nFlash Erase Successful\r\n");
    }
  }
 8002a86:	e002      	b.n	8002a8e <g4_flash_erase+0x3a>
    	printf("\r\nFlash Erase Successful\r\n");
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <g4_flash_erase+0x48>)
 8002a8a:	f00d f92b 	bl	800fce4 <puts>
  }
 8002a8e:	bf00      	nop
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	08014180 	.word	0x08014180
 8002a9c:	080141b4 	.word	0x080141b4

08002aa0 <flash_writer_init>:

// STM32G4 FUNCTIONS ABOVE =======================================================

// STANDARD FUNCTIONS BELOW ======================================================

void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b07      	cmp	r3, #7
 8002aae:	d901      	bls.n	8002ab4 <flash_writer_init+0x14>
 8002ab0:	2307      	movs	r3, #7
 8002ab2:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	609a      	str	r2, [r3, #8]
	fw->base = PW_BASE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <flash_writer_init+0x34>)
 8002abe:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	08040000 	.word	0x08040000

08002ad8 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}


void flash_writer_open(FlashWriter * fw) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002ae0:	f006 fd82 	bl	80095e8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <flash_writer_open+0x28>)
 8002ae6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aea:	611a      	str	r2, [r3, #16]
    g4_flash_erase(0);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff ffb1 	bl	8002a54 <g4_flash_erase>
    fw->ready = true;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40022000 	.word	0x40022000

08002b04 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002b04:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	1d3c      	adds	r4, r7, #4
 8002b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b12:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, PW_BASE + SIZE_OFFSET * index, un.b); //JB
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002b1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002b22:	0119      	lsls	r1, r3, #4
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2200      	movs	r2, #0
 8002b28:	4698      	mov	r8, r3
 8002b2a:	4691      	mov	r9, r2
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464b      	mov	r3, r9
 8002b30:	2000      	movs	r0, #0
 8002b32:	f006 fd03 	bl	800953c <HAL_FLASH_Program>
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002b40 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, PW_BASE + SIZE_OFFSET * index, x); //JB
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002b40:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002b44:	b089      	sub	sp, #36	; 0x24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	f107 040c 	add.w	r4, r7, #12
 8002b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, PW_BASE + SIZE_OFFSET * index, un.b); //JB
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002b60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002b64:	0119      	lsls	r1, r3, #4
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4698      	mov	r8, r3
 8002b6c:	4691      	mov	r9, r2
 8002b6e:	4642      	mov	r2, r8
 8002b70:	464b      	mov	r3, r9
 8002b72:	2000      	movs	r0, #0
 8002b74:	f006 fce2 	bl	800953c <HAL_FLASH_Program>
}
 8002b78:	bf00      	nop
 8002b7a:	3724      	adds	r7, #36	; 0x24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002b82 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Lock(); //JB
 8002b8a:	f006 fd4f 	bl	800962c <HAL_FLASH_Lock>
    fw->ready = false;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002b9c:	b490      	push	{r4, r7}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	1d3c      	adds	r4, r7, #4
 8002ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ba8:	603b      	str	r3, [r7, #0]
    return *(int*) (PW_BASE + SIZE_OFFSET * index);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002bb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc90      	pop	{r4, r7}
 8002bc0:	4770      	bx	lr

08002bc2 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (PW_BASE + SIZE_OFFSET * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 8002bc2:	b490      	push	{r4, r7}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	1d3c      	adds	r4, r7, #4
 8002bca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bce:	603b      	str	r3, [r7, #0]
    return *(float*) (PW_BASE + SIZE_OFFSET * index);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002bd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	ee07 3a90 	vmov	s15, r3
}
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc90      	pop	{r4, r7}
 8002bec:	4770      	bx	lr
	...

08002bf0 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	60fb      	str	r3, [r7, #12]

	//printf("dtc_u: %f, \tdtc_v: %f, \tdtc_w: %f\r\n",controller->dtc_u,controller->dtc_v,controller->dtc_w);
	//printf("ia: %f, \tib: %f, \tic: %f\r\n",controller->i_a,controller->i_b,controller->i_c);

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c18:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2a:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <set_dtc+0x140>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d136      	bne.n	8002cb6 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <set_dtc+0x144>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <set_dtc+0x144>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c66:	ee17 2a90 	vmov	r2, s15
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <set_dtc+0x144>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <set_dtc+0x144>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8a:	ee17 2a90 	vmov	r2, s15
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <set_dtc+0x144>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <set_dtc+0x144>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cae:	ee17 2a90 	vmov	r2, s15
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
//	else{
//		TIM2->CCR2 = (TIM_PWM.Instance->ARR)*(1.0f-controller->dtc_u);
//		TIM2->CCR1 = (TIM_PWM.Instance->ARR)*(1.0f-controller->dtc_v);
//		TIM2->CCR3 =  (TIM_PWM.Instance->ARR)*(1.0f-controller->dtc_w);
//	}
}
 8002cb4:	e035      	b.n	8002d22 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <set_dtc+0x144>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <set_dtc+0x144>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd4:	ee17 2a90 	vmov	r2, s15
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <set_dtc+0x144>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <set_dtc+0x144>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf8:	ee17 2a90 	vmov	r2, s15
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <set_dtc+0x144>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <set_dtc+0x144>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1c:	ee17 2a90 	vmov	r2, s15
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	200006c4 	.word	0x200006c4
 8002d34:	20009344 	.word	0x20009344

08002d38 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002d40:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <analog_sample+0x140>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d115      	bne.n	8002d74 <analog_sample+0x3c>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002d48:	484c      	ldr	r0, [pc, #304]	; (8002e7c <analog_sample+0x144>)
 8002d4a:	f004 fc25 	bl	8007598 <HAL_ADC_GetValue>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002d56:	484a      	ldr	r0, [pc, #296]	; (8002e80 <analog_sample+0x148>)
 8002d58:	f004 fc1e 	bl	8007598 <HAL_ADC_GetValue>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = HAL_ADC_GetValue(&ADC_CH_IC);
 8002d64:	4847      	ldr	r0, [pc, #284]	; (8002e84 <analog_sample+0x14c>)
 8002d66:	f004 fc17 	bl	8007598 <HAL_ADC_GetValue>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	e014      	b.n	8002d9e <analog_sample+0x66>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002d74:	4842      	ldr	r0, [pc, #264]	; (8002e80 <analog_sample+0x148>)
 8002d76:	f004 fc0f 	bl	8007598 <HAL_ADC_GetValue>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002d82:	483e      	ldr	r0, [pc, #248]	; (8002e7c <analog_sample+0x144>)
 8002d84:	f004 fc08 	bl	8007598 <HAL_ADC_GetValue>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = HAL_ADC_GetValue(&ADC_CH_IC);
 8002d90:	483c      	ldr	r0, [pc, #240]	; (8002e84 <analog_sample+0x14c>)
 8002d92:	f004 fc01 	bl	8007598 <HAL_ADC_GetValue>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002d9e:	4837      	ldr	r0, [pc, #220]	; (8002e7c <analog_sample+0x144>)
 8002da0:	f004 fa10 	bl	80071c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	4834      	ldr	r0, [pc, #208]	; (8002e7c <analog_sample+0x144>)
 8002daa:	f004 faef 	bl	800738c <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002dae:	4836      	ldr	r0, [pc, #216]	; (8002e88 <analog_sample+0x150>)
 8002db0:	f004 fbf2 	bl	8007598 <HAL_ADC_GetValue>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc8:	ee17 0a90 	vmov	r0, s15
 8002dcc:	f7fd fbe4 	bl	8000598 <__aeabi_f2d>
 8002dd0:	a325      	add	r3, pc, #148	; (adr r3, 8002e68 <analog_sample+0x130>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fc37 	bl	8000648 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	a323      	add	r3, pc, #140	; (adr r3, 8002e70 <analog_sample+0x138>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f7fd fc2e 	bl	8000648 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7fd ff20 	bl	8000c38 <__aeabi_d2f>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	edc3 7a06 	vstr	s15, [r3, #24]
    //controller->i_c = controller->i_scale*(float)(controller->adc_c_raw - controller->adc_c_offset);
    controller->i_c = -controller->i_a - controller->i_b;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e4c:	eeb1 7a67 	vneg.f32	s14, s15
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	fdf3b646 	.word	0xfdf3b646
 8002e6c:	3ff978d4 	.word	0x3ff978d4
 8002e70:	00000000 	.word	0x00000000
 8002e74:	3f8a6663 	.word	0x3f8a6663
 8002e78:	200006c4 	.word	0x200006c4
 8002e7c:	2000021c 	.word	0x2000021c
 8002e80:	20000288 	.word	0x20000288
 8002e84:	200002f4 	.word	0x200002f4
 8002e88:	20000360 	.word	0x20000360

08002e8c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	ed87 0a05 	vstr	s0, [r7, #20]
 8002e96:	edc7 0a04 	vstr	s1, [r7, #16]
 8002e9a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002e9e:	60b8      	str	r0, [r7, #8]
 8002ea0:	6079      	str	r1, [r7, #4]
 8002ea2:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002ea4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ea8:	f002 fd2e 	bl	8005908 <cos_lut>
 8002eac:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002eb0:	ed97 0a05 	vldr	s0, [r7, #20]
 8002eb4:	f002 fcee 	bl	8005894 <sin_lut>
 8002eb8:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002ebc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec8:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002ede:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ee2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002f8c <abc+0x100>
 8002ee6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002eea:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002ef2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002efa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f02:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f06:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002f90 <abc+0x104>
 8002f0a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002f16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002f1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f34:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f90 <abc+0x104>
 8002f38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f40:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002f44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f54:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f58:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002f8c <abc+0x100>
 8002f5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f60:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002f68:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002f6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002f82:	bf00      	nop
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	3f5db3d7 	.word	0x3f5db3d7
 8002f90:	bf5db3d7 	.word	0xbf5db3d7

08002f94 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f9e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002fa2:	ed87 1a03 	vstr	s2, [r7, #12]
 8002fa6:	edc7 1a02 	vstr	s3, [r7, #8]
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002fae:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fb2:	f002 fca9 	bl	8005908 <cos_lut>
 8002fb6:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002fba:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fbe:	f002 fc69 	bl	8005894 <sin_lut>
 8002fc2:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002fc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fd6:	eddf 6a34 	vldr	s13, [pc, #208]	; 80030a8 <dq0+0x114>
 8002fda:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002fde:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fe2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002fe6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002fea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ffe:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80030ac <dq0+0x118>
 8003002:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003006:	edd7 7a07 	vldr	s15, [r7, #28]
 800300a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800300e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003012:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003016:	edd7 7a02 	vldr	s15, [r7, #8]
 800301a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003022:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80030b0 <dq0+0x11c>
 8003026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8003030:	edd7 7a06 	vldr	s15, [r7, #24]
 8003034:	eeb1 7a67 	vneg.f32	s14, s15
 8003038:	edd7 7a04 	vldr	s15, [r7, #16]
 800303c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003040:	edd7 7a07 	vldr	s15, [r7, #28]
 8003044:	eddf 6a19 	vldr	s13, [pc, #100]	; 80030ac <dq0+0x118>
 8003048:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800304c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003050:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003054:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003058:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800305c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003064:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003068:	edd7 7a07 	vldr	s15, [r7, #28]
 800306c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80030a8 <dq0+0x114>
 8003070:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003074:	edd7 7a06 	vldr	s15, [r7, #24]
 8003078:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800307c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003080:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003084:	edd7 7a02 	vldr	s15, [r7, #8]
 8003088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800308c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003090:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80030b0 <dq0+0x11c>
 8003094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	edc3 7a00 	vstr	s15, [r3]

    }
 800309e:	bf00      	nop
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	3f5db3d7 	.word	0x3f5db3d7
 80030ac:	bf5db3d7 	.word	0xbf5db3d7
 80030b0:	3f2aaaab 	.word	0x3f2aaaab

080030b4 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	ed2d 8b02 	vpush	{d8}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	ed87 0a07 	vstr	s0, [r7, #28]
 80030c2:	edc7 0a06 	vstr	s1, [r7, #24]
 80030c6:	ed87 1a05 	vstr	s2, [r7, #20]
 80030ca:	edc7 1a04 	vstr	s3, [r7, #16]
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80030d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80030d8:	edd7 0a05 	vldr	s1, [r7, #20]
 80030dc:	ed97 0a06 	vldr	s0, [r7, #24]
 80030e0:	f002 faf5 	bl	80056ce <fminf3>
 80030e4:	eeb0 8a40 	vmov.f32	s16, s0
 80030e8:	ed97 1a04 	vldr	s2, [r7, #16]
 80030ec:	edd7 0a05 	vldr	s1, [r7, #20]
 80030f0:	ed97 0a06 	vldr	s0, [r7, #24]
 80030f4:	f002 fab7 	bl	8005666 <fmaxf3>
 80030f8:	eef0 7a40 	vmov.f32	s15, s0
 80030fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003100:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003108:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <svm+0x160>)
 800310e:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8003110:	ed97 7a06 	vldr	s14, [r7, #24]
 8003114:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003124:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003218 <svm+0x164>
 8003128:	ee67 6a87 	vmul.f32	s13, s15, s14
 800312c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003134:	edd7 7a08 	vldr	s15, [r7, #32]
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	eddf 0a37 	vldr	s1, [pc, #220]	; 800321c <svm+0x168>
 8003140:	eeb0 0a67 	vmov.f32	s0, s15
 8003144:	f002 fa57 	bl	80055f6 <fast_fmaxf>
 8003148:	eef0 7a40 	vmov.f32	s15, s0
 800314c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8003220 <svm+0x16c>
 8003150:	eeb0 0a67 	vmov.f32	s0, s15
 8003154:	f002 fa6b 	bl	800562e <fast_fminf>
 8003158:	eef0 7a40 	vmov.f32	s15, s0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8003162:	ed97 7a05 	vldr	s14, [r7, #20]
 8003166:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800316a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003176:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003218 <svm+0x164>
 800317a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800317e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	edd7 7a08 	vldr	s15, [r7, #32]
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800321c <svm+0x168>
 8003192:	eeb0 0a67 	vmov.f32	s0, s15
 8003196:	f002 fa2e 	bl	80055f6 <fast_fmaxf>
 800319a:	eef0 7a40 	vmov.f32	s15, s0
 800319e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003220 <svm+0x16c>
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	f002 fa42 	bl	800562e <fast_fminf>
 80031aa:	eef0 7a40 	vmov.f32	s15, s0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80031b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80031b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003218 <svm+0x164>
 80031cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80031d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80031d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80031dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800321c <svm+0x168>
 80031e4:	eeb0 0a67 	vmov.f32	s0, s15
 80031e8:	f002 fa05 	bl	80055f6 <fast_fmaxf>
 80031ec:	eef0 7a40 	vmov.f32	s15, s0
 80031f0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003220 <svm+0x16c>
 80031f4:	eeb0 0a67 	vmov.f32	s0, s15
 80031f8:	f002 fa19 	bl	800562e <fast_fminf>
 80031fc:	eef0 7a40 	vmov.f32	s15, s0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edc3 7a00 	vstr	s15, [r3]

    }
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	ecbd 8b02 	vpop	{d8}
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	3ef0a3d7 	.word	0x3ef0a3d7
 8003218:	3f933333 	.word	0x3f933333
 800321c:	00000000 	.word	0x00000000
 8003220:	3f70a3d7 	.word	0x3f70a3d7

08003224 <zero_current>:

void zero_current(ControllerStruct *controller){
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8003234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003238:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fccc 	bl	8002bf0 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e00f      	b.n	800327e <zero_current+0x5a>
    	analog_sample(controller);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fd6a 	bl	8002d38 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	dbeb      	blt.n	800325e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	fb92 f2f3 	sdiv	r2, r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	fb92 f2f3 	sdiv	r2, r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <init_controller_params+0x138>)
 80032b8:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a49      	ldr	r2, [pc, #292]	; (80033e4 <init_controller_params+0x138>)
 80032be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <init_controller_params+0x13c>)
 80032c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80032c8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80033ec <init_controller_params+0x140>
 80032cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <init_controller_params+0x13c>)
 80032d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80032dc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80033ec <init_controller_params+0x140>
 80032e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80032ea:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <init_controller_params+0x13c>)
 80032ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80032f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80033f0 <init_controller_params+0x144>
 80032f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80033f4 <init_controller_params+0x148>
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003324:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80033f8 <init_controller_params+0x14c>
 8003328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <init_controller_params+0x150>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <init_controller_params+0x13c>)
 800333e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003342:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003400 <init_controller_params+0x154>
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d803      	bhi.n	8003358 <init_controller_params+0xac>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2c      	ldr	r2, [pc, #176]	; (8003404 <init_controller_params+0x158>)
 8003354:	671a      	str	r2, [r3, #112]	; 0x70
 8003356:	e002      	b.n	800335e <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <init_controller_params+0x15c>)
 800335c:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e037      	b.n	80033d4 <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800336e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800340c <init_controller_params+0x160>
 8003372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003376:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003410 <init_controller_params+0x164>
 800337a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800337e:	ee16 0a90 	vmov	r0, s13
 8003382:	f7fd f909 	bl	8000598 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	ec43 2b10 	vmov	d0, r2, r3
 800338e:	f010 fb47 	bl	8013a20 <exp>
 8003392:	ec51 0b10 	vmov	r0, r1, d0
 8003396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <init_controller_params+0x168>)
 800339c:	f7fd f954 	bl	8000648 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <init_controller_params+0x16c>)
 80033ae:	f7fc ff95 	bl	80002dc <__adddf3>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f7fd fc3d 	bl	8000c38 <__aeabi_d2f>
 80033be:	4601      	mov	r1, r0
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	333c      	adds	r3, #60	; 0x3c
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b7f      	cmp	r3, #127	; 0x7f
 80033d8:	ddc4      	ble.n	8003364 <init_controller_params+0xb8>
    }

    }
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	3d3851ec 	.word	0x3d3851ec
 80033e8:	20000624 	.word	0x20000624
 80033ec:	38d1b717 	.word	0x38d1b717
 80033f0:	37d1b717 	.word	0x37d1b717
 80033f4:	40c90fdb 	.word	0x40c90fdb
 80033f8:	3dcccccd 	.word	0x3dcccccd
 80033fc:	200006c4 	.word	0x200006c4
 8003400:	42200000 	.word	0x42200000
 8003404:	3ca4ffff 	.word	0x3ca4ffff
 8003408:	3d24ffff 	.word	0x3d24ffff
 800340c:	bc000000 	.word	0xbc000000
 8003410:	3d03126f 	.word	0x3d03126f
 8003414:	3ff33333 	.word	0x3ff33333
 8003418:	3ff00000 	.word	0x3ff00000

0800341c <reset_foc>:

void reset_foc(ControllerStruct *controller){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <reset_foc+0xe4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <reset_foc+0xe4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003448:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <reset_foc+0xe4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800345a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <reset_foc+0xe4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003466:	ee17 2a90 	vmov	r2, s15
 800346a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <reset_foc+0xe4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800347e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <reset_foc+0xe4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348a:	ee17 2a90 	vmov	r2, s15
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20009344 	.word	0x20009344

08003504 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - controller->v_ref);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	ed93 6a38 	vldr	s12, [r3, #224]	; 0xe0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003524:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 800353c:	eddf 0a29 	vldr	s1, [pc, #164]	; 80035e4 <field_weaken+0xe0>
 8003540:	eeb0 0a67 	vmov.f32	s0, s15
 8003544:	f002 f873 	bl	800562e <fast_fminf>
 8003548:	eeb0 7a40 	vmov.f32	s14, s0
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <field_weaken+0xe4>)
 800354e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003552:	eef1 7a67 	vneg.f32	s15, s15
 8003556:	eef0 0a67 	vmov.f32	s1, s15
 800355a:	eeb0 0a47 	vmov.f32	s0, s14
 800355e:	f002 f84a 	bl	80055f6 <fast_fmaxf>
 8003562:	eef0 7a40 	vmov.f32	s15, s0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->i_d_des = controller->fw_int;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359c:	eeb0 0a67 	vmov.f32	s0, s15
 80035a0:	f010 faa6 	bl	8013af0 <sqrtf>
 80035a4:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80035ae:	edd7 0a03 	vldr	s1, [r7, #12]
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	f002 f83a 	bl	800562e <fast_fminf>
 80035ba:	eeb0 7a40 	vmov.f32	s14, s0
 80035be:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c2:	eef1 7a67 	vneg.f32	s15, s15
 80035c6:	eef0 0a67 	vmov.f32	s1, s15
 80035ca:	eeb0 0a47 	vmov.f32	s0, s14
 80035ce:	f002 f812 	bl	80055f6 <fast_fmaxf>
 80035d2:	eef0 7a40 	vmov.f32	s15, s0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8


}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00000000 	.word	0x00000000
 80035e8:	20000624 	.word	0x20000624

080035ec <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800360c:	4bd7      	ldr	r3, [pc, #860]	; (800396c <commutate+0x380>)
 800360e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003622:	4bd2      	ldr	r3, [pc, #840]	; (800396c <commutate+0x380>)
 8003624:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	ed93 7a05 	vldr	s14, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	edd3 6a06 	vldr	s13, [r3, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	ed93 6a07 	vldr	s12, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3340      	adds	r3, #64	; 0x40
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	eef0 1a46 	vmov.f32	s3, s12
 800365c:	eeb0 1a66 	vmov.f32	s2, s13
 8003660:	eef0 0a47 	vmov.f32	s1, s14
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	f7ff fc94 	bl	8002f94 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003672:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003970 <commutate+0x384>
 8003676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003680:	eddf 6abc 	vldr	s13, [pc, #752]	; 8003974 <commutate+0x388>
 8003684:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003698:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003970 <commutate+0x384>
 800369c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80036a6:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8003974 <commutate+0x388>
 80036aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80036be:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003970 <commutate+0x384>
 80036c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80036cc:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8003974 <commutate+0x388>
 80036d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80036e4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003978 <commutate+0x38c>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800397c <commutate+0x390>
 80036f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003980 <commutate+0x394>
 80036f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8003702:	4b9a      	ldr	r3, [pc, #616]	; (800396c <commutate+0x380>)
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800371e:	eeb0 0a67 	vmov.f32	s0, s15
 8003722:	4610      	mov	r0, r2
 8003724:	f002 f807 	bl	8005736 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003738:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374c:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003762:	edd7 7a07 	vldr	s15, [r7, #28]
 8003766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003774:	edd7 7a05 	vldr	s15, [r7, #20]
 8003778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800378e:	eef0 0a47 	vmov.f32	s1, s14
 8003792:	eeb0 0a67 	vmov.f32	s0, s15
 8003796:	f001 ff4a 	bl	800562e <fast_fminf>
 800379a:	eeb0 7a40 	vmov.f32	s14, s0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80037a4:	eef1 7a67 	vneg.f32	s15, s15
 80037a8:	eef0 0a67 	vmov.f32	s1, s15
 80037ac:	eeb0 0a47 	vmov.f32	s0, s14
 80037b0:	f001 ff21 	bl	80055f6 <fast_fmaxf>
 80037b4:	eef0 7a40 	vmov.f32	s15, s0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80037d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80037f2:	eef0 0a47 	vmov.f32	s1, s14
 80037f6:	eeb0 0a67 	vmov.f32	s0, s15
 80037fa:	f001 ff18 	bl	800562e <fast_fminf>
 80037fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003808:	eef1 7a67 	vneg.f32	s15, s15
 800380c:	eef0 0a67 	vmov.f32	s1, s15
 8003810:	eeb0 0a47 	vmov.f32	s0, s14
 8003814:	f001 feef 	bl	80055f6 <fast_fmaxf>
 8003818:	eef0 7a40 	vmov.f32	s15, s0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800382e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800383e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003846:	eeb0 0a67 	vmov.f32	s0, s15
 800384a:	f010 f951 	bl	8013af0 <sqrtf>
 800384e:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003858:	edd7 7a06 	vldr	s15, [r7, #24]
 800385c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800386a:	edd7 7a04 	vldr	s15, [r7, #16]
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800388a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800388e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80038ac:	eef0 0a47 	vmov.f32	s1, s14
 80038b0:	eeb0 0a67 	vmov.f32	s0, s15
 80038b4:	f001 febb 	bl	800562e <fast_fminf>
 80038b8:	eeb0 7a40 	vmov.f32	s14, s0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80038c2:	eef1 7a67 	vneg.f32	s15, s15
 80038c6:	eef0 0a67 	vmov.f32	s1, s15
 80038ca:	eeb0 0a47 	vmov.f32	s0, s14
 80038ce:	f001 fe92 	bl	80055f6 <fast_fmaxf>
 80038d2:	eef0 7a40 	vmov.f32	s15, s0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80038e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80038f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003900:	eeb0 0a67 	vmov.f32	s0, s15
 8003904:	f010 f8f4 	bl	8013af0 <sqrtf>
 8003908:	eef0 7a40 	vmov.f32	s15, s0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003918:	edd7 0a03 	vldr	s1, [r7, #12]
 800391c:	eeb0 0a67 	vmov.f32	s0, s15
 8003920:	f001 fe85 	bl	800562e <fast_fminf>
 8003924:	eeb0 7a40 	vmov.f32	s14, s0
 8003928:	edd7 7a03 	vldr	s15, [r7, #12]
 800392c:	eef1 7a67 	vneg.f32	s15, s15
 8003930:	eef0 0a67 	vmov.f32	s1, s15
 8003934:	eeb0 0a47 	vmov.f32	s0, s14
 8003938:	f001 fe5d 	bl	80055f6 <fast_fmaxf>
 800393c:	eef0 7a40 	vmov.f32	s15, s0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003958:	eeb0 0a67 	vmov.f32	s0, s15
 800395c:	4610      	mov	r0, r2
 800395e:	f001 feea 	bl	8005736 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	e00d      	b.n	8003988 <commutate+0x39c>
 800396c:	20000624 	.word	0x20000624
 8003970:	3f666666 	.word	0x3f666666
 8003974:	3dcccccd 	.word	0x3dcccccd
 8003978:	3f933333 	.word	0x3f933333
 800397c:	3f70a3d7 	.word	0x3f70a3d7
 8003980:	3f13cd3a 	.word	0x3f13cd3a
 8003984:	381d4951 	.word	0x381d4951
 8003988:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800398c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003984 <commutate+0x398>
 8003990:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	336c      	adds	r3, #108	; 0x6c
 80039b4:	461a      	mov	r2, r3
 80039b6:	eeb0 1a66 	vmov.f32	s2, s13
 80039ba:	eef0 0a47 	vmov.f32	s1, s14
 80039be:	eeb0 0a67 	vmov.f32	s0, s15
 80039c2:	f7ff fa63 	bl	8002e8c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3360      	adds	r3, #96	; 0x60
 80039ee:	461a      	mov	r2, r3
 80039f0:	eef0 1a46 	vmov.f32	s3, s12
 80039f4:	eeb0 1a66 	vmov.f32	s2, s13
 80039f8:	eef0 0a47 	vmov.f32	s1, s14
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	f7ff fb58 	bl	80030b4 <svm>

       set_dtc(controller);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff f8f3 	bl	8002bf0 <set_dtc>

    }
 8003a0a:	bf00      	nop
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <torque_control>:


void torque_control(ControllerStruct *controller){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003a52:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <torque_control+0xb0>)
 8003a64:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <torque_control+0xb0>)
 8003a6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003a80:	eef0 0a67 	vmov.f32	s1, s15
 8003a84:	eeb0 0a66 	vmov.f32	s0, s13
 8003a88:	f001 fdd1 	bl	800562e <fast_fminf>
 8003a8c:	eeb0 7a40 	vmov.f32	s14, s0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003a96:	eef1 7a67 	vneg.f32	s15, s15
 8003a9a:	eef0 0a67 	vmov.f32	s1, s15
 8003a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003aa2:	f001 fda8 	bl	80055f6 <fast_fmaxf>
 8003aa6:	eef0 7a40 	vmov.f32	s15, s0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000624 	.word	0x20000624

08003ac8 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <run_fsm>:
#include "drv8323.h"

#define DISABLE_MOTOR HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
#define ENABLE_MOTOR HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);

 void run_fsm(FSMStruct * fsmstate){
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	785a      	ldrb	r2, [r3, #1]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d00d      	beq.n	8003b48 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f941 	bl	8003db4 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	78db      	ldrb	r3, [r3, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	785a      	ldrb	r2, [r3, #1]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8d2 	bl	8003cec <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	f200 80b8 	bhi.w	8003cc2 <run_fsm+0x1aa>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <run_fsm+0x40>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003cc1 	.word	0x08003cc1
 8003b5c:	08003b75 	.word	0x08003b75
 8003b60:	08003c75 	.word	0x08003c75
 8003b64:	08003cc3 	.word	0x08003cc3
 8003b68:	08003cc1 	.word	0x08003cc1
 8003b6c:	08003cb7 	.word	0x08003cb7
 8003b70:	08003cc1 	.word	0x08003cc1
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003b74:	4b55      	ldr	r3, [pc, #340]	; (8003ccc <run_fsm+0x1b4>)
 8003b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003b7e:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <run_fsm+0x1b8>)
 8003b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b84:	4a51      	ldr	r2, [pc, #324]	; (8003ccc <run_fsm+0x1b4>)
 8003b86:	4952      	ldr	r1, [pc, #328]	; (8003cd0 <run_fsm+0x1b8>)
 8003b88:	4852      	ldr	r0, [pc, #328]	; (8003cd4 <run_fsm+0x1bc>)
 8003b8a:	f7fd fecb 	bl	8001924 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003b8e:	e098      	b.n	8003cc2 <run_fsm+0x1aa>
			 else if(!comm_encoder_cal.done_cal){
 8003b90:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <run_fsm+0x1b4>)
 8003b92:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d108      	bne.n	8003bac <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <run_fsm+0x1b8>)
 8003b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <run_fsm+0x1b4>)
 8003ba2:	494b      	ldr	r1, [pc, #300]	; (8003cd0 <run_fsm+0x1b8>)
 8003ba4:	484b      	ldr	r0, [pc, #300]	; (8003cd4 <run_fsm+0x1bc>)
 8003ba6:	f7fd ffc5 	bl	8001b34 <calibrate_encoder>
			 break;
 8003baa:	e08a      	b.n	8003cc2 <run_fsm+0x1aa>
				 E_ZERO = comm_encoder_cal.ezero;
 8003bac:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <run_fsm+0x1b4>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <run_fsm+0x1c0>)
 8003bb2:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003bb4:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <run_fsm+0x1c0>)
 8003bb6:	695c      	ldr	r4, [r3, #20]
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <run_fsm+0x1bc>)
 8003bba:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003bbe:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <run_fsm+0x1c0>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	425b      	negs	r3, r3
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd0:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003cdc <run_fsm+0x1c4>
 8003bd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bd8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8003be0:	f00f ff66 	bl	8013ab0 <fmodf>
 8003be4:	eef0 7a40 	vmov.f32	s15, s0
 8003be8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003ce0 <run_fsm+0x1c8>
 8003bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf0:	ee17 0a90 	vmov	r0, s15
 8003bf4:	f7fc fcd0 	bl	8000598 <__aeabi_f2d>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4839      	ldr	r0, [pc, #228]	; (8003ce4 <run_fsm+0x1cc>)
 8003c00:	f00b ffea 	bl	800fbd8 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003c04:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <run_fsm+0x1bc>)
 8003c06:	4a31      	ldr	r2, [pc, #196]	; (8003ccc <run_fsm+0x1b4>)
 8003c08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003c0c:	33dc      	adds	r3, #220	; 0xdc
 8003c0e:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c16:	4618      	mov	r0, r3
 8003c18:	f00b f94e 	bl	800eeb8 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003c1c:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <run_fsm+0x1c0>)
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <run_fsm+0x1b4>)
 8003c20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003c24:	3318      	adds	r3, #24
 8003c26:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f00b f942 	bl	800eeb8 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003c34:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <run_fsm+0x1d0>)
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c3c:	f002 f8b2 	bl	8005da4 <preference_writer_ready>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <run_fsm+0x13a>
 8003c4c:	4826      	ldr	r0, [pc, #152]	; (8003ce8 <run_fsm+0x1d0>)
 8003c4e:	f002 f89a 	bl	8005d86 <preference_writer_open>
				 preference_writer_flush(&prefs);
 8003c52:	4825      	ldr	r0, [pc, #148]	; (8003ce8 <run_fsm+0x1d0>)
 8003c54:	f002 f8b4 	bl	8005dc0 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003c58:	4823      	ldr	r0, [pc, #140]	; (8003ce8 <run_fsm+0x1d0>)
 8003c5a:	f002 f92b 	bl	8005eb4 <preference_writer_close>
				 preference_writer_load(prefs);
 8003c5e:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <run_fsm+0x1d0>)
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	9200      	str	r2, [sp, #0]
 8003c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c66:	f002 f8e5 	bl	8005e34 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003c6a:	211b      	movs	r1, #27
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8f9 	bl	8003e64 <update_fsm>
			 break;
 8003c72:	e026      	b.n	8003cc2 <run_fsm+0x1aa>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003c74:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <run_fsm+0x1c0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	dd0a      	ble.n	8003c92 <run_fsm+0x17a>
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <run_fsm+0x1b8>)
 8003c7e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <run_fsm+0x1c0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	dd03      	ble.n	8003c92 <run_fsm+0x17a>
				 zero_commands(&controller);
 8003c8a:	4811      	ldr	r0, [pc, #68]	; (8003cd0 <run_fsm+0x1b8>)
 8003c8c:	f7ff ff1c 	bl	8003ac8 <zero_commands>
 8003c90:	e009      	b.n	8003ca6 <run_fsm+0x18e>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003c92:	480f      	ldr	r0, [pc, #60]	; (8003cd0 <run_fsm+0x1b8>)
 8003c94:	f7ff febe 	bl	8003a14 <torque_control>
				 field_weaken(&controller);
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <run_fsm+0x1b8>)
 8003c9a:	f7ff fc33 	bl	8003504 <field_weaken>
				 commutate(&controller, &comm_encoder);
 8003c9e:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <run_fsm+0x1bc>)
 8003ca0:	480b      	ldr	r0, [pc, #44]	; (8003cd0 <run_fsm+0x1b8>)
 8003ca2:	f7ff fca3 	bl	80035ec <commutate>
			 }
			 controller.timeout ++;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <run_fsm+0x1b8>)
 8003ca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003cac:	3301      	adds	r3, #1
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <run_fsm+0x1b8>)
 8003cb0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 8003cb4:	e005      	b.n	8003cc2 <run_fsm+0x1aa>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003cb6:	2164      	movs	r1, #100	; 0x64
 8003cb8:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <run_fsm+0x1bc>)
 8003cba:	f002 f80d 	bl	8005cd8 <ps_print>
			 break;
 8003cbe:	e000      	b.n	8003cc2 <run_fsm+0x1aa>
			 break;
 8003cc0:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000cf0 	.word	0x20000cf0
 8003cd0:	20000700 	.word	0x20000700
 8003cd4:	20000a08 	.word	0x20000a08
 8003cd8:	200006c4 	.word	0x200006c4
 8003cdc:	46800000 	.word	0x46800000
 8003ce0:	40c90fdb 	.word	0x40c90fdb
 8003ce4:	080141d0 	.word	0x080141d0
 8003ce8:	200006ec 	.word	0x200006ec

08003cec <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d84b      	bhi.n	8003d94 <fsm_enter_state+0xa8>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <fsm_enter_state+0x18>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d29 	.word	0x08003d29
 8003d10:	08003d95 	.word	0x08003d95
 8003d14:	08003d23 	.word	0x08003d23
 8003d18:	08003d93 	.word	0x08003d93
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003d1c:	f000 f978 	bl	8004010 <enter_menu_state>
				break;
 8003d20:	e038      	b.n	8003d94 <fsm_enter_state+0xa8>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003d22:	f000 f9a1 	bl	8004068 <enter_setup_state>
				break;
 8003d26:	e035      	b.n	8003d94 <fsm_enter_state+0xa8>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
				// printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003d28:	2201      	movs	r2, #1
 8003d2a:	2120      	movs	r1, #32
 8003d2c:	481b      	ldr	r0, [pc, #108]	; (8003d9c <fsm_enter_state+0xb0>)
 8003d2e:	f006 f82b 	bl	8009d88 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003d32:	481b      	ldr	r0, [pc, #108]	; (8003da0 <fsm_enter_state+0xb4>)
 8003d34:	f7ff fb72 	bl	800341c <reset_foc>
				drv_enable_gd(drv);
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <fsm_enter_state+0xb8>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	889a      	ldrh	r2, [r3, #4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	f362 030f 	bfi	r3, r2, #0, #16
 8003d46:	4608      	mov	r0, r1
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f7fe fb30 	bl	80023ae <drv_enable_gd>
				break;
 8003d4e:	e021      	b.n	8003d94 <fsm_enter_state+0xa8>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <fsm_enter_state+0xbc>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <fsm_enter_state+0xbc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <fsm_enter_state+0xbc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <fsm_enter_state+0xc0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d72:	2100      	movs	r1, #0
 8003d74:	480e      	ldr	r0, [pc, #56]	; (8003db0 <fsm_enter_state+0xc4>)
 8003d76:	f00b f8ad 	bl	800eed4 <memset>
				drv_enable_gd(drv);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <fsm_enter_state+0xb8>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	889a      	ldrh	r2, [r3, #4]
 8003d82:	2300      	movs	r3, #0
 8003d84:	f362 030f 	bfi	r3, r2, #0, #16
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7fe fb0f 	bl	80023ae <drv_enable_gd>
				break;
 8003d90:	e000      	b.n	8003d94 <fsm_enter_state+0xa8>
				break;
 8003d92:	bf00      	nop

		}
 }
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	48000800 	.word	0x48000800
 8003da0:	20000700 	.word	0x20000700
 8003da4:	20000ce8 	.word	0x20000ce8
 8003da8:	20000cf0 	.word	0x20000cf0
 8003dac:	20000a08 	.word	0x20000a08
 8003db0:	20000ae4 	.word	0x20000ae4

08003db4 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d844      	bhi.n	8003e4e <fsm_exit_state+0x9a>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <fsm_exit_state+0x18>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003de5 	.word	0x08003de5
 8003dd0:	08003e31 	.word	0x08003e31
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003e4f 	.word	0x08003e4f
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003df5 	.word	0x08003df5
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	70da      	strb	r2, [r3, #3]
				break;
 8003dea:	e030      	b.n	8003e4e <fsm_exit_state+0x9a>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	70da      	strb	r2, [r3, #3]
				break;
 8003df2:	e02c      	b.n	8003e4e <fsm_exit_state+0x9a>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	70da      	strb	r2, [r3, #3]
				break;
 8003dfa:	e028      	b.n	8003e4e <fsm_exit_state+0x9a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <fsm_exit_state+0xa4>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4611      	mov	r1, r2
 8003e08:	889a      	ldrh	r2, [r3, #4]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f362 030f 	bfi	r3, r2, #0, #16
 8003e10:	4608      	mov	r0, r1
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7fe fae5 	bl	80023e2 <drv_disable_gd>
					reset_foc(&controller);
 8003e18:	4810      	ldr	r0, [pc, #64]	; (8003e5c <fsm_exit_state+0xa8>)
 8003e1a:	f7ff faff 	bl	800341c <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2120      	movs	r1, #32
 8003e22:	480f      	ldr	r0, [pc, #60]	; (8003e60 <fsm_exit_state+0xac>)
 8003e24:	f005 ffb0 	bl	8009d88 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003e28:	480c      	ldr	r0, [pc, #48]	; (8003e5c <fsm_exit_state+0xa8>)
 8003e2a:	f7ff fe4d 	bl	8003ac8 <zero_commands>
				break;
 8003e2e:	e00e      	b.n	8003e4e <fsm_exit_state+0x9a>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <fsm_exit_state+0xa4>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4611      	mov	r1, r2
 8003e36:	889a      	ldrh	r2, [r3, #4]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f362 030f 	bfi	r3, r2, #0, #16
 8003e3e:	4608      	mov	r0, r1
 8003e40:	4619      	mov	r1, r3
 8003e42:	f7fe face 	bl	80023e2 <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	70da      	strb	r2, [r3, #3]
				break;
 8003e4c:	bf00      	nop
		}

 }
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000ce8 	.word	0x20000ce8
 8003e5c:	20000700 	.word	0x20000700
 8003e60:	48000800 	.word	0x48000800

08003e64 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	2b1b      	cmp	r3, #27
 8003e74:	d106      	bne.n	8003e84 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	70da      	strb	r2, [r3, #3]
		return;
 8003e82:	e0b7      	b.n	8003ff4 <update_fsm+0x190>
	}
	switch(fsmstate->state){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	f200 80b3 	bhi.w	8003ff4 <update_fsm+0x190>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <update_fsm+0x30>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003ff5 	.word	0x08003ff5
 8003e9c:	08003ff5 	.word	0x08003ff5
 8003ea0:	08003ff5 	.word	0x08003ff5
 8003ea4:	08003fb9 	.word	0x08003fb9
 8003ea8:	08003ff5 	.word	0x08003ff5
		case MENU_MODE:
			switch (fsm_input){
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	3b63      	subs	r3, #99	; 0x63
 8003eb0:	2b17      	cmp	r3, #23
 8003eb2:	f200 809e 	bhi.w	8003ff2 <update_fsm+0x18e>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <update_fsm+0x58>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003f1d 	.word	0x08003f1d
 8003ec0:	08003ff3 	.word	0x08003ff3
 8003ec4:	08003f39 	.word	0x08003f39
 8003ec8:	08003ff3 	.word	0x08003ff3
 8003ecc:	08003ff3 	.word	0x08003ff3
 8003ed0:	08003ff3 	.word	0x08003ff3
 8003ed4:	08003ff3 	.word	0x08003ff3
 8003ed8:	08003ff3 	.word	0x08003ff3
 8003edc:	08003ff3 	.word	0x08003ff3
 8003ee0:	08003ff3 	.word	0x08003ff3
 8003ee4:	08003f2b 	.word	0x08003f2b
 8003ee8:	08003ff3 	.word	0x08003ff3
 8003eec:	08003ff3 	.word	0x08003ff3
 8003ef0:	08003ff3 	.word	0x08003ff3
 8003ef4:	08003ff3 	.word	0x08003ff3
 8003ef8:	08003ff3 	.word	0x08003ff3
 8003efc:	08003f47 	.word	0x08003f47
 8003f00:	08003ff3 	.word	0x08003ff3
 8003f04:	08003ff3 	.word	0x08003ff3
 8003f08:	08003ff3 	.word	0x08003ff3
 8003f0c:	08003ff3 	.word	0x08003ff3
 8003f10:	08003ff3 	.word	0x08003ff3
 8003f14:	08003ff3 	.word	0x08003ff3
 8003f18:	08003f55 	.word	0x08003f55
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	70da      	strb	r2, [r3, #3]
					break;
 8003f28:	e045      	b.n	8003fb6 <update_fsm+0x152>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	70da      	strb	r2, [r3, #3]
					break;
 8003f36:	e03e      	b.n	8003fb6 <update_fsm+0x152>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2205      	movs	r2, #5
 8003f3c:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	70da      	strb	r2, [r3, #3]
					break;
 8003f44:	e037      	b.n	8003fb6 <update_fsm+0x152>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	70da      	strb	r2, [r3, #3]
					break;
 8003f52:	e030      	b.n	8003fb6 <update_fsm+0x152>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003f54:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <update_fsm+0x198>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003f5c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8004000 <update_fsm+0x19c>
 8003f60:	4826      	ldr	r0, [pc, #152]	; (8003ffc <update_fsm+0x198>)
 8003f62:	f001 fd69 	bl	8005a38 <ps_sample>
					int zero_count = comm_encoder.count;
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <update_fsm+0x198>)
 8003f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6a:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <update_fsm+0x1a0>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs))
 8003f72:	4b25      	ldr	r3, [pc, #148]	; (8004008 <update_fsm+0x1a4>)
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	9200      	str	r2, [sp, #0]
 8003f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f7a:	f001 ff13 	bl	8005da4 <preference_writer_ready>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f083 0301 	eor.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <update_fsm+0x12c>
					{
						preference_writer_open(&prefs);
 8003f8a:	481f      	ldr	r0, [pc, #124]	; (8004008 <update_fsm+0x1a4>)
 8003f8c:	f001 fefb 	bl	8005d86 <preference_writer_open>
					}
					preference_writer_flush(&prefs);
 8003f90:	481d      	ldr	r0, [pc, #116]	; (8004008 <update_fsm+0x1a4>)
 8003f92:	f001 ff15 	bl	8005dc0 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003f96:	481c      	ldr	r0, [pc, #112]	; (8004008 <update_fsm+0x1a4>)
 8003f98:	f001 ff8c 	bl	8005eb4 <preference_writer_close>
					preference_writer_load(prefs);
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <update_fsm+0x1a4>)
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa4:	f001 ff46 	bl	8005e34 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <update_fsm+0x1a0>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4619      	mov	r1, r3
 8003fae:	4817      	ldr	r0, [pc, #92]	; (800400c <update_fsm+0x1a8>)
 8003fb0:	f00b fe12 	bl	800fbd8 <iprintf>
					break;
 8003fb4:	bf00      	nop
			}
			break;
 8003fb6:	e01c      	b.n	8003ff2 <update_fsm+0x18e>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b0d      	cmp	r3, #13
 8003fbc:	d103      	bne.n	8003fc6 <update_fsm+0x162>
				process_user_input(fsmstate);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9c8 	bl	8004354 <process_user_input>
				break;
 8003fc4:	e016      	b.n	8003ff4 <update_fsm+0x190>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <update_fsm+0x172>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	735a      	strb	r2, [r3, #13]
 8003fd4:	e006      	b.n	8003fe4 <update_fsm+0x180>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7b1b      	ldrb	r3, [r3, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7b1b      	ldrb	r3, [r3, #12]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003ff0:	e000      	b.n	8003ff4 <update_fsm+0x190>
			break;
 8003ff2:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000a08 	.word	0x20000a08
 8004000:	37d1b717 	.word	0x37d1b717
 8004004:	200006c4 	.word	0x200006c4
 8004008:	200006ec 	.word	0x200006ec
 800400c:	080141e4 	.word	0x080141e4

08004010 <enter_menu_state>:


 void enter_menu_state(void){
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8004014:	480c      	ldr	r0, [pc, #48]	; (8004048 <enter_menu_state+0x38>)
 8004016:	f00b fddf 	bl	800fbd8 <iprintf>
	    printf(" Commands:\n\r");
 800401a:	480c      	ldr	r0, [pc, #48]	; (800404c <enter_menu_state+0x3c>)
 800401c:	f00b fddc 	bl	800fbd8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8004020:	480b      	ldr	r0, [pc, #44]	; (8004050 <enter_menu_state+0x40>)
 8004022:	f00b fdd9 	bl	800fbd8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8004026:	480b      	ldr	r0, [pc, #44]	; (8004054 <enter_menu_state+0x44>)
 8004028:	f00b fdd6 	bl	800fbd8 <iprintf>
	    printf(" s - Setup\n\r");
 800402c:	480a      	ldr	r0, [pc, #40]	; (8004058 <enter_menu_state+0x48>)
 800402e:	f00b fdd3 	bl	800fbd8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8004032:	480a      	ldr	r0, [pc, #40]	; (800405c <enter_menu_state+0x4c>)
 8004034:	f00b fdd0 	bl	800fbd8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <enter_menu_state+0x50>)
 800403a:	f00b fdcd 	bl	800fbd8 <iprintf>
	    //printf(" r - Reboot Controller\n\r");
	    printf(" esc - Exit to Menu\n\r");
 800403e:	4809      	ldr	r0, [pc, #36]	; (8004064 <enter_menu_state+0x54>)
 8004040:	f00b fdca 	bl	800fbd8 <iprintf>

	    //gpio.led->write(0);
 }
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}
 8004048:	0801420c 	.word	0x0801420c
 800404c:	08014214 	.word	0x08014214
 8004050:	08014224 	.word	0x08014224
 8004054:	08014238 	.word	0x08014238
 8004058:	08014254 	.word	0x08014254
 800405c:	08014264 	.word	0x08014264
 8004060:	0801427c 	.word	0x0801427c
 8004064:	08014298 	.word	0x08014298

08004068 <enter_setup_state>:

 void enter_setup_state(void){
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 800406e:	487d      	ldr	r0, [pc, #500]	; (8004264 <enter_setup_state+0x1fc>)
 8004070:	f00b fdb2 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8004074:	4b7c      	ldr	r3, [pc, #496]	; (8004268 <enter_setup_state+0x200>)
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	4b7c      	ldr	r3, [pc, #496]	; (800426c <enter_setup_state+0x204>)
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4b7c      	ldr	r3, [pc, #496]	; (8004270 <enter_setup_state+0x208>)
 800407e:	4a7d      	ldr	r2, [pc, #500]	; (8004274 <enter_setup_state+0x20c>)
 8004080:	497d      	ldr	r1, [pc, #500]	; (8004278 <enter_setup_state+0x210>)
 8004082:	487e      	ldr	r0, [pc, #504]	; (800427c <enter_setup_state+0x214>)
 8004084:	f00b fda8 	bl	800fbd8 <iprintf>
	    printf("\r\n Motor:\r\n");
 8004088:	487d      	ldr	r0, [pc, #500]	; (8004280 <enter_setup_state+0x218>)
 800408a:	f00b fe2b 	bl	800fce4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 800408e:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <enter_setup_state+0x21c>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa80 	bl	8000598 <__aeabi_f2d>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <enter_setup_state+0x220>)
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4b79      	ldr	r3, [pc, #484]	; (800428c <enter_setup_state+0x224>)
 80040a6:	4a7a      	ldr	r2, [pc, #488]	; (8004290 <enter_setup_state+0x228>)
 80040a8:	497a      	ldr	r1, [pc, #488]	; (8004294 <enter_setup_state+0x22c>)
 80040aa:	487b      	ldr	r0, [pc, #492]	; (8004298 <enter_setup_state+0x230>)
 80040ac:	f00b fd94 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 80040b0:	4b74      	ldr	r3, [pc, #464]	; (8004284 <enter_setup_state+0x21c>)
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fa6f 	bl	8000598 <__aeabi_f2d>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040c2:	4b71      	ldr	r3, [pc, #452]	; (8004288 <enter_setup_state+0x220>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	4b71      	ldr	r3, [pc, #452]	; (800428c <enter_setup_state+0x224>)
 80040c8:	4a74      	ldr	r2, [pc, #464]	; (800429c <enter_setup_state+0x234>)
 80040ca:	4975      	ldr	r1, [pc, #468]	; (80042a0 <enter_setup_state+0x238>)
 80040cc:	4875      	ldr	r0, [pc, #468]	; (80042a4 <enter_setup_state+0x23c>)
 80040ce:	f00b fd83 	bl	800fbd8 <iprintf>
	    printf("\r\n Control:\r\n");
 80040d2:	4875      	ldr	r0, [pc, #468]	; (80042a8 <enter_setup_state+0x240>)
 80040d4:	f00b fe06 	bl	800fce4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <enter_setup_state+0x21c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc fa5b 	bl	8000598 <__aeabi_f2d>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040ea:	4b70      	ldr	r3, [pc, #448]	; (80042ac <enter_setup_state+0x244>)
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4b70      	ldr	r3, [pc, #448]	; (80042b0 <enter_setup_state+0x248>)
 80040f0:	4a70      	ldr	r2, [pc, #448]	; (80042b4 <enter_setup_state+0x24c>)
 80040f2:	4971      	ldr	r1, [pc, #452]	; (80042b8 <enter_setup_state+0x250>)
 80040f4:	4871      	ldr	r0, [pc, #452]	; (80042bc <enter_setup_state+0x254>)
 80040f6:	f00b fd6f 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 80040fa:	4b62      	ldr	r3, [pc, #392]	; (8004284 <enter_setup_state+0x21c>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc fa4a 	bl	8000598 <__aeabi_f2d>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800410c:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <enter_setup_state+0x258>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <enter_setup_state+0x25c>)
 8004112:	4a6d      	ldr	r2, [pc, #436]	; (80042c8 <enter_setup_state+0x260>)
 8004114:	496d      	ldr	r1, [pc, #436]	; (80042cc <enter_setup_state+0x264>)
 8004116:	4869      	ldr	r0, [pc, #420]	; (80042bc <enter_setup_state+0x254>)
 8004118:	f00b fd5e 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <enter_setup_state+0x21c>)
 800411e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc fa39 	bl	8000598 <__aeabi_f2d>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800412e:	4b56      	ldr	r3, [pc, #344]	; (8004288 <enter_setup_state+0x220>)
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4b55      	ldr	r3, [pc, #340]	; (8004288 <enter_setup_state+0x220>)
 8004134:	4a66      	ldr	r2, [pc, #408]	; (80042d0 <enter_setup_state+0x268>)
 8004136:	4967      	ldr	r1, [pc, #412]	; (80042d4 <enter_setup_state+0x26c>)
 8004138:	4860      	ldr	r0, [pc, #384]	; (80042bc <enter_setup_state+0x254>)
 800413a:	f00b fd4d 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 800413e:	4b51      	ldr	r3, [pc, #324]	; (8004284 <enter_setup_state+0x21c>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fa28 	bl	8000598 <__aeabi_f2d>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004150:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <enter_setup_state+0x220>)
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <enter_setup_state+0x220>)
 8004156:	4a60      	ldr	r2, [pc, #384]	; (80042d8 <enter_setup_state+0x270>)
 8004158:	4960      	ldr	r1, [pc, #384]	; (80042dc <enter_setup_state+0x274>)
 800415a:	4858      	ldr	r0, [pc, #352]	; (80042bc <enter_setup_state+0x254>)
 800415c:	f00b fd3c 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <enter_setup_state+0x21c>)
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc fa17 	bl	8000598 <__aeabi_f2d>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004172:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <enter_setup_state+0x278>)
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <enter_setup_state+0x25c>)
 8004178:	4a5a      	ldr	r2, [pc, #360]	; (80042e4 <enter_setup_state+0x27c>)
 800417a:	495b      	ldr	r1, [pc, #364]	; (80042e8 <enter_setup_state+0x280>)
 800417c:	484f      	ldr	r0, [pc, #316]	; (80042bc <enter_setup_state+0x254>)
 800417e:	f00b fd2b 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <enter_setup_state+0x21c>)
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc fa06 	bl	8000598 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004194:	4b55      	ldr	r3, [pc, #340]	; (80042ec <enter_setup_state+0x284>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <enter_setup_state+0x25c>)
 800419a:	4a55      	ldr	r2, [pc, #340]	; (80042f0 <enter_setup_state+0x288>)
 800419c:	4955      	ldr	r1, [pc, #340]	; (80042f4 <enter_setup_state+0x28c>)
 800419e:	4847      	ldr	r0, [pc, #284]	; (80042bc <enter_setup_state+0x254>)
 80041a0:	f00b fd1a 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <enter_setup_state+0x21c>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f9f5 	bl	8000598 <__aeabi_f2d>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041b6:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <enter_setup_state+0x290>)
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <enter_setup_state+0x25c>)
 80041bc:	4a4f      	ldr	r2, [pc, #316]	; (80042fc <enter_setup_state+0x294>)
 80041be:	4950      	ldr	r1, [pc, #320]	; (8004300 <enter_setup_state+0x298>)
 80041c0:	483e      	ldr	r0, [pc, #248]	; (80042bc <enter_setup_state+0x254>)
 80041c2:	f00b fd09 	bl	800fbd8 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <enter_setup_state+0x21c>)
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f9e4 	bl	8000598 <__aeabi_f2d>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041d8:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <enter_setup_state+0x29c>)
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <enter_setup_state+0x25c>)
 80041de:	4a4a      	ldr	r2, [pc, #296]	; (8004308 <enter_setup_state+0x2a0>)
 80041e0:	494a      	ldr	r1, [pc, #296]	; (800430c <enter_setup_state+0x2a4>)
 80041e2:	4836      	ldr	r0, [pc, #216]	; (80042bc <enter_setup_state+0x254>)
 80041e4:	f00b fcf8 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 80041e8:	4b26      	ldr	r3, [pc, #152]	; (8004284 <enter_setup_state+0x21c>)
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f9d3 	bl	8000598 <__aeabi_f2d>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041fa:	4b45      	ldr	r3, [pc, #276]	; (8004310 <enter_setup_state+0x2a8>)
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <enter_setup_state+0x25c>)
 8004200:	4a44      	ldr	r2, [pc, #272]	; (8004314 <enter_setup_state+0x2ac>)
 8004202:	4945      	ldr	r1, [pc, #276]	; (8004318 <enter_setup_state+0x2b0>)
 8004204:	482d      	ldr	r0, [pc, #180]	; (80042bc <enter_setup_state+0x254>)
 8004206:	f00b fce7 	bl	800fbd8 <iprintf>
	    printf("\r\n CAN:\r\n");
 800420a:	4844      	ldr	r0, [pc, #272]	; (800431c <enter_setup_state+0x2b4>)
 800420c:	f00b fd6a 	bl	800fce4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8004210:	4b43      	ldr	r3, [pc, #268]	; (8004320 <enter_setup_state+0x2b8>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	4b43      	ldr	r3, [pc, #268]	; (8004324 <enter_setup_state+0x2bc>)
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <enter_setup_state+0x224>)
 800421c:	4a42      	ldr	r2, [pc, #264]	; (8004328 <enter_setup_state+0x2c0>)
 800421e:	4943      	ldr	r1, [pc, #268]	; (800432c <enter_setup_state+0x2c4>)
 8004220:	4843      	ldr	r0, [pc, #268]	; (8004330 <enter_setup_state+0x2c8>)
 8004222:	f00b fcd9 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8004226:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <enter_setup_state+0x2b8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <enter_setup_state+0x2bc>)
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <enter_setup_state+0x224>)
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <enter_setup_state+0x2cc>)
 8004234:	4940      	ldr	r1, [pc, #256]	; (8004338 <enter_setup_state+0x2d0>)
 8004236:	483e      	ldr	r0, [pc, #248]	; (8004330 <enter_setup_state+0x2c8>)
 8004238:	f00b fcce 	bl	800fbd8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 800423c:	4b38      	ldr	r3, [pc, #224]	; (8004320 <enter_setup_state+0x2b8>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	4b3e      	ldr	r3, [pc, #248]	; (800433c <enter_setup_state+0x2d4>)
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <enter_setup_state+0x224>)
 8004248:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <enter_setup_state+0x2d8>)
 800424a:	493e      	ldr	r1, [pc, #248]	; (8004344 <enter_setup_state+0x2dc>)
 800424c:	483e      	ldr	r0, [pc, #248]	; (8004348 <enter_setup_state+0x2e0>)
 800424e:	f00b fcc3 	bl	800fbd8 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8004252:	483e      	ldr	r0, [pc, #248]	; (800434c <enter_setup_state+0x2e4>)
 8004254:	f00b fcc0 	bl	800fbd8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8004258:	483d      	ldr	r0, [pc, #244]	; (8004350 <enter_setup_state+0x2e8>)
 800425a:	f00b fcbd 	bl	800fbd8 <iprintf>
 }
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	080142b0 	.word	0x080142b0
 8004268:	08014304 	.word	0x08014304
 800426c:	08014314 	.word	0x08014314
 8004270:	080142cc 	.word	0x080142cc
 8004274:	080142d0 	.word	0x080142d0
 8004278:	080142dc 	.word	0x080142dc
 800427c:	080142e4 	.word	0x080142e4
 8004280:	08014318 	.word	0x08014318
 8004284:	20000624 	.word	0x20000624
 8004288:	08014358 	.word	0x08014358
 800428c:	08014324 	.word	0x08014324
 8004290:	08014328 	.word	0x08014328
 8004294:	08014334 	.word	0x08014334
 8004298:	08014338 	.word	0x08014338
 800429c:	0801435c 	.word	0x0801435c
 80042a0:	08014374 	.word	0x08014374
 80042a4:	08014378 	.word	0x08014378
 80042a8:	08014398 	.word	0x08014398
 80042ac:	080143e8 	.word	0x080143e8
 80042b0:	080143a8 	.word	0x080143a8
 80042b4:	080143ac 	.word	0x080143ac
 80042b8:	080143c4 	.word	0x080143c4
 80042bc:	080143c8 	.word	0x080143c8
 80042c0:	0801440c 	.word	0x0801440c
 80042c4:	080143f0 	.word	0x080143f0
 80042c8:	080143f4 	.word	0x080143f4
 80042cc:	08014408 	.word	0x08014408
 80042d0:	08014414 	.word	0x08014414
 80042d4:	08014430 	.word	0x08014430
 80042d8:	08014434 	.word	0x08014434
 80042dc:	08014454 	.word	0x08014454
 80042e0:	08014478 	.word	0x08014478
 80042e4:	08014458 	.word	0x08014458
 80042e8:	08014474 	.word	0x08014474
 80042ec:	080144a4 	.word	0x080144a4
 80042f0:	08014480 	.word	0x08014480
 80042f4:	080144a0 	.word	0x080144a0
 80042f8:	080144c4 	.word	0x080144c4
 80042fc:	080144a8 	.word	0x080144a8
 8004300:	080144c0 	.word	0x080144c0
 8004304:	080144e8 	.word	0x080144e8
 8004308:	080144cc 	.word	0x080144cc
 800430c:	080144e4 	.word	0x080144e4
 8004310:	0801450c 	.word	0x0801450c
 8004314:	080144f0 	.word	0x080144f0
 8004318:	08014508 	.word	0x08014508
 800431c:	08014514 	.word	0x08014514
 8004320:	200006c4 	.word	0x200006c4
 8004324:	0801454c 	.word	0x0801454c
 8004328:	08014520 	.word	0x08014520
 800432c:	08014528 	.word	0x08014528
 8004330:	0801452c 	.word	0x0801452c
 8004334:	08014550 	.word	0x08014550
 8004338:	0801455c 	.word	0x0801455c
 800433c:	080145a0 	.word	0x080145a0
 8004340:	08014560 	.word	0x08014560
 8004344:	08014580 	.word	0x08014580
 8004348:	08014584 	.word	0x08014584
 800434c:	080145a8 	.word	0x080145a8
 8004350:	080145f4 	.word	0x080145f4

08004354 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7b5b      	ldrb	r3, [r3, #13]
 8004360:	3b61      	subs	r3, #97	; 0x61
 8004362:	2b17      	cmp	r3, #23
 8004364:	f200 8268 	bhi.w	8004838 <process_user_input+0x4e4>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <process_user_input+0x1c>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	080045cf 	.word	0x080045cf
 8004374:	080043d1 	.word	0x080043d1
 8004378:	0800457b 	.word	0x0800457b
 800437c:	0800474d 	.word	0x0800474d
 8004380:	08004839 	.word	0x08004839
 8004384:	080044b5 	.word	0x080044b5
 8004388:	08004623 	.word	0x08004623
 800438c:	08004527 	.word	0x08004527
 8004390:	08004425 	.word	0x08004425
 8004394:	08004839 	.word	0x08004839
 8004398:	08004667 	.word	0x08004667
 800439c:	08004461 	.word	0x08004461
 80043a0:	08004443 	.word	0x08004443
 80043a4:	08004839 	.word	0x08004839
 80043a8:	08004839 	.word	0x08004839
 80043ac:	08004791 	.word	0x08004791
 80043b0:	08004839 	.word	0x08004839
 80043b4:	08004839 	.word	0x08004839
 80043b8:	08004839 	.word	0x08004839
 80043bc:	08004509 	.word	0x08004509
 80043c0:	08004839 	.word	0x08004839
 80043c4:	080047e5 	.word	0x080047e5
 80043c8:	08004839 	.word	0x08004839
 80043cc:	080046ab 	.word	0x080046ab
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f00a fd3d 	bl	800ee54 <atof>
 80043da:	ec53 2b10 	vmov	r2, r3, d0
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fc fc29 	bl	8000c38 <__aeabi_d2f>
 80043e6:	4603      	mov	r3, r0
 80043e8:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80046f0 <process_user_input+0x39c>
 80043ec:	ee00 3a10 	vmov	s0, r3
 80043f0:	f00f fadd 	bl	80139ae <fminf>
 80043f4:	eef0 7a40 	vmov.f32	s15, s0
 80043f8:	eddf 0abe 	vldr	s1, [pc, #760]	; 80046f4 <process_user_input+0x3a0>
 80043fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004400:	f00f faba 	bl	8013978 <fmaxf>
 8004404:	eef0 7a40 	vmov.f32	s15, s0
 8004408:	4bbb      	ldr	r3, [pc, #748]	; (80046f8 <process_user_input+0x3a4>)
 800440a:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 800440e:	4bba      	ldr	r3, [pc, #744]	; (80046f8 <process_user_input+0x3a4>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f8c0 	bl	8000598 <__aeabi_f2d>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	48b7      	ldr	r0, [pc, #732]	; (80046fc <process_user_input+0x3a8>)
 800441e:	f00b fbdb 	bl	800fbd8 <iprintf>
			 break;
 8004422:	e210      	b.n	8004846 <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f00a fd16 	bl	800ee5a <atoi>
 800442e:	4603      	mov	r3, r0
 8004430:	4ab3      	ldr	r2, [pc, #716]	; (8004700 <process_user_input+0x3ac>)
 8004432:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8004434:	4bb2      	ldr	r3, [pc, #712]	; (8004700 <process_user_input+0x3ac>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4619      	mov	r1, r3
 800443a:	48b2      	ldr	r0, [pc, #712]	; (8004704 <process_user_input+0x3b0>)
 800443c:	f00b fbcc 	bl	800fbd8 <iprintf>
			 break;
 8004440:	e201      	b.n	8004846 <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f00a fd07 	bl	800ee5a <atoi>
 800444c:	4603      	mov	r3, r0
 800444e:	4aac      	ldr	r2, [pc, #688]	; (8004700 <process_user_input+0x3ac>)
 8004450:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8004452:	4bab      	ldr	r3, [pc, #684]	; (8004700 <process_user_input+0x3ac>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4619      	mov	r1, r3
 8004458:	48ab      	ldr	r0, [pc, #684]	; (8004708 <process_user_input+0x3b4>)
 800445a:	f00b fbbd 	bl	800fbd8 <iprintf>
			 break;
 800445e:	e1f2      	b.n	8004846 <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f00a fcf5 	bl	800ee54 <atof>
 800446a:	ec53 2b10 	vmov	r2, r3, d0
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	f7fc fbe1 	bl	8000c38 <__aeabi_d2f>
 8004476:	4603      	mov	r3, r0
 8004478:	eddf 0aa4 	vldr	s1, [pc, #656]	; 800470c <process_user_input+0x3b8>
 800447c:	ee00 3a10 	vmov	s0, r3
 8004480:	f00f fa95 	bl	80139ae <fminf>
 8004484:	eef0 7a40 	vmov.f32	s15, s0
 8004488:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8004748 <process_user_input+0x3f4>
 800448c:	eeb0 0a67 	vmov.f32	s0, s15
 8004490:	f00f fa72 	bl	8013978 <fmaxf>
 8004494:	eef0 7a40 	vmov.f32	s15, s0
 8004498:	4b97      	ldr	r3, [pc, #604]	; (80046f8 <process_user_input+0x3a4>)
 800449a:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 800449e:	4b96      	ldr	r3, [pc, #600]	; (80046f8 <process_user_input+0x3a4>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc f878 	bl	8000598 <__aeabi_f2d>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4898      	ldr	r0, [pc, #608]	; (8004710 <process_user_input+0x3bc>)
 80044ae:	f00b fb93 	bl	800fbd8 <iprintf>
			 break;
 80044b2:	e1c8      	b.n	8004846 <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4618      	mov	r0, r3
 80044ba:	f00a fccb 	bl	800ee54 <atof>
 80044be:	ec53 2b10 	vmov	r2, r3, d0
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	f7fc fbb7 	bl	8000c38 <__aeabi_d2f>
 80044ca:	4603      	mov	r3, r0
 80044cc:	eddf 0a91 	vldr	s1, [pc, #580]	; 8004714 <process_user_input+0x3c0>
 80044d0:	ee00 3a10 	vmov	s0, r3
 80044d4:	f00f fa6b 	bl	80139ae <fminf>
 80044d8:	eef0 7a40 	vmov.f32	s15, s0
 80044dc:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8004748 <process_user_input+0x3f4>
 80044e0:	eeb0 0a67 	vmov.f32	s0, s15
 80044e4:	f00f fa48 	bl	8013978 <fmaxf>
 80044e8:	eef0 7a40 	vmov.f32	s15, s0
 80044ec:	4b82      	ldr	r3, [pc, #520]	; (80046f8 <process_user_input+0x3a4>)
 80044ee:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 80044f2:	4b81      	ldr	r3, [pc, #516]	; (80046f8 <process_user_input+0x3a4>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f84e 	bl	8000598 <__aeabi_f2d>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4885      	ldr	r0, [pc, #532]	; (8004718 <process_user_input+0x3c4>)
 8004502:	f00b fb69 	bl	800fbd8 <iprintf>
			 break;
 8004506:	e19e      	b.n	8004846 <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f00a fca4 	bl	800ee5a <atoi>
 8004512:	4603      	mov	r3, r0
 8004514:	4a7a      	ldr	r2, [pc, #488]	; (8004700 <process_user_input+0x3ac>)
 8004516:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8004518:	4b79      	ldr	r3, [pc, #484]	; (8004700 <process_user_input+0x3ac>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4619      	mov	r1, r3
 800451e:	487f      	ldr	r0, [pc, #508]	; (800471c <process_user_input+0x3c8>)
 8004520:	f00b fb5a 	bl	800fbd8 <iprintf>
			 break;
 8004524:	e18f      	b.n	8004846 <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f00a fc92 	bl	800ee54 <atof>
 8004530:	ec53 2b10 	vmov	r2, r3, d0
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	f7fc fb7e 	bl	8000c38 <__aeabi_d2f>
 800453c:	4603      	mov	r3, r0
 800453e:	eddf 0a78 	vldr	s1, [pc, #480]	; 8004720 <process_user_input+0x3cc>
 8004542:	ee00 3a10 	vmov	s0, r3
 8004546:	f00f fa32 	bl	80139ae <fminf>
 800454a:	eef0 7a40 	vmov.f32	s15, s0
 800454e:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8004748 <process_user_input+0x3f4>
 8004552:	eeb0 0a67 	vmov.f32	s0, s15
 8004556:	f00f fa0f 	bl	8013978 <fmaxf>
 800455a:	eef0 7a40 	vmov.f32	s15, s0
 800455e:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <process_user_input+0x3a4>)
 8004560:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8004564:	4b64      	ldr	r3, [pc, #400]	; (80046f8 <process_user_input+0x3a4>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fc f815 	bl	8000598 <__aeabi_f2d>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	486c      	ldr	r0, [pc, #432]	; (8004724 <process_user_input+0x3d0>)
 8004574:	f00b fb30 	bl	800fbd8 <iprintf>
			 break;
 8004578:	e165      	b.n	8004846 <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f00a fc68 	bl	800ee54 <atof>
 8004584:	ec53 2b10 	vmov	r2, r3, d0
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f7fc fb54 	bl	8000c38 <__aeabi_d2f>
 8004590:	4603      	mov	r3, r0
 8004592:	eddf 0a65 	vldr	s1, [pc, #404]	; 8004728 <process_user_input+0x3d4>
 8004596:	ee00 3a10 	vmov	s0, r3
 800459a:	f00f fa08 	bl	80139ae <fminf>
 800459e:	eef0 7a40 	vmov.f32	s15, s0
 80045a2:	eddf 0a69 	vldr	s1, [pc, #420]	; 8004748 <process_user_input+0x3f4>
 80045a6:	eeb0 0a67 	vmov.f32	s0, s15
 80045aa:	f00f f9e5 	bl	8013978 <fmaxf>
 80045ae:	eef0 7a40 	vmov.f32	s15, s0
 80045b2:	4b51      	ldr	r3, [pc, #324]	; (80046f8 <process_user_input+0x3a4>)
 80045b4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 80045b8:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <process_user_input+0x3a4>)
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ffeb 	bl	8000598 <__aeabi_f2d>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4859      	ldr	r0, [pc, #356]	; (800472c <process_user_input+0x3d8>)
 80045c8:	f00b fb06 	bl	800fbd8 <iprintf>
			 break;
 80045cc:	e13b      	b.n	8004846 <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f00a fc3e 	bl	800ee54 <atof>
 80045d8:	ec53 2b10 	vmov	r2, r3, d0
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	f7fc fb2a 	bl	8000c38 <__aeabi_d2f>
 80045e4:	4603      	mov	r3, r0
 80045e6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80045ea:	ee00 3a10 	vmov	s0, r3
 80045ee:	f00f f9de 	bl	80139ae <fminf>
 80045f2:	eef0 7a40 	vmov.f32	s15, s0
 80045f6:	eddf 0a54 	vldr	s1, [pc, #336]	; 8004748 <process_user_input+0x3f4>
 80045fa:	eeb0 0a67 	vmov.f32	s0, s15
 80045fe:	f00f f9bb 	bl	8013978 <fmaxf>
 8004602:	eef0 7a40 	vmov.f32	s15, s0
 8004606:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <process_user_input+0x3a4>)
 8004608:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 800460c:	4b3a      	ldr	r3, [pc, #232]	; (80046f8 <process_user_input+0x3a4>)
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ffc1 	bl	8000598 <__aeabi_f2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4845      	ldr	r0, [pc, #276]	; (8004730 <process_user_input+0x3dc>)
 800461c:	f00b fadc 	bl	800fbd8 <iprintf>
			 break;
 8004620:	e111      	b.n	8004846 <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f00a fc14 	bl	800ee54 <atof>
 800462c:	ec53 2b10 	vmov	r2, r3, d0
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	f7fc fb00 	bl	8000c38 <__aeabi_d2f>
 8004638:	4603      	mov	r3, r0
 800463a:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8004734 <process_user_input+0x3e0>
 800463e:	ee00 3a10 	vmov	s0, r3
 8004642:	f00f f999 	bl	8013978 <fmaxf>
 8004646:	eef0 7a40 	vmov.f32	s15, s0
 800464a:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <process_user_input+0x3a4>)
 800464c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <process_user_input+0x3a4>)
 8004652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004654:	4618      	mov	r0, r3
 8004656:	f7fb ff9f 	bl	8000598 <__aeabi_f2d>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4836      	ldr	r0, [pc, #216]	; (8004738 <process_user_input+0x3e4>)
 8004660:	f00b faba 	bl	800fbd8 <iprintf>
			 break;
 8004664:	e0ef      	b.n	8004846 <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f00a fbf2 	bl	800ee54 <atof>
 8004670:	ec53 2b10 	vmov	r2, r3, d0
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f7fc fade 	bl	8000c38 <__aeabi_d2f>
 800467c:	4603      	mov	r3, r0
 800467e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800473c <process_user_input+0x3e8>
 8004682:	ee00 3a10 	vmov	s0, r3
 8004686:	f00f f977 	bl	8013978 <fmaxf>
 800468a:	eef0 7a40 	vmov.f32	s15, s0
 800468e:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <process_user_input+0x3a4>)
 8004690:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <process_user_input+0x3a4>)
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	4618      	mov	r0, r3
 800469a:	f7fb ff7d 	bl	8000598 <__aeabi_f2d>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4827      	ldr	r0, [pc, #156]	; (8004740 <process_user_input+0x3ec>)
 80046a4:	f00b fa98 	bl	800fbd8 <iprintf>
			 break;
 80046a8:	e0cd      	b.n	8004846 <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f00a fbd0 	bl	800ee54 <atof>
 80046b4:	ec53 2b10 	vmov	r2, r3, d0
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	f7fc fabc 	bl	8000c38 <__aeabi_d2f>
 80046c0:	4603      	mov	r3, r0
 80046c2:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004748 <process_user_input+0x3f4>
 80046c6:	ee00 3a10 	vmov	s0, r3
 80046ca:	f00f f955 	bl	8013978 <fmaxf>
 80046ce:	eef0 7a40 	vmov.f32	s15, s0
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <process_user_input+0x3a4>)
 80046d4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <process_user_input+0x3a4>)
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fb ff5b 	bl	8000598 <__aeabi_f2d>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4817      	ldr	r0, [pc, #92]	; (8004744 <process_user_input+0x3f0>)
 80046e8:	f00b fa76 	bl	800fbd8 <iprintf>
			 break;
 80046ec:	e0ab      	b.n	8004846 <process_user_input+0x4f2>
 80046ee:	bf00      	nop
 80046f0:	44fa0000 	.word	0x44fa0000
 80046f4:	42c80000 	.word	0x42c80000
 80046f8:	20000624 	.word	0x20000624
 80046fc:	08014620 	.word	0x08014620
 8004700:	200006c4 	.word	0x200006c4
 8004704:	08014634 	.word	0x08014634
 8004708:	08014648 	.word	0x08014648
 800470c:	42700000 	.word	0x42700000
 8004710:	08014660 	.word	0x08014660
 8004714:	42040000 	.word	0x42040000
 8004718:	08014674 	.word	0x08014674
 800471c:	0801468c 	.word	0x0801468c
 8004720:	43160000 	.word	0x43160000
 8004724:	080146a4 	.word	0x080146a4
 8004728:	42200000 	.word	0x42200000
 800472c:	080146bc 	.word	0x080146bc
 8004730:	080146d4 	.word	0x080146d4
 8004734:	3a83126f 	.word	0x3a83126f
 8004738:	080146e8 	.word	0x080146e8
 800473c:	38d1b717 	.word	0x38d1b717
 8004740:	080146f8 	.word	0x080146f8
 8004744:	08014708 	.word	0x08014708
 8004748:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f00a fb7f 	bl	800ee54 <atof>
 8004756:	ec53 2b10 	vmov	r2, r3, d0
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	f7fc fa6b 	bl	8000c38 <__aeabi_d2f>
 8004762:	4603      	mov	r3, r0
 8004764:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004748 <process_user_input+0x3f4>
 8004768:	ee00 3a10 	vmov	s0, r3
 800476c:	f00f f904 	bl	8013978 <fmaxf>
 8004770:	eef0 7a40 	vmov.f32	s15, s0
 8004774:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <process_user_input+0x550>)
 8004776:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800477a:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <process_user_input+0x550>)
 800477c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477e:	4618      	mov	r0, r3
 8004780:	f7fb ff0a 	bl	8000598 <__aeabi_f2d>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4847      	ldr	r0, [pc, #284]	; (80048a8 <process_user_input+0x554>)
 800478a:	f00b fa25 	bl	800fbd8 <iprintf>
			 break;
 800478e:	e05a      	b.n	8004846 <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f00a fb5d 	bl	800ee54 <atof>
 800479a:	ec53 2b10 	vmov	r2, r3, d0
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	f7fc fa49 	bl	8000c38 <__aeabi_d2f>
 80047a6:	4603      	mov	r3, r0
 80047a8:	eddf 0a40 	vldr	s1, [pc, #256]	; 80048ac <process_user_input+0x558>
 80047ac:	ee00 3a10 	vmov	s0, r3
 80047b0:	f00f f8e2 	bl	8013978 <fmaxf>
 80047b4:	eef0 7a40 	vmov.f32	s15, s0
 80047b8:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <process_user_input+0x550>)
 80047ba:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <process_user_input+0x550>)
 80047c0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80047c4:	eef1 7a67 	vneg.f32	s15, s15
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <process_user_input+0x550>)
 80047ca:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 80047ce:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <process_user_input+0x550>)
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb fee0 	bl	8000598 <__aeabi_f2d>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4834      	ldr	r0, [pc, #208]	; (80048b0 <process_user_input+0x55c>)
 80047de:	f00b f9fb 	bl	800fbd8 <iprintf>
			 break;
 80047e2:	e030      	b.n	8004846 <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f00a fb33 	bl	800ee54 <atof>
 80047ee:	ec53 2b10 	vmov	r2, r3, d0
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	f7fc fa1f 	bl	8000c38 <__aeabi_d2f>
 80047fa:	4603      	mov	r3, r0
 80047fc:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80048ac <process_user_input+0x558>
 8004800:	ee00 3a10 	vmov	s0, r3
 8004804:	f00f f8b8 	bl	8013978 <fmaxf>
 8004808:	eef0 7a40 	vmov.f32	s15, s0
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <process_user_input+0x550>)
 800480e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <process_user_input+0x550>)
 8004814:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004818:	eef1 7a67 	vneg.f32	s15, s15
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <process_user_input+0x550>)
 800481e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <process_user_input+0x550>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb feb6 	bl	8000598 <__aeabi_f2d>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4820      	ldr	r0, [pc, #128]	; (80048b4 <process_user_input+0x560>)
 8004832:	f00b f9d1 	bl	800fbd8 <iprintf>
			 break;
 8004836:	e006      	b.n	8004846 <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	481e      	ldr	r0, [pc, #120]	; (80048b8 <process_user_input+0x564>)
 8004840:	f00b f9ca 	bl	800fbd8 <iprintf>
			 break;
 8004844:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <process_user_input+0x568>)
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	9200      	str	r2, [sp, #0]
 800484c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800484e:	f001 faa9 	bl	8005da4 <preference_writer_ready>
 8004852:	4603      	mov	r3, r0
 8004854:	f083 0301 	eor.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <process_user_input+0x510>
 800485e:	4817      	ldr	r0, [pc, #92]	; (80048bc <process_user_input+0x568>)
 8004860:	f001 fa91 	bl	8005d86 <preference_writer_open>
	 preference_writer_flush(&prefs);
 8004864:	4815      	ldr	r0, [pc, #84]	; (80048bc <process_user_input+0x568>)
 8004866:	f001 faab 	bl	8005dc0 <preference_writer_flush>
	 preference_writer_close(&prefs);
 800486a:	4814      	ldr	r0, [pc, #80]	; (80048bc <process_user_input+0x568>)
 800486c:	f001 fb22 	bl	8005eb4 <preference_writer_close>
	 preference_writer_load(prefs);
 8004870:	4b12      	ldr	r3, [pc, #72]	; (80048bc <process_user_input+0x568>)
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	9200      	str	r2, [sp, #0]
 8004876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004878:	f001 fadc 	bl	8005e34 <preference_writer_load>

	 enter_setup_state();
 800487c:	f7ff fbf4 	bl	8004068 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2208      	movs	r2, #8
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f00a fb1d 	bl	800eed4 <memset>
 }
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000624 	.word	0x20000624
 80048a8:	0801471c 	.word	0x0801471c
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08014730 	.word	0x08014730
 80048b4:	08014744 	.word	0x08014744
 80048b8:	08014758 	.word	0x08014758
 80048bc:	200006ec 	.word	0x200006ec

080048c0 <MX_GPIO_Init>:

/** Configure pins
     PA4   ------> COMP_DAC11_group
*/
void MX_GPIO_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c6:	f107 0314 	add.w	r3, r7, #20
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d6:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <MX_GPIO_Init+0x180>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	4a59      	ldr	r2, [pc, #356]	; (8004a40 <MX_GPIO_Init+0x180>)
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048e2:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <MX_GPIO_Init+0x180>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048ee:	4b54      	ldr	r3, [pc, #336]	; (8004a40 <MX_GPIO_Init+0x180>)
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	4a53      	ldr	r2, [pc, #332]	; (8004a40 <MX_GPIO_Init+0x180>)
 80048f4:	f043 0320 	orr.w	r3, r3, #32
 80048f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048fa:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <MX_GPIO_Init+0x180>)
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	4b4e      	ldr	r3, [pc, #312]	; (8004a40 <MX_GPIO_Init+0x180>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	4a4d      	ldr	r2, [pc, #308]	; (8004a40 <MX_GPIO_Init+0x180>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004912:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <MX_GPIO_Init+0x180>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800491e:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <MX_GPIO_Init+0x180>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	4a47      	ldr	r2, [pc, #284]	; (8004a40 <MX_GPIO_Init+0x180>)
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800492a:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <MX_GPIO_Init+0x180>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 8004936:	2200      	movs	r2, #0
 8004938:	f24c 0110 	movw	r1, #49168	; 0xc010
 800493c:	4841      	ldr	r0, [pc, #260]	; (8004a44 <MX_GPIO_Init+0x184>)
 800493e:	f005 fa23 	bl	8009d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004942:	2200      	movs	r2, #0
 8004944:	2103      	movs	r1, #3
 8004946:	4840      	ldr	r0, [pc, #256]	; (8004a48 <MX_GPIO_Init+0x188>)
 8004948:	f005 fa1e 	bl	8009d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800494c:	2201      	movs	r2, #1
 800494e:	2108      	movs	r1, #8
 8004950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004954:	f005 fa18 	bl	8009d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 8004958:	2200      	movs	r2, #0
 800495a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800495e:	483b      	ldr	r0, [pc, #236]	; (8004a4c <MX_GPIO_Init+0x18c>)
 8004960:	f005 fa12 	bl	8009d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 8004964:	f24c 0310 	movw	r3, #49168	; 0xc010
 8004968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800496a:	2301      	movs	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004972:	2300      	movs	r3, #0
 8004974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	4619      	mov	r1, r3
 800497c:	4831      	ldr	r0, [pc, #196]	; (8004a44 <MX_GPIO_Init+0x184>)
 800497e:	f005 f881 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004982:	2303      	movs	r3, #3
 8004984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004986:	2301      	movs	r3, #1
 8004988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498e:	2300      	movs	r3, #0
 8004990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004992:	f107 0314 	add.w	r3, r7, #20
 8004996:	4619      	mov	r1, r3
 8004998:	482b      	ldr	r0, [pc, #172]	; (8004a48 <MX_GPIO_Init+0x188>)
 800499a:	f005 f873 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800499e:	2308      	movs	r3, #8
 80049a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a6:	2301      	movs	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049aa:	2303      	movs	r3, #3
 80049ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049b8:	f005 f864 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80049bc:	2310      	movs	r3, #16
 80049be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049c0:	2303      	movs	r3, #3
 80049c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4619      	mov	r1, r3
 80049ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049d2:	f005 f857 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049dc:	2301      	movs	r3, #1
 80049de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e4:	2300      	movs	r3, #0
 80049e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4619      	mov	r1, r3
 80049ee:	4817      	ldr	r0, [pc, #92]	; (8004a4c <MX_GPIO_Init+0x18c>)
 80049f0:	f005 f848 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80049f4:	2370      	movs	r3, #112	; 0x70
 80049f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a00:	f107 0314 	add.w	r3, r7, #20
 8004a04:	4619      	mov	r1, r3
 8004a06:	4811      	ldr	r0, [pc, #68]	; (8004a4c <MX_GPIO_Init+0x18c>)
 8004a08:	f005 f83c 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4619      	mov	r1, r3
 8004a24:	4809      	ldr	r0, [pc, #36]	; (8004a4c <MX_GPIO_Init+0x18c>)
 8004a26:	f005 f82d 	bl	8009a84 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_GPIO_Init+0x190>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <MX_GPIO_Init+0x190>)
 8004a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a34:	6053      	str	r3, [r2, #4]

}
 8004a36:	bf00      	nop
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	48000800 	.word	0x48000800
 8004a48:	48001400 	.word	0x48001400
 8004a4c:	48000400 	.word	0x48000400
 8004a50:	40010000 	.word	0x40010000

08004a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a5a:	f001 ff2e 	bl	80068ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a5e:	f000 fc45 	bl	80052ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a62:	f7ff ff2d 	bl	80048c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a66:	f7fd fb27 	bl	80020b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004a6a:	f7fc faed 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004a6e:	f7fc fb63 	bl	8001138 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004a72:	f7fc fbc7 	bl	8001204 <MX_ADC3_Init>
  MX_ADC5_Init();
 8004a76:	f7fc fca3 	bl	80013c0 <MX_ADC5_Init>
  MX_SPI1_Init();
 8004a7a:	f001 fa2b 	bl	8005ed4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004a7e:	f001 fa67 	bl	8005f50 <MX_SPI2_Init>
  MX_TIM2_Init();
 8004a82:	f001 fd3b 	bl	80064fc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8004a86:	f001 fe1d 	bl	80066c4 <MX_USART3_UART_Init>
  MX_ADC4_Init();
 8004a8a:	f7fc fc33 	bl	80012f4 <MX_ADC4_Init>
  MX_FDCAN1_Init();
 8004a8e:	f7fd fdb7 	bl	8002600 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 0);
 8004a92:	2100      	movs	r1, #0
 8004a94:	48ad      	ldr	r0, [pc, #692]	; (8004d4c <main+0x2f8>)
 8004a96:	f001 f965 	bl	8005d64 <preference_writer_init>
  preference_writer_load(prefs);
 8004a9a:	4bac      	ldr	r3, [pc, #688]	; (8004d4c <main+0x2f8>)
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	9200      	str	r2, [sp, #0]
 8004aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aa2:	f001 f9c7 	bl	8005e34 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 8004aa6:	4baa      	ldr	r3, [pc, #680]	; (8004d50 <main+0x2fc>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d102      	bne.n	8004ab6 <main+0x62>
 8004ab0:	4ba7      	ldr	r3, [pc, #668]	; (8004d50 <main+0x2fc>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8004ab6:	4ba6      	ldr	r3, [pc, #664]	; (8004d50 <main+0x2fc>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d102      	bne.n	8004ac6 <main+0x72>
 8004ac0:	4ba3      	ldr	r3, [pc, #652]	; (8004d50 <main+0x2fc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004ac6:	4ba3      	ldr	r3, [pc, #652]	; (8004d54 <main+0x300>)
 8004ac8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004acc:	eef4 7a67 	vcmp.f32	s15, s15
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	d609      	bvs.n	8004aea <main+0x96>
 8004ad6:	4b9f      	ldr	r3, [pc, #636]	; (8004d54 <main+0x300>)
 8004ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004adc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ae0:	eef4 7a47 	vcmp.f32	s15, s14
 8004ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae8:	d102      	bne.n	8004af0 <main+0x9c>
 8004aea:	4b9a      	ldr	r3, [pc, #616]	; (8004d54 <main+0x300>)
 8004aec:	4a9a      	ldr	r2, [pc, #616]	; (8004d58 <main+0x304>)
 8004aee:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004af0:	4b98      	ldr	r3, [pc, #608]	; (8004d54 <main+0x300>)
 8004af2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004af6:	eef4 7a67 	vcmp.f32	s15, s15
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	d609      	bvs.n	8004b14 <main+0xc0>
 8004b00:	4b94      	ldr	r3, [pc, #592]	; (8004d54 <main+0x300>)
 8004b02:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b0a:	eef4 7a47 	vcmp.f32	s15, s14
 8004b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b12:	d102      	bne.n	8004b1a <main+0xc6>
 8004b14:	4b8f      	ldr	r3, [pc, #572]	; (8004d54 <main+0x300>)
 8004b16:	4a91      	ldr	r2, [pc, #580]	; (8004d5c <main+0x308>)
 8004b18:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004b1a:	4b8e      	ldr	r3, [pc, #568]	; (8004d54 <main+0x300>)
 8004b1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b20:	eef4 7a67 	vcmp.f32	s15, s15
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	d609      	bvs.n	8004b3e <main+0xea>
 8004b2a:	4b8a      	ldr	r3, [pc, #552]	; (8004d54 <main+0x300>)
 8004b2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b30:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b34:	eef4 7a47 	vcmp.f32	s15, s14
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d103      	bne.n	8004b46 <main+0xf2>
 8004b3e:	4b85      	ldr	r3, [pc, #532]	; (8004d54 <main+0x300>)
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004b46:	4b82      	ldr	r3, [pc, #520]	; (8004d50 <main+0x2fc>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d102      	bne.n	8004b56 <main+0x102>
 8004b50:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <main+0x2fc>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004b56:	4b7e      	ldr	r3, [pc, #504]	; (8004d50 <main+0x2fc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d102      	bne.n	8004b66 <main+0x112>
 8004b60:	4b7b      	ldr	r3, [pc, #492]	; (8004d50 <main+0x2fc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004b66:	4b7a      	ldr	r3, [pc, #488]	; (8004d50 <main+0x2fc>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d103      	bne.n	8004b78 <main+0x124>
 8004b70:	4b77      	ldr	r3, [pc, #476]	; (8004d50 <main+0x2fc>)
 8004b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b76:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004b78:	4b76      	ldr	r3, [pc, #472]	; (8004d54 <main+0x300>)
 8004b7a:	edd3 7a07 	vldr	s15, [r3, #28]
 8004b7e:	eef4 7a67 	vcmp.f32	s15, s15
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d609      	bvs.n	8004b9c <main+0x148>
 8004b88:	4b72      	ldr	r3, [pc, #456]	; (8004d54 <main+0x300>)
 8004b8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8004b8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b92:	eef4 7a47 	vcmp.f32	s15, s14
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	d103      	bne.n	8004ba4 <main+0x150>
 8004b9c:	4b6d      	ldr	r3, [pc, #436]	; (8004d54 <main+0x300>)
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004ba4:	4b6b      	ldr	r3, [pc, #428]	; (8004d54 <main+0x300>)
 8004ba6:	edd3 7a08 	vldr	s15, [r3, #32]
 8004baa:	eef4 7a67 	vcmp.f32	s15, s15
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	d609      	bvs.n	8004bc8 <main+0x174>
 8004bb4:	4b67      	ldr	r3, [pc, #412]	; (8004d54 <main+0x300>)
 8004bb6:	edd3 7a08 	vldr	s15, [r3, #32]
 8004bba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004bbe:	eef4 7a47 	vcmp.f32	s15, s14
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	d102      	bne.n	8004bce <main+0x17a>
 8004bc8:	4b62      	ldr	r3, [pc, #392]	; (8004d54 <main+0x300>)
 8004bca:	4a65      	ldr	r2, [pc, #404]	; (8004d60 <main+0x30c>)
 8004bcc:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004bce:	4b61      	ldr	r3, [pc, #388]	; (8004d54 <main+0x300>)
 8004bd0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004bd4:	eef4 7a67 	vcmp.f32	s15, s15
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	d609      	bvs.n	8004bf2 <main+0x19e>
 8004bde:	4b5d      	ldr	r3, [pc, #372]	; (8004d54 <main+0x300>)
 8004be0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004be4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004be8:	eef4 7a47 	vcmp.f32	s15, s14
 8004bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf0:	d102      	bne.n	8004bf8 <main+0x1a4>
 8004bf2:	4b58      	ldr	r3, [pc, #352]	; (8004d54 <main+0x300>)
 8004bf4:	4a5b      	ldr	r2, [pc, #364]	; (8004d64 <main+0x310>)
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004bf8:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <main+0x300>)
 8004bfa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004bfe:	eef4 7a67 	vcmp.f32	s15, s15
 8004c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c06:	d609      	bvs.n	8004c1c <main+0x1c8>
 8004c08:	4b52      	ldr	r3, [pc, #328]	; (8004d54 <main+0x300>)
 8004c0a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004c0e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c12:	eef4 7a47 	vcmp.f32	s15, s14
 8004c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1a:	d102      	bne.n	8004c22 <main+0x1ce>
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <main+0x300>)
 8004c1e:	4a52      	ldr	r2, [pc, #328]	; (8004d68 <main+0x314>)
 8004c20:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 14.0f;}
 8004c22:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <main+0x300>)
 8004c24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004c28:	eef4 7a67 	vcmp.f32	s15, s15
 8004c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c30:	d609      	bvs.n	8004c46 <main+0x1f2>
 8004c32:	4b48      	ldr	r3, [pc, #288]	; (8004d54 <main+0x300>)
 8004c34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004c38:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c3c:	eef4 7a47 	vcmp.f32	s15, s14
 8004c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c44:	d102      	bne.n	8004c4c <main+0x1f8>
 8004c46:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <main+0x300>)
 8004c48:	4a46      	ldr	r2, [pc, #280]	; (8004d64 <main+0x310>)
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <main+0x300>)
 8004c4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004c52:	eef4 7a67 	vcmp.f32	s15, s15
 8004c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5a:	d609      	bvs.n	8004c70 <main+0x21c>
 8004c5c:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <main+0x300>)
 8004c5e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004c62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c66:	eef4 7a47 	vcmp.f32	s15, s14
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	d103      	bne.n	8004c78 <main+0x224>
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <main+0x300>)
 8004c72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004c76:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <main+0x300>)
 8004c7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004c7e:	eef4 7a67 	vcmp.f32	s15, s15
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d609      	bvs.n	8004c9c <main+0x248>
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <main+0x300>)
 8004c8a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004c8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c92:	eef4 7a47 	vcmp.f32	s15, s14
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	d103      	bne.n	8004ca4 <main+0x250>
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <main+0x300>)
 8004c9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <main+0x300>)
 8004ca6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004caa:	eef4 7a67 	vcmp.f32	s15, s15
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	d609      	bvs.n	8004cc8 <main+0x274>
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <main+0x300>)
 8004cb6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004cba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cbe:	eef4 7a47 	vcmp.f32	s15, s14
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	d102      	bne.n	8004cce <main+0x27a>
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <main+0x300>)
 8004cca:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <main+0x318>)
 8004ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <main+0x300>)
 8004cd0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004cd4:	eef4 7a67 	vcmp.f32	s15, s15
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	d609      	bvs.n	8004cf2 <main+0x29e>
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <main+0x300>)
 8004ce0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004ce4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ce8:	eef4 7a47 	vcmp.f32	s15, s14
 8004cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf0:	d102      	bne.n	8004cf8 <main+0x2a4>
 8004cf2:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <main+0x300>)
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <main+0x314>)
 8004cf6:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004cf8:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <main+0x300>)
 8004cfa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004cfe:	eef4 7a67 	vcmp.f32	s15, s15
 8004d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d06:	d702      	bvc.n	8004d0e <main+0x2ba>
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <main+0x300>)
 8004d0a:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <main+0x31c>)
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <main+0x300>)
 8004d10:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004d14:	eef4 7a67 	vcmp.f32	s15, s15
 8004d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1c:	d702      	bvc.n	8004d24 <main+0x2d0>
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <main+0x300>)
 8004d20:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <main+0x320>)
 8004d22:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <main+0x300>)
 8004d26:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004d2a:	eef4 7a67 	vcmp.f32	s15, s15
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	d702      	bvc.n	8004d3a <main+0x2e6>
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <main+0x300>)
 8004d36:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <main+0x324>)
 8004d38:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <main+0x300>)
 8004d3c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004d40:	eef4 7a67 	vcmp.f32	s15, s15
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	d71b      	bvc.n	8004d82 <main+0x32e>
 8004d4a:	e017      	b.n	8004d7c <main+0x328>
 8004d4c:	200006ec 	.word	0x200006ec
 8004d50:	200006c4 	.word	0x200006c4
 8004d54:	20000624 	.word	0x20000624
 8004d58:	447a0000 	.word	0x447a0000
 8004d5c:	42200000 	.word	0x42200000
 8004d60:	42fa0000 	.word	0x42fa0000
 8004d64:	41600000 	.word	0x41600000
 8004d68:	40a00000 	.word	0x40a00000
 8004d6c:	43fa0000 	.word	0x43fa0000
 8004d70:	41480000 	.word	0x41480000
 8004d74:	c1480000 	.word	0xc1480000
 8004d78:	42820000 	.word	0x42820000
 8004d7c:	4baf      	ldr	r3, [pc, #700]	; (800503c <main+0x5e8>)
 8004d7e:	4ab0      	ldr	r2, [pc, #704]	; (8005040 <main+0x5ec>)
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\n", VERSION_NUM);
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d8a:	48ae      	ldr	r0, [pc, #696]	; (8005044 <main+0x5f0>)
 8004d8c:	f00a ff24 	bl	800fbd8 <iprintf>
  printf("\r\nPorted to STM32G4 by RoboDesign Lab UIUC\r\n\n");
 8004d90:	48ad      	ldr	r0, [pc, #692]	; (8005048 <main+0x5f4>)
 8004d92:	f00a ffa7 	bl	800fce4 <puts>
  }
  else{

  }

  init_controller_params(&controller);
 8004d96:	48ad      	ldr	r0, [pc, #692]	; (800504c <main+0x5f8>)
 8004d98:	f7fe fa88 	bl	80032ac <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004d9c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004da0:	2100      	movs	r1, #0
 8004da2:	48ab      	ldr	r0, [pc, #684]	; (8005050 <main+0x5fc>)
 8004da4:	f00a f896 	bl	800eed4 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004da8:	4baa      	ldr	r3, [pc, #680]	; (8005054 <main+0x600>)
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	4aaa      	ldr	r2, [pc, #680]	; (8005058 <main+0x604>)
 8004dae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004db2:	4ba8      	ldr	r3, [pc, #672]	; (8005054 <main+0x600>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	4aa8      	ldr	r2, [pc, #672]	; (8005058 <main+0x604>)
 8004db8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  PPAIRS = 14.0f; //JB
 8004dbc:	4b9f      	ldr	r3, [pc, #636]	; (800503c <main+0x5e8>)
 8004dbe:	4aa7      	ldr	r2, [pc, #668]	; (800505c <main+0x608>)
 8004dc0:	629a      	str	r2, [r3, #40]	; 0x28
  comm_encoder.ppairs = PPAIRS;
 8004dc2:	4b9e      	ldr	r3, [pc, #632]	; (800503c <main+0x5e8>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	4aa4      	ldr	r2, [pc, #656]	; (8005058 <main+0x604>)
 8004dc8:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004dca:	2164      	movs	r1, #100	; 0x64
 8004dcc:	48a2      	ldr	r0, [pc, #648]	; (8005058 <main+0x604>)
 8004dce:	f000 fdb3 	bl	8005938 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd6:	49a2      	ldr	r1, [pc, #648]	; (8005060 <main+0x60c>)
 8004dd8:	48a2      	ldr	r0, [pc, #648]	; (8005064 <main+0x610>)
 8004dda:	f00a f86d 	bl	800eeb8 <memcpy>
//  HAL_ADC_Start(&hadc2);
//  HAL_ADC_Start(&hadc3);
//  HAL_ADC_Start(&hadc4);//JB

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004dde:	2201      	movs	r2, #1
 8004de0:	2110      	movs	r1, #16
 8004de2:	48a1      	ldr	r0, [pc, #644]	; (8005068 <main+0x614>)
 8004de4:	f004 ffd0 	bl	8009d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004de8:	2201      	movs	r2, #1
 8004dea:	2108      	movs	r1, #8
 8004dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004df0:	f004 ffca 	bl	8009d88 <HAL_GPIO_WritePin>
 //drv_enable_gd(drv);


  //=======================================================================================================================================
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004df4:	2001      	movs	r0, #1
 8004df6:	f001 fdd1 	bl	800699c <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004dfa:	499c      	ldr	r1, [pc, #624]	; (800506c <main+0x618>)
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	9306      	str	r3, [sp, #24]
 8004e00:	2300      	movs	r3, #0
 8004e02:	9305      	str	r3, [sp, #20]
 8004e04:	2300      	movs	r3, #0
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9303      	str	r3, [sp, #12]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	2301      	movs	r3, #1
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	2300      	movs	r3, #0
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	c903      	ldmia	r1, {r0, r1}
 8004e1e:	f7fd fa14 	bl	800224a <drv_write_DCR>
  HAL_Delay(1);
 8004e22:	2001      	movs	r0, #1
 8004e24:	f001 fdba 	bl	800699c <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x1, 0x0, 0x1);
 8004e28:	4990      	ldr	r1, [pc, #576]	; (800506c <main+0x618>)
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	9306      	str	r3, [sp, #24]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9305      	str	r3, [sp, #20]
 8004e32:	2301      	movs	r3, #1
 8004e34:	9304      	str	r3, [sp, #16]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2301      	movs	r3, #1
 8004e48:	2200      	movs	r2, #0
 8004e4a:	c903      	ldmia	r1, {r0, r1}
 8004e4c:	f7fd f9fd 	bl	800224a <drv_write_DCR>
  HAL_Delay(1);
 8004e50:	2001      	movs	r0, #1
 8004e52:	f001 fda3 	bl	800699c <HAL_Delay>

  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);   // calibrate shunt amplifiers
 8004e56:	4985      	ldr	r1, [pc, #532]	; (800506c <main+0x618>)
 8004e58:	2303      	movs	r3, #3
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	2301      	movs	r3, #1
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	2301      	movs	r3, #1
 8004e66:	9303      	str	r3, [sp, #12]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9302      	str	r3, [sp, #8]
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	2300      	movs	r3, #0
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2301      	movs	r3, #1
 8004e76:	2200      	movs	r2, #0
 8004e78:	c903      	ldmia	r1, {r0, r1}
 8004e7a:	f7fd fa56 	bl	800232a <drv_write_CSACR>
  HAL_Delay(1);
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f001 fd8c 	bl	800699c <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004e84:	4979      	ldr	r1, [pc, #484]	; (800506c <main+0x618>)
 8004e86:	2303      	movs	r3, #3
 8004e88:	9306      	str	r3, [sp, #24]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9304      	str	r3, [sp, #16]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9303      	str	r3, [sp, #12]
 8004e96:	2301      	movs	r3, #1
 8004e98:	9302      	str	r3, [sp, #8]
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	c903      	ldmia	r1, {r0, r1}
 8004ea8:	f7fd fa3f 	bl	800232a <drv_write_CSACR>
  HAL_Delay(1);
 8004eac:	2001      	movs	r0, #1
 8004eae:	f001 fd75 	bl	800699c <HAL_Delay>
  zero_current(&controller);
 8004eb2:	4866      	ldr	r0, [pc, #408]	; (800504c <main+0x5f8>)
 8004eb4:	f7fe f9b6 	bl	8003224 <zero_current>
  HAL_Delay(1);
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f001 fd6f 	bl	800699c <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_NONE, OCP_DEG_8US, VDS_LVL_1_88);
 8004ebe:	496b      	ldr	r1, [pc, #428]	; (800506c <main+0x618>)
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	2303      	movs	r3, #3
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2201      	movs	r2, #1
 8004ed0:	c903      	ldmia	r1, {r0, r1}
 8004ed2:	f7fd f9fc 	bl	80022ce <drv_write_OCPCR>
  HAL_Delay(1);
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f001 fd60 	bl	800699c <HAL_Delay>

  HAL_Delay(1);
 8004edc:	2001      	movs	r0, #1
 8004ede:	f001 fd5d 	bl	800699c <HAL_Delay>
  drv_disable_gd(drv);
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <main+0x618>)
 8004ee4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ee8:	f7fd fa7b 	bl	80023e2 <drv_disable_gd>
  HAL_Delay(1);
 8004eec:	2001      	movs	r0, #1
 8004eee:	f001 fd55 	bl	800699c <HAL_Delay>


  ADC1->CR &= ~ADC_CR_DEEPPWD;
 8004ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004efc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f00:	6093      	str	r3, [r2, #8]
  ADC2->CR &= ~ADC_CR_DEEPPWD;
 8004f02:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <main+0x61c>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	4a5a      	ldr	r2, [pc, #360]	; (8005070 <main+0x61c>)
 8004f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	6093      	str	r3, [r2, #8]
  ADC3->CR &= ~ADC_CR_DEEPPWD;
 8004f0e:	4b59      	ldr	r3, [pc, #356]	; (8005074 <main+0x620>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4a58      	ldr	r2, [pc, #352]	; (8005074 <main+0x620>)
 8004f14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f18:	6093      	str	r3, [r2, #8]
  ADC4->CR &= ~ADC_CR_DEEPPWD;
 8004f1a:	4b57      	ldr	r3, [pc, #348]	; (8005078 <main+0x624>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4a56      	ldr	r2, [pc, #344]	; (8005078 <main+0x624>)
 8004f20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f24:	6093      	str	r3, [r2, #8]

  ADC1->CR |= ADC_CR_ADVREGEN;
 8004f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6093      	str	r3, [r2, #8]
  ADC2->CR |= ADC_CR_ADVREGEN;
 8004f36:	4b4e      	ldr	r3, [pc, #312]	; (8005070 <main+0x61c>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	4a4d      	ldr	r2, [pc, #308]	; (8005070 <main+0x61c>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6093      	str	r3, [r2, #8]
  ADC3->CR |= ADC_CR_ADVREGEN;
 8004f42:	4b4c      	ldr	r3, [pc, #304]	; (8005074 <main+0x620>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	4a4b      	ldr	r2, [pc, #300]	; (8005074 <main+0x620>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6093      	str	r3, [r2, #8]
  ADC4->CR |= ADC_CR_ADVREGEN;
 8004f4e:	4b4a      	ldr	r3, [pc, #296]	; (8005078 <main+0x624>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4a49      	ldr	r2, [pc, #292]	; (8005078 <main+0x624>)
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f001 fd1e 	bl	800699c <HAL_Delay>

  ADC1->CR |= ADC_CR_ADCAL;
 8004f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004f6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f6e:	6093      	str	r3, [r2, #8]
  ADC2->CR |= ADC_CR_ADCAL;
 8004f70:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <main+0x61c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a3e      	ldr	r2, [pc, #248]	; (8005070 <main+0x61c>)
 8004f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	6093      	str	r3, [r2, #8]
  ADC3->CR |= ADC_CR_ADCAL;
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <main+0x620>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4a3c      	ldr	r2, [pc, #240]	; (8005074 <main+0x620>)
 8004f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f86:	6093      	str	r3, [r2, #8]
  ADC4->CR |= ADC_CR_ADCAL;
 8004f88:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <main+0x624>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <main+0x624>)
 8004f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f92:	6093      	str	r3, [r2, #8]

  while ((ADC1->CR & ADC_CR_ADCAL) ||
 8004f94:	bf00      	nop
 8004f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dbfa      	blt.n	8004f96 <main+0x542>
		  (ADC2->CR & ADC_CR_ADCAL) ||
 8004fa0:	4b33      	ldr	r3, [pc, #204]	; (8005070 <main+0x61c>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
  while ((ADC1->CR & ADC_CR_ADCAL) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dbf6      	blt.n	8004f96 <main+0x542>
		  (ADC3->CR & ADC_CR_ADCAL) ||
 8004fa8:	4b32      	ldr	r3, [pc, #200]	; (8005074 <main+0x620>)
 8004faa:	689b      	ldr	r3, [r3, #8]
		  (ADC2->CR & ADC_CR_ADCAL) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dbf2      	blt.n	8004f96 <main+0x542>
		  (ADC4->CR & ADC_CR_ADCAL));
 8004fb0:	4b31      	ldr	r3, [pc, #196]	; (8005078 <main+0x624>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
		  (ADC3->CR & ADC_CR_ADCAL) ||
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dbee      	blt.n	8004f96 <main+0x542>

  HAL_Delay(1);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f001 fcef 	bl	800699c <HAL_Delay>

  ADC1->ISR |= ADC_ISR_ADRDY;
 8004fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6013      	str	r3, [r2, #0]
  ADC2->ISR |= ADC_ISR_ADRDY;
 8004fce:	4b28      	ldr	r3, [pc, #160]	; (8005070 <main+0x61c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a27      	ldr	r2, [pc, #156]	; (8005070 <main+0x61c>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	6013      	str	r3, [r2, #0]
  ADC3->ISR |= ADC_ISR_ADRDY;
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <main+0x620>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a25      	ldr	r2, [pc, #148]	; (8005074 <main+0x620>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6013      	str	r3, [r2, #0]
  ADC4->ISR |= ADC_ISR_ADRDY;
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <main+0x624>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a23      	ldr	r2, [pc, #140]	; (8005078 <main+0x624>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6013      	str	r3, [r2, #0]

  ADC1->CR |= ADC_CR_ADEN;
 8004ff2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6093      	str	r3, [r2, #8]
  ADC2->CR |= ADC_CR_ADEN;
 8005002:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <main+0x61c>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <main+0x61c>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6093      	str	r3, [r2, #8]
  ADC3->CR |= ADC_CR_ADEN;
 800500e:	4b19      	ldr	r3, [pc, #100]	; (8005074 <main+0x620>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	4a18      	ldr	r2, [pc, #96]	; (8005074 <main+0x620>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6093      	str	r3, [r2, #8]
  ADC4->CR |= ADC_CR_ADEN;
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <main+0x624>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4a16      	ldr	r2, [pc, #88]	; (8005078 <main+0x624>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6093      	str	r3, [r2, #8]

  while (!(ADC1->ISR & ADC_ISR_ADRDY) ||
 8005026:	bf00      	nop
 8005028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f8      	beq.n	8005028 <main+0x5d4>
		  !(ADC2->ISR & ADC_ISR_ADRDY) ||
 8005036:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <main+0x61c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	e01f      	b.n	800507c <main+0x628>
 800503c:	20000624 	.word	0x20000624
 8005040:	c2820000 	.word	0xc2820000
 8005044:	08014780 	.word	0x08014780
 8005048:	080147a4 	.word	0x080147a4
 800504c:	20000700 	.word	0x20000700
 8005050:	20008f1c 	.word	0x20008f1c
 8005054:	200006c4 	.word	0x200006c4
 8005058:	20000a08 	.word	0x20000a08
 800505c:	41600000 	.word	0x41600000
 8005060:	200006dc 	.word	0x200006dc
 8005064:	20000ae4 	.word	0x20000ae4
 8005068:	48000800 	.word	0x48000800
 800506c:	20000ce8 	.word	0x20000ce8
 8005070:	50000100 	.word	0x50000100
 8005074:	50000400 	.word	0x50000400
 8005078:	50000500 	.word	0x50000500
 800507c:	f003 0301 	and.w	r3, r3, #1
  while (!(ADC1->ISR & ADC_ISR_ADRDY) ||
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0d1      	beq.n	8005028 <main+0x5d4>
		  !(ADC3->ISR & ADC_ISR_ADRDY) ||
 8005084:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <main+0x85c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
		  !(ADC2->ISR & ADC_ISR_ADRDY) ||
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0cb      	beq.n	8005028 <main+0x5d4>
		  !(ADC4->ISR & ADC_ISR_ADRDY));
 8005090:	4b88      	ldr	r3, [pc, #544]	; (80052b4 <main+0x860>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
		  !(ADC3->ISR & ADC_ISR_ADRDY) ||
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0c5      	beq.n	8005028 <main+0x5d4>

  ADC1->ISR |= ADC_ISR_ADRDY;
 800509c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	6013      	str	r3, [r2, #0]
  ADC2->ISR |= ADC_ISR_ADRDY;
 80050ac:	4b82      	ldr	r3, [pc, #520]	; (80052b8 <main+0x864>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a81      	ldr	r2, [pc, #516]	; (80052b8 <main+0x864>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6013      	str	r3, [r2, #0]
  ADC3->ISR |= ADC_ISR_ADRDY;
 80050b8:	4b7d      	ldr	r3, [pc, #500]	; (80052b0 <main+0x85c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7c      	ldr	r2, [pc, #496]	; (80052b0 <main+0x85c>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6013      	str	r3, [r2, #0]
  ADC4->ISR |= ADC_ISR_ADRDY;
 80050c4:	4b7b      	ldr	r3, [pc, #492]	; (80052b4 <main+0x860>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a7a      	ldr	r2, [pc, #488]	; (80052b4 <main+0x860>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6013      	str	r3, [r2, #0]

  ADC1->CFGR &= ~(ADC_CFGR_CONT);
 80050d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050de:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~(ADC_CFGR_CONT);
 80050e0:	4b75      	ldr	r3, [pc, #468]	; (80052b8 <main+0x864>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a74      	ldr	r2, [pc, #464]	; (80052b8 <main+0x864>)
 80050e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ea:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~(ADC_CFGR_CONT);
 80050ec:	4b70      	ldr	r3, [pc, #448]	; (80052b0 <main+0x85c>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a6f      	ldr	r2, [pc, #444]	; (80052b0 <main+0x85c>)
 80050f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f6:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~(ADC_CFGR_CONT);
 80050f8:	4b6e      	ldr	r3, [pc, #440]	; (80052b4 <main+0x860>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a6d      	ldr	r2, [pc, #436]	; (80052b4 <main+0x860>)
 80050fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005102:	60d3      	str	r3, [r2, #12]

  // START ANALOG CALIBRATION:

  ADC1->CR |= 1; // Enable ADC1
 8005104:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6093      	str	r3, [r2, #8]
  ADC2->CR |= 1; // Enable ADC2
 8005114:	4b68      	ldr	r3, [pc, #416]	; (80052b8 <main+0x864>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a67      	ldr	r2, [pc, #412]	; (80052b8 <main+0x864>)
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	6093      	str	r3, [r2, #8]
  ADC3->CR |= 1; // Enable ADC3
 8005120:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <main+0x85c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a62      	ldr	r2, [pc, #392]	; (80052b0 <main+0x85c>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6093      	str	r3, [r2, #8]
  ADC4->CR |= 1; // Enable ADC4
 800512c:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <main+0x860>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a60      	ldr	r2, [pc, #384]	; (80052b4 <main+0x860>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8005138:	2001      	movs	r0, #1
 800513a:	f001 fc2f 	bl	800699c <HAL_Delay>

  printf("Calculating ADC Offsets...\n");
 800513e:	485f      	ldr	r0, [pc, #380]	; (80052bc <main+0x868>)
 8005140:	f00a fdd0 	bl	800fce4 <puts>
  uint32_t offset1=0;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
  uint32_t offset2=0;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
  uint32_t offset3=0;
 800514c:	2300      	movs	r3, #0
 800514e:	607b      	str	r3, [r7, #4]

  for(int c=0;c<100;c++){
 8005150:	2300      	movs	r3, #0
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	e029      	b.n	80051aa <main+0x756>
	  ADC1->CR |= 0x0004;
 8005156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	6093      	str	r3, [r2, #8]
	  ADC2->CR |= 0x0004;
 8005166:	4b54      	ldr	r3, [pc, #336]	; (80052b8 <main+0x864>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4a53      	ldr	r2, [pc, #332]	; (80052b8 <main+0x864>)
 800516c:	f043 0304 	orr.w	r3, r3, #4
 8005170:	6093      	str	r3, [r2, #8]
	  ADC3->CR |= 0x0004;
 8005172:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <main+0x85c>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4a4e      	ldr	r2, [pc, #312]	; (80052b0 <main+0x85c>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	6093      	str	r3, [r2, #8]
	  HAL_Delay(1);
 800517e:	2001      	movs	r0, #1
 8005180:	f001 fc0c 	bl	800699c <HAL_Delay>
	  offset3 += ADC3->DR;
 8005184:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <main+0x85c>)
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	607b      	str	r3, [r7, #4]
	  offset2 += ADC2->DR;
 800518e:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <main+0x864>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
	  offset1 += ADC1->DR;
 8005198:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  for(int c=0;c<100;c++){
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b63      	cmp	r3, #99	; 0x63
 80051ae:	ddd2      	ble.n	8005156 <main+0x702>
  }

  controller.adc_c_offset = (int)((double)offset3/100.0f);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fb f9cf 	bl	8000554 <__aeabi_ui2d>
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	4b41      	ldr	r3, [pc, #260]	; (80052c0 <main+0x86c>)
 80051bc:	f7fb fb6e 	bl	800089c <__aeabi_ddiv>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fb fcee 	bl	8000ba8 <__aeabi_d2iz>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4a3d      	ldr	r2, [pc, #244]	; (80052c4 <main+0x870>)
 80051d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  controller.adc_b_offset = (int)((double)offset2/100.0f);
 80051d4:	68b8      	ldr	r0, [r7, #8]
 80051d6:	f7fb f9bd 	bl	8000554 <__aeabi_ui2d>
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	4b38      	ldr	r3, [pc, #224]	; (80052c0 <main+0x86c>)
 80051e0:	f7fb fb5c 	bl	800089c <__aeabi_ddiv>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	f7fb fcdc 	bl	8000ba8 <__aeabi_d2iz>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <main+0x870>)
 80051f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  controller.adc_a_offset = (int)((double)offset1/100.0f);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7fb f9ab 	bl	8000554 <__aeabi_ui2d>
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <main+0x86c>)
 8005204:	f7fb fb4a 	bl	800089c <__aeabi_ddiv>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	f7fb fcca 	bl	8000ba8 <__aeabi_d2iz>
 8005214:	4603      	mov	r3, r0
 8005216:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <main+0x870>)
 8005218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  //=======================================================================================================================================

  printf("ADC A OFFSET: %d, \tADC B OFFSET: %d \tADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <main+0x870>)
 800521e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005222:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <main+0x870>)
 8005224:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005228:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <main+0x870>)
 800522a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800522e:	4826      	ldr	r0, [pc, #152]	; (80052c8 <main+0x874>)
 8005230:	f00a fcd2 	bl	800fbd8 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005234:	2100      	movs	r1, #0
 8005236:	4825      	ldr	r0, [pc, #148]	; (80052cc <main+0x878>)
 8005238:	f006 fb38 	bl	800b8ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800523c:	2104      	movs	r1, #4
 800523e:	4823      	ldr	r0, [pc, #140]	; (80052cc <main+0x878>)
 8005240:	f006 fb34 	bl	800b8ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005244:	2108      	movs	r1, #8
 8005246:	4821      	ldr	r0, [pc, #132]	; (80052cc <main+0x878>)
 8005248:	f006 fb30 	bl	800b8ac <HAL_TIM_PWM_Start>
//  {
//	  Error_Handler();
//  }

  /* CAN setup */
  can_rx_init(&can_rx);
 800524c:	4820      	ldr	r0, [pc, #128]	; (80052d0 <main+0x87c>)
 800524e:	f7fd fa7f 	bl	8002750 <can_rx_init>
  can_tx_init(&can_tx);
 8005252:	4820      	ldr	r0, [pc, #128]	; (80052d4 <main+0x880>)
 8005254:	f7fd faa8 	bl	80027a8 <can_tx_init>

  HAL_FDCAN_Start(&CAN_H);
 8005258:	481f      	ldr	r0, [pc, #124]	; (80052d8 <main+0x884>)
 800525a:	f003 fcb9 	bl	8008bd0 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	2101      	movs	r1, #1
 8005262:	481d      	ldr	r0, [pc, #116]	; (80052d8 <main+0x884>)
 8005264:	f003 fdfa 	bl	8008e5c <HAL_FDCAN_ActivateNotification>


  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8005268:	2200      	movs	r2, #0
 800526a:	2100      	movs	r1, #0
 800526c:	201c      	movs	r0, #28
 800526e:	f003 f84c 	bl	800830a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8005272:	2201      	movs	r2, #1
 8005274:	2101      	movs	r1, #1
 8005276:	2015      	movs	r0, #21
 8005278:	f003 f847 	bl	800830a <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <main+0x888>)
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <main+0x888>)
 8005284:	2200      	movs	r2, #0
 8005286:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8005288:	4b14      	ldr	r3, [pc, #80]	; (80052dc <main+0x888>)
 800528a:	2201      	movs	r2, #1
 800528c:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 800528e:	2201      	movs	r2, #1
 8005290:	4913      	ldr	r1, [pc, #76]	; (80052e0 <main+0x88c>)
 8005292:	4814      	ldr	r0, [pc, #80]	; (80052e4 <main+0x890>)
 8005294:	f007 fe4e 	bl	800cf34 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8005298:	480c      	ldr	r0, [pc, #48]	; (80052cc <main+0x878>)
 800529a:	f006 fa2d 	bl	800b6f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  HAL_Delay(100);
 800529e:	2064      	movs	r0, #100	; 0x64
 80052a0:	f001 fb7c 	bl	800699c <HAL_Delay>
	  drv_print_faults(drv);
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <main+0x894>)
 80052a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052aa:	f7fd f8b5 	bl	8002418 <drv_print_faults>
	  HAL_Delay(100);
 80052ae:	e7f6      	b.n	800529e <main+0x84a>
 80052b0:	50000400 	.word	0x50000400
 80052b4:	50000500 	.word	0x50000500
 80052b8:	50000100 	.word	0x50000100
 80052bc:	080147d4 	.word	0x080147d4
 80052c0:	40590000 	.word	0x40590000
 80052c4:	20000700 	.word	0x20000700
 80052c8:	080147f0 	.word	0x080147f0
 80052cc:	20009344 	.word	0x20009344
 80052d0:	20009228 	.word	0x20009228
 80052d4:	200091fc 	.word	0x200091fc
 80052d8:	200005c0 	.word	0x200005c0
 80052dc:	200009f8 	.word	0x200009f8
 80052e0:	20009274 	.word	0x20009274
 80052e4:	20009390 	.word	0x20009390
 80052e8:	20000ce8 	.word	0x20000ce8

080052ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b094      	sub	sp, #80	; 0x50
 80052f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052f2:	f107 0318 	add.w	r3, r7, #24
 80052f6:	2238      	movs	r2, #56	; 0x38
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f009 fdea 	bl	800eed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	609a      	str	r2, [r3, #8]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800530e:	2000      	movs	r0, #0
 8005310:	f004 fd52 	bl	8009db8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005314:	2302      	movs	r3, #2
 8005316:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005322:	2302      	movs	r3, #2
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005326:	2302      	movs	r3, #2
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800532a:	2304      	movs	r3, #4
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800532e:	2355      	movs	r3, #85	; 0x55
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005332:	2302      	movs	r3, #2
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005336:	2302      	movs	r3, #2
 8005338:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800533a:	2302      	movs	r3, #2
 800533c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800533e:	f107 0318 	add.w	r3, r7, #24
 8005342:	4618      	mov	r0, r3
 8005344:	f004 fddc 	bl	8009f00 <HAL_RCC_OscConfig>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800534e:	f000 f94b 	bl	80055e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005352:	230f      	movs	r3, #15
 8005354:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005356:	2303      	movs	r3, #3
 8005358:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	2104      	movs	r1, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f005 f8e0 	bl	800a530 <HAL_RCC_ClockConfig>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005376:	f000 f937 	bl	80055e8 <Error_Handler>
  }
}
 800537a:	bf00      	nop
 800537c:	3750      	adds	r7, #80	; 0x50
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005386:	b093      	sub	sp, #76	; 0x4c
 8005388:	af10      	add	r7, sp, #64	; 0x40
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8109 	beq.w	80055ac <HAL_FDCAN_RxFifo0Callback+0x228>
	{
		/* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data) != HAL_OK)
 800539a:	4b86      	ldr	r3, [pc, #536]	; (80055b4 <HAL_FDCAN_RxFifo0Callback+0x230>)
 800539c:	4a86      	ldr	r2, [pc, #536]	; (80055b8 <HAL_FDCAN_RxFifo0Callback+0x234>)
 800539e:	2140      	movs	r1, #64	; 0x40
 80053a0:	4886      	ldr	r0, [pc, #536]	; (80055bc <HAL_FDCAN_RxFifo0Callback+0x238>)
 80053a2:	f003 fc81 	bl	8008ca8 <HAL_FDCAN_GetRxMessage>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			Error_Handler();
 80053ac:	f000 f91c 	bl	80055e8 <Error_Handler>
		}
		HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);
 80053b0:	4b80      	ldr	r3, [pc, #512]	; (80055b4 <HAL_FDCAN_RxFifo0Callback+0x230>)
 80053b2:	4a81      	ldr	r2, [pc, #516]	; (80055b8 <HAL_FDCAN_RxFifo0Callback+0x234>)
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	4881      	ldr	r0, [pc, #516]	; (80055bc <HAL_FDCAN_RxFifo0Callback+0x238>)
 80053b8:	f003 fc76 	bl	8008ca8 <HAL_FDCAN_GetRxMessage>

		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);
 80053bc:	4b80      	ldr	r3, [pc, #512]	; (80055c0 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	4a80      	ldr	r2, [pc, #512]	; (80055c4 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80053c4:	ed92 7a03 	vldr	s14, [r2, #12]
 80053c8:	4a7f      	ldr	r2, [pc, #508]	; (80055c8 <HAL_FDCAN_RxFifo0Callback+0x244>)
 80053ca:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 80053ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80053d2:	4a7c      	ldr	r2, [pc, #496]	; (80055c4 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80053d4:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 80053d8:	4a7b      	ldr	r2, [pc, #492]	; (80055c8 <HAL_FDCAN_RxFifo0Callback+0x244>)
 80053da:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 80053de:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80053e2:	4a7a      	ldr	r2, [pc, #488]	; (80055cc <HAL_FDCAN_RxFifo0Callback+0x248>)
 80053e4:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80053e8:	4a77      	ldr	r2, [pc, #476]	; (80055c8 <HAL_FDCAN_RxFifo0Callback+0x244>)
 80053ea:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80053ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053f2:	4a75      	ldr	r2, [pc, #468]	; (80055c8 <HAL_FDCAN_RxFifo0Callback+0x244>)
 80053f4:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 80053f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fc:	eeb0 1a67 	vmov.f32	s2, s15
 8005400:	eef0 0a46 	vmov.f32	s1, s12
 8005404:	eeb0 0a66 	vmov.f32	s0, s13
 8005408:	4619      	mov	r1, r3
 800540a:	4871      	ldr	r0, [pc, #452]	; (80055d0 <HAL_FDCAN_RxFifo0Callback+0x24c>)
 800540c:	f7fd f9f6 	bl	80027fc <pack_reply>

		HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data);
 8005410:	4a70      	ldr	r2, [pc, #448]	; (80055d4 <HAL_FDCAN_RxFifo0Callback+0x250>)
 8005412:	4971      	ldr	r1, [pc, #452]	; (80055d8 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8005414:	4869      	ldr	r0, [pc, #420]	; (80055bc <HAL_FDCAN_RxFifo0Callback+0x238>)
 8005416:	f003 fc03 	bl	8008c20 <HAL_FDCAN_AddMessageToTxFifoQ>

		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800541a:	4b70      	ldr	r3, [pc, #448]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800541c:	785a      	ldrb	r2, [r3, #1]
 800541e:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005420:	789b      	ldrb	r3, [r3, #2]
 8005422:	4013      	ands	r3, r2
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4b6d      	ldr	r3, [pc, #436]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005428:	78db      	ldrb	r3, [r3, #3]
 800542a:	4013      	ands	r3, r2
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b6b      	ldr	r3, [pc, #428]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	4013      	ands	r3, r2
 8005434:	b2da      	uxtb	r2, r3
 8005436:	4b69      	ldr	r3, [pc, #420]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005438:	795b      	ldrb	r3, [r3, #5]
 800543a:	4013      	ands	r3, r2
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4b67      	ldr	r3, [pc, #412]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005440:	799b      	ldrb	r3, [r3, #6]
 8005442:	4013      	ands	r3, r2
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005448:	79db      	ldrb	r3, [r3, #7]
 800544a:	4013      	ands	r3, r2
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2bff      	cmp	r3, #255	; 0xff
 8005450:	bf0c      	ite	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	2300      	movne	r3, #0
 8005456:	b2da      	uxtb	r2, r3
 8005458:	4b60      	ldr	r3, [pc, #384]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800545a:	7a1b      	ldrb	r3, [r3, #8]
 800545c:	2bfc      	cmp	r3, #252	; 0xfc
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	4013      	ands	r3, r2
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <HAL_FDCAN_RxFifo0Callback+0xf4>
			update_fsm(&state, MOTOR_CMD);
 800546e:	216d      	movs	r1, #109	; 0x6d
 8005470:	485b      	ldr	r0, [pc, #364]	; (80055e0 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8005472:	f7fe fcf7 	bl	8003e64 <update_fsm>
			unpack_cmd(can_rx, controller.commands);
			controller.timeout = 0;
		}

	}
}
 8005476:	e099      	b.n	80055ac <HAL_FDCAN_RxFifo0Callback+0x228>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8005478:	4b58      	ldr	r3, [pc, #352]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800547a:	785a      	ldrb	r2, [r3, #1]
 800547c:	4b57      	ldr	r3, [pc, #348]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800547e:	789b      	ldrb	r3, [r3, #2]
 8005480:	4013      	ands	r3, r2
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b55      	ldr	r3, [pc, #340]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005486:	78db      	ldrb	r3, [r3, #3]
 8005488:	4013      	ands	r3, r2
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2bff      	cmp	r3, #255	; 0xff
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	4b50      	ldr	r3, [pc, #320]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800549a:	791b      	ldrb	r3, [r3, #4]
 800549c:	2bff      	cmp	r3, #255	; 0xff
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	4b4c      	ldr	r3, [pc, #304]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 80054aa:	795b      	ldrb	r3, [r3, #5]
 80054ac:	2bff      	cmp	r3, #255	; 0xff
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4013      	ands	r3, r2
 80054bc:	4a47      	ldr	r2, [pc, #284]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 80054be:	7992      	ldrb	r2, [r2, #6]
 80054c0:	2aff      	cmp	r2, #255	; 0xff
 80054c2:	bf0c      	ite	eq
 80054c4:	2201      	moveq	r2, #1
 80054c6:	2200      	movne	r2, #0
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	4013      	ands	r3, r2
 80054cc:	4a43      	ldr	r2, [pc, #268]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 80054ce:	79d2      	ldrb	r2, [r2, #7]
 80054d0:	2aff      	cmp	r2, #255	; 0xff
 80054d2:	bf0c      	ite	eq
 80054d4:	2201      	moveq	r2, #1
 80054d6:	2200      	movne	r2, #0
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	4013      	ands	r3, r2
 80054dc:	4a3f      	ldr	r2, [pc, #252]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 80054de:	7a12      	ldrb	r2, [r2, #8]
 80054e0:	2afd      	cmp	r2, #253	; 0xfd
 80054e2:	bf0c      	ite	eq
 80054e4:	2201      	moveq	r2, #1
 80054e6:	2200      	movne	r2, #0
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <HAL_FDCAN_RxFifo0Callback+0x176>
			update_fsm(&state, MENU_CMD);
 80054f0:	211b      	movs	r1, #27
 80054f2:	483b      	ldr	r0, [pc, #236]	; (80055e0 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 80054f4:	f7fe fcb6 	bl	8003e64 <update_fsm>
}
 80054f8:	e058      	b.n	80055ac <HAL_FDCAN_RxFifo0Callback+0x228>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80054fa:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 80054fc:	785a      	ldrb	r2, [r3, #1]
 80054fe:	4b37      	ldr	r3, [pc, #220]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	4013      	ands	r3, r2
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b35      	ldr	r3, [pc, #212]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005508:	78db      	ldrb	r3, [r3, #3]
 800550a:	4013      	ands	r3, r2
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2bff      	cmp	r3, #255	; 0xff
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	4b30      	ldr	r3, [pc, #192]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800551c:	791b      	ldrb	r3, [r3, #4]
 800551e:	2bff      	cmp	r3, #255	; 0xff
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	4619      	mov	r1, r3
 800552a:	4b2c      	ldr	r3, [pc, #176]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800552c:	795b      	ldrb	r3, [r3, #5]
 800552e:	2bff      	cmp	r3, #255	; 0xff
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	4013      	ands	r3, r2
 800553e:	4a27      	ldr	r2, [pc, #156]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005540:	7992      	ldrb	r2, [r2, #6]
 8005542:	2aff      	cmp	r2, #255	; 0xff
 8005544:	bf0c      	ite	eq
 8005546:	2201      	moveq	r2, #1
 8005548:	2200      	movne	r2, #0
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	4013      	ands	r3, r2
 800554e:	4a23      	ldr	r2, [pc, #140]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005550:	79d2      	ldrb	r2, [r2, #7]
 8005552:	2aff      	cmp	r2, #255	; 0xff
 8005554:	bf0c      	ite	eq
 8005556:	2201      	moveq	r2, #1
 8005558:	2200      	movne	r2, #0
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	4013      	ands	r3, r2
 800555e:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 8005560:	7a12      	ldrb	r2, [r2, #8]
 8005562:	2afe      	cmp	r2, #254	; 0xfe
 8005564:	bf0c      	ite	eq
 8005566:	2201      	moveq	r2, #1
 8005568:	2200      	movne	r2, #0
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <HAL_FDCAN_RxFifo0Callback+0x1f8>
			update_fsm(&state, ZERO_CMD);
 8005572:	217a      	movs	r1, #122	; 0x7a
 8005574:	481a      	ldr	r0, [pc, #104]	; (80055e0 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8005576:	f7fe fc75 	bl	8003e64 <update_fsm>
}
 800557a:	e017      	b.n	80055ac <HAL_FDCAN_RxFifo0Callback+0x228>
			unpack_cmd(can_rx, controller.commands);
 800557c:	4e17      	ldr	r6, [pc, #92]	; (80055dc <HAL_FDCAN_RxFifo0Callback+0x258>)
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8005580:	930f      	str	r3, [sp, #60]	; 0x3c
 8005582:	466d      	mov	r5, sp
 8005584:	f106 0410 	add.w	r4, r6, #16
 8005588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800558a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800558c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800558e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005594:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005598:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800559c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80055a0:	f7fd f9a4 	bl	80028ec <unpack_cmd>
			controller.timeout = 0;
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <HAL_FDCAN_RxFifo0Callback+0x248>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b4:	20009229 	.word	0x20009229
 80055b8:	20009234 	.word	0x20009234
 80055bc:	200005c0 	.word	0x200005c0
 80055c0:	200006c4 	.word	0x200006c4
 80055c4:	20000a08 	.word	0x20000a08
 80055c8:	20000624 	.word	0x20000624
 80055cc:	20000700 	.word	0x20000700
 80055d0:	200091fc 	.word	0x200091fc
 80055d4:	200091fd 	.word	0x200091fd
 80055d8:	20009204 	.word	0x20009204
 80055dc:	20009228 	.word	0x20009228
 80055e0:	200009f8 	.word	0x200009f8
 80055e4:	200007cc 	.word	0x200007cc

080055e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8005600:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8005604:	ed97 7a01 	vldr	s14, [r7, #4]
 8005608:	edd7 7a00 	vldr	s15, [r7]
 800560c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005614:	dd01      	ble.n	800561a <fast_fmaxf+0x24>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	e000      	b.n	800561c <fast_fmaxf+0x26>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	ee07 3a90 	vmov	s15, r3
    }
 8005620:	eeb0 0a67 	vmov.f32	s0, s15
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <fast_fminf>:

float fast_fminf(float x, float y){
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	ed87 0a01 	vstr	s0, [r7, #4]
 8005638:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800563c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005640:	edd7 7a00 	vldr	s15, [r7]
 8005644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564c:	d501      	bpl.n	8005652 <fast_fminf+0x24>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	e000      	b.n	8005654 <fast_fminf+0x26>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	ee07 3a90 	vmov	s15, r3
    }
 8005658:	eeb0 0a67 	vmov.f32	s0, s15
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005670:	edc7 0a02 	vstr	s1, [r7, #8]
 8005674:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8005678:	ed97 7a03 	vldr	s14, [r7, #12]
 800567c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005688:	dd0c      	ble.n	80056a4 <fmaxf3+0x3e>
 800568a:	ed97 7a03 	vldr	s14, [r7, #12]
 800568e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	dd01      	ble.n	80056a0 <fmaxf3+0x3a>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e00d      	b.n	80056bc <fmaxf3+0x56>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	e00b      	b.n	80056bc <fmaxf3+0x56>
 80056a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80056a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80056ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b4:	dd01      	ble.n	80056ba <fmaxf3+0x54>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	e000      	b.n	80056bc <fmaxf3+0x56>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	ee07 3a90 	vmov	s15, r3
    }
 80056c0:	eeb0 0a67 	vmov.f32	s0, s15
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <fminf3>:

float fminf3(float x, float y, float z){
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	ed87 0a03 	vstr	s0, [r7, #12]
 80056d8:	edc7 0a02 	vstr	s1, [r7, #8]
 80056dc:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 80056e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80056e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80056e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	d50c      	bpl.n	800570c <fminf3+0x3e>
 80056f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80056f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005702:	d501      	bpl.n	8005708 <fminf3+0x3a>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	e00d      	b.n	8005724 <fminf3+0x56>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	e00b      	b.n	8005724 <fminf3+0x56>
 800570c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005710:	edd7 7a01 	vldr	s15, [r7, #4]
 8005714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571c:	d501      	bpl.n	8005722 <fminf3+0x54>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	e000      	b.n	8005724 <fminf3+0x56>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	ee07 3a90 	vmov	s15, r3
    }
 8005728:	eeb0 0a67 	vmov.f32	s0, s15
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	ed93 7a00 	vldr	s14, [r3]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	edd3 7a00 	vldr	s15, [r3]
 8005750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	edd3 6a00 	vldr	s13, [r3]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	edd3 7a00 	vldr	s15, [r3]
 8005760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005768:	eeb0 0a67 	vmov.f32	s0, s15
 800576c:	f00e f9c0 	bl	8013af0 <sqrtf>
 8005770:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8005774:	ed97 7a05 	vldr	s14, [r7, #20]
 8005778:	edd7 7a01 	vldr	s15, [r7, #4]
 800577c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	dc00      	bgt.n	8005788 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8005786:	e01b      	b.n	80057c0 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	ed93 7a00 	vldr	s14, [r3]
 800578e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005792:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005796:	ed97 7a05 	vldr	s14, [r7, #20]
 800579a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	ed93 7a00 	vldr	s14, [r3]
 80057aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80057ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80057b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80057b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	edc3 7a00 	vstr	s15, [r3]
    }
 80057c0:	bf00      	nop
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80057d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80057d6:	ed87 1a01 	vstr	s2, [r7, #4]
 80057da:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80057dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80057e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80057e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057e8:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80057f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80057f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80057f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057fc:	2201      	movs	r2, #1
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800580e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005812:	ed97 7a05 	vldr	s14, [r7, #20]
 8005816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800581e:	ee17 3a90 	vmov	r3, s15
    }
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 800582e:	b480      	push	{r7}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	ed87 0a02 	vstr	s0, [r7, #8]
 800583a:	edc7 0a01 	vstr	s1, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8005840:	ed97 7a01 	vldr	s14, [r7, #4]
 8005844:	edd7 7a02 	vldr	s15, [r7, #8]
 8005848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800584c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800585e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005862:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005866:	2201      	movs	r2, #1
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005880:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8005884:	eeb0 0a67 	vmov.f32	s0, s15
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <sin_lut>:

float sin_lut(float theta){
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 800589e:	eddf 0a17 	vldr	s1, [pc, #92]	; 80058fc <sin_lut+0x68>
 80058a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80058a6:	f00e f903 	bl	8013ab0 <fmodf>
 80058aa:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 80058ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80058b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ba:	d506      	bpl.n	80058ca <sin_lut+0x36>
 80058bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80058c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80058fc <sin_lut+0x68>
 80058c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058c8:	e001      	b.n	80058ce <sin_lut+0x3a>
 80058ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80058ce:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 80058d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80058d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005900 <sin_lut+0x6c>
 80058da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058e2:	ee17 3a90 	vmov	r3, s15
 80058e6:	4a07      	ldr	r2, [pc, #28]	; (8005904 <sin_lut+0x70>)
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	ee07 3a90 	vmov	s15, r3
}
 80058f2:	eeb0 0a67 	vmov.f32	s0, s15
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40c90fdb 	.word	0x40c90fdb
 8005900:	42a2f983 	.word	0x42a2f983
 8005904:	08014894 	.word	0x08014894

08005908 <cos_lut>:

float cos_lut(float theta){
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8005912:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005934 <cos_lut+0x2c>
 8005916:	edd7 7a01 	vldr	s15, [r7, #4]
 800591a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800591e:	eeb0 0a67 	vmov.f32	s0, s15
 8005922:	f7ff ffb7 	bl	8005894 <sin_lut>
 8005926:	eef0 7a40 	vmov.f32	s15, s0
}
 800592a:	eeb0 0a67 	vmov.f32	s0, s15
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	3fc90fdb 	.word	0x3fc90fdb

08005938 <ps_warmup>:
#define AS4047D_CS1_Pin GPIO_PIN_11
#define ENC_CS_HIGH AS4047D_CS1_Port->BSRR=(uint32_t)AS4047D_CS1_Pin
#define ENC_CS_LOW AS4047D_CS1_Port->BRR=(uint32_t)AS4047D_CS1_Pin
#define READ_POS_REG 0xFFFF

void ps_warmup(EncoderStruct * encoder, int n){
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e021      	b.n	800598c <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800594e:	2200      	movs	r2, #0
 8005950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005954:	4812      	ldr	r0, [pc, #72]	; (80059a0 <ps_warmup+0x68>)
 8005956:	f004 fa17 	bl	8009d88 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1c9a      	adds	r2, r3, #2
 8005960:	2364      	movs	r3, #100	; 0x64
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2301      	movs	r3, #1
 8005966:	480f      	ldr	r0, [pc, #60]	; (80059a4 <ps_warmup+0x6c>)
 8005968:	f005 faf7 	bl	800af5a <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800596c:	bf00      	nop
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <ps_warmup+0x6c>)
 8005970:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d0f9      	beq.n	800596e <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800597a:	2201      	movs	r2, #1
 800597c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005980:	4807      	ldr	r0, [pc, #28]	; (80059a0 <ps_warmup+0x68>)
 8005982:	f004 fa01 	bl	8009d88 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	dbd9      	blt.n	8005948 <ps_warmup+0x10>
	}
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	48000400 	.word	0x48000400
 80059a4:	200092dc 	.word	0x200092dc

080059a8 <AS5047_Read_Pos>:

uint16_t AS5047_Read_Pos()
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
	ENC_CS_LOW;
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <AS5047_Read_Pos+0x88>)
 80059b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28
	while ((SPI2->SR & SPI_SR_BSY) != 0);
 80059b6:	bf00      	nop
 80059b8:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f9      	bne.n	80059b8 <AS5047_Read_Pos+0x10>
	SPI2->DR = READ_POS_REG;
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ca:	60da      	str	r2, [r3, #12]
	SPI2->CR1 |= SPI_CR1_SPE;
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d6:	6013      	str	r3, [r2, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0);
 80059d8:	bf00      	nop
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f9      	beq.n	80059da <AS5047_Read_Pos+0x32>
	uint16_t result = SPI2->DR;
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	80fb      	strh	r3, [r7, #6]
	while ((SPI2->SR & SPI_SR_TXE) == 0);
 80059ec:	bf00      	nop
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f9      	beq.n	80059ee <AS5047_Read_Pos+0x46>
	while ((SPI2->SR & SPI_SR_BSY) != 0);
 80059fa:	bf00      	nop
 80059fc:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f9      	bne.n	80059fc <AS5047_Read_Pos+0x54>
	SPI2->CR1 &= ~(SPI_CR1_SPE);
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <AS5047_Read_Pos+0x8c>)
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a12:	6013      	str	r3, [r2, #0]
	ENC_CS_HIGH;
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <AS5047_Read_Pos+0x88>)
 8005a16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a1a:	619a      	str	r2, [r3, #24]
	return (result & 0x3FFF);
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005a22:	b29b      	uxth	r3, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	48000400 	.word	0x48000400
 8005a34:	40003800 	.word	0x40003800

08005a38 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005a4c:	2313      	movs	r3, #19
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	e011      	b.n	8005a76 <ps_sample+0x3e>
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	3b01      	subs	r3, #1
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	3302      	adds	r3, #2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	3302      	adds	r3, #2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	3b01      	subs	r3, #1
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dcea      	bgt.n	8005a52 <ps_sample+0x1a>
//	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
//	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
//	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
//	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
//	encoder->raw = encoder ->spi_rx_word;
	encoder->raw = AS5047_Read_Pos(); // JB
 8005a7c:	f7ff ff94 	bl	80059a8 <AS5047_Read_Pos>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8c:	125b      	asrs	r3, r3, #9
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	3336      	adds	r3, #54	; 0x36
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9e:	125b      	asrs	r3, r3, #9
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	425a      	negs	r2, r3
 8005aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aac:	bf58      	it	pl
 8005aae:	4253      	negpl	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	3336      	adds	r3, #54	; 0x36
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	125b      	asrs	r3, r3, #9
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	441a      	add	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005ae6:	4b77      	ldr	r3, [pc, #476]	; (8005cc4 <ps_sample+0x28c>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005af4:	eddf 6a74 	vldr	s13, [pc, #464]	; 8005cc8 <ps_sample+0x290>
 8005af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b0c:	ee17 3a90 	vmov	r3, s15
 8005b10:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b26:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8005ccc <ps_sample+0x294>
 8005b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b42:	d507      	bpl.n	8005b54 <ps_sample+0x11c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b4a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005ccc <ps_sample+0x294>
 8005b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b52:	e002      	b.n	8005b5a <ps_sample+0x122>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <ps_sample+0x28c>)
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b7c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8005cc8 <ps_sample+0x290>
 8005b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b94:	ee17 3a90 	vmov	r3, s15
 8005b98:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bae:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005ccc <ps_sample+0x294>
 8005bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bca:	d507      	bpl.n	8005bdc <ps_sample+0x1a4>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005bd2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005ccc <ps_sample+0x294>
 8005bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bda:	e002      	b.n	8005be2 <ps_sample+0x1aa>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	ed93 7a01 	vldr	s14, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bfc:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c04:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005cd0 <ps_sample+0x298>
 8005c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c10:	dd03      	ble.n	8005c1a <ps_sample+0x1e2>
 8005c12:	f04f 33ff 	mov.w	r3, #4294967295
 8005c16:	623b      	str	r3, [r7, #32]
 8005c18:	e00a      	b.n	8005c30 <ps_sample+0x1f8>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005c1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c1e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005cd4 <ps_sample+0x29c>
 8005c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2a:	d501      	bpl.n	8005c30 <ps_sample+0x1f8>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	441a      	add	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d107      	bne.n	8005c5a <ps_sample+0x222>
		encoder->turns = 0;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8005ccc <ps_sample+0x294>
 8005c72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	edc3 7a03 	vstr	s15, [r3, #12]
//
//	float vel = (new_pos_avg - old_pos_avg)/(dt*9.0);



	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005c8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c90:	edd7 7a00 	vldr	s15, [r7]
 8005c94:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8005cbc:	bf00      	nop
 8005cbe:	3728      	adds	r7, #40	; 0x28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200006c4 	.word	0x200006c4
 8005cc8:	46800000 	.word	0x46800000
 8005ccc:	40c90fdb 	.word	0x40c90fdb
 8005cd0:	40490fdb 	.word	0x40490fdb
 8005cd4:	c0490fdb 	.word	0xc0490fdb

08005cd8 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4818      	ldr	r0, [pc, #96]	; (8005d4c <ps_print+0x74>)
 8005cea:	f009 ff75 	bl	800fbd8 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4816      	ldr	r0, [pc, #88]	; (8005d50 <ps_print+0x78>)
 8005cf6:	f009 ff6f 	bl	800fbd8 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fc4a 	bl	8000598 <__aeabi_f2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4812      	ldr	r0, [pc, #72]	; (8005d54 <ps_print+0x7c>)
 8005d0a:	f009 ff65 	bl	800fbd8 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fa fc40 	bl	8000598 <__aeabi_f2d>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	480e      	ldr	r0, [pc, #56]	; (8005d58 <ps_print+0x80>)
 8005d1e:	f009 ff5b 	bl	800fbd8 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fa fc36 	bl	8000598 <__aeabi_f2d>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	480a      	ldr	r0, [pc, #40]	; (8005d5c <ps_print+0x84>)
 8005d32:	f009 ff51 	bl	800fbd8 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4808      	ldr	r0, [pc, #32]	; (8005d60 <ps_print+0x88>)
 8005d40:	f009 ff4a 	bl	800fbd8 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08014828 	.word	0x08014828
 8005d50:	08014830 	.word	0x08014830
 8005d54:	08014848 	.word	0x08014848
 8005d58:	0801485c 	.word	0x0801485c
 8005d5c:	08014870 	.word	0x08014870
 8005d60:	08014884 	.word	0x08014884

08005d64 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fc fe94 	bl	8002aa0 <flash_writer_init>
	pr->sector = sector;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	60da      	str	r2, [r3, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fc fea1 	bl	8002ad8 <flash_writer_open>
    pr->ready = true;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	741a      	strb	r2, [r3, #16]
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005da4:	b084      	sub	sp, #16
 8005da6:	b490      	push	{r4, r7}
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	f107 0408 	add.w	r4, r7, #8
 8005dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005db2:	7e3b      	ldrb	r3, [r7, #24]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc90      	pop	{r4, r7}
 8005dba:	b004      	add	sp, #16
 8005dbc:	4770      	bx	lr
	...

08005dc0 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e00d      	b.n	8005dea <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <preference_writer_flush+0x6c>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8005de0:	f7fc fe90 	bl	8002b04 <flash_writer_write_int>
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b09      	cmp	r3, #9
 8005dee:	ddee      	ble.n	8005dce <preference_writer_flush+0xe>
    }
    for (; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 8005df0:	e011      	b.n	8005e16 <preference_writer_flush+0x56>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - MAX_INTS_IN_FLASH]);
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3b0a      	subs	r3, #10
 8005df8:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <preference_writer_flush+0x70>)
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	edd3 7a00 	vldr	s15, [r3]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	eeb0 0a67 	vmov.f32	s0, s15
 8005e08:	460b      	mov	r3, r1
 8005e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e0c:	f7fc fe98 	bl	8002b40 <flash_writer_write_float>
    for (; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b31      	cmp	r3, #49	; 0x31
 8005e1a:	ddea      	ble.n	8005df2 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	741a      	strb	r2, [r3, #16]
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200006c4 	.word	0x200006c4
 8005e30:	20000624 	.word	0x20000624

08005e34 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005e34:	b084      	sub	sp, #16
 8005e36:	b590      	push	{r4, r7, lr}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	f107 0418 	add.w	r4, r7, #24
 8005e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 8005e44:	2300      	movs	r3, #0
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	e00d      	b.n	8005e66 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f107 0218 	add.w	r2, r7, #24
 8005e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e52:	f7fc fea3 	bl	8002b9c <flash_read_int>
 8005e56:	4602      	mov	r2, r0
 8005e58:	4914      	ldr	r1, [pc, #80]	; (8005eac <preference_writer_load+0x78>)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < MAX_INTS_IN_FLASH; offs++) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3301      	adds	r3, #1
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b09      	cmp	r3, #9
 8005e6a:	ddee      	ble.n	8005e4a <preference_writer_load+0x16>
    }
    for(; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 8005e6c:	e013      	b.n	8005e96 <preference_writer_load+0x62>
        __float_reg[offs - MAX_INTS_IN_FLASH] = flash_read_float(pr.fw, offs);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f1a3 040a 	sub.w	r4, r3, #10
 8005e76:	4613      	mov	r3, r2
 8005e78:	f107 0218 	add.w	r2, r7, #24
 8005e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e7e:	f7fc fea0 	bl	8002bc2 <flash_read_float>
 8005e82:	eef0 7a40 	vmov.f32	s15, s0
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <preference_writer_load+0x7c>)
 8005e88:	00a3      	lsls	r3, r4, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < MAX_INTS_IN_FLASH+MAX_FLOATS_IN_FLASH; offs++) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3301      	adds	r3, #1
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b31      	cmp	r3, #49	; 0x31
 8005e9a:	dde8      	ble.n	8005e6e <preference_writer_load+0x3a>
    }
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr
 8005eac:	200006c4 	.word	0x200006c4
 8005eb0:	20000624 	.word	0x20000624

08005eb4 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fc fe5c 	bl	8002b82 <flash_writer_close>
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <MX_SPI1_Init+0x78>)
 8005edc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005ede:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ee4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ee6:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005eee:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005ef2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ef4:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005efa:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f0a:	2228      	movs	r2, #40	; 0x28
 8005f0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f22:	2207      	movs	r2, #7
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005f32:	4805      	ldr	r0, [pc, #20]	; (8005f48 <MX_SPI1_Init+0x74>)
 8005f34:	f004 ff66 	bl	800ae04 <HAL_SPI_Init>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005f3e:	f7ff fb53 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20009278 	.word	0x20009278
 8005f4c:	40013000 	.word	0x40013000

08005f50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f56:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <MX_SPI2_Init+0x78>)
 8005f58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005f68:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f6a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005f6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f86:	2210      	movs	r2, #16
 8005f88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005f9e:	2207      	movs	r2, #7
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005fa2:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005fae:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <MX_SPI2_Init+0x74>)
 8005fb0:	f004 ff28 	bl	800ae04 <HAL_SPI_Init>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005fba:	f7ff fb15 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200092dc 	.word	0x200092dc
 8005fc8:	40003800 	.word	0x40003800

08005fcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd4:	f107 031c 	add.w	r3, r7, #28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2f      	ldr	r2, [pc, #188]	; (80060a8 <HAL_SPI_MspInit+0xdc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d129      	bne.n	8006042 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fee:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	4a2e      	ldr	r2, [pc, #184]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8005ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8005ffa:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006006:	4b29      	ldr	r3, [pc, #164]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8006008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600a:	4a28      	ldr	r2, [pc, #160]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006012:	4b26      	ldr	r3, [pc, #152]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8006014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800601e:	23e0      	movs	r3, #224	; 0xe0
 8006020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006022:	2302      	movs	r3, #2
 8006024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800602a:	2300      	movs	r3, #0
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800602e:	2305      	movs	r3, #5
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006032:	f107 031c 	add.w	r3, r7, #28
 8006036:	4619      	mov	r1, r3
 8006038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800603c:	f003 fd22 	bl	8009a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006040:	e02d      	b.n	800609e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <HAL_SPI_MspInit+0xe4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d128      	bne.n	800609e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800604c:	4b17      	ldr	r3, [pc, #92]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8006052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006056:	6593      	str	r3, [r2, #88]	; 0x58
 8006058:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006064:	4b11      	ldr	r3, [pc, #68]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8006066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006068:	4a10      	ldr	r2, [pc, #64]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 800606a:	f043 0302 	orr.w	r3, r3, #2
 800606e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_SPI_MspInit+0xe0>)
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800607c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006082:	2302      	movs	r3, #2
 8006084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608a:	2300      	movs	r3, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800608e:	2305      	movs	r3, #5
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006092:	f107 031c 	add.w	r3, r7, #28
 8006096:	4619      	mov	r1, r3
 8006098:	4806      	ldr	r0, [pc, #24]	; (80060b4 <HAL_SPI_MspInit+0xe8>)
 800609a:	f003 fcf3 	bl	8009a84 <HAL_GPIO_Init>
}
 800609e:	bf00      	nop
 80060a0:	3730      	adds	r7, #48	; 0x30
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40013000 	.word	0x40013000
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40003800 	.word	0x40003800
 80060b4:	48000400 	.word	0x48000400

080060b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060be:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <HAL_MspInit+0x44>)
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	4a0e      	ldr	r2, [pc, #56]	; (80060fc <HAL_MspInit+0x44>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	6613      	str	r3, [r2, #96]	; 0x60
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <HAL_MspInit+0x44>)
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_MspInit+0x44>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <HAL_MspInit+0x44>)
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	6593      	str	r3, [r2, #88]	; 0x58
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_MspInit+0x44>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000

08006100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8006104:	e7fe      	b.n	8006104 <NMI_Handler+0x4>

08006106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006106:	b480      	push	{r7}
 8006108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800610a:	e7fe      	b.n	800610a <HardFault_Handler+0x4>

0800610c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006110:	e7fe      	b.n	8006110 <MemManage_Handler+0x4>

08006112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006112:	b480      	push	{r7}
 8006114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006116:	e7fe      	b.n	8006116 <BusFault_Handler+0x4>

08006118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800611c:	e7fe      	b.n	800611c <UsageFault_Handler+0x4>

0800611e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800611e:	b480      	push	{r7}
 8006120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006122:	bf00      	nop
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800613a:	b480      	push	{r7}
 800613c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800613e:	bf00      	nop
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800614c:	f000 fc08 	bl	8006960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006150:	bf00      	nop
 8006152:	bd80      	pop	{r7, pc}

08006154 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006158:	4802      	ldr	r0, [pc, #8]	; (8006164 <DMA1_Channel1_IRQHandler+0x10>)
 800615a:	f002 fa73 	bl	8008644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000438 	.word	0x20000438

08006168 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800616c:	4802      	ldr	r0, [pc, #8]	; (8006178 <DMA1_Channel2_IRQHandler+0x10>)
 800616e:	f002 fa69 	bl	8008644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006172:	bf00      	nop
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000498 	.word	0x20000498

0800617c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8006180:	4802      	ldr	r0, [pc, #8]	; (800618c <DMA1_Channel3_IRQHandler+0x10>)
 8006182:	f002 fa5f 	bl	8008644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200004f8 	.word	0x200004f8

08006190 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8006194:	4802      	ldr	r0, [pc, #8]	; (80061a0 <DMA1_Channel4_IRQHandler+0x10>)
 8006196:	f002 fa55 	bl	8008644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800619a:	bf00      	nop
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000558 	.word	0x20000558

080061a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80061a8:	4802      	ldr	r0, [pc, #8]	; (80061b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80061aa:	f002 ff3d 	bl	8009028 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80061ae:	bf00      	nop
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200005c0 	.word	0x200005c0

080061b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
	//GPIOB->BSRR = (uint32_t)GPIO_PIN_9;
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
//	analog_sample(&controller);
	ADC1->CR |= 0x0004;
 80061bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80061c6:	f043 0304 	orr.w	r3, r3, #4
 80061ca:	6093      	str	r3, [r2, #8]
	ADC2->CR |= 0x0004;
 80061cc:	4b4c      	ldr	r3, [pc, #304]	; (8006300 <TIM2_IRQHandler+0x148>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a4b      	ldr	r2, [pc, #300]	; (8006300 <TIM2_IRQHandler+0x148>)
 80061d2:	f043 0304 	orr.w	r3, r3, #4
 80061d6:	6093      	str	r3, [r2, #8]
	ADC3->CR |= 0x0004;
 80061d8:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <TIM2_IRQHandler+0x14c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a49      	ldr	r2, [pc, #292]	; (8006304 <TIM2_IRQHandler+0x14c>)
 80061de:	f043 0304 	orr.w	r3, r3, #4
 80061e2:	6093      	str	r3, [r2, #8]
	ADC4->CR |= 0x0004;
 80061e4:	4b48      	ldr	r3, [pc, #288]	; (8006308 <TIM2_IRQHandler+0x150>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a47      	ldr	r2, [pc, #284]	; (8006308 <TIM2_IRQHandler+0x150>)
 80061ea:	f043 0304 	orr.w	r3, r3, #4
 80061ee:	6093      	str	r3, [r2, #8]

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80061f0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800630c <TIM2_IRQHandler+0x154>
 80061f4:	4846      	ldr	r0, [pc, #280]	; (8006310 <TIM2_IRQHandler+0x158>)
 80061f6:	f7ff fc1f 	bl	8005a38 <ps_sample>

	controller.adc_a_raw = ADC1->DR;
 80061fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	461a      	mov	r2, r3
 8006202:	4b44      	ldr	r3, [pc, #272]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006204:	605a      	str	r2, [r3, #4]
	controller.adc_b_raw = ADC2->DR;
 8006206:	4b3e      	ldr	r3, [pc, #248]	; (8006300 <TIM2_IRQHandler+0x148>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	461a      	mov	r2, r3
 800620c:	4b41      	ldr	r3, [pc, #260]	; (8006314 <TIM2_IRQHandler+0x15c>)
 800620e:	609a      	str	r2, [r3, #8]
	controller.adc_c_raw = ADC3->DR;
 8006210:	4b3c      	ldr	r3, [pc, #240]	; (8006304 <TIM2_IRQHandler+0x14c>)
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	461a      	mov	r2, r3
 8006216:	4b3f      	ldr	r3, [pc, #252]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006218:	60da      	str	r2, [r3, #12]
	controller.adc_vbus_raw = ADC4->DR;
 800621a:	4b3b      	ldr	r3, [pc, #236]	; (8006308 <TIM2_IRQHandler+0x150>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	461a      	mov	r2, r3
 8006220:	4b3c      	ldr	r3, [pc, #240]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006222:	611a      	str	r2, [r3, #16]
	controller.v_bus = (float)controller.adc_vbus_raw*V_SCALE;
 8006224:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006230:	ee17 0a90 	vmov	r0, s15
 8006234:	f7fa f9b0 	bl	8000598 <__aeabi_f2d>
 8006238:	a32d      	add	r3, pc, #180	; (adr r3, 80062f0 <TIM2_IRQHandler+0x138>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa fa03 	bl	8000648 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	a32b      	add	r3, pc, #172	; (adr r3, 80062f8 <TIM2_IRQHandler+0x140>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f9fa 	bl	8000648 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4610      	mov	r0, r2
 800625a:	4619      	mov	r1, r3
 800625c:	f7fa fcec 	bl	8000c38 <__aeabi_d2f>
 8006260:	4603      	mov	r3, r0
 8006262:	4a2c      	ldr	r2, [pc, #176]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006264:	6213      	str	r3, [r2, #32]

	controller.i_a = controller.i_scale*(float)(controller.adc_a_raw - controller.adc_a_offset);    // Calculate phase currents from ADC readings
 8006266:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006268:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800626c:	4b29      	ldr	r3, [pc, #164]	; (8006314 <TIM2_IRQHandler+0x15c>)
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	4b28      	ldr	r3, [pc, #160]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006284:	4b23      	ldr	r3, [pc, #140]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006286:	edc3 7a05 	vstr	s15, [r3, #20]
	controller.i_b = controller.i_scale*(float)(controller.adc_b_raw - controller.adc_b_offset);
 800628a:	4b22      	ldr	r3, [pc, #136]	; (8006314 <TIM2_IRQHandler+0x15c>)
 800628c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8006290:	4b20      	ldr	r3, [pc, #128]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <TIM2_IRQHandler+0x15c>)
 8006296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a8:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062aa:	edc3 7a06 	vstr	s15, [r3, #24]
	controller.i_c = controller.i_scale*(float)(controller.adc_c_raw - controller.adc_c_offset);
 80062ae:	4b19      	ldr	r3, [pc, #100]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062b0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80062b4:	4b17      	ldr	r3, [pc, #92]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	4b16      	ldr	r3, [pc, #88]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062ce:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Run Finite State Machine */
	run_fsm(&state);
 80062d2:	4811      	ldr	r0, [pc, #68]	; (8006318 <TIM2_IRQHandler+0x160>)
 80062d4:	f7fd fc20 	bl	8003b18 <run_fsm>

	/* Check for CAN messages */

	/* increment loop count */
	controller.loop_count++;
 80062d8:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062de:	3301      	adds	r3, #1
 80062e0:	4a0c      	ldr	r2, [pc, #48]	; (8006314 <TIM2_IRQHandler+0x15c>)
 80062e2:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
	//GPIOB->BRR = (uint32_t)GPIO_PIN_9;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80062e6:	480d      	ldr	r0, [pc, #52]	; (800631c <TIM2_IRQHandler+0x164>)
 80062e8:	f005 fbf2 	bl	800bad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80062ec:	bf00      	nop
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	fdf3b646 	.word	0xfdf3b646
 80062f4:	3ff978d4 	.word	0x3ff978d4
 80062f8:	00000000 	.word	0x00000000
 80062fc:	3f8a6663 	.word	0x3f8a6663
 8006300:	50000100 	.word	0x50000100
 8006304:	50000400 	.word	0x50000400
 8006308:	50000500 	.word	0x50000500
 800630c:	37d1b717 	.word	0x37d1b717
 8006310:	20000a08 	.word	0x20000a08
 8006314:	20000700 	.word	0x20000700
 8006318:	200009f8 	.word	0x200009f8
 800631c:	20009344 	.word	0x20009344

08006320 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	HAL_UART_IRQHandler(&huart3);
 8006326:	4809      	ldr	r0, [pc, #36]	; (800634c <USART3_IRQHandler+0x2c>)
 8006328:	f006 fe5a 	bl	800cfe0 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <USART3_IRQHandler+0x30>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	4619      	mov	r1, r3
 8006336:	4807      	ldr	r0, [pc, #28]	; (8006354 <USART3_IRQHandler+0x34>)
 8006338:	f7fd fd94 	bl	8003e64 <update_fsm>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800633c:	4803      	ldr	r0, [pc, #12]	; (800634c <USART3_IRQHandler+0x2c>)
 800633e:	f006 fe4f 	bl	800cfe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20009390 	.word	0x20009390
 8006350:	20009274 	.word	0x20009274
 8006354:	200009f8 	.word	0x200009f8

08006358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
	return 1;
 800635c:	2301      	movs	r3, #1
}
 800635e:	4618      	mov	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <_kill>:

int _kill(int pid, int sig)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006372:	f008 fd77 	bl	800ee64 <__errno>
 8006376:	4603      	mov	r3, r0
 8006378:	2216      	movs	r2, #22
 800637a:	601a      	str	r2, [r3, #0]
	return -1;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <_exit>:

void _exit (int status)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006390:	f04f 31ff 	mov.w	r1, #4294967295
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ffe7 	bl	8006368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800639a:	e7fe      	b.n	800639a <_exit+0x12>

0800639c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e00a      	b.n	80063c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80063ae:	f3af 8000 	nop.w
 80063b2:	4601      	mov	r1, r0
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	60ba      	str	r2, [r7, #8]
 80063ba:	b2ca      	uxtb	r2, r1
 80063bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	3301      	adds	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	dbf0      	blt.n	80063ae <_read+0x12>
	}

return len;
 80063cc:	687b      	ldr	r3, [r7, #4]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e009      	b.n	80063fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	60ba      	str	r2, [r7, #8]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fa15 	bl	8006820 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	3301      	adds	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	dbf1      	blt.n	80063e8 <_write+0x12>
	}
	return len;
 8006404:	687b      	ldr	r3, [r7, #4]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <_close>:

int _close(int file)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
	return -1;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006436:	605a      	str	r2, [r3, #4]
	return 0;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <_isatty>:

int _isatty(int file)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
	return 1;
 800644e:	2301      	movs	r3, #1
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
	return 0;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006480:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <_sbrk+0x50>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <_sbrk+0x16>
		heap_end = &end;
 8006488:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <_sbrk+0x50>)
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <_sbrk+0x54>)
 800648c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800648e:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <_sbrk+0x50>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <_sbrk+0x50>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	466a      	mov	r2, sp
 800649e:	4293      	cmp	r3, r2
 80064a0:	d907      	bls.n	80064b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80064a2:	f008 fcdf 	bl	800ee64 <__errno>
 80064a6:	4603      	mov	r3, r0
 80064a8:	220c      	movs	r2, #12
 80064aa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	e006      	b.n	80064c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <_sbrk+0x50>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	4a03      	ldr	r2, [pc, #12]	; (80064c8 <_sbrk+0x50>)
 80064bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20009340 	.word	0x20009340
 80064cc:	20009438 	.word	0x20009438

080064d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <SystemInit+0x28>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	4a07      	ldr	r2, [pc, #28]	; (80064f8 <SystemInit+0x28>)
 80064dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <SystemInit+0x28>)
 80064e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064ea:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064ec:	bf00      	nop
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	; 0x38
 8006500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	609a      	str	r2, [r3, #8]
 800650e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006510:	f107 031c 	add.w	r3, r7, #28
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800651c:	463b      	mov	r3, r7
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	611a      	str	r2, [r3, #16]
 800652a:	615a      	str	r2, [r3, #20]
 800652c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800652e:	4b38      	ldr	r3, [pc, #224]	; (8006610 <MX_TIM2_Init+0x114>)
 8006530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006536:	4b36      	ldr	r3, [pc, #216]	; (8006610 <MX_TIM2_Init+0x114>)
 8006538:	2200      	movs	r2, #0
 800653a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800653c:	4b34      	ldr	r3, [pc, #208]	; (8006610 <MX_TIM2_Init+0x114>)
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8500;
 8006542:	4b33      	ldr	r3, [pc, #204]	; (8006610 <MX_TIM2_Init+0x114>)
 8006544:	f242 1234 	movw	r2, #8500	; 0x2134
 8006548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <MX_TIM2_Init+0x114>)
 800654c:	2200      	movs	r2, #0
 800654e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006550:	4b2f      	ldr	r3, [pc, #188]	; (8006610 <MX_TIM2_Init+0x114>)
 8006552:	2280      	movs	r2, #128	; 0x80
 8006554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006556:	482e      	ldr	r0, [pc, #184]	; (8006610 <MX_TIM2_Init+0x114>)
 8006558:	f005 f876 	bl	800b648 <HAL_TIM_Base_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8006562:	f7ff f841 	bl	80055e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800656c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006570:	4619      	mov	r1, r3
 8006572:	4827      	ldr	r0, [pc, #156]	; (8006610 <MX_TIM2_Init+0x114>)
 8006574:	f005 fd40 	bl	800bff8 <HAL_TIM_ConfigClockSource>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800657e:	f7ff f833 	bl	80055e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006582:	4823      	ldr	r0, [pc, #140]	; (8006610 <MX_TIM2_Init+0x114>)
 8006584:	f005 f930 	bl	800b7e8 <HAL_TIM_PWM_Init>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800658e:	f7ff f82b 	bl	80055e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800659a:	f107 031c 	add.w	r3, r7, #28
 800659e:	4619      	mov	r1, r3
 80065a0:	481b      	ldr	r0, [pc, #108]	; (8006610 <MX_TIM2_Init+0x114>)
 80065a2:	f006 fb05 	bl	800cbb0 <HAL_TIMEx_MasterConfigSynchronization>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80065ac:	f7ff f81c 	bl	80055e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80065b0:	2370      	movs	r3, #112	; 0x70
 80065b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80065b8:	2302      	movs	r3, #2
 80065ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80065bc:	2304      	movs	r3, #4
 80065be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065c0:	463b      	mov	r3, r7
 80065c2:	2200      	movs	r2, #0
 80065c4:	4619      	mov	r1, r3
 80065c6:	4812      	ldr	r0, [pc, #72]	; (8006610 <MX_TIM2_Init+0x114>)
 80065c8:	f005 fc02 	bl	800bdd0 <HAL_TIM_PWM_ConfigChannel>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80065d2:	f7ff f809 	bl	80055e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065d6:	463b      	mov	r3, r7
 80065d8:	2204      	movs	r2, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	480c      	ldr	r0, [pc, #48]	; (8006610 <MX_TIM2_Init+0x114>)
 80065de:	f005 fbf7 	bl	800bdd0 <HAL_TIM_PWM_ConfigChannel>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80065e8:	f7fe fffe 	bl	80055e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80065ec:	463b      	mov	r3, r7
 80065ee:	2208      	movs	r2, #8
 80065f0:	4619      	mov	r1, r3
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <MX_TIM2_Init+0x114>)
 80065f4:	f005 fbec 	bl	800bdd0 <HAL_TIM_PWM_ConfigChannel>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80065fe:	f7fe fff3 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006602:	4803      	ldr	r0, [pc, #12]	; (8006610 <MX_TIM2_Init+0x114>)
 8006604:	f000 f82a 	bl	800665c <HAL_TIM_MspPostInit>

}
 8006608:	bf00      	nop
 800660a:	3738      	adds	r7, #56	; 0x38
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20009344 	.word	0x20009344

08006614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006624:	d113      	bne.n	800664e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <HAL_TIM_Base_MspInit+0x44>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662a:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <HAL_TIM_Base_MspInit+0x44>)
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	6593      	str	r3, [r2, #88]	; 0x58
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <HAL_TIM_Base_MspInit+0x44>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	2100      	movs	r1, #0
 8006642:	201c      	movs	r0, #28
 8006644:	f001 fe61 	bl	800830a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006648:	201c      	movs	r0, #28
 800664a:	f001 fe78 	bl	800833e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40021000 	.word	0x40021000

0800665c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	605a      	str	r2, [r3, #4]
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667c:	d11c      	bne.n	80066b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800667e:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <HAL_TIM_MspPostInit+0x64>)
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <HAL_TIM_MspPostInit+0x64>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800668a:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <HAL_TIM_MspPostInit+0x64>)
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8006696:	2307      	movs	r3, #7
 8006698:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669a:	2302      	movs	r3, #2
 800669c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a2:	2303      	movs	r3, #3
 80066a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80066a6:	2301      	movs	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4619      	mov	r1, r3
 80066b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066b4:	f003 f9e6 	bl	8009a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80066b8:	bf00      	nop
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40021000 	.word	0x40021000

080066c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80066c8:	4b22      	ldr	r3, [pc, #136]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <MX_USART3_UART_Init+0x94>)
 80066cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80066d6:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066d8:	2200      	movs	r2, #0
 80066da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066de:	2200      	movs	r2, #0
 80066e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80066e8:	4b1a      	ldr	r3, [pc, #104]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066ea:	220c      	movs	r2, #12
 80066ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066ee:	4b19      	ldr	r3, [pc, #100]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80066f4:	4b17      	ldr	r3, [pc, #92]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066fa:	4b16      	ldr	r3, [pc, #88]	; (8006754 <MX_USART3_UART_Init+0x90>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006700:	4b14      	ldr	r3, [pc, #80]	; (8006754 <MX_USART3_UART_Init+0x90>)
 8006702:	2200      	movs	r2, #0
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006706:	4b13      	ldr	r3, [pc, #76]	; (8006754 <MX_USART3_UART_Init+0x90>)
 8006708:	2200      	movs	r2, #0
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800670c:	4811      	ldr	r0, [pc, #68]	; (8006754 <MX_USART3_UART_Init+0x90>)
 800670e:	f006 fb2b 	bl	800cd68 <HAL_UART_Init>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006718:	f7fe ff66 	bl	80055e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800671c:	2100      	movs	r1, #0
 800671e:	480d      	ldr	r0, [pc, #52]	; (8006754 <MX_USART3_UART_Init+0x90>)
 8006720:	f008 facd 	bl	800ecbe <HAL_UARTEx_SetTxFifoThreshold>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800672a:	f7fe ff5d 	bl	80055e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800672e:	2100      	movs	r1, #0
 8006730:	4808      	ldr	r0, [pc, #32]	; (8006754 <MX_USART3_UART_Init+0x90>)
 8006732:	f008 fb02 	bl	800ed3a <HAL_UARTEx_SetRxFifoThreshold>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800673c:	f7fe ff54 	bl	80055e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006740:	4804      	ldr	r0, [pc, #16]	; (8006754 <MX_USART3_UART_Init+0x90>)
 8006742:	f008 fa83 	bl	800ec4c <HAL_UARTEx_DisableFifoMode>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800674c:	f7fe ff4c 	bl	80055e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006750:	bf00      	nop
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20009390 	.word	0x20009390
 8006758:	40004800 	.word	0x40004800

0800675c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b09e      	sub	sp, #120	; 0x78
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006764:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006774:	f107 0310 	add.w	r3, r7, #16
 8006778:	2254      	movs	r2, #84	; 0x54
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f008 fba9 	bl	800eed4 <memset>
  if(uartHandle->Instance==USART3)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a23      	ldr	r2, [pc, #140]	; (8006814 <HAL_UART_MspInit+0xb8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d13e      	bne.n	800680a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800678c:	2304      	movs	r3, #4
 800678e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	4618      	mov	r0, r3
 800679a:	f004 f8e5 	bl	800a968 <HAL_RCCEx_PeriphCLKConfig>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80067a4:	f7fe ff20 	bl	80055e8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_UART_MspInit+0xbc>)
 80067aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ac:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_UART_MspInit+0xbc>)
 80067ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b2:	6593      	str	r3, [r2, #88]	; 0x58
 80067b4:	4b18      	ldr	r3, [pc, #96]	; (8006818 <HAL_UART_MspInit+0xbc>)
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067c0:	4b15      	ldr	r3, [pc, #84]	; (8006818 <HAL_UART_MspInit+0xbc>)
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	4a14      	ldr	r2, [pc, #80]	; (8006818 <HAL_UART_MspInit+0xbc>)
 80067c6:	f043 0304 	orr.w	r3, r3, #4
 80067ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067cc:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_UART_MspInit+0xbc>)
 80067ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80067d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80067dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067de:	2302      	movs	r3, #2
 80067e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e6:	2300      	movs	r3, #0
 80067e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80067ea:	2307      	movs	r3, #7
 80067ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80067f2:	4619      	mov	r1, r3
 80067f4:	4809      	ldr	r0, [pc, #36]	; (800681c <HAL_UART_MspInit+0xc0>)
 80067f6:	f003 f945 	bl	8009a84 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	2027      	movs	r0, #39	; 0x27
 8006800:	f001 fd83 	bl	800830a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006804:	2027      	movs	r0, #39	; 0x27
 8006806:	f001 fd9a 	bl	800833e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800680a:	bf00      	nop
 800680c:	3778      	adds	r7, #120	; 0x78
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40004800 	.word	0x40004800
 8006818:	40021000 	.word	0x40021000
 800681c:	48000800 	.word	0x48000800

08006820 <__io_putchar>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xffff);
 8006828:	1d39      	adds	r1, r7, #4
 800682a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800682e:	2201      	movs	r2, #1
 8006830:	4803      	ldr	r0, [pc, #12]	; (8006840 <__io_putchar+0x20>)
 8006832:	f006 fae9 	bl	800ce08 <HAL_UART_Transmit>
return 0;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20009390 	.word	0x20009390

08006844 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 800684c:	2201      	movs	r2, #1
 800684e:	4904      	ldr	r1, [pc, #16]	; (8006860 <HAL_UART_RxCpltCallback+0x1c>)
 8006850:	4804      	ldr	r0, [pc, #16]	; (8006864 <HAL_UART_RxCpltCallback+0x20>)
 8006852:	f006 fb6f 	bl	800cf34 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20009274 	.word	0x20009274
 8006864:	20009390 	.word	0x20009390

08006868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006868:	480d      	ldr	r0, [pc, #52]	; (80068a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800686a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800686c:	480d      	ldr	r0, [pc, #52]	; (80068a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800686e:	490e      	ldr	r1, [pc, #56]	; (80068a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006870:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <LoopForever+0xe>)
  movs r3, #0
 8006872:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006874:	e002      	b.n	800687c <LoopCopyDataInit>

08006876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800687a:	3304      	adds	r3, #4

0800687c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800687c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800687e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006880:	d3f9      	bcc.n	8006876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006882:	4a0b      	ldr	r2, [pc, #44]	; (80068b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006884:	4c0b      	ldr	r4, [pc, #44]	; (80068b4 <LoopForever+0x16>)
  movs r3, #0
 8006886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006888:	e001      	b.n	800688e <LoopFillZerobss>

0800688a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800688a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800688c:	3204      	adds	r2, #4

0800688e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800688e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006890:	d3fb      	bcc.n	800688a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006892:	f7ff fe1d 	bl	80064d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006896:	f008 faeb 	bl	800ee70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800689a:	f7fe f8db 	bl	8004a54 <main>

0800689e <LoopForever>:

LoopForever:
    b LoopForever
 800689e:	e7fe      	b.n	800689e <LoopForever>
  ldr   r0, =_estack
 80068a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068a8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80068ac:	080155e0 	.word	0x080155e0
  ldr r2, =_sbss
 80068b0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80068b4:	20009434 	.word	0x20009434

080068b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80068b8:	e7fe      	b.n	80068b8 <ADC1_2_IRQHandler>

080068ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068c4:	2003      	movs	r0, #3
 80068c6:	f001 fd15 	bl	80082f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068ca:	2000      	movs	r0, #0
 80068cc:	f000 f80e 	bl	80068ec <HAL_InitTick>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	71fb      	strb	r3, [r7, #7]
 80068da:	e001      	b.n	80068e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068dc:	f7ff fbec 	bl	80060b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068e0:	79fb      	ldrb	r3, [r7, #7]

}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80068f8:	4b16      	ldr	r3, [pc, #88]	; (8006954 <HAL_InitTick+0x68>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d022      	beq.n	8006946 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006900:	4b15      	ldr	r3, [pc, #84]	; (8006958 <HAL_InitTick+0x6c>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b13      	ldr	r3, [pc, #76]	; (8006954 <HAL_InitTick+0x68>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800690c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fd20 	bl	800835a <HAL_SYSTICK_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10f      	bne.n	8006940 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d809      	bhi.n	800693a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006926:	2200      	movs	r2, #0
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	f001 fcec 	bl	800830a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <HAL_InitTick+0x70>)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e007      	b.n	800694a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	73fb      	strb	r3, [r7, #15]
 800693e:	e004      	b.n	800694a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e001      	b.n	800694a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000008 	.word	0x20000008
 8006958:	20000000 	.word	0x20000000
 800695c:	20000004 	.word	0x20000004

08006960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <HAL_IncTick+0x1c>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <HAL_IncTick+0x20>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4413      	add	r3, r2
 800696e:	4a03      	ldr	r2, [pc, #12]	; (800697c <HAL_IncTick+0x1c>)
 8006970:	6013      	str	r3, [r2, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20009420 	.word	0x20009420
 8006980:	20000008 	.word	0x20000008

08006984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return uwTick;
 8006988:	4b03      	ldr	r3, [pc, #12]	; (8006998 <HAL_GetTick+0x14>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20009420 	.word	0x20009420

0800699c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069a4:	f7ff ffee 	bl	8006984 <HAL_GetTick>
 80069a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d004      	beq.n	80069c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <HAL_Delay+0x40>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069c0:	bf00      	nop
 80069c2:	f7ff ffdf 	bl	8006984 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d8f7      	bhi.n	80069c2 <HAL_Delay+0x26>
  {
  }
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000008 	.word	0x20000008

080069e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	609a      	str	r2, [r3, #8]
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3360      	adds	r3, #96	; 0x60
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <LL_ADC_SetOffset+0x44>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	03fff000 	.word	0x03fff000

08006a90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3360      	adds	r3, #96	; 0x60
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3360      	adds	r3, #96	; 0x60
 8006acc:	461a      	mov	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b087      	sub	sp, #28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3360      	adds	r3, #96	; 0x60
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3360      	adds	r3, #96	; 0x60
 8006b38:	461a      	mov	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	615a      	str	r2, [r3, #20]
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	4413      	add	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	211f      	movs	r1, #31
 8006bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	401a      	ands	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	0e9b      	lsrs	r3, r3, #26
 8006be2:	f003 011f 	and.w	r1, r3, #31
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b087      	sub	sp, #28
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3314      	adds	r3, #20
 8006c12:	461a      	mov	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	0e5b      	lsrs	r3, r3, #25
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	4413      	add	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	0d1b      	lsrs	r3, r3, #20
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	2107      	movs	r1, #7
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	401a      	ands	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	0d1b      	lsrs	r3, r3, #20
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	431a      	orrs	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a0f      	ldr	r2, [pc, #60]	; (8006ca4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10a      	bne.n	8006c82 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006c80:	e00a      	b.n	8006c98 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	401a      	ands	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	407f0000 	.word	0x407f0000

08006ca8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6093      	str	r3, [r2, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d18:	d101      	bne.n	8006d1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d68:	d101      	bne.n	8006d6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d90:	f043 0201 	orr.w	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <LL_ADC_IsEnabled+0x18>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <LL_ADC_IsEnabled+0x1a>
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dde:	f043 0204 	orr.w	r2, r3, #4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d101      	bne.n	8006e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d101      	bne.n	8006e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b089      	sub	sp, #36	; 0x24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e1af      	b.n	80071ba <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d109      	bne.n	8006e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fa fb0f 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff ff3f 	bl	8006d04 <LL_ADC_IsDeepPowerDownEnabled>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff ff25 	bl	8006ce0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff ff5a 	bl	8006d54 <LL_ADC_IsInternalRegulatorEnabled>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d115      	bne.n	8006ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ff3e 	bl	8006d2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006eb0:	4b9f      	ldr	r3, [pc, #636]	; (8007130 <HAL_ADC_Init+0x2f0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	4a9f      	ldr	r2, [pc, #636]	; (8007134 <HAL_ADC_Init+0x2f4>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	099b      	lsrs	r3, r3, #6
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ec4:	e002      	b.n	8006ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f9      	bne.n	8006ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff ff3c 	bl	8006d54 <LL_ADC_IsInternalRegulatorEnabled>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee6:	f043 0210 	orr.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef2:	f043 0201 	orr.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff ff75 	bl	8006df2 <LL_ADC_REG_IsConversionOngoing>
 8006f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 8148 	bne.w	80071a8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 8144 	bne.w	80071a8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006f28:	f043 0202 	orr.w	r2, r3, #2
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ff35 	bl	8006da4 <LL_ADC_IsEnabled>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d141      	bne.n	8006fc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f48:	d004      	beq.n	8006f54 <HAL_ADC_Init+0x114>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7a      	ldr	r2, [pc, #488]	; (8007138 <HAL_ADC_Init+0x2f8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10f      	bne.n	8006f74 <HAL_ADC_Init+0x134>
 8006f54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006f58:	f7ff ff24 	bl	8006da4 <LL_ADC_IsEnabled>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	4876      	ldr	r0, [pc, #472]	; (8007138 <HAL_ADC_Init+0x2f8>)
 8006f60:	f7ff ff20 	bl	8006da4 <LL_ADC_IsEnabled>
 8006f64:	4603      	mov	r3, r0
 8006f66:	4323      	orrs	r3, r4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e012      	b.n	8006f9a <HAL_ADC_Init+0x15a>
 8006f74:	4871      	ldr	r0, [pc, #452]	; (800713c <HAL_ADC_Init+0x2fc>)
 8006f76:	f7ff ff15 	bl	8006da4 <LL_ADC_IsEnabled>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4870      	ldr	r0, [pc, #448]	; (8007140 <HAL_ADC_Init+0x300>)
 8006f7e:	f7ff ff11 	bl	8006da4 <LL_ADC_IsEnabled>
 8006f82:	4603      	mov	r3, r0
 8006f84:	431c      	orrs	r4, r3
 8006f86:	486f      	ldr	r0, [pc, #444]	; (8007144 <HAL_ADC_Init+0x304>)
 8006f88:	f7ff ff0c 	bl	8006da4 <LL_ADC_IsEnabled>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	4323      	orrs	r3, r4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf0c      	ite	eq
 8006f94:	2301      	moveq	r3, #1
 8006f96:	2300      	movne	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d012      	beq.n	8006fc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fa6:	d004      	beq.n	8006fb2 <HAL_ADC_Init+0x172>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a62      	ldr	r2, [pc, #392]	; (8007138 <HAL_ADC_Init+0x2f8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d101      	bne.n	8006fb6 <HAL_ADC_Init+0x176>
 8006fb2:	4a65      	ldr	r2, [pc, #404]	; (8007148 <HAL_ADC_Init+0x308>)
 8006fb4:	e000      	b.n	8006fb8 <HAL_ADC_Init+0x178>
 8006fb6:	4a65      	ldr	r2, [pc, #404]	; (800714c <HAL_ADC_Init+0x30c>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7ff fd0e 	bl	80069e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7f5b      	ldrb	r3, [r3, #29]
 8006fc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006fd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006fda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fe2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d106      	bne.n	8007000 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	045b      	lsls	r3, r3, #17
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	4b4b      	ldr	r3, [pc, #300]	; (8007150 <HAL_ADC_Init+0x310>)
 8007024:	4013      	ands	r3, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	69b9      	ldr	r1, [r7, #24]
 800702c:	430b      	orrs	r3, r1
 800702e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fed1 	bl	8006df2 <LL_ADC_REG_IsConversionOngoing>
 8007050:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fede 	bl	8006e18 <LL_ADC_INJ_IsConversionOngoing>
 800705c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d17f      	bne.n	8007164 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d17c      	bne.n	8007164 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800706e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007076:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007086:	f023 0302 	bic.w	r3, r3, #2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	69b9      	ldr	r1, [r7, #24]
 8007090:	430b      	orrs	r3, r1
 8007092:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80070b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6911      	ldr	r1, [r2, #16]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6812      	ldr	r2, [r2, #0]
 80070c4:	430b      	orrs	r3, r1
 80070c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80070ca:	e013      	b.n	80070f4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80070ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d12a      	bne.n	8007154 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007114:	4311      	orrs	r1, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800711a:	4311      	orrs	r1, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007120:	430a      	orrs	r2, r1
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0201 	orr.w	r2, r2, #1
 800712c:	611a      	str	r2, [r3, #16]
 800712e:	e019      	b.n	8007164 <HAL_ADC_Init+0x324>
 8007130:	20000000 	.word	0x20000000
 8007134:	053e2d63 	.word	0x053e2d63
 8007138:	50000100 	.word	0x50000100
 800713c:	50000400 	.word	0x50000400
 8007140:	50000500 	.word	0x50000500
 8007144:	50000600 	.word	0x50000600
 8007148:	50000300 	.word	0x50000300
 800714c:	50000700 	.word	0x50000700
 8007150:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d10c      	bne.n	8007186 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f023 010f 	bic.w	r1, r3, #15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1e5a      	subs	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
 8007184:	e007      	b.n	8007196 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 020f 	bic.w	r2, r2, #15
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80071a6:	e007      	b.n	80071b8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	f043 0210 	orr.w	r2, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80071b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd90      	pop	{r4, r7, pc}
 80071c2:	bf00      	nop

080071c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071d4:	d004      	beq.n	80071e0 <HAL_ADC_Start+0x1c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a67      	ldr	r2, [pc, #412]	; (8007378 <HAL_ADC_Start+0x1b4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d101      	bne.n	80071e4 <HAL_ADC_Start+0x20>
 80071e0:	4b66      	ldr	r3, [pc, #408]	; (800737c <HAL_ADC_Start+0x1b8>)
 80071e2:	e000      	b.n	80071e6 <HAL_ADC_Start+0x22>
 80071e4:	4b66      	ldr	r3, [pc, #408]	; (8007380 <HAL_ADC_Start+0x1bc>)
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fd5e 	bl	8006ca8 <LL_ADC_GetMultimode>
 80071ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff fdfd 	bl	8006df2 <LL_ADC_REG_IsConversionOngoing>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 80b4 	bne.w	8007368 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_ADC_Start+0x4a>
 800720a:	2302      	movs	r3, #2
 800720c:	e0af      	b.n	800736e <HAL_ADC_Start+0x1aa>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fe0c 	bl	8007e34 <ADC_Enable>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f040 809b 	bne.w	800735e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a4d      	ldr	r2, [pc, #308]	; (8007378 <HAL_ADC_Start+0x1b4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d009      	beq.n	800725a <HAL_ADC_Start+0x96>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a4e      	ldr	r2, [pc, #312]	; (8007384 <HAL_ADC_Start+0x1c0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d002      	beq.n	8007256 <HAL_ADC_Start+0x92>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	e003      	b.n	800725e <HAL_ADC_Start+0x9a>
 8007256:	4b4c      	ldr	r3, [pc, #304]	; (8007388 <HAL_ADC_Start+0x1c4>)
 8007258:	e001      	b.n	800725e <HAL_ADC_Start+0x9a>
 800725a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	4293      	cmp	r3, r2
 8007264:	d002      	beq.n	800726c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007270:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007284:	d106      	bne.n	8007294 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728a:	f023 0206 	bic.w	r2, r3, #6
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	661a      	str	r2, [r3, #96]	; 0x60
 8007292:	e002      	b.n	800729a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	221c      	movs	r2, #28
 80072a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a32      	ldr	r2, [pc, #200]	; (8007378 <HAL_ADC_Start+0x1b4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d009      	beq.n	80072c8 <HAL_ADC_Start+0x104>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a32      	ldr	r2, [pc, #200]	; (8007384 <HAL_ADC_Start+0x1c0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d002      	beq.n	80072c4 <HAL_ADC_Start+0x100>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	e003      	b.n	80072cc <HAL_ADC_Start+0x108>
 80072c4:	4b30      	ldr	r3, [pc, #192]	; (8007388 <HAL_ADC_Start+0x1c4>)
 80072c6:	e001      	b.n	80072cc <HAL_ADC_Start+0x108>
 80072c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d008      	beq.n	80072e6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b05      	cmp	r3, #5
 80072de:	d002      	beq.n	80072e6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d114      	bne.n	8007310 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fd5e 	bl	8006dca <LL_ADC_REG_StartConversion>
 800730e:	e02d      	b.n	800736c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007314:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a15      	ldr	r2, [pc, #84]	; (8007378 <HAL_ADC_Start+0x1b4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_ADC_Start+0x176>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <HAL_ADC_Start+0x1c0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d002      	beq.n	8007336 <HAL_ADC_Start+0x172>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	e003      	b.n	800733e <HAL_ADC_Start+0x17a>
 8007336:	4b14      	ldr	r3, [pc, #80]	; (8007388 <HAL_ADC_Start+0x1c4>)
 8007338:	e001      	b.n	800733e <HAL_ADC_Start+0x17a>
 800733a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800733e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00f      	beq.n	800736c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007350:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007354:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	65da      	str	r2, [r3, #92]	; 0x5c
 800735c:	e006      	b.n	800736c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007366:	e001      	b.n	800736c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007368:	2302      	movs	r3, #2
 800736a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	50000100 	.word	0x50000100
 800737c:	50000300 	.word	0x50000300
 8007380:	50000700 	.word	0x50000700
 8007384:	50000500 	.word	0x50000500
 8007388:	50000400 	.word	0x50000400

0800738c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800739e:	d004      	beq.n	80073aa <HAL_ADC_PollForConversion+0x1e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a77      	ldr	r2, [pc, #476]	; (8007584 <HAL_ADC_PollForConversion+0x1f8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <HAL_ADC_PollForConversion+0x22>
 80073aa:	4b77      	ldr	r3, [pc, #476]	; (8007588 <HAL_ADC_PollForConversion+0x1fc>)
 80073ac:	e000      	b.n	80073b0 <HAL_ADC_PollForConversion+0x24>
 80073ae:	4b77      	ldr	r3, [pc, #476]	; (800758c <HAL_ADC_PollForConversion+0x200>)
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fc79 	bl	8006ca8 <LL_ADC_GetMultimode>
 80073b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d102      	bne.n	80073c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80073c0:	2308      	movs	r3, #8
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e037      	b.n	8007436 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d002      	beq.n	80073d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d111      	bne.n	80073fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	f043 0220 	orr.w	r2, r3, #32
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e0c1      	b.n	800757a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80073f6:	2304      	movs	r3, #4
 80073f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80073fa:	e01c      	b.n	8007436 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007404:	d004      	beq.n	8007410 <HAL_ADC_PollForConversion+0x84>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a5e      	ldr	r2, [pc, #376]	; (8007584 <HAL_ADC_PollForConversion+0x1f8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d101      	bne.n	8007414 <HAL_ADC_PollForConversion+0x88>
 8007410:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <HAL_ADC_PollForConversion+0x1fc>)
 8007412:	e000      	b.n	8007416 <HAL_ADC_PollForConversion+0x8a>
 8007414:	4b5d      	ldr	r3, [pc, #372]	; (800758c <HAL_ADC_PollForConversion+0x200>)
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fc54 	bl	8006cc4 <LL_ADC_GetMultiDMATransfer>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007426:	f043 0220 	orr.w	r2, r3, #32
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e0a3      	b.n	800757a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8007432:	2304      	movs	r3, #4
 8007434:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8007436:	f7ff faa5 	bl	8006984 <HAL_GetTick>
 800743a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800743c:	e021      	b.n	8007482 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d01d      	beq.n	8007482 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8007446:	f7ff fa9d 	bl	8006984 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <HAL_ADC_PollForConversion+0xd0>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d112      	bne.n	8007482 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746e:	f043 0204 	orr.w	r2, r3, #4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e07b      	b.n	800757a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0d6      	beq.n	800743e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007494:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fb6f 	bl	8006b84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01c      	beq.n	80074e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7f5b      	ldrb	r3, [r3, #29]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d118      	bne.n	80074e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b08      	cmp	r3, #8
 80074c0:	d111      	bne.n	80074e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d105      	bne.n	80074e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a26      	ldr	r2, [pc, #152]	; (8007584 <HAL_ADC_PollForConversion+0x1f8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_ADC_PollForConversion+0x178>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a26      	ldr	r2, [pc, #152]	; (8007590 <HAL_ADC_PollForConversion+0x204>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d002      	beq.n	8007500 <HAL_ADC_PollForConversion+0x174>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	e003      	b.n	8007508 <HAL_ADC_PollForConversion+0x17c>
 8007500:	4b24      	ldr	r3, [pc, #144]	; (8007594 <HAL_ADC_PollForConversion+0x208>)
 8007502:	e001      	b.n	8007508 <HAL_ADC_PollForConversion+0x17c>
 8007504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6812      	ldr	r2, [r2, #0]
 800750c:	4293      	cmp	r3, r2
 800750e:	d008      	beq.n	8007522 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b05      	cmp	r3, #5
 800751a:	d002      	beq.n	8007522 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d104      	bne.n	800752c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	e014      	b.n	8007556 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a14      	ldr	r2, [pc, #80]	; (8007584 <HAL_ADC_PollForConversion+0x1f8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d009      	beq.n	800754a <HAL_ADC_PollForConversion+0x1be>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <HAL_ADC_PollForConversion+0x204>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d002      	beq.n	8007546 <HAL_ADC_PollForConversion+0x1ba>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	e003      	b.n	800754e <HAL_ADC_PollForConversion+0x1c2>
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <HAL_ADC_PollForConversion+0x208>)
 8007548:	e001      	b.n	800754e <HAL_ADC_PollForConversion+0x1c2>
 800754a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800754e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d104      	bne.n	8007566 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2208      	movs	r2, #8
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	e008      	b.n	8007578 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	220c      	movs	r2, #12
 8007576:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3720      	adds	r7, #32
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	50000100 	.word	0x50000100
 8007588:	50000300 	.word	0x50000300
 800758c:	50000700 	.word	0x50000700
 8007590:	50000500 	.word	0x50000500
 8007594:	50000400 	.word	0x50000400

08007598 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b0b6      	sub	sp, #216	; 0xd8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d102      	bne.n	80075d8 <HAL_ADC_ConfigChannel+0x24>
 80075d2:	2302      	movs	r3, #2
 80075d4:	f000 bc13 	b.w	8007dfe <HAL_ADC_ConfigChannel+0x84a>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fc04 	bl	8006df2 <LL_ADC_REG_IsConversionOngoing>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 83f3 	bne.w	8007dd8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7ff fad3 	bl	8006baa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff fbf2 	bl	8006df2 <LL_ADC_REG_IsConversionOngoing>
 800760e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fbfe 	bl	8006e18 <LL_ADC_INJ_IsConversionOngoing>
 800761c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007620:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 81d9 	bne.w	80079dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800762a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 81d4 	bne.w	80079dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763c:	d10f      	bne.n	800765e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2200      	movs	r2, #0
 8007648:	4619      	mov	r1, r3
 800764a:	f7ff fada 	bl	8006c02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fa81 	bl	8006b5e <LL_ADC_SetSamplingTimeCommonConfig>
 800765c:	e00e      	b.n	800767c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6819      	ldr	r1, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	461a      	mov	r2, r3
 800766c:	f7ff fac9 	bl	8006c02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fa71 	bl	8006b5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695a      	ldr	r2, [r3, #20]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d022      	beq.n	80076e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6919      	ldr	r1, [r3, #16]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076ae:	f7ff f9cb 	bl	8006a48 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6919      	ldr	r1, [r3, #16]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	461a      	mov	r2, r3
 80076c0:	f7ff fa17 	bl	8006af2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6919      	ldr	r1, [r3, #16]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	7f1b      	ldrb	r3, [r3, #28]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d102      	bne.n	80076da <HAL_ADC_ConfigChannel+0x126>
 80076d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076d8:	e000      	b.n	80076dc <HAL_ADC_ConfigChannel+0x128>
 80076da:	2300      	movs	r3, #0
 80076dc:	461a      	mov	r2, r3
 80076de:	f7ff fa23 	bl	8006b28 <LL_ADC_SetOffsetSaturation>
 80076e2:	e17b      	b.n	80079dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff f9d0 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x15c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff f9c5 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 8007706:	4603      	mov	r3, r0
 8007708:	0e9b      	lsrs	r3, r3, #26
 800770a:	f003 021f 	and.w	r2, r3, #31
 800770e:	e01e      	b.n	800774e <HAL_ADC_ConfigChannel+0x19a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2100      	movs	r1, #0
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff f9ba 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 800771c:	4603      	mov	r3, r0
 800771e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007726:	fa93 f3a3 	rbit	r3, r3
 800772a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800772e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800773e:	2320      	movs	r3, #32
 8007740:	e004      	b.n	800774c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007746:	fab3 f383 	clz	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <HAL_ADC_ConfigChannel+0x1b2>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	0e9b      	lsrs	r3, r3, #26
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	e018      	b.n	8007798 <HAL_ADC_ConfigChannel+0x1e4>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007772:	fa93 f3a3 	rbit	r3, r3
 8007776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800777a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800777e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800778a:	2320      	movs	r3, #32
 800778c:	e004      	b.n	8007798 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800778e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007792:	fab3 f383 	clz	r3, r3
 8007796:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007798:	429a      	cmp	r2, r3
 800779a:	d106      	bne.n	80077aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2200      	movs	r2, #0
 80077a2:	2100      	movs	r1, #0
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff f989 	bl	8006abc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2101      	movs	r1, #1
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff f96d 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <HAL_ADC_ConfigChannel+0x222>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2101      	movs	r1, #1
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff f962 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 80077cc:	4603      	mov	r3, r0
 80077ce:	0e9b      	lsrs	r3, r3, #26
 80077d0:	f003 021f 	and.w	r2, r3, #31
 80077d4:	e01e      	b.n	8007814 <HAL_ADC_ConfigChannel+0x260>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2101      	movs	r1, #1
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff f957 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077ec:	fa93 f3a3 	rbit	r3, r3
 80077f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80077f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80077fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007804:	2320      	movs	r3, #32
 8007806:	e004      	b.n	8007812 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800780c:	fab3 f383 	clz	r3, r3
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <HAL_ADC_ConfigChannel+0x278>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	0e9b      	lsrs	r3, r3, #26
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	e018      	b.n	800785e <HAL_ADC_ConfigChannel+0x2aa>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007838:	fa93 f3a3 	rbit	r3, r3
 800783c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007840:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007850:	2320      	movs	r3, #32
 8007852:	e004      	b.n	800785e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007858:	fab3 f383 	clz	r3, r3
 800785c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800785e:	429a      	cmp	r2, r3
 8007860:	d106      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff f926 	bl	8006abc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2102      	movs	r1, #2
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff f90a 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 800787c:	4603      	mov	r3, r0
 800787e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <HAL_ADC_ConfigChannel+0x2e8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2102      	movs	r1, #2
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff f8ff 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 8007892:	4603      	mov	r3, r0
 8007894:	0e9b      	lsrs	r3, r3, #26
 8007896:	f003 021f 	and.w	r2, r3, #31
 800789a:	e01e      	b.n	80078da <HAL_ADC_ConfigChannel+0x326>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2102      	movs	r1, #2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff f8f4 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b2:	fa93 f3a3 	rbit	r3, r3
 80078b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80078ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80078c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80078ca:	2320      	movs	r3, #32
 80078cc:	e004      	b.n	80078d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80078ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078d2:	fab3 f383 	clz	r3, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <HAL_ADC_ConfigChannel+0x33e>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	0e9b      	lsrs	r3, r3, #26
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	e016      	b.n	8007920 <HAL_ADC_ConfigChannel+0x36c>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078fe:	fa93 f3a3 	rbit	r3, r3
 8007902:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800790a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007912:	2320      	movs	r3, #32
 8007914:	e004      	b.n	8007920 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800791a:	fab3 f383 	clz	r3, r3
 800791e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007920:	429a      	cmp	r2, r3
 8007922:	d106      	bne.n	8007932 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2200      	movs	r2, #0
 800792a:	2102      	movs	r1, #2
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff f8c5 	bl	8006abc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2103      	movs	r1, #3
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff f8a9 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 800793e:	4603      	mov	r3, r0
 8007940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <HAL_ADC_ConfigChannel+0x3aa>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2103      	movs	r1, #3
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff f89e 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 8007954:	4603      	mov	r3, r0
 8007956:	0e9b      	lsrs	r3, r3, #26
 8007958:	f003 021f 	and.w	r2, r3, #31
 800795c:	e017      	b.n	800798e <HAL_ADC_ConfigChannel+0x3da>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2103      	movs	r1, #3
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff f893 	bl	8006a90 <LL_ADC_GetOffsetChannel>
 800796a:	4603      	mov	r3, r0
 800796c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800796e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007970:	fa93 f3a3 	rbit	r3, r3
 8007974:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007978:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800797a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007980:	2320      	movs	r3, #32
 8007982:	e003      	b.n	800798c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007986:	fab3 f383 	clz	r3, r3
 800798a:	b2db      	uxtb	r3, r3
 800798c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <HAL_ADC_ConfigChannel+0x3f2>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	0e9b      	lsrs	r3, r3, #26
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	e011      	b.n	80079ca <HAL_ADC_ConfigChannel+0x416>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ae:	fa93 f3a3 	rbit	r3, r3
 80079b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80079b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80079b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80079be:	2320      	movs	r3, #32
 80079c0:	e003      	b.n	80079ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	fab3 f383 	clz	r3, r3
 80079c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d106      	bne.n	80079dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2200      	movs	r2, #0
 80079d4:	2103      	movs	r1, #3
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff f870 	bl	8006abc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff f9df 	bl	8006da4 <LL_ADC_IsEnabled>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f040 813d 	bne.w	8007c68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6819      	ldr	r1, [r3, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7ff f92c 	bl	8006c58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4aa2      	ldr	r2, [pc, #648]	; (8007c90 <HAL_ADC_ConfigChannel+0x6dc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	f040 812e 	bne.w	8007c68 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <HAL_ADC_ConfigChannel+0x480>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	0e9b      	lsrs	r3, r3, #26
 8007a22:	3301      	adds	r3, #1
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	bf94      	ite	ls
 8007a2c:	2301      	movls	r3, #1
 8007a2e:	2300      	movhi	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e019      	b.n	8007a68 <HAL_ADC_ConfigChannel+0x4b4>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a3c:	fa93 f3a3 	rbit	r3, r3
 8007a40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	e003      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a52:	fab3 f383 	clz	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2b09      	cmp	r3, #9
 8007a60:	bf94      	ite	ls
 8007a62:	2301      	movls	r3, #1
 8007a64:	2300      	movhi	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d079      	beq.n	8007b60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d107      	bne.n	8007a88 <HAL_ADC_ConfigChannel+0x4d4>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	0e9b      	lsrs	r3, r3, #26
 8007a7e:	3301      	adds	r3, #1
 8007a80:	069b      	lsls	r3, r3, #26
 8007a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007a86:	e015      	b.n	8007ab4 <HAL_ADC_ConfigChannel+0x500>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a90:	fa93 f3a3 	rbit	r3, r3
 8007a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	e003      	b.n	8007aac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa6:	fab3 f383 	clz	r3, r3
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	3301      	adds	r3, #1
 8007aae:	069b      	lsls	r3, r3, #26
 8007ab0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <HAL_ADC_ConfigChannel+0x520>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	0e9b      	lsrs	r3, r3, #26
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	2101      	movs	r1, #1
 8007ace:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad2:	e017      	b.n	8007b04 <HAL_ADC_ConfigChannel+0x550>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007adc:	fa93 f3a3 	rbit	r3, r3
 8007ae0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007aec:	2320      	movs	r3, #32
 8007aee:	e003      	b.n	8007af8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af2:	fab3 f383 	clz	r3, r3
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	3301      	adds	r3, #1
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	2101      	movs	r1, #1
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	ea42 0103 	orr.w	r1, r2, r3
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <HAL_ADC_ConfigChannel+0x576>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	0e9b      	lsrs	r3, r3, #26
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f003 021f 	and.w	r2, r3, #31
 8007b20:	4613      	mov	r3, r2
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	4413      	add	r3, r2
 8007b26:	051b      	lsls	r3, r3, #20
 8007b28:	e018      	b.n	8007b5c <HAL_ADC_ConfigChannel+0x5a8>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	fa93 f3a3 	rbit	r3, r3
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007b42:	2320      	movs	r3, #32
 8007b44:	e003      	b.n	8007b4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b48:	fab3 f383 	clz	r3, r3
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	3301      	adds	r3, #1
 8007b50:	f003 021f 	and.w	r2, r3, #31
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	e07e      	b.n	8007c5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <HAL_ADC_ConfigChannel+0x5c8>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	0e9b      	lsrs	r3, r3, #26
 8007b72:	3301      	adds	r3, #1
 8007b74:	069b      	lsls	r3, r3, #26
 8007b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b7a:	e015      	b.n	8007ba8 <HAL_ADC_ConfigChannel+0x5f4>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	fa93 f3a3 	rbit	r3, r3
 8007b88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007b94:	2320      	movs	r3, #32
 8007b96:	e003      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	fab3 f383 	clz	r3, r3
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	069b      	lsls	r3, r3, #26
 8007ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <HAL_ADC_ConfigChannel+0x614>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	0e9b      	lsrs	r3, r3, #26
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	e017      	b.n	8007bf8 <HAL_ADC_ConfigChannel+0x644>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	fa93 f3a3 	rbit	r3, r3
 8007bd4:	61fb      	str	r3, [r7, #28]
  return result;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007be0:	2320      	movs	r3, #32
 8007be2:	e003      	b.n	8007bec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	fab3 f383 	clz	r3, r3
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf8:	ea42 0103 	orr.w	r1, r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10d      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x670>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	0e9b      	lsrs	r3, r3, #26
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f003 021f 	and.w	r2, r3, #31
 8007c14:	4613      	mov	r3, r2
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	4413      	add	r3, r2
 8007c1a:	3b1e      	subs	r3, #30
 8007c1c:	051b      	lsls	r3, r3, #20
 8007c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c22:	e01b      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x6a8>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	fa93 f3a3 	rbit	r3, r3
 8007c30:	613b      	str	r3, [r7, #16]
  return result;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	e003      	b.n	8007c48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	fab3 f383 	clz	r3, r3
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f003 021f 	and.w	r2, r3, #31
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	3b1e      	subs	r3, #30
 8007c56:	051b      	lsls	r3, r3, #20
 8007c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	6892      	ldr	r2, [r2, #8]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f7fe ffcd 	bl	8006c02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <HAL_ADC_ConfigChannel+0x6e0>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80be 	beq.w	8007df2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c7e:	d004      	beq.n	8007c8a <HAL_ADC_ConfigChannel+0x6d6>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <HAL_ADC_ConfigChannel+0x6e4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d10a      	bne.n	8007ca0 <HAL_ADC_ConfigChannel+0x6ec>
 8007c8a:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <HAL_ADC_ConfigChannel+0x6e8>)
 8007c8c:	e009      	b.n	8007ca2 <HAL_ADC_ConfigChannel+0x6ee>
 8007c8e:	bf00      	nop
 8007c90:	407f0000 	.word	0x407f0000
 8007c94:	80080000 	.word	0x80080000
 8007c98:	50000100 	.word	0x50000100
 8007c9c:	50000300 	.word	0x50000300
 8007ca0:	4b59      	ldr	r3, [pc, #356]	; (8007e08 <HAL_ADC_ConfigChannel+0x854>)
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fec2 	bl	8006a2c <LL_ADC_GetCommonPathInternalCh>
 8007ca8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a56      	ldr	r2, [pc, #344]	; (8007e0c <HAL_ADC_ConfigChannel+0x858>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d004      	beq.n	8007cc0 <HAL_ADC_ConfigChannel+0x70c>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a55      	ldr	r2, [pc, #340]	; (8007e10 <HAL_ADC_ConfigChannel+0x85c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d13a      	bne.n	8007d36 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d134      	bne.n	8007d36 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cd4:	d005      	beq.n	8007ce2 <HAL_ADC_ConfigChannel+0x72e>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a4e      	ldr	r2, [pc, #312]	; (8007e14 <HAL_ADC_ConfigChannel+0x860>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	f040 8085 	bne.w	8007dec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cea:	d004      	beq.n	8007cf6 <HAL_ADC_ConfigChannel+0x742>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a49      	ldr	r2, [pc, #292]	; (8007e18 <HAL_ADC_ConfigChannel+0x864>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d101      	bne.n	8007cfa <HAL_ADC_ConfigChannel+0x746>
 8007cf6:	4a49      	ldr	r2, [pc, #292]	; (8007e1c <HAL_ADC_ConfigChannel+0x868>)
 8007cf8:	e000      	b.n	8007cfc <HAL_ADC_ConfigChannel+0x748>
 8007cfa:	4a43      	ldr	r2, [pc, #268]	; (8007e08 <HAL_ADC_ConfigChannel+0x854>)
 8007cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fe fe7d 	bl	8006a06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007d0c:	4b44      	ldr	r3, [pc, #272]	; (8007e20 <HAL_ADC_ConfigChannel+0x86c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	099b      	lsrs	r3, r3, #6
 8007d12:	4a44      	ldr	r2, [pc, #272]	; (8007e24 <HAL_ADC_ConfigChannel+0x870>)
 8007d14:	fba2 2303 	umull	r2, r3, r2, r3
 8007d18:	099b      	lsrs	r3, r3, #6
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007d26:	e002      	b.n	8007d2e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f9      	bne.n	8007d28 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007d34:	e05a      	b.n	8007dec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a3b      	ldr	r2, [pc, #236]	; (8007e28 <HAL_ADC_ConfigChannel+0x874>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d125      	bne.n	8007d8c <HAL_ADC_ConfigChannel+0x7d8>
 8007d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d11f      	bne.n	8007d8c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a31      	ldr	r2, [pc, #196]	; (8007e18 <HAL_ADC_ConfigChannel+0x864>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d104      	bne.n	8007d60 <HAL_ADC_ConfigChannel+0x7ac>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a34      	ldr	r2, [pc, #208]	; (8007e2c <HAL_ADC_ConfigChannel+0x878>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d047      	beq.n	8007df0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d68:	d004      	beq.n	8007d74 <HAL_ADC_ConfigChannel+0x7c0>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <HAL_ADC_ConfigChannel+0x864>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d101      	bne.n	8007d78 <HAL_ADC_ConfigChannel+0x7c4>
 8007d74:	4a29      	ldr	r2, [pc, #164]	; (8007e1c <HAL_ADC_ConfigChannel+0x868>)
 8007d76:	e000      	b.n	8007d7a <HAL_ADC_ConfigChannel+0x7c6>
 8007d78:	4a23      	ldr	r2, [pc, #140]	; (8007e08 <HAL_ADC_ConfigChannel+0x854>)
 8007d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f7fe fe3e 	bl	8006a06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007d8a:	e031      	b.n	8007df0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a27      	ldr	r2, [pc, #156]	; (8007e30 <HAL_ADC_ConfigChannel+0x87c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d12d      	bne.n	8007df2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d127      	bne.n	8007df2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1c      	ldr	r2, [pc, #112]	; (8007e18 <HAL_ADC_ConfigChannel+0x864>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d022      	beq.n	8007df2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db4:	d004      	beq.n	8007dc0 <HAL_ADC_ConfigChannel+0x80c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <HAL_ADC_ConfigChannel+0x864>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d101      	bne.n	8007dc4 <HAL_ADC_ConfigChannel+0x810>
 8007dc0:	4a16      	ldr	r2, [pc, #88]	; (8007e1c <HAL_ADC_ConfigChannel+0x868>)
 8007dc2:	e000      	b.n	8007dc6 <HAL_ADC_ConfigChannel+0x812>
 8007dc4:	4a10      	ldr	r2, [pc, #64]	; (8007e08 <HAL_ADC_ConfigChannel+0x854>)
 8007dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7fe fe18 	bl	8006a06 <LL_ADC_SetCommonPathInternalCh>
 8007dd6:	e00c      	b.n	8007df2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ddc:	f043 0220 	orr.w	r2, r3, #32
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007dea:	e002      	b.n	8007df2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007dec:	bf00      	nop
 8007dee:	e000      	b.n	8007df2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007df0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007dfa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	37d8      	adds	r7, #216	; 0xd8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	50000700 	.word	0x50000700
 8007e0c:	c3210000 	.word	0xc3210000
 8007e10:	90c00010 	.word	0x90c00010
 8007e14:	50000600 	.word	0x50000600
 8007e18:	50000100 	.word	0x50000100
 8007e1c:	50000300 	.word	0x50000300
 8007e20:	20000000 	.word	0x20000000
 8007e24:	053e2d63 	.word	0x053e2d63
 8007e28:	c7520000 	.word	0xc7520000
 8007e2c:	50000500 	.word	0x50000500
 8007e30:	cb840000 	.word	0xcb840000

08007e34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe ffaf 	bl	8006da4 <LL_ADC_IsEnabled>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d14d      	bne.n	8007ee8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <ADC_Enable+0xc0>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00d      	beq.n	8007e76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	f043 0210 	orr.w	r2, r3, #16
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6a:	f043 0201 	orr.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e039      	b.n	8007eea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe ff7e 	bl	8006d7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007e80:	f7fe fd80 	bl	8006984 <HAL_GetTick>
 8007e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007e86:	e028      	b.n	8007eda <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe ff89 	bl	8006da4 <LL_ADC_IsEnabled>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe ff6d 	bl	8006d7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007ea2:	f7fe fd6f 	bl	8006984 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d914      	bls.n	8007eda <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d00d      	beq.n	8007eda <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec2:	f043 0210 	orr.w	r2, r3, #16
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ece:	f043 0201 	orr.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e007      	b.n	8007eea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d1cf      	bne.n	8007e88 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	8000003f 	.word	0x8000003f

08007ef8 <LL_ADC_IsEnabled>:
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <LL_ADC_IsEnabled+0x18>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <LL_ADC_IsEnabled+0x1a>
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <LL_ADC_REG_IsConversionOngoing>:
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0304 	and.w	r3, r3, #4
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d101      	bne.n	8007f36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b0a1      	sub	sp, #132	; 0x84
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e0e7      	b.n	8008132 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f7a:	d102      	bne.n	8007f82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007f7c:	4b6f      	ldr	r3, [pc, #444]	; (800813c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007f7e:	60bb      	str	r3, [r7, #8]
 8007f80:	e009      	b.n	8007f96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a6e      	ldr	r2, [pc, #440]	; (8008140 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d102      	bne.n	8007f92 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007f8c:	4b6d      	ldr	r3, [pc, #436]	; (8008144 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007f8e:	60bb      	str	r3, [r7, #8]
 8007f90:	e001      	b.n	8007f96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10b      	bne.n	8007fb4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	f043 0220 	orr.w	r2, r3, #32
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e0be      	b.n	8008132 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff ffb1 	bl	8007f1e <LL_ADC_REG_IsConversionOngoing>
 8007fbc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff ffab 	bl	8007f1e <LL_ADC_REG_IsConversionOngoing>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f040 80a0 	bne.w	8008110 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 809c 	bne.w	8008110 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fe0:	d004      	beq.n	8007fec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a55      	ldr	r2, [pc, #340]	; (800813c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d101      	bne.n	8007ff0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007fec:	4b56      	ldr	r3, [pc, #344]	; (8008148 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007fee:	e000      	b.n	8007ff2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007ff0:	4b56      	ldr	r3, [pc, #344]	; (800814c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007ff2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d04b      	beq.n	8008094 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	6859      	ldr	r1, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800800e:	035b      	lsls	r3, r3, #13
 8008010:	430b      	orrs	r3, r1
 8008012:	431a      	orrs	r2, r3
 8008014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008016:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008020:	d004      	beq.n	800802c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a45      	ldr	r2, [pc, #276]	; (800813c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d10f      	bne.n	800804c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800802c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008030:	f7ff ff62 	bl	8007ef8 <LL_ADC_IsEnabled>
 8008034:	4604      	mov	r4, r0
 8008036:	4841      	ldr	r0, [pc, #260]	; (800813c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008038:	f7ff ff5e 	bl	8007ef8 <LL_ADC_IsEnabled>
 800803c:	4603      	mov	r3, r0
 800803e:	4323      	orrs	r3, r4
 8008040:	2b00      	cmp	r3, #0
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	e012      	b.n	8008072 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800804c:	483c      	ldr	r0, [pc, #240]	; (8008140 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800804e:	f7ff ff53 	bl	8007ef8 <LL_ADC_IsEnabled>
 8008052:	4604      	mov	r4, r0
 8008054:	483b      	ldr	r0, [pc, #236]	; (8008144 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008056:	f7ff ff4f 	bl	8007ef8 <LL_ADC_IsEnabled>
 800805a:	4603      	mov	r3, r0
 800805c:	431c      	orrs	r4, r3
 800805e:	483c      	ldr	r0, [pc, #240]	; (8008150 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008060:	f7ff ff4a 	bl	8007ef8 <LL_ADC_IsEnabled>
 8008064:	4603      	mov	r3, r0
 8008066:	4323      	orrs	r3, r4
 8008068:	2b00      	cmp	r3, #0
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d056      	beq.n	8008124 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800807e:	f023 030f 	bic.w	r3, r3, #15
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	6892      	ldr	r2, [r2, #8]
 800808a:	430a      	orrs	r2, r1
 800808c:	431a      	orrs	r2, r3
 800808e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008090:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008092:	e047      	b.n	8008124 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800809c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800809e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a8:	d004      	beq.n	80080b4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a23      	ldr	r2, [pc, #140]	; (800813c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d10f      	bne.n	80080d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80080b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80080b8:	f7ff ff1e 	bl	8007ef8 <LL_ADC_IsEnabled>
 80080bc:	4604      	mov	r4, r0
 80080be:	481f      	ldr	r0, [pc, #124]	; (800813c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80080c0:	f7ff ff1a 	bl	8007ef8 <LL_ADC_IsEnabled>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4323      	orrs	r3, r4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bf0c      	ite	eq
 80080cc:	2301      	moveq	r3, #1
 80080ce:	2300      	movne	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	e012      	b.n	80080fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80080d4:	481a      	ldr	r0, [pc, #104]	; (8008140 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80080d6:	f7ff ff0f 	bl	8007ef8 <LL_ADC_IsEnabled>
 80080da:	4604      	mov	r4, r0
 80080dc:	4819      	ldr	r0, [pc, #100]	; (8008144 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80080de:	f7ff ff0b 	bl	8007ef8 <LL_ADC_IsEnabled>
 80080e2:	4603      	mov	r3, r0
 80080e4:	431c      	orrs	r4, r3
 80080e6:	481a      	ldr	r0, [pc, #104]	; (8008150 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80080e8:	f7ff ff06 	bl	8007ef8 <LL_ADC_IsEnabled>
 80080ec:	4603      	mov	r3, r0
 80080ee:	4323      	orrs	r3, r4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bf0c      	ite	eq
 80080f4:	2301      	moveq	r3, #1
 80080f6:	2300      	movne	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d012      	beq.n	8008124 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80080fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008106:	f023 030f 	bic.w	r3, r3, #15
 800810a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800810c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800810e:	e009      	b.n	8008124 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008114:	f043 0220 	orr.w	r2, r3, #32
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008122:	e000      	b.n	8008126 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008124:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800812e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008132:	4618      	mov	r0, r3
 8008134:	3784      	adds	r7, #132	; 0x84
 8008136:	46bd      	mov	sp, r7
 8008138:	bd90      	pop	{r4, r7, pc}
 800813a:	bf00      	nop
 800813c:	50000100 	.word	0x50000100
 8008140:	50000400 	.word	0x50000400
 8008144:	50000500 	.word	0x50000500
 8008148:	50000300 	.word	0x50000300
 800814c:	50000700 	.word	0x50000700
 8008150:	50000600 	.word	0x50000600

08008154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <__NVIC_SetPriorityGrouping+0x44>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008170:	4013      	ands	r3, r2
 8008172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800817c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008186:	4a04      	ldr	r2, [pc, #16]	; (8008198 <__NVIC_SetPriorityGrouping+0x44>)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	60d3      	str	r3, [r2, #12]
}
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	e000ed00 	.word	0xe000ed00

0800819c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <__NVIC_GetPriorityGrouping+0x18>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	f003 0307 	and.w	r3, r3, #7
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	e000ed00 	.word	0xe000ed00

080081b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	db0b      	blt.n	80081e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	f003 021f 	and.w	r2, r3, #31
 80081d0:	4907      	ldr	r1, [pc, #28]	; (80081f0 <__NVIC_EnableIRQ+0x38>)
 80081d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	2001      	movs	r0, #1
 80081da:	fa00 f202 	lsl.w	r2, r0, r2
 80081de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e100 	.word	0xe000e100

080081f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	6039      	str	r1, [r7, #0]
 80081fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008204:	2b00      	cmp	r3, #0
 8008206:	db0a      	blt.n	800821e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	b2da      	uxtb	r2, r3
 800820c:	490c      	ldr	r1, [pc, #48]	; (8008240 <__NVIC_SetPriority+0x4c>)
 800820e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008212:	0112      	lsls	r2, r2, #4
 8008214:	b2d2      	uxtb	r2, r2
 8008216:	440b      	add	r3, r1
 8008218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800821c:	e00a      	b.n	8008234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	b2da      	uxtb	r2, r3
 8008222:	4908      	ldr	r1, [pc, #32]	; (8008244 <__NVIC_SetPriority+0x50>)
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	3b04      	subs	r3, #4
 800822c:	0112      	lsls	r2, r2, #4
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	440b      	add	r3, r1
 8008232:	761a      	strb	r2, [r3, #24]
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	e000e100 	.word	0xe000e100
 8008244:	e000ed00 	.word	0xe000ed00

08008248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008248:	b480      	push	{r7}
 800824a:	b089      	sub	sp, #36	; 0x24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f1c3 0307 	rsb	r3, r3, #7
 8008262:	2b04      	cmp	r3, #4
 8008264:	bf28      	it	cs
 8008266:	2304      	movcs	r3, #4
 8008268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	3304      	adds	r3, #4
 800826e:	2b06      	cmp	r3, #6
 8008270:	d902      	bls.n	8008278 <NVIC_EncodePriority+0x30>
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	3b03      	subs	r3, #3
 8008276:	e000      	b.n	800827a <NVIC_EncodePriority+0x32>
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800827c:	f04f 32ff 	mov.w	r2, #4294967295
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43da      	mvns	r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	401a      	ands	r2, r3
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008290:	f04f 31ff 	mov.w	r1, #4294967295
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	fa01 f303 	lsl.w	r3, r1, r3
 800829a:	43d9      	mvns	r1, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082a0:	4313      	orrs	r3, r2
         );
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3724      	adds	r7, #36	; 0x24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
	...

080082b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082c0:	d301      	bcc.n	80082c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80082c2:	2301      	movs	r3, #1
 80082c4:	e00f      	b.n	80082e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082c6:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <SysTick_Config+0x40>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80082ce:	210f      	movs	r1, #15
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	f7ff ff8e 	bl	80081f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <SysTick_Config+0x40>)
 80082da:	2200      	movs	r2, #0
 80082dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082de:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <SysTick_Config+0x40>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	e000e010 	.word	0xe000e010

080082f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff ff29 	bl	8008154 <__NVIC_SetPriorityGrouping>
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	4603      	mov	r3, r0
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008318:	f7ff ff40 	bl	800819c <__NVIC_GetPriorityGrouping>
 800831c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	6978      	ldr	r0, [r7, #20]
 8008324:	f7ff ff90 	bl	8008248 <NVIC_EncodePriority>
 8008328:	4602      	mov	r2, r0
 800832a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff ff5f 	bl	80081f4 <__NVIC_SetPriority>
}
 8008336:	bf00      	nop
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	4603      	mov	r3, r0
 8008346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff ff33 	bl	80081b8 <__NVIC_EnableIRQ>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff ffa4 	bl	80082b0 <SysTick_Config>
 8008368:	4603      	mov	r3, r0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e08d      	b.n	80084a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	4b47      	ldr	r3, [pc, #284]	; (80084ac <HAL_DMA_Init+0x138>)
 800838e:	429a      	cmp	r2, r3
 8008390:	d80f      	bhi.n	80083b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	4b45      	ldr	r3, [pc, #276]	; (80084b0 <HAL_DMA_Init+0x13c>)
 800839a:	4413      	add	r3, r2
 800839c:	4a45      	ldr	r2, [pc, #276]	; (80084b4 <HAL_DMA_Init+0x140>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	091b      	lsrs	r3, r3, #4
 80083a4:	009a      	lsls	r2, r3, #2
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a42      	ldr	r2, [pc, #264]	; (80084b8 <HAL_DMA_Init+0x144>)
 80083ae:	641a      	str	r2, [r3, #64]	; 0x40
 80083b0:	e00e      	b.n	80083d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	4b40      	ldr	r3, [pc, #256]	; (80084bc <HAL_DMA_Init+0x148>)
 80083ba:	4413      	add	r3, r2
 80083bc:	4a3d      	ldr	r2, [pc, #244]	; (80084b4 <HAL_DMA_Init+0x140>)
 80083be:	fba2 2303 	umull	r2, r3, r2, r3
 80083c2:	091b      	lsrs	r3, r3, #4
 80083c4:	009a      	lsls	r2, r3, #2
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a3c      	ldr	r2, [pc, #240]	; (80084c0 <HAL_DMA_Init+0x14c>)
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80083e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80083f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800840c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9be 	bl	80087a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008430:	d102      	bne.n	8008438 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800844c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d010      	beq.n	8008478 <HAL_DMA_Init+0x104>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b04      	cmp	r3, #4
 800845c:	d80c      	bhi.n	8008478 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9de 	bl	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008474:	605a      	str	r2, [r3, #4]
 8008476:	e008      	b.n	800848a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40020407 	.word	0x40020407
 80084b0:	bffdfff8 	.word	0xbffdfff8
 80084b4:	cccccccd 	.word	0xcccccccd
 80084b8:	40020000 	.word	0x40020000
 80084bc:	bffdfbf8 	.word	0xbffdfbf8
 80084c0:	40020400 	.word	0x40020400

080084c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d005      	beq.n	80084e8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2204      	movs	r2, #4
 80084e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
 80084e6:	e037      	b.n	8008558 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 020e 	bic.w	r2, r2, #14
 80084f6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008506:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0201 	bic.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851c:	f003 021f 	and.w	r2, r3, #31
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	2101      	movs	r1, #1
 8008526:	fa01 f202 	lsl.w	r2, r1, r2
 800852a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008534:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800854c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008556:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d00d      	beq.n	80085aa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2204      	movs	r2, #4
 8008592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
 80085a8:	e047      	b.n	800863a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 020e 	bic.w	r2, r2, #14
 80085b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0201 	bic.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	f003 021f 	and.w	r2, r3, #31
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	2101      	movs	r1, #1
 80085e8:	fa01 f202 	lsl.w	r2, r1, r2
 80085ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800860e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008618:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
    }
  }
  return status;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2204      	movs	r2, #4
 8008666:	409a      	lsls	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d026      	beq.n	80086be <HAL_DMA_IRQHandler+0x7a>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d021      	beq.n	80086be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b00      	cmp	r3, #0
 8008686:	d107      	bne.n	8008698 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0204 	bic.w	r2, r2, #4
 8008696:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869c:	f003 021f 	and.w	r2, r3, #31
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	2104      	movs	r1, #4
 80086a6:	fa01 f202 	lsl.w	r2, r1, r2
 80086aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d071      	beq.n	8008798 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80086bc:	e06c      	b.n	8008798 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c2:	f003 031f 	and.w	r3, r3, #31
 80086c6:	2202      	movs	r2, #2
 80086c8:	409a      	lsls	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d02e      	beq.n	8008730 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d029      	beq.n	8008730 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 020a 	bic.w	r2, r2, #10
 80086f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008706:	f003 021f 	and.w	r2, r3, #31
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2102      	movs	r1, #2
 8008710:	fa01 f202 	lsl.w	r2, r1, r2
 8008714:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d038      	beq.n	8008798 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800872e:	e033      	b.n	8008798 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008734:	f003 031f 	and.w	r3, r3, #31
 8008738:	2208      	movs	r2, #8
 800873a:	409a      	lsls	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4013      	ands	r3, r2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d02a      	beq.n	800879a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0308 	and.w	r3, r3, #8
 800874a:	2b00      	cmp	r3, #0
 800874c:	d025      	beq.n	800879a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 020e 	bic.w	r2, r2, #14
 800875c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	f003 021f 	and.w	r2, r3, #31
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	2101      	movs	r1, #1
 800876c:	fa01 f202 	lsl.w	r2, r1, r2
 8008770:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008798:	bf00      	nop
 800879a:	bf00      	nop
}
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	4b16      	ldr	r3, [pc, #88]	; (800880c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d802      	bhi.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	e001      	b.n	80087c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80087be:	4b15      	ldr	r3, [pc, #84]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80087c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	3b08      	subs	r3, #8
 80087ce:	4a12      	ldr	r2, [pc, #72]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	091b      	lsrs	r3, r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087dc:	089b      	lsrs	r3, r3, #2
 80087de:	009a      	lsls	r2, r3, #2
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	4413      	add	r3, r2
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a0b      	ldr	r2, [pc, #44]	; (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80087ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	2201      	movs	r2, #1
 80087f8:	409a      	lsls	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40020407 	.word	0x40020407
 8008810:	40020800 	.word	0x40020800
 8008814:	40020820 	.word	0x40020820
 8008818:	cccccccd 	.word	0xcccccccd
 800881c:	40020880 	.word	0x40020880

08008820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	461a      	mov	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a08      	ldr	r2, [pc, #32]	; (8008864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008842:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3b01      	subs	r3, #1
 8008848:	f003 031f 	and.w	r3, r3, #31
 800884c:	2201      	movs	r2, #1
 800884e:	409a      	lsls	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	1000823f 	.word	0x1000823f
 8008864:	40020940 	.word	0x40020940

08008868 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e147      	b.n	8008b0a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7f9 fefc 	bl	800268c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0210 	bic.w	r2, r2, #16
 80088a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088a4:	f7fe f86e 	bl	8006984 <HAL_GetTick>
 80088a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80088aa:	e012      	b.n	80088d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80088ac:	f7fe f86a 	bl	8006984 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b0a      	cmp	r3, #10
 80088b8:	d90b      	bls.n	80088d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088be:	f043 0201 	orr.w	r2, r3, #1
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2203      	movs	r2, #3
 80088ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e11b      	b.n	8008b0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d0e5      	beq.n	80088ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699a      	ldr	r2, [r3, #24]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0201 	orr.w	r2, r2, #1
 80088ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088f0:	f7fe f848 	bl	8006984 <HAL_GetTick>
 80088f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80088f6:	e012      	b.n	800891e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80088f8:	f7fe f844 	bl	8006984 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b0a      	cmp	r3, #10
 8008904:	d90b      	bls.n	800891e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	f043 0201 	orr.w	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2203      	movs	r2, #3
 8008916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e0f5      	b.n	8008b0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0e5      	beq.n	80088f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0202 	orr.w	r2, r2, #2
 800893a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a74      	ldr	r2, [pc, #464]	; (8008b14 <HAL_FDCAN_Init+0x2ac>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d103      	bne.n	800894e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008946:	4a74      	ldr	r2, [pc, #464]	; (8008b18 <HAL_FDCAN_Init+0x2b0>)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7c1b      	ldrb	r3, [r3, #16]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d108      	bne.n	8008968 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008964:	619a      	str	r2, [r3, #24]
 8008966:	e007      	b.n	8008978 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008976:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7c5b      	ldrb	r3, [r3, #17]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d108      	bne.n	8008992 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800898e:	619a      	str	r2, [r3, #24]
 8008990:	e007      	b.n	80089a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7c9b      	ldrb	r3, [r3, #18]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d108      	bne.n	80089bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089b8:	619a      	str	r2, [r3, #24]
 80089ba:	e007      	b.n	80089cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	699a      	ldr	r2, [r3, #24]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80089f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0210 	bic.w	r2, r2, #16
 8008a00:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d108      	bne.n	8008a1c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0204 	orr.w	r2, r2, #4
 8008a18:	619a      	str	r2, [r3, #24]
 8008a1a:	e02c      	b.n	8008a76 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d028      	beq.n	8008a76 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d01c      	beq.n	8008a66 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a3a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0210 	orr.w	r2, r2, #16
 8008a4a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d110      	bne.n	8008a76 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699a      	ldr	r2, [r3, #24]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0220 	orr.w	r2, r2, #32
 8008a62:	619a      	str	r2, [r3, #24]
 8008a64:	e007      	b.n	8008a76 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0220 	orr.w	r2, r2, #32
 8008a74:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a86:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a8e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a9e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008aa0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aaa:	d115      	bne.n	8008ad8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008aba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008ac4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	3b01      	subs	r3, #1
 8008ace:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008ad4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008ad6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fc3c 	bl	800936c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	40006400 	.word	0x40006400
 8008b18:	40006500 	.word	0x40006500

08008b1c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b2c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d002      	beq.n	8008b3a <HAL_FDCAN_ConfigFilter+0x1e>
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d13d      	bne.n	8008bb6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d119      	bne.n	8008b76 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b4e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008b56:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e01d      	b.n	8008bb2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	075a      	lsls	r2, r3, #29
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	079a      	lsls	r2, r3, #30
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e006      	b.n	8008bc4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bba:	f043 0202 	orr.w	r2, r3, #2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
  }
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d110      	bne.n	8008c06 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0201 	bic.w	r2, r2, #1
 8008bfa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e006      	b.n	8008c14 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c0a:	f043 0204 	orr.w	r2, r3, #4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
  }
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d12c      	bne.n	8008c92 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e023      	b.n	8008ca0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fbe8 	bl	8009444 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2101      	movs	r1, #1
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008c84:	2201      	movs	r2, #1
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e006      	b.n	8008ca0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c96:	f043 0208 	orr.w	r2, r3, #8
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
  }
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b08b      	sub	sp, #44	; 0x2c
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cbc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008cbe:	7efb      	ldrb	r3, [r7, #27]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f040 80bc 	bne.w	8008e3e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b40      	cmp	r3, #64	; 0x40
 8008cca:	d121      	bne.n	8008d10 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d107      	bne.n	8008cec <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e0af      	b.n	8008e4c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf4:	0a1b      	lsrs	r3, r3, #8
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	4613      	mov	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4413      	add	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	440b      	add	r3, r1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d0e:	e020      	b.n	8008d52 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d107      	bne.n	8008d30 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e08d      	b.n	8008e4c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d38:	0a1b      	lsrs	r3, r3, #8
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	4613      	mov	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	440b      	add	r3, r1
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d107      	bne.n	8008d76 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	0c9b      	lsrs	r3, r3, #18
 8008d6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	e005      	b.n	8008d82 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	0e1b      	lsrs	r3, r3, #24
 8008dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	0fda      	lsrs	r2, r3, #31
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	3304      	adds	r3, #4
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008df0:	2300      	movs	r3, #0
 8008df2:	623b      	str	r3, [r7, #32]
 8008df4:	e00a      	b.n	8008e0c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	441a      	add	r2, r3
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	440b      	add	r3, r1
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	623b      	str	r3, [r7, #32]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	4a11      	ldr	r2, [pc, #68]	; (8008e58 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008e14:	5cd3      	ldrb	r3, [r2, r3]
 8008e16:	461a      	mov	r2, r3
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d3eb      	bcc.n	8008df6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b40      	cmp	r3, #64	; 0x40
 8008e22:	d105      	bne.n	8008e30 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008e2e:	e004      	b.n	8008e3a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e006      	b.n	8008e4c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e42:	f043 0208 	orr.w	r2, r3, #8
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
  }
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	372c      	adds	r7, #44	; 0x2c
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	080150ac 	.word	0x080150ac

08008e5c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e6e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d003      	beq.n	8008e7e <HAL_FDCAN_ActivateNotification+0x22>
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	f040 80c8 	bne.w	800900e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e84:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d03b      	beq.n	8008f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d031      	beq.n	8008f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d027      	beq.n	8008f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01d      	beq.n	8008f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d013      	beq.n	8008f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d107      	bne.n	8008f22 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0201 	orr.w	r2, r2, #1
 8008f20:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d13b      	bne.n	8008fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d131      	bne.n	8008fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d127      	bne.n	8008fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d11d      	bne.n	8008fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f003 0310 	and.w	r3, r3, #16
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d113      	bne.n	8008fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d004      	beq.n	8008f9a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00c      	beq.n	8008fbe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0202 	orr.w	r2, r2, #2
 8008fbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d009      	beq.n	8008ffa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	430a      	orrs	r2, r1
 8009008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e006      	b.n	800901c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009012:	f043 0202 	orr.w	r2, r3, #2
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
  }
}
 800901c:	4618      	mov	r0, r3
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	; 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009036:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009044:	4013      	ands	r3, r2
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905a:	6a3a      	ldr	r2, [r7, #32]
 800905c:	4013      	ands	r3, r2
 800905e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800906a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	4013      	ands	r3, r2
 8009076:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8009082:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	4013      	ands	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009096:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800909a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4013      	ands	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2240      	movs	r2, #64	; 0x40
 80090ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f92e 	bl	800932e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01b      	beq.n	8009118 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d014      	beq.n	8009118 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80090f6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4013      	ands	r3, r2
 8009104:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800910e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009110:	6939      	ldr	r1, [r7, #16]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f8ec 	bl	80092f0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009124:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f8b6 	bl	800929a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6a3a      	ldr	r2, [r7, #32]
 800913a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800913c:	6a39      	ldr	r1, [r7, #32]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fc f920 	bl	8005384 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009152:	69f9      	ldr	r1, [r7, #28]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f8ab 	bl	80092b0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00e      	beq.n	8009186 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009172:	2b00      	cmp	r3, #0
 8009174:	d007      	beq.n	8009186 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800917e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f8a0 	bl	80092c6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01a      	beq.n	80091ca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d013      	beq.n	80091ca <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80091aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4013      	ands	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2280      	movs	r2, #128	; 0x80
 80091c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f888 	bl	80092da <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00e      	beq.n	80091f6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f888 	bl	8009306 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800921a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f87c 	bl	800931a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d011      	beq.n	8009254 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009246:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800924c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009262:	6979      	ldr	r1, [r7, #20]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f876 	bl	8009356 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f858 	bl	8009342 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009292:	bf00      	nop
 8009294:	3728      	adds	r7, #40	; 0x28
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009374:	4b30      	ldr	r3, [pc, #192]	; (8009438 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009376:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a2f      	ldr	r2, [pc, #188]	; (800943c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d103      	bne.n	800938a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009388:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a2c      	ldr	r2, [pc, #176]	; (8009440 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d103      	bne.n	800939c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800939a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093aa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	041a      	lsls	r2, r3, #16
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093d0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	061a      	lsls	r2, r3, #24
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	e005      	b.n	800941e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3304      	adds	r3, #4
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d3f3      	bcc.n	8009412 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800942a:	bf00      	nop
 800942c:	bf00      	nop
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	4000a400 	.word	0x4000a400
 800943c:	40006800 	.word	0x40006800
 8009440:	40006c00 	.word	0x40006c00

08009444 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8009444:	b480      	push	{r7}
 8009446:	b089      	sub	sp, #36	; 0x24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009462:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800946a:	4313      	orrs	r3, r2
 800946c:	61fb      	str	r3, [r7, #28]
 800946e:	e00a      	b.n	8009486 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009478:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800947e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009484:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009490:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009496:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800949c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	4413      	add	r3, r2
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	440b      	add	r3, r1
 80094b6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	69fa      	ldr	r2, [r7, #28]
 80094bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	3304      	adds	r3, #4
 80094c2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	3304      	adds	r3, #4
 80094ce:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	e020      	b.n	8009518 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	3303      	adds	r3, #3
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	3302      	adds	r3, #2
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	440b      	add	r3, r1
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80094ee:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	3301      	adds	r3, #1
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	440b      	add	r3, r1
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80094fc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	440a      	add	r2, r1
 8009504:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009506:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	3304      	adds	r3, #4
 8009510:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	3304      	adds	r3, #4
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	0c1b      	lsrs	r3, r3, #16
 800951e:	4a06      	ldr	r2, [pc, #24]	; (8009538 <FDCAN_CopyMessageToRAM+0xf4>)
 8009520:	5cd3      	ldrb	r3, [r2, r3]
 8009522:	461a      	mov	r2, r3
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	4293      	cmp	r3, r2
 8009528:	d3d5      	bcc.n	80094d6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	3724      	adds	r7, #36	; 0x24
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	080150ac 	.word	0x080150ac

0800953c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800954e:	4b24      	ldr	r3, [pc, #144]	; (80095e0 <HAL_FLASH_Program+0xa4>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d101      	bne.n	800955a <HAL_FLASH_Program+0x1e>
 8009556:	2302      	movs	r3, #2
 8009558:	e03e      	b.n	80095d8 <HAL_FLASH_Program+0x9c>
 800955a:	4b21      	ldr	r3, [pc, #132]	; (80095e0 <HAL_FLASH_Program+0xa4>)
 800955c:	2201      	movs	r2, #1
 800955e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009564:	f000 f87c 	bl	8009660 <FLASH_WaitForLastOperation>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d12e      	bne.n	80095d0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009572:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <HAL_FLASH_Program+0xa4>)
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d107      	bne.n	800958e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800957e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009582:	68b8      	ldr	r0, [r7, #8]
 8009584:	f000 f8c0 	bl	8009708 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009588:	2301      	movs	r3, #1
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	e010      	b.n	80095b0 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d002      	beq.n	800959a <HAL_FLASH_Program+0x5e>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d10a      	bne.n	80095b0 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	4619      	mov	r1, r3
 800959e:	68b8      	ldr	r0, [r7, #8]
 80095a0:	f000 f8d8 	bl	8009754 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d102      	bne.n	80095b0 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80095aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095ae:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095b4:	f000 f854 	bl	8009660 <FLASH_WaitForLastOperation>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d006      	beq.n	80095d0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80095c2:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <HAL_FLASH_Program+0xa8>)
 80095c4:	695a      	ldr	r2, [r3, #20]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	43db      	mvns	r3, r3
 80095ca:	4906      	ldr	r1, [pc, #24]	; (80095e4 <HAL_FLASH_Program+0xa8>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <HAL_FLASH_Program+0xa4>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3718      	adds	r7, #24
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	2000000c 	.word	0x2000000c
 80095e4:	40022000 	.word	0x40022000

080095e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <HAL_FLASH_Unlock+0x38>)
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	da0b      	bge.n	8009612 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <HAL_FLASH_Unlock+0x38>)
 80095fc:	4a09      	ldr	r2, [pc, #36]	; (8009624 <HAL_FLASH_Unlock+0x3c>)
 80095fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <HAL_FLASH_Unlock+0x38>)
 8009602:	4a09      	ldr	r2, [pc, #36]	; (8009628 <HAL_FLASH_Unlock+0x40>)
 8009604:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <HAL_FLASH_Unlock+0x38>)
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	da01      	bge.n	8009612 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009612:	79fb      	ldrb	r3, [r7, #7]
}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	40022000 	.word	0x40022000
 8009624:	45670123 	.word	0x45670123
 8009628:	cdef89ab 	.word	0xcdef89ab

0800962c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009636:	4b09      	ldr	r3, [pc, #36]	; (800965c <HAL_FLASH_Lock+0x30>)
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	4a08      	ldr	r2, [pc, #32]	; (800965c <HAL_FLASH_Lock+0x30>)
 800963c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009640:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009642:	4b06      	ldr	r3, [pc, #24]	; (800965c <HAL_FLASH_Lock+0x30>)
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	da01      	bge.n	800964e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800964e:	79fb      	ldrb	r3, [r7, #7]
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	40022000 	.word	0x40022000

08009660 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009668:	f7fd f98c 	bl	8006984 <HAL_GetTick>
 800966c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800966e:	e009      	b.n	8009684 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009670:	f7fd f988 	bl	8006984 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d201      	bcs.n	8009684 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e038      	b.n	80096f6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009684:	4b1e      	ldr	r3, [pc, #120]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009690:	d0ee      	beq.n	8009670 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009692:	4b1b      	ldr	r3, [pc, #108]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800969a:	4013      	ands	r3, r2
 800969c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d01e      	beq.n	80096e2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80096a4:	4b17      	ldr	r3, [pc, #92]	; (8009704 <FLASH_WaitForLastOperation+0xa4>)
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	4a15      	ldr	r2, [pc, #84]	; (8009704 <FLASH_WaitForLastOperation+0xa4>)
 80096ae:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d007      	beq.n	80096ca <FLASH_WaitForLastOperation+0x6a>
 80096ba:	4b11      	ldr	r3, [pc, #68]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096c4:	490e      	ldr	r1, [pc, #56]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	618b      	str	r3, [r1, #24]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <FLASH_WaitForLastOperation+0x7e>
 80096d4:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096dc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e009      	b.n	80096f6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d102      	bne.n	80096f4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80096ee:	4b04      	ldr	r3, [pc, #16]	; (8009700 <FLASH_WaitForLastOperation+0xa0>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40022000 	.word	0x40022000
 8009704:	2000000c 	.word	0x2000000c

08009708 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009714:	4b0e      	ldr	r3, [pc, #56]	; (8009750 <FLASH_Program_DoubleWord+0x48>)
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	4a0d      	ldr	r2, [pc, #52]	; (8009750 <FLASH_Program_DoubleWord+0x48>)
 800971a:	f043 0301 	orr.w	r3, r3, #1
 800971e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009726:	f3bf 8f6f 	isb	sy
}
 800972a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800972c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009730:	f04f 0200 	mov.w	r2, #0
 8009734:	f04f 0300 	mov.w	r3, #0
 8009738:	000a      	movs	r2, r1
 800973a:	2300      	movs	r3, #0
 800973c:	68f9      	ldr	r1, [r7, #12]
 800973e:	3104      	adds	r1, #4
 8009740:	4613      	mov	r3, r2
 8009742:	600b      	str	r3, [r1, #0]
}
 8009744:	bf00      	nop
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	40022000 	.word	0x40022000

08009754 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009754:	b480      	push	{r7}
 8009756:	b089      	sub	sp, #36	; 0x24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800975e:	2340      	movs	r3, #64	; 0x40
 8009760:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800976a:	4b14      	ldr	r3, [pc, #80]	; (80097bc <FLASH_Program_Fast+0x68>)
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	4a13      	ldr	r2, [pc, #76]	; (80097bc <FLASH_Program_Fast+0x68>)
 8009770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009774:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009776:	f3ef 8310 	mrs	r3, PRIMASK
 800977a:	60fb      	str	r3, [r7, #12]
  return(result);
 800977c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800977e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009780:	b672      	cpsid	i
}
 8009782:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	3304      	adds	r3, #4
 8009790:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	3304      	adds	r3, #4
 8009796:	617b      	str	r3, [r7, #20]
    row_index--;
 8009798:	7ffb      	ldrb	r3, [r7, #31]
 800979a:	3b01      	subs	r3, #1
 800979c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800979e:	7ffb      	ldrb	r3, [r7, #31]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1ef      	bne.n	8009784 <FLASH_Program_Fast+0x30>
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f383 8810 	msr	PRIMASK, r3
}
 80097ae:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80097b0:	bf00      	nop
 80097b2:	3724      	adds	r7, #36	; 0x24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	40022000 	.word	0x40022000

080097c0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80097ca:	4b49      	ldr	r3, [pc, #292]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d101      	bne.n	80097d6 <HAL_FLASHEx_Erase+0x16>
 80097d2:	2302      	movs	r3, #2
 80097d4:	e087      	b.n	80098e6 <HAL_FLASHEx_Erase+0x126>
 80097d6:	4b46      	ldr	r3, [pc, #280]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 80097d8:	2201      	movs	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80097dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097e0:	f7ff ff3e 	bl	8009660 <FLASH_WaitForLastOperation>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d177      	bne.n	80098de <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80097ee:	4b40      	ldr	r3, [pc, #256]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80097f4:	4b3f      	ldr	r3, [pc, #252]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d013      	beq.n	8009828 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009800:	4b3c      	ldr	r3, [pc, #240]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009808:	2b00      	cmp	r3, #0
 800980a:	d009      	beq.n	8009820 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800980c:	4b39      	ldr	r3, [pc, #228]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a38      	ldr	r2, [pc, #224]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 8009812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009816:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009818:	4b35      	ldr	r3, [pc, #212]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 800981a:	2203      	movs	r2, #3
 800981c:	771a      	strb	r2, [r3, #28]
 800981e:	e016      	b.n	800984e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009820:	4b33      	ldr	r3, [pc, #204]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 8009822:	2201      	movs	r2, #1
 8009824:	771a      	strb	r2, [r3, #28]
 8009826:	e012      	b.n	800984e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009828:	4b32      	ldr	r3, [pc, #200]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009834:	4b2f      	ldr	r3, [pc, #188]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a2e      	ldr	r2, [pc, #184]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 800983a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800983e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009840:	4b2b      	ldr	r3, [pc, #172]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 8009842:	2202      	movs	r2, #2
 8009844:	771a      	strb	r2, [r3, #28]
 8009846:	e002      	b.n	800984e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009848:	4b29      	ldr	r3, [pc, #164]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 800984a:	2200      	movs	r2, #0
 800984c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d113      	bne.n	800987e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 f84c 	bl	80098f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009864:	f7ff fefc 	bl	8009660 <FLASH_WaitForLastOperation>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800986c:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	4a20      	ldr	r2, [pc, #128]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 8009872:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009876:	f023 0304 	bic.w	r3, r3, #4
 800987a:	6153      	str	r3, [r2, #20]
 800987c:	e02d      	b.n	80098da <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	f04f 32ff 	mov.w	r2, #4294967295
 8009884:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	60bb      	str	r3, [r7, #8]
 800988c:	e01d      	b.n	80098ca <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	4619      	mov	r1, r3
 8009894:	68b8      	ldr	r0, [r7, #8]
 8009896:	f000 f867 	bl	8009968 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800989a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800989e:	f7ff fedf 	bl	8009660 <FLASH_WaitForLastOperation>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <HAL_FLASHEx_Erase+0x134>)
 80098ac:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80098b0:	f023 0302 	bic.w	r3, r3, #2
 80098b4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	601a      	str	r2, [r3, #0]
          break;
 80098c2:	e00a      	b.n	80098da <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60bb      	str	r3, [r7, #8]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d3d9      	bcc.n	800988e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80098da:	f000 f889 	bl	80099f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <HAL_FLASHEx_Erase+0x130>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]

  return status;
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	2000000c 	.word	0x2000000c
 80098f4:	40022000 	.word	0x40022000

080098f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8009900:	4b18      	ldr	r3, [pc, #96]	; (8009964 <FLASH_MassErase+0x6c>)
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d016      	beq.n	800993a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009916:	4b13      	ldr	r3, [pc, #76]	; (8009964 <FLASH_MassErase+0x6c>)
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	4a12      	ldr	r2, [pc, #72]	; (8009964 <FLASH_MassErase+0x6c>)
 800991c:	f043 0304 	orr.w	r3, r3, #4
 8009920:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00e      	beq.n	800994a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800992c:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <FLASH_MassErase+0x6c>)
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	4a0c      	ldr	r2, [pc, #48]	; (8009964 <FLASH_MassErase+0x6c>)
 8009932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009936:	6153      	str	r3, [r2, #20]
 8009938:	e007      	b.n	800994a <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800993a:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <FLASH_MassErase+0x6c>)
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <FLASH_MassErase+0x6c>)
 8009940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009944:	f043 0304 	orr.w	r3, r3, #4
 8009948:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800994a:	4b06      	ldr	r3, [pc, #24]	; (8009964 <FLASH_MassErase+0x6c>)
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	4a05      	ldr	r2, [pc, #20]	; (8009964 <FLASH_MassErase+0x6c>)
 8009950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009954:	6153      	str	r3, [r2, #20]
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	40022000 	.word	0x40022000

08009968 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8009972:	4b1e      	ldr	r3, [pc, #120]	; (80099ec <FLASH_PageErase+0x84>)
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800997e:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <FLASH_PageErase+0x84>)
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	4a1a      	ldr	r2, [pc, #104]	; (80099ec <FLASH_PageErase+0x84>)
 8009984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009988:	6153      	str	r3, [r2, #20]
 800998a:	e011      	b.n	80099b0 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d006      	beq.n	80099a4 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8009996:	4b15      	ldr	r3, [pc, #84]	; (80099ec <FLASH_PageErase+0x84>)
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	4a14      	ldr	r2, [pc, #80]	; (80099ec <FLASH_PageErase+0x84>)
 800999c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099a0:	6153      	str	r3, [r2, #20]
 80099a2:	e005      	b.n	80099b0 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80099a4:	4b11      	ldr	r3, [pc, #68]	; (80099ec <FLASH_PageErase+0x84>)
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	4a10      	ldr	r2, [pc, #64]	; (80099ec <FLASH_PageErase+0x84>)
 80099aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80099ae:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80099b0:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <FLASH_PageErase+0x84>)
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80099c0:	490a      	ldr	r1, [pc, #40]	; (80099ec <FLASH_PageErase+0x84>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <FLASH_PageErase+0x84>)
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	4a08      	ldr	r2, [pc, #32]	; (80099ec <FLASH_PageErase+0x84>)
 80099cc:	f043 0302 	orr.w	r3, r3, #2
 80099d0:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <FLASH_PageErase+0x84>)
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	4a05      	ldr	r2, [pc, #20]	; (80099ec <FLASH_PageErase+0x84>)
 80099d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099dc:	6153      	str	r3, [r2, #20]
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40022000 	.word	0x40022000

080099f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80099f6:	4b21      	ldr	r3, [pc, #132]	; (8009a7c <FLASH_FlushCaches+0x8c>)
 80099f8:	7f1b      	ldrb	r3, [r3, #28]
 80099fa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d002      	beq.n	8009a08 <FLASH_FlushCaches+0x18>
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d117      	bne.n	8009a38 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1c      	ldr	r2, [pc, #112]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a12:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009a14:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a19      	ldr	r2, [pc, #100]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a16      	ldr	r2, [pc, #88]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a2a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009a2c:	4b14      	ldr	r3, [pc, #80]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a13      	ldr	r2, [pc, #76]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a36:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d002      	beq.n	8009a44 <FLASH_FlushCaches+0x54>
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d111      	bne.n	8009a68 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a0d      	ldr	r2, [pc, #52]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009a5c:	4b08      	ldr	r3, [pc, #32]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a07      	ldr	r2, [pc, #28]	; (8009a80 <FLASH_FlushCaches+0x90>)
 8009a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a66:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <FLASH_FlushCaches+0x8c>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	771a      	strb	r2, [r3, #28]
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	2000000c 	.word	0x2000000c
 8009a80:	40022000 	.word	0x40022000

08009a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a92:	e15a      	b.n	8009d4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	2101      	movs	r1, #1
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 814c 	beq.w	8009d44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d005      	beq.n	8009ac4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d130      	bne.n	8009b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	2203      	movs	r2, #3
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	68da      	ldr	r2, [r3, #12]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009afa:	2201      	movs	r2, #1
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	fa02 f303 	lsl.w	r3, r2, r3
 8009b02:	43db      	mvns	r3, r3
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4013      	ands	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	f003 0201 	and.w	r2, r3, #1
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d017      	beq.n	8009b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	43db      	mvns	r3, r3
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4013      	ands	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	fa02 f303 	lsl.w	r3, r2, r3
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d123      	bne.n	8009bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	08da      	lsrs	r2, r3, #3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3208      	adds	r2, #8
 8009b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f003 0307 	and.w	r3, r3, #7
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	220f      	movs	r2, #15
 8009b86:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	08da      	lsrs	r2, r3, #3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3208      	adds	r2, #8
 8009bb0:	6939      	ldr	r1, [r7, #16]
 8009bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	2203      	movs	r2, #3
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f003 0203 	and.w	r2, r3, #3
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 80a6 	beq.w	8009d44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bf8:	4b5b      	ldr	r3, [pc, #364]	; (8009d68 <HAL_GPIO_Init+0x2e4>)
 8009bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfc:	4a5a      	ldr	r2, [pc, #360]	; (8009d68 <HAL_GPIO_Init+0x2e4>)
 8009bfe:	f043 0301 	orr.w	r3, r3, #1
 8009c02:	6613      	str	r3, [r2, #96]	; 0x60
 8009c04:	4b58      	ldr	r3, [pc, #352]	; (8009d68 <HAL_GPIO_Init+0x2e4>)
 8009c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c10:	4a56      	ldr	r2, [pc, #344]	; (8009d6c <HAL_GPIO_Init+0x2e8>)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	089b      	lsrs	r3, r3, #2
 8009c16:	3302      	adds	r3, #2
 8009c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	220f      	movs	r2, #15
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	4013      	ands	r3, r2
 8009c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009c3a:	d01f      	beq.n	8009c7c <HAL_GPIO_Init+0x1f8>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a4c      	ldr	r2, [pc, #304]	; (8009d70 <HAL_GPIO_Init+0x2ec>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d019      	beq.n	8009c78 <HAL_GPIO_Init+0x1f4>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a4b      	ldr	r2, [pc, #300]	; (8009d74 <HAL_GPIO_Init+0x2f0>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d013      	beq.n	8009c74 <HAL_GPIO_Init+0x1f0>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a4a      	ldr	r2, [pc, #296]	; (8009d78 <HAL_GPIO_Init+0x2f4>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d00d      	beq.n	8009c70 <HAL_GPIO_Init+0x1ec>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a49      	ldr	r2, [pc, #292]	; (8009d7c <HAL_GPIO_Init+0x2f8>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d007      	beq.n	8009c6c <HAL_GPIO_Init+0x1e8>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a48      	ldr	r2, [pc, #288]	; (8009d80 <HAL_GPIO_Init+0x2fc>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d101      	bne.n	8009c68 <HAL_GPIO_Init+0x1e4>
 8009c64:	2305      	movs	r3, #5
 8009c66:	e00a      	b.n	8009c7e <HAL_GPIO_Init+0x1fa>
 8009c68:	2306      	movs	r3, #6
 8009c6a:	e008      	b.n	8009c7e <HAL_GPIO_Init+0x1fa>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	e006      	b.n	8009c7e <HAL_GPIO_Init+0x1fa>
 8009c70:	2303      	movs	r3, #3
 8009c72:	e004      	b.n	8009c7e <HAL_GPIO_Init+0x1fa>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e002      	b.n	8009c7e <HAL_GPIO_Init+0x1fa>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e000      	b.n	8009c7e <HAL_GPIO_Init+0x1fa>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	f002 0203 	and.w	r2, r2, #3
 8009c84:	0092      	lsls	r2, r2, #2
 8009c86:	4093      	lsls	r3, r2
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c8e:	4937      	ldr	r1, [pc, #220]	; (8009d6c <HAL_GPIO_Init+0x2e8>)
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	089b      	lsrs	r3, r3, #2
 8009c94:	3302      	adds	r3, #2
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009c9c:	4b39      	ldr	r3, [pc, #228]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	43db      	mvns	r3, r3
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009cc0:	4a30      	ldr	r2, [pc, #192]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009cc6:	4b2f      	ldr	r3, [pc, #188]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	43db      	mvns	r3, r3
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009cea:	4a26      	ldr	r2, [pc, #152]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009cf0:	4b24      	ldr	r3, [pc, #144]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009d14:	4a1b      	ldr	r2, [pc, #108]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009d1a:	4b1a      	ldr	r3, [pc, #104]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	43db      	mvns	r3, r3
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4013      	ands	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d3e:	4a11      	ldr	r2, [pc, #68]	; (8009d84 <HAL_GPIO_Init+0x300>)
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3301      	adds	r3, #1
 8009d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	fa22 f303 	lsr.w	r3, r2, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f47f ae9d 	bne.w	8009a94 <HAL_GPIO_Init+0x10>
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	48000400 	.word	0x48000400
 8009d74:	48000800 	.word	0x48000800
 8009d78:	48000c00 	.word	0x48000c00
 8009d7c:	48001000 	.word	0x48001000
 8009d80:	48001400 	.word	0x48001400
 8009d84:	40010400 	.word	0x40010400

08009d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	807b      	strh	r3, [r7, #2]
 8009d94:	4613      	mov	r3, r2
 8009d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d98:	787b      	ldrb	r3, [r7, #1]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d9e:	887a      	ldrh	r2, [r7, #2]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009da4:	e002      	b.n	8009dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009da6:	887a      	ldrh	r2, [r7, #2]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d141      	bne.n	8009e4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009dc6:	4b4b      	ldr	r3, [pc, #300]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dd2:	d131      	bne.n	8009e38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009dd4:	4b47      	ldr	r3, [pc, #284]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dda:	4a46      	ldr	r2, [pc, #280]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009de4:	4b43      	ldr	r3, [pc, #268]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009dec:	4a41      	ldr	r2, [pc, #260]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009df4:	4b40      	ldr	r3, [pc, #256]	; (8009ef8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2232      	movs	r2, #50	; 0x32
 8009dfa:	fb02 f303 	mul.w	r3, r2, r3
 8009dfe:	4a3f      	ldr	r2, [pc, #252]	; (8009efc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e00:	fba2 2303 	umull	r2, r3, r2, r3
 8009e04:	0c9b      	lsrs	r3, r3, #18
 8009e06:	3301      	adds	r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e0a:	e002      	b.n	8009e12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e12:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e1e:	d102      	bne.n	8009e26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1f2      	bne.n	8009e0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e26:	4b33      	ldr	r3, [pc, #204]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e32:	d158      	bne.n	8009ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e057      	b.n	8009ee8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e38:	4b2e      	ldr	r3, [pc, #184]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e3e:	4a2d      	ldr	r2, [pc, #180]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009e48:	e04d      	b.n	8009ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e50:	d141      	bne.n	8009ed6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e52:	4b28      	ldr	r3, [pc, #160]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e5e:	d131      	bne.n	8009ec4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e60:	4b24      	ldr	r3, [pc, #144]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e66:	4a23      	ldr	r2, [pc, #140]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e70:	4b20      	ldr	r3, [pc, #128]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009e78:	4a1e      	ldr	r2, [pc, #120]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009e80:	4b1d      	ldr	r3, [pc, #116]	; (8009ef8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2232      	movs	r2, #50	; 0x32
 8009e86:	fb02 f303 	mul.w	r3, r2, r3
 8009e8a:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e90:	0c9b      	lsrs	r3, r3, #18
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e96:	e002      	b.n	8009e9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e9e:	4b15      	ldr	r3, [pc, #84]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eaa:	d102      	bne.n	8009eb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f2      	bne.n	8009e98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009eb2:	4b10      	ldr	r3, [pc, #64]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ebe:	d112      	bne.n	8009ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e011      	b.n	8009ee8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eca:	4a0a      	ldr	r2, [pc, #40]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009ed4:	e007      	b.n	8009ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009ed6:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ede:	4a05      	ldr	r2, [pc, #20]	; (8009ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ee4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40007000 	.word	0x40007000
 8009ef8:	20000000 	.word	0x20000000
 8009efc:	431bde83 	.word	0x431bde83

08009f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e306      	b.n	800a520 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d075      	beq.n	800a00a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f1e:	4b97      	ldr	r3, [pc, #604]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f003 030c 	and.w	r3, r3, #12
 8009f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f28:	4b94      	ldr	r3, [pc, #592]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b0c      	cmp	r3, #12
 8009f36:	d102      	bne.n	8009f3e <HAL_RCC_OscConfig+0x3e>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d002      	beq.n	8009f44 <HAL_RCC_OscConfig+0x44>
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d10b      	bne.n	8009f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f44:	4b8d      	ldr	r3, [pc, #564]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d05b      	beq.n	800a008 <HAL_RCC_OscConfig+0x108>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d157      	bne.n	800a008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e2e1      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f64:	d106      	bne.n	8009f74 <HAL_RCC_OscConfig+0x74>
 8009f66:	4b85      	ldr	r3, [pc, #532]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a84      	ldr	r2, [pc, #528]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	e01d      	b.n	8009fb0 <HAL_RCC_OscConfig+0xb0>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f7c:	d10c      	bne.n	8009f98 <HAL_RCC_OscConfig+0x98>
 8009f7e:	4b7f      	ldr	r3, [pc, #508]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a7e      	ldr	r2, [pc, #504]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	4b7c      	ldr	r3, [pc, #496]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a7b      	ldr	r2, [pc, #492]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	e00b      	b.n	8009fb0 <HAL_RCC_OscConfig+0xb0>
 8009f98:	4b78      	ldr	r3, [pc, #480]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a77      	ldr	r2, [pc, #476]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	4b75      	ldr	r3, [pc, #468]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a74      	ldr	r2, [pc, #464]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d013      	beq.n	8009fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb8:	f7fc fce4 	bl	8006984 <HAL_GetTick>
 8009fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fbe:	e008      	b.n	8009fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fc0:	f7fc fce0 	bl	8006984 <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	2b64      	cmp	r3, #100	; 0x64
 8009fcc:	d901      	bls.n	8009fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e2a6      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fd2:	4b6a      	ldr	r3, [pc, #424]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0f0      	beq.n	8009fc0 <HAL_RCC_OscConfig+0xc0>
 8009fde:	e014      	b.n	800a00a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe0:	f7fc fcd0 	bl	8006984 <HAL_GetTick>
 8009fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009fe6:	e008      	b.n	8009ffa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fe8:	f7fc fccc 	bl	8006984 <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	2b64      	cmp	r3, #100	; 0x64
 8009ff4:	d901      	bls.n	8009ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e292      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ffa:	4b60      	ldr	r3, [pc, #384]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1f0      	bne.n	8009fe8 <HAL_RCC_OscConfig+0xe8>
 800a006:	e000      	b.n	800a00a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d075      	beq.n	800a102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a016:	4b59      	ldr	r3, [pc, #356]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 030c 	and.w	r3, r3, #12
 800a01e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a020:	4b56      	ldr	r3, [pc, #344]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	2b0c      	cmp	r3, #12
 800a02e:	d102      	bne.n	800a036 <HAL_RCC_OscConfig+0x136>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d002      	beq.n	800a03c <HAL_RCC_OscConfig+0x13c>
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d11f      	bne.n	800a07c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a03c:	4b4f      	ldr	r3, [pc, #316]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <HAL_RCC_OscConfig+0x154>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e265      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a054:	4b49      	ldr	r3, [pc, #292]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	4946      	ldr	r1, [pc, #280]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a064:	4313      	orrs	r3, r2
 800a066:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a068:	4b45      	ldr	r3, [pc, #276]	; (800a180 <HAL_RCC_OscConfig+0x280>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fc fc3d 	bl	80068ec <HAL_InitTick>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d043      	beq.n	800a100 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e251      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d023      	beq.n	800a0cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a084:	4b3d      	ldr	r3, [pc, #244]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a3c      	ldr	r2, [pc, #240]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a08e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a090:	f7fc fc78 	bl	8006984 <HAL_GetTick>
 800a094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a096:	e008      	b.n	800a0aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a098:	f7fc fc74 	bl	8006984 <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d901      	bls.n	800a0aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e23a      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0aa:	4b34      	ldr	r3, [pc, #208]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0f0      	beq.n	800a098 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b6:	4b31      	ldr	r3, [pc, #196]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	061b      	lsls	r3, r3, #24
 800a0c4:	492d      	ldr	r1, [pc, #180]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	604b      	str	r3, [r1, #4]
 800a0ca:	e01a      	b.n	800a102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0cc:	4b2b      	ldr	r3, [pc, #172]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2a      	ldr	r2, [pc, #168]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a0d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d8:	f7fc fc54 	bl	8006984 <HAL_GetTick>
 800a0dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0de:	e008      	b.n	800a0f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0e0:	f7fc fc50 	bl	8006984 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e216      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0f2:	4b22      	ldr	r3, [pc, #136]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f0      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x1e0>
 800a0fe:	e000      	b.n	800a102 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a100:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d041      	beq.n	800a192 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d01c      	beq.n	800a150 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a116:	4b19      	ldr	r3, [pc, #100]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a11c:	4a17      	ldr	r2, [pc, #92]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a11e:	f043 0301 	orr.w	r3, r3, #1
 800a122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a126:	f7fc fc2d 	bl	8006984 <HAL_GetTick>
 800a12a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a12c:	e008      	b.n	800a140 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a12e:	f7fc fc29 	bl	8006984 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e1ef      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a140:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a146:	f003 0302 	and.w	r3, r3, #2
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0ef      	beq.n	800a12e <HAL_RCC_OscConfig+0x22e>
 800a14e:	e020      	b.n	800a192 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a150:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a156:	4a09      	ldr	r2, [pc, #36]	; (800a17c <HAL_RCC_OscConfig+0x27c>)
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a160:	f7fc fc10 	bl	8006984 <HAL_GetTick>
 800a164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a166:	e00d      	b.n	800a184 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a168:	f7fc fc0c 	bl	8006984 <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d906      	bls.n	800a184 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e1d2      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
 800a17a:	bf00      	nop
 800a17c:	40021000 	.word	0x40021000
 800a180:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a184:	4b8c      	ldr	r3, [pc, #560]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1ea      	bne.n	800a168 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0304 	and.w	r3, r3, #4
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80a6 	beq.w	800a2ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a1a4:	4b84      	ldr	r3, [pc, #528]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x2b4>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <HAL_RCC_OscConfig+0x2b6>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00d      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1ba:	4b7f      	ldr	r3, [pc, #508]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1be:	4a7e      	ldr	r2, [pc, #504]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c4:	6593      	str	r3, [r2, #88]	; 0x58
 800a1c6:	4b7c      	ldr	r3, [pc, #496]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1d6:	4b79      	ldr	r3, [pc, #484]	; (800a3bc <HAL_RCC_OscConfig+0x4bc>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d118      	bne.n	800a214 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1e2:	4b76      	ldr	r3, [pc, #472]	; (800a3bc <HAL_RCC_OscConfig+0x4bc>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a75      	ldr	r2, [pc, #468]	; (800a3bc <HAL_RCC_OscConfig+0x4bc>)
 800a1e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1ee:	f7fc fbc9 	bl	8006984 <HAL_GetTick>
 800a1f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1f4:	e008      	b.n	800a208 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1f6:	f7fc fbc5 	bl	8006984 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	2b02      	cmp	r3, #2
 800a202:	d901      	bls.n	800a208 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e18b      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a208:	4b6c      	ldr	r3, [pc, #432]	; (800a3bc <HAL_RCC_OscConfig+0x4bc>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0f0      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d108      	bne.n	800a22e <HAL_RCC_OscConfig+0x32e>
 800a21c:	4b66      	ldr	r3, [pc, #408]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a222:	4a65      	ldr	r2, [pc, #404]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a224:	f043 0301 	orr.w	r3, r3, #1
 800a228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a22c:	e024      	b.n	800a278 <HAL_RCC_OscConfig+0x378>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2b05      	cmp	r3, #5
 800a234:	d110      	bne.n	800a258 <HAL_RCC_OscConfig+0x358>
 800a236:	4b60      	ldr	r3, [pc, #384]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a23c:	4a5e      	ldr	r2, [pc, #376]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a23e:	f043 0304 	orr.w	r3, r3, #4
 800a242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a246:	4b5c      	ldr	r3, [pc, #368]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a24c:	4a5a      	ldr	r2, [pc, #360]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a256:	e00f      	b.n	800a278 <HAL_RCC_OscConfig+0x378>
 800a258:	4b57      	ldr	r3, [pc, #348]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a25e:	4a56      	ldr	r2, [pc, #344]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a260:	f023 0301 	bic.w	r3, r3, #1
 800a264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a268:	4b53      	ldr	r3, [pc, #332]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a26e:	4a52      	ldr	r2, [pc, #328]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a270:	f023 0304 	bic.w	r3, r3, #4
 800a274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d016      	beq.n	800a2ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a280:	f7fc fb80 	bl	8006984 <HAL_GetTick>
 800a284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a286:	e00a      	b.n	800a29e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a288:	f7fc fb7c 	bl	8006984 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	f241 3288 	movw	r2, #5000	; 0x1388
 800a296:	4293      	cmp	r3, r2
 800a298:	d901      	bls.n	800a29e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e140      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a29e:	4b46      	ldr	r3, [pc, #280]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0ed      	beq.n	800a288 <HAL_RCC_OscConfig+0x388>
 800a2ac:	e015      	b.n	800a2da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ae:	f7fc fb69 	bl	8006984 <HAL_GetTick>
 800a2b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2b4:	e00a      	b.n	800a2cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2b6:	f7fc fb65 	bl	8006984 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d901      	bls.n	800a2cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e129      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2cc:	4b3a      	ldr	r3, [pc, #232]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1ed      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d105      	bne.n	800a2ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e0:	4b35      	ldr	r3, [pc, #212]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e4:	4a34      	ldr	r2, [pc, #208]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a2e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0320 	and.w	r3, r3, #32
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d03c      	beq.n	800a372 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01c      	beq.n	800a33a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a300:	4b2d      	ldr	r3, [pc, #180]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a306:	4a2c      	ldr	r2, [pc, #176]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a308:	f043 0301 	orr.w	r3, r3, #1
 800a30c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a310:	f7fc fb38 	bl	8006984 <HAL_GetTick>
 800a314:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a318:	f7fc fb34 	bl	8006984 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e0fa      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a32a:	4b23      	ldr	r3, [pc, #140]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a32c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a330:	f003 0302 	and.w	r3, r3, #2
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0ef      	beq.n	800a318 <HAL_RCC_OscConfig+0x418>
 800a338:	e01b      	b.n	800a372 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a33a:	4b1f      	ldr	r3, [pc, #124]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a33c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a340:	4a1d      	ldr	r2, [pc, #116]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a342:	f023 0301 	bic.w	r3, r3, #1
 800a346:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a34a:	f7fc fb1b 	bl	8006984 <HAL_GetTick>
 800a34e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a350:	e008      	b.n	800a364 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a352:	f7fc fb17 	bl	8006984 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d901      	bls.n	800a364 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e0dd      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a364:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1ef      	bne.n	800a352 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 80d1 	beq.w	800a51e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a37c:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	f003 030c 	and.w	r3, r3, #12
 800a384:	2b0c      	cmp	r3, #12
 800a386:	f000 808b 	beq.w	800a4a0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d15e      	bne.n	800a450 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a08      	ldr	r2, [pc, #32]	; (800a3b8 <HAL_RCC_OscConfig+0x4b8>)
 800a398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a39c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39e:	f7fc faf1 	bl	8006984 <HAL_GetTick>
 800a3a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3a4:	e00c      	b.n	800a3c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3a6:	f7fc faed 	bl	8006984 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d905      	bls.n	800a3c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e0b3      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
 800a3b8:	40021000 	.word	0x40021000
 800a3bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3c0:	4b59      	ldr	r3, [pc, #356]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1ec      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3cc:	4b56      	ldr	r3, [pc, #344]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a3ce:	68da      	ldr	r2, [r3, #12]
 800a3d0:	4b56      	ldr	r3, [pc, #344]	; (800a52c <HAL_RCC_OscConfig+0x62c>)
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6a11      	ldr	r1, [r2, #32]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3dc:	3a01      	subs	r2, #1
 800a3de:	0112      	lsls	r2, r2, #4
 800a3e0:	4311      	orrs	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a3e6:	0212      	lsls	r2, r2, #8
 800a3e8:	4311      	orrs	r1, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3ee:	0852      	lsrs	r2, r2, #1
 800a3f0:	3a01      	subs	r2, #1
 800a3f2:	0552      	lsls	r2, r2, #21
 800a3f4:	4311      	orrs	r1, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a3fa:	0852      	lsrs	r2, r2, #1
 800a3fc:	3a01      	subs	r2, #1
 800a3fe:	0652      	lsls	r2, r2, #25
 800a400:	4311      	orrs	r1, r2
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a406:	06d2      	lsls	r2, r2, #27
 800a408:	430a      	orrs	r2, r1
 800a40a:	4947      	ldr	r1, [pc, #284]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a410:	4b45      	ldr	r3, [pc, #276]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a44      	ldr	r2, [pc, #272]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a41a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a41c:	4b42      	ldr	r3, [pc, #264]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	4a41      	ldr	r2, [pc, #260]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a426:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a428:	f7fc faac 	bl	8006984 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a430:	f7fc faa8 	bl	8006984 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e06e      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a442:	4b39      	ldr	r3, [pc, #228]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0x530>
 800a44e:	e066      	b.n	800a51e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a450:	4b35      	ldr	r3, [pc, #212]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a34      	ldr	r2, [pc, #208]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a45a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a45c:	4b32      	ldr	r3, [pc, #200]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	4a31      	ldr	r2, [pc, #196]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a462:	f023 0303 	bic.w	r3, r3, #3
 800a466:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a468:	4b2f      	ldr	r3, [pc, #188]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	4a2e      	ldr	r2, [pc, #184]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a46e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a476:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a478:	f7fc fa84 	bl	8006984 <HAL_GetTick>
 800a47c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a47e:	e008      	b.n	800a492 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a480:	f7fc fa80 	bl	8006984 <HAL_GetTick>
 800a484:	4602      	mov	r2, r0
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d901      	bls.n	800a492 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e046      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a492:	4b25      	ldr	r3, [pc, #148]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f0      	bne.n	800a480 <HAL_RCC_OscConfig+0x580>
 800a49e:	e03e      	b.n	800a51e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e039      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a4ac:	4b1e      	ldr	r3, [pc, #120]	; (800a528 <HAL_RCC_OscConfig+0x628>)
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f003 0203 	and.w	r2, r3, #3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d12c      	bne.n	800a51a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d123      	bne.n	800a51a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d11b      	bne.n	800a51a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d113      	bne.n	800a51a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	3b01      	subs	r3, #1
 800a500:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a502:	429a      	cmp	r2, r3
 800a504:	d109      	bne.n	800a51a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	3b01      	subs	r3, #1
 800a514:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a516:	429a      	cmp	r2, r3
 800a518:	d001      	beq.n	800a51e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3720      	adds	r7, #32
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	40021000 	.word	0x40021000
 800a52c:	019f800c 	.word	0x019f800c

0800a530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e11e      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a548:	4b91      	ldr	r3, [pc, #580]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d910      	bls.n	800a578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a556:	4b8e      	ldr	r3, [pc, #568]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f023 020f 	bic.w	r2, r3, #15
 800a55e:	498c      	ldr	r1, [pc, #560]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	4313      	orrs	r3, r2
 800a564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a566:	4b8a      	ldr	r3, [pc, #552]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 030f 	and.w	r3, r3, #15
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d001      	beq.n	800a578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e106      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	d073      	beq.n	800a66c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d129      	bne.n	800a5e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a58c:	4b81      	ldr	r3, [pc, #516]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e0f4      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a59c:	f000 f99e 	bl	800a8dc <RCC_GetSysClockFreqFromPLLSource>
 800a5a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	4a7c      	ldr	r2, [pc, #496]	; (800a798 <HAL_RCC_ClockConfig+0x268>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d93f      	bls.n	800a62a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a5aa:	4b7a      	ldr	r3, [pc, #488]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d009      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d033      	beq.n	800a62a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d12f      	bne.n	800a62a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a5ca:	4b72      	ldr	r3, [pc, #456]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5d2:	4a70      	ldr	r2, [pc, #448]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	e024      	b.n	800a62a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d107      	bne.n	800a5f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5e8:	4b6a      	ldr	r3, [pc, #424]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e0c6      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5f8:	4b66      	ldr	r3, [pc, #408]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e0be      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a608:	f000 f8ce 	bl	800a7a8 <HAL_RCC_GetSysClockFreq>
 800a60c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	4a61      	ldr	r2, [pc, #388]	; (800a798 <HAL_RCC_ClockConfig+0x268>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d909      	bls.n	800a62a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a616:	4b5f      	ldr	r3, [pc, #380]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a61e:	4a5d      	ldr	r2, [pc, #372]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a624:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a626:	2380      	movs	r3, #128	; 0x80
 800a628:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a62a:	4b5a      	ldr	r3, [pc, #360]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f023 0203 	bic.w	r2, r3, #3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	4957      	ldr	r1, [pc, #348]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a63c:	f7fc f9a2 	bl	8006984 <HAL_GetTick>
 800a640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a642:	e00a      	b.n	800a65a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a644:	f7fc f99e 	bl	8006984 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a652:	4293      	cmp	r3, r2
 800a654:	d901      	bls.n	800a65a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e095      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a65a:	4b4e      	ldr	r3, [pc, #312]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 020c 	and.w	r2, r3, #12
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	429a      	cmp	r2, r3
 800a66a:	d1eb      	bne.n	800a644 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d023      	beq.n	800a6c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	d005      	beq.n	800a690 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a684:	4b43      	ldr	r3, [pc, #268]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	4a42      	ldr	r2, [pc, #264]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a68a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a68e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0308 	and.w	r3, r3, #8
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a69c:	4b3d      	ldr	r3, [pc, #244]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6a4:	4a3b      	ldr	r2, [pc, #236]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a6a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a6aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6ac:	4b39      	ldr	r3, [pc, #228]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	4936      	ldr	r1, [pc, #216]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	608b      	str	r3, [r1, #8]
 800a6be:	e008      	b.n	800a6d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d105      	bne.n	800a6d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a6c6:	4b33      	ldr	r3, [pc, #204]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	4a32      	ldr	r2, [pc, #200]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a6cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6d2:	4b2f      	ldr	r3, [pc, #188]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 030f 	and.w	r3, r3, #15
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d21d      	bcs.n	800a71c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6e0:	4b2b      	ldr	r3, [pc, #172]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f023 020f 	bic.w	r2, r3, #15
 800a6e8:	4929      	ldr	r1, [pc, #164]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a6f0:	f7fc f948 	bl	8006984 <HAL_GetTick>
 800a6f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f6:	e00a      	b.n	800a70e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6f8:	f7fc f944 	bl	8006984 <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	f241 3288 	movw	r2, #5000	; 0x1388
 800a706:	4293      	cmp	r3, r2
 800a708:	d901      	bls.n	800a70e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e03b      	b.n	800a786 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a70e:	4b20      	ldr	r3, [pc, #128]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 030f 	and.w	r3, r3, #15
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d1ed      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d008      	beq.n	800a73a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a728:	4b1a      	ldr	r3, [pc, #104]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	4917      	ldr	r1, [pc, #92]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a736:	4313      	orrs	r3, r2
 800a738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0308 	and.w	r3, r3, #8
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a746:	4b13      	ldr	r3, [pc, #76]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	490f      	ldr	r1, [pc, #60]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a756:	4313      	orrs	r3, r2
 800a758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a75a:	f000 f825 	bl	800a7a8 <HAL_RCC_GetSysClockFreq>
 800a75e:	4602      	mov	r2, r0
 800a760:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <HAL_RCC_ClockConfig+0x264>)
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	091b      	lsrs	r3, r3, #4
 800a766:	f003 030f 	and.w	r3, r3, #15
 800a76a:	490c      	ldr	r1, [pc, #48]	; (800a79c <HAL_RCC_ClockConfig+0x26c>)
 800a76c:	5ccb      	ldrb	r3, [r1, r3]
 800a76e:	f003 031f 	and.w	r3, r3, #31
 800a772:	fa22 f303 	lsr.w	r3, r2, r3
 800a776:	4a0a      	ldr	r2, [pc, #40]	; (800a7a0 <HAL_RCC_ClockConfig+0x270>)
 800a778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a77a:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <HAL_RCC_ClockConfig+0x274>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fc f8b4 	bl	80068ec <HAL_InitTick>
 800a784:	4603      	mov	r3, r0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	40022000 	.word	0x40022000
 800a794:	40021000 	.word	0x40021000
 800a798:	04c4b400 	.word	0x04c4b400
 800a79c:	08015094 	.word	0x08015094
 800a7a0:	20000000 	.word	0x20000000
 800a7a4:	20000004 	.word	0x20000004

0800a7a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a7ae:	4b2c      	ldr	r3, [pc, #176]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f003 030c 	and.w	r3, r3, #12
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	d102      	bne.n	800a7c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7ba:	4b2a      	ldr	r3, [pc, #168]	; (800a864 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a7bc:	613b      	str	r3, [r7, #16]
 800a7be:	e047      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a7c0:	4b27      	ldr	r3, [pc, #156]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f003 030c 	and.w	r3, r3, #12
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d102      	bne.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7cc:	4b26      	ldr	r3, [pc, #152]	; (800a868 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a7ce:	613b      	str	r3, [r7, #16]
 800a7d0:	e03e      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a7d2:	4b23      	ldr	r3, [pc, #140]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f003 030c 	and.w	r3, r3, #12
 800a7da:	2b0c      	cmp	r3, #12
 800a7dc:	d136      	bne.n	800a84c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7de:	4b20      	ldr	r3, [pc, #128]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f003 0303 	and.w	r3, r3, #3
 800a7e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	091b      	lsrs	r3, r3, #4
 800a7ee:	f003 030f 	and.w	r3, r3, #15
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d10c      	bne.n	800a816 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7fc:	4a1a      	ldr	r2, [pc, #104]	; (800a868 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	fbb2 f3f3 	udiv	r3, r2, r3
 800a804:	4a16      	ldr	r2, [pc, #88]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a806:	68d2      	ldr	r2, [r2, #12]
 800a808:	0a12      	lsrs	r2, r2, #8
 800a80a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a80e:	fb02 f303 	mul.w	r3, r2, r3
 800a812:	617b      	str	r3, [r7, #20]
      break;
 800a814:	e00c      	b.n	800a830 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a816:	4a13      	ldr	r2, [pc, #76]	; (800a864 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a81e:	4a10      	ldr	r2, [pc, #64]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a820:	68d2      	ldr	r2, [r2, #12]
 800a822:	0a12      	lsrs	r2, r2, #8
 800a824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a828:	fb02 f303 	mul.w	r3, r2, r3
 800a82c:	617b      	str	r3, [r7, #20]
      break;
 800a82e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	0e5b      	lsrs	r3, r3, #25
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	3301      	adds	r3, #1
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	fbb2 f3f3 	udiv	r3, r2, r3
 800a848:	613b      	str	r3, [r7, #16]
 800a84a:	e001      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a850:	693b      	ldr	r3, [r7, #16]
}
 800a852:	4618      	mov	r0, r3
 800a854:	371c      	adds	r7, #28
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	40021000 	.word	0x40021000
 800a864:	00f42400 	.word	0x00f42400
 800a868:	007a1200 	.word	0x007a1200

0800a86c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a870:	4b03      	ldr	r3, [pc, #12]	; (800a880 <HAL_RCC_GetHCLKFreq+0x14>)
 800a872:	681b      	ldr	r3, [r3, #0]
}
 800a874:	4618      	mov	r0, r3
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20000000 	.word	0x20000000

0800a884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a888:	f7ff fff0 	bl	800a86c <HAL_RCC_GetHCLKFreq>
 800a88c:	4602      	mov	r2, r0
 800a88e:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800a89a:	5ccb      	ldrb	r3, [r1, r3]
 800a89c:	f003 031f 	and.w	r3, r3, #31
 800a8a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	080150a4 	.word	0x080150a4

0800a8b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a8b4:	f7ff ffda 	bl	800a86c <HAL_RCC_GetHCLKFreq>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4b06      	ldr	r3, [pc, #24]	; (800a8d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	0adb      	lsrs	r3, r3, #11
 800a8c0:	f003 0307 	and.w	r3, r3, #7
 800a8c4:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8c6:	5ccb      	ldrb	r3, [r1, r3]
 800a8c8:	f003 031f 	and.w	r3, r3, #31
 800a8cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	080150a4 	.word	0x080150a4

0800a8dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a8e2:	4b1e      	ldr	r3, [pc, #120]	; (800a95c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a8ec:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	091b      	lsrs	r3, r3, #4
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d10c      	bne.n	800a91a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a900:	4a17      	ldr	r2, [pc, #92]	; (800a960 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	fbb2 f3f3 	udiv	r3, r2, r3
 800a908:	4a14      	ldr	r2, [pc, #80]	; (800a95c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a90a:	68d2      	ldr	r2, [r2, #12]
 800a90c:	0a12      	lsrs	r2, r2, #8
 800a90e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a912:	fb02 f303 	mul.w	r3, r2, r3
 800a916:	617b      	str	r3, [r7, #20]
    break;
 800a918:	e00c      	b.n	800a934 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a91a:	4a12      	ldr	r2, [pc, #72]	; (800a964 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a922:	4a0e      	ldr	r2, [pc, #56]	; (800a95c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a924:	68d2      	ldr	r2, [r2, #12]
 800a926:	0a12      	lsrs	r2, r2, #8
 800a928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a92c:	fb02 f303 	mul.w	r3, r2, r3
 800a930:	617b      	str	r3, [r7, #20]
    break;
 800a932:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	0e5b      	lsrs	r3, r3, #25
 800a93a:	f003 0303 	and.w	r3, r3, #3
 800a93e:	3301      	adds	r3, #1
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a94e:	687b      	ldr	r3, [r7, #4]
}
 800a950:	4618      	mov	r0, r3
 800a952:	371c      	adds	r7, #28
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	40021000 	.word	0x40021000
 800a960:	007a1200 	.word	0x007a1200
 800a964:	00f42400 	.word	0x00f42400

0800a968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a970:	2300      	movs	r3, #0
 800a972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a974:	2300      	movs	r3, #0
 800a976:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 8098 	beq.w	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a986:	2300      	movs	r3, #0
 800a988:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a98a:	4b43      	ldr	r3, [pc, #268]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10d      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a996:	4b40      	ldr	r3, [pc, #256]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99a:	4a3f      	ldr	r2, [pc, #252]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a99c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a0:	6593      	str	r3, [r2, #88]	; 0x58
 800a9a2:	4b3d      	ldr	r3, [pc, #244]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9aa:	60bb      	str	r3, [r7, #8]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9b2:	4b3a      	ldr	r3, [pc, #232]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a39      	ldr	r2, [pc, #228]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a9b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9be:	f7fb ffe1 	bl	8006984 <HAL_GetTick>
 800a9c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9c4:	e009      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9c6:	f7fb ffdd 	bl	8006984 <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d902      	bls.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	74fb      	strb	r3, [r7, #19]
        break;
 800a9d8:	e005      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9da:	4b30      	ldr	r3, [pc, #192]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0ef      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a9e6:	7cfb      	ldrb	r3, [r7, #19]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d159      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a9ec:	4b2a      	ldr	r3, [pc, #168]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d01e      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d019      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa08:	4b23      	ldr	r3, [pc, #140]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa14:	4b20      	ldr	r3, [pc, #128]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1a:	4a1f      	ldr	r2, [pc, #124]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa24:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa2a:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa34:	4a18      	ldr	r2, [pc, #96]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d016      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa46:	f7fb ff9d 	bl	8006984 <HAL_GetTick>
 800aa4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa4c:	e00b      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa4e:	f7fb ff99 	bl	8006984 <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d902      	bls.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	74fb      	strb	r3, [r7, #19]
            break;
 800aa64:	e006      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0ec      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800aa74:	7cfb      	ldrb	r3, [r7, #19]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10b      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa88:	4903      	ldr	r1, [pc, #12]	; (800aa98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa90:	e008      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa92:	7cfb      	ldrb	r3, [r7, #19]
 800aa94:	74bb      	strb	r3, [r7, #18]
 800aa96:	e005      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800aa98:	40021000 	.word	0x40021000
 800aa9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa0:	7cfb      	ldrb	r3, [r7, #19]
 800aaa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aaa4:	7c7b      	ldrb	r3, [r7, #17]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d105      	bne.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaaa:	4ba7      	ldr	r3, [pc, #668]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaae:	4aa6      	ldr	r2, [pc, #664]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aab4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00a      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aac2:	4ba1      	ldr	r3, [pc, #644]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac8:	f023 0203 	bic.w	r2, r3, #3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	499d      	ldr	r1, [pc, #628]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0302 	and.w	r3, r3, #2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00a      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aae4:	4b98      	ldr	r3, [pc, #608]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaea:	f023 020c 	bic.w	r2, r3, #12
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	4995      	ldr	r1, [pc, #596]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00a      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab06:	4b90      	ldr	r3, [pc, #576]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	498c      	ldr	r1, [pc, #560]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0308 	and.w	r3, r3, #8
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00a      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab28:	4b87      	ldr	r3, [pc, #540]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	4984      	ldr	r1, [pc, #528]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0310 	and.w	r3, r3, #16
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab4a:	4b7f      	ldr	r3, [pc, #508]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	497b      	ldr	r1, [pc, #492]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0320 	and.w	r3, r3, #32
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00a      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab6c:	4b76      	ldr	r3, [pc, #472]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	4973      	ldr	r1, [pc, #460]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab8e:	4b6e      	ldr	r3, [pc, #440]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	496a      	ldr	r1, [pc, #424]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00a      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800abb0:	4b65      	ldr	r3, [pc, #404]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	4962      	ldr	r1, [pc, #392]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00a      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abd2:	4b5d      	ldr	r3, [pc, #372]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	4959      	ldr	r1, [pc, #356]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00a      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abf4:	4b54      	ldr	r3, [pc, #336]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abfa:	f023 0203 	bic.w	r2, r3, #3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac02:	4951      	ldr	r1, [pc, #324]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00a      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac16:	4b4c      	ldr	r3, [pc, #304]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	4948      	ldr	r1, [pc, #288]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d015      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac38:	4b43      	ldr	r3, [pc, #268]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	4940      	ldr	r1, [pc, #256]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac56:	d105      	bne.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac58:	4b3b      	ldr	r3, [pc, #236]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	4a3a      	ldr	r2, [pc, #232]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d015      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac70:	4b35      	ldr	r3, [pc, #212]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac7e:	4932      	ldr	r1, [pc, #200]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac8e:	d105      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac90:	4b2d      	ldr	r3, [pc, #180]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	4a2c      	ldr	r2, [pc, #176]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d015      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aca8:	4b27      	ldr	r3, [pc, #156]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	4924      	ldr	r1, [pc, #144]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acc6:	d105      	bne.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acc8:	4b1f      	ldr	r3, [pc, #124]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d015      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ace0:	4b19      	ldr	r3, [pc, #100]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ace2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acee:	4916      	ldr	r1, [pc, #88]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acfe:	d105      	bne.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	4a10      	ldr	r2, [pc, #64]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d019      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad18:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad26:	4908      	ldr	r1, [pc, #32]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad36:	d109      	bne.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad38:	4b03      	ldr	r3, [pc, #12]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4a02      	ldr	r2, [pc, #8]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad42:	60d3      	str	r3, [r2, #12]
 800ad44:	e002      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ad46:	bf00      	nop
 800ad48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d015      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ad58:	4b29      	ldr	r3, [pc, #164]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad66:	4926      	ldr	r1, [pc, #152]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad76:	d105      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ad78:	4b21      	ldr	r3, [pc, #132]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	4a20      	ldr	r2, [pc, #128]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d015      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ad90:	4b1b      	ldr	r3, [pc, #108]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad9e:	4918      	ldr	r1, [pc, #96]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adae:	d105      	bne.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800adb0:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	4a12      	ldr	r2, [pc, #72]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d015      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800adc8:	4b0d      	ldr	r3, [pc, #52]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add6:	490a      	ldr	r1, [pc, #40]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800add8:	4313      	orrs	r3, r2
 800adda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ade6:	d105      	bne.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ade8:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	4a04      	ldr	r2, [pc, #16]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800adf4:	7cbb      	ldrb	r3, [r7, #18]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3718      	adds	r7, #24
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	40021000 	.word	0x40021000

0800ae04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e09d      	b.n	800af52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d108      	bne.n	800ae30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae26:	d009      	beq.n	800ae3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	61da      	str	r2, [r3, #28]
 800ae2e:	e005      	b.n	800ae3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7fb f8b8 	bl	8005fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae7c:	d902      	bls.n	800ae84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	e002      	b.n	800ae8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ae92:	d007      	beq.n	800aea4 <HAL_SPI_Init+0xa0>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae9c:	d002      	beq.n	800aea4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	f003 0302 	and.w	r3, r3, #2
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aed2:	431a      	orrs	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aedc:	431a      	orrs	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee6:	ea42 0103 	orr.w	r1, r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	0c1b      	lsrs	r3, r3, #16
 800af00:	f003 0204 	and.w	r2, r3, #4
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	431a      	orrs	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af12:	f003 0308 	and.w	r3, r3, #8
 800af16:	431a      	orrs	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800af20:	ea42 0103 	orr.w	r1, r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	430a      	orrs	r2, r1
 800af30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	69da      	ldr	r2, [r3, #28]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b08a      	sub	sp, #40	; 0x28
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	607a      	str	r2, [r7, #4]
 800af66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800af68:	2301      	movs	r3, #1
 800af6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d101      	bne.n	800af80 <HAL_SPI_TransmitReceive+0x26>
 800af7c:	2302      	movs	r3, #2
 800af7e:	e1fb      	b.n	800b378 <HAL_SPI_TransmitReceive+0x41e>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af88:	f7fb fcfc 	bl	8006984 <HAL_GetTick>
 800af8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800af9c:	887b      	ldrh	r3, [r7, #2]
 800af9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800afa0:	887b      	ldrh	r3, [r7, #2]
 800afa2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800afa4:	7efb      	ldrb	r3, [r7, #27]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d00e      	beq.n	800afc8 <HAL_SPI_TransmitReceive+0x6e>
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afb0:	d106      	bne.n	800afc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d102      	bne.n	800afc0 <HAL_SPI_TransmitReceive+0x66>
 800afba:	7efb      	ldrb	r3, [r7, #27]
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d003      	beq.n	800afc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800afc0:	2302      	movs	r3, #2
 800afc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800afc6:	e1cd      	b.n	800b364 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <HAL_SPI_TransmitReceive+0x80>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <HAL_SPI_TransmitReceive+0x80>
 800afd4:	887b      	ldrh	r3, [r7, #2]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d103      	bne.n	800afe2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800afe0:	e1c0      	b.n	800b364 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b04      	cmp	r3, #4
 800afec:	d003      	beq.n	800aff6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2205      	movs	r2, #5
 800aff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	887a      	ldrh	r2, [r7, #2]
 800b006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	887a      	ldrh	r2, [r7, #2]
 800b00e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	887a      	ldrh	r2, [r7, #2]
 800b01c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	887a      	ldrh	r2, [r7, #2]
 800b022:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b038:	d802      	bhi.n	800b040 <HAL_SPI_TransmitReceive+0xe6>
 800b03a:	8a3b      	ldrh	r3, [r7, #16]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d908      	bls.n	800b052 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b04e:	605a      	str	r2, [r3, #4]
 800b050:	e007      	b.n	800b062 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b060:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06c:	2b40      	cmp	r3, #64	; 0x40
 800b06e:	d007      	beq.n	800b080 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b07e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b088:	d97c      	bls.n	800b184 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <HAL_SPI_TransmitReceive+0x13e>
 800b092:	8a7b      	ldrh	r3, [r7, #18]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d169      	bne.n	800b16c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09c:	881a      	ldrh	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a8:	1c9a      	adds	r2, r3, #2
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0bc:	e056      	b.n	800b16c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d11b      	bne.n	800b104 <HAL_SPI_TransmitReceive+0x1aa>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d016      	beq.n	800b104 <HAL_SPI_TransmitReceive+0x1aa>
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d113      	bne.n	800b104 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	881a      	ldrh	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	1c9a      	adds	r2, r3, #2
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d11c      	bne.n	800b14c <HAL_SPI_TransmitReceive+0x1f2>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b118:	b29b      	uxth	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d016      	beq.n	800b14c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	b292      	uxth	r2, r2
 800b12a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b130:	1c9a      	adds	r2, r3, #2
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b148:	2301      	movs	r3, #1
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b14c:	f7fb fc1a 	bl	8006984 <HAL_GetTick>
 800b150:	4602      	mov	r2, r0
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b158:	429a      	cmp	r2, r3
 800b15a:	d807      	bhi.n	800b16c <HAL_SPI_TransmitReceive+0x212>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b162:	d003      	beq.n	800b16c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b16a:	e0fb      	b.n	800b364 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1a3      	bne.n	800b0be <HAL_SPI_TransmitReceive+0x164>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d19d      	bne.n	800b0be <HAL_SPI_TransmitReceive+0x164>
 800b182:	e0df      	b.n	800b344 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <HAL_SPI_TransmitReceive+0x23a>
 800b18c:	8a7b      	ldrh	r3, [r7, #18]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	f040 80cb 	bne.w	800b32a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b198:	b29b      	uxth	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d912      	bls.n	800b1c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a2:	881a      	ldrh	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ae:	1c9a      	adds	r2, r3, #2
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b02      	subs	r3, #2
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1c2:	e0b2      	b.n	800b32a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	330c      	adds	r3, #12
 800b1ce:	7812      	ldrb	r2, [r2, #0]
 800b1d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1ea:	e09e      	b.n	800b32a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d134      	bne.n	800b264 <HAL_SPI_TransmitReceive+0x30a>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	2b00      	cmp	r3, #0
 800b202:	d02f      	beq.n	800b264 <HAL_SPI_TransmitReceive+0x30a>
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	2b01      	cmp	r3, #1
 800b208:	d12c      	bne.n	800b264 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b20e:	b29b      	uxth	r3, r3
 800b210:	2b01      	cmp	r3, #1
 800b212:	d912      	bls.n	800b23a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	881a      	ldrh	r2, [r3, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b224:	1c9a      	adds	r2, r3, #2
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b22e:	b29b      	uxth	r3, r3
 800b230:	3b02      	subs	r3, #2
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b238:	e012      	b.n	800b260 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	330c      	adds	r3, #12
 800b244:	7812      	ldrb	r2, [r2, #0]
 800b246:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b256:	b29b      	uxth	r3, r3
 800b258:	3b01      	subs	r3, #1
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d148      	bne.n	800b304 <HAL_SPI_TransmitReceive+0x3aa>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b278:	b29b      	uxth	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d042      	beq.n	800b304 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b284:	b29b      	uxth	r3, r3
 800b286:	2b01      	cmp	r3, #1
 800b288:	d923      	bls.n	800b2d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b294:	b292      	uxth	r2, r2
 800b296:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29c:	1c9a      	adds	r2, r3, #2
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3b02      	subs	r3, #2
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d81f      	bhi.n	800b300 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b2ce:	605a      	str	r2, [r3, #4]
 800b2d0:	e016      	b.n	800b300 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f103 020c 	add.w	r2, r3, #12
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	7812      	ldrb	r2, [r2, #0]
 800b2e0:	b2d2      	uxtb	r2, r2
 800b2e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b300:	2301      	movs	r3, #1
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b304:	f7fb fb3e 	bl	8006984 <HAL_GetTick>
 800b308:	4602      	mov	r2, r0
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b310:	429a      	cmp	r2, r3
 800b312:	d803      	bhi.n	800b31c <HAL_SPI_TransmitReceive+0x3c2>
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31a:	d102      	bne.n	800b322 <HAL_SPI_TransmitReceive+0x3c8>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b328:	e01c      	b.n	800b364 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2b00      	cmp	r3, #0
 800b332:	f47f af5b 	bne.w	800b1ec <HAL_SPI_TransmitReceive+0x292>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f47f af54 	bne.w	800b1ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 f937 	bl	800b5bc <SPI_EndRxTxTransaction>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d006      	beq.n	800b362 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2220      	movs	r2, #32
 800b35e:	661a      	str	r2, [r3, #96]	; 0x60
 800b360:	e000      	b.n	800b364 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b362:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3728      	adds	r7, #40	; 0x28
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	4613      	mov	r3, r2
 800b38e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b390:	f7fb faf8 	bl	8006984 <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	1a9b      	subs	r3, r3, r2
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	4413      	add	r3, r2
 800b39e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b3a0:	f7fb faf0 	bl	8006984 <HAL_GetTick>
 800b3a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b3a6:	4b39      	ldr	r3, [pc, #228]	; (800b48c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	015b      	lsls	r3, r3, #5
 800b3ac:	0d1b      	lsrs	r3, r3, #20
 800b3ae:	69fa      	ldr	r2, [r7, #28]
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
 800b3b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3b6:	e054      	b.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3be:	d050      	beq.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b3c0:	f7fb fae0 	bl	8006984 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d902      	bls.n	800b3d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d13d      	bne.n	800b452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b3e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3ee:	d111      	bne.n	800b414 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3f8:	d004      	beq.n	800b404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b402:	d107      	bne.n	800b414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41c:	d10f      	bne.n	800b43e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b43c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e017      	b.n	800b482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	3b01      	subs	r3, #1
 800b460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4013      	ands	r3, r2
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	bf0c      	ite	eq
 800b472:	2301      	moveq	r3, #1
 800b474:	2300      	movne	r3, #0
 800b476:	b2db      	uxtb	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d19b      	bne.n	800b3b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3720      	adds	r7, #32
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20000000 	.word	0x20000000

0800b490 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08a      	sub	sp, #40	; 0x28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b4a2:	f7fb fa6f 	bl	8006984 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	1a9b      	subs	r3, r3, r2
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b4b2:	f7fb fa67 	bl	8006984 <HAL_GetTick>
 800b4b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b4c0:	4b3d      	ldr	r3, [pc, #244]	; (800b5b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	00da      	lsls	r2, r3, #3
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	0d1b      	lsrs	r3, r3, #20
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d2:	fb02 f303 	mul.w	r3, r2, r3
 800b4d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b4d8:	e060      	b.n	800b59c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b4e0:	d107      	bne.n	800b4f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d104      	bne.n	800b4f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d050      	beq.n	800b59c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b4fa:	f7fb fa43 	bl	8006984 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b506:	429a      	cmp	r2, r3
 800b508:	d902      	bls.n	800b510 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d13d      	bne.n	800b58c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b51e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b528:	d111      	bne.n	800b54e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b532:	d004      	beq.n	800b53e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b53c:	d107      	bne.n	800b54e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b54c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b556:	d10f      	bne.n	800b578 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b576:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e010      	b.n	800b5ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	3b01      	subs	r3, #1
 800b59a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d196      	bne.n	800b4da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3728      	adds	r7, #40	; 0x28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000000 	.word	0x20000000

0800b5bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff ff5b 	bl	800b490 <SPI_WaitFifoStateUntilTimeout>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d007      	beq.n	800b5f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5e4:	f043 0220 	orr.w	r2, r3, #32
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e027      	b.n	800b640 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2180      	movs	r1, #128	; 0x80
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff fec0 	bl	800b380 <SPI_WaitFlagStateUntilTimeout>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d007      	beq.n	800b616 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b60a:	f043 0220 	orr.w	r2, r3, #32
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e014      	b.n	800b640 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f7ff ff34 	bl	800b490 <SPI_WaitFifoStateUntilTimeout>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d007      	beq.n	800b63e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b632:	f043 0220 	orr.w	r2, r3, #32
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e000      	b.n	800b640 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e049      	b.n	800b6ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7fa ffd0 	bl	8006614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3304      	adds	r3, #4
 800b684:	4619      	mov	r1, r3
 800b686:	4610      	mov	r0, r2
 800b688:	f000 fdfe 	bl	800c288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d001      	beq.n	800b710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e054      	b.n	800b7ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2202      	movs	r2, #2
 800b714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0201 	orr.w	r2, r2, #1
 800b726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a26      	ldr	r2, [pc, #152]	; (800b7c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d022      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b73a:	d01d      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a22      	ldr	r2, [pc, #136]	; (800b7cc <HAL_TIM_Base_Start_IT+0xd4>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d018      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a21      	ldr	r2, [pc, #132]	; (800b7d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d013      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a1f      	ldr	r2, [pc, #124]	; (800b7d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d00e      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a1e      	ldr	r2, [pc, #120]	; (800b7d8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d009      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a1c      	ldr	r2, [pc, #112]	; (800b7dc <HAL_TIM_Base_Start_IT+0xe4>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d004      	beq.n	800b778 <HAL_TIM_Base_Start_IT+0x80>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a1b      	ldr	r2, [pc, #108]	; (800b7e0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d115      	bne.n	800b7a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689a      	ldr	r2, [r3, #8]
 800b77e:	4b19      	ldr	r3, [pc, #100]	; (800b7e4 <HAL_TIM_Base_Start_IT+0xec>)
 800b780:	4013      	ands	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b06      	cmp	r3, #6
 800b788:	d015      	beq.n	800b7b6 <HAL_TIM_Base_Start_IT+0xbe>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b790:	d011      	beq.n	800b7b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f042 0201 	orr.w	r2, r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7a2:	e008      	b.n	800b7b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0201 	orr.w	r2, r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	e000      	b.n	800b7b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	40012c00 	.word	0x40012c00
 800b7cc:	40000400 	.word	0x40000400
 800b7d0:	40000800 	.word	0x40000800
 800b7d4:	40000c00 	.word	0x40000c00
 800b7d8:	40013400 	.word	0x40013400
 800b7dc:	40014000 	.word	0x40014000
 800b7e0:	40015000 	.word	0x40015000
 800b7e4:	00010007 	.word	0x00010007

0800b7e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e049      	b.n	800b88e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f841 	bl	800b896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3304      	adds	r3, #4
 800b824:	4619      	mov	r1, r3
 800b826:	4610      	mov	r0, r2
 800b828:	f000 fd2e 	bl	800c288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
	...

0800b8ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d109      	bne.n	800b8d0 <HAL_TIM_PWM_Start+0x24>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	bf14      	ite	ne
 800b8c8:	2301      	movne	r3, #1
 800b8ca:	2300      	moveq	r3, #0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	e03c      	b.n	800b94a <HAL_TIM_PWM_Start+0x9e>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2b04      	cmp	r3, #4
 800b8d4:	d109      	bne.n	800b8ea <HAL_TIM_PWM_Start+0x3e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	bf14      	ite	ne
 800b8e2:	2301      	movne	r3, #1
 800b8e4:	2300      	moveq	r3, #0
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	e02f      	b.n	800b94a <HAL_TIM_PWM_Start+0x9e>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b08      	cmp	r3, #8
 800b8ee:	d109      	bne.n	800b904 <HAL_TIM_PWM_Start+0x58>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	bf14      	ite	ne
 800b8fc:	2301      	movne	r3, #1
 800b8fe:	2300      	moveq	r3, #0
 800b900:	b2db      	uxtb	r3, r3
 800b902:	e022      	b.n	800b94a <HAL_TIM_PWM_Start+0x9e>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b0c      	cmp	r3, #12
 800b908:	d109      	bne.n	800b91e <HAL_TIM_PWM_Start+0x72>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b01      	cmp	r3, #1
 800b914:	bf14      	ite	ne
 800b916:	2301      	movne	r3, #1
 800b918:	2300      	moveq	r3, #0
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	e015      	b.n	800b94a <HAL_TIM_PWM_Start+0x9e>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b10      	cmp	r3, #16
 800b922:	d109      	bne.n	800b938 <HAL_TIM_PWM_Start+0x8c>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	bf14      	ite	ne
 800b930:	2301      	movne	r3, #1
 800b932:	2300      	moveq	r3, #0
 800b934:	b2db      	uxtb	r3, r3
 800b936:	e008      	b.n	800b94a <HAL_TIM_PWM_Start+0x9e>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b01      	cmp	r3, #1
 800b942:	bf14      	ite	ne
 800b944:	2301      	movne	r3, #1
 800b946:	2300      	moveq	r3, #0
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e0a6      	b.n	800baa0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <HAL_TIM_PWM_Start+0xb6>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b960:	e023      	b.n	800b9aa <HAL_TIM_PWM_Start+0xfe>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b04      	cmp	r3, #4
 800b966:	d104      	bne.n	800b972 <HAL_TIM_PWM_Start+0xc6>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b970:	e01b      	b.n	800b9aa <HAL_TIM_PWM_Start+0xfe>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b08      	cmp	r3, #8
 800b976:	d104      	bne.n	800b982 <HAL_TIM_PWM_Start+0xd6>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b980:	e013      	b.n	800b9aa <HAL_TIM_PWM_Start+0xfe>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b0c      	cmp	r3, #12
 800b986:	d104      	bne.n	800b992 <HAL_TIM_PWM_Start+0xe6>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b990:	e00b      	b.n	800b9aa <HAL_TIM_PWM_Start+0xfe>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b10      	cmp	r3, #16
 800b996:	d104      	bne.n	800b9a2 <HAL_TIM_PWM_Start+0xf6>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2202      	movs	r2, #2
 800b99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9a0:	e003      	b.n	800b9aa <HAL_TIM_PWM_Start+0xfe>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 f8d6 	bl	800cb64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a3a      	ldr	r2, [pc, #232]	; (800baa8 <HAL_TIM_PWM_Start+0x1fc>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d018      	beq.n	800b9f4 <HAL_TIM_PWM_Start+0x148>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a39      	ldr	r2, [pc, #228]	; (800baac <HAL_TIM_PWM_Start+0x200>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d013      	beq.n	800b9f4 <HAL_TIM_PWM_Start+0x148>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a37      	ldr	r2, [pc, #220]	; (800bab0 <HAL_TIM_PWM_Start+0x204>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00e      	beq.n	800b9f4 <HAL_TIM_PWM_Start+0x148>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a36      	ldr	r2, [pc, #216]	; (800bab4 <HAL_TIM_PWM_Start+0x208>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d009      	beq.n	800b9f4 <HAL_TIM_PWM_Start+0x148>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a34      	ldr	r2, [pc, #208]	; (800bab8 <HAL_TIM_PWM_Start+0x20c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d004      	beq.n	800b9f4 <HAL_TIM_PWM_Start+0x148>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a33      	ldr	r2, [pc, #204]	; (800babc <HAL_TIM_PWM_Start+0x210>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d101      	bne.n	800b9f8 <HAL_TIM_PWM_Start+0x14c>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e000      	b.n	800b9fa <HAL_TIM_PWM_Start+0x14e>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d007      	beq.n	800ba0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a25      	ldr	r2, [pc, #148]	; (800baa8 <HAL_TIM_PWM_Start+0x1fc>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d022      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba20:	d01d      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a26      	ldr	r2, [pc, #152]	; (800bac0 <HAL_TIM_PWM_Start+0x214>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d018      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a24      	ldr	r2, [pc, #144]	; (800bac4 <HAL_TIM_PWM_Start+0x218>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d013      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a23      	ldr	r2, [pc, #140]	; (800bac8 <HAL_TIM_PWM_Start+0x21c>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00e      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a19      	ldr	r2, [pc, #100]	; (800baac <HAL_TIM_PWM_Start+0x200>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d009      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a18      	ldr	r2, [pc, #96]	; (800bab0 <HAL_TIM_PWM_Start+0x204>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d004      	beq.n	800ba5e <HAL_TIM_PWM_Start+0x1b2>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a18      	ldr	r2, [pc, #96]	; (800babc <HAL_TIM_PWM_Start+0x210>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d115      	bne.n	800ba8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689a      	ldr	r2, [r3, #8]
 800ba64:	4b19      	ldr	r3, [pc, #100]	; (800bacc <HAL_TIM_PWM_Start+0x220>)
 800ba66:	4013      	ands	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b06      	cmp	r3, #6
 800ba6e:	d015      	beq.n	800ba9c <HAL_TIM_PWM_Start+0x1f0>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba76:	d011      	beq.n	800ba9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba88:	e008      	b.n	800ba9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f042 0201 	orr.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	e000      	b.n	800ba9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	40012c00 	.word	0x40012c00
 800baac:	40013400 	.word	0x40013400
 800bab0:	40014000 	.word	0x40014000
 800bab4:	40014400 	.word	0x40014400
 800bab8:	40014800 	.word	0x40014800
 800babc:	40015000 	.word	0x40015000
 800bac0:	40000400 	.word	0x40000400
 800bac4:	40000800 	.word	0x40000800
 800bac8:	40000c00 	.word	0x40000c00
 800bacc:	00010007 	.word	0x00010007

0800bad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d122      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d11b      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f06f 0202 	mvn.w	r2, #2
 800bafc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2201      	movs	r2, #1
 800bb02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	f003 0303 	and.w	r3, r3, #3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fb9a 	bl	800c24c <HAL_TIM_IC_CaptureCallback>
 800bb18:	e005      	b.n	800bb26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fb8c 	bl	800c238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fb9d 	bl	800c260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f003 0304 	and.w	r3, r3, #4
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	d122      	bne.n	800bb80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0304 	and.w	r3, r3, #4
 800bb44:	2b04      	cmp	r3, #4
 800bb46:	d11b      	bne.n	800bb80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f06f 0204 	mvn.w	r2, #4
 800bb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2202      	movs	r2, #2
 800bb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fb70 	bl	800c24c <HAL_TIM_IC_CaptureCallback>
 800bb6c:	e005      	b.n	800bb7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fb62 	bl	800c238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fb73 	bl	800c260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b08      	cmp	r3, #8
 800bb8c:	d122      	bne.n	800bbd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b08      	cmp	r3, #8
 800bb9a:	d11b      	bne.n	800bbd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f06f 0208 	mvn.w	r2, #8
 800bba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2204      	movs	r2, #4
 800bbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f003 0303 	and.w	r3, r3, #3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fb46 	bl	800c24c <HAL_TIM_IC_CaptureCallback>
 800bbc0:	e005      	b.n	800bbce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fb38 	bl	800c238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fb49 	bl	800c260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	f003 0310 	and.w	r3, r3, #16
 800bbde:	2b10      	cmp	r3, #16
 800bbe0:	d122      	bne.n	800bc28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f003 0310 	and.w	r3, r3, #16
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d11b      	bne.n	800bc28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0210 	mvn.w	r2, #16
 800bbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2208      	movs	r2, #8
 800bbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fb1c 	bl	800c24c <HAL_TIM_IC_CaptureCallback>
 800bc14:	e005      	b.n	800bc22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fb0e 	bl	800c238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fb1f 	bl	800c260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d10e      	bne.n	800bc54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d107      	bne.n	800bc54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f06f 0201 	mvn.w	r2, #1
 800bc4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fae8 	bl	800c224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc5e:	2b80      	cmp	r3, #128	; 0x80
 800bc60:	d10e      	bne.n	800bc80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6c:	2b80      	cmp	r3, #128	; 0x80
 800bc6e:	d107      	bne.n	800bc80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f001 f838 	bl	800ccf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8e:	d10e      	bne.n	800bcae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9a:	2b80      	cmp	r3, #128	; 0x80
 800bc9c:	d107      	bne.n	800bcae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 f82b 	bl	800cd04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb8:	2b40      	cmp	r3, #64	; 0x40
 800bcba:	d10e      	bne.n	800bcda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc6:	2b40      	cmp	r3, #64	; 0x40
 800bcc8:	d107      	bne.n	800bcda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 facd 	bl	800c274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	f003 0320 	and.w	r3, r3, #32
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d10e      	bne.n	800bd06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	d107      	bne.n	800bd06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f06f 0220 	mvn.w	r2, #32
 800bcfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 ffeb 	bl	800ccdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd14:	d10f      	bne.n	800bd36 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd24:	d107      	bne.n	800bd36 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fff1 	bl	800cd18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd44:	d10f      	bne.n	800bd66 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd54:	d107      	bne.n	800bd66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 ffe3 	bl	800cd2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd74:	d10f      	bne.n	800bd96 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd84:	d107      	bne.n	800bd96 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 ffd5 	bl	800cd40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bda0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bda4:	d10f      	bne.n	800bdc6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdb4:	d107      	bne.n	800bdc6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bdbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 ffc7 	bl	800cd54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d101      	bne.n	800bdee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bdea:	2302      	movs	r3, #2
 800bdec:	e0ff      	b.n	800bfee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b14      	cmp	r3, #20
 800bdfa:	f200 80f0 	bhi.w	800bfde <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bdfe:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800be00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be04:	0800be59 	.word	0x0800be59
 800be08:	0800bfdf 	.word	0x0800bfdf
 800be0c:	0800bfdf 	.word	0x0800bfdf
 800be10:	0800bfdf 	.word	0x0800bfdf
 800be14:	0800be99 	.word	0x0800be99
 800be18:	0800bfdf 	.word	0x0800bfdf
 800be1c:	0800bfdf 	.word	0x0800bfdf
 800be20:	0800bfdf 	.word	0x0800bfdf
 800be24:	0800bedb 	.word	0x0800bedb
 800be28:	0800bfdf 	.word	0x0800bfdf
 800be2c:	0800bfdf 	.word	0x0800bfdf
 800be30:	0800bfdf 	.word	0x0800bfdf
 800be34:	0800bf1b 	.word	0x0800bf1b
 800be38:	0800bfdf 	.word	0x0800bfdf
 800be3c:	0800bfdf 	.word	0x0800bfdf
 800be40:	0800bfdf 	.word	0x0800bfdf
 800be44:	0800bf5d 	.word	0x0800bf5d
 800be48:	0800bfdf 	.word	0x0800bfdf
 800be4c:	0800bfdf 	.word	0x0800bfdf
 800be50:	0800bfdf 	.word	0x0800bfdf
 800be54:	0800bf9d 	.word	0x0800bf9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 faba 	bl	800c3d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699a      	ldr	r2, [r3, #24]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f042 0208 	orr.w	r2, r2, #8
 800be72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	699a      	ldr	r2, [r3, #24]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 0204 	bic.w	r2, r2, #4
 800be82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6999      	ldr	r1, [r3, #24]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	691a      	ldr	r2, [r3, #16]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	619a      	str	r2, [r3, #24]
      break;
 800be96:	e0a5      	b.n	800bfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 fb34 	bl	800c50c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	699a      	ldr	r2, [r3, #24]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800beb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	699a      	ldr	r2, [r3, #24]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6999      	ldr	r1, [r3, #24]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	021a      	lsls	r2, r3, #8
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	619a      	str	r2, [r3, #24]
      break;
 800bed8:	e084      	b.n	800bfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fba7 	bl	800c634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	69da      	ldr	r2, [r3, #28]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f042 0208 	orr.w	r2, r2, #8
 800bef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	69da      	ldr	r2, [r3, #28]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 0204 	bic.w	r2, r2, #4
 800bf04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69d9      	ldr	r1, [r3, #28]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	691a      	ldr	r2, [r3, #16]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	61da      	str	r2, [r3, #28]
      break;
 800bf18:	e064      	b.n	800bfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68b9      	ldr	r1, [r7, #8]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 fc19 	bl	800c758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	69da      	ldr	r2, [r3, #28]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	69da      	ldr	r2, [r3, #28]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	69d9      	ldr	r1, [r3, #28]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	021a      	lsls	r2, r3, #8
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	61da      	str	r2, [r3, #28]
      break;
 800bf5a:	e043      	b.n	800bfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68b9      	ldr	r1, [r7, #8]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fc8c 	bl	800c880 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f042 0208 	orr.w	r2, r2, #8
 800bf76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f022 0204 	bic.w	r2, r2, #4
 800bf86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800bf9a:	e023      	b.n	800bfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fcd6 	bl	800c954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	021a      	lsls	r2, r3, #8
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800bfdc:	e002      	b.n	800bfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	75fb      	strb	r3, [r7, #23]
      break;
 800bfe2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop

0800bff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d101      	bne.n	800c014 <HAL_TIM_ConfigClockSource+0x1c>
 800c010:	2302      	movs	r3, #2
 800c012:	e0f6      	b.n	800c202 <HAL_TIM_ConfigClockSource+0x20a>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c03e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a6f      	ldr	r2, [pc, #444]	; (800c20c <HAL_TIM_ConfigClockSource+0x214>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	f000 80c1 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c054:	4a6d      	ldr	r2, [pc, #436]	; (800c20c <HAL_TIM_ConfigClockSource+0x214>)
 800c056:	4293      	cmp	r3, r2
 800c058:	f200 80c6 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c05c:	4a6c      	ldr	r2, [pc, #432]	; (800c210 <HAL_TIM_ConfigClockSource+0x218>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	f000 80b9 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c064:	4a6a      	ldr	r2, [pc, #424]	; (800c210 <HAL_TIM_ConfigClockSource+0x218>)
 800c066:	4293      	cmp	r3, r2
 800c068:	f200 80be 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c06c:	4a69      	ldr	r2, [pc, #420]	; (800c214 <HAL_TIM_ConfigClockSource+0x21c>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	f000 80b1 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c074:	4a67      	ldr	r2, [pc, #412]	; (800c214 <HAL_TIM_ConfigClockSource+0x21c>)
 800c076:	4293      	cmp	r3, r2
 800c078:	f200 80b6 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c07c:	4a66      	ldr	r2, [pc, #408]	; (800c218 <HAL_TIM_ConfigClockSource+0x220>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	f000 80a9 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c084:	4a64      	ldr	r2, [pc, #400]	; (800c218 <HAL_TIM_ConfigClockSource+0x220>)
 800c086:	4293      	cmp	r3, r2
 800c088:	f200 80ae 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c08c:	4a63      	ldr	r2, [pc, #396]	; (800c21c <HAL_TIM_ConfigClockSource+0x224>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	f000 80a1 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c094:	4a61      	ldr	r2, [pc, #388]	; (800c21c <HAL_TIM_ConfigClockSource+0x224>)
 800c096:	4293      	cmp	r3, r2
 800c098:	f200 80a6 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c09c:	4a60      	ldr	r2, [pc, #384]	; (800c220 <HAL_TIM_ConfigClockSource+0x228>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	f000 8099 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c0a4:	4a5e      	ldr	r2, [pc, #376]	; (800c220 <HAL_TIM_ConfigClockSource+0x228>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	f200 809e 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c0b0:	f000 8091 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c0b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c0b8:	f200 8096 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0c0:	f000 8089 	beq.w	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c0c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0c8:	f200 808e 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0d0:	d03e      	beq.n	800c150 <HAL_TIM_ConfigClockSource+0x158>
 800c0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0d6:	f200 8087 	bhi.w	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0de:	f000 8086 	beq.w	800c1ee <HAL_TIM_ConfigClockSource+0x1f6>
 800c0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e6:	d87f      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0e8:	2b70      	cmp	r3, #112	; 0x70
 800c0ea:	d01a      	beq.n	800c122 <HAL_TIM_ConfigClockSource+0x12a>
 800c0ec:	2b70      	cmp	r3, #112	; 0x70
 800c0ee:	d87b      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0f0:	2b60      	cmp	r3, #96	; 0x60
 800c0f2:	d050      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x19e>
 800c0f4:	2b60      	cmp	r3, #96	; 0x60
 800c0f6:	d877      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c0f8:	2b50      	cmp	r3, #80	; 0x50
 800c0fa:	d03c      	beq.n	800c176 <HAL_TIM_ConfigClockSource+0x17e>
 800c0fc:	2b50      	cmp	r3, #80	; 0x50
 800c0fe:	d873      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c100:	2b40      	cmp	r3, #64	; 0x40
 800c102:	d058      	beq.n	800c1b6 <HAL_TIM_ConfigClockSource+0x1be>
 800c104:	2b40      	cmp	r3, #64	; 0x40
 800c106:	d86f      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c108:	2b30      	cmp	r3, #48	; 0x30
 800c10a:	d064      	beq.n	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c10c:	2b30      	cmp	r3, #48	; 0x30
 800c10e:	d86b      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c110:	2b20      	cmp	r3, #32
 800c112:	d060      	beq.n	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c114:	2b20      	cmp	r3, #32
 800c116:	d867      	bhi.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d05c      	beq.n	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c11c:	2b10      	cmp	r3, #16
 800c11e:	d05a      	beq.n	800c1d6 <HAL_TIM_ConfigClockSource+0x1de>
 800c120:	e062      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6818      	ldr	r0, [r3, #0]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	6899      	ldr	r1, [r3, #8]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	f000 fcf7 	bl	800cb24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	609a      	str	r2, [r3, #8]
      break;
 800c14e:	e04f      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	6899      	ldr	r1, [r3, #8]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f000 fce0 	bl	800cb24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689a      	ldr	r2, [r3, #8]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c172:	609a      	str	r2, [r3, #8]
      break;
 800c174:	e03c      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	6859      	ldr	r1, [r3, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	461a      	mov	r2, r3
 800c184:	f000 fc52 	bl	800ca2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2150      	movs	r1, #80	; 0x50
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 fcab 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c194:	e02c      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	6859      	ldr	r1, [r3, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f000 fc71 	bl	800ca8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2160      	movs	r1, #96	; 0x60
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fc9b 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c1b4:	e01c      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	6859      	ldr	r1, [r3, #4]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f000 fc32 	bl	800ca2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2140      	movs	r1, #64	; 0x40
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 fc8b 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c1d4:	e00c      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	f000 fc82 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c1e6:	e003      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ec:	e000      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c1ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	00100070 	.word	0x00100070
 800c210:	00100060 	.word	0x00100060
 800c214:	00100050 	.word	0x00100050
 800c218:	00100040 	.word	0x00100040
 800c21c:	00100030 	.word	0x00100030
 800c220:	00100020 	.word	0x00100020

0800c224 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c254:	bf00      	nop
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a46      	ldr	r2, [pc, #280]	; (800c3b4 <TIM_Base_SetConfig+0x12c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d017      	beq.n	800c2d0 <TIM_Base_SetConfig+0x48>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a6:	d013      	beq.n	800c2d0 <TIM_Base_SetConfig+0x48>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a43      	ldr	r2, [pc, #268]	; (800c3b8 <TIM_Base_SetConfig+0x130>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d00f      	beq.n	800c2d0 <TIM_Base_SetConfig+0x48>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a42      	ldr	r2, [pc, #264]	; (800c3bc <TIM_Base_SetConfig+0x134>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d00b      	beq.n	800c2d0 <TIM_Base_SetConfig+0x48>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a41      	ldr	r2, [pc, #260]	; (800c3c0 <TIM_Base_SetConfig+0x138>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d007      	beq.n	800c2d0 <TIM_Base_SetConfig+0x48>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a40      	ldr	r2, [pc, #256]	; (800c3c4 <TIM_Base_SetConfig+0x13c>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d003      	beq.n	800c2d0 <TIM_Base_SetConfig+0x48>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a3f      	ldr	r2, [pc, #252]	; (800c3c8 <TIM_Base_SetConfig+0x140>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d108      	bne.n	800c2e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a33      	ldr	r2, [pc, #204]	; (800c3b4 <TIM_Base_SetConfig+0x12c>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d023      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f0:	d01f      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a30      	ldr	r2, [pc, #192]	; (800c3b8 <TIM_Base_SetConfig+0x130>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d01b      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a2f      	ldr	r2, [pc, #188]	; (800c3bc <TIM_Base_SetConfig+0x134>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d017      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a2e      	ldr	r2, [pc, #184]	; (800c3c0 <TIM_Base_SetConfig+0x138>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d013      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a2d      	ldr	r2, [pc, #180]	; (800c3c4 <TIM_Base_SetConfig+0x13c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d00f      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a2d      	ldr	r2, [pc, #180]	; (800c3cc <TIM_Base_SetConfig+0x144>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d00b      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a2c      	ldr	r2, [pc, #176]	; (800c3d0 <TIM_Base_SetConfig+0x148>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d007      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a2b      	ldr	r2, [pc, #172]	; (800c3d4 <TIM_Base_SetConfig+0x14c>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d003      	beq.n	800c332 <TIM_Base_SetConfig+0xaa>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a26      	ldr	r2, [pc, #152]	; (800c3c8 <TIM_Base_SetConfig+0x140>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d108      	bne.n	800c344 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	4313      	orrs	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	4313      	orrs	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a12      	ldr	r2, [pc, #72]	; (800c3b4 <TIM_Base_SetConfig+0x12c>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d013      	beq.n	800c398 <TIM_Base_SetConfig+0x110>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a14      	ldr	r2, [pc, #80]	; (800c3c4 <TIM_Base_SetConfig+0x13c>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d00f      	beq.n	800c398 <TIM_Base_SetConfig+0x110>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a14      	ldr	r2, [pc, #80]	; (800c3cc <TIM_Base_SetConfig+0x144>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00b      	beq.n	800c398 <TIM_Base_SetConfig+0x110>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a13      	ldr	r2, [pc, #76]	; (800c3d0 <TIM_Base_SetConfig+0x148>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d007      	beq.n	800c398 <TIM_Base_SetConfig+0x110>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a12      	ldr	r2, [pc, #72]	; (800c3d4 <TIM_Base_SetConfig+0x14c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d003      	beq.n	800c398 <TIM_Base_SetConfig+0x110>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a0d      	ldr	r2, [pc, #52]	; (800c3c8 <TIM_Base_SetConfig+0x140>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d103      	bne.n	800c3a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	691a      	ldr	r2, [r3, #16]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	615a      	str	r2, [r3, #20]
}
 800c3a6:	bf00      	nop
 800c3a8:	3714      	adds	r7, #20
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	40012c00 	.word	0x40012c00
 800c3b8:	40000400 	.word	0x40000400
 800c3bc:	40000800 	.word	0x40000800
 800c3c0:	40000c00 	.word	0x40000c00
 800c3c4:	40013400 	.word	0x40013400
 800c3c8:	40015000 	.word	0x40015000
 800c3cc:	40014000 	.word	0x40014000
 800c3d0:	40014400 	.word	0x40014400
 800c3d4:	40014800 	.word	0x40014800

0800c3d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	f023 0201 	bic.w	r2, r3, #1
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f023 0303 	bic.w	r3, r3, #3
 800c412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f023 0302 	bic.w	r3, r3, #2
 800c424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a30      	ldr	r2, [pc, #192]	; (800c4f4 <TIM_OC1_SetConfig+0x11c>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d013      	beq.n	800c460 <TIM_OC1_SetConfig+0x88>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a2f      	ldr	r2, [pc, #188]	; (800c4f8 <TIM_OC1_SetConfig+0x120>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00f      	beq.n	800c460 <TIM_OC1_SetConfig+0x88>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a2e      	ldr	r2, [pc, #184]	; (800c4fc <TIM_OC1_SetConfig+0x124>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00b      	beq.n	800c460 <TIM_OC1_SetConfig+0x88>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a2d      	ldr	r2, [pc, #180]	; (800c500 <TIM_OC1_SetConfig+0x128>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d007      	beq.n	800c460 <TIM_OC1_SetConfig+0x88>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a2c      	ldr	r2, [pc, #176]	; (800c504 <TIM_OC1_SetConfig+0x12c>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d003      	beq.n	800c460 <TIM_OC1_SetConfig+0x88>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a2b      	ldr	r2, [pc, #172]	; (800c508 <TIM_OC1_SetConfig+0x130>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d10c      	bne.n	800c47a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	f023 0308 	bic.w	r3, r3, #8
 800c466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	4313      	orrs	r3, r2
 800c470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f023 0304 	bic.w	r3, r3, #4
 800c478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a1d      	ldr	r2, [pc, #116]	; (800c4f4 <TIM_OC1_SetConfig+0x11c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d013      	beq.n	800c4aa <TIM_OC1_SetConfig+0xd2>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a1c      	ldr	r2, [pc, #112]	; (800c4f8 <TIM_OC1_SetConfig+0x120>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d00f      	beq.n	800c4aa <TIM_OC1_SetConfig+0xd2>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a1b      	ldr	r2, [pc, #108]	; (800c4fc <TIM_OC1_SetConfig+0x124>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d00b      	beq.n	800c4aa <TIM_OC1_SetConfig+0xd2>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a1a      	ldr	r2, [pc, #104]	; (800c500 <TIM_OC1_SetConfig+0x128>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d007      	beq.n	800c4aa <TIM_OC1_SetConfig+0xd2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a19      	ldr	r2, [pc, #100]	; (800c504 <TIM_OC1_SetConfig+0x12c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d003      	beq.n	800c4aa <TIM_OC1_SetConfig+0xd2>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a18      	ldr	r2, [pc, #96]	; (800c508 <TIM_OC1_SetConfig+0x130>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d111      	bne.n	800c4ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	685a      	ldr	r2, [r3, #4]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	621a      	str	r2, [r3, #32]
}
 800c4e8:	bf00      	nop
 800c4ea:	371c      	adds	r7, #28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	40012c00 	.word	0x40012c00
 800c4f8:	40013400 	.word	0x40013400
 800c4fc:	40014000 	.word	0x40014000
 800c500:	40014400 	.word	0x40014400
 800c504:	40014800 	.word	0x40014800
 800c508:	40015000 	.word	0x40015000

0800c50c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	f023 0210 	bic.w	r2, r3, #16
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	021b      	lsls	r3, r3, #8
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	4313      	orrs	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f023 0320 	bic.w	r3, r3, #32
 800c55a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	4313      	orrs	r3, r2
 800c566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a2c      	ldr	r2, [pc, #176]	; (800c61c <TIM_OC2_SetConfig+0x110>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d007      	beq.n	800c580 <TIM_OC2_SetConfig+0x74>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a2b      	ldr	r2, [pc, #172]	; (800c620 <TIM_OC2_SetConfig+0x114>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d003      	beq.n	800c580 <TIM_OC2_SetConfig+0x74>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a2a      	ldr	r2, [pc, #168]	; (800c624 <TIM_OC2_SetConfig+0x118>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10d      	bne.n	800c59c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c59a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a1f      	ldr	r2, [pc, #124]	; (800c61c <TIM_OC2_SetConfig+0x110>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d013      	beq.n	800c5cc <TIM_OC2_SetConfig+0xc0>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a1e      	ldr	r2, [pc, #120]	; (800c620 <TIM_OC2_SetConfig+0x114>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d00f      	beq.n	800c5cc <TIM_OC2_SetConfig+0xc0>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a1e      	ldr	r2, [pc, #120]	; (800c628 <TIM_OC2_SetConfig+0x11c>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d00b      	beq.n	800c5cc <TIM_OC2_SetConfig+0xc0>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a1d      	ldr	r2, [pc, #116]	; (800c62c <TIM_OC2_SetConfig+0x120>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d007      	beq.n	800c5cc <TIM_OC2_SetConfig+0xc0>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a1c      	ldr	r2, [pc, #112]	; (800c630 <TIM_OC2_SetConfig+0x124>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d003      	beq.n	800c5cc <TIM_OC2_SetConfig+0xc0>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a17      	ldr	r2, [pc, #92]	; (800c624 <TIM_OC2_SetConfig+0x118>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d113      	bne.n	800c5f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	695b      	ldr	r3, [r3, #20]
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	693a      	ldr	r2, [r7, #16]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	621a      	str	r2, [r3, #32]
}
 800c60e:	bf00      	nop
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	40012c00 	.word	0x40012c00
 800c620:	40013400 	.word	0x40013400
 800c624:	40015000 	.word	0x40015000
 800c628:	40014000 	.word	0x40014000
 800c62c:	40014400 	.word	0x40014400
 800c630:	40014800 	.word	0x40014800

0800c634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f023 0303 	bic.w	r3, r3, #3
 800c66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	4313      	orrs	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	021b      	lsls	r3, r3, #8
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a2b      	ldr	r2, [pc, #172]	; (800c740 <TIM_OC3_SetConfig+0x10c>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d007      	beq.n	800c6a6 <TIM_OC3_SetConfig+0x72>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a2a      	ldr	r2, [pc, #168]	; (800c744 <TIM_OC3_SetConfig+0x110>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d003      	beq.n	800c6a6 <TIM_OC3_SetConfig+0x72>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a29      	ldr	r2, [pc, #164]	; (800c748 <TIM_OC3_SetConfig+0x114>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d10d      	bne.n	800c6c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	021b      	lsls	r3, r3, #8
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a1e      	ldr	r2, [pc, #120]	; (800c740 <TIM_OC3_SetConfig+0x10c>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d013      	beq.n	800c6f2 <TIM_OC3_SetConfig+0xbe>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a1d      	ldr	r2, [pc, #116]	; (800c744 <TIM_OC3_SetConfig+0x110>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d00f      	beq.n	800c6f2 <TIM_OC3_SetConfig+0xbe>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a1d      	ldr	r2, [pc, #116]	; (800c74c <TIM_OC3_SetConfig+0x118>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d00b      	beq.n	800c6f2 <TIM_OC3_SetConfig+0xbe>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a1c      	ldr	r2, [pc, #112]	; (800c750 <TIM_OC3_SetConfig+0x11c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d007      	beq.n	800c6f2 <TIM_OC3_SetConfig+0xbe>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a1b      	ldr	r2, [pc, #108]	; (800c754 <TIM_OC3_SetConfig+0x120>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d003      	beq.n	800c6f2 <TIM_OC3_SetConfig+0xbe>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a16      	ldr	r2, [pc, #88]	; (800c748 <TIM_OC3_SetConfig+0x114>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d113      	bne.n	800c71a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	011b      	lsls	r3, r3, #4
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	011b      	lsls	r3, r3, #4
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	4313      	orrs	r3, r2
 800c718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	621a      	str	r2, [r3, #32]
}
 800c734:	bf00      	nop
 800c736:	371c      	adds	r7, #28
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	40012c00 	.word	0x40012c00
 800c744:	40013400 	.word	0x40013400
 800c748:	40015000 	.word	0x40015000
 800c74c:	40014000 	.word	0x40014000
 800c750:	40014400 	.word	0x40014400
 800c754:	40014800 	.word	0x40014800

0800c758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	031b      	lsls	r3, r3, #12
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a2c      	ldr	r2, [pc, #176]	; (800c868 <TIM_OC4_SetConfig+0x110>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d007      	beq.n	800c7cc <TIM_OC4_SetConfig+0x74>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a2b      	ldr	r2, [pc, #172]	; (800c86c <TIM_OC4_SetConfig+0x114>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d003      	beq.n	800c7cc <TIM_OC4_SetConfig+0x74>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a2a      	ldr	r2, [pc, #168]	; (800c870 <TIM_OC4_SetConfig+0x118>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d10d      	bne.n	800c7e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	031b      	lsls	r3, r3, #12
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a1f      	ldr	r2, [pc, #124]	; (800c868 <TIM_OC4_SetConfig+0x110>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d013      	beq.n	800c818 <TIM_OC4_SetConfig+0xc0>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a1e      	ldr	r2, [pc, #120]	; (800c86c <TIM_OC4_SetConfig+0x114>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d00f      	beq.n	800c818 <TIM_OC4_SetConfig+0xc0>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a1e      	ldr	r2, [pc, #120]	; (800c874 <TIM_OC4_SetConfig+0x11c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d00b      	beq.n	800c818 <TIM_OC4_SetConfig+0xc0>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a1d      	ldr	r2, [pc, #116]	; (800c878 <TIM_OC4_SetConfig+0x120>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d007      	beq.n	800c818 <TIM_OC4_SetConfig+0xc0>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a1c      	ldr	r2, [pc, #112]	; (800c87c <TIM_OC4_SetConfig+0x124>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d003      	beq.n	800c818 <TIM_OC4_SetConfig+0xc0>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a17      	ldr	r2, [pc, #92]	; (800c870 <TIM_OC4_SetConfig+0x118>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d113      	bne.n	800c840 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c81e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c826:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	019b      	lsls	r3, r3, #6
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	4313      	orrs	r3, r2
 800c832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	019b      	lsls	r3, r3, #6
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	621a      	str	r2, [r3, #32]
}
 800c85a:	bf00      	nop
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	40012c00 	.word	0x40012c00
 800c86c:	40013400 	.word	0x40013400
 800c870:	40015000 	.word	0x40015000
 800c874:	40014000 	.word	0x40014000
 800c878:	40014400 	.word	0x40014400
 800c87c:	40014800 	.word	0x40014800

0800c880 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c8c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	041b      	lsls	r3, r3, #16
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a19      	ldr	r2, [pc, #100]	; (800c93c <TIM_OC5_SetConfig+0xbc>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d013      	beq.n	800c902 <TIM_OC5_SetConfig+0x82>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a18      	ldr	r2, [pc, #96]	; (800c940 <TIM_OC5_SetConfig+0xc0>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d00f      	beq.n	800c902 <TIM_OC5_SetConfig+0x82>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a17      	ldr	r2, [pc, #92]	; (800c944 <TIM_OC5_SetConfig+0xc4>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d00b      	beq.n	800c902 <TIM_OC5_SetConfig+0x82>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a16      	ldr	r2, [pc, #88]	; (800c948 <TIM_OC5_SetConfig+0xc8>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d007      	beq.n	800c902 <TIM_OC5_SetConfig+0x82>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a15      	ldr	r2, [pc, #84]	; (800c94c <TIM_OC5_SetConfig+0xcc>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d003      	beq.n	800c902 <TIM_OC5_SetConfig+0x82>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a14      	ldr	r2, [pc, #80]	; (800c950 <TIM_OC5_SetConfig+0xd0>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d109      	bne.n	800c916 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	4313      	orrs	r3, r2
 800c914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	621a      	str	r2, [r3, #32]
}
 800c930:	bf00      	nop
 800c932:	371c      	adds	r7, #28
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	40012c00 	.word	0x40012c00
 800c940:	40013400 	.word	0x40013400
 800c944:	40014000 	.word	0x40014000
 800c948:	40014400 	.word	0x40014400
 800c94c:	40014800 	.word	0x40014800
 800c950:	40015000 	.word	0x40015000

0800c954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4313      	orrs	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c99a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	051b      	lsls	r3, r3, #20
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a1a      	ldr	r2, [pc, #104]	; (800ca14 <TIM_OC6_SetConfig+0xc0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d013      	beq.n	800c9d8 <TIM_OC6_SetConfig+0x84>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a19      	ldr	r2, [pc, #100]	; (800ca18 <TIM_OC6_SetConfig+0xc4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d00f      	beq.n	800c9d8 <TIM_OC6_SetConfig+0x84>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a18      	ldr	r2, [pc, #96]	; (800ca1c <TIM_OC6_SetConfig+0xc8>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d00b      	beq.n	800c9d8 <TIM_OC6_SetConfig+0x84>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a17      	ldr	r2, [pc, #92]	; (800ca20 <TIM_OC6_SetConfig+0xcc>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d007      	beq.n	800c9d8 <TIM_OC6_SetConfig+0x84>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a16      	ldr	r2, [pc, #88]	; (800ca24 <TIM_OC6_SetConfig+0xd0>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d003      	beq.n	800c9d8 <TIM_OC6_SetConfig+0x84>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a15      	ldr	r2, [pc, #84]	; (800ca28 <TIM_OC6_SetConfig+0xd4>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d109      	bne.n	800c9ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	029b      	lsls	r3, r3, #10
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	621a      	str	r2, [r3, #32]
}
 800ca06:	bf00      	nop
 800ca08:	371c      	adds	r7, #28
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	40012c00 	.word	0x40012c00
 800ca18:	40013400 	.word	0x40013400
 800ca1c:	40014000 	.word	0x40014000
 800ca20:	40014400 	.word	0x40014400
 800ca24:	40014800 	.word	0x40014800
 800ca28:	40015000 	.word	0x40015000

0800ca2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	f023 0201 	bic.w	r2, r3, #1
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	011b      	lsls	r3, r3, #4
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f023 030a 	bic.w	r3, r3, #10
 800ca68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	621a      	str	r2, [r3, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b087      	sub	sp, #28
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	f023 0210 	bic.w	r2, r3, #16
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	031b      	lsls	r3, r3, #12
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	4313      	orrs	r3, r2
 800cad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	621a      	str	r2, [r3, #32]
}
 800cade:	bf00      	nop
 800cae0:	371c      	adds	r7, #28
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800caea:	b480      	push	{r7}
 800caec:	b085      	sub	sp, #20
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cb00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	f043 0307 	orr.w	r3, r3, #7
 800cb10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	609a      	str	r2, [r3, #8]
}
 800cb18:	bf00      	nop
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	021a      	lsls	r2, r3, #8
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	431a      	orrs	r2, r3
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	609a      	str	r2, [r3, #8]
}
 800cb58:	bf00      	nop
 800cb5a:	371c      	adds	r7, #28
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	f003 031f 	and.w	r3, r3, #31
 800cb76:	2201      	movs	r2, #1
 800cb78:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6a1a      	ldr	r2, [r3, #32]
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	43db      	mvns	r3, r3
 800cb86:	401a      	ands	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6a1a      	ldr	r2, [r3, #32]
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f003 031f 	and.w	r3, r3, #31
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	fa01 f303 	lsl.w	r3, r1, r3
 800cb9c:	431a      	orrs	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	621a      	str	r2, [r3, #32]
}
 800cba2:	bf00      	nop
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
	...

0800cbb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d101      	bne.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	e074      	b.n	800ccb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a34      	ldr	r2, [pc, #208]	; (800ccc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d009      	beq.n	800cc06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a33      	ldr	r2, [pc, #204]	; (800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d004      	beq.n	800cc06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a31      	ldr	r2, [pc, #196]	; (800ccc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d108      	bne.n	800cc18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cc1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a21      	ldr	r2, [pc, #132]	; (800ccc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d022      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc48:	d01d      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d018      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a1d      	ldr	r2, [pc, #116]	; (800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d013      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a1c      	ldr	r2, [pc, #112]	; (800ccd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d00e      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a15      	ldr	r2, [pc, #84]	; (800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d009      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a18      	ldr	r2, [pc, #96]	; (800ccd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d004      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a11      	ldr	r2, [pc, #68]	; (800ccc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d10c      	bne.n	800cca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	40012c00 	.word	0x40012c00
 800ccc4:	40013400 	.word	0x40013400
 800ccc8:	40015000 	.word	0x40015000
 800cccc:	40000400 	.word	0x40000400
 800ccd0:	40000800 	.word	0x40000800
 800ccd4:	40000c00 	.word	0x40000c00
 800ccd8:	40014000 	.word	0x40014000

0800ccdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cce4:	bf00      	nop
 800cce6:	370c      	adds	r7, #12
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ccf8:	bf00      	nop
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd0c:	bf00      	nop
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e042      	b.n	800ce00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7f9 fce5 	bl	800675c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2224      	movs	r2, #36	; 0x24
 800cd96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0201 	bic.w	r2, r2, #1
 800cda8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fc50 	bl	800d650 <UART_SetConfig>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e022      	b.n	800ce00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 ff40 	bl	800dc48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cdd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cde6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f042 0201 	orr.w	r2, r2, #1
 800cdf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 ffc7 	bl	800dd8c <UART_CheckIdleState>
 800cdfe:	4603      	mov	r3, r0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	603b      	str	r3, [r7, #0]
 800ce14:	4613      	mov	r3, r2
 800ce16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce1e:	2b20      	cmp	r3, #32
 800ce20:	f040 8083 	bne.w	800cf2a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d002      	beq.n	800ce30 <HAL_UART_Transmit+0x28>
 800ce2a:	88fb      	ldrh	r3, [r7, #6]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d101      	bne.n	800ce34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e07b      	b.n	800cf2c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d101      	bne.n	800ce42 <HAL_UART_Transmit+0x3a>
 800ce3e:	2302      	movs	r3, #2
 800ce40:	e074      	b.n	800cf2c <HAL_UART_Transmit+0x124>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2221      	movs	r2, #33	; 0x21
 800ce56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce5a:	f7f9 fd93 	bl	8006984 <HAL_GetTick>
 800ce5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	88fa      	ldrh	r2, [r7, #6]
 800ce64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	88fa      	ldrh	r2, [r7, #6]
 800ce6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce78:	d108      	bne.n	800ce8c <HAL_UART_Transmit+0x84>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d104      	bne.n	800ce8c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	61bb      	str	r3, [r7, #24]
 800ce8a:	e003      	b.n	800ce94 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce90:	2300      	movs	r3, #0
 800ce92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ce9c:	e02c      	b.n	800cef8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	2180      	movs	r1, #128	; 0x80
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 ffba 	bl	800de22 <UART_WaitOnFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e039      	b.n	800cf2c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10b      	bne.n	800ced6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	881b      	ldrh	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cecc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	3302      	adds	r3, #2
 800ced2:	61bb      	str	r3, [r7, #24]
 800ced4:	e007      	b.n	800cee6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	781a      	ldrb	r2, [r3, #0]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	3301      	adds	r3, #1
 800cee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	3b01      	subs	r3, #1
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1cc      	bne.n	800ce9e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2140      	movs	r1, #64	; 0x40
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f000 ff87 	bl	800de22 <UART_WaitOnFlagUntilTimeout>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e006      	b.n	800cf2c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	e000      	b.n	800cf2c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cf2a:	2302      	movs	r3, #2
  }
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08a      	sub	sp, #40	; 0x28
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf48:	2b20      	cmp	r3, #32
 800cf4a:	d142      	bne.n	800cfd2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <HAL_UART_Receive_IT+0x24>
 800cf52:	88fb      	ldrh	r3, [r7, #6]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e03b      	b.n	800cfd4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d101      	bne.n	800cf6a <HAL_UART_Receive_IT+0x36>
 800cf66:	2302      	movs	r3, #2
 800cf68:	e034      	b.n	800cfd4 <HAL_UART_Receive_IT+0xa0>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a17      	ldr	r2, [pc, #92]	; (800cfdc <HAL_UART_Receive_IT+0xa8>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d01f      	beq.n	800cfc2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d018      	beq.n	800cfc2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	e853 3f00 	ldrex	r3, [r3]
 800cf9c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	623b      	str	r3, [r7, #32]
 800cfb0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb2:	69f9      	ldr	r1, [r7, #28]
 800cfb4:	6a3a      	ldr	r2, [r7, #32]
 800cfb6:	e841 2300 	strex	r3, r2, [r1]
 800cfba:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1e6      	bne.n	800cf90 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cfc2:	88fb      	ldrh	r3, [r7, #6]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	68b9      	ldr	r1, [r7, #8]
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 fff3 	bl	800dfb4 <UART_Start_Receive_IT>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	e000      	b.n	800cfd4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cfd2:	2302      	movs	r3, #2
  }
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3728      	adds	r7, #40	; 0x28
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	40008000 	.word	0x40008000

0800cfe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b0ba      	sub	sp, #232	; 0xe8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d00a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d00e:	4013      	ands	r3, r2
 800d010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d11b      	bne.n	800d054 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d020:	f003 0320 	and.w	r3, r3, #32
 800d024:	2b00      	cmp	r3, #0
 800d026:	d015      	beq.n	800d054 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d02c:	f003 0320 	and.w	r3, r3, #32
 800d030:	2b00      	cmp	r3, #0
 800d032:	d105      	bne.n	800d040 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d009      	beq.n	800d054 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 82d6 	beq.w	800d5f6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	4798      	blx	r3
      }
      return;
 800d052:	e2d0      	b.n	800d5f6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 811f 	beq.w	800d29c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d05e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d062:	4b8b      	ldr	r3, [pc, #556]	; (800d290 <HAL_UART_IRQHandler+0x2b0>)
 800d064:	4013      	ands	r3, r2
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d06a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d06e:	4b89      	ldr	r3, [pc, #548]	; (800d294 <HAL_UART_IRQHandler+0x2b4>)
 800d070:	4013      	ands	r3, r2
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 8112 	beq.w	800d29c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d07c:	f003 0301 	and.w	r3, r3, #1
 800d080:	2b00      	cmp	r3, #0
 800d082:	d011      	beq.n	800d0a8 <HAL_UART_IRQHandler+0xc8>
 800d084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00b      	beq.n	800d0a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2201      	movs	r2, #1
 800d096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d09e:	f043 0201 	orr.w	r2, r3, #1
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0ac:	f003 0302 	and.w	r3, r3, #2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d011      	beq.n	800d0d8 <HAL_UART_IRQHandler+0xf8>
 800d0b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ce:	f043 0204 	orr.w	r2, r3, #4
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0dc:	f003 0304 	and.w	r3, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d011      	beq.n	800d108 <HAL_UART_IRQHandler+0x128>
 800d0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0fe:	f043 0202 	orr.w	r2, r3, #2
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d10c:	f003 0308 	and.w	r3, r3, #8
 800d110:	2b00      	cmp	r3, #0
 800d112:	d017      	beq.n	800d144 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d118:	f003 0320 	and.w	r3, r3, #32
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d105      	bne.n	800d12c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d120:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d124:	4b5a      	ldr	r3, [pc, #360]	; (800d290 <HAL_UART_IRQHandler+0x2b0>)
 800d126:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2208      	movs	r2, #8
 800d132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d13a:	f043 0208 	orr.w	r2, r3, #8
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d012      	beq.n	800d176 <HAL_UART_IRQHandler+0x196>
 800d150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00c      	beq.n	800d176 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d16c:	f043 0220 	orr.w	r2, r3, #32
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f000 823c 	beq.w	800d5fa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d186:	f003 0320 	and.w	r3, r3, #32
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d013      	beq.n	800d1b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d18e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d192:	f003 0320 	and.w	r3, r3, #32
 800d196:	2b00      	cmp	r3, #0
 800d198:	d105      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d19a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d19e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d007      	beq.n	800d1b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ca:	2b40      	cmp	r3, #64	; 0x40
 800d1cc:	d005      	beq.n	800d1da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d04f      	beq.n	800d27a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f001 f814 	bl	800e208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ea:	2b40      	cmp	r3, #64	; 0x40
 800d1ec:	d141      	bne.n	800d272 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d1fc:	e853 3f00 	ldrex	r3, [r3]
 800d200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d20c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3308      	adds	r3, #8
 800d216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d21a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d21e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d22a:	e841 2300 	strex	r3, r2, [r1]
 800d22e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1d9      	bne.n	800d1ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d013      	beq.n	800d26a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d246:	4a14      	ldr	r2, [pc, #80]	; (800d298 <HAL_UART_IRQHandler+0x2b8>)
 800d248:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fb f991 	bl	8008576 <HAL_DMA_Abort_IT>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d017      	beq.n	800d28a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d264:	4610      	mov	r0, r2
 800d266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d268:	e00f      	b.n	800d28a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f9da 	bl	800d624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d270:	e00b      	b.n	800d28a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f9d6 	bl	800d624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d278:	e007      	b.n	800d28a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f9d2 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d288:	e1b7      	b.n	800d5fa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28a:	bf00      	nop
    return;
 800d28c:	e1b5      	b.n	800d5fa <HAL_UART_IRQHandler+0x61a>
 800d28e:	bf00      	nop
 800d290:	10000001 	.word	0x10000001
 800d294:	04000120 	.word	0x04000120
 800d298:	0800e2d5 	.word	0x0800e2d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	f040 814a 	bne.w	800d53a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2aa:	f003 0310 	and.w	r3, r3, #16
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 8143 	beq.w	800d53a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2b8:	f003 0310 	and.w	r3, r3, #16
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 813c 	beq.w	800d53a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2210      	movs	r2, #16
 800d2c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d4:	2b40      	cmp	r3, #64	; 0x40
 800d2d6:	f040 80b5 	bne.w	800d444 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d2e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f000 8187 	beq.w	800d5fe <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	f080 817f 	bcs.w	800d5fe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0320 	and.w	r3, r3, #32
 800d316:	2b00      	cmp	r3, #0
 800d318:	f040 8086 	bne.w	800d428 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d324:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d328:	e853 3f00 	ldrex	r3, [r3]
 800d32c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	461a      	mov	r2, r3
 800d342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d34a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d356:	e841 2300 	strex	r3, r2, [r1]
 800d35a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d35e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1da      	bne.n	800d31c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	3308      	adds	r3, #8
 800d36c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d370:	e853 3f00 	ldrex	r3, [r3]
 800d374:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d378:	f023 0301 	bic.w	r3, r3, #1
 800d37c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3308      	adds	r3, #8
 800d386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d38a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d38e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d390:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d392:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d396:	e841 2300 	strex	r3, r2, [r1]
 800d39a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d39c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1e1      	bne.n	800d366 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3ac:	e853 3f00 	ldrex	r3, [r3]
 800d3b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d3b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d3c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d3c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d3cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3ce:	e841 2300 	strex	r3, r2, [r1]
 800d3d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d3d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e3      	bne.n	800d3a2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f0:	e853 3f00 	ldrex	r3, [r3]
 800d3f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3f8:	f023 0310 	bic.w	r3, r3, #16
 800d3fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	461a      	mov	r2, r3
 800d406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d40a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d40c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d412:	e841 2300 	strex	r3, r2, [r1]
 800d416:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1e4      	bne.n	800d3e8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d422:	4618      	mov	r0, r3
 800d424:	f7fb f84e 	bl	80084c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d434:	b29b      	uxth	r3, r3
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	b29b      	uxth	r3, r3
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f8fb 	bl	800d638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d442:	e0dc      	b.n	800d5fe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d450:	b29b      	uxth	r3, r3
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d45e:	b29b      	uxth	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	f000 80ce 	beq.w	800d602 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800d466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 80c9 	beq.w	800d602 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d478:	e853 3f00 	ldrex	r3, [r3]
 800d47c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	461a      	mov	r2, r3
 800d48e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d492:	647b      	str	r3, [r7, #68]	; 0x44
 800d494:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d49a:	e841 2300 	strex	r3, r2, [r1]
 800d49e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1e4      	bne.n	800d470 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	e853 3f00 	ldrex	r3, [r3]
 800d4b4:	623b      	str	r3, [r7, #32]
   return(result);
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4bc:	f023 0301 	bic.w	r3, r3, #1
 800d4c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d4ce:	633a      	str	r2, [r7, #48]	; 0x30
 800d4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4d6:	e841 2300 	strex	r3, r2, [r1]
 800d4da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1e1      	bne.n	800d4a6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	e853 3f00 	ldrex	r3, [r3]
 800d502:	60fb      	str	r3, [r7, #12]
   return(result);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0310 	bic.w	r3, r3, #16
 800d50a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	461a      	mov	r2, r3
 800d514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d518:	61fb      	str	r3, [r7, #28]
 800d51a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51c:	69b9      	ldr	r1, [r7, #24]
 800d51e:	69fa      	ldr	r2, [r7, #28]
 800d520:	e841 2300 	strex	r3, r2, [r1]
 800d524:	617b      	str	r3, [r7, #20]
   return(result);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1e4      	bne.n	800d4f6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d52c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f880 	bl	800d638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d538:	e063      	b.n	800d602 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d53e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00e      	beq.n	800d564 <HAL_UART_IRQHandler+0x584>
 800d546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d54a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d008      	beq.n	800d564 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d55a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f001 fb57 	bl	800ec10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d562:	e051      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d014      	beq.n	800d59a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d105      	bne.n	800d588 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d008      	beq.n	800d59a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d03a      	beq.n	800d606 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	4798      	blx	r3
    }
    return;
 800d598:	e035      	b.n	800d606 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d009      	beq.n	800d5ba <HAL_UART_IRQHandler+0x5da>
 800d5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fea4 	bl	800e300 <UART_EndTransmit_IT>
    return;
 800d5b8:	e026      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d009      	beq.n	800d5da <HAL_UART_IRQHandler+0x5fa>
 800d5c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f001 fb30 	bl	800ec38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5d8:	e016      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d010      	beq.n	800d608 <HAL_UART_IRQHandler+0x628>
 800d5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	da0c      	bge.n	800d608 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f001 fb18 	bl	800ec24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5f4:	e008      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
      return;
 800d5f6:	bf00      	nop
 800d5f8:	e006      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
    return;
 800d5fa:	bf00      	nop
 800d5fc:	e004      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
      return;
 800d5fe:	bf00      	nop
 800d600:	e002      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
      return;
 800d602:	bf00      	nop
 800d604:	e000      	b.n	800d608 <HAL_UART_IRQHandler+0x628>
    return;
 800d606:	bf00      	nop
  }
}
 800d608:	37e8      	adds	r7, #232	; 0xe8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop

0800d610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d654:	b08c      	sub	sp, #48	; 0x30
 800d656:	af00      	add	r7, sp, #0
 800d658:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	689a      	ldr	r2, [r3, #8]
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	431a      	orrs	r2, r3
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	431a      	orrs	r2, r3
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	4313      	orrs	r3, r2
 800d676:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	4baa      	ldr	r3, [pc, #680]	; (800d928 <UART_SetConfig+0x2d8>)
 800d680:	4013      	ands	r3, r2
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	6812      	ldr	r2, [r2, #0]
 800d686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d688:	430b      	orrs	r3, r1
 800d68a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	430a      	orrs	r2, r1
 800d6a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a9f      	ldr	r2, [pc, #636]	; (800d92c <UART_SetConfig+0x2dc>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d004      	beq.n	800d6bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d6c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	6812      	ldr	r2, [r2, #0]
 800d6ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6d0:	430b      	orrs	r3, r1
 800d6d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6da:	f023 010f 	bic.w	r1, r3, #15
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a90      	ldr	r2, [pc, #576]	; (800d930 <UART_SetConfig+0x2e0>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d125      	bne.n	800d740 <UART_SetConfig+0xf0>
 800d6f4:	4b8f      	ldr	r3, [pc, #572]	; (800d934 <UART_SetConfig+0x2e4>)
 800d6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6fa:	f003 0303 	and.w	r3, r3, #3
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	d81a      	bhi.n	800d738 <UART_SetConfig+0xe8>
 800d702:	a201      	add	r2, pc, #4	; (adr r2, 800d708 <UART_SetConfig+0xb8>)
 800d704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d708:	0800d719 	.word	0x0800d719
 800d70c:	0800d729 	.word	0x0800d729
 800d710:	0800d721 	.word	0x0800d721
 800d714:	0800d731 	.word	0x0800d731
 800d718:	2301      	movs	r3, #1
 800d71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d71e:	e116      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d720:	2302      	movs	r3, #2
 800d722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d726:	e112      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d728:	2304      	movs	r3, #4
 800d72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d72e:	e10e      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d730:	2308      	movs	r3, #8
 800d732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d736:	e10a      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d738:	2310      	movs	r3, #16
 800d73a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d73e:	e106      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a7c      	ldr	r2, [pc, #496]	; (800d938 <UART_SetConfig+0x2e8>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d138      	bne.n	800d7bc <UART_SetConfig+0x16c>
 800d74a:	4b7a      	ldr	r3, [pc, #488]	; (800d934 <UART_SetConfig+0x2e4>)
 800d74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d750:	f003 030c 	and.w	r3, r3, #12
 800d754:	2b0c      	cmp	r3, #12
 800d756:	d82d      	bhi.n	800d7b4 <UART_SetConfig+0x164>
 800d758:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <UART_SetConfig+0x110>)
 800d75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75e:	bf00      	nop
 800d760:	0800d795 	.word	0x0800d795
 800d764:	0800d7b5 	.word	0x0800d7b5
 800d768:	0800d7b5 	.word	0x0800d7b5
 800d76c:	0800d7b5 	.word	0x0800d7b5
 800d770:	0800d7a5 	.word	0x0800d7a5
 800d774:	0800d7b5 	.word	0x0800d7b5
 800d778:	0800d7b5 	.word	0x0800d7b5
 800d77c:	0800d7b5 	.word	0x0800d7b5
 800d780:	0800d79d 	.word	0x0800d79d
 800d784:	0800d7b5 	.word	0x0800d7b5
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	0800d7b5 	.word	0x0800d7b5
 800d790:	0800d7ad 	.word	0x0800d7ad
 800d794:	2300      	movs	r3, #0
 800d796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d79a:	e0d8      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d79c:	2302      	movs	r3, #2
 800d79e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7a2:	e0d4      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d7a4:	2304      	movs	r3, #4
 800d7a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7aa:	e0d0      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d7ac:	2308      	movs	r3, #8
 800d7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7b2:	e0cc      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d7b4:	2310      	movs	r3, #16
 800d7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7ba:	e0c8      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a5e      	ldr	r2, [pc, #376]	; (800d93c <UART_SetConfig+0x2ec>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d125      	bne.n	800d812 <UART_SetConfig+0x1c2>
 800d7c6:	4b5b      	ldr	r3, [pc, #364]	; (800d934 <UART_SetConfig+0x2e4>)
 800d7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d7d0:	2b30      	cmp	r3, #48	; 0x30
 800d7d2:	d016      	beq.n	800d802 <UART_SetConfig+0x1b2>
 800d7d4:	2b30      	cmp	r3, #48	; 0x30
 800d7d6:	d818      	bhi.n	800d80a <UART_SetConfig+0x1ba>
 800d7d8:	2b20      	cmp	r3, #32
 800d7da:	d00a      	beq.n	800d7f2 <UART_SetConfig+0x1a2>
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	d814      	bhi.n	800d80a <UART_SetConfig+0x1ba>
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <UART_SetConfig+0x19a>
 800d7e4:	2b10      	cmp	r3, #16
 800d7e6:	d008      	beq.n	800d7fa <UART_SetConfig+0x1aa>
 800d7e8:	e00f      	b.n	800d80a <UART_SetConfig+0x1ba>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7f0:	e0ad      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7f8:	e0a9      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d7fa:	2304      	movs	r3, #4
 800d7fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d800:	e0a5      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d802:	2308      	movs	r3, #8
 800d804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d808:	e0a1      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d80a:	2310      	movs	r3, #16
 800d80c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d810:	e09d      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a4a      	ldr	r2, [pc, #296]	; (800d940 <UART_SetConfig+0x2f0>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d125      	bne.n	800d868 <UART_SetConfig+0x218>
 800d81c:	4b45      	ldr	r3, [pc, #276]	; (800d934 <UART_SetConfig+0x2e4>)
 800d81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d826:	2bc0      	cmp	r3, #192	; 0xc0
 800d828:	d016      	beq.n	800d858 <UART_SetConfig+0x208>
 800d82a:	2bc0      	cmp	r3, #192	; 0xc0
 800d82c:	d818      	bhi.n	800d860 <UART_SetConfig+0x210>
 800d82e:	2b80      	cmp	r3, #128	; 0x80
 800d830:	d00a      	beq.n	800d848 <UART_SetConfig+0x1f8>
 800d832:	2b80      	cmp	r3, #128	; 0x80
 800d834:	d814      	bhi.n	800d860 <UART_SetConfig+0x210>
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <UART_SetConfig+0x1f0>
 800d83a:	2b40      	cmp	r3, #64	; 0x40
 800d83c:	d008      	beq.n	800d850 <UART_SetConfig+0x200>
 800d83e:	e00f      	b.n	800d860 <UART_SetConfig+0x210>
 800d840:	2300      	movs	r3, #0
 800d842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d846:	e082      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d848:	2302      	movs	r3, #2
 800d84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d84e:	e07e      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d850:	2304      	movs	r3, #4
 800d852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d856:	e07a      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d858:	2308      	movs	r3, #8
 800d85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d85e:	e076      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d860:	2310      	movs	r3, #16
 800d862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d866:	e072      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a35      	ldr	r2, [pc, #212]	; (800d944 <UART_SetConfig+0x2f4>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d12a      	bne.n	800d8c8 <UART_SetConfig+0x278>
 800d872:	4b30      	ldr	r3, [pc, #192]	; (800d934 <UART_SetConfig+0x2e4>)
 800d874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d87c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d880:	d01a      	beq.n	800d8b8 <UART_SetConfig+0x268>
 800d882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d886:	d81b      	bhi.n	800d8c0 <UART_SetConfig+0x270>
 800d888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d88c:	d00c      	beq.n	800d8a8 <UART_SetConfig+0x258>
 800d88e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d892:	d815      	bhi.n	800d8c0 <UART_SetConfig+0x270>
 800d894:	2b00      	cmp	r3, #0
 800d896:	d003      	beq.n	800d8a0 <UART_SetConfig+0x250>
 800d898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d89c:	d008      	beq.n	800d8b0 <UART_SetConfig+0x260>
 800d89e:	e00f      	b.n	800d8c0 <UART_SetConfig+0x270>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8a6:	e052      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8ae:	e04e      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d8b0:	2304      	movs	r3, #4
 800d8b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8b6:	e04a      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d8b8:	2308      	movs	r3, #8
 800d8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8be:	e046      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d8c0:	2310      	movs	r3, #16
 800d8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8c6:	e042      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a17      	ldr	r2, [pc, #92]	; (800d92c <UART_SetConfig+0x2dc>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d13a      	bne.n	800d948 <UART_SetConfig+0x2f8>
 800d8d2:	4b18      	ldr	r3, [pc, #96]	; (800d934 <UART_SetConfig+0x2e4>)
 800d8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d8dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8e0:	d01a      	beq.n	800d918 <UART_SetConfig+0x2c8>
 800d8e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8e6:	d81b      	bhi.n	800d920 <UART_SetConfig+0x2d0>
 800d8e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8ec:	d00c      	beq.n	800d908 <UART_SetConfig+0x2b8>
 800d8ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8f2:	d815      	bhi.n	800d920 <UART_SetConfig+0x2d0>
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <UART_SetConfig+0x2b0>
 800d8f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8fc:	d008      	beq.n	800d910 <UART_SetConfig+0x2c0>
 800d8fe:	e00f      	b.n	800d920 <UART_SetConfig+0x2d0>
 800d900:	2300      	movs	r3, #0
 800d902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d906:	e022      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d908:	2302      	movs	r3, #2
 800d90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d90e:	e01e      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d910:	2304      	movs	r3, #4
 800d912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d916:	e01a      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d918:	2308      	movs	r3, #8
 800d91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d91e:	e016      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d920:	2310      	movs	r3, #16
 800d922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d926:	e012      	b.n	800d94e <UART_SetConfig+0x2fe>
 800d928:	cfff69f3 	.word	0xcfff69f3
 800d92c:	40008000 	.word	0x40008000
 800d930:	40013800 	.word	0x40013800
 800d934:	40021000 	.word	0x40021000
 800d938:	40004400 	.word	0x40004400
 800d93c:	40004800 	.word	0x40004800
 800d940:	40004c00 	.word	0x40004c00
 800d944:	40005000 	.word	0x40005000
 800d948:	2310      	movs	r3, #16
 800d94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4aae      	ldr	r2, [pc, #696]	; (800dc0c <UART_SetConfig+0x5bc>)
 800d954:	4293      	cmp	r3, r2
 800d956:	f040 8097 	bne.w	800da88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d95a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d95e:	2b08      	cmp	r3, #8
 800d960:	d823      	bhi.n	800d9aa <UART_SetConfig+0x35a>
 800d962:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <UART_SetConfig+0x318>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800d98d 	.word	0x0800d98d
 800d96c:	0800d9ab 	.word	0x0800d9ab
 800d970:	0800d995 	.word	0x0800d995
 800d974:	0800d9ab 	.word	0x0800d9ab
 800d978:	0800d99b 	.word	0x0800d99b
 800d97c:	0800d9ab 	.word	0x0800d9ab
 800d980:	0800d9ab 	.word	0x0800d9ab
 800d984:	0800d9ab 	.word	0x0800d9ab
 800d988:	0800d9a3 	.word	0x0800d9a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d98c:	f7fc ff7a 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 800d990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d992:	e010      	b.n	800d9b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d994:	4b9e      	ldr	r3, [pc, #632]	; (800dc10 <UART_SetConfig+0x5c0>)
 800d996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d998:	e00d      	b.n	800d9b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d99a:	f7fc ff05 	bl	800a7a8 <HAL_RCC_GetSysClockFreq>
 800d99e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d9a0:	e009      	b.n	800d9b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d9a8:	e005      	b.n	800d9b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d9b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f000 8130 	beq.w	800dc1e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c2:	4a94      	ldr	r2, [pc, #592]	; (800dc14 <UART_SetConfig+0x5c4>)
 800d9c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	685a      	ldr	r2, [r3, #4]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	4413      	add	r3, r2
 800d9dc:	69ba      	ldr	r2, [r7, #24]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d305      	bcc.n	800d9ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d903      	bls.n	800d9f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d9f4:	e113      	b.n	800dc1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	60bb      	str	r3, [r7, #8]
 800d9fc:	60fa      	str	r2, [r7, #12]
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	4a84      	ldr	r2, [pc, #528]	; (800dc14 <UART_SetConfig+0x5c4>)
 800da04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	2200      	movs	r2, #0
 800da0c:	603b      	str	r3, [r7, #0]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da18:	f7f3 f95e 	bl	8000cd8 <__aeabi_uldivmod>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4610      	mov	r0, r2
 800da22:	4619      	mov	r1, r3
 800da24:	f04f 0200 	mov.w	r2, #0
 800da28:	f04f 0300 	mov.w	r3, #0
 800da2c:	020b      	lsls	r3, r1, #8
 800da2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da32:	0202      	lsls	r2, r0, #8
 800da34:	6979      	ldr	r1, [r7, #20]
 800da36:	6849      	ldr	r1, [r1, #4]
 800da38:	0849      	lsrs	r1, r1, #1
 800da3a:	2000      	movs	r0, #0
 800da3c:	460c      	mov	r4, r1
 800da3e:	4605      	mov	r5, r0
 800da40:	eb12 0804 	adds.w	r8, r2, r4
 800da44:	eb43 0905 	adc.w	r9, r3, r5
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	469a      	mov	sl, r3
 800da50:	4693      	mov	fp, r2
 800da52:	4652      	mov	r2, sl
 800da54:	465b      	mov	r3, fp
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f7f3 f93d 	bl	8000cd8 <__aeabi_uldivmod>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4613      	mov	r3, r2
 800da64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da6c:	d308      	bcc.n	800da80 <UART_SetConfig+0x430>
 800da6e:	6a3b      	ldr	r3, [r7, #32]
 800da70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da74:	d204      	bcs.n	800da80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6a3a      	ldr	r2, [r7, #32]
 800da7c:	60da      	str	r2, [r3, #12]
 800da7e:	e0ce      	b.n	800dc1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800da86:	e0ca      	b.n	800dc1e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da90:	d166      	bne.n	800db60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800da92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da96:	2b08      	cmp	r3, #8
 800da98:	d827      	bhi.n	800daea <UART_SetConfig+0x49a>
 800da9a:	a201      	add	r2, pc, #4	; (adr r2, 800daa0 <UART_SetConfig+0x450>)
 800da9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa0:	0800dac5 	.word	0x0800dac5
 800daa4:	0800dacd 	.word	0x0800dacd
 800daa8:	0800dad5 	.word	0x0800dad5
 800daac:	0800daeb 	.word	0x0800daeb
 800dab0:	0800dadb 	.word	0x0800dadb
 800dab4:	0800daeb 	.word	0x0800daeb
 800dab8:	0800daeb 	.word	0x0800daeb
 800dabc:	0800daeb 	.word	0x0800daeb
 800dac0:	0800dae3 	.word	0x0800dae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dac4:	f7fc fede 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 800dac8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800daca:	e014      	b.n	800daf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dacc:	f7fc fef0 	bl	800a8b0 <HAL_RCC_GetPCLK2Freq>
 800dad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dad2:	e010      	b.n	800daf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dad4:	4b4e      	ldr	r3, [pc, #312]	; (800dc10 <UART_SetConfig+0x5c0>)
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dad8:	e00d      	b.n	800daf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dada:	f7fc fe65 	bl	800a7a8 <HAL_RCC_GetSysClockFreq>
 800dade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dae0:	e009      	b.n	800daf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dae8:	e005      	b.n	800daf6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800daea:	2300      	movs	r3, #0
 800daec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800daf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 8090 	beq.w	800dc1e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db02:	4a44      	ldr	r2, [pc, #272]	; (800dc14 <UART_SetConfig+0x5c4>)
 800db04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db08:	461a      	mov	r2, r3
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db10:	005a      	lsls	r2, r3, #1
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	085b      	lsrs	r3, r3, #1
 800db18:	441a      	add	r2, r3
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db24:	6a3b      	ldr	r3, [r7, #32]
 800db26:	2b0f      	cmp	r3, #15
 800db28:	d916      	bls.n	800db58 <UART_SetConfig+0x508>
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db30:	d212      	bcs.n	800db58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	b29b      	uxth	r3, r3
 800db36:	f023 030f 	bic.w	r3, r3, #15
 800db3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	085b      	lsrs	r3, r3, #1
 800db40:	b29b      	uxth	r3, r3
 800db42:	f003 0307 	and.w	r3, r3, #7
 800db46:	b29a      	uxth	r2, r3
 800db48:	8bfb      	ldrh	r3, [r7, #30]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	8bfa      	ldrh	r2, [r7, #30]
 800db54:	60da      	str	r2, [r3, #12]
 800db56:	e062      	b.n	800dc1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800db5e:	e05e      	b.n	800dc1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800db60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db64:	2b08      	cmp	r3, #8
 800db66:	d828      	bhi.n	800dbba <UART_SetConfig+0x56a>
 800db68:	a201      	add	r2, pc, #4	; (adr r2, 800db70 <UART_SetConfig+0x520>)
 800db6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6e:	bf00      	nop
 800db70:	0800db95 	.word	0x0800db95
 800db74:	0800db9d 	.word	0x0800db9d
 800db78:	0800dba5 	.word	0x0800dba5
 800db7c:	0800dbbb 	.word	0x0800dbbb
 800db80:	0800dbab 	.word	0x0800dbab
 800db84:	0800dbbb 	.word	0x0800dbbb
 800db88:	0800dbbb 	.word	0x0800dbbb
 800db8c:	0800dbbb 	.word	0x0800dbbb
 800db90:	0800dbb3 	.word	0x0800dbb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db94:	f7fc fe76 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 800db98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800db9a:	e014      	b.n	800dbc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db9c:	f7fc fe88 	bl	800a8b0 <HAL_RCC_GetPCLK2Freq>
 800dba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dba2:	e010      	b.n	800dbc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dba4:	4b1a      	ldr	r3, [pc, #104]	; (800dc10 <UART_SetConfig+0x5c0>)
 800dba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dba8:	e00d      	b.n	800dbc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dbaa:	f7fc fdfd 	bl	800a7a8 <HAL_RCC_GetSysClockFreq>
 800dbae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dbb0:	e009      	b.n	800dbc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dbb8:	e005      	b.n	800dbc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dbc4:	bf00      	nop
    }

    if (pclk != 0U)
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d028      	beq.n	800dc1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	4a10      	ldr	r2, [pc, #64]	; (800dc14 <UART_SetConfig+0x5c4>)
 800dbd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	fbb3 f2f2 	udiv	r2, r3, r2
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	085b      	lsrs	r3, r3, #1
 800dbe4:	441a      	add	r2, r3
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	2b0f      	cmp	r3, #15
 800dbf4:	d910      	bls.n	800dc18 <UART_SetConfig+0x5c8>
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbfc:	d20c      	bcs.n	800dc18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	60da      	str	r2, [r3, #12]
 800dc08:	e009      	b.n	800dc1e <UART_SetConfig+0x5ce>
 800dc0a:	bf00      	nop
 800dc0c:	40008000 	.word	0x40008000
 800dc10:	00f42400 	.word	0x00f42400
 800dc14:	080150bc 	.word	0x080150bc
      }
      else
      {
        ret = HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2201      	movs	r2, #1
 800dc22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2200      	movs	r2, #0
 800dc32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	2200      	movs	r2, #0
 800dc38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dc3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3730      	adds	r7, #48	; 0x30
 800dc42:	46bd      	mov	sp, r7
 800dc44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dc48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc54:	f003 0301 	and.w	r3, r3, #1
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00a      	beq.n	800dc72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc76:	f003 0302 	and.w	r3, r3, #2
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00a      	beq.n	800dc94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	430a      	orrs	r2, r1
 800dc92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc98:	f003 0304 	and.w	r3, r3, #4
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00a      	beq.n	800dcb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcba:	f003 0308 	and.w	r3, r3, #8
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00a      	beq.n	800dcd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	430a      	orrs	r2, r1
 800dcd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcdc:	f003 0310 	and.w	r3, r3, #16
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00a      	beq.n	800dcfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	430a      	orrs	r2, r1
 800dcf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfe:	f003 0320 	and.w	r3, r3, #32
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00a      	beq.n	800dd1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	430a      	orrs	r2, r1
 800dd1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d01a      	beq.n	800dd5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	430a      	orrs	r2, r1
 800dd3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd46:	d10a      	bne.n	800dd5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	430a      	orrs	r2, r1
 800dd5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00a      	beq.n	800dd80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	430a      	orrs	r2, r1
 800dd7e:	605a      	str	r2, [r3, #4]
  }
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af02      	add	r7, sp, #8
 800dd92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd9c:	f7f8 fdf2 	bl	8006984 <HAL_GetTick>
 800dda0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f003 0308 	and.w	r3, r3, #8
 800ddac:	2b08      	cmp	r3, #8
 800ddae:	d10e      	bne.n	800ddce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f82f 	bl	800de22 <UART_WaitOnFlagUntilTimeout>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e025      	b.n	800de1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f003 0304 	and.w	r3, r3, #4
 800ddd8:	2b04      	cmp	r3, #4
 800ddda:	d10e      	bne.n	800ddfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f819 	bl	800de22 <UART_WaitOnFlagUntilTimeout>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e00f      	b.n	800de1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2220      	movs	r2, #32
 800ddfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2220      	movs	r2, #32
 800de06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b09c      	sub	sp, #112	; 0x70
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	603b      	str	r3, [r7, #0]
 800de2e:	4613      	mov	r3, r2
 800de30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de32:	e0a9      	b.n	800df88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	f000 80a5 	beq.w	800df88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de3e:	f7f8 fda1 	bl	8006984 <HAL_GetTick>
 800de42:	4602      	mov	r2, r0
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d302      	bcc.n	800de54 <UART_WaitOnFlagUntilTimeout+0x32>
 800de4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de50:	2b00      	cmp	r3, #0
 800de52:	d140      	bne.n	800ded6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5c:	e853 3f00 	ldrex	r3, [r3]
 800de60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de68:	667b      	str	r3, [r7, #100]	; 0x64
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de7a:	e841 2300 	strex	r3, r2, [r1]
 800de7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800de80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e6      	bne.n	800de54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3308      	adds	r3, #8
 800de8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de90:	e853 3f00 	ldrex	r3, [r3]
 800de94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de98:	f023 0301 	bic.w	r3, r3, #1
 800de9c:	663b      	str	r3, [r7, #96]	; 0x60
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3308      	adds	r3, #8
 800dea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dea6:	64ba      	str	r2, [r7, #72]	; 0x48
 800dea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800deac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deae:	e841 2300 	strex	r3, r2, [r1]
 800deb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800deb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1e5      	bne.n	800de86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2220      	movs	r2, #32
 800debe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2220      	movs	r2, #32
 800dec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e069      	b.n	800dfaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d051      	beq.n	800df88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	69db      	ldr	r3, [r3, #28]
 800deea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800deee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800def2:	d149      	bne.n	800df88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800defc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	e853 3f00 	ldrex	r3, [r3]
 800df0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	461a      	mov	r2, r3
 800df1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df1c:	637b      	str	r3, [r7, #52]	; 0x34
 800df1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df24:	e841 2300 	strex	r3, r2, [r1]
 800df28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1e6      	bne.n	800defe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3308      	adds	r3, #8
 800df36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	e853 3f00 	ldrex	r3, [r3]
 800df3e:	613b      	str	r3, [r7, #16]
   return(result);
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	f023 0301 	bic.w	r3, r3, #1
 800df46:	66bb      	str	r3, [r7, #104]	; 0x68
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3308      	adds	r3, #8
 800df4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df50:	623a      	str	r2, [r7, #32]
 800df52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df54:	69f9      	ldr	r1, [r7, #28]
 800df56:	6a3a      	ldr	r2, [r7, #32]
 800df58:	e841 2300 	strex	r3, r2, [r1]
 800df5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1e5      	bne.n	800df30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2220      	movs	r2, #32
 800df68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2220      	movs	r2, #32
 800df70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2220      	movs	r2, #32
 800df78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df84:	2303      	movs	r3, #3
 800df86:	e010      	b.n	800dfaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	69da      	ldr	r2, [r3, #28]
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	4013      	ands	r3, r2
 800df92:	68ba      	ldr	r2, [r7, #8]
 800df94:	429a      	cmp	r2, r3
 800df96:	bf0c      	ite	eq
 800df98:	2301      	moveq	r3, #1
 800df9a:	2300      	movne	r3, #0
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	461a      	mov	r2, r3
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	f43f af46 	beq.w	800de34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3770      	adds	r7, #112	; 0x70
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
	...

0800dfb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b0a3      	sub	sp, #140	; 0x8c
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	88fa      	ldrh	r2, [r7, #6]
 800dfcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	88fa      	ldrh	r2, [r7, #6]
 800dfd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfe6:	d10e      	bne.n	800e006 <UART_Start_Receive_IT+0x52>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d105      	bne.n	800dffc <UART_Start_Receive_IT+0x48>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dffa:	e02d      	b.n	800e058 <UART_Start_Receive_IT+0xa4>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	22ff      	movs	r2, #255	; 0xff
 800e000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e004:	e028      	b.n	800e058 <UART_Start_Receive_IT+0xa4>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10d      	bne.n	800e02a <UART_Start_Receive_IT+0x76>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d104      	bne.n	800e020 <UART_Start_Receive_IT+0x6c>
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	22ff      	movs	r2, #255	; 0xff
 800e01a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e01e:	e01b      	b.n	800e058 <UART_Start_Receive_IT+0xa4>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	227f      	movs	r2, #127	; 0x7f
 800e024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e028:	e016      	b.n	800e058 <UART_Start_Receive_IT+0xa4>
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e032:	d10d      	bne.n	800e050 <UART_Start_Receive_IT+0x9c>
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d104      	bne.n	800e046 <UART_Start_Receive_IT+0x92>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	227f      	movs	r2, #127	; 0x7f
 800e040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e044:	e008      	b.n	800e058 <UART_Start_Receive_IT+0xa4>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	223f      	movs	r2, #63	; 0x3f
 800e04a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e04e:	e003      	b.n	800e058 <UART_Start_Receive_IT+0xa4>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2222      	movs	r2, #34	; 0x22
 800e064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	3308      	adds	r3, #8
 800e06e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e072:	e853 3f00 	ldrex	r3, [r3]
 800e076:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e07a:	f043 0301 	orr.w	r3, r3, #1
 800e07e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	3308      	adds	r3, #8
 800e088:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e08c:	673a      	str	r2, [r7, #112]	; 0x70
 800e08e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e090:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e092:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e094:	e841 2300 	strex	r3, r2, [r1]
 800e098:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1e3      	bne.n	800e068 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0a8:	d153      	bne.n	800e152 <UART_Start_Receive_IT+0x19e>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e0b0:	88fa      	ldrh	r2, [r7, #6]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d34d      	bcc.n	800e152 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0be:	d107      	bne.n	800e0d0 <UART_Start_Receive_IT+0x11c>
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d103      	bne.n	800e0d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	4a4b      	ldr	r2, [pc, #300]	; (800e1f8 <UART_Start_Receive_IT+0x244>)
 800e0cc:	671a      	str	r2, [r3, #112]	; 0x70
 800e0ce:	e002      	b.n	800e0d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	4a4a      	ldr	r2, [pc, #296]	; (800e1fc <UART_Start_Receive_IT+0x248>)
 800e0d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d01a      	beq.n	800e11c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ee:	e853 3f00 	ldrex	r3, [r3]
 800e0f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e10a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e10c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e10e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e110:	e841 2300 	strex	r3, r2, [r1]
 800e114:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1e4      	bne.n	800e0e6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	3308      	adds	r3, #8
 800e122:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e126:	e853 3f00 	ldrex	r3, [r3]
 800e12a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e132:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3308      	adds	r3, #8
 800e13a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e13c:	64ba      	str	r2, [r7, #72]	; 0x48
 800e13e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e140:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e144:	e841 2300 	strex	r3, r2, [r1]
 800e148:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1e5      	bne.n	800e11c <UART_Start_Receive_IT+0x168>
 800e150:	e04a      	b.n	800e1e8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e15a:	d107      	bne.n	800e16c <UART_Start_Receive_IT+0x1b8>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d103      	bne.n	800e16c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	4a26      	ldr	r2, [pc, #152]	; (800e200 <UART_Start_Receive_IT+0x24c>)
 800e168:	671a      	str	r2, [r3, #112]	; 0x70
 800e16a:	e002      	b.n	800e172 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4a25      	ldr	r2, [pc, #148]	; (800e204 <UART_Start_Receive_IT+0x250>)
 800e170:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d019      	beq.n	800e1b6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	e853 3f00 	ldrex	r3, [r3]
 800e18e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e192:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e196:	677b      	str	r3, [r7, #116]	; 0x74
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	461a      	mov	r2, r3
 800e19e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e1a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1a8:	e841 2300 	strex	r3, r2, [r1]
 800e1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1e6      	bne.n	800e182 <UART_Start_Receive_IT+0x1ce>
 800e1b4:	e018      	b.n	800e1e8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	e853 3f00 	ldrex	r3, [r3]
 800e1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	f043 0320 	orr.w	r3, r3, #32
 800e1ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1d4:	623b      	str	r3, [r7, #32]
 800e1d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d8:	69f9      	ldr	r1, [r7, #28]
 800e1da:	6a3a      	ldr	r2, [r7, #32]
 800e1dc:	e841 2300 	strex	r3, r2, [r1]
 800e1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1e6      	bne.n	800e1b6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	378c      	adds	r7, #140	; 0x8c
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	0800e911 	.word	0x0800e911
 800e1fc:	0800e619 	.word	0x0800e619
 800e200:	0800e4b7 	.word	0x0800e4b7
 800e204:	0800e357 	.word	0x0800e357

0800e208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e208:	b480      	push	{r7}
 800e20a:	b095      	sub	sp, #84	; 0x54
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e218:	e853 3f00 	ldrex	r3, [r3]
 800e21c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e224:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e22e:	643b      	str	r3, [r7, #64]	; 0x40
 800e230:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e236:	e841 2300 	strex	r3, r2, [r1]
 800e23a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1e6      	bne.n	800e210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3308      	adds	r3, #8
 800e248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	e853 3f00 	ldrex	r3, [r3]
 800e250:	61fb      	str	r3, [r7, #28]
   return(result);
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e258:	f023 0301 	bic.w	r3, r3, #1
 800e25c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3308      	adds	r3, #8
 800e264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e266:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e268:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e26e:	e841 2300 	strex	r3, r2, [r1]
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1e3      	bne.n	800e242 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d118      	bne.n	800e2b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	e853 3f00 	ldrex	r3, [r3]
 800e28e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f023 0310 	bic.w	r3, r3, #16
 800e296:	647b      	str	r3, [r7, #68]	; 0x44
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2a0:	61bb      	str	r3, [r7, #24]
 800e2a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a4:	6979      	ldr	r1, [r7, #20]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	e841 2300 	strex	r3, r2, [r1]
 800e2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e6      	bne.n	800e282 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2220      	movs	r2, #32
 800e2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e2c8:	bf00      	nop
 800e2ca:	3754      	adds	r7, #84	; 0x54
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff f996 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2f8:	bf00      	nop
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b088      	sub	sp, #32
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	e853 3f00 	ldrex	r3, [r3]
 800e314:	60bb      	str	r3, [r7, #8]
   return(result);
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e31c:	61fb      	str	r3, [r7, #28]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	61bb      	str	r3, [r7, #24]
 800e328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32a:	6979      	ldr	r1, [r7, #20]
 800e32c:	69ba      	ldr	r2, [r7, #24]
 800e32e:	e841 2300 	strex	r3, r2, [r1]
 800e332:	613b      	str	r3, [r7, #16]
   return(result);
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1e6      	bne.n	800e308 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2220      	movs	r2, #32
 800e33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff f961 	bl	800d610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e34e:	bf00      	nop
 800e350:	3720      	adds	r7, #32
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b096      	sub	sp, #88	; 0x58
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e364:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e36e:	2b22      	cmp	r3, #34	; 0x22
 800e370:	f040 8095 	bne.w	800e49e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e37e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e382:	b2d9      	uxtb	r1, r3
 800e384:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e38e:	400a      	ands	r2, r1
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d178      	bne.n	800e4ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c4:	e853 3f00 	ldrex	r3, [r3]
 800e3c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3d0:	653b      	str	r3, [r7, #80]	; 0x50
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3da:	647b      	str	r3, [r7, #68]	; 0x44
 800e3dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3e2:	e841 2300 	strex	r3, r2, [r1]
 800e3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1e6      	bne.n	800e3bc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	e853 3f00 	ldrex	r3, [r3]
 800e3fc:	623b      	str	r3, [r7, #32]
   return(result);
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	f023 0301 	bic.w	r3, r3, #1
 800e404:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	3308      	adds	r3, #8
 800e40c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e40e:	633a      	str	r2, [r7, #48]	; 0x30
 800e410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e416:	e841 2300 	strex	r3, r2, [r1]
 800e41a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1e5      	bne.n	800e3ee <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2220      	movs	r2, #32
 800e426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e434:	2b01      	cmp	r3, #1
 800e436:	d12e      	bne.n	800e496 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	e853 3f00 	ldrex	r3, [r3]
 800e44a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f023 0310 	bic.w	r3, r3, #16
 800e452:	64bb      	str	r3, [r7, #72]	; 0x48
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	461a      	mov	r2, r3
 800e45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e45c:	61fb      	str	r3, [r7, #28]
 800e45e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e460:	69b9      	ldr	r1, [r7, #24]
 800e462:	69fa      	ldr	r2, [r7, #28]
 800e464:	e841 2300 	strex	r3, r2, [r1]
 800e468:	617b      	str	r3, [r7, #20]
   return(result);
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1e6      	bne.n	800e43e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	f003 0310 	and.w	r3, r3, #16
 800e47a:	2b10      	cmp	r3, #16
 800e47c:	d103      	bne.n	800e486 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2210      	movs	r2, #16
 800e484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff f8d2 	bl	800d638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e494:	e00b      	b.n	800e4ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f8 f9d4 	bl	8006844 <HAL_UART_RxCpltCallback>
}
 800e49c:	e007      	b.n	800e4ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	699a      	ldr	r2, [r3, #24]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f042 0208 	orr.w	r2, r2, #8
 800e4ac:	619a      	str	r2, [r3, #24]
}
 800e4ae:	bf00      	nop
 800e4b0:	3758      	adds	r7, #88	; 0x58
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b096      	sub	sp, #88	; 0x58
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ce:	2b22      	cmp	r3, #34	; 0x22
 800e4d0:	f040 8095 	bne.w	800e5fe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e4e4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e4e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4f8:	1c9a      	adds	r2, r3, #2
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e504:	b29b      	uxth	r3, r3
 800e506:	3b01      	subs	r3, #1
 800e508:	b29a      	uxth	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e516:	b29b      	uxth	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d178      	bne.n	800e60e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e524:	e853 3f00 	ldrex	r3, [r3]
 800e528:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e530:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e53a:	643b      	str	r3, [r7, #64]	; 0x40
 800e53c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e542:	e841 2300 	strex	r3, r2, [r1]
 800e546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1e6      	bne.n	800e51c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3308      	adds	r3, #8
 800e554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	e853 3f00 	ldrex	r3, [r3]
 800e55c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	f023 0301 	bic.w	r3, r3, #1
 800e564:	64bb      	str	r3, [r7, #72]	; 0x48
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	3308      	adds	r3, #8
 800e56c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e56e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e576:	e841 2300 	strex	r3, r2, [r1]
 800e57a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1e5      	bne.n	800e54e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2220      	movs	r2, #32
 800e586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2200      	movs	r2, #0
 800e58e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e594:	2b01      	cmp	r3, #1
 800e596:	d12e      	bne.n	800e5f6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	e853 3f00 	ldrex	r3, [r3]
 800e5aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	f023 0310 	bic.w	r3, r3, #16
 800e5b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5bc:	61bb      	str	r3, [r7, #24]
 800e5be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c0:	6979      	ldr	r1, [r7, #20]
 800e5c2:	69ba      	ldr	r2, [r7, #24]
 800e5c4:	e841 2300 	strex	r3, r2, [r1]
 800e5c8:	613b      	str	r3, [r7, #16]
   return(result);
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e6      	bne.n	800e59e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	69db      	ldr	r3, [r3, #28]
 800e5d6:	f003 0310 	and.w	r3, r3, #16
 800e5da:	2b10      	cmp	r3, #16
 800e5dc:	d103      	bne.n	800e5e6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2210      	movs	r2, #16
 800e5e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff f822 	bl	800d638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5f4:	e00b      	b.n	800e60e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7f8 f924 	bl	8006844 <HAL_UART_RxCpltCallback>
}
 800e5fc:	e007      	b.n	800e60e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	699a      	ldr	r2, [r3, #24]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f042 0208 	orr.w	r2, r2, #8
 800e60c:	619a      	str	r2, [r3, #24]
}
 800e60e:	bf00      	nop
 800e610:	3758      	adds	r7, #88	; 0x58
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
	...

0800e618 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b0a6      	sub	sp, #152	; 0x98
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e626:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	69db      	ldr	r3, [r3, #28]
 800e630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e64e:	2b22      	cmp	r3, #34	; 0x22
 800e650:	f040 814f 	bne.w	800e8f2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e65a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e65e:	e0f6      	b.n	800e84e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e666:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e66a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e66e:	b2d9      	uxtb	r1, r3
 800e670:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e674:	b2da      	uxtb	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e67a:	400a      	ands	r2, r1
 800e67c:	b2d2      	uxtb	r2, r2
 800e67e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e684:	1c5a      	adds	r2, r3, #1
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e690:	b29b      	uxth	r3, r3
 800e692:	3b01      	subs	r3, #1
 800e694:	b29a      	uxth	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	69db      	ldr	r3, [r3, #28]
 800e6a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e6a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6aa:	f003 0307 	and.w	r3, r3, #7
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d053      	beq.n	800e75a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d011      	beq.n	800e6e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00b      	beq.n	800e6e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6d8:	f043 0201 	orr.w	r2, r3, #1
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d011      	beq.n	800e712 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e6ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00b      	beq.n	800e712 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2202      	movs	r2, #2
 800e700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e708:	f043 0204 	orr.w	r2, r3, #4
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e712:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e716:	f003 0304 	and.w	r3, r3, #4
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d011      	beq.n	800e742 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e71e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00b      	beq.n	800e742 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2204      	movs	r2, #4
 800e730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e738:	f043 0202 	orr.w	r2, r3, #2
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d006      	beq.n	800e75a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7fe ff69 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2200      	movs	r2, #0
 800e756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e760:	b29b      	uxth	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	d173      	bne.n	800e84e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e76e:	e853 3f00 	ldrex	r3, [r3]
 800e772:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e77a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	461a      	mov	r2, r3
 800e784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e788:	66bb      	str	r3, [r7, #104]	; 0x68
 800e78a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e78e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e790:	e841 2300 	strex	r3, r2, [r1]
 800e794:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1e4      	bne.n	800e766 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	3308      	adds	r3, #8
 800e7a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a6:	e853 3f00 	ldrex	r3, [r3]
 800e7aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7b2:	f023 0301 	bic.w	r3, r3, #1
 800e7b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3308      	adds	r3, #8
 800e7be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e7c0:	657a      	str	r2, [r7, #84]	; 0x54
 800e7c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7c8:	e841 2300 	strex	r3, r2, [r1]
 800e7cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1e3      	bne.n	800e79c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2220      	movs	r2, #32
 800e7d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d12e      	bne.n	800e848 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f8:	e853 3f00 	ldrex	r3, [r3]
 800e7fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	f023 0310 	bic.w	r3, r3, #16
 800e804:	67bb      	str	r3, [r7, #120]	; 0x78
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e80e:	643b      	str	r3, [r7, #64]	; 0x40
 800e810:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e816:	e841 2300 	strex	r3, r2, [r1]
 800e81a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1e6      	bne.n	800e7f0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	69db      	ldr	r3, [r3, #28]
 800e828:	f003 0310 	and.w	r3, r3, #16
 800e82c:	2b10      	cmp	r3, #16
 800e82e:	d103      	bne.n	800e838 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2210      	movs	r2, #16
 800e836:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7fe fef9 	bl	800d638 <HAL_UARTEx_RxEventCallback>
 800e846:	e002      	b.n	800e84e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7f7 fffb 	bl	8006844 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e84e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e852:	2b00      	cmp	r3, #0
 800e854:	d006      	beq.n	800e864 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800e856:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e85a:	f003 0320 	and.w	r3, r3, #32
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f47f aefe 	bne.w	800e660 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e86a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e86e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e872:	2b00      	cmp	r3, #0
 800e874:	d045      	beq.n	800e902 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e87c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e880:	429a      	cmp	r2, r3
 800e882:	d23e      	bcs.n	800e902 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3308      	adds	r3, #8
 800e88a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88c:	6a3b      	ldr	r3, [r7, #32]
 800e88e:	e853 3f00 	ldrex	r3, [r3]
 800e892:	61fb      	str	r3, [r7, #28]
   return(result);
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e89a:	673b      	str	r3, [r7, #112]	; 0x70
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8ac:	e841 2300 	strex	r3, r2, [r1]
 800e8b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1e5      	bne.n	800e884 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a14      	ldr	r2, [pc, #80]	; (800e90c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e8bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	e853 3f00 	ldrex	r3, [r3]
 800e8ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f043 0320 	orr.w	r3, r3, #32
 800e8d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8dc:	61bb      	str	r3, [r7, #24]
 800e8de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e0:	6979      	ldr	r1, [r7, #20]
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	e841 2300 	strex	r3, r2, [r1]
 800e8e8:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1e6      	bne.n	800e8be <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8f0:	e007      	b.n	800e902 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	699a      	ldr	r2, [r3, #24]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f042 0208 	orr.w	r2, r2, #8
 800e900:	619a      	str	r2, [r3, #24]
}
 800e902:	bf00      	nop
 800e904:	3798      	adds	r7, #152	; 0x98
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	0800e357 	.word	0x0800e357

0800e910 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b0a8      	sub	sp, #160	; 0xa0
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e91e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	69db      	ldr	r3, [r3, #28]
 800e928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e946:	2b22      	cmp	r3, #34	; 0x22
 800e948:	f040 8153 	bne.w	800ebf2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e952:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e956:	e0fa      	b.n	800eb4e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e96a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e96e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e972:	4013      	ands	r3, r2
 800e974:	b29a      	uxth	r2, r3
 800e976:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e97a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e980:	1c9a      	adds	r2, r3, #2
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	3b01      	subs	r3, #1
 800e990:	b29a      	uxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	69db      	ldr	r3, [r3, #28]
 800e99e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e9a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9a6:	f003 0307 	and.w	r3, r3, #7
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d053      	beq.n	800ea56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e9ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d011      	beq.n	800e9de <UART_RxISR_16BIT_FIFOEN+0xce>
 800e9ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00b      	beq.n	800e9de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9d4:	f043 0201 	orr.w	r2, r3, #1
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9e2:	f003 0302 	and.w	r3, r3, #2
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d011      	beq.n	800ea0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e9ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00b      	beq.n	800ea0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea04:	f043 0204 	orr.w	r2, r3, #4
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea12:	f003 0304 	and.w	r3, r3, #4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d011      	beq.n	800ea3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ea1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00b      	beq.n	800ea3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2204      	movs	r2, #4
 800ea2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea34:	f043 0202 	orr.w	r2, r3, #2
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d006      	beq.n	800ea56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fe fdeb 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d175      	bne.n	800eb4e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ea70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea84:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea86:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea8c:	e841 2300 	strex	r3, r2, [r1]
 800ea90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ea92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1e4      	bne.n	800ea62 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3308      	adds	r3, #8
 800ea9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa2:	e853 3f00 	ldrex	r3, [r3]
 800eaa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eaa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eaae:	f023 0301 	bic.w	r3, r3, #1
 800eab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3308      	adds	r3, #8
 800eabc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eac0:	65ba      	str	r2, [r7, #88]	; 0x58
 800eac2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eac8:	e841 2300 	strex	r3, r2, [r1]
 800eacc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e1      	bne.n	800ea98 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2220      	movs	r2, #32
 800ead8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d12e      	bne.n	800eb48 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	e853 3f00 	ldrex	r3, [r3]
 800eafc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb00:	f023 0310 	bic.w	r3, r3, #16
 800eb04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb0e:	647b      	str	r3, [r7, #68]	; 0x44
 800eb10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb16:	e841 2300 	strex	r3, r2, [r1]
 800eb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1e6      	bne.n	800eaf0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	69db      	ldr	r3, [r3, #28]
 800eb28:	f003 0310 	and.w	r3, r3, #16
 800eb2c:	2b10      	cmp	r3, #16
 800eb2e:	d103      	bne.n	800eb38 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2210      	movs	r2, #16
 800eb36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb3e:	4619      	mov	r1, r3
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fe fd79 	bl	800d638 <HAL_UARTEx_RxEventCallback>
 800eb46:	e002      	b.n	800eb4e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7f7 fe7b 	bl	8006844 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d006      	beq.n	800eb64 <UART_RxISR_16BIT_FIFOEN+0x254>
 800eb56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eb5a:	f003 0320 	and.w	r3, r3, #32
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f47f aefa 	bne.w	800e958 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb6a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d045      	beq.n	800ec02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb7c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d23e      	bcs.n	800ec02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3308      	adds	r3, #8
 800eb8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8e:	e853 3f00 	ldrex	r3, [r3]
 800eb92:	623b      	str	r3, [r7, #32]
   return(result);
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb9a:	677b      	str	r3, [r7, #116]	; 0x74
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3308      	adds	r3, #8
 800eba2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eba4:	633a      	str	r2, [r7, #48]	; 0x30
 800eba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebac:	e841 2300 	strex	r3, r2, [r1]
 800ebb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d1e5      	bne.n	800eb84 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	4a14      	ldr	r2, [pc, #80]	; (800ec0c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ebbc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	e853 3f00 	ldrex	r3, [r3]
 800ebca:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f043 0320 	orr.w	r3, r3, #32
 800ebd2:	673b      	str	r3, [r7, #112]	; 0x70
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebdc:	61fb      	str	r3, [r7, #28]
 800ebde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe0:	69b9      	ldr	r1, [r7, #24]
 800ebe2:	69fa      	ldr	r2, [r7, #28]
 800ebe4:	e841 2300 	strex	r3, r2, [r1]
 800ebe8:	617b      	str	r3, [r7, #20]
   return(result);
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e6      	bne.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebf0:	e007      	b.n	800ec02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	699a      	ldr	r2, [r3, #24]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f042 0208 	orr.w	r2, r2, #8
 800ec00:	619a      	str	r2, [r3, #24]
}
 800ec02:	bf00      	nop
 800ec04:	37a0      	adds	r7, #160	; 0xa0
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	0800e4b7 	.word	0x0800e4b7

0800ec10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec2c:	bf00      	nop
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d101      	bne.n	800ec62 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec5e:	2302      	movs	r3, #2
 800ec60:	e027      	b.n	800ecb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2224      	movs	r2, #36	; 0x24
 800ec6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f022 0201 	bic.w	r2, r2, #1
 800ec88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2220      	movs	r2, #32
 800eca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3714      	adds	r7, #20
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr

0800ecbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b084      	sub	sp, #16
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
 800ecc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d101      	bne.n	800ecd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	e02d      	b.n	800ed32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2224      	movs	r2, #36	; 0x24
 800ece2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f022 0201 	bic.w	r2, r2, #1
 800ecfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	683a      	ldr	r2, [r7, #0]
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f850 	bl	800edb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2220      	movs	r2, #32
 800ed24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d101      	bne.n	800ed52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed4e:	2302      	movs	r3, #2
 800ed50:	e02d      	b.n	800edae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2224      	movs	r2, #36	; 0x24
 800ed5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f022 0201 	bic.w	r2, r2, #1
 800ed78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	430a      	orrs	r2, r1
 800ed8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f812 	bl	800edb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2220      	movs	r2, #32
 800eda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d108      	bne.n	800edda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edd8:	e031      	b.n	800ee3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edda:	2308      	movs	r3, #8
 800eddc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800edde:	2308      	movs	r3, #8
 800ede0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	0e5b      	lsrs	r3, r3, #25
 800edea:	b2db      	uxtb	r3, r3
 800edec:	f003 0307 	and.w	r3, r3, #7
 800edf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	0f5b      	lsrs	r3, r3, #29
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	f003 0307 	and.w	r3, r3, #7
 800ee00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee02:	7bbb      	ldrb	r3, [r7, #14]
 800ee04:	7b3a      	ldrb	r2, [r7, #12]
 800ee06:	4911      	ldr	r1, [pc, #68]	; (800ee4c <UARTEx_SetNbDataToProcess+0x94>)
 800ee08:	5c8a      	ldrb	r2, [r1, r2]
 800ee0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee0e:	7b3a      	ldrb	r2, [r7, #12]
 800ee10:	490f      	ldr	r1, [pc, #60]	; (800ee50 <UARTEx_SetNbDataToProcess+0x98>)
 800ee12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee20:	7bfb      	ldrb	r3, [r7, #15]
 800ee22:	7b7a      	ldrb	r2, [r7, #13]
 800ee24:	4909      	ldr	r1, [pc, #36]	; (800ee4c <UARTEx_SetNbDataToProcess+0x94>)
 800ee26:	5c8a      	ldrb	r2, [r1, r2]
 800ee28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee2c:	7b7a      	ldrb	r2, [r7, #13]
 800ee2e:	4908      	ldr	r1, [pc, #32]	; (800ee50 <UARTEx_SetNbDataToProcess+0x98>)
 800ee30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee3e:	bf00      	nop
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	080150d4 	.word	0x080150d4
 800ee50:	080150dc 	.word	0x080150dc

0800ee54 <atof>:
 800ee54:	2100      	movs	r1, #0
 800ee56:	f001 bd9b 	b.w	8010990 <strtod>

0800ee5a <atoi>:
 800ee5a:	220a      	movs	r2, #10
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	f001 be27 	b.w	8010ab0 <strtol>
	...

0800ee64 <__errno>:
 800ee64:	4b01      	ldr	r3, [pc, #4]	; (800ee6c <__errno+0x8>)
 800ee66:	6818      	ldr	r0, [r3, #0]
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop
 800ee6c:	2000002c 	.word	0x2000002c

0800ee70 <__libc_init_array>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	4d0d      	ldr	r5, [pc, #52]	; (800eea8 <__libc_init_array+0x38>)
 800ee74:	4c0d      	ldr	r4, [pc, #52]	; (800eeac <__libc_init_array+0x3c>)
 800ee76:	1b64      	subs	r4, r4, r5
 800ee78:	10a4      	asrs	r4, r4, #2
 800ee7a:	2600      	movs	r6, #0
 800ee7c:	42a6      	cmp	r6, r4
 800ee7e:	d109      	bne.n	800ee94 <__libc_init_array+0x24>
 800ee80:	4d0b      	ldr	r5, [pc, #44]	; (800eeb0 <__libc_init_array+0x40>)
 800ee82:	4c0c      	ldr	r4, [pc, #48]	; (800eeb4 <__libc_init_array+0x44>)
 800ee84:	f005 f896 	bl	8013fb4 <_init>
 800ee88:	1b64      	subs	r4, r4, r5
 800ee8a:	10a4      	asrs	r4, r4, #2
 800ee8c:	2600      	movs	r6, #0
 800ee8e:	42a6      	cmp	r6, r4
 800ee90:	d105      	bne.n	800ee9e <__libc_init_array+0x2e>
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee98:	4798      	blx	r3
 800ee9a:	3601      	adds	r6, #1
 800ee9c:	e7ee      	b.n	800ee7c <__libc_init_array+0xc>
 800ee9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea2:	4798      	blx	r3
 800eea4:	3601      	adds	r6, #1
 800eea6:	e7f2      	b.n	800ee8e <__libc_init_array+0x1e>
 800eea8:	080155d8 	.word	0x080155d8
 800eeac:	080155d8 	.word	0x080155d8
 800eeb0:	080155d8 	.word	0x080155d8
 800eeb4:	080155dc 	.word	0x080155dc

0800eeb8 <memcpy>:
 800eeb8:	440a      	add	r2, r1
 800eeba:	4291      	cmp	r1, r2
 800eebc:	f100 33ff 	add.w	r3, r0, #4294967295
 800eec0:	d100      	bne.n	800eec4 <memcpy+0xc>
 800eec2:	4770      	bx	lr
 800eec4:	b510      	push	{r4, lr}
 800eec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eece:	4291      	cmp	r1, r2
 800eed0:	d1f9      	bne.n	800eec6 <memcpy+0xe>
 800eed2:	bd10      	pop	{r4, pc}

0800eed4 <memset>:
 800eed4:	4402      	add	r2, r0
 800eed6:	4603      	mov	r3, r0
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d100      	bne.n	800eede <memset+0xa>
 800eedc:	4770      	bx	lr
 800eede:	f803 1b01 	strb.w	r1, [r3], #1
 800eee2:	e7f9      	b.n	800eed8 <memset+0x4>

0800eee4 <__cvt>:
 800eee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eee8:	ec55 4b10 	vmov	r4, r5, d0
 800eeec:	2d00      	cmp	r5, #0
 800eeee:	460e      	mov	r6, r1
 800eef0:	4619      	mov	r1, r3
 800eef2:	462b      	mov	r3, r5
 800eef4:	bfbb      	ittet	lt
 800eef6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eefa:	461d      	movlt	r5, r3
 800eefc:	2300      	movge	r3, #0
 800eefe:	232d      	movlt	r3, #45	; 0x2d
 800ef00:	700b      	strb	r3, [r1, #0]
 800ef02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef08:	4691      	mov	r9, r2
 800ef0a:	f023 0820 	bic.w	r8, r3, #32
 800ef0e:	bfbc      	itt	lt
 800ef10:	4622      	movlt	r2, r4
 800ef12:	4614      	movlt	r4, r2
 800ef14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef18:	d005      	beq.n	800ef26 <__cvt+0x42>
 800ef1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ef1e:	d100      	bne.n	800ef22 <__cvt+0x3e>
 800ef20:	3601      	adds	r6, #1
 800ef22:	2102      	movs	r1, #2
 800ef24:	e000      	b.n	800ef28 <__cvt+0x44>
 800ef26:	2103      	movs	r1, #3
 800ef28:	ab03      	add	r3, sp, #12
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	ab02      	add	r3, sp, #8
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	ec45 4b10 	vmov	d0, r4, r5
 800ef34:	4653      	mov	r3, sl
 800ef36:	4632      	mov	r2, r6
 800ef38:	f001 ff12 	bl	8010d60 <_dtoa_r>
 800ef3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ef40:	4607      	mov	r7, r0
 800ef42:	d102      	bne.n	800ef4a <__cvt+0x66>
 800ef44:	f019 0f01 	tst.w	r9, #1
 800ef48:	d022      	beq.n	800ef90 <__cvt+0xac>
 800ef4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef4e:	eb07 0906 	add.w	r9, r7, r6
 800ef52:	d110      	bne.n	800ef76 <__cvt+0x92>
 800ef54:	783b      	ldrb	r3, [r7, #0]
 800ef56:	2b30      	cmp	r3, #48	; 0x30
 800ef58:	d10a      	bne.n	800ef70 <__cvt+0x8c>
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4620      	mov	r0, r4
 800ef60:	4629      	mov	r1, r5
 800ef62:	f7f1 fdd9 	bl	8000b18 <__aeabi_dcmpeq>
 800ef66:	b918      	cbnz	r0, 800ef70 <__cvt+0x8c>
 800ef68:	f1c6 0601 	rsb	r6, r6, #1
 800ef6c:	f8ca 6000 	str.w	r6, [sl]
 800ef70:	f8da 3000 	ldr.w	r3, [sl]
 800ef74:	4499      	add	r9, r3
 800ef76:	2200      	movs	r2, #0
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	f7f1 fdcb 	bl	8000b18 <__aeabi_dcmpeq>
 800ef82:	b108      	cbz	r0, 800ef88 <__cvt+0xa4>
 800ef84:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef88:	2230      	movs	r2, #48	; 0x30
 800ef8a:	9b03      	ldr	r3, [sp, #12]
 800ef8c:	454b      	cmp	r3, r9
 800ef8e:	d307      	bcc.n	800efa0 <__cvt+0xbc>
 800ef90:	9b03      	ldr	r3, [sp, #12]
 800ef92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef94:	1bdb      	subs	r3, r3, r7
 800ef96:	4638      	mov	r0, r7
 800ef98:	6013      	str	r3, [r2, #0]
 800ef9a:	b004      	add	sp, #16
 800ef9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa0:	1c59      	adds	r1, r3, #1
 800efa2:	9103      	str	r1, [sp, #12]
 800efa4:	701a      	strb	r2, [r3, #0]
 800efa6:	e7f0      	b.n	800ef8a <__cvt+0xa6>

0800efa8 <__exponent>:
 800efa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efaa:	4603      	mov	r3, r0
 800efac:	2900      	cmp	r1, #0
 800efae:	bfb8      	it	lt
 800efb0:	4249      	neglt	r1, r1
 800efb2:	f803 2b02 	strb.w	r2, [r3], #2
 800efb6:	bfb4      	ite	lt
 800efb8:	222d      	movlt	r2, #45	; 0x2d
 800efba:	222b      	movge	r2, #43	; 0x2b
 800efbc:	2909      	cmp	r1, #9
 800efbe:	7042      	strb	r2, [r0, #1]
 800efc0:	dd2a      	ble.n	800f018 <__exponent+0x70>
 800efc2:	f10d 0407 	add.w	r4, sp, #7
 800efc6:	46a4      	mov	ip, r4
 800efc8:	270a      	movs	r7, #10
 800efca:	46a6      	mov	lr, r4
 800efcc:	460a      	mov	r2, r1
 800efce:	fb91 f6f7 	sdiv	r6, r1, r7
 800efd2:	fb07 1516 	mls	r5, r7, r6, r1
 800efd6:	3530      	adds	r5, #48	; 0x30
 800efd8:	2a63      	cmp	r2, #99	; 0x63
 800efda:	f104 34ff 	add.w	r4, r4, #4294967295
 800efde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800efe2:	4631      	mov	r1, r6
 800efe4:	dcf1      	bgt.n	800efca <__exponent+0x22>
 800efe6:	3130      	adds	r1, #48	; 0x30
 800efe8:	f1ae 0502 	sub.w	r5, lr, #2
 800efec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eff0:	1c44      	adds	r4, r0, #1
 800eff2:	4629      	mov	r1, r5
 800eff4:	4561      	cmp	r1, ip
 800eff6:	d30a      	bcc.n	800f00e <__exponent+0x66>
 800eff8:	f10d 0209 	add.w	r2, sp, #9
 800effc:	eba2 020e 	sub.w	r2, r2, lr
 800f000:	4565      	cmp	r5, ip
 800f002:	bf88      	it	hi
 800f004:	2200      	movhi	r2, #0
 800f006:	4413      	add	r3, r2
 800f008:	1a18      	subs	r0, r3, r0
 800f00a:	b003      	add	sp, #12
 800f00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f012:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f016:	e7ed      	b.n	800eff4 <__exponent+0x4c>
 800f018:	2330      	movs	r3, #48	; 0x30
 800f01a:	3130      	adds	r1, #48	; 0x30
 800f01c:	7083      	strb	r3, [r0, #2]
 800f01e:	70c1      	strb	r1, [r0, #3]
 800f020:	1d03      	adds	r3, r0, #4
 800f022:	e7f1      	b.n	800f008 <__exponent+0x60>

0800f024 <_printf_float>:
 800f024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f028:	ed2d 8b02 	vpush	{d8}
 800f02c:	b08d      	sub	sp, #52	; 0x34
 800f02e:	460c      	mov	r4, r1
 800f030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f034:	4616      	mov	r6, r2
 800f036:	461f      	mov	r7, r3
 800f038:	4605      	mov	r5, r0
 800f03a:	f003 f9a5 	bl	8012388 <_localeconv_r>
 800f03e:	f8d0 a000 	ldr.w	sl, [r0]
 800f042:	4650      	mov	r0, sl
 800f044:	f7f1 f8ec 	bl	8000220 <strlen>
 800f048:	2300      	movs	r3, #0
 800f04a:	930a      	str	r3, [sp, #40]	; 0x28
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	9305      	str	r3, [sp, #20]
 800f050:	f8d8 3000 	ldr.w	r3, [r8]
 800f054:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f058:	3307      	adds	r3, #7
 800f05a:	f023 0307 	bic.w	r3, r3, #7
 800f05e:	f103 0208 	add.w	r2, r3, #8
 800f062:	f8c8 2000 	str.w	r2, [r8]
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f06e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f076:	9307      	str	r3, [sp, #28]
 800f078:	f8cd 8018 	str.w	r8, [sp, #24]
 800f07c:	ee08 0a10 	vmov	s16, r0
 800f080:	4b9f      	ldr	r3, [pc, #636]	; (800f300 <_printf_float+0x2dc>)
 800f082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f086:	f04f 32ff 	mov.w	r2, #4294967295
 800f08a:	f7f1 fd77 	bl	8000b7c <__aeabi_dcmpun>
 800f08e:	bb88      	cbnz	r0, 800f0f4 <_printf_float+0xd0>
 800f090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f094:	4b9a      	ldr	r3, [pc, #616]	; (800f300 <_printf_float+0x2dc>)
 800f096:	f04f 32ff 	mov.w	r2, #4294967295
 800f09a:	f7f1 fd51 	bl	8000b40 <__aeabi_dcmple>
 800f09e:	bb48      	cbnz	r0, 800f0f4 <_printf_float+0xd0>
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	f7f1 fd40 	bl	8000b2c <__aeabi_dcmplt>
 800f0ac:	b110      	cbz	r0, 800f0b4 <_printf_float+0x90>
 800f0ae:	232d      	movs	r3, #45	; 0x2d
 800f0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b4:	4b93      	ldr	r3, [pc, #588]	; (800f304 <_printf_float+0x2e0>)
 800f0b6:	4894      	ldr	r0, [pc, #592]	; (800f308 <_printf_float+0x2e4>)
 800f0b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f0bc:	bf94      	ite	ls
 800f0be:	4698      	movls	r8, r3
 800f0c0:	4680      	movhi	r8, r0
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	9b05      	ldr	r3, [sp, #20]
 800f0c8:	f023 0204 	bic.w	r2, r3, #4
 800f0cc:	6022      	str	r2, [r4, #0]
 800f0ce:	f04f 0900 	mov.w	r9, #0
 800f0d2:	9700      	str	r7, [sp, #0]
 800f0d4:	4633      	mov	r3, r6
 800f0d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f0d8:	4621      	mov	r1, r4
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f000 f9d8 	bl	800f490 <_printf_common>
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	f040 8090 	bne.w	800f206 <_printf_float+0x1e2>
 800f0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ea:	b00d      	add	sp, #52	; 0x34
 800f0ec:	ecbd 8b02 	vpop	{d8}
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	4642      	mov	r2, r8
 800f0f6:	464b      	mov	r3, r9
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	4649      	mov	r1, r9
 800f0fc:	f7f1 fd3e 	bl	8000b7c <__aeabi_dcmpun>
 800f100:	b140      	cbz	r0, 800f114 <_printf_float+0xf0>
 800f102:	464b      	mov	r3, r9
 800f104:	2b00      	cmp	r3, #0
 800f106:	bfbc      	itt	lt
 800f108:	232d      	movlt	r3, #45	; 0x2d
 800f10a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f10e:	487f      	ldr	r0, [pc, #508]	; (800f30c <_printf_float+0x2e8>)
 800f110:	4b7f      	ldr	r3, [pc, #508]	; (800f310 <_printf_float+0x2ec>)
 800f112:	e7d1      	b.n	800f0b8 <_printf_float+0x94>
 800f114:	6863      	ldr	r3, [r4, #4]
 800f116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f11a:	9206      	str	r2, [sp, #24]
 800f11c:	1c5a      	adds	r2, r3, #1
 800f11e:	d13f      	bne.n	800f1a0 <_printf_float+0x17c>
 800f120:	2306      	movs	r3, #6
 800f122:	6063      	str	r3, [r4, #4]
 800f124:	9b05      	ldr	r3, [sp, #20]
 800f126:	6861      	ldr	r1, [r4, #4]
 800f128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f12c:	2300      	movs	r3, #0
 800f12e:	9303      	str	r3, [sp, #12]
 800f130:	ab0a      	add	r3, sp, #40	; 0x28
 800f132:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f136:	ab09      	add	r3, sp, #36	; 0x24
 800f138:	ec49 8b10 	vmov	d0, r8, r9
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	6022      	str	r2, [r4, #0]
 800f140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f144:	4628      	mov	r0, r5
 800f146:	f7ff fecd 	bl	800eee4 <__cvt>
 800f14a:	9b06      	ldr	r3, [sp, #24]
 800f14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f14e:	2b47      	cmp	r3, #71	; 0x47
 800f150:	4680      	mov	r8, r0
 800f152:	d108      	bne.n	800f166 <_printf_float+0x142>
 800f154:	1cc8      	adds	r0, r1, #3
 800f156:	db02      	blt.n	800f15e <_printf_float+0x13a>
 800f158:	6863      	ldr	r3, [r4, #4]
 800f15a:	4299      	cmp	r1, r3
 800f15c:	dd41      	ble.n	800f1e2 <_printf_float+0x1be>
 800f15e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f162:	fa5f fb8b 	uxtb.w	fp, fp
 800f166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f16a:	d820      	bhi.n	800f1ae <_printf_float+0x18a>
 800f16c:	3901      	subs	r1, #1
 800f16e:	465a      	mov	r2, fp
 800f170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f174:	9109      	str	r1, [sp, #36]	; 0x24
 800f176:	f7ff ff17 	bl	800efa8 <__exponent>
 800f17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f17c:	1813      	adds	r3, r2, r0
 800f17e:	2a01      	cmp	r2, #1
 800f180:	4681      	mov	r9, r0
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	dc02      	bgt.n	800f18c <_printf_float+0x168>
 800f186:	6822      	ldr	r2, [r4, #0]
 800f188:	07d2      	lsls	r2, r2, #31
 800f18a:	d501      	bpl.n	800f190 <_printf_float+0x16c>
 800f18c:	3301      	adds	r3, #1
 800f18e:	6123      	str	r3, [r4, #16]
 800f190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f194:	2b00      	cmp	r3, #0
 800f196:	d09c      	beq.n	800f0d2 <_printf_float+0xae>
 800f198:	232d      	movs	r3, #45	; 0x2d
 800f19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f19e:	e798      	b.n	800f0d2 <_printf_float+0xae>
 800f1a0:	9a06      	ldr	r2, [sp, #24]
 800f1a2:	2a47      	cmp	r2, #71	; 0x47
 800f1a4:	d1be      	bne.n	800f124 <_printf_float+0x100>
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1bc      	bne.n	800f124 <_printf_float+0x100>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e7b9      	b.n	800f122 <_printf_float+0xfe>
 800f1ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f1b2:	d118      	bne.n	800f1e6 <_printf_float+0x1c2>
 800f1b4:	2900      	cmp	r1, #0
 800f1b6:	6863      	ldr	r3, [r4, #4]
 800f1b8:	dd0b      	ble.n	800f1d2 <_printf_float+0x1ae>
 800f1ba:	6121      	str	r1, [r4, #16]
 800f1bc:	b913      	cbnz	r3, 800f1c4 <_printf_float+0x1a0>
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	07d0      	lsls	r0, r2, #31
 800f1c2:	d502      	bpl.n	800f1ca <_printf_float+0x1a6>
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	440b      	add	r3, r1
 800f1c8:	6123      	str	r3, [r4, #16]
 800f1ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800f1cc:	f04f 0900 	mov.w	r9, #0
 800f1d0:	e7de      	b.n	800f190 <_printf_float+0x16c>
 800f1d2:	b913      	cbnz	r3, 800f1da <_printf_float+0x1b6>
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	07d2      	lsls	r2, r2, #31
 800f1d8:	d501      	bpl.n	800f1de <_printf_float+0x1ba>
 800f1da:	3302      	adds	r3, #2
 800f1dc:	e7f4      	b.n	800f1c8 <_printf_float+0x1a4>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e7f2      	b.n	800f1c8 <_printf_float+0x1a4>
 800f1e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	db05      	blt.n	800f1f8 <_printf_float+0x1d4>
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	6121      	str	r1, [r4, #16]
 800f1f0:	07d8      	lsls	r0, r3, #31
 800f1f2:	d5ea      	bpl.n	800f1ca <_printf_float+0x1a6>
 800f1f4:	1c4b      	adds	r3, r1, #1
 800f1f6:	e7e7      	b.n	800f1c8 <_printf_float+0x1a4>
 800f1f8:	2900      	cmp	r1, #0
 800f1fa:	bfd4      	ite	le
 800f1fc:	f1c1 0202 	rsble	r2, r1, #2
 800f200:	2201      	movgt	r2, #1
 800f202:	4413      	add	r3, r2
 800f204:	e7e0      	b.n	800f1c8 <_printf_float+0x1a4>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	055a      	lsls	r2, r3, #21
 800f20a:	d407      	bmi.n	800f21c <_printf_float+0x1f8>
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	4642      	mov	r2, r8
 800f210:	4631      	mov	r1, r6
 800f212:	4628      	mov	r0, r5
 800f214:	47b8      	blx	r7
 800f216:	3001      	adds	r0, #1
 800f218:	d12c      	bne.n	800f274 <_printf_float+0x250>
 800f21a:	e764      	b.n	800f0e6 <_printf_float+0xc2>
 800f21c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f220:	f240 80e0 	bls.w	800f3e4 <_printf_float+0x3c0>
 800f224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f228:	2200      	movs	r2, #0
 800f22a:	2300      	movs	r3, #0
 800f22c:	f7f1 fc74 	bl	8000b18 <__aeabi_dcmpeq>
 800f230:	2800      	cmp	r0, #0
 800f232:	d034      	beq.n	800f29e <_printf_float+0x27a>
 800f234:	4a37      	ldr	r2, [pc, #220]	; (800f314 <_printf_float+0x2f0>)
 800f236:	2301      	movs	r3, #1
 800f238:	4631      	mov	r1, r6
 800f23a:	4628      	mov	r0, r5
 800f23c:	47b8      	blx	r7
 800f23e:	3001      	adds	r0, #1
 800f240:	f43f af51 	beq.w	800f0e6 <_printf_float+0xc2>
 800f244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f248:	429a      	cmp	r2, r3
 800f24a:	db02      	blt.n	800f252 <_printf_float+0x22e>
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	07d8      	lsls	r0, r3, #31
 800f250:	d510      	bpl.n	800f274 <_printf_float+0x250>
 800f252:	ee18 3a10 	vmov	r3, s16
 800f256:	4652      	mov	r2, sl
 800f258:	4631      	mov	r1, r6
 800f25a:	4628      	mov	r0, r5
 800f25c:	47b8      	blx	r7
 800f25e:	3001      	adds	r0, #1
 800f260:	f43f af41 	beq.w	800f0e6 <_printf_float+0xc2>
 800f264:	f04f 0800 	mov.w	r8, #0
 800f268:	f104 091a 	add.w	r9, r4, #26
 800f26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26e:	3b01      	subs	r3, #1
 800f270:	4543      	cmp	r3, r8
 800f272:	dc09      	bgt.n	800f288 <_printf_float+0x264>
 800f274:	6823      	ldr	r3, [r4, #0]
 800f276:	079b      	lsls	r3, r3, #30
 800f278:	f100 8105 	bmi.w	800f486 <_printf_float+0x462>
 800f27c:	68e0      	ldr	r0, [r4, #12]
 800f27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f280:	4298      	cmp	r0, r3
 800f282:	bfb8      	it	lt
 800f284:	4618      	movlt	r0, r3
 800f286:	e730      	b.n	800f0ea <_printf_float+0xc6>
 800f288:	2301      	movs	r3, #1
 800f28a:	464a      	mov	r2, r9
 800f28c:	4631      	mov	r1, r6
 800f28e:	4628      	mov	r0, r5
 800f290:	47b8      	blx	r7
 800f292:	3001      	adds	r0, #1
 800f294:	f43f af27 	beq.w	800f0e6 <_printf_float+0xc2>
 800f298:	f108 0801 	add.w	r8, r8, #1
 800f29c:	e7e6      	b.n	800f26c <_printf_float+0x248>
 800f29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	dc39      	bgt.n	800f318 <_printf_float+0x2f4>
 800f2a4:	4a1b      	ldr	r2, [pc, #108]	; (800f314 <_printf_float+0x2f0>)
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	4631      	mov	r1, r6
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	47b8      	blx	r7
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	f43f af19 	beq.w	800f0e6 <_printf_float+0xc2>
 800f2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	d102      	bne.n	800f2c2 <_printf_float+0x29e>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	07d9      	lsls	r1, r3, #31
 800f2c0:	d5d8      	bpl.n	800f274 <_printf_float+0x250>
 800f2c2:	ee18 3a10 	vmov	r3, s16
 800f2c6:	4652      	mov	r2, sl
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	47b8      	blx	r7
 800f2ce:	3001      	adds	r0, #1
 800f2d0:	f43f af09 	beq.w	800f0e6 <_printf_float+0xc2>
 800f2d4:	f04f 0900 	mov.w	r9, #0
 800f2d8:	f104 0a1a 	add.w	sl, r4, #26
 800f2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2de:	425b      	negs	r3, r3
 800f2e0:	454b      	cmp	r3, r9
 800f2e2:	dc01      	bgt.n	800f2e8 <_printf_float+0x2c4>
 800f2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e6:	e792      	b.n	800f20e <_printf_float+0x1ea>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	4631      	mov	r1, r6
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	47b8      	blx	r7
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	f43f aef7 	beq.w	800f0e6 <_printf_float+0xc2>
 800f2f8:	f109 0901 	add.w	r9, r9, #1
 800f2fc:	e7ee      	b.n	800f2dc <_printf_float+0x2b8>
 800f2fe:	bf00      	nop
 800f300:	7fefffff 	.word	0x7fefffff
 800f304:	080150e8 	.word	0x080150e8
 800f308:	080150ec 	.word	0x080150ec
 800f30c:	080150f4 	.word	0x080150f4
 800f310:	080150f0 	.word	0x080150f0
 800f314:	080150f8 	.word	0x080150f8
 800f318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f31a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f31c:	429a      	cmp	r2, r3
 800f31e:	bfa8      	it	ge
 800f320:	461a      	movge	r2, r3
 800f322:	2a00      	cmp	r2, #0
 800f324:	4691      	mov	r9, r2
 800f326:	dc37      	bgt.n	800f398 <_printf_float+0x374>
 800f328:	f04f 0b00 	mov.w	fp, #0
 800f32c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f330:	f104 021a 	add.w	r2, r4, #26
 800f334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f336:	9305      	str	r3, [sp, #20]
 800f338:	eba3 0309 	sub.w	r3, r3, r9
 800f33c:	455b      	cmp	r3, fp
 800f33e:	dc33      	bgt.n	800f3a8 <_printf_float+0x384>
 800f340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f344:	429a      	cmp	r2, r3
 800f346:	db3b      	blt.n	800f3c0 <_printf_float+0x39c>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	07da      	lsls	r2, r3, #31
 800f34c:	d438      	bmi.n	800f3c0 <_printf_float+0x39c>
 800f34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f350:	9a05      	ldr	r2, [sp, #20]
 800f352:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f354:	1a9a      	subs	r2, r3, r2
 800f356:	eba3 0901 	sub.w	r9, r3, r1
 800f35a:	4591      	cmp	r9, r2
 800f35c:	bfa8      	it	ge
 800f35e:	4691      	movge	r9, r2
 800f360:	f1b9 0f00 	cmp.w	r9, #0
 800f364:	dc35      	bgt.n	800f3d2 <_printf_float+0x3ae>
 800f366:	f04f 0800 	mov.w	r8, #0
 800f36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f36e:	f104 0a1a 	add.w	sl, r4, #26
 800f372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f376:	1a9b      	subs	r3, r3, r2
 800f378:	eba3 0309 	sub.w	r3, r3, r9
 800f37c:	4543      	cmp	r3, r8
 800f37e:	f77f af79 	ble.w	800f274 <_printf_float+0x250>
 800f382:	2301      	movs	r3, #1
 800f384:	4652      	mov	r2, sl
 800f386:	4631      	mov	r1, r6
 800f388:	4628      	mov	r0, r5
 800f38a:	47b8      	blx	r7
 800f38c:	3001      	adds	r0, #1
 800f38e:	f43f aeaa 	beq.w	800f0e6 <_printf_float+0xc2>
 800f392:	f108 0801 	add.w	r8, r8, #1
 800f396:	e7ec      	b.n	800f372 <_printf_float+0x34e>
 800f398:	4613      	mov	r3, r2
 800f39a:	4631      	mov	r1, r6
 800f39c:	4642      	mov	r2, r8
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	d1c0      	bne.n	800f328 <_printf_float+0x304>
 800f3a6:	e69e      	b.n	800f0e6 <_printf_float+0xc2>
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	9205      	str	r2, [sp, #20]
 800f3b0:	47b8      	blx	r7
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	f43f ae97 	beq.w	800f0e6 <_printf_float+0xc2>
 800f3b8:	9a05      	ldr	r2, [sp, #20]
 800f3ba:	f10b 0b01 	add.w	fp, fp, #1
 800f3be:	e7b9      	b.n	800f334 <_printf_float+0x310>
 800f3c0:	ee18 3a10 	vmov	r3, s16
 800f3c4:	4652      	mov	r2, sl
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	47b8      	blx	r7
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d1be      	bne.n	800f34e <_printf_float+0x32a>
 800f3d0:	e689      	b.n	800f0e6 <_printf_float+0xc2>
 800f3d2:	9a05      	ldr	r2, [sp, #20]
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	4442      	add	r2, r8
 800f3d8:	4631      	mov	r1, r6
 800f3da:	4628      	mov	r0, r5
 800f3dc:	47b8      	blx	r7
 800f3de:	3001      	adds	r0, #1
 800f3e0:	d1c1      	bne.n	800f366 <_printf_float+0x342>
 800f3e2:	e680      	b.n	800f0e6 <_printf_float+0xc2>
 800f3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3e6:	2a01      	cmp	r2, #1
 800f3e8:	dc01      	bgt.n	800f3ee <_printf_float+0x3ca>
 800f3ea:	07db      	lsls	r3, r3, #31
 800f3ec:	d538      	bpl.n	800f460 <_printf_float+0x43c>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4642      	mov	r2, r8
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	47b8      	blx	r7
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	f43f ae74 	beq.w	800f0e6 <_printf_float+0xc2>
 800f3fe:	ee18 3a10 	vmov	r3, s16
 800f402:	4652      	mov	r2, sl
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f ae6b 	beq.w	800f0e6 <_printf_float+0xc2>
 800f410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f414:	2200      	movs	r2, #0
 800f416:	2300      	movs	r3, #0
 800f418:	f7f1 fb7e 	bl	8000b18 <__aeabi_dcmpeq>
 800f41c:	b9d8      	cbnz	r0, 800f456 <_printf_float+0x432>
 800f41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f420:	f108 0201 	add.w	r2, r8, #1
 800f424:	3b01      	subs	r3, #1
 800f426:	4631      	mov	r1, r6
 800f428:	4628      	mov	r0, r5
 800f42a:	47b8      	blx	r7
 800f42c:	3001      	adds	r0, #1
 800f42e:	d10e      	bne.n	800f44e <_printf_float+0x42a>
 800f430:	e659      	b.n	800f0e6 <_printf_float+0xc2>
 800f432:	2301      	movs	r3, #1
 800f434:	4652      	mov	r2, sl
 800f436:	4631      	mov	r1, r6
 800f438:	4628      	mov	r0, r5
 800f43a:	47b8      	blx	r7
 800f43c:	3001      	adds	r0, #1
 800f43e:	f43f ae52 	beq.w	800f0e6 <_printf_float+0xc2>
 800f442:	f108 0801 	add.w	r8, r8, #1
 800f446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f448:	3b01      	subs	r3, #1
 800f44a:	4543      	cmp	r3, r8
 800f44c:	dcf1      	bgt.n	800f432 <_printf_float+0x40e>
 800f44e:	464b      	mov	r3, r9
 800f450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f454:	e6dc      	b.n	800f210 <_printf_float+0x1ec>
 800f456:	f04f 0800 	mov.w	r8, #0
 800f45a:	f104 0a1a 	add.w	sl, r4, #26
 800f45e:	e7f2      	b.n	800f446 <_printf_float+0x422>
 800f460:	2301      	movs	r3, #1
 800f462:	4642      	mov	r2, r8
 800f464:	e7df      	b.n	800f426 <_printf_float+0x402>
 800f466:	2301      	movs	r3, #1
 800f468:	464a      	mov	r2, r9
 800f46a:	4631      	mov	r1, r6
 800f46c:	4628      	mov	r0, r5
 800f46e:	47b8      	blx	r7
 800f470:	3001      	adds	r0, #1
 800f472:	f43f ae38 	beq.w	800f0e6 <_printf_float+0xc2>
 800f476:	f108 0801 	add.w	r8, r8, #1
 800f47a:	68e3      	ldr	r3, [r4, #12]
 800f47c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f47e:	1a5b      	subs	r3, r3, r1
 800f480:	4543      	cmp	r3, r8
 800f482:	dcf0      	bgt.n	800f466 <_printf_float+0x442>
 800f484:	e6fa      	b.n	800f27c <_printf_float+0x258>
 800f486:	f04f 0800 	mov.w	r8, #0
 800f48a:	f104 0919 	add.w	r9, r4, #25
 800f48e:	e7f4      	b.n	800f47a <_printf_float+0x456>

0800f490 <_printf_common>:
 800f490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f494:	4616      	mov	r6, r2
 800f496:	4699      	mov	r9, r3
 800f498:	688a      	ldr	r2, [r1, #8]
 800f49a:	690b      	ldr	r3, [r1, #16]
 800f49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	bfb8      	it	lt
 800f4a4:	4613      	movlt	r3, r2
 800f4a6:	6033      	str	r3, [r6, #0]
 800f4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	b10a      	cbz	r2, 800f4b6 <_printf_common+0x26>
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	6033      	str	r3, [r6, #0]
 800f4b6:	6823      	ldr	r3, [r4, #0]
 800f4b8:	0699      	lsls	r1, r3, #26
 800f4ba:	bf42      	ittt	mi
 800f4bc:	6833      	ldrmi	r3, [r6, #0]
 800f4be:	3302      	addmi	r3, #2
 800f4c0:	6033      	strmi	r3, [r6, #0]
 800f4c2:	6825      	ldr	r5, [r4, #0]
 800f4c4:	f015 0506 	ands.w	r5, r5, #6
 800f4c8:	d106      	bne.n	800f4d8 <_printf_common+0x48>
 800f4ca:	f104 0a19 	add.w	sl, r4, #25
 800f4ce:	68e3      	ldr	r3, [r4, #12]
 800f4d0:	6832      	ldr	r2, [r6, #0]
 800f4d2:	1a9b      	subs	r3, r3, r2
 800f4d4:	42ab      	cmp	r3, r5
 800f4d6:	dc26      	bgt.n	800f526 <_printf_common+0x96>
 800f4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f4dc:	1e13      	subs	r3, r2, #0
 800f4de:	6822      	ldr	r2, [r4, #0]
 800f4e0:	bf18      	it	ne
 800f4e2:	2301      	movne	r3, #1
 800f4e4:	0692      	lsls	r2, r2, #26
 800f4e6:	d42b      	bmi.n	800f540 <_printf_common+0xb0>
 800f4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	47c0      	blx	r8
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	d01e      	beq.n	800f534 <_printf_common+0xa4>
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	68e5      	ldr	r5, [r4, #12]
 800f4fa:	6832      	ldr	r2, [r6, #0]
 800f4fc:	f003 0306 	and.w	r3, r3, #6
 800f500:	2b04      	cmp	r3, #4
 800f502:	bf08      	it	eq
 800f504:	1aad      	subeq	r5, r5, r2
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	6922      	ldr	r2, [r4, #16]
 800f50a:	bf0c      	ite	eq
 800f50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f510:	2500      	movne	r5, #0
 800f512:	4293      	cmp	r3, r2
 800f514:	bfc4      	itt	gt
 800f516:	1a9b      	subgt	r3, r3, r2
 800f518:	18ed      	addgt	r5, r5, r3
 800f51a:	2600      	movs	r6, #0
 800f51c:	341a      	adds	r4, #26
 800f51e:	42b5      	cmp	r5, r6
 800f520:	d11a      	bne.n	800f558 <_printf_common+0xc8>
 800f522:	2000      	movs	r0, #0
 800f524:	e008      	b.n	800f538 <_printf_common+0xa8>
 800f526:	2301      	movs	r3, #1
 800f528:	4652      	mov	r2, sl
 800f52a:	4649      	mov	r1, r9
 800f52c:	4638      	mov	r0, r7
 800f52e:	47c0      	blx	r8
 800f530:	3001      	adds	r0, #1
 800f532:	d103      	bne.n	800f53c <_printf_common+0xac>
 800f534:	f04f 30ff 	mov.w	r0, #4294967295
 800f538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f53c:	3501      	adds	r5, #1
 800f53e:	e7c6      	b.n	800f4ce <_printf_common+0x3e>
 800f540:	18e1      	adds	r1, r4, r3
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	2030      	movs	r0, #48	; 0x30
 800f546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f54a:	4422      	add	r2, r4
 800f54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f554:	3302      	adds	r3, #2
 800f556:	e7c7      	b.n	800f4e8 <_printf_common+0x58>
 800f558:	2301      	movs	r3, #1
 800f55a:	4622      	mov	r2, r4
 800f55c:	4649      	mov	r1, r9
 800f55e:	4638      	mov	r0, r7
 800f560:	47c0      	blx	r8
 800f562:	3001      	adds	r0, #1
 800f564:	d0e6      	beq.n	800f534 <_printf_common+0xa4>
 800f566:	3601      	adds	r6, #1
 800f568:	e7d9      	b.n	800f51e <_printf_common+0x8e>
	...

0800f56c <_printf_i>:
 800f56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f570:	7e0f      	ldrb	r7, [r1, #24]
 800f572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f574:	2f78      	cmp	r7, #120	; 0x78
 800f576:	4691      	mov	r9, r2
 800f578:	4680      	mov	r8, r0
 800f57a:	460c      	mov	r4, r1
 800f57c:	469a      	mov	sl, r3
 800f57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f582:	d807      	bhi.n	800f594 <_printf_i+0x28>
 800f584:	2f62      	cmp	r7, #98	; 0x62
 800f586:	d80a      	bhi.n	800f59e <_printf_i+0x32>
 800f588:	2f00      	cmp	r7, #0
 800f58a:	f000 80d8 	beq.w	800f73e <_printf_i+0x1d2>
 800f58e:	2f58      	cmp	r7, #88	; 0x58
 800f590:	f000 80a3 	beq.w	800f6da <_printf_i+0x16e>
 800f594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f59c:	e03a      	b.n	800f614 <_printf_i+0xa8>
 800f59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5a2:	2b15      	cmp	r3, #21
 800f5a4:	d8f6      	bhi.n	800f594 <_printf_i+0x28>
 800f5a6:	a101      	add	r1, pc, #4	; (adr r1, 800f5ac <_printf_i+0x40>)
 800f5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5ac:	0800f605 	.word	0x0800f605
 800f5b0:	0800f619 	.word	0x0800f619
 800f5b4:	0800f595 	.word	0x0800f595
 800f5b8:	0800f595 	.word	0x0800f595
 800f5bc:	0800f595 	.word	0x0800f595
 800f5c0:	0800f595 	.word	0x0800f595
 800f5c4:	0800f619 	.word	0x0800f619
 800f5c8:	0800f595 	.word	0x0800f595
 800f5cc:	0800f595 	.word	0x0800f595
 800f5d0:	0800f595 	.word	0x0800f595
 800f5d4:	0800f595 	.word	0x0800f595
 800f5d8:	0800f725 	.word	0x0800f725
 800f5dc:	0800f649 	.word	0x0800f649
 800f5e0:	0800f707 	.word	0x0800f707
 800f5e4:	0800f595 	.word	0x0800f595
 800f5e8:	0800f595 	.word	0x0800f595
 800f5ec:	0800f747 	.word	0x0800f747
 800f5f0:	0800f595 	.word	0x0800f595
 800f5f4:	0800f649 	.word	0x0800f649
 800f5f8:	0800f595 	.word	0x0800f595
 800f5fc:	0800f595 	.word	0x0800f595
 800f600:	0800f70f 	.word	0x0800f70f
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	1d1a      	adds	r2, r3, #4
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	602a      	str	r2, [r5, #0]
 800f60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f614:	2301      	movs	r3, #1
 800f616:	e0a3      	b.n	800f760 <_printf_i+0x1f4>
 800f618:	6820      	ldr	r0, [r4, #0]
 800f61a:	6829      	ldr	r1, [r5, #0]
 800f61c:	0606      	lsls	r6, r0, #24
 800f61e:	f101 0304 	add.w	r3, r1, #4
 800f622:	d50a      	bpl.n	800f63a <_printf_i+0xce>
 800f624:	680e      	ldr	r6, [r1, #0]
 800f626:	602b      	str	r3, [r5, #0]
 800f628:	2e00      	cmp	r6, #0
 800f62a:	da03      	bge.n	800f634 <_printf_i+0xc8>
 800f62c:	232d      	movs	r3, #45	; 0x2d
 800f62e:	4276      	negs	r6, r6
 800f630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f634:	485e      	ldr	r0, [pc, #376]	; (800f7b0 <_printf_i+0x244>)
 800f636:	230a      	movs	r3, #10
 800f638:	e019      	b.n	800f66e <_printf_i+0x102>
 800f63a:	680e      	ldr	r6, [r1, #0]
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f642:	bf18      	it	ne
 800f644:	b236      	sxthne	r6, r6
 800f646:	e7ef      	b.n	800f628 <_printf_i+0xbc>
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	6820      	ldr	r0, [r4, #0]
 800f64c:	1d19      	adds	r1, r3, #4
 800f64e:	6029      	str	r1, [r5, #0]
 800f650:	0601      	lsls	r1, r0, #24
 800f652:	d501      	bpl.n	800f658 <_printf_i+0xec>
 800f654:	681e      	ldr	r6, [r3, #0]
 800f656:	e002      	b.n	800f65e <_printf_i+0xf2>
 800f658:	0646      	lsls	r6, r0, #25
 800f65a:	d5fb      	bpl.n	800f654 <_printf_i+0xe8>
 800f65c:	881e      	ldrh	r6, [r3, #0]
 800f65e:	4854      	ldr	r0, [pc, #336]	; (800f7b0 <_printf_i+0x244>)
 800f660:	2f6f      	cmp	r7, #111	; 0x6f
 800f662:	bf0c      	ite	eq
 800f664:	2308      	moveq	r3, #8
 800f666:	230a      	movne	r3, #10
 800f668:	2100      	movs	r1, #0
 800f66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f66e:	6865      	ldr	r5, [r4, #4]
 800f670:	60a5      	str	r5, [r4, #8]
 800f672:	2d00      	cmp	r5, #0
 800f674:	bfa2      	ittt	ge
 800f676:	6821      	ldrge	r1, [r4, #0]
 800f678:	f021 0104 	bicge.w	r1, r1, #4
 800f67c:	6021      	strge	r1, [r4, #0]
 800f67e:	b90e      	cbnz	r6, 800f684 <_printf_i+0x118>
 800f680:	2d00      	cmp	r5, #0
 800f682:	d04d      	beq.n	800f720 <_printf_i+0x1b4>
 800f684:	4615      	mov	r5, r2
 800f686:	fbb6 f1f3 	udiv	r1, r6, r3
 800f68a:	fb03 6711 	mls	r7, r3, r1, r6
 800f68e:	5dc7      	ldrb	r7, [r0, r7]
 800f690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f694:	4637      	mov	r7, r6
 800f696:	42bb      	cmp	r3, r7
 800f698:	460e      	mov	r6, r1
 800f69a:	d9f4      	bls.n	800f686 <_printf_i+0x11a>
 800f69c:	2b08      	cmp	r3, #8
 800f69e:	d10b      	bne.n	800f6b8 <_printf_i+0x14c>
 800f6a0:	6823      	ldr	r3, [r4, #0]
 800f6a2:	07de      	lsls	r6, r3, #31
 800f6a4:	d508      	bpl.n	800f6b8 <_printf_i+0x14c>
 800f6a6:	6923      	ldr	r3, [r4, #16]
 800f6a8:	6861      	ldr	r1, [r4, #4]
 800f6aa:	4299      	cmp	r1, r3
 800f6ac:	bfde      	ittt	le
 800f6ae:	2330      	movle	r3, #48	; 0x30
 800f6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f6b8:	1b52      	subs	r2, r2, r5
 800f6ba:	6122      	str	r2, [r4, #16]
 800f6bc:	f8cd a000 	str.w	sl, [sp]
 800f6c0:	464b      	mov	r3, r9
 800f6c2:	aa03      	add	r2, sp, #12
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	f7ff fee2 	bl	800f490 <_printf_common>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	d14c      	bne.n	800f76a <_printf_i+0x1fe>
 800f6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d4:	b004      	add	sp, #16
 800f6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6da:	4835      	ldr	r0, [pc, #212]	; (800f7b0 <_printf_i+0x244>)
 800f6dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f6e0:	6829      	ldr	r1, [r5, #0]
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f6e8:	6029      	str	r1, [r5, #0]
 800f6ea:	061d      	lsls	r5, r3, #24
 800f6ec:	d514      	bpl.n	800f718 <_printf_i+0x1ac>
 800f6ee:	07df      	lsls	r7, r3, #31
 800f6f0:	bf44      	itt	mi
 800f6f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f6f6:	6023      	strmi	r3, [r4, #0]
 800f6f8:	b91e      	cbnz	r6, 800f702 <_printf_i+0x196>
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	f023 0320 	bic.w	r3, r3, #32
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	2310      	movs	r3, #16
 800f704:	e7b0      	b.n	800f668 <_printf_i+0xfc>
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	f043 0320 	orr.w	r3, r3, #32
 800f70c:	6023      	str	r3, [r4, #0]
 800f70e:	2378      	movs	r3, #120	; 0x78
 800f710:	4828      	ldr	r0, [pc, #160]	; (800f7b4 <_printf_i+0x248>)
 800f712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f716:	e7e3      	b.n	800f6e0 <_printf_i+0x174>
 800f718:	0659      	lsls	r1, r3, #25
 800f71a:	bf48      	it	mi
 800f71c:	b2b6      	uxthmi	r6, r6
 800f71e:	e7e6      	b.n	800f6ee <_printf_i+0x182>
 800f720:	4615      	mov	r5, r2
 800f722:	e7bb      	b.n	800f69c <_printf_i+0x130>
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	6826      	ldr	r6, [r4, #0]
 800f728:	6961      	ldr	r1, [r4, #20]
 800f72a:	1d18      	adds	r0, r3, #4
 800f72c:	6028      	str	r0, [r5, #0]
 800f72e:	0635      	lsls	r5, r6, #24
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	d501      	bpl.n	800f738 <_printf_i+0x1cc>
 800f734:	6019      	str	r1, [r3, #0]
 800f736:	e002      	b.n	800f73e <_printf_i+0x1d2>
 800f738:	0670      	lsls	r0, r6, #25
 800f73a:	d5fb      	bpl.n	800f734 <_printf_i+0x1c8>
 800f73c:	8019      	strh	r1, [r3, #0]
 800f73e:	2300      	movs	r3, #0
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	4615      	mov	r5, r2
 800f744:	e7ba      	b.n	800f6bc <_printf_i+0x150>
 800f746:	682b      	ldr	r3, [r5, #0]
 800f748:	1d1a      	adds	r2, r3, #4
 800f74a:	602a      	str	r2, [r5, #0]
 800f74c:	681d      	ldr	r5, [r3, #0]
 800f74e:	6862      	ldr	r2, [r4, #4]
 800f750:	2100      	movs	r1, #0
 800f752:	4628      	mov	r0, r5
 800f754:	f7f0 fd6c 	bl	8000230 <memchr>
 800f758:	b108      	cbz	r0, 800f75e <_printf_i+0x1f2>
 800f75a:	1b40      	subs	r0, r0, r5
 800f75c:	6060      	str	r0, [r4, #4]
 800f75e:	6863      	ldr	r3, [r4, #4]
 800f760:	6123      	str	r3, [r4, #16]
 800f762:	2300      	movs	r3, #0
 800f764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f768:	e7a8      	b.n	800f6bc <_printf_i+0x150>
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	462a      	mov	r2, r5
 800f76e:	4649      	mov	r1, r9
 800f770:	4640      	mov	r0, r8
 800f772:	47d0      	blx	sl
 800f774:	3001      	adds	r0, #1
 800f776:	d0ab      	beq.n	800f6d0 <_printf_i+0x164>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	079b      	lsls	r3, r3, #30
 800f77c:	d413      	bmi.n	800f7a6 <_printf_i+0x23a>
 800f77e:	68e0      	ldr	r0, [r4, #12]
 800f780:	9b03      	ldr	r3, [sp, #12]
 800f782:	4298      	cmp	r0, r3
 800f784:	bfb8      	it	lt
 800f786:	4618      	movlt	r0, r3
 800f788:	e7a4      	b.n	800f6d4 <_printf_i+0x168>
 800f78a:	2301      	movs	r3, #1
 800f78c:	4632      	mov	r2, r6
 800f78e:	4649      	mov	r1, r9
 800f790:	4640      	mov	r0, r8
 800f792:	47d0      	blx	sl
 800f794:	3001      	adds	r0, #1
 800f796:	d09b      	beq.n	800f6d0 <_printf_i+0x164>
 800f798:	3501      	adds	r5, #1
 800f79a:	68e3      	ldr	r3, [r4, #12]
 800f79c:	9903      	ldr	r1, [sp, #12]
 800f79e:	1a5b      	subs	r3, r3, r1
 800f7a0:	42ab      	cmp	r3, r5
 800f7a2:	dcf2      	bgt.n	800f78a <_printf_i+0x21e>
 800f7a4:	e7eb      	b.n	800f77e <_printf_i+0x212>
 800f7a6:	2500      	movs	r5, #0
 800f7a8:	f104 0619 	add.w	r6, r4, #25
 800f7ac:	e7f5      	b.n	800f79a <_printf_i+0x22e>
 800f7ae:	bf00      	nop
 800f7b0:	080150fa 	.word	0x080150fa
 800f7b4:	0801510b 	.word	0x0801510b

0800f7b8 <_scanf_float>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	b087      	sub	sp, #28
 800f7be:	4617      	mov	r7, r2
 800f7c0:	9303      	str	r3, [sp, #12]
 800f7c2:	688b      	ldr	r3, [r1, #8]
 800f7c4:	1e5a      	subs	r2, r3, #1
 800f7c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f7ca:	bf83      	ittte	hi
 800f7cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f7d0:	195b      	addhi	r3, r3, r5
 800f7d2:	9302      	strhi	r3, [sp, #8]
 800f7d4:	2300      	movls	r3, #0
 800f7d6:	bf86      	itte	hi
 800f7d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f7dc:	608b      	strhi	r3, [r1, #8]
 800f7de:	9302      	strls	r3, [sp, #8]
 800f7e0:	680b      	ldr	r3, [r1, #0]
 800f7e2:	468b      	mov	fp, r1
 800f7e4:	2500      	movs	r5, #0
 800f7e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f7ea:	f84b 3b1c 	str.w	r3, [fp], #28
 800f7ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	465e      	mov	r6, fp
 800f7f8:	46aa      	mov	sl, r5
 800f7fa:	46a9      	mov	r9, r5
 800f7fc:	9501      	str	r5, [sp, #4]
 800f7fe:	68a2      	ldr	r2, [r4, #8]
 800f800:	b152      	cbz	r2, 800f818 <_scanf_float+0x60>
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	2b4e      	cmp	r3, #78	; 0x4e
 800f808:	d864      	bhi.n	800f8d4 <_scanf_float+0x11c>
 800f80a:	2b40      	cmp	r3, #64	; 0x40
 800f80c:	d83c      	bhi.n	800f888 <_scanf_float+0xd0>
 800f80e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f812:	b2c8      	uxtb	r0, r1
 800f814:	280e      	cmp	r0, #14
 800f816:	d93a      	bls.n	800f88e <_scanf_float+0xd6>
 800f818:	f1b9 0f00 	cmp.w	r9, #0
 800f81c:	d003      	beq.n	800f826 <_scanf_float+0x6e>
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f824:	6023      	str	r3, [r4, #0]
 800f826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f82a:	f1ba 0f01 	cmp.w	sl, #1
 800f82e:	f200 8113 	bhi.w	800fa58 <_scanf_float+0x2a0>
 800f832:	455e      	cmp	r6, fp
 800f834:	f200 8105 	bhi.w	800fa42 <_scanf_float+0x28a>
 800f838:	2501      	movs	r5, #1
 800f83a:	4628      	mov	r0, r5
 800f83c:	b007      	add	sp, #28
 800f83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f842:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f846:	2a0d      	cmp	r2, #13
 800f848:	d8e6      	bhi.n	800f818 <_scanf_float+0x60>
 800f84a:	a101      	add	r1, pc, #4	; (adr r1, 800f850 <_scanf_float+0x98>)
 800f84c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f850:	0800f98f 	.word	0x0800f98f
 800f854:	0800f819 	.word	0x0800f819
 800f858:	0800f819 	.word	0x0800f819
 800f85c:	0800f819 	.word	0x0800f819
 800f860:	0800f9ef 	.word	0x0800f9ef
 800f864:	0800f9c7 	.word	0x0800f9c7
 800f868:	0800f819 	.word	0x0800f819
 800f86c:	0800f819 	.word	0x0800f819
 800f870:	0800f99d 	.word	0x0800f99d
 800f874:	0800f819 	.word	0x0800f819
 800f878:	0800f819 	.word	0x0800f819
 800f87c:	0800f819 	.word	0x0800f819
 800f880:	0800f819 	.word	0x0800f819
 800f884:	0800f955 	.word	0x0800f955
 800f888:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f88c:	e7db      	b.n	800f846 <_scanf_float+0x8e>
 800f88e:	290e      	cmp	r1, #14
 800f890:	d8c2      	bhi.n	800f818 <_scanf_float+0x60>
 800f892:	a001      	add	r0, pc, #4	; (adr r0, 800f898 <_scanf_float+0xe0>)
 800f894:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f898:	0800f947 	.word	0x0800f947
 800f89c:	0800f819 	.word	0x0800f819
 800f8a0:	0800f947 	.word	0x0800f947
 800f8a4:	0800f9db 	.word	0x0800f9db
 800f8a8:	0800f819 	.word	0x0800f819
 800f8ac:	0800f8f5 	.word	0x0800f8f5
 800f8b0:	0800f931 	.word	0x0800f931
 800f8b4:	0800f931 	.word	0x0800f931
 800f8b8:	0800f931 	.word	0x0800f931
 800f8bc:	0800f931 	.word	0x0800f931
 800f8c0:	0800f931 	.word	0x0800f931
 800f8c4:	0800f931 	.word	0x0800f931
 800f8c8:	0800f931 	.word	0x0800f931
 800f8cc:	0800f931 	.word	0x0800f931
 800f8d0:	0800f931 	.word	0x0800f931
 800f8d4:	2b6e      	cmp	r3, #110	; 0x6e
 800f8d6:	d809      	bhi.n	800f8ec <_scanf_float+0x134>
 800f8d8:	2b60      	cmp	r3, #96	; 0x60
 800f8da:	d8b2      	bhi.n	800f842 <_scanf_float+0x8a>
 800f8dc:	2b54      	cmp	r3, #84	; 0x54
 800f8de:	d077      	beq.n	800f9d0 <_scanf_float+0x218>
 800f8e0:	2b59      	cmp	r3, #89	; 0x59
 800f8e2:	d199      	bne.n	800f818 <_scanf_float+0x60>
 800f8e4:	2d07      	cmp	r5, #7
 800f8e6:	d197      	bne.n	800f818 <_scanf_float+0x60>
 800f8e8:	2508      	movs	r5, #8
 800f8ea:	e029      	b.n	800f940 <_scanf_float+0x188>
 800f8ec:	2b74      	cmp	r3, #116	; 0x74
 800f8ee:	d06f      	beq.n	800f9d0 <_scanf_float+0x218>
 800f8f0:	2b79      	cmp	r3, #121	; 0x79
 800f8f2:	e7f6      	b.n	800f8e2 <_scanf_float+0x12a>
 800f8f4:	6821      	ldr	r1, [r4, #0]
 800f8f6:	05c8      	lsls	r0, r1, #23
 800f8f8:	d51a      	bpl.n	800f930 <_scanf_float+0x178>
 800f8fa:	9b02      	ldr	r3, [sp, #8]
 800f8fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f900:	6021      	str	r1, [r4, #0]
 800f902:	f109 0901 	add.w	r9, r9, #1
 800f906:	b11b      	cbz	r3, 800f910 <_scanf_float+0x158>
 800f908:	3b01      	subs	r3, #1
 800f90a:	3201      	adds	r2, #1
 800f90c:	9302      	str	r3, [sp, #8]
 800f90e:	60a2      	str	r2, [r4, #8]
 800f910:	68a3      	ldr	r3, [r4, #8]
 800f912:	3b01      	subs	r3, #1
 800f914:	60a3      	str	r3, [r4, #8]
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	3301      	adds	r3, #1
 800f91a:	6123      	str	r3, [r4, #16]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	3b01      	subs	r3, #1
 800f920:	2b00      	cmp	r3, #0
 800f922:	607b      	str	r3, [r7, #4]
 800f924:	f340 8084 	ble.w	800fa30 <_scanf_float+0x278>
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	3301      	adds	r3, #1
 800f92c:	603b      	str	r3, [r7, #0]
 800f92e:	e766      	b.n	800f7fe <_scanf_float+0x46>
 800f930:	eb1a 0f05 	cmn.w	sl, r5
 800f934:	f47f af70 	bne.w	800f818 <_scanf_float+0x60>
 800f938:	6822      	ldr	r2, [r4, #0]
 800f93a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f93e:	6022      	str	r2, [r4, #0]
 800f940:	f806 3b01 	strb.w	r3, [r6], #1
 800f944:	e7e4      	b.n	800f910 <_scanf_float+0x158>
 800f946:	6822      	ldr	r2, [r4, #0]
 800f948:	0610      	lsls	r0, r2, #24
 800f94a:	f57f af65 	bpl.w	800f818 <_scanf_float+0x60>
 800f94e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f952:	e7f4      	b.n	800f93e <_scanf_float+0x186>
 800f954:	f1ba 0f00 	cmp.w	sl, #0
 800f958:	d10e      	bne.n	800f978 <_scanf_float+0x1c0>
 800f95a:	f1b9 0f00 	cmp.w	r9, #0
 800f95e:	d10e      	bne.n	800f97e <_scanf_float+0x1c6>
 800f960:	6822      	ldr	r2, [r4, #0]
 800f962:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f966:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f96a:	d108      	bne.n	800f97e <_scanf_float+0x1c6>
 800f96c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f970:	6022      	str	r2, [r4, #0]
 800f972:	f04f 0a01 	mov.w	sl, #1
 800f976:	e7e3      	b.n	800f940 <_scanf_float+0x188>
 800f978:	f1ba 0f02 	cmp.w	sl, #2
 800f97c:	d055      	beq.n	800fa2a <_scanf_float+0x272>
 800f97e:	2d01      	cmp	r5, #1
 800f980:	d002      	beq.n	800f988 <_scanf_float+0x1d0>
 800f982:	2d04      	cmp	r5, #4
 800f984:	f47f af48 	bne.w	800f818 <_scanf_float+0x60>
 800f988:	3501      	adds	r5, #1
 800f98a:	b2ed      	uxtb	r5, r5
 800f98c:	e7d8      	b.n	800f940 <_scanf_float+0x188>
 800f98e:	f1ba 0f01 	cmp.w	sl, #1
 800f992:	f47f af41 	bne.w	800f818 <_scanf_float+0x60>
 800f996:	f04f 0a02 	mov.w	sl, #2
 800f99a:	e7d1      	b.n	800f940 <_scanf_float+0x188>
 800f99c:	b97d      	cbnz	r5, 800f9be <_scanf_float+0x206>
 800f99e:	f1b9 0f00 	cmp.w	r9, #0
 800f9a2:	f47f af3c 	bne.w	800f81e <_scanf_float+0x66>
 800f9a6:	6822      	ldr	r2, [r4, #0]
 800f9a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f9ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f9b0:	f47f af39 	bne.w	800f826 <_scanf_float+0x6e>
 800f9b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f9b8:	6022      	str	r2, [r4, #0]
 800f9ba:	2501      	movs	r5, #1
 800f9bc:	e7c0      	b.n	800f940 <_scanf_float+0x188>
 800f9be:	2d03      	cmp	r5, #3
 800f9c0:	d0e2      	beq.n	800f988 <_scanf_float+0x1d0>
 800f9c2:	2d05      	cmp	r5, #5
 800f9c4:	e7de      	b.n	800f984 <_scanf_float+0x1cc>
 800f9c6:	2d02      	cmp	r5, #2
 800f9c8:	f47f af26 	bne.w	800f818 <_scanf_float+0x60>
 800f9cc:	2503      	movs	r5, #3
 800f9ce:	e7b7      	b.n	800f940 <_scanf_float+0x188>
 800f9d0:	2d06      	cmp	r5, #6
 800f9d2:	f47f af21 	bne.w	800f818 <_scanf_float+0x60>
 800f9d6:	2507      	movs	r5, #7
 800f9d8:	e7b2      	b.n	800f940 <_scanf_float+0x188>
 800f9da:	6822      	ldr	r2, [r4, #0]
 800f9dc:	0591      	lsls	r1, r2, #22
 800f9de:	f57f af1b 	bpl.w	800f818 <_scanf_float+0x60>
 800f9e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f9e6:	6022      	str	r2, [r4, #0]
 800f9e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f9ec:	e7a8      	b.n	800f940 <_scanf_float+0x188>
 800f9ee:	6822      	ldr	r2, [r4, #0]
 800f9f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f9f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f9f8:	d006      	beq.n	800fa08 <_scanf_float+0x250>
 800f9fa:	0550      	lsls	r0, r2, #21
 800f9fc:	f57f af0c 	bpl.w	800f818 <_scanf_float+0x60>
 800fa00:	f1b9 0f00 	cmp.w	r9, #0
 800fa04:	f43f af0f 	beq.w	800f826 <_scanf_float+0x6e>
 800fa08:	0591      	lsls	r1, r2, #22
 800fa0a:	bf58      	it	pl
 800fa0c:	9901      	ldrpl	r1, [sp, #4]
 800fa0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa12:	bf58      	it	pl
 800fa14:	eba9 0101 	subpl.w	r1, r9, r1
 800fa18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fa1c:	bf58      	it	pl
 800fa1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fa22:	6022      	str	r2, [r4, #0]
 800fa24:	f04f 0900 	mov.w	r9, #0
 800fa28:	e78a      	b.n	800f940 <_scanf_float+0x188>
 800fa2a:	f04f 0a03 	mov.w	sl, #3
 800fa2e:	e787      	b.n	800f940 <_scanf_float+0x188>
 800fa30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa34:	4639      	mov	r1, r7
 800fa36:	4640      	mov	r0, r8
 800fa38:	4798      	blx	r3
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	f43f aedf 	beq.w	800f7fe <_scanf_float+0x46>
 800fa40:	e6ea      	b.n	800f818 <_scanf_float+0x60>
 800fa42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa4a:	463a      	mov	r2, r7
 800fa4c:	4640      	mov	r0, r8
 800fa4e:	4798      	blx	r3
 800fa50:	6923      	ldr	r3, [r4, #16]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	6123      	str	r3, [r4, #16]
 800fa56:	e6ec      	b.n	800f832 <_scanf_float+0x7a>
 800fa58:	1e6b      	subs	r3, r5, #1
 800fa5a:	2b06      	cmp	r3, #6
 800fa5c:	d825      	bhi.n	800faaa <_scanf_float+0x2f2>
 800fa5e:	2d02      	cmp	r5, #2
 800fa60:	d836      	bhi.n	800fad0 <_scanf_float+0x318>
 800fa62:	455e      	cmp	r6, fp
 800fa64:	f67f aee8 	bls.w	800f838 <_scanf_float+0x80>
 800fa68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa70:	463a      	mov	r2, r7
 800fa72:	4640      	mov	r0, r8
 800fa74:	4798      	blx	r3
 800fa76:	6923      	ldr	r3, [r4, #16]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	6123      	str	r3, [r4, #16]
 800fa7c:	e7f1      	b.n	800fa62 <_scanf_float+0x2aa>
 800fa7e:	9802      	ldr	r0, [sp, #8]
 800fa80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fa88:	9002      	str	r0, [sp, #8]
 800fa8a:	463a      	mov	r2, r7
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	4798      	blx	r3
 800fa90:	6923      	ldr	r3, [r4, #16]
 800fa92:	3b01      	subs	r3, #1
 800fa94:	6123      	str	r3, [r4, #16]
 800fa96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa9a:	fa5f fa8a 	uxtb.w	sl, sl
 800fa9e:	f1ba 0f02 	cmp.w	sl, #2
 800faa2:	d1ec      	bne.n	800fa7e <_scanf_float+0x2c6>
 800faa4:	3d03      	subs	r5, #3
 800faa6:	b2ed      	uxtb	r5, r5
 800faa8:	1b76      	subs	r6, r6, r5
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	05da      	lsls	r2, r3, #23
 800faae:	d52f      	bpl.n	800fb10 <_scanf_float+0x358>
 800fab0:	055b      	lsls	r3, r3, #21
 800fab2:	d510      	bpl.n	800fad6 <_scanf_float+0x31e>
 800fab4:	455e      	cmp	r6, fp
 800fab6:	f67f aebf 	bls.w	800f838 <_scanf_float+0x80>
 800faba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fabe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fac2:	463a      	mov	r2, r7
 800fac4:	4640      	mov	r0, r8
 800fac6:	4798      	blx	r3
 800fac8:	6923      	ldr	r3, [r4, #16]
 800faca:	3b01      	subs	r3, #1
 800facc:	6123      	str	r3, [r4, #16]
 800face:	e7f1      	b.n	800fab4 <_scanf_float+0x2fc>
 800fad0:	46aa      	mov	sl, r5
 800fad2:	9602      	str	r6, [sp, #8]
 800fad4:	e7df      	b.n	800fa96 <_scanf_float+0x2de>
 800fad6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fada:	6923      	ldr	r3, [r4, #16]
 800fadc:	2965      	cmp	r1, #101	; 0x65
 800fade:	f103 33ff 	add.w	r3, r3, #4294967295
 800fae2:	f106 35ff 	add.w	r5, r6, #4294967295
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	d00c      	beq.n	800fb04 <_scanf_float+0x34c>
 800faea:	2945      	cmp	r1, #69	; 0x45
 800faec:	d00a      	beq.n	800fb04 <_scanf_float+0x34c>
 800faee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800faf2:	463a      	mov	r2, r7
 800faf4:	4640      	mov	r0, r8
 800faf6:	4798      	blx	r3
 800faf8:	6923      	ldr	r3, [r4, #16]
 800fafa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fafe:	3b01      	subs	r3, #1
 800fb00:	1eb5      	subs	r5, r6, #2
 800fb02:	6123      	str	r3, [r4, #16]
 800fb04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb08:	463a      	mov	r2, r7
 800fb0a:	4640      	mov	r0, r8
 800fb0c:	4798      	blx	r3
 800fb0e:	462e      	mov	r6, r5
 800fb10:	6825      	ldr	r5, [r4, #0]
 800fb12:	f015 0510 	ands.w	r5, r5, #16
 800fb16:	d159      	bne.n	800fbcc <_scanf_float+0x414>
 800fb18:	7035      	strb	r5, [r6, #0]
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb24:	d11b      	bne.n	800fb5e <_scanf_float+0x3a6>
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	454b      	cmp	r3, r9
 800fb2a:	eba3 0209 	sub.w	r2, r3, r9
 800fb2e:	d123      	bne.n	800fb78 <_scanf_float+0x3c0>
 800fb30:	2200      	movs	r2, #0
 800fb32:	4659      	mov	r1, fp
 800fb34:	4640      	mov	r0, r8
 800fb36:	f000 ff25 	bl	8010984 <_strtod_r>
 800fb3a:	6822      	ldr	r2, [r4, #0]
 800fb3c:	9b03      	ldr	r3, [sp, #12]
 800fb3e:	f012 0f02 	tst.w	r2, #2
 800fb42:	ec57 6b10 	vmov	r6, r7, d0
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	d021      	beq.n	800fb8e <_scanf_float+0x3d6>
 800fb4a:	9903      	ldr	r1, [sp, #12]
 800fb4c:	1d1a      	adds	r2, r3, #4
 800fb4e:	600a      	str	r2, [r1, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	e9c3 6700 	strd	r6, r7, [r3]
 800fb56:	68e3      	ldr	r3, [r4, #12]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	60e3      	str	r3, [r4, #12]
 800fb5c:	e66d      	b.n	800f83a <_scanf_float+0x82>
 800fb5e:	9b04      	ldr	r3, [sp, #16]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d0e5      	beq.n	800fb30 <_scanf_float+0x378>
 800fb64:	9905      	ldr	r1, [sp, #20]
 800fb66:	230a      	movs	r3, #10
 800fb68:	462a      	mov	r2, r5
 800fb6a:	3101      	adds	r1, #1
 800fb6c:	4640      	mov	r0, r8
 800fb6e:	f000 ff9d 	bl	8010aac <_strtol_r>
 800fb72:	9b04      	ldr	r3, [sp, #16]
 800fb74:	9e05      	ldr	r6, [sp, #20]
 800fb76:	1ac2      	subs	r2, r0, r3
 800fb78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fb7c:	429e      	cmp	r6, r3
 800fb7e:	bf28      	it	cs
 800fb80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fb84:	4912      	ldr	r1, [pc, #72]	; (800fbd0 <_scanf_float+0x418>)
 800fb86:	4630      	mov	r0, r6
 800fb88:	f000 f8ba 	bl	800fd00 <siprintf>
 800fb8c:	e7d0      	b.n	800fb30 <_scanf_float+0x378>
 800fb8e:	9903      	ldr	r1, [sp, #12]
 800fb90:	f012 0f04 	tst.w	r2, #4
 800fb94:	f103 0204 	add.w	r2, r3, #4
 800fb98:	600a      	str	r2, [r1, #0]
 800fb9a:	d1d9      	bne.n	800fb50 <_scanf_float+0x398>
 800fb9c:	f8d3 8000 	ldr.w	r8, [r3]
 800fba0:	ee10 2a10 	vmov	r2, s0
 800fba4:	ee10 0a10 	vmov	r0, s0
 800fba8:	463b      	mov	r3, r7
 800fbaa:	4639      	mov	r1, r7
 800fbac:	f7f0 ffe6 	bl	8000b7c <__aeabi_dcmpun>
 800fbb0:	b128      	cbz	r0, 800fbbe <_scanf_float+0x406>
 800fbb2:	4808      	ldr	r0, [pc, #32]	; (800fbd4 <_scanf_float+0x41c>)
 800fbb4:	f000 f89e 	bl	800fcf4 <nanf>
 800fbb8:	ed88 0a00 	vstr	s0, [r8]
 800fbbc:	e7cb      	b.n	800fb56 <_scanf_float+0x39e>
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	f7f1 f839 	bl	8000c38 <__aeabi_d2f>
 800fbc6:	f8c8 0000 	str.w	r0, [r8]
 800fbca:	e7c4      	b.n	800fb56 <_scanf_float+0x39e>
 800fbcc:	2500      	movs	r5, #0
 800fbce:	e634      	b.n	800f83a <_scanf_float+0x82>
 800fbd0:	0801511c 	.word	0x0801511c
 800fbd4:	08015590 	.word	0x08015590

0800fbd8 <iprintf>:
 800fbd8:	b40f      	push	{r0, r1, r2, r3}
 800fbda:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <iprintf+0x2c>)
 800fbdc:	b513      	push	{r0, r1, r4, lr}
 800fbde:	681c      	ldr	r4, [r3, #0]
 800fbe0:	b124      	cbz	r4, 800fbec <iprintf+0x14>
 800fbe2:	69a3      	ldr	r3, [r4, #24]
 800fbe4:	b913      	cbnz	r3, 800fbec <iprintf+0x14>
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f001 ffc2 	bl	8011b70 <__sinit>
 800fbec:	ab05      	add	r3, sp, #20
 800fbee:	9a04      	ldr	r2, [sp, #16]
 800fbf0:	68a1      	ldr	r1, [r4, #8]
 800fbf2:	9301      	str	r3, [sp, #4]
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f003 fb8b 	bl	8013310 <_vfiprintf_r>
 800fbfa:	b002      	add	sp, #8
 800fbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc00:	b004      	add	sp, #16
 800fc02:	4770      	bx	lr
 800fc04:	2000002c 	.word	0x2000002c

0800fc08 <_puts_r>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	460e      	mov	r6, r1
 800fc0c:	4605      	mov	r5, r0
 800fc0e:	b118      	cbz	r0, 800fc18 <_puts_r+0x10>
 800fc10:	6983      	ldr	r3, [r0, #24]
 800fc12:	b90b      	cbnz	r3, 800fc18 <_puts_r+0x10>
 800fc14:	f001 ffac 	bl	8011b70 <__sinit>
 800fc18:	69ab      	ldr	r3, [r5, #24]
 800fc1a:	68ac      	ldr	r4, [r5, #8]
 800fc1c:	b913      	cbnz	r3, 800fc24 <_puts_r+0x1c>
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f001 ffa6 	bl	8011b70 <__sinit>
 800fc24:	4b2c      	ldr	r3, [pc, #176]	; (800fcd8 <_puts_r+0xd0>)
 800fc26:	429c      	cmp	r4, r3
 800fc28:	d120      	bne.n	800fc6c <_puts_r+0x64>
 800fc2a:	686c      	ldr	r4, [r5, #4]
 800fc2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc2e:	07db      	lsls	r3, r3, #31
 800fc30:	d405      	bmi.n	800fc3e <_puts_r+0x36>
 800fc32:	89a3      	ldrh	r3, [r4, #12]
 800fc34:	0598      	lsls	r0, r3, #22
 800fc36:	d402      	bmi.n	800fc3e <_puts_r+0x36>
 800fc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc3a:	f002 fbaa 	bl	8012392 <__retarget_lock_acquire_recursive>
 800fc3e:	89a3      	ldrh	r3, [r4, #12]
 800fc40:	0719      	lsls	r1, r3, #28
 800fc42:	d51d      	bpl.n	800fc80 <_puts_r+0x78>
 800fc44:	6923      	ldr	r3, [r4, #16]
 800fc46:	b1db      	cbz	r3, 800fc80 <_puts_r+0x78>
 800fc48:	3e01      	subs	r6, #1
 800fc4a:	68a3      	ldr	r3, [r4, #8]
 800fc4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc50:	3b01      	subs	r3, #1
 800fc52:	60a3      	str	r3, [r4, #8]
 800fc54:	bb39      	cbnz	r1, 800fca6 <_puts_r+0x9e>
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	da38      	bge.n	800fccc <_puts_r+0xc4>
 800fc5a:	4622      	mov	r2, r4
 800fc5c:	210a      	movs	r1, #10
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f000 ff30 	bl	8010ac4 <__swbuf_r>
 800fc64:	3001      	adds	r0, #1
 800fc66:	d011      	beq.n	800fc8c <_puts_r+0x84>
 800fc68:	250a      	movs	r5, #10
 800fc6a:	e011      	b.n	800fc90 <_puts_r+0x88>
 800fc6c:	4b1b      	ldr	r3, [pc, #108]	; (800fcdc <_puts_r+0xd4>)
 800fc6e:	429c      	cmp	r4, r3
 800fc70:	d101      	bne.n	800fc76 <_puts_r+0x6e>
 800fc72:	68ac      	ldr	r4, [r5, #8]
 800fc74:	e7da      	b.n	800fc2c <_puts_r+0x24>
 800fc76:	4b1a      	ldr	r3, [pc, #104]	; (800fce0 <_puts_r+0xd8>)
 800fc78:	429c      	cmp	r4, r3
 800fc7a:	bf08      	it	eq
 800fc7c:	68ec      	ldreq	r4, [r5, #12]
 800fc7e:	e7d5      	b.n	800fc2c <_puts_r+0x24>
 800fc80:	4621      	mov	r1, r4
 800fc82:	4628      	mov	r0, r5
 800fc84:	f000 ff70 	bl	8010b68 <__swsetup_r>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	d0dd      	beq.n	800fc48 <_puts_r+0x40>
 800fc8c:	f04f 35ff 	mov.w	r5, #4294967295
 800fc90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc92:	07da      	lsls	r2, r3, #31
 800fc94:	d405      	bmi.n	800fca2 <_puts_r+0x9a>
 800fc96:	89a3      	ldrh	r3, [r4, #12]
 800fc98:	059b      	lsls	r3, r3, #22
 800fc9a:	d402      	bmi.n	800fca2 <_puts_r+0x9a>
 800fc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc9e:	f002 fb79 	bl	8012394 <__retarget_lock_release_recursive>
 800fca2:	4628      	mov	r0, r5
 800fca4:	bd70      	pop	{r4, r5, r6, pc}
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	da04      	bge.n	800fcb4 <_puts_r+0xac>
 800fcaa:	69a2      	ldr	r2, [r4, #24]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	dc06      	bgt.n	800fcbe <_puts_r+0xb6>
 800fcb0:	290a      	cmp	r1, #10
 800fcb2:	d004      	beq.n	800fcbe <_puts_r+0xb6>
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	1c5a      	adds	r2, r3, #1
 800fcb8:	6022      	str	r2, [r4, #0]
 800fcba:	7019      	strb	r1, [r3, #0]
 800fcbc:	e7c5      	b.n	800fc4a <_puts_r+0x42>
 800fcbe:	4622      	mov	r2, r4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	f000 feff 	bl	8010ac4 <__swbuf_r>
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	d1bf      	bne.n	800fc4a <_puts_r+0x42>
 800fcca:	e7df      	b.n	800fc8c <_puts_r+0x84>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	250a      	movs	r5, #10
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	6022      	str	r2, [r4, #0]
 800fcd4:	701d      	strb	r5, [r3, #0]
 800fcd6:	e7db      	b.n	800fc90 <_puts_r+0x88>
 800fcd8:	0801532c 	.word	0x0801532c
 800fcdc:	0801534c 	.word	0x0801534c
 800fce0:	0801530c 	.word	0x0801530c

0800fce4 <puts>:
 800fce4:	4b02      	ldr	r3, [pc, #8]	; (800fcf0 <puts+0xc>)
 800fce6:	4601      	mov	r1, r0
 800fce8:	6818      	ldr	r0, [r3, #0]
 800fcea:	f7ff bf8d 	b.w	800fc08 <_puts_r>
 800fcee:	bf00      	nop
 800fcf0:	2000002c 	.word	0x2000002c

0800fcf4 <nanf>:
 800fcf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fcfc <nanf+0x8>
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	7fc00000 	.word	0x7fc00000

0800fd00 <siprintf>:
 800fd00:	b40e      	push	{r1, r2, r3}
 800fd02:	b500      	push	{lr}
 800fd04:	b09c      	sub	sp, #112	; 0x70
 800fd06:	ab1d      	add	r3, sp, #116	; 0x74
 800fd08:	9002      	str	r0, [sp, #8]
 800fd0a:	9006      	str	r0, [sp, #24]
 800fd0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd10:	4809      	ldr	r0, [pc, #36]	; (800fd38 <siprintf+0x38>)
 800fd12:	9107      	str	r1, [sp, #28]
 800fd14:	9104      	str	r1, [sp, #16]
 800fd16:	4909      	ldr	r1, [pc, #36]	; (800fd3c <siprintf+0x3c>)
 800fd18:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd1c:	9105      	str	r1, [sp, #20]
 800fd1e:	6800      	ldr	r0, [r0, #0]
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	a902      	add	r1, sp, #8
 800fd24:	f003 f9ca 	bl	80130bc <_svfiprintf_r>
 800fd28:	9b02      	ldr	r3, [sp, #8]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	701a      	strb	r2, [r3, #0]
 800fd2e:	b01c      	add	sp, #112	; 0x70
 800fd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd34:	b003      	add	sp, #12
 800fd36:	4770      	bx	lr
 800fd38:	2000002c 	.word	0x2000002c
 800fd3c:	ffff0208 	.word	0xffff0208

0800fd40 <sulp>:
 800fd40:	b570      	push	{r4, r5, r6, lr}
 800fd42:	4604      	mov	r4, r0
 800fd44:	460d      	mov	r5, r1
 800fd46:	ec45 4b10 	vmov	d0, r4, r5
 800fd4a:	4616      	mov	r6, r2
 800fd4c:	f002 ff14 	bl	8012b78 <__ulp>
 800fd50:	ec51 0b10 	vmov	r0, r1, d0
 800fd54:	b17e      	cbz	r6, 800fd76 <sulp+0x36>
 800fd56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fd5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	dd09      	ble.n	800fd76 <sulp+0x36>
 800fd62:	051b      	lsls	r3, r3, #20
 800fd64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fd68:	2400      	movs	r4, #0
 800fd6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fd6e:	4622      	mov	r2, r4
 800fd70:	462b      	mov	r3, r5
 800fd72:	f7f0 fc69 	bl	8000648 <__aeabi_dmul>
 800fd76:	bd70      	pop	{r4, r5, r6, pc}

0800fd78 <_strtod_l>:
 800fd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	ed2d 8b02 	vpush	{d8}
 800fd80:	b09d      	sub	sp, #116	; 0x74
 800fd82:	461f      	mov	r7, r3
 800fd84:	2300      	movs	r3, #0
 800fd86:	9318      	str	r3, [sp, #96]	; 0x60
 800fd88:	4ba2      	ldr	r3, [pc, #648]	; (8010014 <_strtod_l+0x29c>)
 800fd8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	9305      	str	r3, [sp, #20]
 800fd90:	4604      	mov	r4, r0
 800fd92:	4618      	mov	r0, r3
 800fd94:	4688      	mov	r8, r1
 800fd96:	f7f0 fa43 	bl	8000220 <strlen>
 800fd9a:	f04f 0a00 	mov.w	sl, #0
 800fd9e:	4605      	mov	r5, r0
 800fda0:	f04f 0b00 	mov.w	fp, #0
 800fda4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fda8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdaa:	781a      	ldrb	r2, [r3, #0]
 800fdac:	2a2b      	cmp	r2, #43	; 0x2b
 800fdae:	d04e      	beq.n	800fe4e <_strtod_l+0xd6>
 800fdb0:	d83b      	bhi.n	800fe2a <_strtod_l+0xb2>
 800fdb2:	2a0d      	cmp	r2, #13
 800fdb4:	d834      	bhi.n	800fe20 <_strtod_l+0xa8>
 800fdb6:	2a08      	cmp	r2, #8
 800fdb8:	d834      	bhi.n	800fe24 <_strtod_l+0xac>
 800fdba:	2a00      	cmp	r2, #0
 800fdbc:	d03e      	beq.n	800fe3c <_strtod_l+0xc4>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	930a      	str	r3, [sp, #40]	; 0x28
 800fdc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fdc4:	7833      	ldrb	r3, [r6, #0]
 800fdc6:	2b30      	cmp	r3, #48	; 0x30
 800fdc8:	f040 80b0 	bne.w	800ff2c <_strtod_l+0x1b4>
 800fdcc:	7873      	ldrb	r3, [r6, #1]
 800fdce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fdd2:	2b58      	cmp	r3, #88	; 0x58
 800fdd4:	d168      	bne.n	800fea8 <_strtod_l+0x130>
 800fdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	ab18      	add	r3, sp, #96	; 0x60
 800fddc:	9702      	str	r7, [sp, #8]
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	4a8d      	ldr	r2, [pc, #564]	; (8010018 <_strtod_l+0x2a0>)
 800fde2:	ab19      	add	r3, sp, #100	; 0x64
 800fde4:	a917      	add	r1, sp, #92	; 0x5c
 800fde6:	4620      	mov	r0, r4
 800fde8:	f001 ffc6 	bl	8011d78 <__gethex>
 800fdec:	f010 0707 	ands.w	r7, r0, #7
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	d005      	beq.n	800fe00 <_strtod_l+0x88>
 800fdf4:	2f06      	cmp	r7, #6
 800fdf6:	d12c      	bne.n	800fe52 <_strtod_l+0xda>
 800fdf8:	3601      	adds	r6, #1
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	9617      	str	r6, [sp, #92]	; 0x5c
 800fdfe:	930a      	str	r3, [sp, #40]	; 0x28
 800fe00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f040 8590 	bne.w	8010928 <_strtod_l+0xbb0>
 800fe08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe0a:	b1eb      	cbz	r3, 800fe48 <_strtod_l+0xd0>
 800fe0c:	4652      	mov	r2, sl
 800fe0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe12:	ec43 2b10 	vmov	d0, r2, r3
 800fe16:	b01d      	add	sp, #116	; 0x74
 800fe18:	ecbd 8b02 	vpop	{d8}
 800fe1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe20:	2a20      	cmp	r2, #32
 800fe22:	d1cc      	bne.n	800fdbe <_strtod_l+0x46>
 800fe24:	3301      	adds	r3, #1
 800fe26:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe28:	e7be      	b.n	800fda8 <_strtod_l+0x30>
 800fe2a:	2a2d      	cmp	r2, #45	; 0x2d
 800fe2c:	d1c7      	bne.n	800fdbe <_strtod_l+0x46>
 800fe2e:	2201      	movs	r2, #1
 800fe30:	920a      	str	r2, [sp, #40]	; 0x28
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe36:	785b      	ldrb	r3, [r3, #1]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1c2      	bne.n	800fdc2 <_strtod_l+0x4a>
 800fe3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f040 856e 	bne.w	8010924 <_strtod_l+0xbac>
 800fe48:	4652      	mov	r2, sl
 800fe4a:	465b      	mov	r3, fp
 800fe4c:	e7e1      	b.n	800fe12 <_strtod_l+0x9a>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	e7ee      	b.n	800fe30 <_strtod_l+0xb8>
 800fe52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe54:	b13a      	cbz	r2, 800fe66 <_strtod_l+0xee>
 800fe56:	2135      	movs	r1, #53	; 0x35
 800fe58:	a81a      	add	r0, sp, #104	; 0x68
 800fe5a:	f002 ff98 	bl	8012d8e <__copybits>
 800fe5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe60:	4620      	mov	r0, r4
 800fe62:	f002 fb57 	bl	8012514 <_Bfree>
 800fe66:	3f01      	subs	r7, #1
 800fe68:	2f04      	cmp	r7, #4
 800fe6a:	d806      	bhi.n	800fe7a <_strtod_l+0x102>
 800fe6c:	e8df f007 	tbb	[pc, r7]
 800fe70:	1714030a 	.word	0x1714030a
 800fe74:	0a          	.byte	0x0a
 800fe75:	00          	.byte	0x00
 800fe76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fe7a:	0728      	lsls	r0, r5, #28
 800fe7c:	d5c0      	bpl.n	800fe00 <_strtod_l+0x88>
 800fe7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fe82:	e7bd      	b.n	800fe00 <_strtod_l+0x88>
 800fe84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fe88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fe8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fe8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fe92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fe96:	e7f0      	b.n	800fe7a <_strtod_l+0x102>
 800fe98:	f8df b180 	ldr.w	fp, [pc, #384]	; 801001c <_strtod_l+0x2a4>
 800fe9c:	e7ed      	b.n	800fe7a <_strtod_l+0x102>
 800fe9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fea2:	f04f 3aff 	mov.w	sl, #4294967295
 800fea6:	e7e8      	b.n	800fe7a <_strtod_l+0x102>
 800fea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	9217      	str	r2, [sp, #92]	; 0x5c
 800feae:	785b      	ldrb	r3, [r3, #1]
 800feb0:	2b30      	cmp	r3, #48	; 0x30
 800feb2:	d0f9      	beq.n	800fea8 <_strtod_l+0x130>
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d0a3      	beq.n	800fe00 <_strtod_l+0x88>
 800feb8:	2301      	movs	r3, #1
 800feba:	f04f 0900 	mov.w	r9, #0
 800febe:	9304      	str	r3, [sp, #16]
 800fec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fec2:	9308      	str	r3, [sp, #32]
 800fec4:	f8cd 901c 	str.w	r9, [sp, #28]
 800fec8:	464f      	mov	r7, r9
 800feca:	220a      	movs	r2, #10
 800fecc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fece:	7806      	ldrb	r6, [r0, #0]
 800fed0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fed4:	b2d9      	uxtb	r1, r3
 800fed6:	2909      	cmp	r1, #9
 800fed8:	d92a      	bls.n	800ff30 <_strtod_l+0x1b8>
 800feda:	9905      	ldr	r1, [sp, #20]
 800fedc:	462a      	mov	r2, r5
 800fede:	f003 fba2 	bl	8013626 <strncmp>
 800fee2:	b398      	cbz	r0, 800ff4c <_strtod_l+0x1d4>
 800fee4:	2000      	movs	r0, #0
 800fee6:	4632      	mov	r2, r6
 800fee8:	463d      	mov	r5, r7
 800feea:	9005      	str	r0, [sp, #20]
 800feec:	4603      	mov	r3, r0
 800feee:	2a65      	cmp	r2, #101	; 0x65
 800fef0:	d001      	beq.n	800fef6 <_strtod_l+0x17e>
 800fef2:	2a45      	cmp	r2, #69	; 0x45
 800fef4:	d118      	bne.n	800ff28 <_strtod_l+0x1b0>
 800fef6:	b91d      	cbnz	r5, 800ff00 <_strtod_l+0x188>
 800fef8:	9a04      	ldr	r2, [sp, #16]
 800fefa:	4302      	orrs	r2, r0
 800fefc:	d09e      	beq.n	800fe3c <_strtod_l+0xc4>
 800fefe:	2500      	movs	r5, #0
 800ff00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ff04:	f108 0201 	add.w	r2, r8, #1
 800ff08:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ff0e:	2a2b      	cmp	r2, #43	; 0x2b
 800ff10:	d075      	beq.n	800fffe <_strtod_l+0x286>
 800ff12:	2a2d      	cmp	r2, #45	; 0x2d
 800ff14:	d07b      	beq.n	801000e <_strtod_l+0x296>
 800ff16:	f04f 0c00 	mov.w	ip, #0
 800ff1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ff1e:	2909      	cmp	r1, #9
 800ff20:	f240 8082 	bls.w	8010028 <_strtod_l+0x2b0>
 800ff24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff28:	2600      	movs	r6, #0
 800ff2a:	e09d      	b.n	8010068 <_strtod_l+0x2f0>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	e7c4      	b.n	800feba <_strtod_l+0x142>
 800ff30:	2f08      	cmp	r7, #8
 800ff32:	bfd8      	it	le
 800ff34:	9907      	ldrle	r1, [sp, #28]
 800ff36:	f100 0001 	add.w	r0, r0, #1
 800ff3a:	bfda      	itte	le
 800ff3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff40:	9307      	strle	r3, [sp, #28]
 800ff42:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ff46:	3701      	adds	r7, #1
 800ff48:	9017      	str	r0, [sp, #92]	; 0x5c
 800ff4a:	e7bf      	b.n	800fecc <_strtod_l+0x154>
 800ff4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff4e:	195a      	adds	r2, r3, r5
 800ff50:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff52:	5d5a      	ldrb	r2, [r3, r5]
 800ff54:	2f00      	cmp	r7, #0
 800ff56:	d037      	beq.n	800ffc8 <_strtod_l+0x250>
 800ff58:	9005      	str	r0, [sp, #20]
 800ff5a:	463d      	mov	r5, r7
 800ff5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ff60:	2b09      	cmp	r3, #9
 800ff62:	d912      	bls.n	800ff8a <_strtod_l+0x212>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e7c2      	b.n	800feee <_strtod_l+0x176>
 800ff68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff6e:	785a      	ldrb	r2, [r3, #1]
 800ff70:	3001      	adds	r0, #1
 800ff72:	2a30      	cmp	r2, #48	; 0x30
 800ff74:	d0f8      	beq.n	800ff68 <_strtod_l+0x1f0>
 800ff76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ff7a:	2b08      	cmp	r3, #8
 800ff7c:	f200 84d9 	bhi.w	8010932 <_strtod_l+0xbba>
 800ff80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff82:	9005      	str	r0, [sp, #20]
 800ff84:	2000      	movs	r0, #0
 800ff86:	9308      	str	r3, [sp, #32]
 800ff88:	4605      	mov	r5, r0
 800ff8a:	3a30      	subs	r2, #48	; 0x30
 800ff8c:	f100 0301 	add.w	r3, r0, #1
 800ff90:	d014      	beq.n	800ffbc <_strtod_l+0x244>
 800ff92:	9905      	ldr	r1, [sp, #20]
 800ff94:	4419      	add	r1, r3
 800ff96:	9105      	str	r1, [sp, #20]
 800ff98:	462b      	mov	r3, r5
 800ff9a:	eb00 0e05 	add.w	lr, r0, r5
 800ff9e:	210a      	movs	r1, #10
 800ffa0:	4573      	cmp	r3, lr
 800ffa2:	d113      	bne.n	800ffcc <_strtod_l+0x254>
 800ffa4:	182b      	adds	r3, r5, r0
 800ffa6:	2b08      	cmp	r3, #8
 800ffa8:	f105 0501 	add.w	r5, r5, #1
 800ffac:	4405      	add	r5, r0
 800ffae:	dc1c      	bgt.n	800ffea <_strtod_l+0x272>
 800ffb0:	9907      	ldr	r1, [sp, #28]
 800ffb2:	230a      	movs	r3, #10
 800ffb4:	fb03 2301 	mla	r3, r3, r1, r2
 800ffb8:	9307      	str	r3, [sp, #28]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ffbe:	1c51      	adds	r1, r2, #1
 800ffc0:	9117      	str	r1, [sp, #92]	; 0x5c
 800ffc2:	7852      	ldrb	r2, [r2, #1]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	e7c9      	b.n	800ff5c <_strtod_l+0x1e4>
 800ffc8:	4638      	mov	r0, r7
 800ffca:	e7d2      	b.n	800ff72 <_strtod_l+0x1fa>
 800ffcc:	2b08      	cmp	r3, #8
 800ffce:	dc04      	bgt.n	800ffda <_strtod_l+0x262>
 800ffd0:	9e07      	ldr	r6, [sp, #28]
 800ffd2:	434e      	muls	r6, r1
 800ffd4:	9607      	str	r6, [sp, #28]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	e7e2      	b.n	800ffa0 <_strtod_l+0x228>
 800ffda:	f103 0c01 	add.w	ip, r3, #1
 800ffde:	f1bc 0f10 	cmp.w	ip, #16
 800ffe2:	bfd8      	it	le
 800ffe4:	fb01 f909 	mulle.w	r9, r1, r9
 800ffe8:	e7f5      	b.n	800ffd6 <_strtod_l+0x25e>
 800ffea:	2d10      	cmp	r5, #16
 800ffec:	bfdc      	itt	le
 800ffee:	230a      	movle	r3, #10
 800fff0:	fb03 2909 	mlale	r9, r3, r9, r2
 800fff4:	e7e1      	b.n	800ffba <_strtod_l+0x242>
 800fff6:	2300      	movs	r3, #0
 800fff8:	9305      	str	r3, [sp, #20]
 800fffa:	2301      	movs	r3, #1
 800fffc:	e77c      	b.n	800fef8 <_strtod_l+0x180>
 800fffe:	f04f 0c00 	mov.w	ip, #0
 8010002:	f108 0202 	add.w	r2, r8, #2
 8010006:	9217      	str	r2, [sp, #92]	; 0x5c
 8010008:	f898 2002 	ldrb.w	r2, [r8, #2]
 801000c:	e785      	b.n	800ff1a <_strtod_l+0x1a2>
 801000e:	f04f 0c01 	mov.w	ip, #1
 8010012:	e7f6      	b.n	8010002 <_strtod_l+0x28a>
 8010014:	080153d4 	.word	0x080153d4
 8010018:	08015124 	.word	0x08015124
 801001c:	7ff00000 	.word	0x7ff00000
 8010020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010022:	1c51      	adds	r1, r2, #1
 8010024:	9117      	str	r1, [sp, #92]	; 0x5c
 8010026:	7852      	ldrb	r2, [r2, #1]
 8010028:	2a30      	cmp	r2, #48	; 0x30
 801002a:	d0f9      	beq.n	8010020 <_strtod_l+0x2a8>
 801002c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010030:	2908      	cmp	r1, #8
 8010032:	f63f af79 	bhi.w	800ff28 <_strtod_l+0x1b0>
 8010036:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801003a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801003c:	9206      	str	r2, [sp, #24]
 801003e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010040:	1c51      	adds	r1, r2, #1
 8010042:	9117      	str	r1, [sp, #92]	; 0x5c
 8010044:	7852      	ldrb	r2, [r2, #1]
 8010046:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801004a:	2e09      	cmp	r6, #9
 801004c:	d937      	bls.n	80100be <_strtod_l+0x346>
 801004e:	9e06      	ldr	r6, [sp, #24]
 8010050:	1b89      	subs	r1, r1, r6
 8010052:	2908      	cmp	r1, #8
 8010054:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010058:	dc02      	bgt.n	8010060 <_strtod_l+0x2e8>
 801005a:	4576      	cmp	r6, lr
 801005c:	bfa8      	it	ge
 801005e:	4676      	movge	r6, lr
 8010060:	f1bc 0f00 	cmp.w	ip, #0
 8010064:	d000      	beq.n	8010068 <_strtod_l+0x2f0>
 8010066:	4276      	negs	r6, r6
 8010068:	2d00      	cmp	r5, #0
 801006a:	d14d      	bne.n	8010108 <_strtod_l+0x390>
 801006c:	9904      	ldr	r1, [sp, #16]
 801006e:	4301      	orrs	r1, r0
 8010070:	f47f aec6 	bne.w	800fe00 <_strtod_l+0x88>
 8010074:	2b00      	cmp	r3, #0
 8010076:	f47f aee1 	bne.w	800fe3c <_strtod_l+0xc4>
 801007a:	2a69      	cmp	r2, #105	; 0x69
 801007c:	d027      	beq.n	80100ce <_strtod_l+0x356>
 801007e:	dc24      	bgt.n	80100ca <_strtod_l+0x352>
 8010080:	2a49      	cmp	r2, #73	; 0x49
 8010082:	d024      	beq.n	80100ce <_strtod_l+0x356>
 8010084:	2a4e      	cmp	r2, #78	; 0x4e
 8010086:	f47f aed9 	bne.w	800fe3c <_strtod_l+0xc4>
 801008a:	499f      	ldr	r1, [pc, #636]	; (8010308 <_strtod_l+0x590>)
 801008c:	a817      	add	r0, sp, #92	; 0x5c
 801008e:	f002 f8cb 	bl	8012228 <__match>
 8010092:	2800      	cmp	r0, #0
 8010094:	f43f aed2 	beq.w	800fe3c <_strtod_l+0xc4>
 8010098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	2b28      	cmp	r3, #40	; 0x28
 801009e:	d12d      	bne.n	80100fc <_strtod_l+0x384>
 80100a0:	499a      	ldr	r1, [pc, #616]	; (801030c <_strtod_l+0x594>)
 80100a2:	aa1a      	add	r2, sp, #104	; 0x68
 80100a4:	a817      	add	r0, sp, #92	; 0x5c
 80100a6:	f002 f8d3 	bl	8012250 <__hexnan>
 80100aa:	2805      	cmp	r0, #5
 80100ac:	d126      	bne.n	80100fc <_strtod_l+0x384>
 80100ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80100b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80100b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80100b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80100bc:	e6a0      	b.n	800fe00 <_strtod_l+0x88>
 80100be:	210a      	movs	r1, #10
 80100c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80100c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80100c8:	e7b9      	b.n	801003e <_strtod_l+0x2c6>
 80100ca:	2a6e      	cmp	r2, #110	; 0x6e
 80100cc:	e7db      	b.n	8010086 <_strtod_l+0x30e>
 80100ce:	4990      	ldr	r1, [pc, #576]	; (8010310 <_strtod_l+0x598>)
 80100d0:	a817      	add	r0, sp, #92	; 0x5c
 80100d2:	f002 f8a9 	bl	8012228 <__match>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	f43f aeb0 	beq.w	800fe3c <_strtod_l+0xc4>
 80100dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100de:	498d      	ldr	r1, [pc, #564]	; (8010314 <_strtod_l+0x59c>)
 80100e0:	3b01      	subs	r3, #1
 80100e2:	a817      	add	r0, sp, #92	; 0x5c
 80100e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80100e6:	f002 f89f 	bl	8012228 <__match>
 80100ea:	b910      	cbnz	r0, 80100f2 <_strtod_l+0x37a>
 80100ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100ee:	3301      	adds	r3, #1
 80100f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80100f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010324 <_strtod_l+0x5ac>
 80100f6:	f04f 0a00 	mov.w	sl, #0
 80100fa:	e681      	b.n	800fe00 <_strtod_l+0x88>
 80100fc:	4886      	ldr	r0, [pc, #536]	; (8010318 <_strtod_l+0x5a0>)
 80100fe:	f003 fa37 	bl	8013570 <nan>
 8010102:	ec5b ab10 	vmov	sl, fp, d0
 8010106:	e67b      	b.n	800fe00 <_strtod_l+0x88>
 8010108:	9b05      	ldr	r3, [sp, #20]
 801010a:	9807      	ldr	r0, [sp, #28]
 801010c:	1af3      	subs	r3, r6, r3
 801010e:	2f00      	cmp	r7, #0
 8010110:	bf08      	it	eq
 8010112:	462f      	moveq	r7, r5
 8010114:	2d10      	cmp	r5, #16
 8010116:	9306      	str	r3, [sp, #24]
 8010118:	46a8      	mov	r8, r5
 801011a:	bfa8      	it	ge
 801011c:	f04f 0810 	movge.w	r8, #16
 8010120:	f7f0 fa18 	bl	8000554 <__aeabi_ui2d>
 8010124:	2d09      	cmp	r5, #9
 8010126:	4682      	mov	sl, r0
 8010128:	468b      	mov	fp, r1
 801012a:	dd13      	ble.n	8010154 <_strtod_l+0x3dc>
 801012c:	4b7b      	ldr	r3, [pc, #492]	; (801031c <_strtod_l+0x5a4>)
 801012e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010132:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010136:	f7f0 fa87 	bl	8000648 <__aeabi_dmul>
 801013a:	4682      	mov	sl, r0
 801013c:	4648      	mov	r0, r9
 801013e:	468b      	mov	fp, r1
 8010140:	f7f0 fa08 	bl	8000554 <__aeabi_ui2d>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4650      	mov	r0, sl
 801014a:	4659      	mov	r1, fp
 801014c:	f7f0 f8c6 	bl	80002dc <__adddf3>
 8010150:	4682      	mov	sl, r0
 8010152:	468b      	mov	fp, r1
 8010154:	2d0f      	cmp	r5, #15
 8010156:	dc38      	bgt.n	80101ca <_strtod_l+0x452>
 8010158:	9b06      	ldr	r3, [sp, #24]
 801015a:	2b00      	cmp	r3, #0
 801015c:	f43f ae50 	beq.w	800fe00 <_strtod_l+0x88>
 8010160:	dd24      	ble.n	80101ac <_strtod_l+0x434>
 8010162:	2b16      	cmp	r3, #22
 8010164:	dc0b      	bgt.n	801017e <_strtod_l+0x406>
 8010166:	496d      	ldr	r1, [pc, #436]	; (801031c <_strtod_l+0x5a4>)
 8010168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801016c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010170:	4652      	mov	r2, sl
 8010172:	465b      	mov	r3, fp
 8010174:	f7f0 fa68 	bl	8000648 <__aeabi_dmul>
 8010178:	4682      	mov	sl, r0
 801017a:	468b      	mov	fp, r1
 801017c:	e640      	b.n	800fe00 <_strtod_l+0x88>
 801017e:	9a06      	ldr	r2, [sp, #24]
 8010180:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010184:	4293      	cmp	r3, r2
 8010186:	db20      	blt.n	80101ca <_strtod_l+0x452>
 8010188:	4c64      	ldr	r4, [pc, #400]	; (801031c <_strtod_l+0x5a4>)
 801018a:	f1c5 050f 	rsb	r5, r5, #15
 801018e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010192:	4652      	mov	r2, sl
 8010194:	465b      	mov	r3, fp
 8010196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801019a:	f7f0 fa55 	bl	8000648 <__aeabi_dmul>
 801019e:	9b06      	ldr	r3, [sp, #24]
 80101a0:	1b5d      	subs	r5, r3, r5
 80101a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80101a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80101aa:	e7e3      	b.n	8010174 <_strtod_l+0x3fc>
 80101ac:	9b06      	ldr	r3, [sp, #24]
 80101ae:	3316      	adds	r3, #22
 80101b0:	db0b      	blt.n	80101ca <_strtod_l+0x452>
 80101b2:	9b05      	ldr	r3, [sp, #20]
 80101b4:	1b9e      	subs	r6, r3, r6
 80101b6:	4b59      	ldr	r3, [pc, #356]	; (801031c <_strtod_l+0x5a4>)
 80101b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80101bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101c0:	4650      	mov	r0, sl
 80101c2:	4659      	mov	r1, fp
 80101c4:	f7f0 fb6a 	bl	800089c <__aeabi_ddiv>
 80101c8:	e7d6      	b.n	8010178 <_strtod_l+0x400>
 80101ca:	9b06      	ldr	r3, [sp, #24]
 80101cc:	eba5 0808 	sub.w	r8, r5, r8
 80101d0:	4498      	add	r8, r3
 80101d2:	f1b8 0f00 	cmp.w	r8, #0
 80101d6:	dd74      	ble.n	80102c2 <_strtod_l+0x54a>
 80101d8:	f018 030f 	ands.w	r3, r8, #15
 80101dc:	d00a      	beq.n	80101f4 <_strtod_l+0x47c>
 80101de:	494f      	ldr	r1, [pc, #316]	; (801031c <_strtod_l+0x5a4>)
 80101e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101e4:	4652      	mov	r2, sl
 80101e6:	465b      	mov	r3, fp
 80101e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101ec:	f7f0 fa2c 	bl	8000648 <__aeabi_dmul>
 80101f0:	4682      	mov	sl, r0
 80101f2:	468b      	mov	fp, r1
 80101f4:	f038 080f 	bics.w	r8, r8, #15
 80101f8:	d04f      	beq.n	801029a <_strtod_l+0x522>
 80101fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80101fe:	dd22      	ble.n	8010246 <_strtod_l+0x4ce>
 8010200:	2500      	movs	r5, #0
 8010202:	462e      	mov	r6, r5
 8010204:	9507      	str	r5, [sp, #28]
 8010206:	9505      	str	r5, [sp, #20]
 8010208:	2322      	movs	r3, #34	; 0x22
 801020a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010324 <_strtod_l+0x5ac>
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	f04f 0a00 	mov.w	sl, #0
 8010214:	9b07      	ldr	r3, [sp, #28]
 8010216:	2b00      	cmp	r3, #0
 8010218:	f43f adf2 	beq.w	800fe00 <_strtod_l+0x88>
 801021c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801021e:	4620      	mov	r0, r4
 8010220:	f002 f978 	bl	8012514 <_Bfree>
 8010224:	9905      	ldr	r1, [sp, #20]
 8010226:	4620      	mov	r0, r4
 8010228:	f002 f974 	bl	8012514 <_Bfree>
 801022c:	4631      	mov	r1, r6
 801022e:	4620      	mov	r0, r4
 8010230:	f002 f970 	bl	8012514 <_Bfree>
 8010234:	9907      	ldr	r1, [sp, #28]
 8010236:	4620      	mov	r0, r4
 8010238:	f002 f96c 	bl	8012514 <_Bfree>
 801023c:	4629      	mov	r1, r5
 801023e:	4620      	mov	r0, r4
 8010240:	f002 f968 	bl	8012514 <_Bfree>
 8010244:	e5dc      	b.n	800fe00 <_strtod_l+0x88>
 8010246:	4b36      	ldr	r3, [pc, #216]	; (8010320 <_strtod_l+0x5a8>)
 8010248:	9304      	str	r3, [sp, #16]
 801024a:	2300      	movs	r3, #0
 801024c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010250:	4650      	mov	r0, sl
 8010252:	4659      	mov	r1, fp
 8010254:	4699      	mov	r9, r3
 8010256:	f1b8 0f01 	cmp.w	r8, #1
 801025a:	dc21      	bgt.n	80102a0 <_strtod_l+0x528>
 801025c:	b10b      	cbz	r3, 8010262 <_strtod_l+0x4ea>
 801025e:	4682      	mov	sl, r0
 8010260:	468b      	mov	fp, r1
 8010262:	4b2f      	ldr	r3, [pc, #188]	; (8010320 <_strtod_l+0x5a8>)
 8010264:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010268:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801026c:	4652      	mov	r2, sl
 801026e:	465b      	mov	r3, fp
 8010270:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010274:	f7f0 f9e8 	bl	8000648 <__aeabi_dmul>
 8010278:	4b2a      	ldr	r3, [pc, #168]	; (8010324 <_strtod_l+0x5ac>)
 801027a:	460a      	mov	r2, r1
 801027c:	400b      	ands	r3, r1
 801027e:	492a      	ldr	r1, [pc, #168]	; (8010328 <_strtod_l+0x5b0>)
 8010280:	428b      	cmp	r3, r1
 8010282:	4682      	mov	sl, r0
 8010284:	d8bc      	bhi.n	8010200 <_strtod_l+0x488>
 8010286:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801028a:	428b      	cmp	r3, r1
 801028c:	bf86      	itte	hi
 801028e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801032c <_strtod_l+0x5b4>
 8010292:	f04f 3aff 	movhi.w	sl, #4294967295
 8010296:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801029a:	2300      	movs	r3, #0
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	e084      	b.n	80103aa <_strtod_l+0x632>
 80102a0:	f018 0f01 	tst.w	r8, #1
 80102a4:	d005      	beq.n	80102b2 <_strtod_l+0x53a>
 80102a6:	9b04      	ldr	r3, [sp, #16]
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	f7f0 f9cc 	bl	8000648 <__aeabi_dmul>
 80102b0:	2301      	movs	r3, #1
 80102b2:	9a04      	ldr	r2, [sp, #16]
 80102b4:	3208      	adds	r2, #8
 80102b6:	f109 0901 	add.w	r9, r9, #1
 80102ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80102be:	9204      	str	r2, [sp, #16]
 80102c0:	e7c9      	b.n	8010256 <_strtod_l+0x4de>
 80102c2:	d0ea      	beq.n	801029a <_strtod_l+0x522>
 80102c4:	f1c8 0800 	rsb	r8, r8, #0
 80102c8:	f018 020f 	ands.w	r2, r8, #15
 80102cc:	d00a      	beq.n	80102e4 <_strtod_l+0x56c>
 80102ce:	4b13      	ldr	r3, [pc, #76]	; (801031c <_strtod_l+0x5a4>)
 80102d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102d4:	4650      	mov	r0, sl
 80102d6:	4659      	mov	r1, fp
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	f7f0 fade 	bl	800089c <__aeabi_ddiv>
 80102e0:	4682      	mov	sl, r0
 80102e2:	468b      	mov	fp, r1
 80102e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80102e8:	d0d7      	beq.n	801029a <_strtod_l+0x522>
 80102ea:	f1b8 0f1f 	cmp.w	r8, #31
 80102ee:	dd1f      	ble.n	8010330 <_strtod_l+0x5b8>
 80102f0:	2500      	movs	r5, #0
 80102f2:	462e      	mov	r6, r5
 80102f4:	9507      	str	r5, [sp, #28]
 80102f6:	9505      	str	r5, [sp, #20]
 80102f8:	2322      	movs	r3, #34	; 0x22
 80102fa:	f04f 0a00 	mov.w	sl, #0
 80102fe:	f04f 0b00 	mov.w	fp, #0
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	e786      	b.n	8010214 <_strtod_l+0x49c>
 8010306:	bf00      	nop
 8010308:	080150f5 	.word	0x080150f5
 801030c:	08015138 	.word	0x08015138
 8010310:	080150ed 	.word	0x080150ed
 8010314:	0801527c 	.word	0x0801527c
 8010318:	08015590 	.word	0x08015590
 801031c:	08015470 	.word	0x08015470
 8010320:	08015448 	.word	0x08015448
 8010324:	7ff00000 	.word	0x7ff00000
 8010328:	7ca00000 	.word	0x7ca00000
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	f018 0310 	ands.w	r3, r8, #16
 8010334:	bf18      	it	ne
 8010336:	236a      	movne	r3, #106	; 0x6a
 8010338:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80106e8 <_strtod_l+0x970>
 801033c:	9304      	str	r3, [sp, #16]
 801033e:	4650      	mov	r0, sl
 8010340:	4659      	mov	r1, fp
 8010342:	2300      	movs	r3, #0
 8010344:	f018 0f01 	tst.w	r8, #1
 8010348:	d004      	beq.n	8010354 <_strtod_l+0x5dc>
 801034a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801034e:	f7f0 f97b 	bl	8000648 <__aeabi_dmul>
 8010352:	2301      	movs	r3, #1
 8010354:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010358:	f109 0908 	add.w	r9, r9, #8
 801035c:	d1f2      	bne.n	8010344 <_strtod_l+0x5cc>
 801035e:	b10b      	cbz	r3, 8010364 <_strtod_l+0x5ec>
 8010360:	4682      	mov	sl, r0
 8010362:	468b      	mov	fp, r1
 8010364:	9b04      	ldr	r3, [sp, #16]
 8010366:	b1c3      	cbz	r3, 801039a <_strtod_l+0x622>
 8010368:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801036c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010370:	2b00      	cmp	r3, #0
 8010372:	4659      	mov	r1, fp
 8010374:	dd11      	ble.n	801039a <_strtod_l+0x622>
 8010376:	2b1f      	cmp	r3, #31
 8010378:	f340 8124 	ble.w	80105c4 <_strtod_l+0x84c>
 801037c:	2b34      	cmp	r3, #52	; 0x34
 801037e:	bfde      	ittt	le
 8010380:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010384:	f04f 33ff 	movle.w	r3, #4294967295
 8010388:	fa03 f202 	lslle.w	r2, r3, r2
 801038c:	f04f 0a00 	mov.w	sl, #0
 8010390:	bfcc      	ite	gt
 8010392:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010396:	ea02 0b01 	andle.w	fp, r2, r1
 801039a:	2200      	movs	r2, #0
 801039c:	2300      	movs	r3, #0
 801039e:	4650      	mov	r0, sl
 80103a0:	4659      	mov	r1, fp
 80103a2:	f7f0 fbb9 	bl	8000b18 <__aeabi_dcmpeq>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d1a2      	bne.n	80102f0 <_strtod_l+0x578>
 80103aa:	9b07      	ldr	r3, [sp, #28]
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	9908      	ldr	r1, [sp, #32]
 80103b0:	462b      	mov	r3, r5
 80103b2:	463a      	mov	r2, r7
 80103b4:	4620      	mov	r0, r4
 80103b6:	f002 f915 	bl	80125e4 <__s2b>
 80103ba:	9007      	str	r0, [sp, #28]
 80103bc:	2800      	cmp	r0, #0
 80103be:	f43f af1f 	beq.w	8010200 <_strtod_l+0x488>
 80103c2:	9b05      	ldr	r3, [sp, #20]
 80103c4:	1b9e      	subs	r6, r3, r6
 80103c6:	9b06      	ldr	r3, [sp, #24]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	bfb4      	ite	lt
 80103cc:	4633      	movlt	r3, r6
 80103ce:	2300      	movge	r3, #0
 80103d0:	930c      	str	r3, [sp, #48]	; 0x30
 80103d2:	9b06      	ldr	r3, [sp, #24]
 80103d4:	2500      	movs	r5, #0
 80103d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80103da:	9312      	str	r3, [sp, #72]	; 0x48
 80103dc:	462e      	mov	r6, r5
 80103de:	9b07      	ldr	r3, [sp, #28]
 80103e0:	4620      	mov	r0, r4
 80103e2:	6859      	ldr	r1, [r3, #4]
 80103e4:	f002 f856 	bl	8012494 <_Balloc>
 80103e8:	9005      	str	r0, [sp, #20]
 80103ea:	2800      	cmp	r0, #0
 80103ec:	f43f af0c 	beq.w	8010208 <_strtod_l+0x490>
 80103f0:	9b07      	ldr	r3, [sp, #28]
 80103f2:	691a      	ldr	r2, [r3, #16]
 80103f4:	3202      	adds	r2, #2
 80103f6:	f103 010c 	add.w	r1, r3, #12
 80103fa:	0092      	lsls	r2, r2, #2
 80103fc:	300c      	adds	r0, #12
 80103fe:	f7fe fd5b 	bl	800eeb8 <memcpy>
 8010402:	ec4b ab10 	vmov	d0, sl, fp
 8010406:	aa1a      	add	r2, sp, #104	; 0x68
 8010408:	a919      	add	r1, sp, #100	; 0x64
 801040a:	4620      	mov	r0, r4
 801040c:	f002 fc30 	bl	8012c70 <__d2b>
 8010410:	ec4b ab18 	vmov	d8, sl, fp
 8010414:	9018      	str	r0, [sp, #96]	; 0x60
 8010416:	2800      	cmp	r0, #0
 8010418:	f43f aef6 	beq.w	8010208 <_strtod_l+0x490>
 801041c:	2101      	movs	r1, #1
 801041e:	4620      	mov	r0, r4
 8010420:	f002 f97a 	bl	8012718 <__i2b>
 8010424:	4606      	mov	r6, r0
 8010426:	2800      	cmp	r0, #0
 8010428:	f43f aeee 	beq.w	8010208 <_strtod_l+0x490>
 801042c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801042e:	9904      	ldr	r1, [sp, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	bfab      	itete	ge
 8010434:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010436:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010438:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801043a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801043e:	bfac      	ite	ge
 8010440:	eb03 0902 	addge.w	r9, r3, r2
 8010444:	1ad7      	sublt	r7, r2, r3
 8010446:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010448:	eba3 0801 	sub.w	r8, r3, r1
 801044c:	4490      	add	r8, r2
 801044e:	4ba1      	ldr	r3, [pc, #644]	; (80106d4 <_strtod_l+0x95c>)
 8010450:	f108 38ff 	add.w	r8, r8, #4294967295
 8010454:	4598      	cmp	r8, r3
 8010456:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801045a:	f280 80c7 	bge.w	80105ec <_strtod_l+0x874>
 801045e:	eba3 0308 	sub.w	r3, r3, r8
 8010462:	2b1f      	cmp	r3, #31
 8010464:	eba2 0203 	sub.w	r2, r2, r3
 8010468:	f04f 0101 	mov.w	r1, #1
 801046c:	f300 80b1 	bgt.w	80105d2 <_strtod_l+0x85a>
 8010470:	fa01 f303 	lsl.w	r3, r1, r3
 8010474:	930d      	str	r3, [sp, #52]	; 0x34
 8010476:	2300      	movs	r3, #0
 8010478:	9308      	str	r3, [sp, #32]
 801047a:	eb09 0802 	add.w	r8, r9, r2
 801047e:	9b04      	ldr	r3, [sp, #16]
 8010480:	45c1      	cmp	r9, r8
 8010482:	4417      	add	r7, r2
 8010484:	441f      	add	r7, r3
 8010486:	464b      	mov	r3, r9
 8010488:	bfa8      	it	ge
 801048a:	4643      	movge	r3, r8
 801048c:	42bb      	cmp	r3, r7
 801048e:	bfa8      	it	ge
 8010490:	463b      	movge	r3, r7
 8010492:	2b00      	cmp	r3, #0
 8010494:	bfc2      	ittt	gt
 8010496:	eba8 0803 	subgt.w	r8, r8, r3
 801049a:	1aff      	subgt	r7, r7, r3
 801049c:	eba9 0903 	subgt.w	r9, r9, r3
 80104a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	dd17      	ble.n	80104d6 <_strtod_l+0x75e>
 80104a6:	4631      	mov	r1, r6
 80104a8:	461a      	mov	r2, r3
 80104aa:	4620      	mov	r0, r4
 80104ac:	f002 f9f4 	bl	8012898 <__pow5mult>
 80104b0:	4606      	mov	r6, r0
 80104b2:	2800      	cmp	r0, #0
 80104b4:	f43f aea8 	beq.w	8010208 <_strtod_l+0x490>
 80104b8:	4601      	mov	r1, r0
 80104ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104bc:	4620      	mov	r0, r4
 80104be:	f002 f941 	bl	8012744 <__multiply>
 80104c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80104c4:	2800      	cmp	r0, #0
 80104c6:	f43f ae9f 	beq.w	8010208 <_strtod_l+0x490>
 80104ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80104cc:	4620      	mov	r0, r4
 80104ce:	f002 f821 	bl	8012514 <_Bfree>
 80104d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104d4:	9318      	str	r3, [sp, #96]	; 0x60
 80104d6:	f1b8 0f00 	cmp.w	r8, #0
 80104da:	f300 808c 	bgt.w	80105f6 <_strtod_l+0x87e>
 80104de:	9b06      	ldr	r3, [sp, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	dd08      	ble.n	80104f6 <_strtod_l+0x77e>
 80104e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104e6:	9905      	ldr	r1, [sp, #20]
 80104e8:	4620      	mov	r0, r4
 80104ea:	f002 f9d5 	bl	8012898 <__pow5mult>
 80104ee:	9005      	str	r0, [sp, #20]
 80104f0:	2800      	cmp	r0, #0
 80104f2:	f43f ae89 	beq.w	8010208 <_strtod_l+0x490>
 80104f6:	2f00      	cmp	r7, #0
 80104f8:	dd08      	ble.n	801050c <_strtod_l+0x794>
 80104fa:	9905      	ldr	r1, [sp, #20]
 80104fc:	463a      	mov	r2, r7
 80104fe:	4620      	mov	r0, r4
 8010500:	f002 fa24 	bl	801294c <__lshift>
 8010504:	9005      	str	r0, [sp, #20]
 8010506:	2800      	cmp	r0, #0
 8010508:	f43f ae7e 	beq.w	8010208 <_strtod_l+0x490>
 801050c:	f1b9 0f00 	cmp.w	r9, #0
 8010510:	dd08      	ble.n	8010524 <_strtod_l+0x7ac>
 8010512:	4631      	mov	r1, r6
 8010514:	464a      	mov	r2, r9
 8010516:	4620      	mov	r0, r4
 8010518:	f002 fa18 	bl	801294c <__lshift>
 801051c:	4606      	mov	r6, r0
 801051e:	2800      	cmp	r0, #0
 8010520:	f43f ae72 	beq.w	8010208 <_strtod_l+0x490>
 8010524:	9a05      	ldr	r2, [sp, #20]
 8010526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010528:	4620      	mov	r0, r4
 801052a:	f002 fa9b 	bl	8012a64 <__mdiff>
 801052e:	4605      	mov	r5, r0
 8010530:	2800      	cmp	r0, #0
 8010532:	f43f ae69 	beq.w	8010208 <_strtod_l+0x490>
 8010536:	68c3      	ldr	r3, [r0, #12]
 8010538:	930b      	str	r3, [sp, #44]	; 0x2c
 801053a:	2300      	movs	r3, #0
 801053c:	60c3      	str	r3, [r0, #12]
 801053e:	4631      	mov	r1, r6
 8010540:	f002 fa74 	bl	8012a2c <__mcmp>
 8010544:	2800      	cmp	r0, #0
 8010546:	da60      	bge.n	801060a <_strtod_l+0x892>
 8010548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801054a:	ea53 030a 	orrs.w	r3, r3, sl
 801054e:	f040 8082 	bne.w	8010656 <_strtod_l+0x8de>
 8010552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010556:	2b00      	cmp	r3, #0
 8010558:	d17d      	bne.n	8010656 <_strtod_l+0x8de>
 801055a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801055e:	0d1b      	lsrs	r3, r3, #20
 8010560:	051b      	lsls	r3, r3, #20
 8010562:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010566:	d976      	bls.n	8010656 <_strtod_l+0x8de>
 8010568:	696b      	ldr	r3, [r5, #20]
 801056a:	b913      	cbnz	r3, 8010572 <_strtod_l+0x7fa>
 801056c:	692b      	ldr	r3, [r5, #16]
 801056e:	2b01      	cmp	r3, #1
 8010570:	dd71      	ble.n	8010656 <_strtod_l+0x8de>
 8010572:	4629      	mov	r1, r5
 8010574:	2201      	movs	r2, #1
 8010576:	4620      	mov	r0, r4
 8010578:	f002 f9e8 	bl	801294c <__lshift>
 801057c:	4631      	mov	r1, r6
 801057e:	4605      	mov	r5, r0
 8010580:	f002 fa54 	bl	8012a2c <__mcmp>
 8010584:	2800      	cmp	r0, #0
 8010586:	dd66      	ble.n	8010656 <_strtod_l+0x8de>
 8010588:	9904      	ldr	r1, [sp, #16]
 801058a:	4a53      	ldr	r2, [pc, #332]	; (80106d8 <_strtod_l+0x960>)
 801058c:	465b      	mov	r3, fp
 801058e:	2900      	cmp	r1, #0
 8010590:	f000 8081 	beq.w	8010696 <_strtod_l+0x91e>
 8010594:	ea02 010b 	and.w	r1, r2, fp
 8010598:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801059c:	dc7b      	bgt.n	8010696 <_strtod_l+0x91e>
 801059e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80105a2:	f77f aea9 	ble.w	80102f8 <_strtod_l+0x580>
 80105a6:	4b4d      	ldr	r3, [pc, #308]	; (80106dc <_strtod_l+0x964>)
 80105a8:	4650      	mov	r0, sl
 80105aa:	4659      	mov	r1, fp
 80105ac:	2200      	movs	r2, #0
 80105ae:	f7f0 f84b 	bl	8000648 <__aeabi_dmul>
 80105b2:	460b      	mov	r3, r1
 80105b4:	4303      	orrs	r3, r0
 80105b6:	bf08      	it	eq
 80105b8:	2322      	moveq	r3, #34	; 0x22
 80105ba:	4682      	mov	sl, r0
 80105bc:	468b      	mov	fp, r1
 80105be:	bf08      	it	eq
 80105c0:	6023      	streq	r3, [r4, #0]
 80105c2:	e62b      	b.n	801021c <_strtod_l+0x4a4>
 80105c4:	f04f 32ff 	mov.w	r2, #4294967295
 80105c8:	fa02 f303 	lsl.w	r3, r2, r3
 80105cc:	ea03 0a0a 	and.w	sl, r3, sl
 80105d0:	e6e3      	b.n	801039a <_strtod_l+0x622>
 80105d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80105d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80105da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80105de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80105e2:	fa01 f308 	lsl.w	r3, r1, r8
 80105e6:	9308      	str	r3, [sp, #32]
 80105e8:	910d      	str	r1, [sp, #52]	; 0x34
 80105ea:	e746      	b.n	801047a <_strtod_l+0x702>
 80105ec:	2300      	movs	r3, #0
 80105ee:	9308      	str	r3, [sp, #32]
 80105f0:	2301      	movs	r3, #1
 80105f2:	930d      	str	r3, [sp, #52]	; 0x34
 80105f4:	e741      	b.n	801047a <_strtod_l+0x702>
 80105f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80105f8:	4642      	mov	r2, r8
 80105fa:	4620      	mov	r0, r4
 80105fc:	f002 f9a6 	bl	801294c <__lshift>
 8010600:	9018      	str	r0, [sp, #96]	; 0x60
 8010602:	2800      	cmp	r0, #0
 8010604:	f47f af6b 	bne.w	80104de <_strtod_l+0x766>
 8010608:	e5fe      	b.n	8010208 <_strtod_l+0x490>
 801060a:	465f      	mov	r7, fp
 801060c:	d16e      	bne.n	80106ec <_strtod_l+0x974>
 801060e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010610:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010614:	b342      	cbz	r2, 8010668 <_strtod_l+0x8f0>
 8010616:	4a32      	ldr	r2, [pc, #200]	; (80106e0 <_strtod_l+0x968>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d128      	bne.n	801066e <_strtod_l+0x8f6>
 801061c:	9b04      	ldr	r3, [sp, #16]
 801061e:	4651      	mov	r1, sl
 8010620:	b1eb      	cbz	r3, 801065e <_strtod_l+0x8e6>
 8010622:	4b2d      	ldr	r3, [pc, #180]	; (80106d8 <_strtod_l+0x960>)
 8010624:	403b      	ands	r3, r7
 8010626:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801062a:	f04f 32ff 	mov.w	r2, #4294967295
 801062e:	d819      	bhi.n	8010664 <_strtod_l+0x8ec>
 8010630:	0d1b      	lsrs	r3, r3, #20
 8010632:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010636:	fa02 f303 	lsl.w	r3, r2, r3
 801063a:	4299      	cmp	r1, r3
 801063c:	d117      	bne.n	801066e <_strtod_l+0x8f6>
 801063e:	4b29      	ldr	r3, [pc, #164]	; (80106e4 <_strtod_l+0x96c>)
 8010640:	429f      	cmp	r7, r3
 8010642:	d102      	bne.n	801064a <_strtod_l+0x8d2>
 8010644:	3101      	adds	r1, #1
 8010646:	f43f addf 	beq.w	8010208 <_strtod_l+0x490>
 801064a:	4b23      	ldr	r3, [pc, #140]	; (80106d8 <_strtod_l+0x960>)
 801064c:	403b      	ands	r3, r7
 801064e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010652:	f04f 0a00 	mov.w	sl, #0
 8010656:	9b04      	ldr	r3, [sp, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1a4      	bne.n	80105a6 <_strtod_l+0x82e>
 801065c:	e5de      	b.n	801021c <_strtod_l+0x4a4>
 801065e:	f04f 33ff 	mov.w	r3, #4294967295
 8010662:	e7ea      	b.n	801063a <_strtod_l+0x8c2>
 8010664:	4613      	mov	r3, r2
 8010666:	e7e8      	b.n	801063a <_strtod_l+0x8c2>
 8010668:	ea53 030a 	orrs.w	r3, r3, sl
 801066c:	d08c      	beq.n	8010588 <_strtod_l+0x810>
 801066e:	9b08      	ldr	r3, [sp, #32]
 8010670:	b1db      	cbz	r3, 80106aa <_strtod_l+0x932>
 8010672:	423b      	tst	r3, r7
 8010674:	d0ef      	beq.n	8010656 <_strtod_l+0x8de>
 8010676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010678:	9a04      	ldr	r2, [sp, #16]
 801067a:	4650      	mov	r0, sl
 801067c:	4659      	mov	r1, fp
 801067e:	b1c3      	cbz	r3, 80106b2 <_strtod_l+0x93a>
 8010680:	f7ff fb5e 	bl	800fd40 <sulp>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	ec51 0b18 	vmov	r0, r1, d8
 801068c:	f7ef fe26 	bl	80002dc <__adddf3>
 8010690:	4682      	mov	sl, r0
 8010692:	468b      	mov	fp, r1
 8010694:	e7df      	b.n	8010656 <_strtod_l+0x8de>
 8010696:	4013      	ands	r3, r2
 8010698:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801069c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80106a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80106a4:	f04f 3aff 	mov.w	sl, #4294967295
 80106a8:	e7d5      	b.n	8010656 <_strtod_l+0x8de>
 80106aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106ac:	ea13 0f0a 	tst.w	r3, sl
 80106b0:	e7e0      	b.n	8010674 <_strtod_l+0x8fc>
 80106b2:	f7ff fb45 	bl	800fd40 <sulp>
 80106b6:	4602      	mov	r2, r0
 80106b8:	460b      	mov	r3, r1
 80106ba:	ec51 0b18 	vmov	r0, r1, d8
 80106be:	f7ef fe0b 	bl	80002d8 <__aeabi_dsub>
 80106c2:	2200      	movs	r2, #0
 80106c4:	2300      	movs	r3, #0
 80106c6:	4682      	mov	sl, r0
 80106c8:	468b      	mov	fp, r1
 80106ca:	f7f0 fa25 	bl	8000b18 <__aeabi_dcmpeq>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d0c1      	beq.n	8010656 <_strtod_l+0x8de>
 80106d2:	e611      	b.n	80102f8 <_strtod_l+0x580>
 80106d4:	fffffc02 	.word	0xfffffc02
 80106d8:	7ff00000 	.word	0x7ff00000
 80106dc:	39500000 	.word	0x39500000
 80106e0:	000fffff 	.word	0x000fffff
 80106e4:	7fefffff 	.word	0x7fefffff
 80106e8:	08015150 	.word	0x08015150
 80106ec:	4631      	mov	r1, r6
 80106ee:	4628      	mov	r0, r5
 80106f0:	f002 fb1a 	bl	8012d28 <__ratio>
 80106f4:	ec59 8b10 	vmov	r8, r9, d0
 80106f8:	ee10 0a10 	vmov	r0, s0
 80106fc:	2200      	movs	r2, #0
 80106fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010702:	4649      	mov	r1, r9
 8010704:	f7f0 fa1c 	bl	8000b40 <__aeabi_dcmple>
 8010708:	2800      	cmp	r0, #0
 801070a:	d07a      	beq.n	8010802 <_strtod_l+0xa8a>
 801070c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801070e:	2b00      	cmp	r3, #0
 8010710:	d04a      	beq.n	80107a8 <_strtod_l+0xa30>
 8010712:	4b95      	ldr	r3, [pc, #596]	; (8010968 <_strtod_l+0xbf0>)
 8010714:	2200      	movs	r2, #0
 8010716:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801071a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010968 <_strtod_l+0xbf0>
 801071e:	f04f 0800 	mov.w	r8, #0
 8010722:	4b92      	ldr	r3, [pc, #584]	; (801096c <_strtod_l+0xbf4>)
 8010724:	403b      	ands	r3, r7
 8010726:	930d      	str	r3, [sp, #52]	; 0x34
 8010728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801072a:	4b91      	ldr	r3, [pc, #580]	; (8010970 <_strtod_l+0xbf8>)
 801072c:	429a      	cmp	r2, r3
 801072e:	f040 80b0 	bne.w	8010892 <_strtod_l+0xb1a>
 8010732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010736:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801073a:	ec4b ab10 	vmov	d0, sl, fp
 801073e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010742:	f002 fa19 	bl	8012b78 <__ulp>
 8010746:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801074a:	ec53 2b10 	vmov	r2, r3, d0
 801074e:	f7ef ff7b 	bl	8000648 <__aeabi_dmul>
 8010752:	4652      	mov	r2, sl
 8010754:	465b      	mov	r3, fp
 8010756:	f7ef fdc1 	bl	80002dc <__adddf3>
 801075a:	460b      	mov	r3, r1
 801075c:	4983      	ldr	r1, [pc, #524]	; (801096c <_strtod_l+0xbf4>)
 801075e:	4a85      	ldr	r2, [pc, #532]	; (8010974 <_strtod_l+0xbfc>)
 8010760:	4019      	ands	r1, r3
 8010762:	4291      	cmp	r1, r2
 8010764:	4682      	mov	sl, r0
 8010766:	d960      	bls.n	801082a <_strtod_l+0xab2>
 8010768:	ee18 3a90 	vmov	r3, s17
 801076c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010770:	4293      	cmp	r3, r2
 8010772:	d104      	bne.n	801077e <_strtod_l+0xa06>
 8010774:	ee18 3a10 	vmov	r3, s16
 8010778:	3301      	adds	r3, #1
 801077a:	f43f ad45 	beq.w	8010208 <_strtod_l+0x490>
 801077e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010980 <_strtod_l+0xc08>
 8010782:	f04f 3aff 	mov.w	sl, #4294967295
 8010786:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010788:	4620      	mov	r0, r4
 801078a:	f001 fec3 	bl	8012514 <_Bfree>
 801078e:	9905      	ldr	r1, [sp, #20]
 8010790:	4620      	mov	r0, r4
 8010792:	f001 febf 	bl	8012514 <_Bfree>
 8010796:	4631      	mov	r1, r6
 8010798:	4620      	mov	r0, r4
 801079a:	f001 febb 	bl	8012514 <_Bfree>
 801079e:	4629      	mov	r1, r5
 80107a0:	4620      	mov	r0, r4
 80107a2:	f001 feb7 	bl	8012514 <_Bfree>
 80107a6:	e61a      	b.n	80103de <_strtod_l+0x666>
 80107a8:	f1ba 0f00 	cmp.w	sl, #0
 80107ac:	d11b      	bne.n	80107e6 <_strtod_l+0xa6e>
 80107ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107b2:	b9f3      	cbnz	r3, 80107f2 <_strtod_l+0xa7a>
 80107b4:	4b6c      	ldr	r3, [pc, #432]	; (8010968 <_strtod_l+0xbf0>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	4640      	mov	r0, r8
 80107ba:	4649      	mov	r1, r9
 80107bc:	f7f0 f9b6 	bl	8000b2c <__aeabi_dcmplt>
 80107c0:	b9d0      	cbnz	r0, 80107f8 <_strtod_l+0xa80>
 80107c2:	4640      	mov	r0, r8
 80107c4:	4649      	mov	r1, r9
 80107c6:	4b6c      	ldr	r3, [pc, #432]	; (8010978 <_strtod_l+0xc00>)
 80107c8:	2200      	movs	r2, #0
 80107ca:	f7ef ff3d 	bl	8000648 <__aeabi_dmul>
 80107ce:	4680      	mov	r8, r0
 80107d0:	4689      	mov	r9, r1
 80107d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80107d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80107da:	9315      	str	r3, [sp, #84]	; 0x54
 80107dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80107e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80107e4:	e79d      	b.n	8010722 <_strtod_l+0x9aa>
 80107e6:	f1ba 0f01 	cmp.w	sl, #1
 80107ea:	d102      	bne.n	80107f2 <_strtod_l+0xa7a>
 80107ec:	2f00      	cmp	r7, #0
 80107ee:	f43f ad83 	beq.w	80102f8 <_strtod_l+0x580>
 80107f2:	4b62      	ldr	r3, [pc, #392]	; (801097c <_strtod_l+0xc04>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	e78e      	b.n	8010716 <_strtod_l+0x99e>
 80107f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010978 <_strtod_l+0xc00>
 80107fc:	f04f 0800 	mov.w	r8, #0
 8010800:	e7e7      	b.n	80107d2 <_strtod_l+0xa5a>
 8010802:	4b5d      	ldr	r3, [pc, #372]	; (8010978 <_strtod_l+0xc00>)
 8010804:	4640      	mov	r0, r8
 8010806:	4649      	mov	r1, r9
 8010808:	2200      	movs	r2, #0
 801080a:	f7ef ff1d 	bl	8000648 <__aeabi_dmul>
 801080e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010810:	4680      	mov	r8, r0
 8010812:	4689      	mov	r9, r1
 8010814:	b933      	cbnz	r3, 8010824 <_strtod_l+0xaac>
 8010816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801081a:	900e      	str	r0, [sp, #56]	; 0x38
 801081c:	930f      	str	r3, [sp, #60]	; 0x3c
 801081e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010822:	e7dd      	b.n	80107e0 <_strtod_l+0xa68>
 8010824:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010828:	e7f9      	b.n	801081e <_strtod_l+0xaa6>
 801082a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1a8      	bne.n	8010786 <_strtod_l+0xa0e>
 8010834:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801083a:	0d1b      	lsrs	r3, r3, #20
 801083c:	051b      	lsls	r3, r3, #20
 801083e:	429a      	cmp	r2, r3
 8010840:	d1a1      	bne.n	8010786 <_strtod_l+0xa0e>
 8010842:	4640      	mov	r0, r8
 8010844:	4649      	mov	r1, r9
 8010846:	f7f0 fa5f 	bl	8000d08 <__aeabi_d2lz>
 801084a:	f7ef fecf 	bl	80005ec <__aeabi_l2d>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4640      	mov	r0, r8
 8010854:	4649      	mov	r1, r9
 8010856:	f7ef fd3f 	bl	80002d8 <__aeabi_dsub>
 801085a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801085c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010860:	ea43 030a 	orr.w	r3, r3, sl
 8010864:	4313      	orrs	r3, r2
 8010866:	4680      	mov	r8, r0
 8010868:	4689      	mov	r9, r1
 801086a:	d055      	beq.n	8010918 <_strtod_l+0xba0>
 801086c:	a336      	add	r3, pc, #216	; (adr r3, 8010948 <_strtod_l+0xbd0>)
 801086e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010872:	f7f0 f95b 	bl	8000b2c <__aeabi_dcmplt>
 8010876:	2800      	cmp	r0, #0
 8010878:	f47f acd0 	bne.w	801021c <_strtod_l+0x4a4>
 801087c:	a334      	add	r3, pc, #208	; (adr r3, 8010950 <_strtod_l+0xbd8>)
 801087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010882:	4640      	mov	r0, r8
 8010884:	4649      	mov	r1, r9
 8010886:	f7f0 f96f 	bl	8000b68 <__aeabi_dcmpgt>
 801088a:	2800      	cmp	r0, #0
 801088c:	f43f af7b 	beq.w	8010786 <_strtod_l+0xa0e>
 8010890:	e4c4      	b.n	801021c <_strtod_l+0x4a4>
 8010892:	9b04      	ldr	r3, [sp, #16]
 8010894:	b333      	cbz	r3, 80108e4 <_strtod_l+0xb6c>
 8010896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010898:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801089c:	d822      	bhi.n	80108e4 <_strtod_l+0xb6c>
 801089e:	a32e      	add	r3, pc, #184	; (adr r3, 8010958 <_strtod_l+0xbe0>)
 80108a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a4:	4640      	mov	r0, r8
 80108a6:	4649      	mov	r1, r9
 80108a8:	f7f0 f94a 	bl	8000b40 <__aeabi_dcmple>
 80108ac:	b1a0      	cbz	r0, 80108d8 <_strtod_l+0xb60>
 80108ae:	4649      	mov	r1, r9
 80108b0:	4640      	mov	r0, r8
 80108b2:	f7f0 f9a1 	bl	8000bf8 <__aeabi_d2uiz>
 80108b6:	2801      	cmp	r0, #1
 80108b8:	bf38      	it	cc
 80108ba:	2001      	movcc	r0, #1
 80108bc:	f7ef fe4a 	bl	8000554 <__aeabi_ui2d>
 80108c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c2:	4680      	mov	r8, r0
 80108c4:	4689      	mov	r9, r1
 80108c6:	bb23      	cbnz	r3, 8010912 <_strtod_l+0xb9a>
 80108c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108cc:	9010      	str	r0, [sp, #64]	; 0x40
 80108ce:	9311      	str	r3, [sp, #68]	; 0x44
 80108d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80108d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80108e0:	1a9b      	subs	r3, r3, r2
 80108e2:	9309      	str	r3, [sp, #36]	; 0x24
 80108e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80108e8:	eeb0 0a48 	vmov.f32	s0, s16
 80108ec:	eef0 0a68 	vmov.f32	s1, s17
 80108f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80108f4:	f002 f940 	bl	8012b78 <__ulp>
 80108f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80108fc:	ec53 2b10 	vmov	r2, r3, d0
 8010900:	f7ef fea2 	bl	8000648 <__aeabi_dmul>
 8010904:	ec53 2b18 	vmov	r2, r3, d8
 8010908:	f7ef fce8 	bl	80002dc <__adddf3>
 801090c:	4682      	mov	sl, r0
 801090e:	468b      	mov	fp, r1
 8010910:	e78d      	b.n	801082e <_strtod_l+0xab6>
 8010912:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010916:	e7db      	b.n	80108d0 <_strtod_l+0xb58>
 8010918:	a311      	add	r3, pc, #68	; (adr r3, 8010960 <_strtod_l+0xbe8>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7f0 f905 	bl	8000b2c <__aeabi_dcmplt>
 8010922:	e7b2      	b.n	801088a <_strtod_l+0xb12>
 8010924:	2300      	movs	r3, #0
 8010926:	930a      	str	r3, [sp, #40]	; 0x28
 8010928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801092a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801092c:	6013      	str	r3, [r2, #0]
 801092e:	f7ff ba6b 	b.w	800fe08 <_strtod_l+0x90>
 8010932:	2a65      	cmp	r2, #101	; 0x65
 8010934:	f43f ab5f 	beq.w	800fff6 <_strtod_l+0x27e>
 8010938:	2a45      	cmp	r2, #69	; 0x45
 801093a:	f43f ab5c 	beq.w	800fff6 <_strtod_l+0x27e>
 801093e:	2301      	movs	r3, #1
 8010940:	f7ff bb94 	b.w	801006c <_strtod_l+0x2f4>
 8010944:	f3af 8000 	nop.w
 8010948:	94a03595 	.word	0x94a03595
 801094c:	3fdfffff 	.word	0x3fdfffff
 8010950:	35afe535 	.word	0x35afe535
 8010954:	3fe00000 	.word	0x3fe00000
 8010958:	ffc00000 	.word	0xffc00000
 801095c:	41dfffff 	.word	0x41dfffff
 8010960:	94a03595 	.word	0x94a03595
 8010964:	3fcfffff 	.word	0x3fcfffff
 8010968:	3ff00000 	.word	0x3ff00000
 801096c:	7ff00000 	.word	0x7ff00000
 8010970:	7fe00000 	.word	0x7fe00000
 8010974:	7c9fffff 	.word	0x7c9fffff
 8010978:	3fe00000 	.word	0x3fe00000
 801097c:	bff00000 	.word	0xbff00000
 8010980:	7fefffff 	.word	0x7fefffff

08010984 <_strtod_r>:
 8010984:	4b01      	ldr	r3, [pc, #4]	; (801098c <_strtod_r+0x8>)
 8010986:	f7ff b9f7 	b.w	800fd78 <_strtod_l>
 801098a:	bf00      	nop
 801098c:	20000094 	.word	0x20000094

08010990 <strtod>:
 8010990:	460a      	mov	r2, r1
 8010992:	4601      	mov	r1, r0
 8010994:	4802      	ldr	r0, [pc, #8]	; (80109a0 <strtod+0x10>)
 8010996:	4b03      	ldr	r3, [pc, #12]	; (80109a4 <strtod+0x14>)
 8010998:	6800      	ldr	r0, [r0, #0]
 801099a:	f7ff b9ed 	b.w	800fd78 <_strtod_l>
 801099e:	bf00      	nop
 80109a0:	2000002c 	.word	0x2000002c
 80109a4:	20000094 	.word	0x20000094

080109a8 <_strtol_l.constprop.0>:
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ae:	d001      	beq.n	80109b4 <_strtol_l.constprop.0+0xc>
 80109b0:	2b24      	cmp	r3, #36	; 0x24
 80109b2:	d906      	bls.n	80109c2 <_strtol_l.constprop.0+0x1a>
 80109b4:	f7fe fa56 	bl	800ee64 <__errno>
 80109b8:	2316      	movs	r3, #22
 80109ba:	6003      	str	r3, [r0, #0]
 80109bc:	2000      	movs	r0, #0
 80109be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010aa8 <_strtol_l.constprop.0+0x100>
 80109c6:	460d      	mov	r5, r1
 80109c8:	462e      	mov	r6, r5
 80109ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80109d2:	f017 0708 	ands.w	r7, r7, #8
 80109d6:	d1f7      	bne.n	80109c8 <_strtol_l.constprop.0+0x20>
 80109d8:	2c2d      	cmp	r4, #45	; 0x2d
 80109da:	d132      	bne.n	8010a42 <_strtol_l.constprop.0+0x9a>
 80109dc:	782c      	ldrb	r4, [r5, #0]
 80109de:	2701      	movs	r7, #1
 80109e0:	1cb5      	adds	r5, r6, #2
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d05b      	beq.n	8010a9e <_strtol_l.constprop.0+0xf6>
 80109e6:	2b10      	cmp	r3, #16
 80109e8:	d109      	bne.n	80109fe <_strtol_l.constprop.0+0x56>
 80109ea:	2c30      	cmp	r4, #48	; 0x30
 80109ec:	d107      	bne.n	80109fe <_strtol_l.constprop.0+0x56>
 80109ee:	782c      	ldrb	r4, [r5, #0]
 80109f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80109f4:	2c58      	cmp	r4, #88	; 0x58
 80109f6:	d14d      	bne.n	8010a94 <_strtol_l.constprop.0+0xec>
 80109f8:	786c      	ldrb	r4, [r5, #1]
 80109fa:	2310      	movs	r3, #16
 80109fc:	3502      	adds	r5, #2
 80109fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010a02:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a06:	f04f 0c00 	mov.w	ip, #0
 8010a0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010a0e:	4666      	mov	r6, ip
 8010a10:	fb03 8a19 	mls	sl, r3, r9, r8
 8010a14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010a18:	f1be 0f09 	cmp.w	lr, #9
 8010a1c:	d816      	bhi.n	8010a4c <_strtol_l.constprop.0+0xa4>
 8010a1e:	4674      	mov	r4, lr
 8010a20:	42a3      	cmp	r3, r4
 8010a22:	dd24      	ble.n	8010a6e <_strtol_l.constprop.0+0xc6>
 8010a24:	f1bc 0f00 	cmp.w	ip, #0
 8010a28:	db1e      	blt.n	8010a68 <_strtol_l.constprop.0+0xc0>
 8010a2a:	45b1      	cmp	r9, r6
 8010a2c:	d31c      	bcc.n	8010a68 <_strtol_l.constprop.0+0xc0>
 8010a2e:	d101      	bne.n	8010a34 <_strtol_l.constprop.0+0x8c>
 8010a30:	45a2      	cmp	sl, r4
 8010a32:	db19      	blt.n	8010a68 <_strtol_l.constprop.0+0xc0>
 8010a34:	fb06 4603 	mla	r6, r6, r3, r4
 8010a38:	f04f 0c01 	mov.w	ip, #1
 8010a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a40:	e7e8      	b.n	8010a14 <_strtol_l.constprop.0+0x6c>
 8010a42:	2c2b      	cmp	r4, #43	; 0x2b
 8010a44:	bf04      	itt	eq
 8010a46:	782c      	ldrbeq	r4, [r5, #0]
 8010a48:	1cb5      	addeq	r5, r6, #2
 8010a4a:	e7ca      	b.n	80109e2 <_strtol_l.constprop.0+0x3a>
 8010a4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010a50:	f1be 0f19 	cmp.w	lr, #25
 8010a54:	d801      	bhi.n	8010a5a <_strtol_l.constprop.0+0xb2>
 8010a56:	3c37      	subs	r4, #55	; 0x37
 8010a58:	e7e2      	b.n	8010a20 <_strtol_l.constprop.0+0x78>
 8010a5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010a5e:	f1be 0f19 	cmp.w	lr, #25
 8010a62:	d804      	bhi.n	8010a6e <_strtol_l.constprop.0+0xc6>
 8010a64:	3c57      	subs	r4, #87	; 0x57
 8010a66:	e7db      	b.n	8010a20 <_strtol_l.constprop.0+0x78>
 8010a68:	f04f 3cff 	mov.w	ip, #4294967295
 8010a6c:	e7e6      	b.n	8010a3c <_strtol_l.constprop.0+0x94>
 8010a6e:	f1bc 0f00 	cmp.w	ip, #0
 8010a72:	da05      	bge.n	8010a80 <_strtol_l.constprop.0+0xd8>
 8010a74:	2322      	movs	r3, #34	; 0x22
 8010a76:	6003      	str	r3, [r0, #0]
 8010a78:	4646      	mov	r6, r8
 8010a7a:	b942      	cbnz	r2, 8010a8e <_strtol_l.constprop.0+0xe6>
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	e79e      	b.n	80109be <_strtol_l.constprop.0+0x16>
 8010a80:	b107      	cbz	r7, 8010a84 <_strtol_l.constprop.0+0xdc>
 8010a82:	4276      	negs	r6, r6
 8010a84:	2a00      	cmp	r2, #0
 8010a86:	d0f9      	beq.n	8010a7c <_strtol_l.constprop.0+0xd4>
 8010a88:	f1bc 0f00 	cmp.w	ip, #0
 8010a8c:	d000      	beq.n	8010a90 <_strtol_l.constprop.0+0xe8>
 8010a8e:	1e69      	subs	r1, r5, #1
 8010a90:	6011      	str	r1, [r2, #0]
 8010a92:	e7f3      	b.n	8010a7c <_strtol_l.constprop.0+0xd4>
 8010a94:	2430      	movs	r4, #48	; 0x30
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1b1      	bne.n	80109fe <_strtol_l.constprop.0+0x56>
 8010a9a:	2308      	movs	r3, #8
 8010a9c:	e7af      	b.n	80109fe <_strtol_l.constprop.0+0x56>
 8010a9e:	2c30      	cmp	r4, #48	; 0x30
 8010aa0:	d0a5      	beq.n	80109ee <_strtol_l.constprop.0+0x46>
 8010aa2:	230a      	movs	r3, #10
 8010aa4:	e7ab      	b.n	80109fe <_strtol_l.constprop.0+0x56>
 8010aa6:	bf00      	nop
 8010aa8:	08015179 	.word	0x08015179

08010aac <_strtol_r>:
 8010aac:	f7ff bf7c 	b.w	80109a8 <_strtol_l.constprop.0>

08010ab0 <strtol>:
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	460a      	mov	r2, r1
 8010ab4:	4601      	mov	r1, r0
 8010ab6:	4802      	ldr	r0, [pc, #8]	; (8010ac0 <strtol+0x10>)
 8010ab8:	6800      	ldr	r0, [r0, #0]
 8010aba:	f7ff bf75 	b.w	80109a8 <_strtol_l.constprop.0>
 8010abe:	bf00      	nop
 8010ac0:	2000002c 	.word	0x2000002c

08010ac4 <__swbuf_r>:
 8010ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac6:	460e      	mov	r6, r1
 8010ac8:	4614      	mov	r4, r2
 8010aca:	4605      	mov	r5, r0
 8010acc:	b118      	cbz	r0, 8010ad6 <__swbuf_r+0x12>
 8010ace:	6983      	ldr	r3, [r0, #24]
 8010ad0:	b90b      	cbnz	r3, 8010ad6 <__swbuf_r+0x12>
 8010ad2:	f001 f84d 	bl	8011b70 <__sinit>
 8010ad6:	4b21      	ldr	r3, [pc, #132]	; (8010b5c <__swbuf_r+0x98>)
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	d12b      	bne.n	8010b34 <__swbuf_r+0x70>
 8010adc:	686c      	ldr	r4, [r5, #4]
 8010ade:	69a3      	ldr	r3, [r4, #24]
 8010ae0:	60a3      	str	r3, [r4, #8]
 8010ae2:	89a3      	ldrh	r3, [r4, #12]
 8010ae4:	071a      	lsls	r2, r3, #28
 8010ae6:	d52f      	bpl.n	8010b48 <__swbuf_r+0x84>
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	b36b      	cbz	r3, 8010b48 <__swbuf_r+0x84>
 8010aec:	6923      	ldr	r3, [r4, #16]
 8010aee:	6820      	ldr	r0, [r4, #0]
 8010af0:	1ac0      	subs	r0, r0, r3
 8010af2:	6963      	ldr	r3, [r4, #20]
 8010af4:	b2f6      	uxtb	r6, r6
 8010af6:	4283      	cmp	r3, r0
 8010af8:	4637      	mov	r7, r6
 8010afa:	dc04      	bgt.n	8010b06 <__swbuf_r+0x42>
 8010afc:	4621      	mov	r1, r4
 8010afe:	4628      	mov	r0, r5
 8010b00:	f000 ffa2 	bl	8011a48 <_fflush_r>
 8010b04:	bb30      	cbnz	r0, 8010b54 <__swbuf_r+0x90>
 8010b06:	68a3      	ldr	r3, [r4, #8]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	60a3      	str	r3, [r4, #8]
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	6022      	str	r2, [r4, #0]
 8010b12:	701e      	strb	r6, [r3, #0]
 8010b14:	6963      	ldr	r3, [r4, #20]
 8010b16:	3001      	adds	r0, #1
 8010b18:	4283      	cmp	r3, r0
 8010b1a:	d004      	beq.n	8010b26 <__swbuf_r+0x62>
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	07db      	lsls	r3, r3, #31
 8010b20:	d506      	bpl.n	8010b30 <__swbuf_r+0x6c>
 8010b22:	2e0a      	cmp	r6, #10
 8010b24:	d104      	bne.n	8010b30 <__swbuf_r+0x6c>
 8010b26:	4621      	mov	r1, r4
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f000 ff8d 	bl	8011a48 <_fflush_r>
 8010b2e:	b988      	cbnz	r0, 8010b54 <__swbuf_r+0x90>
 8010b30:	4638      	mov	r0, r7
 8010b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b34:	4b0a      	ldr	r3, [pc, #40]	; (8010b60 <__swbuf_r+0x9c>)
 8010b36:	429c      	cmp	r4, r3
 8010b38:	d101      	bne.n	8010b3e <__swbuf_r+0x7a>
 8010b3a:	68ac      	ldr	r4, [r5, #8]
 8010b3c:	e7cf      	b.n	8010ade <__swbuf_r+0x1a>
 8010b3e:	4b09      	ldr	r3, [pc, #36]	; (8010b64 <__swbuf_r+0xa0>)
 8010b40:	429c      	cmp	r4, r3
 8010b42:	bf08      	it	eq
 8010b44:	68ec      	ldreq	r4, [r5, #12]
 8010b46:	e7ca      	b.n	8010ade <__swbuf_r+0x1a>
 8010b48:	4621      	mov	r1, r4
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f000 f80c 	bl	8010b68 <__swsetup_r>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d0cb      	beq.n	8010aec <__swbuf_r+0x28>
 8010b54:	f04f 37ff 	mov.w	r7, #4294967295
 8010b58:	e7ea      	b.n	8010b30 <__swbuf_r+0x6c>
 8010b5a:	bf00      	nop
 8010b5c:	0801532c 	.word	0x0801532c
 8010b60:	0801534c 	.word	0x0801534c
 8010b64:	0801530c 	.word	0x0801530c

08010b68 <__swsetup_r>:
 8010b68:	4b32      	ldr	r3, [pc, #200]	; (8010c34 <__swsetup_r+0xcc>)
 8010b6a:	b570      	push	{r4, r5, r6, lr}
 8010b6c:	681d      	ldr	r5, [r3, #0]
 8010b6e:	4606      	mov	r6, r0
 8010b70:	460c      	mov	r4, r1
 8010b72:	b125      	cbz	r5, 8010b7e <__swsetup_r+0x16>
 8010b74:	69ab      	ldr	r3, [r5, #24]
 8010b76:	b913      	cbnz	r3, 8010b7e <__swsetup_r+0x16>
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f000 fff9 	bl	8011b70 <__sinit>
 8010b7e:	4b2e      	ldr	r3, [pc, #184]	; (8010c38 <__swsetup_r+0xd0>)
 8010b80:	429c      	cmp	r4, r3
 8010b82:	d10f      	bne.n	8010ba4 <__swsetup_r+0x3c>
 8010b84:	686c      	ldr	r4, [r5, #4]
 8010b86:	89a3      	ldrh	r3, [r4, #12]
 8010b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b8c:	0719      	lsls	r1, r3, #28
 8010b8e:	d42c      	bmi.n	8010bea <__swsetup_r+0x82>
 8010b90:	06dd      	lsls	r5, r3, #27
 8010b92:	d411      	bmi.n	8010bb8 <__swsetup_r+0x50>
 8010b94:	2309      	movs	r3, #9
 8010b96:	6033      	str	r3, [r6, #0]
 8010b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b9c:	81a3      	strh	r3, [r4, #12]
 8010b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba2:	e03e      	b.n	8010c22 <__swsetup_r+0xba>
 8010ba4:	4b25      	ldr	r3, [pc, #148]	; (8010c3c <__swsetup_r+0xd4>)
 8010ba6:	429c      	cmp	r4, r3
 8010ba8:	d101      	bne.n	8010bae <__swsetup_r+0x46>
 8010baa:	68ac      	ldr	r4, [r5, #8]
 8010bac:	e7eb      	b.n	8010b86 <__swsetup_r+0x1e>
 8010bae:	4b24      	ldr	r3, [pc, #144]	; (8010c40 <__swsetup_r+0xd8>)
 8010bb0:	429c      	cmp	r4, r3
 8010bb2:	bf08      	it	eq
 8010bb4:	68ec      	ldreq	r4, [r5, #12]
 8010bb6:	e7e6      	b.n	8010b86 <__swsetup_r+0x1e>
 8010bb8:	0758      	lsls	r0, r3, #29
 8010bba:	d512      	bpl.n	8010be2 <__swsetup_r+0x7a>
 8010bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bbe:	b141      	cbz	r1, 8010bd2 <__swsetup_r+0x6a>
 8010bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bc4:	4299      	cmp	r1, r3
 8010bc6:	d002      	beq.n	8010bce <__swsetup_r+0x66>
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f002 f93b 	bl	8012e44 <_free_r>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010bd8:	81a3      	strh	r3, [r4, #12]
 8010bda:	2300      	movs	r3, #0
 8010bdc:	6063      	str	r3, [r4, #4]
 8010bde:	6923      	ldr	r3, [r4, #16]
 8010be0:	6023      	str	r3, [r4, #0]
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	f043 0308 	orr.w	r3, r3, #8
 8010be8:	81a3      	strh	r3, [r4, #12]
 8010bea:	6923      	ldr	r3, [r4, #16]
 8010bec:	b94b      	cbnz	r3, 8010c02 <__swsetup_r+0x9a>
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bf8:	d003      	beq.n	8010c02 <__swsetup_r+0x9a>
 8010bfa:	4621      	mov	r1, r4
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	f001 fbef 	bl	80123e0 <__smakebuf_r>
 8010c02:	89a0      	ldrh	r0, [r4, #12]
 8010c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c08:	f010 0301 	ands.w	r3, r0, #1
 8010c0c:	d00a      	beq.n	8010c24 <__swsetup_r+0xbc>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	60a3      	str	r3, [r4, #8]
 8010c12:	6963      	ldr	r3, [r4, #20]
 8010c14:	425b      	negs	r3, r3
 8010c16:	61a3      	str	r3, [r4, #24]
 8010c18:	6923      	ldr	r3, [r4, #16]
 8010c1a:	b943      	cbnz	r3, 8010c2e <__swsetup_r+0xc6>
 8010c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c20:	d1ba      	bne.n	8010b98 <__swsetup_r+0x30>
 8010c22:	bd70      	pop	{r4, r5, r6, pc}
 8010c24:	0781      	lsls	r1, r0, #30
 8010c26:	bf58      	it	pl
 8010c28:	6963      	ldrpl	r3, [r4, #20]
 8010c2a:	60a3      	str	r3, [r4, #8]
 8010c2c:	e7f4      	b.n	8010c18 <__swsetup_r+0xb0>
 8010c2e:	2000      	movs	r0, #0
 8010c30:	e7f7      	b.n	8010c22 <__swsetup_r+0xba>
 8010c32:	bf00      	nop
 8010c34:	2000002c 	.word	0x2000002c
 8010c38:	0801532c 	.word	0x0801532c
 8010c3c:	0801534c 	.word	0x0801534c
 8010c40:	0801530c 	.word	0x0801530c

08010c44 <quorem>:
 8010c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c48:	6903      	ldr	r3, [r0, #16]
 8010c4a:	690c      	ldr	r4, [r1, #16]
 8010c4c:	42a3      	cmp	r3, r4
 8010c4e:	4607      	mov	r7, r0
 8010c50:	f2c0 8081 	blt.w	8010d56 <quorem+0x112>
 8010c54:	3c01      	subs	r4, #1
 8010c56:	f101 0814 	add.w	r8, r1, #20
 8010c5a:	f100 0514 	add.w	r5, r0, #20
 8010c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010c74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c78:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c7c:	d331      	bcc.n	8010ce2 <quorem+0x9e>
 8010c7e:	f04f 0e00 	mov.w	lr, #0
 8010c82:	4640      	mov	r0, r8
 8010c84:	46ac      	mov	ip, r5
 8010c86:	46f2      	mov	sl, lr
 8010c88:	f850 2b04 	ldr.w	r2, [r0], #4
 8010c8c:	b293      	uxth	r3, r2
 8010c8e:	fb06 e303 	mla	r3, r6, r3, lr
 8010c92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	ebaa 0303 	sub.w	r3, sl, r3
 8010c9c:	f8dc a000 	ldr.w	sl, [ip]
 8010ca0:	0c12      	lsrs	r2, r2, #16
 8010ca2:	fa13 f38a 	uxtah	r3, r3, sl
 8010ca6:	fb06 e202 	mla	r2, r6, r2, lr
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	9b00      	ldr	r3, [sp, #0]
 8010cae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010cb2:	b292      	uxth	r2, r2
 8010cb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010cbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8010cc0:	4581      	cmp	r9, r0
 8010cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cc6:	f84c 3b04 	str.w	r3, [ip], #4
 8010cca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010cce:	d2db      	bcs.n	8010c88 <quorem+0x44>
 8010cd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8010cd4:	b92b      	cbnz	r3, 8010ce2 <quorem+0x9e>
 8010cd6:	9b01      	ldr	r3, [sp, #4]
 8010cd8:	3b04      	subs	r3, #4
 8010cda:	429d      	cmp	r5, r3
 8010cdc:	461a      	mov	r2, r3
 8010cde:	d32e      	bcc.n	8010d3e <quorem+0xfa>
 8010ce0:	613c      	str	r4, [r7, #16]
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	f001 fea2 	bl	8012a2c <__mcmp>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	db24      	blt.n	8010d36 <quorem+0xf2>
 8010cec:	3601      	adds	r6, #1
 8010cee:	4628      	mov	r0, r5
 8010cf0:	f04f 0c00 	mov.w	ip, #0
 8010cf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8010cf8:	f8d0 e000 	ldr.w	lr, [r0]
 8010cfc:	b293      	uxth	r3, r2
 8010cfe:	ebac 0303 	sub.w	r3, ip, r3
 8010d02:	0c12      	lsrs	r2, r2, #16
 8010d04:	fa13 f38e 	uxtah	r3, r3, lr
 8010d08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d16:	45c1      	cmp	r9, r8
 8010d18:	f840 3b04 	str.w	r3, [r0], #4
 8010d1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010d20:	d2e8      	bcs.n	8010cf4 <quorem+0xb0>
 8010d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d2a:	b922      	cbnz	r2, 8010d36 <quorem+0xf2>
 8010d2c:	3b04      	subs	r3, #4
 8010d2e:	429d      	cmp	r5, r3
 8010d30:	461a      	mov	r2, r3
 8010d32:	d30a      	bcc.n	8010d4a <quorem+0x106>
 8010d34:	613c      	str	r4, [r7, #16]
 8010d36:	4630      	mov	r0, r6
 8010d38:	b003      	add	sp, #12
 8010d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3e:	6812      	ldr	r2, [r2, #0]
 8010d40:	3b04      	subs	r3, #4
 8010d42:	2a00      	cmp	r2, #0
 8010d44:	d1cc      	bne.n	8010ce0 <quorem+0x9c>
 8010d46:	3c01      	subs	r4, #1
 8010d48:	e7c7      	b.n	8010cda <quorem+0x96>
 8010d4a:	6812      	ldr	r2, [r2, #0]
 8010d4c:	3b04      	subs	r3, #4
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	d1f0      	bne.n	8010d34 <quorem+0xf0>
 8010d52:	3c01      	subs	r4, #1
 8010d54:	e7eb      	b.n	8010d2e <quorem+0xea>
 8010d56:	2000      	movs	r0, #0
 8010d58:	e7ee      	b.n	8010d38 <quorem+0xf4>
 8010d5a:	0000      	movs	r0, r0
 8010d5c:	0000      	movs	r0, r0
	...

08010d60 <_dtoa_r>:
 8010d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d64:	ed2d 8b04 	vpush	{d8-d9}
 8010d68:	ec57 6b10 	vmov	r6, r7, d0
 8010d6c:	b093      	sub	sp, #76	; 0x4c
 8010d6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010d70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010d74:	9106      	str	r1, [sp, #24]
 8010d76:	ee10 aa10 	vmov	sl, s0
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8010d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8010d80:	46bb      	mov	fp, r7
 8010d82:	b975      	cbnz	r5, 8010da2 <_dtoa_r+0x42>
 8010d84:	2010      	movs	r0, #16
 8010d86:	f001 fb6b 	bl	8012460 <malloc>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	6260      	str	r0, [r4, #36]	; 0x24
 8010d8e:	b920      	cbnz	r0, 8010d9a <_dtoa_r+0x3a>
 8010d90:	4ba7      	ldr	r3, [pc, #668]	; (8011030 <_dtoa_r+0x2d0>)
 8010d92:	21ea      	movs	r1, #234	; 0xea
 8010d94:	48a7      	ldr	r0, [pc, #668]	; (8011034 <_dtoa_r+0x2d4>)
 8010d96:	f002 fc79 	bl	801368c <__assert_func>
 8010d9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d9e:	6005      	str	r5, [r0, #0]
 8010da0:	60c5      	str	r5, [r0, #12]
 8010da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010da4:	6819      	ldr	r1, [r3, #0]
 8010da6:	b151      	cbz	r1, 8010dbe <_dtoa_r+0x5e>
 8010da8:	685a      	ldr	r2, [r3, #4]
 8010daa:	604a      	str	r2, [r1, #4]
 8010dac:	2301      	movs	r3, #1
 8010dae:	4093      	lsls	r3, r2
 8010db0:	608b      	str	r3, [r1, #8]
 8010db2:	4620      	mov	r0, r4
 8010db4:	f001 fbae 	bl	8012514 <_Bfree>
 8010db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dba:	2200      	movs	r2, #0
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	1e3b      	subs	r3, r7, #0
 8010dc0:	bfaa      	itet	ge
 8010dc2:	2300      	movge	r3, #0
 8010dc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010dc8:	f8c8 3000 	strge.w	r3, [r8]
 8010dcc:	4b9a      	ldr	r3, [pc, #616]	; (8011038 <_dtoa_r+0x2d8>)
 8010dce:	bfbc      	itt	lt
 8010dd0:	2201      	movlt	r2, #1
 8010dd2:	f8c8 2000 	strlt.w	r2, [r8]
 8010dd6:	ea33 030b 	bics.w	r3, r3, fp
 8010dda:	d11b      	bne.n	8010e14 <_dtoa_r+0xb4>
 8010ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010de8:	4333      	orrs	r3, r6
 8010dea:	f000 8592 	beq.w	8011912 <_dtoa_r+0xbb2>
 8010dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010df0:	b963      	cbnz	r3, 8010e0c <_dtoa_r+0xac>
 8010df2:	4b92      	ldr	r3, [pc, #584]	; (801103c <_dtoa_r+0x2dc>)
 8010df4:	e022      	b.n	8010e3c <_dtoa_r+0xdc>
 8010df6:	4b92      	ldr	r3, [pc, #584]	; (8011040 <_dtoa_r+0x2e0>)
 8010df8:	9301      	str	r3, [sp, #4]
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	9801      	ldr	r0, [sp, #4]
 8010e02:	b013      	add	sp, #76	; 0x4c
 8010e04:	ecbd 8b04 	vpop	{d8-d9}
 8010e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0c:	4b8b      	ldr	r3, [pc, #556]	; (801103c <_dtoa_r+0x2dc>)
 8010e0e:	9301      	str	r3, [sp, #4]
 8010e10:	3303      	adds	r3, #3
 8010e12:	e7f3      	b.n	8010dfc <_dtoa_r+0x9c>
 8010e14:	2200      	movs	r2, #0
 8010e16:	2300      	movs	r3, #0
 8010e18:	4650      	mov	r0, sl
 8010e1a:	4659      	mov	r1, fp
 8010e1c:	f7ef fe7c 	bl	8000b18 <__aeabi_dcmpeq>
 8010e20:	ec4b ab19 	vmov	d9, sl, fp
 8010e24:	4680      	mov	r8, r0
 8010e26:	b158      	cbz	r0, 8010e40 <_dtoa_r+0xe0>
 8010e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	6013      	str	r3, [r2, #0]
 8010e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f000 856b 	beq.w	801190c <_dtoa_r+0xbac>
 8010e36:	4883      	ldr	r0, [pc, #524]	; (8011044 <_dtoa_r+0x2e4>)
 8010e38:	6018      	str	r0, [r3, #0]
 8010e3a:	1e43      	subs	r3, r0, #1
 8010e3c:	9301      	str	r3, [sp, #4]
 8010e3e:	e7df      	b.n	8010e00 <_dtoa_r+0xa0>
 8010e40:	ec4b ab10 	vmov	d0, sl, fp
 8010e44:	aa10      	add	r2, sp, #64	; 0x40
 8010e46:	a911      	add	r1, sp, #68	; 0x44
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f001 ff11 	bl	8012c70 <__d2b>
 8010e4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010e52:	ee08 0a10 	vmov	s16, r0
 8010e56:	2d00      	cmp	r5, #0
 8010e58:	f000 8084 	beq.w	8010f64 <_dtoa_r+0x204>
 8010e5c:	ee19 3a90 	vmov	r3, s19
 8010e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010e68:	4656      	mov	r6, sl
 8010e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010e72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010e76:	4b74      	ldr	r3, [pc, #464]	; (8011048 <_dtoa_r+0x2e8>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7ef fa2b 	bl	80002d8 <__aeabi_dsub>
 8010e82:	a365      	add	r3, pc, #404	; (adr r3, 8011018 <_dtoa_r+0x2b8>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	f7ef fbde 	bl	8000648 <__aeabi_dmul>
 8010e8c:	a364      	add	r3, pc, #400	; (adr r3, 8011020 <_dtoa_r+0x2c0>)
 8010e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e92:	f7ef fa23 	bl	80002dc <__adddf3>
 8010e96:	4606      	mov	r6, r0
 8010e98:	4628      	mov	r0, r5
 8010e9a:	460f      	mov	r7, r1
 8010e9c:	f7ef fb6a 	bl	8000574 <__aeabi_i2d>
 8010ea0:	a361      	add	r3, pc, #388	; (adr r3, 8011028 <_dtoa_r+0x2c8>)
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	f7ef fbcf 	bl	8000648 <__aeabi_dmul>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4630      	mov	r0, r6
 8010eb0:	4639      	mov	r1, r7
 8010eb2:	f7ef fa13 	bl	80002dc <__adddf3>
 8010eb6:	4606      	mov	r6, r0
 8010eb8:	460f      	mov	r7, r1
 8010eba:	f7ef fe75 	bl	8000ba8 <__aeabi_d2iz>
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	9000      	str	r0, [sp, #0]
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	4639      	mov	r1, r7
 8010ec8:	f7ef fe30 	bl	8000b2c <__aeabi_dcmplt>
 8010ecc:	b150      	cbz	r0, 8010ee4 <_dtoa_r+0x184>
 8010ece:	9800      	ldr	r0, [sp, #0]
 8010ed0:	f7ef fb50 	bl	8000574 <__aeabi_i2d>
 8010ed4:	4632      	mov	r2, r6
 8010ed6:	463b      	mov	r3, r7
 8010ed8:	f7ef fe1e 	bl	8000b18 <__aeabi_dcmpeq>
 8010edc:	b910      	cbnz	r0, 8010ee4 <_dtoa_r+0x184>
 8010ede:	9b00      	ldr	r3, [sp, #0]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	9b00      	ldr	r3, [sp, #0]
 8010ee6:	2b16      	cmp	r3, #22
 8010ee8:	d85a      	bhi.n	8010fa0 <_dtoa_r+0x240>
 8010eea:	9a00      	ldr	r2, [sp, #0]
 8010eec:	4b57      	ldr	r3, [pc, #348]	; (801104c <_dtoa_r+0x2ec>)
 8010eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	ec51 0b19 	vmov	r0, r1, d9
 8010efa:	f7ef fe17 	bl	8000b2c <__aeabi_dcmplt>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d050      	beq.n	8010fa4 <_dtoa_r+0x244>
 8010f02:	9b00      	ldr	r3, [sp, #0]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	2300      	movs	r3, #0
 8010f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f0e:	1b5d      	subs	r5, r3, r5
 8010f10:	1e6b      	subs	r3, r5, #1
 8010f12:	9305      	str	r3, [sp, #20]
 8010f14:	bf45      	ittet	mi
 8010f16:	f1c5 0301 	rsbmi	r3, r5, #1
 8010f1a:	9304      	strmi	r3, [sp, #16]
 8010f1c:	2300      	movpl	r3, #0
 8010f1e:	2300      	movmi	r3, #0
 8010f20:	bf4c      	ite	mi
 8010f22:	9305      	strmi	r3, [sp, #20]
 8010f24:	9304      	strpl	r3, [sp, #16]
 8010f26:	9b00      	ldr	r3, [sp, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	db3d      	blt.n	8010fa8 <_dtoa_r+0x248>
 8010f2c:	9b05      	ldr	r3, [sp, #20]
 8010f2e:	9a00      	ldr	r2, [sp, #0]
 8010f30:	920a      	str	r2, [sp, #40]	; 0x28
 8010f32:	4413      	add	r3, r2
 8010f34:	9305      	str	r3, [sp, #20]
 8010f36:	2300      	movs	r3, #0
 8010f38:	9307      	str	r3, [sp, #28]
 8010f3a:	9b06      	ldr	r3, [sp, #24]
 8010f3c:	2b09      	cmp	r3, #9
 8010f3e:	f200 8089 	bhi.w	8011054 <_dtoa_r+0x2f4>
 8010f42:	2b05      	cmp	r3, #5
 8010f44:	bfc4      	itt	gt
 8010f46:	3b04      	subgt	r3, #4
 8010f48:	9306      	strgt	r3, [sp, #24]
 8010f4a:	9b06      	ldr	r3, [sp, #24]
 8010f4c:	f1a3 0302 	sub.w	r3, r3, #2
 8010f50:	bfcc      	ite	gt
 8010f52:	2500      	movgt	r5, #0
 8010f54:	2501      	movle	r5, #1
 8010f56:	2b03      	cmp	r3, #3
 8010f58:	f200 8087 	bhi.w	801106a <_dtoa_r+0x30a>
 8010f5c:	e8df f003 	tbb	[pc, r3]
 8010f60:	59383a2d 	.word	0x59383a2d
 8010f64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010f68:	441d      	add	r5, r3
 8010f6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010f6e:	2b20      	cmp	r3, #32
 8010f70:	bfc1      	itttt	gt
 8010f72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010f76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010f7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010f7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010f82:	bfda      	itte	le
 8010f84:	f1c3 0320 	rsble	r3, r3, #32
 8010f88:	fa06 f003 	lslle.w	r0, r6, r3
 8010f8c:	4318      	orrgt	r0, r3
 8010f8e:	f7ef fae1 	bl	8000554 <__aeabi_ui2d>
 8010f92:	2301      	movs	r3, #1
 8010f94:	4606      	mov	r6, r0
 8010f96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010f9a:	3d01      	subs	r5, #1
 8010f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f9e:	e76a      	b.n	8010e76 <_dtoa_r+0x116>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e7b2      	b.n	8010f0a <_dtoa_r+0x1aa>
 8010fa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010fa6:	e7b1      	b.n	8010f0c <_dtoa_r+0x1ac>
 8010fa8:	9b04      	ldr	r3, [sp, #16]
 8010faa:	9a00      	ldr	r2, [sp, #0]
 8010fac:	1a9b      	subs	r3, r3, r2
 8010fae:	9304      	str	r3, [sp, #16]
 8010fb0:	4253      	negs	r3, r2
 8010fb2:	9307      	str	r3, [sp, #28]
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8010fb8:	e7bf      	b.n	8010f3a <_dtoa_r+0x1da>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	9308      	str	r3, [sp, #32]
 8010fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dc55      	bgt.n	8011070 <_dtoa_r+0x310>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8010fce:	e00c      	b.n	8010fea <_dtoa_r+0x28a>
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e7f3      	b.n	8010fbc <_dtoa_r+0x25c>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fd8:	9308      	str	r3, [sp, #32]
 8010fda:	9b00      	ldr	r3, [sp, #0]
 8010fdc:	4413      	add	r3, r2
 8010fde:	9302      	str	r3, [sp, #8]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	9303      	str	r3, [sp, #12]
 8010fe6:	bfb8      	it	lt
 8010fe8:	2301      	movlt	r3, #1
 8010fea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010fec:	2200      	movs	r2, #0
 8010fee:	6042      	str	r2, [r0, #4]
 8010ff0:	2204      	movs	r2, #4
 8010ff2:	f102 0614 	add.w	r6, r2, #20
 8010ff6:	429e      	cmp	r6, r3
 8010ff8:	6841      	ldr	r1, [r0, #4]
 8010ffa:	d93d      	bls.n	8011078 <_dtoa_r+0x318>
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f001 fa49 	bl	8012494 <_Balloc>
 8011002:	9001      	str	r0, [sp, #4]
 8011004:	2800      	cmp	r0, #0
 8011006:	d13b      	bne.n	8011080 <_dtoa_r+0x320>
 8011008:	4b11      	ldr	r3, [pc, #68]	; (8011050 <_dtoa_r+0x2f0>)
 801100a:	4602      	mov	r2, r0
 801100c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011010:	e6c0      	b.n	8010d94 <_dtoa_r+0x34>
 8011012:	2301      	movs	r3, #1
 8011014:	e7df      	b.n	8010fd6 <_dtoa_r+0x276>
 8011016:	bf00      	nop
 8011018:	636f4361 	.word	0x636f4361
 801101c:	3fd287a7 	.word	0x3fd287a7
 8011020:	8b60c8b3 	.word	0x8b60c8b3
 8011024:	3fc68a28 	.word	0x3fc68a28
 8011028:	509f79fb 	.word	0x509f79fb
 801102c:	3fd34413 	.word	0x3fd34413
 8011030:	08015286 	.word	0x08015286
 8011034:	0801529d 	.word	0x0801529d
 8011038:	7ff00000 	.word	0x7ff00000
 801103c:	08015282 	.word	0x08015282
 8011040:	08015279 	.word	0x08015279
 8011044:	080150f9 	.word	0x080150f9
 8011048:	3ff80000 	.word	0x3ff80000
 801104c:	08015470 	.word	0x08015470
 8011050:	080152f8 	.word	0x080152f8
 8011054:	2501      	movs	r5, #1
 8011056:	2300      	movs	r3, #0
 8011058:	9306      	str	r3, [sp, #24]
 801105a:	9508      	str	r5, [sp, #32]
 801105c:	f04f 33ff 	mov.w	r3, #4294967295
 8011060:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011064:	2200      	movs	r2, #0
 8011066:	2312      	movs	r3, #18
 8011068:	e7b0      	b.n	8010fcc <_dtoa_r+0x26c>
 801106a:	2301      	movs	r3, #1
 801106c:	9308      	str	r3, [sp, #32]
 801106e:	e7f5      	b.n	801105c <_dtoa_r+0x2fc>
 8011070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011076:	e7b8      	b.n	8010fea <_dtoa_r+0x28a>
 8011078:	3101      	adds	r1, #1
 801107a:	6041      	str	r1, [r0, #4]
 801107c:	0052      	lsls	r2, r2, #1
 801107e:	e7b8      	b.n	8010ff2 <_dtoa_r+0x292>
 8011080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011082:	9a01      	ldr	r2, [sp, #4]
 8011084:	601a      	str	r2, [r3, #0]
 8011086:	9b03      	ldr	r3, [sp, #12]
 8011088:	2b0e      	cmp	r3, #14
 801108a:	f200 809d 	bhi.w	80111c8 <_dtoa_r+0x468>
 801108e:	2d00      	cmp	r5, #0
 8011090:	f000 809a 	beq.w	80111c8 <_dtoa_r+0x468>
 8011094:	9b00      	ldr	r3, [sp, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	dd32      	ble.n	8011100 <_dtoa_r+0x3a0>
 801109a:	4ab7      	ldr	r2, [pc, #732]	; (8011378 <_dtoa_r+0x618>)
 801109c:	f003 030f 	and.w	r3, r3, #15
 80110a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80110a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110a8:	9b00      	ldr	r3, [sp, #0]
 80110aa:	05d8      	lsls	r0, r3, #23
 80110ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80110b0:	d516      	bpl.n	80110e0 <_dtoa_r+0x380>
 80110b2:	4bb2      	ldr	r3, [pc, #712]	; (801137c <_dtoa_r+0x61c>)
 80110b4:	ec51 0b19 	vmov	r0, r1, d9
 80110b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80110bc:	f7ef fbee 	bl	800089c <__aeabi_ddiv>
 80110c0:	f007 070f 	and.w	r7, r7, #15
 80110c4:	4682      	mov	sl, r0
 80110c6:	468b      	mov	fp, r1
 80110c8:	2503      	movs	r5, #3
 80110ca:	4eac      	ldr	r6, [pc, #688]	; (801137c <_dtoa_r+0x61c>)
 80110cc:	b957      	cbnz	r7, 80110e4 <_dtoa_r+0x384>
 80110ce:	4642      	mov	r2, r8
 80110d0:	464b      	mov	r3, r9
 80110d2:	4650      	mov	r0, sl
 80110d4:	4659      	mov	r1, fp
 80110d6:	f7ef fbe1 	bl	800089c <__aeabi_ddiv>
 80110da:	4682      	mov	sl, r0
 80110dc:	468b      	mov	fp, r1
 80110de:	e028      	b.n	8011132 <_dtoa_r+0x3d2>
 80110e0:	2502      	movs	r5, #2
 80110e2:	e7f2      	b.n	80110ca <_dtoa_r+0x36a>
 80110e4:	07f9      	lsls	r1, r7, #31
 80110e6:	d508      	bpl.n	80110fa <_dtoa_r+0x39a>
 80110e8:	4640      	mov	r0, r8
 80110ea:	4649      	mov	r1, r9
 80110ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80110f0:	f7ef faaa 	bl	8000648 <__aeabi_dmul>
 80110f4:	3501      	adds	r5, #1
 80110f6:	4680      	mov	r8, r0
 80110f8:	4689      	mov	r9, r1
 80110fa:	107f      	asrs	r7, r7, #1
 80110fc:	3608      	adds	r6, #8
 80110fe:	e7e5      	b.n	80110cc <_dtoa_r+0x36c>
 8011100:	f000 809b 	beq.w	801123a <_dtoa_r+0x4da>
 8011104:	9b00      	ldr	r3, [sp, #0]
 8011106:	4f9d      	ldr	r7, [pc, #628]	; (801137c <_dtoa_r+0x61c>)
 8011108:	425e      	negs	r6, r3
 801110a:	4b9b      	ldr	r3, [pc, #620]	; (8011378 <_dtoa_r+0x618>)
 801110c:	f006 020f 	and.w	r2, r6, #15
 8011110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	ec51 0b19 	vmov	r0, r1, d9
 801111c:	f7ef fa94 	bl	8000648 <__aeabi_dmul>
 8011120:	1136      	asrs	r6, r6, #4
 8011122:	4682      	mov	sl, r0
 8011124:	468b      	mov	fp, r1
 8011126:	2300      	movs	r3, #0
 8011128:	2502      	movs	r5, #2
 801112a:	2e00      	cmp	r6, #0
 801112c:	d17a      	bne.n	8011224 <_dtoa_r+0x4c4>
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1d3      	bne.n	80110da <_dtoa_r+0x37a>
 8011132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 8082 	beq.w	801123e <_dtoa_r+0x4de>
 801113a:	4b91      	ldr	r3, [pc, #580]	; (8011380 <_dtoa_r+0x620>)
 801113c:	2200      	movs	r2, #0
 801113e:	4650      	mov	r0, sl
 8011140:	4659      	mov	r1, fp
 8011142:	f7ef fcf3 	bl	8000b2c <__aeabi_dcmplt>
 8011146:	2800      	cmp	r0, #0
 8011148:	d079      	beq.n	801123e <_dtoa_r+0x4de>
 801114a:	9b03      	ldr	r3, [sp, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d076      	beq.n	801123e <_dtoa_r+0x4de>
 8011150:	9b02      	ldr	r3, [sp, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	dd36      	ble.n	80111c4 <_dtoa_r+0x464>
 8011156:	9b00      	ldr	r3, [sp, #0]
 8011158:	4650      	mov	r0, sl
 801115a:	4659      	mov	r1, fp
 801115c:	1e5f      	subs	r7, r3, #1
 801115e:	2200      	movs	r2, #0
 8011160:	4b88      	ldr	r3, [pc, #544]	; (8011384 <_dtoa_r+0x624>)
 8011162:	f7ef fa71 	bl	8000648 <__aeabi_dmul>
 8011166:	9e02      	ldr	r6, [sp, #8]
 8011168:	4682      	mov	sl, r0
 801116a:	468b      	mov	fp, r1
 801116c:	3501      	adds	r5, #1
 801116e:	4628      	mov	r0, r5
 8011170:	f7ef fa00 	bl	8000574 <__aeabi_i2d>
 8011174:	4652      	mov	r2, sl
 8011176:	465b      	mov	r3, fp
 8011178:	f7ef fa66 	bl	8000648 <__aeabi_dmul>
 801117c:	4b82      	ldr	r3, [pc, #520]	; (8011388 <_dtoa_r+0x628>)
 801117e:	2200      	movs	r2, #0
 8011180:	f7ef f8ac 	bl	80002dc <__adddf3>
 8011184:	46d0      	mov	r8, sl
 8011186:	46d9      	mov	r9, fp
 8011188:	4682      	mov	sl, r0
 801118a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801118e:	2e00      	cmp	r6, #0
 8011190:	d158      	bne.n	8011244 <_dtoa_r+0x4e4>
 8011192:	4b7e      	ldr	r3, [pc, #504]	; (801138c <_dtoa_r+0x62c>)
 8011194:	2200      	movs	r2, #0
 8011196:	4640      	mov	r0, r8
 8011198:	4649      	mov	r1, r9
 801119a:	f7ef f89d 	bl	80002d8 <__aeabi_dsub>
 801119e:	4652      	mov	r2, sl
 80111a0:	465b      	mov	r3, fp
 80111a2:	4680      	mov	r8, r0
 80111a4:	4689      	mov	r9, r1
 80111a6:	f7ef fcdf 	bl	8000b68 <__aeabi_dcmpgt>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	f040 8295 	bne.w	80116da <_dtoa_r+0x97a>
 80111b0:	4652      	mov	r2, sl
 80111b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80111b6:	4640      	mov	r0, r8
 80111b8:	4649      	mov	r1, r9
 80111ba:	f7ef fcb7 	bl	8000b2c <__aeabi_dcmplt>
 80111be:	2800      	cmp	r0, #0
 80111c0:	f040 8289 	bne.w	80116d6 <_dtoa_r+0x976>
 80111c4:	ec5b ab19 	vmov	sl, fp, d9
 80111c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f2c0 8148 	blt.w	8011460 <_dtoa_r+0x700>
 80111d0:	9a00      	ldr	r2, [sp, #0]
 80111d2:	2a0e      	cmp	r2, #14
 80111d4:	f300 8144 	bgt.w	8011460 <_dtoa_r+0x700>
 80111d8:	4b67      	ldr	r3, [pc, #412]	; (8011378 <_dtoa_r+0x618>)
 80111da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80111e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f280 80d5 	bge.w	8011394 <_dtoa_r+0x634>
 80111ea:	9b03      	ldr	r3, [sp, #12]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f300 80d1 	bgt.w	8011394 <_dtoa_r+0x634>
 80111f2:	f040 826f 	bne.w	80116d4 <_dtoa_r+0x974>
 80111f6:	4b65      	ldr	r3, [pc, #404]	; (801138c <_dtoa_r+0x62c>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	4640      	mov	r0, r8
 80111fc:	4649      	mov	r1, r9
 80111fe:	f7ef fa23 	bl	8000648 <__aeabi_dmul>
 8011202:	4652      	mov	r2, sl
 8011204:	465b      	mov	r3, fp
 8011206:	f7ef fca5 	bl	8000b54 <__aeabi_dcmpge>
 801120a:	9e03      	ldr	r6, [sp, #12]
 801120c:	4637      	mov	r7, r6
 801120e:	2800      	cmp	r0, #0
 8011210:	f040 8245 	bne.w	801169e <_dtoa_r+0x93e>
 8011214:	9d01      	ldr	r5, [sp, #4]
 8011216:	2331      	movs	r3, #49	; 0x31
 8011218:	f805 3b01 	strb.w	r3, [r5], #1
 801121c:	9b00      	ldr	r3, [sp, #0]
 801121e:	3301      	adds	r3, #1
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	e240      	b.n	80116a6 <_dtoa_r+0x946>
 8011224:	07f2      	lsls	r2, r6, #31
 8011226:	d505      	bpl.n	8011234 <_dtoa_r+0x4d4>
 8011228:	e9d7 2300 	ldrd	r2, r3, [r7]
 801122c:	f7ef fa0c 	bl	8000648 <__aeabi_dmul>
 8011230:	3501      	adds	r5, #1
 8011232:	2301      	movs	r3, #1
 8011234:	1076      	asrs	r6, r6, #1
 8011236:	3708      	adds	r7, #8
 8011238:	e777      	b.n	801112a <_dtoa_r+0x3ca>
 801123a:	2502      	movs	r5, #2
 801123c:	e779      	b.n	8011132 <_dtoa_r+0x3d2>
 801123e:	9f00      	ldr	r7, [sp, #0]
 8011240:	9e03      	ldr	r6, [sp, #12]
 8011242:	e794      	b.n	801116e <_dtoa_r+0x40e>
 8011244:	9901      	ldr	r1, [sp, #4]
 8011246:	4b4c      	ldr	r3, [pc, #304]	; (8011378 <_dtoa_r+0x618>)
 8011248:	4431      	add	r1, r6
 801124a:	910d      	str	r1, [sp, #52]	; 0x34
 801124c:	9908      	ldr	r1, [sp, #32]
 801124e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011256:	2900      	cmp	r1, #0
 8011258:	d043      	beq.n	80112e2 <_dtoa_r+0x582>
 801125a:	494d      	ldr	r1, [pc, #308]	; (8011390 <_dtoa_r+0x630>)
 801125c:	2000      	movs	r0, #0
 801125e:	f7ef fb1d 	bl	800089c <__aeabi_ddiv>
 8011262:	4652      	mov	r2, sl
 8011264:	465b      	mov	r3, fp
 8011266:	f7ef f837 	bl	80002d8 <__aeabi_dsub>
 801126a:	9d01      	ldr	r5, [sp, #4]
 801126c:	4682      	mov	sl, r0
 801126e:	468b      	mov	fp, r1
 8011270:	4649      	mov	r1, r9
 8011272:	4640      	mov	r0, r8
 8011274:	f7ef fc98 	bl	8000ba8 <__aeabi_d2iz>
 8011278:	4606      	mov	r6, r0
 801127a:	f7ef f97b 	bl	8000574 <__aeabi_i2d>
 801127e:	4602      	mov	r2, r0
 8011280:	460b      	mov	r3, r1
 8011282:	4640      	mov	r0, r8
 8011284:	4649      	mov	r1, r9
 8011286:	f7ef f827 	bl	80002d8 <__aeabi_dsub>
 801128a:	3630      	adds	r6, #48	; 0x30
 801128c:	f805 6b01 	strb.w	r6, [r5], #1
 8011290:	4652      	mov	r2, sl
 8011292:	465b      	mov	r3, fp
 8011294:	4680      	mov	r8, r0
 8011296:	4689      	mov	r9, r1
 8011298:	f7ef fc48 	bl	8000b2c <__aeabi_dcmplt>
 801129c:	2800      	cmp	r0, #0
 801129e:	d163      	bne.n	8011368 <_dtoa_r+0x608>
 80112a0:	4642      	mov	r2, r8
 80112a2:	464b      	mov	r3, r9
 80112a4:	4936      	ldr	r1, [pc, #216]	; (8011380 <_dtoa_r+0x620>)
 80112a6:	2000      	movs	r0, #0
 80112a8:	f7ef f816 	bl	80002d8 <__aeabi_dsub>
 80112ac:	4652      	mov	r2, sl
 80112ae:	465b      	mov	r3, fp
 80112b0:	f7ef fc3c 	bl	8000b2c <__aeabi_dcmplt>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	f040 80b5 	bne.w	8011424 <_dtoa_r+0x6c4>
 80112ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112bc:	429d      	cmp	r5, r3
 80112be:	d081      	beq.n	80111c4 <_dtoa_r+0x464>
 80112c0:	4b30      	ldr	r3, [pc, #192]	; (8011384 <_dtoa_r+0x624>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	4650      	mov	r0, sl
 80112c6:	4659      	mov	r1, fp
 80112c8:	f7ef f9be 	bl	8000648 <__aeabi_dmul>
 80112cc:	4b2d      	ldr	r3, [pc, #180]	; (8011384 <_dtoa_r+0x624>)
 80112ce:	4682      	mov	sl, r0
 80112d0:	468b      	mov	fp, r1
 80112d2:	4640      	mov	r0, r8
 80112d4:	4649      	mov	r1, r9
 80112d6:	2200      	movs	r2, #0
 80112d8:	f7ef f9b6 	bl	8000648 <__aeabi_dmul>
 80112dc:	4680      	mov	r8, r0
 80112de:	4689      	mov	r9, r1
 80112e0:	e7c6      	b.n	8011270 <_dtoa_r+0x510>
 80112e2:	4650      	mov	r0, sl
 80112e4:	4659      	mov	r1, fp
 80112e6:	f7ef f9af 	bl	8000648 <__aeabi_dmul>
 80112ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112ec:	9d01      	ldr	r5, [sp, #4]
 80112ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80112f0:	4682      	mov	sl, r0
 80112f2:	468b      	mov	fp, r1
 80112f4:	4649      	mov	r1, r9
 80112f6:	4640      	mov	r0, r8
 80112f8:	f7ef fc56 	bl	8000ba8 <__aeabi_d2iz>
 80112fc:	4606      	mov	r6, r0
 80112fe:	f7ef f939 	bl	8000574 <__aeabi_i2d>
 8011302:	3630      	adds	r6, #48	; 0x30
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	4640      	mov	r0, r8
 801130a:	4649      	mov	r1, r9
 801130c:	f7ee ffe4 	bl	80002d8 <__aeabi_dsub>
 8011310:	f805 6b01 	strb.w	r6, [r5], #1
 8011314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011316:	429d      	cmp	r5, r3
 8011318:	4680      	mov	r8, r0
 801131a:	4689      	mov	r9, r1
 801131c:	f04f 0200 	mov.w	r2, #0
 8011320:	d124      	bne.n	801136c <_dtoa_r+0x60c>
 8011322:	4b1b      	ldr	r3, [pc, #108]	; (8011390 <_dtoa_r+0x630>)
 8011324:	4650      	mov	r0, sl
 8011326:	4659      	mov	r1, fp
 8011328:	f7ee ffd8 	bl	80002dc <__adddf3>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	4640      	mov	r0, r8
 8011332:	4649      	mov	r1, r9
 8011334:	f7ef fc18 	bl	8000b68 <__aeabi_dcmpgt>
 8011338:	2800      	cmp	r0, #0
 801133a:	d173      	bne.n	8011424 <_dtoa_r+0x6c4>
 801133c:	4652      	mov	r2, sl
 801133e:	465b      	mov	r3, fp
 8011340:	4913      	ldr	r1, [pc, #76]	; (8011390 <_dtoa_r+0x630>)
 8011342:	2000      	movs	r0, #0
 8011344:	f7ee ffc8 	bl	80002d8 <__aeabi_dsub>
 8011348:	4602      	mov	r2, r0
 801134a:	460b      	mov	r3, r1
 801134c:	4640      	mov	r0, r8
 801134e:	4649      	mov	r1, r9
 8011350:	f7ef fbec 	bl	8000b2c <__aeabi_dcmplt>
 8011354:	2800      	cmp	r0, #0
 8011356:	f43f af35 	beq.w	80111c4 <_dtoa_r+0x464>
 801135a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801135c:	1e6b      	subs	r3, r5, #1
 801135e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011360:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011364:	2b30      	cmp	r3, #48	; 0x30
 8011366:	d0f8      	beq.n	801135a <_dtoa_r+0x5fa>
 8011368:	9700      	str	r7, [sp, #0]
 801136a:	e049      	b.n	8011400 <_dtoa_r+0x6a0>
 801136c:	4b05      	ldr	r3, [pc, #20]	; (8011384 <_dtoa_r+0x624>)
 801136e:	f7ef f96b 	bl	8000648 <__aeabi_dmul>
 8011372:	4680      	mov	r8, r0
 8011374:	4689      	mov	r9, r1
 8011376:	e7bd      	b.n	80112f4 <_dtoa_r+0x594>
 8011378:	08015470 	.word	0x08015470
 801137c:	08015448 	.word	0x08015448
 8011380:	3ff00000 	.word	0x3ff00000
 8011384:	40240000 	.word	0x40240000
 8011388:	401c0000 	.word	0x401c0000
 801138c:	40140000 	.word	0x40140000
 8011390:	3fe00000 	.word	0x3fe00000
 8011394:	9d01      	ldr	r5, [sp, #4]
 8011396:	4656      	mov	r6, sl
 8011398:	465f      	mov	r7, fp
 801139a:	4642      	mov	r2, r8
 801139c:	464b      	mov	r3, r9
 801139e:	4630      	mov	r0, r6
 80113a0:	4639      	mov	r1, r7
 80113a2:	f7ef fa7b 	bl	800089c <__aeabi_ddiv>
 80113a6:	f7ef fbff 	bl	8000ba8 <__aeabi_d2iz>
 80113aa:	4682      	mov	sl, r0
 80113ac:	f7ef f8e2 	bl	8000574 <__aeabi_i2d>
 80113b0:	4642      	mov	r2, r8
 80113b2:	464b      	mov	r3, r9
 80113b4:	f7ef f948 	bl	8000648 <__aeabi_dmul>
 80113b8:	4602      	mov	r2, r0
 80113ba:	460b      	mov	r3, r1
 80113bc:	4630      	mov	r0, r6
 80113be:	4639      	mov	r1, r7
 80113c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80113c4:	f7ee ff88 	bl	80002d8 <__aeabi_dsub>
 80113c8:	f805 6b01 	strb.w	r6, [r5], #1
 80113cc:	9e01      	ldr	r6, [sp, #4]
 80113ce:	9f03      	ldr	r7, [sp, #12]
 80113d0:	1bae      	subs	r6, r5, r6
 80113d2:	42b7      	cmp	r7, r6
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	d135      	bne.n	8011446 <_dtoa_r+0x6e6>
 80113da:	f7ee ff7f 	bl	80002dc <__adddf3>
 80113de:	4642      	mov	r2, r8
 80113e0:	464b      	mov	r3, r9
 80113e2:	4606      	mov	r6, r0
 80113e4:	460f      	mov	r7, r1
 80113e6:	f7ef fbbf 	bl	8000b68 <__aeabi_dcmpgt>
 80113ea:	b9d0      	cbnz	r0, 8011422 <_dtoa_r+0x6c2>
 80113ec:	4642      	mov	r2, r8
 80113ee:	464b      	mov	r3, r9
 80113f0:	4630      	mov	r0, r6
 80113f2:	4639      	mov	r1, r7
 80113f4:	f7ef fb90 	bl	8000b18 <__aeabi_dcmpeq>
 80113f8:	b110      	cbz	r0, 8011400 <_dtoa_r+0x6a0>
 80113fa:	f01a 0f01 	tst.w	sl, #1
 80113fe:	d110      	bne.n	8011422 <_dtoa_r+0x6c2>
 8011400:	4620      	mov	r0, r4
 8011402:	ee18 1a10 	vmov	r1, s16
 8011406:	f001 f885 	bl	8012514 <_Bfree>
 801140a:	2300      	movs	r3, #0
 801140c:	9800      	ldr	r0, [sp, #0]
 801140e:	702b      	strb	r3, [r5, #0]
 8011410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011412:	3001      	adds	r0, #1
 8011414:	6018      	str	r0, [r3, #0]
 8011416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011418:	2b00      	cmp	r3, #0
 801141a:	f43f acf1 	beq.w	8010e00 <_dtoa_r+0xa0>
 801141e:	601d      	str	r5, [r3, #0]
 8011420:	e4ee      	b.n	8010e00 <_dtoa_r+0xa0>
 8011422:	9f00      	ldr	r7, [sp, #0]
 8011424:	462b      	mov	r3, r5
 8011426:	461d      	mov	r5, r3
 8011428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801142c:	2a39      	cmp	r2, #57	; 0x39
 801142e:	d106      	bne.n	801143e <_dtoa_r+0x6de>
 8011430:	9a01      	ldr	r2, [sp, #4]
 8011432:	429a      	cmp	r2, r3
 8011434:	d1f7      	bne.n	8011426 <_dtoa_r+0x6c6>
 8011436:	9901      	ldr	r1, [sp, #4]
 8011438:	2230      	movs	r2, #48	; 0x30
 801143a:	3701      	adds	r7, #1
 801143c:	700a      	strb	r2, [r1, #0]
 801143e:	781a      	ldrb	r2, [r3, #0]
 8011440:	3201      	adds	r2, #1
 8011442:	701a      	strb	r2, [r3, #0]
 8011444:	e790      	b.n	8011368 <_dtoa_r+0x608>
 8011446:	4ba6      	ldr	r3, [pc, #664]	; (80116e0 <_dtoa_r+0x980>)
 8011448:	2200      	movs	r2, #0
 801144a:	f7ef f8fd 	bl	8000648 <__aeabi_dmul>
 801144e:	2200      	movs	r2, #0
 8011450:	2300      	movs	r3, #0
 8011452:	4606      	mov	r6, r0
 8011454:	460f      	mov	r7, r1
 8011456:	f7ef fb5f 	bl	8000b18 <__aeabi_dcmpeq>
 801145a:	2800      	cmp	r0, #0
 801145c:	d09d      	beq.n	801139a <_dtoa_r+0x63a>
 801145e:	e7cf      	b.n	8011400 <_dtoa_r+0x6a0>
 8011460:	9a08      	ldr	r2, [sp, #32]
 8011462:	2a00      	cmp	r2, #0
 8011464:	f000 80d7 	beq.w	8011616 <_dtoa_r+0x8b6>
 8011468:	9a06      	ldr	r2, [sp, #24]
 801146a:	2a01      	cmp	r2, #1
 801146c:	f300 80ba 	bgt.w	80115e4 <_dtoa_r+0x884>
 8011470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011472:	2a00      	cmp	r2, #0
 8011474:	f000 80b2 	beq.w	80115dc <_dtoa_r+0x87c>
 8011478:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801147c:	9e07      	ldr	r6, [sp, #28]
 801147e:	9d04      	ldr	r5, [sp, #16]
 8011480:	9a04      	ldr	r2, [sp, #16]
 8011482:	441a      	add	r2, r3
 8011484:	9204      	str	r2, [sp, #16]
 8011486:	9a05      	ldr	r2, [sp, #20]
 8011488:	2101      	movs	r1, #1
 801148a:	441a      	add	r2, r3
 801148c:	4620      	mov	r0, r4
 801148e:	9205      	str	r2, [sp, #20]
 8011490:	f001 f942 	bl	8012718 <__i2b>
 8011494:	4607      	mov	r7, r0
 8011496:	2d00      	cmp	r5, #0
 8011498:	dd0c      	ble.n	80114b4 <_dtoa_r+0x754>
 801149a:	9b05      	ldr	r3, [sp, #20]
 801149c:	2b00      	cmp	r3, #0
 801149e:	dd09      	ble.n	80114b4 <_dtoa_r+0x754>
 80114a0:	42ab      	cmp	r3, r5
 80114a2:	9a04      	ldr	r2, [sp, #16]
 80114a4:	bfa8      	it	ge
 80114a6:	462b      	movge	r3, r5
 80114a8:	1ad2      	subs	r2, r2, r3
 80114aa:	9204      	str	r2, [sp, #16]
 80114ac:	9a05      	ldr	r2, [sp, #20]
 80114ae:	1aed      	subs	r5, r5, r3
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	9305      	str	r3, [sp, #20]
 80114b4:	9b07      	ldr	r3, [sp, #28]
 80114b6:	b31b      	cbz	r3, 8011500 <_dtoa_r+0x7a0>
 80114b8:	9b08      	ldr	r3, [sp, #32]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 80af 	beq.w	801161e <_dtoa_r+0x8be>
 80114c0:	2e00      	cmp	r6, #0
 80114c2:	dd13      	ble.n	80114ec <_dtoa_r+0x78c>
 80114c4:	4639      	mov	r1, r7
 80114c6:	4632      	mov	r2, r6
 80114c8:	4620      	mov	r0, r4
 80114ca:	f001 f9e5 	bl	8012898 <__pow5mult>
 80114ce:	ee18 2a10 	vmov	r2, s16
 80114d2:	4601      	mov	r1, r0
 80114d4:	4607      	mov	r7, r0
 80114d6:	4620      	mov	r0, r4
 80114d8:	f001 f934 	bl	8012744 <__multiply>
 80114dc:	ee18 1a10 	vmov	r1, s16
 80114e0:	4680      	mov	r8, r0
 80114e2:	4620      	mov	r0, r4
 80114e4:	f001 f816 	bl	8012514 <_Bfree>
 80114e8:	ee08 8a10 	vmov	s16, r8
 80114ec:	9b07      	ldr	r3, [sp, #28]
 80114ee:	1b9a      	subs	r2, r3, r6
 80114f0:	d006      	beq.n	8011500 <_dtoa_r+0x7a0>
 80114f2:	ee18 1a10 	vmov	r1, s16
 80114f6:	4620      	mov	r0, r4
 80114f8:	f001 f9ce 	bl	8012898 <__pow5mult>
 80114fc:	ee08 0a10 	vmov	s16, r0
 8011500:	2101      	movs	r1, #1
 8011502:	4620      	mov	r0, r4
 8011504:	f001 f908 	bl	8012718 <__i2b>
 8011508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801150a:	2b00      	cmp	r3, #0
 801150c:	4606      	mov	r6, r0
 801150e:	f340 8088 	ble.w	8011622 <_dtoa_r+0x8c2>
 8011512:	461a      	mov	r2, r3
 8011514:	4601      	mov	r1, r0
 8011516:	4620      	mov	r0, r4
 8011518:	f001 f9be 	bl	8012898 <__pow5mult>
 801151c:	9b06      	ldr	r3, [sp, #24]
 801151e:	2b01      	cmp	r3, #1
 8011520:	4606      	mov	r6, r0
 8011522:	f340 8081 	ble.w	8011628 <_dtoa_r+0x8c8>
 8011526:	f04f 0800 	mov.w	r8, #0
 801152a:	6933      	ldr	r3, [r6, #16]
 801152c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011530:	6918      	ldr	r0, [r3, #16]
 8011532:	f001 f8a1 	bl	8012678 <__hi0bits>
 8011536:	f1c0 0020 	rsb	r0, r0, #32
 801153a:	9b05      	ldr	r3, [sp, #20]
 801153c:	4418      	add	r0, r3
 801153e:	f010 001f 	ands.w	r0, r0, #31
 8011542:	f000 8092 	beq.w	801166a <_dtoa_r+0x90a>
 8011546:	f1c0 0320 	rsb	r3, r0, #32
 801154a:	2b04      	cmp	r3, #4
 801154c:	f340 808a 	ble.w	8011664 <_dtoa_r+0x904>
 8011550:	f1c0 001c 	rsb	r0, r0, #28
 8011554:	9b04      	ldr	r3, [sp, #16]
 8011556:	4403      	add	r3, r0
 8011558:	9304      	str	r3, [sp, #16]
 801155a:	9b05      	ldr	r3, [sp, #20]
 801155c:	4403      	add	r3, r0
 801155e:	4405      	add	r5, r0
 8011560:	9305      	str	r3, [sp, #20]
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	2b00      	cmp	r3, #0
 8011566:	dd07      	ble.n	8011578 <_dtoa_r+0x818>
 8011568:	ee18 1a10 	vmov	r1, s16
 801156c:	461a      	mov	r2, r3
 801156e:	4620      	mov	r0, r4
 8011570:	f001 f9ec 	bl	801294c <__lshift>
 8011574:	ee08 0a10 	vmov	s16, r0
 8011578:	9b05      	ldr	r3, [sp, #20]
 801157a:	2b00      	cmp	r3, #0
 801157c:	dd05      	ble.n	801158a <_dtoa_r+0x82a>
 801157e:	4631      	mov	r1, r6
 8011580:	461a      	mov	r2, r3
 8011582:	4620      	mov	r0, r4
 8011584:	f001 f9e2 	bl	801294c <__lshift>
 8011588:	4606      	mov	r6, r0
 801158a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801158c:	2b00      	cmp	r3, #0
 801158e:	d06e      	beq.n	801166e <_dtoa_r+0x90e>
 8011590:	ee18 0a10 	vmov	r0, s16
 8011594:	4631      	mov	r1, r6
 8011596:	f001 fa49 	bl	8012a2c <__mcmp>
 801159a:	2800      	cmp	r0, #0
 801159c:	da67      	bge.n	801166e <_dtoa_r+0x90e>
 801159e:	9b00      	ldr	r3, [sp, #0]
 80115a0:	3b01      	subs	r3, #1
 80115a2:	ee18 1a10 	vmov	r1, s16
 80115a6:	9300      	str	r3, [sp, #0]
 80115a8:	220a      	movs	r2, #10
 80115aa:	2300      	movs	r3, #0
 80115ac:	4620      	mov	r0, r4
 80115ae:	f000 ffd3 	bl	8012558 <__multadd>
 80115b2:	9b08      	ldr	r3, [sp, #32]
 80115b4:	ee08 0a10 	vmov	s16, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	f000 81b1 	beq.w	8011920 <_dtoa_r+0xbc0>
 80115be:	2300      	movs	r3, #0
 80115c0:	4639      	mov	r1, r7
 80115c2:	220a      	movs	r2, #10
 80115c4:	4620      	mov	r0, r4
 80115c6:	f000 ffc7 	bl	8012558 <__multadd>
 80115ca:	9b02      	ldr	r3, [sp, #8]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	4607      	mov	r7, r0
 80115d0:	f300 808e 	bgt.w	80116f0 <_dtoa_r+0x990>
 80115d4:	9b06      	ldr	r3, [sp, #24]
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	dc51      	bgt.n	801167e <_dtoa_r+0x91e>
 80115da:	e089      	b.n	80116f0 <_dtoa_r+0x990>
 80115dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80115e2:	e74b      	b.n	801147c <_dtoa_r+0x71c>
 80115e4:	9b03      	ldr	r3, [sp, #12]
 80115e6:	1e5e      	subs	r6, r3, #1
 80115e8:	9b07      	ldr	r3, [sp, #28]
 80115ea:	42b3      	cmp	r3, r6
 80115ec:	bfbf      	itttt	lt
 80115ee:	9b07      	ldrlt	r3, [sp, #28]
 80115f0:	9607      	strlt	r6, [sp, #28]
 80115f2:	1af2      	sublt	r2, r6, r3
 80115f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80115f6:	bfb6      	itet	lt
 80115f8:	189b      	addlt	r3, r3, r2
 80115fa:	1b9e      	subge	r6, r3, r6
 80115fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80115fe:	9b03      	ldr	r3, [sp, #12]
 8011600:	bfb8      	it	lt
 8011602:	2600      	movlt	r6, #0
 8011604:	2b00      	cmp	r3, #0
 8011606:	bfb7      	itett	lt
 8011608:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801160c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011610:	1a9d      	sublt	r5, r3, r2
 8011612:	2300      	movlt	r3, #0
 8011614:	e734      	b.n	8011480 <_dtoa_r+0x720>
 8011616:	9e07      	ldr	r6, [sp, #28]
 8011618:	9d04      	ldr	r5, [sp, #16]
 801161a:	9f08      	ldr	r7, [sp, #32]
 801161c:	e73b      	b.n	8011496 <_dtoa_r+0x736>
 801161e:	9a07      	ldr	r2, [sp, #28]
 8011620:	e767      	b.n	80114f2 <_dtoa_r+0x792>
 8011622:	9b06      	ldr	r3, [sp, #24]
 8011624:	2b01      	cmp	r3, #1
 8011626:	dc18      	bgt.n	801165a <_dtoa_r+0x8fa>
 8011628:	f1ba 0f00 	cmp.w	sl, #0
 801162c:	d115      	bne.n	801165a <_dtoa_r+0x8fa>
 801162e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011632:	b993      	cbnz	r3, 801165a <_dtoa_r+0x8fa>
 8011634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011638:	0d1b      	lsrs	r3, r3, #20
 801163a:	051b      	lsls	r3, r3, #20
 801163c:	b183      	cbz	r3, 8011660 <_dtoa_r+0x900>
 801163e:	9b04      	ldr	r3, [sp, #16]
 8011640:	3301      	adds	r3, #1
 8011642:	9304      	str	r3, [sp, #16]
 8011644:	9b05      	ldr	r3, [sp, #20]
 8011646:	3301      	adds	r3, #1
 8011648:	9305      	str	r3, [sp, #20]
 801164a:	f04f 0801 	mov.w	r8, #1
 801164e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011650:	2b00      	cmp	r3, #0
 8011652:	f47f af6a 	bne.w	801152a <_dtoa_r+0x7ca>
 8011656:	2001      	movs	r0, #1
 8011658:	e76f      	b.n	801153a <_dtoa_r+0x7da>
 801165a:	f04f 0800 	mov.w	r8, #0
 801165e:	e7f6      	b.n	801164e <_dtoa_r+0x8ee>
 8011660:	4698      	mov	r8, r3
 8011662:	e7f4      	b.n	801164e <_dtoa_r+0x8ee>
 8011664:	f43f af7d 	beq.w	8011562 <_dtoa_r+0x802>
 8011668:	4618      	mov	r0, r3
 801166a:	301c      	adds	r0, #28
 801166c:	e772      	b.n	8011554 <_dtoa_r+0x7f4>
 801166e:	9b03      	ldr	r3, [sp, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	dc37      	bgt.n	80116e4 <_dtoa_r+0x984>
 8011674:	9b06      	ldr	r3, [sp, #24]
 8011676:	2b02      	cmp	r3, #2
 8011678:	dd34      	ble.n	80116e4 <_dtoa_r+0x984>
 801167a:	9b03      	ldr	r3, [sp, #12]
 801167c:	9302      	str	r3, [sp, #8]
 801167e:	9b02      	ldr	r3, [sp, #8]
 8011680:	b96b      	cbnz	r3, 801169e <_dtoa_r+0x93e>
 8011682:	4631      	mov	r1, r6
 8011684:	2205      	movs	r2, #5
 8011686:	4620      	mov	r0, r4
 8011688:	f000 ff66 	bl	8012558 <__multadd>
 801168c:	4601      	mov	r1, r0
 801168e:	4606      	mov	r6, r0
 8011690:	ee18 0a10 	vmov	r0, s16
 8011694:	f001 f9ca 	bl	8012a2c <__mcmp>
 8011698:	2800      	cmp	r0, #0
 801169a:	f73f adbb 	bgt.w	8011214 <_dtoa_r+0x4b4>
 801169e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116a0:	9d01      	ldr	r5, [sp, #4]
 80116a2:	43db      	mvns	r3, r3
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	f04f 0800 	mov.w	r8, #0
 80116aa:	4631      	mov	r1, r6
 80116ac:	4620      	mov	r0, r4
 80116ae:	f000 ff31 	bl	8012514 <_Bfree>
 80116b2:	2f00      	cmp	r7, #0
 80116b4:	f43f aea4 	beq.w	8011400 <_dtoa_r+0x6a0>
 80116b8:	f1b8 0f00 	cmp.w	r8, #0
 80116bc:	d005      	beq.n	80116ca <_dtoa_r+0x96a>
 80116be:	45b8      	cmp	r8, r7
 80116c0:	d003      	beq.n	80116ca <_dtoa_r+0x96a>
 80116c2:	4641      	mov	r1, r8
 80116c4:	4620      	mov	r0, r4
 80116c6:	f000 ff25 	bl	8012514 <_Bfree>
 80116ca:	4639      	mov	r1, r7
 80116cc:	4620      	mov	r0, r4
 80116ce:	f000 ff21 	bl	8012514 <_Bfree>
 80116d2:	e695      	b.n	8011400 <_dtoa_r+0x6a0>
 80116d4:	2600      	movs	r6, #0
 80116d6:	4637      	mov	r7, r6
 80116d8:	e7e1      	b.n	801169e <_dtoa_r+0x93e>
 80116da:	9700      	str	r7, [sp, #0]
 80116dc:	4637      	mov	r7, r6
 80116de:	e599      	b.n	8011214 <_dtoa_r+0x4b4>
 80116e0:	40240000 	.word	0x40240000
 80116e4:	9b08      	ldr	r3, [sp, #32]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f000 80ca 	beq.w	8011880 <_dtoa_r+0xb20>
 80116ec:	9b03      	ldr	r3, [sp, #12]
 80116ee:	9302      	str	r3, [sp, #8]
 80116f0:	2d00      	cmp	r5, #0
 80116f2:	dd05      	ble.n	8011700 <_dtoa_r+0x9a0>
 80116f4:	4639      	mov	r1, r7
 80116f6:	462a      	mov	r2, r5
 80116f8:	4620      	mov	r0, r4
 80116fa:	f001 f927 	bl	801294c <__lshift>
 80116fe:	4607      	mov	r7, r0
 8011700:	f1b8 0f00 	cmp.w	r8, #0
 8011704:	d05b      	beq.n	80117be <_dtoa_r+0xa5e>
 8011706:	6879      	ldr	r1, [r7, #4]
 8011708:	4620      	mov	r0, r4
 801170a:	f000 fec3 	bl	8012494 <_Balloc>
 801170e:	4605      	mov	r5, r0
 8011710:	b928      	cbnz	r0, 801171e <_dtoa_r+0x9be>
 8011712:	4b87      	ldr	r3, [pc, #540]	; (8011930 <_dtoa_r+0xbd0>)
 8011714:	4602      	mov	r2, r0
 8011716:	f240 21ea 	movw	r1, #746	; 0x2ea
 801171a:	f7ff bb3b 	b.w	8010d94 <_dtoa_r+0x34>
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	3202      	adds	r2, #2
 8011722:	0092      	lsls	r2, r2, #2
 8011724:	f107 010c 	add.w	r1, r7, #12
 8011728:	300c      	adds	r0, #12
 801172a:	f7fd fbc5 	bl	800eeb8 <memcpy>
 801172e:	2201      	movs	r2, #1
 8011730:	4629      	mov	r1, r5
 8011732:	4620      	mov	r0, r4
 8011734:	f001 f90a 	bl	801294c <__lshift>
 8011738:	9b01      	ldr	r3, [sp, #4]
 801173a:	f103 0901 	add.w	r9, r3, #1
 801173e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011742:	4413      	add	r3, r2
 8011744:	9305      	str	r3, [sp, #20]
 8011746:	f00a 0301 	and.w	r3, sl, #1
 801174a:	46b8      	mov	r8, r7
 801174c:	9304      	str	r3, [sp, #16]
 801174e:	4607      	mov	r7, r0
 8011750:	4631      	mov	r1, r6
 8011752:	ee18 0a10 	vmov	r0, s16
 8011756:	f7ff fa75 	bl	8010c44 <quorem>
 801175a:	4641      	mov	r1, r8
 801175c:	9002      	str	r0, [sp, #8]
 801175e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011762:	ee18 0a10 	vmov	r0, s16
 8011766:	f001 f961 	bl	8012a2c <__mcmp>
 801176a:	463a      	mov	r2, r7
 801176c:	9003      	str	r0, [sp, #12]
 801176e:	4631      	mov	r1, r6
 8011770:	4620      	mov	r0, r4
 8011772:	f001 f977 	bl	8012a64 <__mdiff>
 8011776:	68c2      	ldr	r2, [r0, #12]
 8011778:	f109 3bff 	add.w	fp, r9, #4294967295
 801177c:	4605      	mov	r5, r0
 801177e:	bb02      	cbnz	r2, 80117c2 <_dtoa_r+0xa62>
 8011780:	4601      	mov	r1, r0
 8011782:	ee18 0a10 	vmov	r0, s16
 8011786:	f001 f951 	bl	8012a2c <__mcmp>
 801178a:	4602      	mov	r2, r0
 801178c:	4629      	mov	r1, r5
 801178e:	4620      	mov	r0, r4
 8011790:	9207      	str	r2, [sp, #28]
 8011792:	f000 febf 	bl	8012514 <_Bfree>
 8011796:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801179a:	ea43 0102 	orr.w	r1, r3, r2
 801179e:	9b04      	ldr	r3, [sp, #16]
 80117a0:	430b      	orrs	r3, r1
 80117a2:	464d      	mov	r5, r9
 80117a4:	d10f      	bne.n	80117c6 <_dtoa_r+0xa66>
 80117a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80117aa:	d02a      	beq.n	8011802 <_dtoa_r+0xaa2>
 80117ac:	9b03      	ldr	r3, [sp, #12]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	dd02      	ble.n	80117b8 <_dtoa_r+0xa58>
 80117b2:	9b02      	ldr	r3, [sp, #8]
 80117b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80117b8:	f88b a000 	strb.w	sl, [fp]
 80117bc:	e775      	b.n	80116aa <_dtoa_r+0x94a>
 80117be:	4638      	mov	r0, r7
 80117c0:	e7ba      	b.n	8011738 <_dtoa_r+0x9d8>
 80117c2:	2201      	movs	r2, #1
 80117c4:	e7e2      	b.n	801178c <_dtoa_r+0xa2c>
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	db04      	blt.n	80117d6 <_dtoa_r+0xa76>
 80117cc:	9906      	ldr	r1, [sp, #24]
 80117ce:	430b      	orrs	r3, r1
 80117d0:	9904      	ldr	r1, [sp, #16]
 80117d2:	430b      	orrs	r3, r1
 80117d4:	d122      	bne.n	801181c <_dtoa_r+0xabc>
 80117d6:	2a00      	cmp	r2, #0
 80117d8:	ddee      	ble.n	80117b8 <_dtoa_r+0xa58>
 80117da:	ee18 1a10 	vmov	r1, s16
 80117de:	2201      	movs	r2, #1
 80117e0:	4620      	mov	r0, r4
 80117e2:	f001 f8b3 	bl	801294c <__lshift>
 80117e6:	4631      	mov	r1, r6
 80117e8:	ee08 0a10 	vmov	s16, r0
 80117ec:	f001 f91e 	bl	8012a2c <__mcmp>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	dc03      	bgt.n	80117fc <_dtoa_r+0xa9c>
 80117f4:	d1e0      	bne.n	80117b8 <_dtoa_r+0xa58>
 80117f6:	f01a 0f01 	tst.w	sl, #1
 80117fa:	d0dd      	beq.n	80117b8 <_dtoa_r+0xa58>
 80117fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011800:	d1d7      	bne.n	80117b2 <_dtoa_r+0xa52>
 8011802:	2339      	movs	r3, #57	; 0x39
 8011804:	f88b 3000 	strb.w	r3, [fp]
 8011808:	462b      	mov	r3, r5
 801180a:	461d      	mov	r5, r3
 801180c:	3b01      	subs	r3, #1
 801180e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011812:	2a39      	cmp	r2, #57	; 0x39
 8011814:	d071      	beq.n	80118fa <_dtoa_r+0xb9a>
 8011816:	3201      	adds	r2, #1
 8011818:	701a      	strb	r2, [r3, #0]
 801181a:	e746      	b.n	80116aa <_dtoa_r+0x94a>
 801181c:	2a00      	cmp	r2, #0
 801181e:	dd07      	ble.n	8011830 <_dtoa_r+0xad0>
 8011820:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011824:	d0ed      	beq.n	8011802 <_dtoa_r+0xaa2>
 8011826:	f10a 0301 	add.w	r3, sl, #1
 801182a:	f88b 3000 	strb.w	r3, [fp]
 801182e:	e73c      	b.n	80116aa <_dtoa_r+0x94a>
 8011830:	9b05      	ldr	r3, [sp, #20]
 8011832:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011836:	4599      	cmp	r9, r3
 8011838:	d047      	beq.n	80118ca <_dtoa_r+0xb6a>
 801183a:	ee18 1a10 	vmov	r1, s16
 801183e:	2300      	movs	r3, #0
 8011840:	220a      	movs	r2, #10
 8011842:	4620      	mov	r0, r4
 8011844:	f000 fe88 	bl	8012558 <__multadd>
 8011848:	45b8      	cmp	r8, r7
 801184a:	ee08 0a10 	vmov	s16, r0
 801184e:	f04f 0300 	mov.w	r3, #0
 8011852:	f04f 020a 	mov.w	r2, #10
 8011856:	4641      	mov	r1, r8
 8011858:	4620      	mov	r0, r4
 801185a:	d106      	bne.n	801186a <_dtoa_r+0xb0a>
 801185c:	f000 fe7c 	bl	8012558 <__multadd>
 8011860:	4680      	mov	r8, r0
 8011862:	4607      	mov	r7, r0
 8011864:	f109 0901 	add.w	r9, r9, #1
 8011868:	e772      	b.n	8011750 <_dtoa_r+0x9f0>
 801186a:	f000 fe75 	bl	8012558 <__multadd>
 801186e:	4639      	mov	r1, r7
 8011870:	4680      	mov	r8, r0
 8011872:	2300      	movs	r3, #0
 8011874:	220a      	movs	r2, #10
 8011876:	4620      	mov	r0, r4
 8011878:	f000 fe6e 	bl	8012558 <__multadd>
 801187c:	4607      	mov	r7, r0
 801187e:	e7f1      	b.n	8011864 <_dtoa_r+0xb04>
 8011880:	9b03      	ldr	r3, [sp, #12]
 8011882:	9302      	str	r3, [sp, #8]
 8011884:	9d01      	ldr	r5, [sp, #4]
 8011886:	ee18 0a10 	vmov	r0, s16
 801188a:	4631      	mov	r1, r6
 801188c:	f7ff f9da 	bl	8010c44 <quorem>
 8011890:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011894:	9b01      	ldr	r3, [sp, #4]
 8011896:	f805 ab01 	strb.w	sl, [r5], #1
 801189a:	1aea      	subs	r2, r5, r3
 801189c:	9b02      	ldr	r3, [sp, #8]
 801189e:	4293      	cmp	r3, r2
 80118a0:	dd09      	ble.n	80118b6 <_dtoa_r+0xb56>
 80118a2:	ee18 1a10 	vmov	r1, s16
 80118a6:	2300      	movs	r3, #0
 80118a8:	220a      	movs	r2, #10
 80118aa:	4620      	mov	r0, r4
 80118ac:	f000 fe54 	bl	8012558 <__multadd>
 80118b0:	ee08 0a10 	vmov	s16, r0
 80118b4:	e7e7      	b.n	8011886 <_dtoa_r+0xb26>
 80118b6:	9b02      	ldr	r3, [sp, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	bfc8      	it	gt
 80118bc:	461d      	movgt	r5, r3
 80118be:	9b01      	ldr	r3, [sp, #4]
 80118c0:	bfd8      	it	le
 80118c2:	2501      	movle	r5, #1
 80118c4:	441d      	add	r5, r3
 80118c6:	f04f 0800 	mov.w	r8, #0
 80118ca:	ee18 1a10 	vmov	r1, s16
 80118ce:	2201      	movs	r2, #1
 80118d0:	4620      	mov	r0, r4
 80118d2:	f001 f83b 	bl	801294c <__lshift>
 80118d6:	4631      	mov	r1, r6
 80118d8:	ee08 0a10 	vmov	s16, r0
 80118dc:	f001 f8a6 	bl	8012a2c <__mcmp>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	dc91      	bgt.n	8011808 <_dtoa_r+0xaa8>
 80118e4:	d102      	bne.n	80118ec <_dtoa_r+0xb8c>
 80118e6:	f01a 0f01 	tst.w	sl, #1
 80118ea:	d18d      	bne.n	8011808 <_dtoa_r+0xaa8>
 80118ec:	462b      	mov	r3, r5
 80118ee:	461d      	mov	r5, r3
 80118f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118f4:	2a30      	cmp	r2, #48	; 0x30
 80118f6:	d0fa      	beq.n	80118ee <_dtoa_r+0xb8e>
 80118f8:	e6d7      	b.n	80116aa <_dtoa_r+0x94a>
 80118fa:	9a01      	ldr	r2, [sp, #4]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d184      	bne.n	801180a <_dtoa_r+0xaaa>
 8011900:	9b00      	ldr	r3, [sp, #0]
 8011902:	3301      	adds	r3, #1
 8011904:	9300      	str	r3, [sp, #0]
 8011906:	2331      	movs	r3, #49	; 0x31
 8011908:	7013      	strb	r3, [r2, #0]
 801190a:	e6ce      	b.n	80116aa <_dtoa_r+0x94a>
 801190c:	4b09      	ldr	r3, [pc, #36]	; (8011934 <_dtoa_r+0xbd4>)
 801190e:	f7ff ba95 	b.w	8010e3c <_dtoa_r+0xdc>
 8011912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011914:	2b00      	cmp	r3, #0
 8011916:	f47f aa6e 	bne.w	8010df6 <_dtoa_r+0x96>
 801191a:	4b07      	ldr	r3, [pc, #28]	; (8011938 <_dtoa_r+0xbd8>)
 801191c:	f7ff ba8e 	b.w	8010e3c <_dtoa_r+0xdc>
 8011920:	9b02      	ldr	r3, [sp, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	dcae      	bgt.n	8011884 <_dtoa_r+0xb24>
 8011926:	9b06      	ldr	r3, [sp, #24]
 8011928:	2b02      	cmp	r3, #2
 801192a:	f73f aea8 	bgt.w	801167e <_dtoa_r+0x91e>
 801192e:	e7a9      	b.n	8011884 <_dtoa_r+0xb24>
 8011930:	080152f8 	.word	0x080152f8
 8011934:	080150f8 	.word	0x080150f8
 8011938:	08015279 	.word	0x08015279

0801193c <__sflush_r>:
 801193c:	898a      	ldrh	r2, [r1, #12]
 801193e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011942:	4605      	mov	r5, r0
 8011944:	0710      	lsls	r0, r2, #28
 8011946:	460c      	mov	r4, r1
 8011948:	d458      	bmi.n	80119fc <__sflush_r+0xc0>
 801194a:	684b      	ldr	r3, [r1, #4]
 801194c:	2b00      	cmp	r3, #0
 801194e:	dc05      	bgt.n	801195c <__sflush_r+0x20>
 8011950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011952:	2b00      	cmp	r3, #0
 8011954:	dc02      	bgt.n	801195c <__sflush_r+0x20>
 8011956:	2000      	movs	r0, #0
 8011958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801195c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801195e:	2e00      	cmp	r6, #0
 8011960:	d0f9      	beq.n	8011956 <__sflush_r+0x1a>
 8011962:	2300      	movs	r3, #0
 8011964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011968:	682f      	ldr	r7, [r5, #0]
 801196a:	602b      	str	r3, [r5, #0]
 801196c:	d032      	beq.n	80119d4 <__sflush_r+0x98>
 801196e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011970:	89a3      	ldrh	r3, [r4, #12]
 8011972:	075a      	lsls	r2, r3, #29
 8011974:	d505      	bpl.n	8011982 <__sflush_r+0x46>
 8011976:	6863      	ldr	r3, [r4, #4]
 8011978:	1ac0      	subs	r0, r0, r3
 801197a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801197c:	b10b      	cbz	r3, 8011982 <__sflush_r+0x46>
 801197e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011980:	1ac0      	subs	r0, r0, r3
 8011982:	2300      	movs	r3, #0
 8011984:	4602      	mov	r2, r0
 8011986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011988:	6a21      	ldr	r1, [r4, #32]
 801198a:	4628      	mov	r0, r5
 801198c:	47b0      	blx	r6
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	89a3      	ldrh	r3, [r4, #12]
 8011992:	d106      	bne.n	80119a2 <__sflush_r+0x66>
 8011994:	6829      	ldr	r1, [r5, #0]
 8011996:	291d      	cmp	r1, #29
 8011998:	d82c      	bhi.n	80119f4 <__sflush_r+0xb8>
 801199a:	4a2a      	ldr	r2, [pc, #168]	; (8011a44 <__sflush_r+0x108>)
 801199c:	40ca      	lsrs	r2, r1
 801199e:	07d6      	lsls	r6, r2, #31
 80119a0:	d528      	bpl.n	80119f4 <__sflush_r+0xb8>
 80119a2:	2200      	movs	r2, #0
 80119a4:	6062      	str	r2, [r4, #4]
 80119a6:	04d9      	lsls	r1, r3, #19
 80119a8:	6922      	ldr	r2, [r4, #16]
 80119aa:	6022      	str	r2, [r4, #0]
 80119ac:	d504      	bpl.n	80119b8 <__sflush_r+0x7c>
 80119ae:	1c42      	adds	r2, r0, #1
 80119b0:	d101      	bne.n	80119b6 <__sflush_r+0x7a>
 80119b2:	682b      	ldr	r3, [r5, #0]
 80119b4:	b903      	cbnz	r3, 80119b8 <__sflush_r+0x7c>
 80119b6:	6560      	str	r0, [r4, #84]	; 0x54
 80119b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119ba:	602f      	str	r7, [r5, #0]
 80119bc:	2900      	cmp	r1, #0
 80119be:	d0ca      	beq.n	8011956 <__sflush_r+0x1a>
 80119c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119c4:	4299      	cmp	r1, r3
 80119c6:	d002      	beq.n	80119ce <__sflush_r+0x92>
 80119c8:	4628      	mov	r0, r5
 80119ca:	f001 fa3b 	bl	8012e44 <_free_r>
 80119ce:	2000      	movs	r0, #0
 80119d0:	6360      	str	r0, [r4, #52]	; 0x34
 80119d2:	e7c1      	b.n	8011958 <__sflush_r+0x1c>
 80119d4:	6a21      	ldr	r1, [r4, #32]
 80119d6:	2301      	movs	r3, #1
 80119d8:	4628      	mov	r0, r5
 80119da:	47b0      	blx	r6
 80119dc:	1c41      	adds	r1, r0, #1
 80119de:	d1c7      	bne.n	8011970 <__sflush_r+0x34>
 80119e0:	682b      	ldr	r3, [r5, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d0c4      	beq.n	8011970 <__sflush_r+0x34>
 80119e6:	2b1d      	cmp	r3, #29
 80119e8:	d001      	beq.n	80119ee <__sflush_r+0xb2>
 80119ea:	2b16      	cmp	r3, #22
 80119ec:	d101      	bne.n	80119f2 <__sflush_r+0xb6>
 80119ee:	602f      	str	r7, [r5, #0]
 80119f0:	e7b1      	b.n	8011956 <__sflush_r+0x1a>
 80119f2:	89a3      	ldrh	r3, [r4, #12]
 80119f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f8:	81a3      	strh	r3, [r4, #12]
 80119fa:	e7ad      	b.n	8011958 <__sflush_r+0x1c>
 80119fc:	690f      	ldr	r7, [r1, #16]
 80119fe:	2f00      	cmp	r7, #0
 8011a00:	d0a9      	beq.n	8011956 <__sflush_r+0x1a>
 8011a02:	0793      	lsls	r3, r2, #30
 8011a04:	680e      	ldr	r6, [r1, #0]
 8011a06:	bf08      	it	eq
 8011a08:	694b      	ldreq	r3, [r1, #20]
 8011a0a:	600f      	str	r7, [r1, #0]
 8011a0c:	bf18      	it	ne
 8011a0e:	2300      	movne	r3, #0
 8011a10:	eba6 0807 	sub.w	r8, r6, r7
 8011a14:	608b      	str	r3, [r1, #8]
 8011a16:	f1b8 0f00 	cmp.w	r8, #0
 8011a1a:	dd9c      	ble.n	8011956 <__sflush_r+0x1a>
 8011a1c:	6a21      	ldr	r1, [r4, #32]
 8011a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a20:	4643      	mov	r3, r8
 8011a22:	463a      	mov	r2, r7
 8011a24:	4628      	mov	r0, r5
 8011a26:	47b0      	blx	r6
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	dc06      	bgt.n	8011a3a <__sflush_r+0xfe>
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a32:	81a3      	strh	r3, [r4, #12]
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	e78e      	b.n	8011958 <__sflush_r+0x1c>
 8011a3a:	4407      	add	r7, r0
 8011a3c:	eba8 0800 	sub.w	r8, r8, r0
 8011a40:	e7e9      	b.n	8011a16 <__sflush_r+0xda>
 8011a42:	bf00      	nop
 8011a44:	20400001 	.word	0x20400001

08011a48 <_fflush_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	690b      	ldr	r3, [r1, #16]
 8011a4c:	4605      	mov	r5, r0
 8011a4e:	460c      	mov	r4, r1
 8011a50:	b913      	cbnz	r3, 8011a58 <_fflush_r+0x10>
 8011a52:	2500      	movs	r5, #0
 8011a54:	4628      	mov	r0, r5
 8011a56:	bd38      	pop	{r3, r4, r5, pc}
 8011a58:	b118      	cbz	r0, 8011a62 <_fflush_r+0x1a>
 8011a5a:	6983      	ldr	r3, [r0, #24]
 8011a5c:	b90b      	cbnz	r3, 8011a62 <_fflush_r+0x1a>
 8011a5e:	f000 f887 	bl	8011b70 <__sinit>
 8011a62:	4b14      	ldr	r3, [pc, #80]	; (8011ab4 <_fflush_r+0x6c>)
 8011a64:	429c      	cmp	r4, r3
 8011a66:	d11b      	bne.n	8011aa0 <_fflush_r+0x58>
 8011a68:	686c      	ldr	r4, [r5, #4]
 8011a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d0ef      	beq.n	8011a52 <_fflush_r+0xa>
 8011a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a74:	07d0      	lsls	r0, r2, #31
 8011a76:	d404      	bmi.n	8011a82 <_fflush_r+0x3a>
 8011a78:	0599      	lsls	r1, r3, #22
 8011a7a:	d402      	bmi.n	8011a82 <_fflush_r+0x3a>
 8011a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a7e:	f000 fc88 	bl	8012392 <__retarget_lock_acquire_recursive>
 8011a82:	4628      	mov	r0, r5
 8011a84:	4621      	mov	r1, r4
 8011a86:	f7ff ff59 	bl	801193c <__sflush_r>
 8011a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a8c:	07da      	lsls	r2, r3, #31
 8011a8e:	4605      	mov	r5, r0
 8011a90:	d4e0      	bmi.n	8011a54 <_fflush_r+0xc>
 8011a92:	89a3      	ldrh	r3, [r4, #12]
 8011a94:	059b      	lsls	r3, r3, #22
 8011a96:	d4dd      	bmi.n	8011a54 <_fflush_r+0xc>
 8011a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a9a:	f000 fc7b 	bl	8012394 <__retarget_lock_release_recursive>
 8011a9e:	e7d9      	b.n	8011a54 <_fflush_r+0xc>
 8011aa0:	4b05      	ldr	r3, [pc, #20]	; (8011ab8 <_fflush_r+0x70>)
 8011aa2:	429c      	cmp	r4, r3
 8011aa4:	d101      	bne.n	8011aaa <_fflush_r+0x62>
 8011aa6:	68ac      	ldr	r4, [r5, #8]
 8011aa8:	e7df      	b.n	8011a6a <_fflush_r+0x22>
 8011aaa:	4b04      	ldr	r3, [pc, #16]	; (8011abc <_fflush_r+0x74>)
 8011aac:	429c      	cmp	r4, r3
 8011aae:	bf08      	it	eq
 8011ab0:	68ec      	ldreq	r4, [r5, #12]
 8011ab2:	e7da      	b.n	8011a6a <_fflush_r+0x22>
 8011ab4:	0801532c 	.word	0x0801532c
 8011ab8:	0801534c 	.word	0x0801534c
 8011abc:	0801530c 	.word	0x0801530c

08011ac0 <std>:
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	b510      	push	{r4, lr}
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8011aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ace:	6083      	str	r3, [r0, #8]
 8011ad0:	8181      	strh	r1, [r0, #12]
 8011ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8011ad4:	81c2      	strh	r2, [r0, #14]
 8011ad6:	6183      	str	r3, [r0, #24]
 8011ad8:	4619      	mov	r1, r3
 8011ada:	2208      	movs	r2, #8
 8011adc:	305c      	adds	r0, #92	; 0x5c
 8011ade:	f7fd f9f9 	bl	800eed4 <memset>
 8011ae2:	4b05      	ldr	r3, [pc, #20]	; (8011af8 <std+0x38>)
 8011ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8011ae6:	4b05      	ldr	r3, [pc, #20]	; (8011afc <std+0x3c>)
 8011ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011aea:	4b05      	ldr	r3, [pc, #20]	; (8011b00 <std+0x40>)
 8011aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011aee:	4b05      	ldr	r3, [pc, #20]	; (8011b04 <std+0x44>)
 8011af0:	6224      	str	r4, [r4, #32]
 8011af2:	6323      	str	r3, [r4, #48]	; 0x30
 8011af4:	bd10      	pop	{r4, pc}
 8011af6:	bf00      	nop
 8011af8:	080135a1 	.word	0x080135a1
 8011afc:	080135c3 	.word	0x080135c3
 8011b00:	080135fb 	.word	0x080135fb
 8011b04:	0801361f 	.word	0x0801361f

08011b08 <_cleanup_r>:
 8011b08:	4901      	ldr	r1, [pc, #4]	; (8011b10 <_cleanup_r+0x8>)
 8011b0a:	f000 b8af 	b.w	8011c6c <_fwalk_reent>
 8011b0e:	bf00      	nop
 8011b10:	08011a49 	.word	0x08011a49

08011b14 <__sfmoreglue>:
 8011b14:	b570      	push	{r4, r5, r6, lr}
 8011b16:	2268      	movs	r2, #104	; 0x68
 8011b18:	1e4d      	subs	r5, r1, #1
 8011b1a:	4355      	muls	r5, r2
 8011b1c:	460e      	mov	r6, r1
 8011b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b22:	f001 f9fb 	bl	8012f1c <_malloc_r>
 8011b26:	4604      	mov	r4, r0
 8011b28:	b140      	cbz	r0, 8011b3c <__sfmoreglue+0x28>
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8011b30:	300c      	adds	r0, #12
 8011b32:	60a0      	str	r0, [r4, #8]
 8011b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b38:	f7fd f9cc 	bl	800eed4 <memset>
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	bd70      	pop	{r4, r5, r6, pc}

08011b40 <__sfp_lock_acquire>:
 8011b40:	4801      	ldr	r0, [pc, #4]	; (8011b48 <__sfp_lock_acquire+0x8>)
 8011b42:	f000 bc26 	b.w	8012392 <__retarget_lock_acquire_recursive>
 8011b46:	bf00      	nop
 8011b48:	20009425 	.word	0x20009425

08011b4c <__sfp_lock_release>:
 8011b4c:	4801      	ldr	r0, [pc, #4]	; (8011b54 <__sfp_lock_release+0x8>)
 8011b4e:	f000 bc21 	b.w	8012394 <__retarget_lock_release_recursive>
 8011b52:	bf00      	nop
 8011b54:	20009425 	.word	0x20009425

08011b58 <__sinit_lock_acquire>:
 8011b58:	4801      	ldr	r0, [pc, #4]	; (8011b60 <__sinit_lock_acquire+0x8>)
 8011b5a:	f000 bc1a 	b.w	8012392 <__retarget_lock_acquire_recursive>
 8011b5e:	bf00      	nop
 8011b60:	20009426 	.word	0x20009426

08011b64 <__sinit_lock_release>:
 8011b64:	4801      	ldr	r0, [pc, #4]	; (8011b6c <__sinit_lock_release+0x8>)
 8011b66:	f000 bc15 	b.w	8012394 <__retarget_lock_release_recursive>
 8011b6a:	bf00      	nop
 8011b6c:	20009426 	.word	0x20009426

08011b70 <__sinit>:
 8011b70:	b510      	push	{r4, lr}
 8011b72:	4604      	mov	r4, r0
 8011b74:	f7ff fff0 	bl	8011b58 <__sinit_lock_acquire>
 8011b78:	69a3      	ldr	r3, [r4, #24]
 8011b7a:	b11b      	cbz	r3, 8011b84 <__sinit+0x14>
 8011b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b80:	f7ff bff0 	b.w	8011b64 <__sinit_lock_release>
 8011b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b88:	6523      	str	r3, [r4, #80]	; 0x50
 8011b8a:	4b13      	ldr	r3, [pc, #76]	; (8011bd8 <__sinit+0x68>)
 8011b8c:	4a13      	ldr	r2, [pc, #76]	; (8011bdc <__sinit+0x6c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b92:	42a3      	cmp	r3, r4
 8011b94:	bf04      	itt	eq
 8011b96:	2301      	moveq	r3, #1
 8011b98:	61a3      	streq	r3, [r4, #24]
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f000 f820 	bl	8011be0 <__sfp>
 8011ba0:	6060      	str	r0, [r4, #4]
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f000 f81c 	bl	8011be0 <__sfp>
 8011ba8:	60a0      	str	r0, [r4, #8]
 8011baa:	4620      	mov	r0, r4
 8011bac:	f000 f818 	bl	8011be0 <__sfp>
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	60e0      	str	r0, [r4, #12]
 8011bb4:	2104      	movs	r1, #4
 8011bb6:	6860      	ldr	r0, [r4, #4]
 8011bb8:	f7ff ff82 	bl	8011ac0 <std>
 8011bbc:	68a0      	ldr	r0, [r4, #8]
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	2109      	movs	r1, #9
 8011bc2:	f7ff ff7d 	bl	8011ac0 <std>
 8011bc6:	68e0      	ldr	r0, [r4, #12]
 8011bc8:	2202      	movs	r2, #2
 8011bca:	2112      	movs	r1, #18
 8011bcc:	f7ff ff78 	bl	8011ac0 <std>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	61a3      	str	r3, [r4, #24]
 8011bd4:	e7d2      	b.n	8011b7c <__sinit+0xc>
 8011bd6:	bf00      	nop
 8011bd8:	080150e4 	.word	0x080150e4
 8011bdc:	08011b09 	.word	0x08011b09

08011be0 <__sfp>:
 8011be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be2:	4607      	mov	r7, r0
 8011be4:	f7ff ffac 	bl	8011b40 <__sfp_lock_acquire>
 8011be8:	4b1e      	ldr	r3, [pc, #120]	; (8011c64 <__sfp+0x84>)
 8011bea:	681e      	ldr	r6, [r3, #0]
 8011bec:	69b3      	ldr	r3, [r6, #24]
 8011bee:	b913      	cbnz	r3, 8011bf6 <__sfp+0x16>
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7ff ffbd 	bl	8011b70 <__sinit>
 8011bf6:	3648      	adds	r6, #72	; 0x48
 8011bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	d503      	bpl.n	8011c08 <__sfp+0x28>
 8011c00:	6833      	ldr	r3, [r6, #0]
 8011c02:	b30b      	cbz	r3, 8011c48 <__sfp+0x68>
 8011c04:	6836      	ldr	r6, [r6, #0]
 8011c06:	e7f7      	b.n	8011bf8 <__sfp+0x18>
 8011c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c0c:	b9d5      	cbnz	r5, 8011c44 <__sfp+0x64>
 8011c0e:	4b16      	ldr	r3, [pc, #88]	; (8011c68 <__sfp+0x88>)
 8011c10:	60e3      	str	r3, [r4, #12]
 8011c12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c16:	6665      	str	r5, [r4, #100]	; 0x64
 8011c18:	f000 fbba 	bl	8012390 <__retarget_lock_init_recursive>
 8011c1c:	f7ff ff96 	bl	8011b4c <__sfp_lock_release>
 8011c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c28:	6025      	str	r5, [r4, #0]
 8011c2a:	61a5      	str	r5, [r4, #24]
 8011c2c:	2208      	movs	r2, #8
 8011c2e:	4629      	mov	r1, r5
 8011c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c34:	f7fd f94e 	bl	800eed4 <memset>
 8011c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c40:	4620      	mov	r0, r4
 8011c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c44:	3468      	adds	r4, #104	; 0x68
 8011c46:	e7d9      	b.n	8011bfc <__sfp+0x1c>
 8011c48:	2104      	movs	r1, #4
 8011c4a:	4638      	mov	r0, r7
 8011c4c:	f7ff ff62 	bl	8011b14 <__sfmoreglue>
 8011c50:	4604      	mov	r4, r0
 8011c52:	6030      	str	r0, [r6, #0]
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d1d5      	bne.n	8011c04 <__sfp+0x24>
 8011c58:	f7ff ff78 	bl	8011b4c <__sfp_lock_release>
 8011c5c:	230c      	movs	r3, #12
 8011c5e:	603b      	str	r3, [r7, #0]
 8011c60:	e7ee      	b.n	8011c40 <__sfp+0x60>
 8011c62:	bf00      	nop
 8011c64:	080150e4 	.word	0x080150e4
 8011c68:	ffff0001 	.word	0xffff0001

08011c6c <_fwalk_reent>:
 8011c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c70:	4606      	mov	r6, r0
 8011c72:	4688      	mov	r8, r1
 8011c74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c78:	2700      	movs	r7, #0
 8011c7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c7e:	f1b9 0901 	subs.w	r9, r9, #1
 8011c82:	d505      	bpl.n	8011c90 <_fwalk_reent+0x24>
 8011c84:	6824      	ldr	r4, [r4, #0]
 8011c86:	2c00      	cmp	r4, #0
 8011c88:	d1f7      	bne.n	8011c7a <_fwalk_reent+0xe>
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c90:	89ab      	ldrh	r3, [r5, #12]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d907      	bls.n	8011ca6 <_fwalk_reent+0x3a>
 8011c96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	d003      	beq.n	8011ca6 <_fwalk_reent+0x3a>
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	47c0      	blx	r8
 8011ca4:	4307      	orrs	r7, r0
 8011ca6:	3568      	adds	r5, #104	; 0x68
 8011ca8:	e7e9      	b.n	8011c7e <_fwalk_reent+0x12>

08011caa <rshift>:
 8011caa:	6903      	ldr	r3, [r0, #16]
 8011cac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cb4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011cb8:	f100 0414 	add.w	r4, r0, #20
 8011cbc:	dd45      	ble.n	8011d4a <rshift+0xa0>
 8011cbe:	f011 011f 	ands.w	r1, r1, #31
 8011cc2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011cc6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011cca:	d10c      	bne.n	8011ce6 <rshift+0x3c>
 8011ccc:	f100 0710 	add.w	r7, r0, #16
 8011cd0:	4629      	mov	r1, r5
 8011cd2:	42b1      	cmp	r1, r6
 8011cd4:	d334      	bcc.n	8011d40 <rshift+0x96>
 8011cd6:	1a9b      	subs	r3, r3, r2
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	1eea      	subs	r2, r5, #3
 8011cdc:	4296      	cmp	r6, r2
 8011cde:	bf38      	it	cc
 8011ce0:	2300      	movcc	r3, #0
 8011ce2:	4423      	add	r3, r4
 8011ce4:	e015      	b.n	8011d12 <rshift+0x68>
 8011ce6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011cea:	f1c1 0820 	rsb	r8, r1, #32
 8011cee:	40cf      	lsrs	r7, r1
 8011cf0:	f105 0e04 	add.w	lr, r5, #4
 8011cf4:	46a1      	mov	r9, r4
 8011cf6:	4576      	cmp	r6, lr
 8011cf8:	46f4      	mov	ip, lr
 8011cfa:	d815      	bhi.n	8011d28 <rshift+0x7e>
 8011cfc:	1a9a      	subs	r2, r3, r2
 8011cfe:	0092      	lsls	r2, r2, #2
 8011d00:	3a04      	subs	r2, #4
 8011d02:	3501      	adds	r5, #1
 8011d04:	42ae      	cmp	r6, r5
 8011d06:	bf38      	it	cc
 8011d08:	2200      	movcc	r2, #0
 8011d0a:	18a3      	adds	r3, r4, r2
 8011d0c:	50a7      	str	r7, [r4, r2]
 8011d0e:	b107      	cbz	r7, 8011d12 <rshift+0x68>
 8011d10:	3304      	adds	r3, #4
 8011d12:	1b1a      	subs	r2, r3, r4
 8011d14:	42a3      	cmp	r3, r4
 8011d16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d1a:	bf08      	it	eq
 8011d1c:	2300      	moveq	r3, #0
 8011d1e:	6102      	str	r2, [r0, #16]
 8011d20:	bf08      	it	eq
 8011d22:	6143      	streq	r3, [r0, #20]
 8011d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d28:	f8dc c000 	ldr.w	ip, [ip]
 8011d2c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d30:	ea4c 0707 	orr.w	r7, ip, r7
 8011d34:	f849 7b04 	str.w	r7, [r9], #4
 8011d38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d3c:	40cf      	lsrs	r7, r1
 8011d3e:	e7da      	b.n	8011cf6 <rshift+0x4c>
 8011d40:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d44:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d48:	e7c3      	b.n	8011cd2 <rshift+0x28>
 8011d4a:	4623      	mov	r3, r4
 8011d4c:	e7e1      	b.n	8011d12 <rshift+0x68>

08011d4e <__hexdig_fun>:
 8011d4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011d52:	2b09      	cmp	r3, #9
 8011d54:	d802      	bhi.n	8011d5c <__hexdig_fun+0xe>
 8011d56:	3820      	subs	r0, #32
 8011d58:	b2c0      	uxtb	r0, r0
 8011d5a:	4770      	bx	lr
 8011d5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011d60:	2b05      	cmp	r3, #5
 8011d62:	d801      	bhi.n	8011d68 <__hexdig_fun+0x1a>
 8011d64:	3847      	subs	r0, #71	; 0x47
 8011d66:	e7f7      	b.n	8011d58 <__hexdig_fun+0xa>
 8011d68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011d6c:	2b05      	cmp	r3, #5
 8011d6e:	d801      	bhi.n	8011d74 <__hexdig_fun+0x26>
 8011d70:	3827      	subs	r0, #39	; 0x27
 8011d72:	e7f1      	b.n	8011d58 <__hexdig_fun+0xa>
 8011d74:	2000      	movs	r0, #0
 8011d76:	4770      	bx	lr

08011d78 <__gethex>:
 8011d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d7c:	ed2d 8b02 	vpush	{d8}
 8011d80:	b089      	sub	sp, #36	; 0x24
 8011d82:	ee08 0a10 	vmov	s16, r0
 8011d86:	9304      	str	r3, [sp, #16]
 8011d88:	4bb4      	ldr	r3, [pc, #720]	; (801205c <__gethex+0x2e4>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	468b      	mov	fp, r1
 8011d92:	4690      	mov	r8, r2
 8011d94:	f7ee fa44 	bl	8000220 <strlen>
 8011d98:	9b01      	ldr	r3, [sp, #4]
 8011d9a:	f8db 2000 	ldr.w	r2, [fp]
 8011d9e:	4403      	add	r3, r0
 8011da0:	4682      	mov	sl, r0
 8011da2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011da6:	9305      	str	r3, [sp, #20]
 8011da8:	1c93      	adds	r3, r2, #2
 8011daa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011dae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011db2:	32fe      	adds	r2, #254	; 0xfe
 8011db4:	18d1      	adds	r1, r2, r3
 8011db6:	461f      	mov	r7, r3
 8011db8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011dbc:	9100      	str	r1, [sp, #0]
 8011dbe:	2830      	cmp	r0, #48	; 0x30
 8011dc0:	d0f8      	beq.n	8011db4 <__gethex+0x3c>
 8011dc2:	f7ff ffc4 	bl	8011d4e <__hexdig_fun>
 8011dc6:	4604      	mov	r4, r0
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	d13a      	bne.n	8011e42 <__gethex+0xca>
 8011dcc:	9901      	ldr	r1, [sp, #4]
 8011dce:	4652      	mov	r2, sl
 8011dd0:	4638      	mov	r0, r7
 8011dd2:	f001 fc28 	bl	8013626 <strncmp>
 8011dd6:	4605      	mov	r5, r0
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d168      	bne.n	8011eae <__gethex+0x136>
 8011ddc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011de0:	eb07 060a 	add.w	r6, r7, sl
 8011de4:	f7ff ffb3 	bl	8011d4e <__hexdig_fun>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d062      	beq.n	8011eb2 <__gethex+0x13a>
 8011dec:	4633      	mov	r3, r6
 8011dee:	7818      	ldrb	r0, [r3, #0]
 8011df0:	2830      	cmp	r0, #48	; 0x30
 8011df2:	461f      	mov	r7, r3
 8011df4:	f103 0301 	add.w	r3, r3, #1
 8011df8:	d0f9      	beq.n	8011dee <__gethex+0x76>
 8011dfa:	f7ff ffa8 	bl	8011d4e <__hexdig_fun>
 8011dfe:	2301      	movs	r3, #1
 8011e00:	fab0 f480 	clz	r4, r0
 8011e04:	0964      	lsrs	r4, r4, #5
 8011e06:	4635      	mov	r5, r6
 8011e08:	9300      	str	r3, [sp, #0]
 8011e0a:	463a      	mov	r2, r7
 8011e0c:	4616      	mov	r6, r2
 8011e0e:	3201      	adds	r2, #1
 8011e10:	7830      	ldrb	r0, [r6, #0]
 8011e12:	f7ff ff9c 	bl	8011d4e <__hexdig_fun>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	d1f8      	bne.n	8011e0c <__gethex+0x94>
 8011e1a:	9901      	ldr	r1, [sp, #4]
 8011e1c:	4652      	mov	r2, sl
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f001 fc01 	bl	8013626 <strncmp>
 8011e24:	b980      	cbnz	r0, 8011e48 <__gethex+0xd0>
 8011e26:	b94d      	cbnz	r5, 8011e3c <__gethex+0xc4>
 8011e28:	eb06 050a 	add.w	r5, r6, sl
 8011e2c:	462a      	mov	r2, r5
 8011e2e:	4616      	mov	r6, r2
 8011e30:	3201      	adds	r2, #1
 8011e32:	7830      	ldrb	r0, [r6, #0]
 8011e34:	f7ff ff8b 	bl	8011d4e <__hexdig_fun>
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	d1f8      	bne.n	8011e2e <__gethex+0xb6>
 8011e3c:	1bad      	subs	r5, r5, r6
 8011e3e:	00ad      	lsls	r5, r5, #2
 8011e40:	e004      	b.n	8011e4c <__gethex+0xd4>
 8011e42:	2400      	movs	r4, #0
 8011e44:	4625      	mov	r5, r4
 8011e46:	e7e0      	b.n	8011e0a <__gethex+0x92>
 8011e48:	2d00      	cmp	r5, #0
 8011e4a:	d1f7      	bne.n	8011e3c <__gethex+0xc4>
 8011e4c:	7833      	ldrb	r3, [r6, #0]
 8011e4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011e52:	2b50      	cmp	r3, #80	; 0x50
 8011e54:	d13b      	bne.n	8011ece <__gethex+0x156>
 8011e56:	7873      	ldrb	r3, [r6, #1]
 8011e58:	2b2b      	cmp	r3, #43	; 0x2b
 8011e5a:	d02c      	beq.n	8011eb6 <__gethex+0x13e>
 8011e5c:	2b2d      	cmp	r3, #45	; 0x2d
 8011e5e:	d02e      	beq.n	8011ebe <__gethex+0x146>
 8011e60:	1c71      	adds	r1, r6, #1
 8011e62:	f04f 0900 	mov.w	r9, #0
 8011e66:	7808      	ldrb	r0, [r1, #0]
 8011e68:	f7ff ff71 	bl	8011d4e <__hexdig_fun>
 8011e6c:	1e43      	subs	r3, r0, #1
 8011e6e:	b2db      	uxtb	r3, r3
 8011e70:	2b18      	cmp	r3, #24
 8011e72:	d82c      	bhi.n	8011ece <__gethex+0x156>
 8011e74:	f1a0 0210 	sub.w	r2, r0, #16
 8011e78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e7c:	f7ff ff67 	bl	8011d4e <__hexdig_fun>
 8011e80:	1e43      	subs	r3, r0, #1
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	2b18      	cmp	r3, #24
 8011e86:	d91d      	bls.n	8011ec4 <__gethex+0x14c>
 8011e88:	f1b9 0f00 	cmp.w	r9, #0
 8011e8c:	d000      	beq.n	8011e90 <__gethex+0x118>
 8011e8e:	4252      	negs	r2, r2
 8011e90:	4415      	add	r5, r2
 8011e92:	f8cb 1000 	str.w	r1, [fp]
 8011e96:	b1e4      	cbz	r4, 8011ed2 <__gethex+0x15a>
 8011e98:	9b00      	ldr	r3, [sp, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	bf14      	ite	ne
 8011e9e:	2700      	movne	r7, #0
 8011ea0:	2706      	moveq	r7, #6
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	b009      	add	sp, #36	; 0x24
 8011ea6:	ecbd 8b02 	vpop	{d8}
 8011eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eae:	463e      	mov	r6, r7
 8011eb0:	4625      	mov	r5, r4
 8011eb2:	2401      	movs	r4, #1
 8011eb4:	e7ca      	b.n	8011e4c <__gethex+0xd4>
 8011eb6:	f04f 0900 	mov.w	r9, #0
 8011eba:	1cb1      	adds	r1, r6, #2
 8011ebc:	e7d3      	b.n	8011e66 <__gethex+0xee>
 8011ebe:	f04f 0901 	mov.w	r9, #1
 8011ec2:	e7fa      	b.n	8011eba <__gethex+0x142>
 8011ec4:	230a      	movs	r3, #10
 8011ec6:	fb03 0202 	mla	r2, r3, r2, r0
 8011eca:	3a10      	subs	r2, #16
 8011ecc:	e7d4      	b.n	8011e78 <__gethex+0x100>
 8011ece:	4631      	mov	r1, r6
 8011ed0:	e7df      	b.n	8011e92 <__gethex+0x11a>
 8011ed2:	1bf3      	subs	r3, r6, r7
 8011ed4:	3b01      	subs	r3, #1
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	2b07      	cmp	r3, #7
 8011eda:	dc0b      	bgt.n	8011ef4 <__gethex+0x17c>
 8011edc:	ee18 0a10 	vmov	r0, s16
 8011ee0:	f000 fad8 	bl	8012494 <_Balloc>
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	b940      	cbnz	r0, 8011efa <__gethex+0x182>
 8011ee8:	4b5d      	ldr	r3, [pc, #372]	; (8012060 <__gethex+0x2e8>)
 8011eea:	4602      	mov	r2, r0
 8011eec:	21de      	movs	r1, #222	; 0xde
 8011eee:	485d      	ldr	r0, [pc, #372]	; (8012064 <__gethex+0x2ec>)
 8011ef0:	f001 fbcc 	bl	801368c <__assert_func>
 8011ef4:	3101      	adds	r1, #1
 8011ef6:	105b      	asrs	r3, r3, #1
 8011ef8:	e7ee      	b.n	8011ed8 <__gethex+0x160>
 8011efa:	f100 0914 	add.w	r9, r0, #20
 8011efe:	f04f 0b00 	mov.w	fp, #0
 8011f02:	f1ca 0301 	rsb	r3, sl, #1
 8011f06:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f0a:	f8cd b000 	str.w	fp, [sp]
 8011f0e:	9306      	str	r3, [sp, #24]
 8011f10:	42b7      	cmp	r7, r6
 8011f12:	d340      	bcc.n	8011f96 <__gethex+0x21e>
 8011f14:	9802      	ldr	r0, [sp, #8]
 8011f16:	9b00      	ldr	r3, [sp, #0]
 8011f18:	f840 3b04 	str.w	r3, [r0], #4
 8011f1c:	eba0 0009 	sub.w	r0, r0, r9
 8011f20:	1080      	asrs	r0, r0, #2
 8011f22:	0146      	lsls	r6, r0, #5
 8011f24:	6120      	str	r0, [r4, #16]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f000 fba6 	bl	8012678 <__hi0bits>
 8011f2c:	1a30      	subs	r0, r6, r0
 8011f2e:	f8d8 6000 	ldr.w	r6, [r8]
 8011f32:	42b0      	cmp	r0, r6
 8011f34:	dd63      	ble.n	8011ffe <__gethex+0x286>
 8011f36:	1b87      	subs	r7, r0, r6
 8011f38:	4639      	mov	r1, r7
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f000 ff4a 	bl	8012dd4 <__any_on>
 8011f40:	4682      	mov	sl, r0
 8011f42:	b1a8      	cbz	r0, 8011f70 <__gethex+0x1f8>
 8011f44:	1e7b      	subs	r3, r7, #1
 8011f46:	1159      	asrs	r1, r3, #5
 8011f48:	f003 021f 	and.w	r2, r3, #31
 8011f4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011f50:	f04f 0a01 	mov.w	sl, #1
 8011f54:	fa0a f202 	lsl.w	r2, sl, r2
 8011f58:	420a      	tst	r2, r1
 8011f5a:	d009      	beq.n	8011f70 <__gethex+0x1f8>
 8011f5c:	4553      	cmp	r3, sl
 8011f5e:	dd05      	ble.n	8011f6c <__gethex+0x1f4>
 8011f60:	1eb9      	subs	r1, r7, #2
 8011f62:	4620      	mov	r0, r4
 8011f64:	f000 ff36 	bl	8012dd4 <__any_on>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d145      	bne.n	8011ff8 <__gethex+0x280>
 8011f6c:	f04f 0a02 	mov.w	sl, #2
 8011f70:	4639      	mov	r1, r7
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7ff fe99 	bl	8011caa <rshift>
 8011f78:	443d      	add	r5, r7
 8011f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f7e:	42ab      	cmp	r3, r5
 8011f80:	da4c      	bge.n	801201c <__gethex+0x2a4>
 8011f82:	ee18 0a10 	vmov	r0, s16
 8011f86:	4621      	mov	r1, r4
 8011f88:	f000 fac4 	bl	8012514 <_Bfree>
 8011f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f8e:	2300      	movs	r3, #0
 8011f90:	6013      	str	r3, [r2, #0]
 8011f92:	27a3      	movs	r7, #163	; 0xa3
 8011f94:	e785      	b.n	8011ea2 <__gethex+0x12a>
 8011f96:	1e73      	subs	r3, r6, #1
 8011f98:	9a05      	ldr	r2, [sp, #20]
 8011f9a:	9303      	str	r3, [sp, #12]
 8011f9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d019      	beq.n	8011fd8 <__gethex+0x260>
 8011fa4:	f1bb 0f20 	cmp.w	fp, #32
 8011fa8:	d107      	bne.n	8011fba <__gethex+0x242>
 8011faa:	9b02      	ldr	r3, [sp, #8]
 8011fac:	9a00      	ldr	r2, [sp, #0]
 8011fae:	f843 2b04 	str.w	r2, [r3], #4
 8011fb2:	9302      	str	r3, [sp, #8]
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	469b      	mov	fp, r3
 8011fba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011fbe:	f7ff fec6 	bl	8011d4e <__hexdig_fun>
 8011fc2:	9b00      	ldr	r3, [sp, #0]
 8011fc4:	f000 000f 	and.w	r0, r0, #15
 8011fc8:	fa00 f00b 	lsl.w	r0, r0, fp
 8011fcc:	4303      	orrs	r3, r0
 8011fce:	9300      	str	r3, [sp, #0]
 8011fd0:	f10b 0b04 	add.w	fp, fp, #4
 8011fd4:	9b03      	ldr	r3, [sp, #12]
 8011fd6:	e00d      	b.n	8011ff4 <__gethex+0x27c>
 8011fd8:	9b03      	ldr	r3, [sp, #12]
 8011fda:	9a06      	ldr	r2, [sp, #24]
 8011fdc:	4413      	add	r3, r2
 8011fde:	42bb      	cmp	r3, r7
 8011fe0:	d3e0      	bcc.n	8011fa4 <__gethex+0x22c>
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	9901      	ldr	r1, [sp, #4]
 8011fe6:	9307      	str	r3, [sp, #28]
 8011fe8:	4652      	mov	r2, sl
 8011fea:	f001 fb1c 	bl	8013626 <strncmp>
 8011fee:	9b07      	ldr	r3, [sp, #28]
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d1d7      	bne.n	8011fa4 <__gethex+0x22c>
 8011ff4:	461e      	mov	r6, r3
 8011ff6:	e78b      	b.n	8011f10 <__gethex+0x198>
 8011ff8:	f04f 0a03 	mov.w	sl, #3
 8011ffc:	e7b8      	b.n	8011f70 <__gethex+0x1f8>
 8011ffe:	da0a      	bge.n	8012016 <__gethex+0x29e>
 8012000:	1a37      	subs	r7, r6, r0
 8012002:	4621      	mov	r1, r4
 8012004:	ee18 0a10 	vmov	r0, s16
 8012008:	463a      	mov	r2, r7
 801200a:	f000 fc9f 	bl	801294c <__lshift>
 801200e:	1bed      	subs	r5, r5, r7
 8012010:	4604      	mov	r4, r0
 8012012:	f100 0914 	add.w	r9, r0, #20
 8012016:	f04f 0a00 	mov.w	sl, #0
 801201a:	e7ae      	b.n	8011f7a <__gethex+0x202>
 801201c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012020:	42a8      	cmp	r0, r5
 8012022:	dd72      	ble.n	801210a <__gethex+0x392>
 8012024:	1b45      	subs	r5, r0, r5
 8012026:	42ae      	cmp	r6, r5
 8012028:	dc36      	bgt.n	8012098 <__gethex+0x320>
 801202a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801202e:	2b02      	cmp	r3, #2
 8012030:	d02a      	beq.n	8012088 <__gethex+0x310>
 8012032:	2b03      	cmp	r3, #3
 8012034:	d02c      	beq.n	8012090 <__gethex+0x318>
 8012036:	2b01      	cmp	r3, #1
 8012038:	d11c      	bne.n	8012074 <__gethex+0x2fc>
 801203a:	42ae      	cmp	r6, r5
 801203c:	d11a      	bne.n	8012074 <__gethex+0x2fc>
 801203e:	2e01      	cmp	r6, #1
 8012040:	d112      	bne.n	8012068 <__gethex+0x2f0>
 8012042:	9a04      	ldr	r2, [sp, #16]
 8012044:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012048:	6013      	str	r3, [r2, #0]
 801204a:	2301      	movs	r3, #1
 801204c:	6123      	str	r3, [r4, #16]
 801204e:	f8c9 3000 	str.w	r3, [r9]
 8012052:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012054:	2762      	movs	r7, #98	; 0x62
 8012056:	601c      	str	r4, [r3, #0]
 8012058:	e723      	b.n	8011ea2 <__gethex+0x12a>
 801205a:	bf00      	nop
 801205c:	080153d4 	.word	0x080153d4
 8012060:	080152f8 	.word	0x080152f8
 8012064:	0801536c 	.word	0x0801536c
 8012068:	1e71      	subs	r1, r6, #1
 801206a:	4620      	mov	r0, r4
 801206c:	f000 feb2 	bl	8012dd4 <__any_on>
 8012070:	2800      	cmp	r0, #0
 8012072:	d1e6      	bne.n	8012042 <__gethex+0x2ca>
 8012074:	ee18 0a10 	vmov	r0, s16
 8012078:	4621      	mov	r1, r4
 801207a:	f000 fa4b 	bl	8012514 <_Bfree>
 801207e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012080:	2300      	movs	r3, #0
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	2750      	movs	r7, #80	; 0x50
 8012086:	e70c      	b.n	8011ea2 <__gethex+0x12a>
 8012088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801208a:	2b00      	cmp	r3, #0
 801208c:	d1f2      	bne.n	8012074 <__gethex+0x2fc>
 801208e:	e7d8      	b.n	8012042 <__gethex+0x2ca>
 8012090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1d5      	bne.n	8012042 <__gethex+0x2ca>
 8012096:	e7ed      	b.n	8012074 <__gethex+0x2fc>
 8012098:	1e6f      	subs	r7, r5, #1
 801209a:	f1ba 0f00 	cmp.w	sl, #0
 801209e:	d131      	bne.n	8012104 <__gethex+0x38c>
 80120a0:	b127      	cbz	r7, 80120ac <__gethex+0x334>
 80120a2:	4639      	mov	r1, r7
 80120a4:	4620      	mov	r0, r4
 80120a6:	f000 fe95 	bl	8012dd4 <__any_on>
 80120aa:	4682      	mov	sl, r0
 80120ac:	117b      	asrs	r3, r7, #5
 80120ae:	2101      	movs	r1, #1
 80120b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80120b4:	f007 071f 	and.w	r7, r7, #31
 80120b8:	fa01 f707 	lsl.w	r7, r1, r7
 80120bc:	421f      	tst	r7, r3
 80120be:	4629      	mov	r1, r5
 80120c0:	4620      	mov	r0, r4
 80120c2:	bf18      	it	ne
 80120c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80120c8:	1b76      	subs	r6, r6, r5
 80120ca:	f7ff fdee 	bl	8011caa <rshift>
 80120ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80120d2:	2702      	movs	r7, #2
 80120d4:	f1ba 0f00 	cmp.w	sl, #0
 80120d8:	d048      	beq.n	801216c <__gethex+0x3f4>
 80120da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d015      	beq.n	801210e <__gethex+0x396>
 80120e2:	2b03      	cmp	r3, #3
 80120e4:	d017      	beq.n	8012116 <__gethex+0x39e>
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d109      	bne.n	80120fe <__gethex+0x386>
 80120ea:	f01a 0f02 	tst.w	sl, #2
 80120ee:	d006      	beq.n	80120fe <__gethex+0x386>
 80120f0:	f8d9 0000 	ldr.w	r0, [r9]
 80120f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80120f8:	f01a 0f01 	tst.w	sl, #1
 80120fc:	d10e      	bne.n	801211c <__gethex+0x3a4>
 80120fe:	f047 0710 	orr.w	r7, r7, #16
 8012102:	e033      	b.n	801216c <__gethex+0x3f4>
 8012104:	f04f 0a01 	mov.w	sl, #1
 8012108:	e7d0      	b.n	80120ac <__gethex+0x334>
 801210a:	2701      	movs	r7, #1
 801210c:	e7e2      	b.n	80120d4 <__gethex+0x35c>
 801210e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012110:	f1c3 0301 	rsb	r3, r3, #1
 8012114:	9315      	str	r3, [sp, #84]	; 0x54
 8012116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012118:	2b00      	cmp	r3, #0
 801211a:	d0f0      	beq.n	80120fe <__gethex+0x386>
 801211c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012120:	f104 0314 	add.w	r3, r4, #20
 8012124:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012128:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801212c:	f04f 0c00 	mov.w	ip, #0
 8012130:	4618      	mov	r0, r3
 8012132:	f853 2b04 	ldr.w	r2, [r3], #4
 8012136:	f1b2 3fff 	cmp.w	r2, #4294967295
 801213a:	d01c      	beq.n	8012176 <__gethex+0x3fe>
 801213c:	3201      	adds	r2, #1
 801213e:	6002      	str	r2, [r0, #0]
 8012140:	2f02      	cmp	r7, #2
 8012142:	f104 0314 	add.w	r3, r4, #20
 8012146:	d13f      	bne.n	80121c8 <__gethex+0x450>
 8012148:	f8d8 2000 	ldr.w	r2, [r8]
 801214c:	3a01      	subs	r2, #1
 801214e:	42b2      	cmp	r2, r6
 8012150:	d10a      	bne.n	8012168 <__gethex+0x3f0>
 8012152:	1171      	asrs	r1, r6, #5
 8012154:	2201      	movs	r2, #1
 8012156:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801215a:	f006 061f 	and.w	r6, r6, #31
 801215e:	fa02 f606 	lsl.w	r6, r2, r6
 8012162:	421e      	tst	r6, r3
 8012164:	bf18      	it	ne
 8012166:	4617      	movne	r7, r2
 8012168:	f047 0720 	orr.w	r7, r7, #32
 801216c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801216e:	601c      	str	r4, [r3, #0]
 8012170:	9b04      	ldr	r3, [sp, #16]
 8012172:	601d      	str	r5, [r3, #0]
 8012174:	e695      	b.n	8011ea2 <__gethex+0x12a>
 8012176:	4299      	cmp	r1, r3
 8012178:	f843 cc04 	str.w	ip, [r3, #-4]
 801217c:	d8d8      	bhi.n	8012130 <__gethex+0x3b8>
 801217e:	68a3      	ldr	r3, [r4, #8]
 8012180:	459b      	cmp	fp, r3
 8012182:	db19      	blt.n	80121b8 <__gethex+0x440>
 8012184:	6861      	ldr	r1, [r4, #4]
 8012186:	ee18 0a10 	vmov	r0, s16
 801218a:	3101      	adds	r1, #1
 801218c:	f000 f982 	bl	8012494 <_Balloc>
 8012190:	4681      	mov	r9, r0
 8012192:	b918      	cbnz	r0, 801219c <__gethex+0x424>
 8012194:	4b1a      	ldr	r3, [pc, #104]	; (8012200 <__gethex+0x488>)
 8012196:	4602      	mov	r2, r0
 8012198:	2184      	movs	r1, #132	; 0x84
 801219a:	e6a8      	b.n	8011eee <__gethex+0x176>
 801219c:	6922      	ldr	r2, [r4, #16]
 801219e:	3202      	adds	r2, #2
 80121a0:	f104 010c 	add.w	r1, r4, #12
 80121a4:	0092      	lsls	r2, r2, #2
 80121a6:	300c      	adds	r0, #12
 80121a8:	f7fc fe86 	bl	800eeb8 <memcpy>
 80121ac:	4621      	mov	r1, r4
 80121ae:	ee18 0a10 	vmov	r0, s16
 80121b2:	f000 f9af 	bl	8012514 <_Bfree>
 80121b6:	464c      	mov	r4, r9
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	1c5a      	adds	r2, r3, #1
 80121bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80121c0:	6122      	str	r2, [r4, #16]
 80121c2:	2201      	movs	r2, #1
 80121c4:	615a      	str	r2, [r3, #20]
 80121c6:	e7bb      	b.n	8012140 <__gethex+0x3c8>
 80121c8:	6922      	ldr	r2, [r4, #16]
 80121ca:	455a      	cmp	r2, fp
 80121cc:	dd0b      	ble.n	80121e6 <__gethex+0x46e>
 80121ce:	2101      	movs	r1, #1
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7ff fd6a 	bl	8011caa <rshift>
 80121d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121da:	3501      	adds	r5, #1
 80121dc:	42ab      	cmp	r3, r5
 80121de:	f6ff aed0 	blt.w	8011f82 <__gethex+0x20a>
 80121e2:	2701      	movs	r7, #1
 80121e4:	e7c0      	b.n	8012168 <__gethex+0x3f0>
 80121e6:	f016 061f 	ands.w	r6, r6, #31
 80121ea:	d0fa      	beq.n	80121e2 <__gethex+0x46a>
 80121ec:	4453      	add	r3, sl
 80121ee:	f1c6 0620 	rsb	r6, r6, #32
 80121f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80121f6:	f000 fa3f 	bl	8012678 <__hi0bits>
 80121fa:	42b0      	cmp	r0, r6
 80121fc:	dbe7      	blt.n	80121ce <__gethex+0x456>
 80121fe:	e7f0      	b.n	80121e2 <__gethex+0x46a>
 8012200:	080152f8 	.word	0x080152f8

08012204 <L_shift>:
 8012204:	f1c2 0208 	rsb	r2, r2, #8
 8012208:	0092      	lsls	r2, r2, #2
 801220a:	b570      	push	{r4, r5, r6, lr}
 801220c:	f1c2 0620 	rsb	r6, r2, #32
 8012210:	6843      	ldr	r3, [r0, #4]
 8012212:	6804      	ldr	r4, [r0, #0]
 8012214:	fa03 f506 	lsl.w	r5, r3, r6
 8012218:	432c      	orrs	r4, r5
 801221a:	40d3      	lsrs	r3, r2
 801221c:	6004      	str	r4, [r0, #0]
 801221e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012222:	4288      	cmp	r0, r1
 8012224:	d3f4      	bcc.n	8012210 <L_shift+0xc>
 8012226:	bd70      	pop	{r4, r5, r6, pc}

08012228 <__match>:
 8012228:	b530      	push	{r4, r5, lr}
 801222a:	6803      	ldr	r3, [r0, #0]
 801222c:	3301      	adds	r3, #1
 801222e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012232:	b914      	cbnz	r4, 801223a <__match+0x12>
 8012234:	6003      	str	r3, [r0, #0]
 8012236:	2001      	movs	r0, #1
 8012238:	bd30      	pop	{r4, r5, pc}
 801223a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801223e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012242:	2d19      	cmp	r5, #25
 8012244:	bf98      	it	ls
 8012246:	3220      	addls	r2, #32
 8012248:	42a2      	cmp	r2, r4
 801224a:	d0f0      	beq.n	801222e <__match+0x6>
 801224c:	2000      	movs	r0, #0
 801224e:	e7f3      	b.n	8012238 <__match+0x10>

08012250 <__hexnan>:
 8012250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012254:	680b      	ldr	r3, [r1, #0]
 8012256:	115e      	asrs	r6, r3, #5
 8012258:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801225c:	f013 031f 	ands.w	r3, r3, #31
 8012260:	b087      	sub	sp, #28
 8012262:	bf18      	it	ne
 8012264:	3604      	addne	r6, #4
 8012266:	2500      	movs	r5, #0
 8012268:	1f37      	subs	r7, r6, #4
 801226a:	4690      	mov	r8, r2
 801226c:	6802      	ldr	r2, [r0, #0]
 801226e:	9301      	str	r3, [sp, #4]
 8012270:	4682      	mov	sl, r0
 8012272:	f846 5c04 	str.w	r5, [r6, #-4]
 8012276:	46b9      	mov	r9, r7
 8012278:	463c      	mov	r4, r7
 801227a:	9502      	str	r5, [sp, #8]
 801227c:	46ab      	mov	fp, r5
 801227e:	7851      	ldrb	r1, [r2, #1]
 8012280:	1c53      	adds	r3, r2, #1
 8012282:	9303      	str	r3, [sp, #12]
 8012284:	b341      	cbz	r1, 80122d8 <__hexnan+0x88>
 8012286:	4608      	mov	r0, r1
 8012288:	9205      	str	r2, [sp, #20]
 801228a:	9104      	str	r1, [sp, #16]
 801228c:	f7ff fd5f 	bl	8011d4e <__hexdig_fun>
 8012290:	2800      	cmp	r0, #0
 8012292:	d14f      	bne.n	8012334 <__hexnan+0xe4>
 8012294:	9904      	ldr	r1, [sp, #16]
 8012296:	9a05      	ldr	r2, [sp, #20]
 8012298:	2920      	cmp	r1, #32
 801229a:	d818      	bhi.n	80122ce <__hexnan+0x7e>
 801229c:	9b02      	ldr	r3, [sp, #8]
 801229e:	459b      	cmp	fp, r3
 80122a0:	dd13      	ble.n	80122ca <__hexnan+0x7a>
 80122a2:	454c      	cmp	r4, r9
 80122a4:	d206      	bcs.n	80122b4 <__hexnan+0x64>
 80122a6:	2d07      	cmp	r5, #7
 80122a8:	dc04      	bgt.n	80122b4 <__hexnan+0x64>
 80122aa:	462a      	mov	r2, r5
 80122ac:	4649      	mov	r1, r9
 80122ae:	4620      	mov	r0, r4
 80122b0:	f7ff ffa8 	bl	8012204 <L_shift>
 80122b4:	4544      	cmp	r4, r8
 80122b6:	d950      	bls.n	801235a <__hexnan+0x10a>
 80122b8:	2300      	movs	r3, #0
 80122ba:	f1a4 0904 	sub.w	r9, r4, #4
 80122be:	f844 3c04 	str.w	r3, [r4, #-4]
 80122c2:	f8cd b008 	str.w	fp, [sp, #8]
 80122c6:	464c      	mov	r4, r9
 80122c8:	461d      	mov	r5, r3
 80122ca:	9a03      	ldr	r2, [sp, #12]
 80122cc:	e7d7      	b.n	801227e <__hexnan+0x2e>
 80122ce:	2929      	cmp	r1, #41	; 0x29
 80122d0:	d156      	bne.n	8012380 <__hexnan+0x130>
 80122d2:	3202      	adds	r2, #2
 80122d4:	f8ca 2000 	str.w	r2, [sl]
 80122d8:	f1bb 0f00 	cmp.w	fp, #0
 80122dc:	d050      	beq.n	8012380 <__hexnan+0x130>
 80122de:	454c      	cmp	r4, r9
 80122e0:	d206      	bcs.n	80122f0 <__hexnan+0xa0>
 80122e2:	2d07      	cmp	r5, #7
 80122e4:	dc04      	bgt.n	80122f0 <__hexnan+0xa0>
 80122e6:	462a      	mov	r2, r5
 80122e8:	4649      	mov	r1, r9
 80122ea:	4620      	mov	r0, r4
 80122ec:	f7ff ff8a 	bl	8012204 <L_shift>
 80122f0:	4544      	cmp	r4, r8
 80122f2:	d934      	bls.n	801235e <__hexnan+0x10e>
 80122f4:	f1a8 0204 	sub.w	r2, r8, #4
 80122f8:	4623      	mov	r3, r4
 80122fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80122fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8012302:	429f      	cmp	r7, r3
 8012304:	d2f9      	bcs.n	80122fa <__hexnan+0xaa>
 8012306:	1b3b      	subs	r3, r7, r4
 8012308:	f023 0303 	bic.w	r3, r3, #3
 801230c:	3304      	adds	r3, #4
 801230e:	3401      	adds	r4, #1
 8012310:	3e03      	subs	r6, #3
 8012312:	42b4      	cmp	r4, r6
 8012314:	bf88      	it	hi
 8012316:	2304      	movhi	r3, #4
 8012318:	4443      	add	r3, r8
 801231a:	2200      	movs	r2, #0
 801231c:	f843 2b04 	str.w	r2, [r3], #4
 8012320:	429f      	cmp	r7, r3
 8012322:	d2fb      	bcs.n	801231c <__hexnan+0xcc>
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	b91b      	cbnz	r3, 8012330 <__hexnan+0xe0>
 8012328:	4547      	cmp	r7, r8
 801232a:	d127      	bne.n	801237c <__hexnan+0x12c>
 801232c:	2301      	movs	r3, #1
 801232e:	603b      	str	r3, [r7, #0]
 8012330:	2005      	movs	r0, #5
 8012332:	e026      	b.n	8012382 <__hexnan+0x132>
 8012334:	3501      	adds	r5, #1
 8012336:	2d08      	cmp	r5, #8
 8012338:	f10b 0b01 	add.w	fp, fp, #1
 801233c:	dd06      	ble.n	801234c <__hexnan+0xfc>
 801233e:	4544      	cmp	r4, r8
 8012340:	d9c3      	bls.n	80122ca <__hexnan+0x7a>
 8012342:	2300      	movs	r3, #0
 8012344:	f844 3c04 	str.w	r3, [r4, #-4]
 8012348:	2501      	movs	r5, #1
 801234a:	3c04      	subs	r4, #4
 801234c:	6822      	ldr	r2, [r4, #0]
 801234e:	f000 000f 	and.w	r0, r0, #15
 8012352:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012356:	6022      	str	r2, [r4, #0]
 8012358:	e7b7      	b.n	80122ca <__hexnan+0x7a>
 801235a:	2508      	movs	r5, #8
 801235c:	e7b5      	b.n	80122ca <__hexnan+0x7a>
 801235e:	9b01      	ldr	r3, [sp, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d0df      	beq.n	8012324 <__hexnan+0xd4>
 8012364:	f04f 32ff 	mov.w	r2, #4294967295
 8012368:	f1c3 0320 	rsb	r3, r3, #32
 801236c:	fa22 f303 	lsr.w	r3, r2, r3
 8012370:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012374:	401a      	ands	r2, r3
 8012376:	f846 2c04 	str.w	r2, [r6, #-4]
 801237a:	e7d3      	b.n	8012324 <__hexnan+0xd4>
 801237c:	3f04      	subs	r7, #4
 801237e:	e7d1      	b.n	8012324 <__hexnan+0xd4>
 8012380:	2004      	movs	r0, #4
 8012382:	b007      	add	sp, #28
 8012384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012388 <_localeconv_r>:
 8012388:	4800      	ldr	r0, [pc, #0]	; (801238c <_localeconv_r+0x4>)
 801238a:	4770      	bx	lr
 801238c:	20000184 	.word	0x20000184

08012390 <__retarget_lock_init_recursive>:
 8012390:	4770      	bx	lr

08012392 <__retarget_lock_acquire_recursive>:
 8012392:	4770      	bx	lr

08012394 <__retarget_lock_release_recursive>:
 8012394:	4770      	bx	lr

08012396 <__swhatbuf_r>:
 8012396:	b570      	push	{r4, r5, r6, lr}
 8012398:	460e      	mov	r6, r1
 801239a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801239e:	2900      	cmp	r1, #0
 80123a0:	b096      	sub	sp, #88	; 0x58
 80123a2:	4614      	mov	r4, r2
 80123a4:	461d      	mov	r5, r3
 80123a6:	da08      	bge.n	80123ba <__swhatbuf_r+0x24>
 80123a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80123ac:	2200      	movs	r2, #0
 80123ae:	602a      	str	r2, [r5, #0]
 80123b0:	061a      	lsls	r2, r3, #24
 80123b2:	d410      	bmi.n	80123d6 <__swhatbuf_r+0x40>
 80123b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123b8:	e00e      	b.n	80123d8 <__swhatbuf_r+0x42>
 80123ba:	466a      	mov	r2, sp
 80123bc:	f001 f9a6 	bl	801370c <_fstat_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	dbf1      	blt.n	80123a8 <__swhatbuf_r+0x12>
 80123c4:	9a01      	ldr	r2, [sp, #4]
 80123c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80123ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80123ce:	425a      	negs	r2, r3
 80123d0:	415a      	adcs	r2, r3
 80123d2:	602a      	str	r2, [r5, #0]
 80123d4:	e7ee      	b.n	80123b4 <__swhatbuf_r+0x1e>
 80123d6:	2340      	movs	r3, #64	; 0x40
 80123d8:	2000      	movs	r0, #0
 80123da:	6023      	str	r3, [r4, #0]
 80123dc:	b016      	add	sp, #88	; 0x58
 80123de:	bd70      	pop	{r4, r5, r6, pc}

080123e0 <__smakebuf_r>:
 80123e0:	898b      	ldrh	r3, [r1, #12]
 80123e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123e4:	079d      	lsls	r5, r3, #30
 80123e6:	4606      	mov	r6, r0
 80123e8:	460c      	mov	r4, r1
 80123ea:	d507      	bpl.n	80123fc <__smakebuf_r+0x1c>
 80123ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123f0:	6023      	str	r3, [r4, #0]
 80123f2:	6123      	str	r3, [r4, #16]
 80123f4:	2301      	movs	r3, #1
 80123f6:	6163      	str	r3, [r4, #20]
 80123f8:	b002      	add	sp, #8
 80123fa:	bd70      	pop	{r4, r5, r6, pc}
 80123fc:	ab01      	add	r3, sp, #4
 80123fe:	466a      	mov	r2, sp
 8012400:	f7ff ffc9 	bl	8012396 <__swhatbuf_r>
 8012404:	9900      	ldr	r1, [sp, #0]
 8012406:	4605      	mov	r5, r0
 8012408:	4630      	mov	r0, r6
 801240a:	f000 fd87 	bl	8012f1c <_malloc_r>
 801240e:	b948      	cbnz	r0, 8012424 <__smakebuf_r+0x44>
 8012410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012414:	059a      	lsls	r2, r3, #22
 8012416:	d4ef      	bmi.n	80123f8 <__smakebuf_r+0x18>
 8012418:	f023 0303 	bic.w	r3, r3, #3
 801241c:	f043 0302 	orr.w	r3, r3, #2
 8012420:	81a3      	strh	r3, [r4, #12]
 8012422:	e7e3      	b.n	80123ec <__smakebuf_r+0xc>
 8012424:	4b0d      	ldr	r3, [pc, #52]	; (801245c <__smakebuf_r+0x7c>)
 8012426:	62b3      	str	r3, [r6, #40]	; 0x28
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	6020      	str	r0, [r4, #0]
 801242c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012430:	81a3      	strh	r3, [r4, #12]
 8012432:	9b00      	ldr	r3, [sp, #0]
 8012434:	6163      	str	r3, [r4, #20]
 8012436:	9b01      	ldr	r3, [sp, #4]
 8012438:	6120      	str	r0, [r4, #16]
 801243a:	b15b      	cbz	r3, 8012454 <__smakebuf_r+0x74>
 801243c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012440:	4630      	mov	r0, r6
 8012442:	f001 f975 	bl	8013730 <_isatty_r>
 8012446:	b128      	cbz	r0, 8012454 <__smakebuf_r+0x74>
 8012448:	89a3      	ldrh	r3, [r4, #12]
 801244a:	f023 0303 	bic.w	r3, r3, #3
 801244e:	f043 0301 	orr.w	r3, r3, #1
 8012452:	81a3      	strh	r3, [r4, #12]
 8012454:	89a0      	ldrh	r0, [r4, #12]
 8012456:	4305      	orrs	r5, r0
 8012458:	81a5      	strh	r5, [r4, #12]
 801245a:	e7cd      	b.n	80123f8 <__smakebuf_r+0x18>
 801245c:	08011b09 	.word	0x08011b09

08012460 <malloc>:
 8012460:	4b02      	ldr	r3, [pc, #8]	; (801246c <malloc+0xc>)
 8012462:	4601      	mov	r1, r0
 8012464:	6818      	ldr	r0, [r3, #0]
 8012466:	f000 bd59 	b.w	8012f1c <_malloc_r>
 801246a:	bf00      	nop
 801246c:	2000002c 	.word	0x2000002c

08012470 <__ascii_mbtowc>:
 8012470:	b082      	sub	sp, #8
 8012472:	b901      	cbnz	r1, 8012476 <__ascii_mbtowc+0x6>
 8012474:	a901      	add	r1, sp, #4
 8012476:	b142      	cbz	r2, 801248a <__ascii_mbtowc+0x1a>
 8012478:	b14b      	cbz	r3, 801248e <__ascii_mbtowc+0x1e>
 801247a:	7813      	ldrb	r3, [r2, #0]
 801247c:	600b      	str	r3, [r1, #0]
 801247e:	7812      	ldrb	r2, [r2, #0]
 8012480:	1e10      	subs	r0, r2, #0
 8012482:	bf18      	it	ne
 8012484:	2001      	movne	r0, #1
 8012486:	b002      	add	sp, #8
 8012488:	4770      	bx	lr
 801248a:	4610      	mov	r0, r2
 801248c:	e7fb      	b.n	8012486 <__ascii_mbtowc+0x16>
 801248e:	f06f 0001 	mvn.w	r0, #1
 8012492:	e7f8      	b.n	8012486 <__ascii_mbtowc+0x16>

08012494 <_Balloc>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012498:	4604      	mov	r4, r0
 801249a:	460d      	mov	r5, r1
 801249c:	b976      	cbnz	r6, 80124bc <_Balloc+0x28>
 801249e:	2010      	movs	r0, #16
 80124a0:	f7ff ffde 	bl	8012460 <malloc>
 80124a4:	4602      	mov	r2, r0
 80124a6:	6260      	str	r0, [r4, #36]	; 0x24
 80124a8:	b920      	cbnz	r0, 80124b4 <_Balloc+0x20>
 80124aa:	4b18      	ldr	r3, [pc, #96]	; (801250c <_Balloc+0x78>)
 80124ac:	4818      	ldr	r0, [pc, #96]	; (8012510 <_Balloc+0x7c>)
 80124ae:	2166      	movs	r1, #102	; 0x66
 80124b0:	f001 f8ec 	bl	801368c <__assert_func>
 80124b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124b8:	6006      	str	r6, [r0, #0]
 80124ba:	60c6      	str	r6, [r0, #12]
 80124bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80124be:	68f3      	ldr	r3, [r6, #12]
 80124c0:	b183      	cbz	r3, 80124e4 <_Balloc+0x50>
 80124c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80124ca:	b9b8      	cbnz	r0, 80124fc <_Balloc+0x68>
 80124cc:	2101      	movs	r1, #1
 80124ce:	fa01 f605 	lsl.w	r6, r1, r5
 80124d2:	1d72      	adds	r2, r6, #5
 80124d4:	0092      	lsls	r2, r2, #2
 80124d6:	4620      	mov	r0, r4
 80124d8:	f000 fc9d 	bl	8012e16 <_calloc_r>
 80124dc:	b160      	cbz	r0, 80124f8 <_Balloc+0x64>
 80124de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80124e2:	e00e      	b.n	8012502 <_Balloc+0x6e>
 80124e4:	2221      	movs	r2, #33	; 0x21
 80124e6:	2104      	movs	r1, #4
 80124e8:	4620      	mov	r0, r4
 80124ea:	f000 fc94 	bl	8012e16 <_calloc_r>
 80124ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124f0:	60f0      	str	r0, [r6, #12]
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d1e4      	bne.n	80124c2 <_Balloc+0x2e>
 80124f8:	2000      	movs	r0, #0
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	6802      	ldr	r2, [r0, #0]
 80124fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012502:	2300      	movs	r3, #0
 8012504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012508:	e7f7      	b.n	80124fa <_Balloc+0x66>
 801250a:	bf00      	nop
 801250c:	08015286 	.word	0x08015286
 8012510:	080153e8 	.word	0x080153e8

08012514 <_Bfree>:
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012518:	4605      	mov	r5, r0
 801251a:	460c      	mov	r4, r1
 801251c:	b976      	cbnz	r6, 801253c <_Bfree+0x28>
 801251e:	2010      	movs	r0, #16
 8012520:	f7ff ff9e 	bl	8012460 <malloc>
 8012524:	4602      	mov	r2, r0
 8012526:	6268      	str	r0, [r5, #36]	; 0x24
 8012528:	b920      	cbnz	r0, 8012534 <_Bfree+0x20>
 801252a:	4b09      	ldr	r3, [pc, #36]	; (8012550 <_Bfree+0x3c>)
 801252c:	4809      	ldr	r0, [pc, #36]	; (8012554 <_Bfree+0x40>)
 801252e:	218a      	movs	r1, #138	; 0x8a
 8012530:	f001 f8ac 	bl	801368c <__assert_func>
 8012534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012538:	6006      	str	r6, [r0, #0]
 801253a:	60c6      	str	r6, [r0, #12]
 801253c:	b13c      	cbz	r4, 801254e <_Bfree+0x3a>
 801253e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012540:	6862      	ldr	r2, [r4, #4]
 8012542:	68db      	ldr	r3, [r3, #12]
 8012544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012548:	6021      	str	r1, [r4, #0]
 801254a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801254e:	bd70      	pop	{r4, r5, r6, pc}
 8012550:	08015286 	.word	0x08015286
 8012554:	080153e8 	.word	0x080153e8

08012558 <__multadd>:
 8012558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255c:	690d      	ldr	r5, [r1, #16]
 801255e:	4607      	mov	r7, r0
 8012560:	460c      	mov	r4, r1
 8012562:	461e      	mov	r6, r3
 8012564:	f101 0c14 	add.w	ip, r1, #20
 8012568:	2000      	movs	r0, #0
 801256a:	f8dc 3000 	ldr.w	r3, [ip]
 801256e:	b299      	uxth	r1, r3
 8012570:	fb02 6101 	mla	r1, r2, r1, r6
 8012574:	0c1e      	lsrs	r6, r3, #16
 8012576:	0c0b      	lsrs	r3, r1, #16
 8012578:	fb02 3306 	mla	r3, r2, r6, r3
 801257c:	b289      	uxth	r1, r1
 801257e:	3001      	adds	r0, #1
 8012580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012584:	4285      	cmp	r5, r0
 8012586:	f84c 1b04 	str.w	r1, [ip], #4
 801258a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801258e:	dcec      	bgt.n	801256a <__multadd+0x12>
 8012590:	b30e      	cbz	r6, 80125d6 <__multadd+0x7e>
 8012592:	68a3      	ldr	r3, [r4, #8]
 8012594:	42ab      	cmp	r3, r5
 8012596:	dc19      	bgt.n	80125cc <__multadd+0x74>
 8012598:	6861      	ldr	r1, [r4, #4]
 801259a:	4638      	mov	r0, r7
 801259c:	3101      	adds	r1, #1
 801259e:	f7ff ff79 	bl	8012494 <_Balloc>
 80125a2:	4680      	mov	r8, r0
 80125a4:	b928      	cbnz	r0, 80125b2 <__multadd+0x5a>
 80125a6:	4602      	mov	r2, r0
 80125a8:	4b0c      	ldr	r3, [pc, #48]	; (80125dc <__multadd+0x84>)
 80125aa:	480d      	ldr	r0, [pc, #52]	; (80125e0 <__multadd+0x88>)
 80125ac:	21b5      	movs	r1, #181	; 0xb5
 80125ae:	f001 f86d 	bl	801368c <__assert_func>
 80125b2:	6922      	ldr	r2, [r4, #16]
 80125b4:	3202      	adds	r2, #2
 80125b6:	f104 010c 	add.w	r1, r4, #12
 80125ba:	0092      	lsls	r2, r2, #2
 80125bc:	300c      	adds	r0, #12
 80125be:	f7fc fc7b 	bl	800eeb8 <memcpy>
 80125c2:	4621      	mov	r1, r4
 80125c4:	4638      	mov	r0, r7
 80125c6:	f7ff ffa5 	bl	8012514 <_Bfree>
 80125ca:	4644      	mov	r4, r8
 80125cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80125d0:	3501      	adds	r5, #1
 80125d2:	615e      	str	r6, [r3, #20]
 80125d4:	6125      	str	r5, [r4, #16]
 80125d6:	4620      	mov	r0, r4
 80125d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125dc:	080152f8 	.word	0x080152f8
 80125e0:	080153e8 	.word	0x080153e8

080125e4 <__s2b>:
 80125e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125e8:	460c      	mov	r4, r1
 80125ea:	4615      	mov	r5, r2
 80125ec:	461f      	mov	r7, r3
 80125ee:	2209      	movs	r2, #9
 80125f0:	3308      	adds	r3, #8
 80125f2:	4606      	mov	r6, r0
 80125f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80125f8:	2100      	movs	r1, #0
 80125fa:	2201      	movs	r2, #1
 80125fc:	429a      	cmp	r2, r3
 80125fe:	db09      	blt.n	8012614 <__s2b+0x30>
 8012600:	4630      	mov	r0, r6
 8012602:	f7ff ff47 	bl	8012494 <_Balloc>
 8012606:	b940      	cbnz	r0, 801261a <__s2b+0x36>
 8012608:	4602      	mov	r2, r0
 801260a:	4b19      	ldr	r3, [pc, #100]	; (8012670 <__s2b+0x8c>)
 801260c:	4819      	ldr	r0, [pc, #100]	; (8012674 <__s2b+0x90>)
 801260e:	21ce      	movs	r1, #206	; 0xce
 8012610:	f001 f83c 	bl	801368c <__assert_func>
 8012614:	0052      	lsls	r2, r2, #1
 8012616:	3101      	adds	r1, #1
 8012618:	e7f0      	b.n	80125fc <__s2b+0x18>
 801261a:	9b08      	ldr	r3, [sp, #32]
 801261c:	6143      	str	r3, [r0, #20]
 801261e:	2d09      	cmp	r5, #9
 8012620:	f04f 0301 	mov.w	r3, #1
 8012624:	6103      	str	r3, [r0, #16]
 8012626:	dd16      	ble.n	8012656 <__s2b+0x72>
 8012628:	f104 0909 	add.w	r9, r4, #9
 801262c:	46c8      	mov	r8, r9
 801262e:	442c      	add	r4, r5
 8012630:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012634:	4601      	mov	r1, r0
 8012636:	3b30      	subs	r3, #48	; 0x30
 8012638:	220a      	movs	r2, #10
 801263a:	4630      	mov	r0, r6
 801263c:	f7ff ff8c 	bl	8012558 <__multadd>
 8012640:	45a0      	cmp	r8, r4
 8012642:	d1f5      	bne.n	8012630 <__s2b+0x4c>
 8012644:	f1a5 0408 	sub.w	r4, r5, #8
 8012648:	444c      	add	r4, r9
 801264a:	1b2d      	subs	r5, r5, r4
 801264c:	1963      	adds	r3, r4, r5
 801264e:	42bb      	cmp	r3, r7
 8012650:	db04      	blt.n	801265c <__s2b+0x78>
 8012652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012656:	340a      	adds	r4, #10
 8012658:	2509      	movs	r5, #9
 801265a:	e7f6      	b.n	801264a <__s2b+0x66>
 801265c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012660:	4601      	mov	r1, r0
 8012662:	3b30      	subs	r3, #48	; 0x30
 8012664:	220a      	movs	r2, #10
 8012666:	4630      	mov	r0, r6
 8012668:	f7ff ff76 	bl	8012558 <__multadd>
 801266c:	e7ee      	b.n	801264c <__s2b+0x68>
 801266e:	bf00      	nop
 8012670:	080152f8 	.word	0x080152f8
 8012674:	080153e8 	.word	0x080153e8

08012678 <__hi0bits>:
 8012678:	0c03      	lsrs	r3, r0, #16
 801267a:	041b      	lsls	r3, r3, #16
 801267c:	b9d3      	cbnz	r3, 80126b4 <__hi0bits+0x3c>
 801267e:	0400      	lsls	r0, r0, #16
 8012680:	2310      	movs	r3, #16
 8012682:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012686:	bf04      	itt	eq
 8012688:	0200      	lsleq	r0, r0, #8
 801268a:	3308      	addeq	r3, #8
 801268c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012690:	bf04      	itt	eq
 8012692:	0100      	lsleq	r0, r0, #4
 8012694:	3304      	addeq	r3, #4
 8012696:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801269a:	bf04      	itt	eq
 801269c:	0080      	lsleq	r0, r0, #2
 801269e:	3302      	addeq	r3, #2
 80126a0:	2800      	cmp	r0, #0
 80126a2:	db05      	blt.n	80126b0 <__hi0bits+0x38>
 80126a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80126a8:	f103 0301 	add.w	r3, r3, #1
 80126ac:	bf08      	it	eq
 80126ae:	2320      	moveq	r3, #32
 80126b0:	4618      	mov	r0, r3
 80126b2:	4770      	bx	lr
 80126b4:	2300      	movs	r3, #0
 80126b6:	e7e4      	b.n	8012682 <__hi0bits+0xa>

080126b8 <__lo0bits>:
 80126b8:	6803      	ldr	r3, [r0, #0]
 80126ba:	f013 0207 	ands.w	r2, r3, #7
 80126be:	4601      	mov	r1, r0
 80126c0:	d00b      	beq.n	80126da <__lo0bits+0x22>
 80126c2:	07da      	lsls	r2, r3, #31
 80126c4:	d423      	bmi.n	801270e <__lo0bits+0x56>
 80126c6:	0798      	lsls	r0, r3, #30
 80126c8:	bf49      	itett	mi
 80126ca:	085b      	lsrmi	r3, r3, #1
 80126cc:	089b      	lsrpl	r3, r3, #2
 80126ce:	2001      	movmi	r0, #1
 80126d0:	600b      	strmi	r3, [r1, #0]
 80126d2:	bf5c      	itt	pl
 80126d4:	600b      	strpl	r3, [r1, #0]
 80126d6:	2002      	movpl	r0, #2
 80126d8:	4770      	bx	lr
 80126da:	b298      	uxth	r0, r3
 80126dc:	b9a8      	cbnz	r0, 801270a <__lo0bits+0x52>
 80126de:	0c1b      	lsrs	r3, r3, #16
 80126e0:	2010      	movs	r0, #16
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	b90a      	cbnz	r2, 80126ea <__lo0bits+0x32>
 80126e6:	3008      	adds	r0, #8
 80126e8:	0a1b      	lsrs	r3, r3, #8
 80126ea:	071a      	lsls	r2, r3, #28
 80126ec:	bf04      	itt	eq
 80126ee:	091b      	lsreq	r3, r3, #4
 80126f0:	3004      	addeq	r0, #4
 80126f2:	079a      	lsls	r2, r3, #30
 80126f4:	bf04      	itt	eq
 80126f6:	089b      	lsreq	r3, r3, #2
 80126f8:	3002      	addeq	r0, #2
 80126fa:	07da      	lsls	r2, r3, #31
 80126fc:	d403      	bmi.n	8012706 <__lo0bits+0x4e>
 80126fe:	085b      	lsrs	r3, r3, #1
 8012700:	f100 0001 	add.w	r0, r0, #1
 8012704:	d005      	beq.n	8012712 <__lo0bits+0x5a>
 8012706:	600b      	str	r3, [r1, #0]
 8012708:	4770      	bx	lr
 801270a:	4610      	mov	r0, r2
 801270c:	e7e9      	b.n	80126e2 <__lo0bits+0x2a>
 801270e:	2000      	movs	r0, #0
 8012710:	4770      	bx	lr
 8012712:	2020      	movs	r0, #32
 8012714:	4770      	bx	lr
	...

08012718 <__i2b>:
 8012718:	b510      	push	{r4, lr}
 801271a:	460c      	mov	r4, r1
 801271c:	2101      	movs	r1, #1
 801271e:	f7ff feb9 	bl	8012494 <_Balloc>
 8012722:	4602      	mov	r2, r0
 8012724:	b928      	cbnz	r0, 8012732 <__i2b+0x1a>
 8012726:	4b05      	ldr	r3, [pc, #20]	; (801273c <__i2b+0x24>)
 8012728:	4805      	ldr	r0, [pc, #20]	; (8012740 <__i2b+0x28>)
 801272a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801272e:	f000 ffad 	bl	801368c <__assert_func>
 8012732:	2301      	movs	r3, #1
 8012734:	6144      	str	r4, [r0, #20]
 8012736:	6103      	str	r3, [r0, #16]
 8012738:	bd10      	pop	{r4, pc}
 801273a:	bf00      	nop
 801273c:	080152f8 	.word	0x080152f8
 8012740:	080153e8 	.word	0x080153e8

08012744 <__multiply>:
 8012744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	4691      	mov	r9, r2
 801274a:	690a      	ldr	r2, [r1, #16]
 801274c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012750:	429a      	cmp	r2, r3
 8012752:	bfb8      	it	lt
 8012754:	460b      	movlt	r3, r1
 8012756:	460c      	mov	r4, r1
 8012758:	bfbc      	itt	lt
 801275a:	464c      	movlt	r4, r9
 801275c:	4699      	movlt	r9, r3
 801275e:	6927      	ldr	r7, [r4, #16]
 8012760:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012764:	68a3      	ldr	r3, [r4, #8]
 8012766:	6861      	ldr	r1, [r4, #4]
 8012768:	eb07 060a 	add.w	r6, r7, sl
 801276c:	42b3      	cmp	r3, r6
 801276e:	b085      	sub	sp, #20
 8012770:	bfb8      	it	lt
 8012772:	3101      	addlt	r1, #1
 8012774:	f7ff fe8e 	bl	8012494 <_Balloc>
 8012778:	b930      	cbnz	r0, 8012788 <__multiply+0x44>
 801277a:	4602      	mov	r2, r0
 801277c:	4b44      	ldr	r3, [pc, #272]	; (8012890 <__multiply+0x14c>)
 801277e:	4845      	ldr	r0, [pc, #276]	; (8012894 <__multiply+0x150>)
 8012780:	f240 115d 	movw	r1, #349	; 0x15d
 8012784:	f000 ff82 	bl	801368c <__assert_func>
 8012788:	f100 0514 	add.w	r5, r0, #20
 801278c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012790:	462b      	mov	r3, r5
 8012792:	2200      	movs	r2, #0
 8012794:	4543      	cmp	r3, r8
 8012796:	d321      	bcc.n	80127dc <__multiply+0x98>
 8012798:	f104 0314 	add.w	r3, r4, #20
 801279c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80127a0:	f109 0314 	add.w	r3, r9, #20
 80127a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80127a8:	9202      	str	r2, [sp, #8]
 80127aa:	1b3a      	subs	r2, r7, r4
 80127ac:	3a15      	subs	r2, #21
 80127ae:	f022 0203 	bic.w	r2, r2, #3
 80127b2:	3204      	adds	r2, #4
 80127b4:	f104 0115 	add.w	r1, r4, #21
 80127b8:	428f      	cmp	r7, r1
 80127ba:	bf38      	it	cc
 80127bc:	2204      	movcc	r2, #4
 80127be:	9201      	str	r2, [sp, #4]
 80127c0:	9a02      	ldr	r2, [sp, #8]
 80127c2:	9303      	str	r3, [sp, #12]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d80c      	bhi.n	80127e2 <__multiply+0x9e>
 80127c8:	2e00      	cmp	r6, #0
 80127ca:	dd03      	ble.n	80127d4 <__multiply+0x90>
 80127cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d05a      	beq.n	801288a <__multiply+0x146>
 80127d4:	6106      	str	r6, [r0, #16]
 80127d6:	b005      	add	sp, #20
 80127d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127dc:	f843 2b04 	str.w	r2, [r3], #4
 80127e0:	e7d8      	b.n	8012794 <__multiply+0x50>
 80127e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80127e6:	f1ba 0f00 	cmp.w	sl, #0
 80127ea:	d024      	beq.n	8012836 <__multiply+0xf2>
 80127ec:	f104 0e14 	add.w	lr, r4, #20
 80127f0:	46a9      	mov	r9, r5
 80127f2:	f04f 0c00 	mov.w	ip, #0
 80127f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80127fa:	f8d9 1000 	ldr.w	r1, [r9]
 80127fe:	fa1f fb82 	uxth.w	fp, r2
 8012802:	b289      	uxth	r1, r1
 8012804:	fb0a 110b 	mla	r1, sl, fp, r1
 8012808:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801280c:	f8d9 2000 	ldr.w	r2, [r9]
 8012810:	4461      	add	r1, ip
 8012812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012816:	fb0a c20b 	mla	r2, sl, fp, ip
 801281a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801281e:	b289      	uxth	r1, r1
 8012820:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012824:	4577      	cmp	r7, lr
 8012826:	f849 1b04 	str.w	r1, [r9], #4
 801282a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801282e:	d8e2      	bhi.n	80127f6 <__multiply+0xb2>
 8012830:	9a01      	ldr	r2, [sp, #4]
 8012832:	f845 c002 	str.w	ip, [r5, r2]
 8012836:	9a03      	ldr	r2, [sp, #12]
 8012838:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801283c:	3304      	adds	r3, #4
 801283e:	f1b9 0f00 	cmp.w	r9, #0
 8012842:	d020      	beq.n	8012886 <__multiply+0x142>
 8012844:	6829      	ldr	r1, [r5, #0]
 8012846:	f104 0c14 	add.w	ip, r4, #20
 801284a:	46ae      	mov	lr, r5
 801284c:	f04f 0a00 	mov.w	sl, #0
 8012850:	f8bc b000 	ldrh.w	fp, [ip]
 8012854:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012858:	fb09 220b 	mla	r2, r9, fp, r2
 801285c:	4492      	add	sl, r2
 801285e:	b289      	uxth	r1, r1
 8012860:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012864:	f84e 1b04 	str.w	r1, [lr], #4
 8012868:	f85c 2b04 	ldr.w	r2, [ip], #4
 801286c:	f8be 1000 	ldrh.w	r1, [lr]
 8012870:	0c12      	lsrs	r2, r2, #16
 8012872:	fb09 1102 	mla	r1, r9, r2, r1
 8012876:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801287a:	4567      	cmp	r7, ip
 801287c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012880:	d8e6      	bhi.n	8012850 <__multiply+0x10c>
 8012882:	9a01      	ldr	r2, [sp, #4]
 8012884:	50a9      	str	r1, [r5, r2]
 8012886:	3504      	adds	r5, #4
 8012888:	e79a      	b.n	80127c0 <__multiply+0x7c>
 801288a:	3e01      	subs	r6, #1
 801288c:	e79c      	b.n	80127c8 <__multiply+0x84>
 801288e:	bf00      	nop
 8012890:	080152f8 	.word	0x080152f8
 8012894:	080153e8 	.word	0x080153e8

08012898 <__pow5mult>:
 8012898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801289c:	4615      	mov	r5, r2
 801289e:	f012 0203 	ands.w	r2, r2, #3
 80128a2:	4606      	mov	r6, r0
 80128a4:	460f      	mov	r7, r1
 80128a6:	d007      	beq.n	80128b8 <__pow5mult+0x20>
 80128a8:	4c25      	ldr	r4, [pc, #148]	; (8012940 <__pow5mult+0xa8>)
 80128aa:	3a01      	subs	r2, #1
 80128ac:	2300      	movs	r3, #0
 80128ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80128b2:	f7ff fe51 	bl	8012558 <__multadd>
 80128b6:	4607      	mov	r7, r0
 80128b8:	10ad      	asrs	r5, r5, #2
 80128ba:	d03d      	beq.n	8012938 <__pow5mult+0xa0>
 80128bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80128be:	b97c      	cbnz	r4, 80128e0 <__pow5mult+0x48>
 80128c0:	2010      	movs	r0, #16
 80128c2:	f7ff fdcd 	bl	8012460 <malloc>
 80128c6:	4602      	mov	r2, r0
 80128c8:	6270      	str	r0, [r6, #36]	; 0x24
 80128ca:	b928      	cbnz	r0, 80128d8 <__pow5mult+0x40>
 80128cc:	4b1d      	ldr	r3, [pc, #116]	; (8012944 <__pow5mult+0xac>)
 80128ce:	481e      	ldr	r0, [pc, #120]	; (8012948 <__pow5mult+0xb0>)
 80128d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80128d4:	f000 feda 	bl	801368c <__assert_func>
 80128d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80128dc:	6004      	str	r4, [r0, #0]
 80128de:	60c4      	str	r4, [r0, #12]
 80128e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80128e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80128e8:	b94c      	cbnz	r4, 80128fe <__pow5mult+0x66>
 80128ea:	f240 2171 	movw	r1, #625	; 0x271
 80128ee:	4630      	mov	r0, r6
 80128f0:	f7ff ff12 	bl	8012718 <__i2b>
 80128f4:	2300      	movs	r3, #0
 80128f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80128fa:	4604      	mov	r4, r0
 80128fc:	6003      	str	r3, [r0, #0]
 80128fe:	f04f 0900 	mov.w	r9, #0
 8012902:	07eb      	lsls	r3, r5, #31
 8012904:	d50a      	bpl.n	801291c <__pow5mult+0x84>
 8012906:	4639      	mov	r1, r7
 8012908:	4622      	mov	r2, r4
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff ff1a 	bl	8012744 <__multiply>
 8012910:	4639      	mov	r1, r7
 8012912:	4680      	mov	r8, r0
 8012914:	4630      	mov	r0, r6
 8012916:	f7ff fdfd 	bl	8012514 <_Bfree>
 801291a:	4647      	mov	r7, r8
 801291c:	106d      	asrs	r5, r5, #1
 801291e:	d00b      	beq.n	8012938 <__pow5mult+0xa0>
 8012920:	6820      	ldr	r0, [r4, #0]
 8012922:	b938      	cbnz	r0, 8012934 <__pow5mult+0x9c>
 8012924:	4622      	mov	r2, r4
 8012926:	4621      	mov	r1, r4
 8012928:	4630      	mov	r0, r6
 801292a:	f7ff ff0b 	bl	8012744 <__multiply>
 801292e:	6020      	str	r0, [r4, #0]
 8012930:	f8c0 9000 	str.w	r9, [r0]
 8012934:	4604      	mov	r4, r0
 8012936:	e7e4      	b.n	8012902 <__pow5mult+0x6a>
 8012938:	4638      	mov	r0, r7
 801293a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801293e:	bf00      	nop
 8012940:	08015538 	.word	0x08015538
 8012944:	08015286 	.word	0x08015286
 8012948:	080153e8 	.word	0x080153e8

0801294c <__lshift>:
 801294c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012950:	460c      	mov	r4, r1
 8012952:	6849      	ldr	r1, [r1, #4]
 8012954:	6923      	ldr	r3, [r4, #16]
 8012956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801295a:	68a3      	ldr	r3, [r4, #8]
 801295c:	4607      	mov	r7, r0
 801295e:	4691      	mov	r9, r2
 8012960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012964:	f108 0601 	add.w	r6, r8, #1
 8012968:	42b3      	cmp	r3, r6
 801296a:	db0b      	blt.n	8012984 <__lshift+0x38>
 801296c:	4638      	mov	r0, r7
 801296e:	f7ff fd91 	bl	8012494 <_Balloc>
 8012972:	4605      	mov	r5, r0
 8012974:	b948      	cbnz	r0, 801298a <__lshift+0x3e>
 8012976:	4602      	mov	r2, r0
 8012978:	4b2a      	ldr	r3, [pc, #168]	; (8012a24 <__lshift+0xd8>)
 801297a:	482b      	ldr	r0, [pc, #172]	; (8012a28 <__lshift+0xdc>)
 801297c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012980:	f000 fe84 	bl	801368c <__assert_func>
 8012984:	3101      	adds	r1, #1
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	e7ee      	b.n	8012968 <__lshift+0x1c>
 801298a:	2300      	movs	r3, #0
 801298c:	f100 0114 	add.w	r1, r0, #20
 8012990:	f100 0210 	add.w	r2, r0, #16
 8012994:	4618      	mov	r0, r3
 8012996:	4553      	cmp	r3, sl
 8012998:	db37      	blt.n	8012a0a <__lshift+0xbe>
 801299a:	6920      	ldr	r0, [r4, #16]
 801299c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80129a0:	f104 0314 	add.w	r3, r4, #20
 80129a4:	f019 091f 	ands.w	r9, r9, #31
 80129a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80129ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80129b0:	d02f      	beq.n	8012a12 <__lshift+0xc6>
 80129b2:	f1c9 0e20 	rsb	lr, r9, #32
 80129b6:	468a      	mov	sl, r1
 80129b8:	f04f 0c00 	mov.w	ip, #0
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	fa02 f209 	lsl.w	r2, r2, r9
 80129c2:	ea42 020c 	orr.w	r2, r2, ip
 80129c6:	f84a 2b04 	str.w	r2, [sl], #4
 80129ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ce:	4298      	cmp	r0, r3
 80129d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80129d4:	d8f2      	bhi.n	80129bc <__lshift+0x70>
 80129d6:	1b03      	subs	r3, r0, r4
 80129d8:	3b15      	subs	r3, #21
 80129da:	f023 0303 	bic.w	r3, r3, #3
 80129de:	3304      	adds	r3, #4
 80129e0:	f104 0215 	add.w	r2, r4, #21
 80129e4:	4290      	cmp	r0, r2
 80129e6:	bf38      	it	cc
 80129e8:	2304      	movcc	r3, #4
 80129ea:	f841 c003 	str.w	ip, [r1, r3]
 80129ee:	f1bc 0f00 	cmp.w	ip, #0
 80129f2:	d001      	beq.n	80129f8 <__lshift+0xac>
 80129f4:	f108 0602 	add.w	r6, r8, #2
 80129f8:	3e01      	subs	r6, #1
 80129fa:	4638      	mov	r0, r7
 80129fc:	612e      	str	r6, [r5, #16]
 80129fe:	4621      	mov	r1, r4
 8012a00:	f7ff fd88 	bl	8012514 <_Bfree>
 8012a04:	4628      	mov	r0, r5
 8012a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012a0e:	3301      	adds	r3, #1
 8012a10:	e7c1      	b.n	8012996 <__lshift+0x4a>
 8012a12:	3904      	subs	r1, #4
 8012a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8012a1c:	4298      	cmp	r0, r3
 8012a1e:	d8f9      	bhi.n	8012a14 <__lshift+0xc8>
 8012a20:	e7ea      	b.n	80129f8 <__lshift+0xac>
 8012a22:	bf00      	nop
 8012a24:	080152f8 	.word	0x080152f8
 8012a28:	080153e8 	.word	0x080153e8

08012a2c <__mcmp>:
 8012a2c:	b530      	push	{r4, r5, lr}
 8012a2e:	6902      	ldr	r2, [r0, #16]
 8012a30:	690c      	ldr	r4, [r1, #16]
 8012a32:	1b12      	subs	r2, r2, r4
 8012a34:	d10e      	bne.n	8012a54 <__mcmp+0x28>
 8012a36:	f100 0314 	add.w	r3, r0, #20
 8012a3a:	3114      	adds	r1, #20
 8012a3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012a40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012a48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012a4c:	42a5      	cmp	r5, r4
 8012a4e:	d003      	beq.n	8012a58 <__mcmp+0x2c>
 8012a50:	d305      	bcc.n	8012a5e <__mcmp+0x32>
 8012a52:	2201      	movs	r2, #1
 8012a54:	4610      	mov	r0, r2
 8012a56:	bd30      	pop	{r4, r5, pc}
 8012a58:	4283      	cmp	r3, r0
 8012a5a:	d3f3      	bcc.n	8012a44 <__mcmp+0x18>
 8012a5c:	e7fa      	b.n	8012a54 <__mcmp+0x28>
 8012a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a62:	e7f7      	b.n	8012a54 <__mcmp+0x28>

08012a64 <__mdiff>:
 8012a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a68:	460c      	mov	r4, r1
 8012a6a:	4606      	mov	r6, r0
 8012a6c:	4611      	mov	r1, r2
 8012a6e:	4620      	mov	r0, r4
 8012a70:	4690      	mov	r8, r2
 8012a72:	f7ff ffdb 	bl	8012a2c <__mcmp>
 8012a76:	1e05      	subs	r5, r0, #0
 8012a78:	d110      	bne.n	8012a9c <__mdiff+0x38>
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f7ff fd09 	bl	8012494 <_Balloc>
 8012a82:	b930      	cbnz	r0, 8012a92 <__mdiff+0x2e>
 8012a84:	4b3a      	ldr	r3, [pc, #232]	; (8012b70 <__mdiff+0x10c>)
 8012a86:	4602      	mov	r2, r0
 8012a88:	f240 2132 	movw	r1, #562	; 0x232
 8012a8c:	4839      	ldr	r0, [pc, #228]	; (8012b74 <__mdiff+0x110>)
 8012a8e:	f000 fdfd 	bl	801368c <__assert_func>
 8012a92:	2301      	movs	r3, #1
 8012a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a9c:	bfa4      	itt	ge
 8012a9e:	4643      	movge	r3, r8
 8012aa0:	46a0      	movge	r8, r4
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012aa8:	bfa6      	itte	ge
 8012aaa:	461c      	movge	r4, r3
 8012aac:	2500      	movge	r5, #0
 8012aae:	2501      	movlt	r5, #1
 8012ab0:	f7ff fcf0 	bl	8012494 <_Balloc>
 8012ab4:	b920      	cbnz	r0, 8012ac0 <__mdiff+0x5c>
 8012ab6:	4b2e      	ldr	r3, [pc, #184]	; (8012b70 <__mdiff+0x10c>)
 8012ab8:	4602      	mov	r2, r0
 8012aba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012abe:	e7e5      	b.n	8012a8c <__mdiff+0x28>
 8012ac0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012ac4:	6926      	ldr	r6, [r4, #16]
 8012ac6:	60c5      	str	r5, [r0, #12]
 8012ac8:	f104 0914 	add.w	r9, r4, #20
 8012acc:	f108 0514 	add.w	r5, r8, #20
 8012ad0:	f100 0e14 	add.w	lr, r0, #20
 8012ad4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012ad8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012adc:	f108 0210 	add.w	r2, r8, #16
 8012ae0:	46f2      	mov	sl, lr
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ae8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012aec:	fa1f f883 	uxth.w	r8, r3
 8012af0:	fa11 f18b 	uxtah	r1, r1, fp
 8012af4:	0c1b      	lsrs	r3, r3, #16
 8012af6:	eba1 0808 	sub.w	r8, r1, r8
 8012afa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012afe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012b02:	fa1f f888 	uxth.w	r8, r8
 8012b06:	1419      	asrs	r1, r3, #16
 8012b08:	454e      	cmp	r6, r9
 8012b0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012b0e:	f84a 3b04 	str.w	r3, [sl], #4
 8012b12:	d8e7      	bhi.n	8012ae4 <__mdiff+0x80>
 8012b14:	1b33      	subs	r3, r6, r4
 8012b16:	3b15      	subs	r3, #21
 8012b18:	f023 0303 	bic.w	r3, r3, #3
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	3415      	adds	r4, #21
 8012b20:	42a6      	cmp	r6, r4
 8012b22:	bf38      	it	cc
 8012b24:	2304      	movcc	r3, #4
 8012b26:	441d      	add	r5, r3
 8012b28:	4473      	add	r3, lr
 8012b2a:	469e      	mov	lr, r3
 8012b2c:	462e      	mov	r6, r5
 8012b2e:	4566      	cmp	r6, ip
 8012b30:	d30e      	bcc.n	8012b50 <__mdiff+0xec>
 8012b32:	f10c 0203 	add.w	r2, ip, #3
 8012b36:	1b52      	subs	r2, r2, r5
 8012b38:	f022 0203 	bic.w	r2, r2, #3
 8012b3c:	3d03      	subs	r5, #3
 8012b3e:	45ac      	cmp	ip, r5
 8012b40:	bf38      	it	cc
 8012b42:	2200      	movcc	r2, #0
 8012b44:	441a      	add	r2, r3
 8012b46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012b4a:	b17b      	cbz	r3, 8012b6c <__mdiff+0x108>
 8012b4c:	6107      	str	r7, [r0, #16]
 8012b4e:	e7a3      	b.n	8012a98 <__mdiff+0x34>
 8012b50:	f856 8b04 	ldr.w	r8, [r6], #4
 8012b54:	fa11 f288 	uxtah	r2, r1, r8
 8012b58:	1414      	asrs	r4, r2, #16
 8012b5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012b5e:	b292      	uxth	r2, r2
 8012b60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012b64:	f84e 2b04 	str.w	r2, [lr], #4
 8012b68:	1421      	asrs	r1, r4, #16
 8012b6a:	e7e0      	b.n	8012b2e <__mdiff+0xca>
 8012b6c:	3f01      	subs	r7, #1
 8012b6e:	e7ea      	b.n	8012b46 <__mdiff+0xe2>
 8012b70:	080152f8 	.word	0x080152f8
 8012b74:	080153e8 	.word	0x080153e8

08012b78 <__ulp>:
 8012b78:	b082      	sub	sp, #8
 8012b7a:	ed8d 0b00 	vstr	d0, [sp]
 8012b7e:	9b01      	ldr	r3, [sp, #4]
 8012b80:	4912      	ldr	r1, [pc, #72]	; (8012bcc <__ulp+0x54>)
 8012b82:	4019      	ands	r1, r3
 8012b84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012b88:	2900      	cmp	r1, #0
 8012b8a:	dd05      	ble.n	8012b98 <__ulp+0x20>
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	ec43 2b10 	vmov	d0, r2, r3
 8012b94:	b002      	add	sp, #8
 8012b96:	4770      	bx	lr
 8012b98:	4249      	negs	r1, r1
 8012b9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012b9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012ba2:	f04f 0200 	mov.w	r2, #0
 8012ba6:	f04f 0300 	mov.w	r3, #0
 8012baa:	da04      	bge.n	8012bb6 <__ulp+0x3e>
 8012bac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012bb0:	fa41 f300 	asr.w	r3, r1, r0
 8012bb4:	e7ec      	b.n	8012b90 <__ulp+0x18>
 8012bb6:	f1a0 0114 	sub.w	r1, r0, #20
 8012bba:	291e      	cmp	r1, #30
 8012bbc:	bfda      	itte	le
 8012bbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012bc2:	fa20 f101 	lsrle.w	r1, r0, r1
 8012bc6:	2101      	movgt	r1, #1
 8012bc8:	460a      	mov	r2, r1
 8012bca:	e7e1      	b.n	8012b90 <__ulp+0x18>
 8012bcc:	7ff00000 	.word	0x7ff00000

08012bd0 <__b2d>:
 8012bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bd2:	6905      	ldr	r5, [r0, #16]
 8012bd4:	f100 0714 	add.w	r7, r0, #20
 8012bd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012bdc:	1f2e      	subs	r6, r5, #4
 8012bde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012be2:	4620      	mov	r0, r4
 8012be4:	f7ff fd48 	bl	8012678 <__hi0bits>
 8012be8:	f1c0 0320 	rsb	r3, r0, #32
 8012bec:	280a      	cmp	r0, #10
 8012bee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012c6c <__b2d+0x9c>
 8012bf2:	600b      	str	r3, [r1, #0]
 8012bf4:	dc14      	bgt.n	8012c20 <__b2d+0x50>
 8012bf6:	f1c0 0e0b 	rsb	lr, r0, #11
 8012bfa:	fa24 f10e 	lsr.w	r1, r4, lr
 8012bfe:	42b7      	cmp	r7, r6
 8012c00:	ea41 030c 	orr.w	r3, r1, ip
 8012c04:	bf34      	ite	cc
 8012c06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012c0a:	2100      	movcs	r1, #0
 8012c0c:	3015      	adds	r0, #21
 8012c0e:	fa04 f000 	lsl.w	r0, r4, r0
 8012c12:	fa21 f10e 	lsr.w	r1, r1, lr
 8012c16:	ea40 0201 	orr.w	r2, r0, r1
 8012c1a:	ec43 2b10 	vmov	d0, r2, r3
 8012c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c20:	42b7      	cmp	r7, r6
 8012c22:	bf3a      	itte	cc
 8012c24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012c28:	f1a5 0608 	subcc.w	r6, r5, #8
 8012c2c:	2100      	movcs	r1, #0
 8012c2e:	380b      	subs	r0, #11
 8012c30:	d017      	beq.n	8012c62 <__b2d+0x92>
 8012c32:	f1c0 0c20 	rsb	ip, r0, #32
 8012c36:	fa04 f500 	lsl.w	r5, r4, r0
 8012c3a:	42be      	cmp	r6, r7
 8012c3c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012c40:	ea45 0504 	orr.w	r5, r5, r4
 8012c44:	bf8c      	ite	hi
 8012c46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012c4a:	2400      	movls	r4, #0
 8012c4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012c50:	fa01 f000 	lsl.w	r0, r1, r0
 8012c54:	fa24 f40c 	lsr.w	r4, r4, ip
 8012c58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012c5c:	ea40 0204 	orr.w	r2, r0, r4
 8012c60:	e7db      	b.n	8012c1a <__b2d+0x4a>
 8012c62:	ea44 030c 	orr.w	r3, r4, ip
 8012c66:	460a      	mov	r2, r1
 8012c68:	e7d7      	b.n	8012c1a <__b2d+0x4a>
 8012c6a:	bf00      	nop
 8012c6c:	3ff00000 	.word	0x3ff00000

08012c70 <__d2b>:
 8012c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c74:	4689      	mov	r9, r1
 8012c76:	2101      	movs	r1, #1
 8012c78:	ec57 6b10 	vmov	r6, r7, d0
 8012c7c:	4690      	mov	r8, r2
 8012c7e:	f7ff fc09 	bl	8012494 <_Balloc>
 8012c82:	4604      	mov	r4, r0
 8012c84:	b930      	cbnz	r0, 8012c94 <__d2b+0x24>
 8012c86:	4602      	mov	r2, r0
 8012c88:	4b25      	ldr	r3, [pc, #148]	; (8012d20 <__d2b+0xb0>)
 8012c8a:	4826      	ldr	r0, [pc, #152]	; (8012d24 <__d2b+0xb4>)
 8012c8c:	f240 310a 	movw	r1, #778	; 0x30a
 8012c90:	f000 fcfc 	bl	801368c <__assert_func>
 8012c94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c9c:	bb35      	cbnz	r5, 8012cec <__d2b+0x7c>
 8012c9e:	2e00      	cmp	r6, #0
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	d028      	beq.n	8012cf6 <__d2b+0x86>
 8012ca4:	4668      	mov	r0, sp
 8012ca6:	9600      	str	r6, [sp, #0]
 8012ca8:	f7ff fd06 	bl	80126b8 <__lo0bits>
 8012cac:	9900      	ldr	r1, [sp, #0]
 8012cae:	b300      	cbz	r0, 8012cf2 <__d2b+0x82>
 8012cb0:	9a01      	ldr	r2, [sp, #4]
 8012cb2:	f1c0 0320 	rsb	r3, r0, #32
 8012cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8012cba:	430b      	orrs	r3, r1
 8012cbc:	40c2      	lsrs	r2, r0
 8012cbe:	6163      	str	r3, [r4, #20]
 8012cc0:	9201      	str	r2, [sp, #4]
 8012cc2:	9b01      	ldr	r3, [sp, #4]
 8012cc4:	61a3      	str	r3, [r4, #24]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	bf14      	ite	ne
 8012cca:	2202      	movne	r2, #2
 8012ccc:	2201      	moveq	r2, #1
 8012cce:	6122      	str	r2, [r4, #16]
 8012cd0:	b1d5      	cbz	r5, 8012d08 <__d2b+0x98>
 8012cd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012cd6:	4405      	add	r5, r0
 8012cd8:	f8c9 5000 	str.w	r5, [r9]
 8012cdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ce0:	f8c8 0000 	str.w	r0, [r8]
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	b003      	add	sp, #12
 8012ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012cf0:	e7d5      	b.n	8012c9e <__d2b+0x2e>
 8012cf2:	6161      	str	r1, [r4, #20]
 8012cf4:	e7e5      	b.n	8012cc2 <__d2b+0x52>
 8012cf6:	a801      	add	r0, sp, #4
 8012cf8:	f7ff fcde 	bl	80126b8 <__lo0bits>
 8012cfc:	9b01      	ldr	r3, [sp, #4]
 8012cfe:	6163      	str	r3, [r4, #20]
 8012d00:	2201      	movs	r2, #1
 8012d02:	6122      	str	r2, [r4, #16]
 8012d04:	3020      	adds	r0, #32
 8012d06:	e7e3      	b.n	8012cd0 <__d2b+0x60>
 8012d08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012d10:	f8c9 0000 	str.w	r0, [r9]
 8012d14:	6918      	ldr	r0, [r3, #16]
 8012d16:	f7ff fcaf 	bl	8012678 <__hi0bits>
 8012d1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012d1e:	e7df      	b.n	8012ce0 <__d2b+0x70>
 8012d20:	080152f8 	.word	0x080152f8
 8012d24:	080153e8 	.word	0x080153e8

08012d28 <__ratio>:
 8012d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2c:	4688      	mov	r8, r1
 8012d2e:	4669      	mov	r1, sp
 8012d30:	4681      	mov	r9, r0
 8012d32:	f7ff ff4d 	bl	8012bd0 <__b2d>
 8012d36:	a901      	add	r1, sp, #4
 8012d38:	4640      	mov	r0, r8
 8012d3a:	ec55 4b10 	vmov	r4, r5, d0
 8012d3e:	f7ff ff47 	bl	8012bd0 <__b2d>
 8012d42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012d46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012d4a:	eba3 0c02 	sub.w	ip, r3, r2
 8012d4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012d52:	1a9b      	subs	r3, r3, r2
 8012d54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012d58:	ec51 0b10 	vmov	r0, r1, d0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	bfd6      	itet	le
 8012d60:	460a      	movle	r2, r1
 8012d62:	462a      	movgt	r2, r5
 8012d64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012d68:	468b      	mov	fp, r1
 8012d6a:	462f      	mov	r7, r5
 8012d6c:	bfd4      	ite	le
 8012d6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012d72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012d76:	4620      	mov	r0, r4
 8012d78:	ee10 2a10 	vmov	r2, s0
 8012d7c:	465b      	mov	r3, fp
 8012d7e:	4639      	mov	r1, r7
 8012d80:	f7ed fd8c 	bl	800089c <__aeabi_ddiv>
 8012d84:	ec41 0b10 	vmov	d0, r0, r1
 8012d88:	b003      	add	sp, #12
 8012d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d8e <__copybits>:
 8012d8e:	3901      	subs	r1, #1
 8012d90:	b570      	push	{r4, r5, r6, lr}
 8012d92:	1149      	asrs	r1, r1, #5
 8012d94:	6914      	ldr	r4, [r2, #16]
 8012d96:	3101      	adds	r1, #1
 8012d98:	f102 0314 	add.w	r3, r2, #20
 8012d9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012da0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012da4:	1f05      	subs	r5, r0, #4
 8012da6:	42a3      	cmp	r3, r4
 8012da8:	d30c      	bcc.n	8012dc4 <__copybits+0x36>
 8012daa:	1aa3      	subs	r3, r4, r2
 8012dac:	3b11      	subs	r3, #17
 8012dae:	f023 0303 	bic.w	r3, r3, #3
 8012db2:	3211      	adds	r2, #17
 8012db4:	42a2      	cmp	r2, r4
 8012db6:	bf88      	it	hi
 8012db8:	2300      	movhi	r3, #0
 8012dba:	4418      	add	r0, r3
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	4288      	cmp	r0, r1
 8012dc0:	d305      	bcc.n	8012dce <__copybits+0x40>
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}
 8012dc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8012dc8:	f845 6f04 	str.w	r6, [r5, #4]!
 8012dcc:	e7eb      	b.n	8012da6 <__copybits+0x18>
 8012dce:	f840 3b04 	str.w	r3, [r0], #4
 8012dd2:	e7f4      	b.n	8012dbe <__copybits+0x30>

08012dd4 <__any_on>:
 8012dd4:	f100 0214 	add.w	r2, r0, #20
 8012dd8:	6900      	ldr	r0, [r0, #16]
 8012dda:	114b      	asrs	r3, r1, #5
 8012ddc:	4298      	cmp	r0, r3
 8012dde:	b510      	push	{r4, lr}
 8012de0:	db11      	blt.n	8012e06 <__any_on+0x32>
 8012de2:	dd0a      	ble.n	8012dfa <__any_on+0x26>
 8012de4:	f011 011f 	ands.w	r1, r1, #31
 8012de8:	d007      	beq.n	8012dfa <__any_on+0x26>
 8012dea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012dee:	fa24 f001 	lsr.w	r0, r4, r1
 8012df2:	fa00 f101 	lsl.w	r1, r0, r1
 8012df6:	428c      	cmp	r4, r1
 8012df8:	d10b      	bne.n	8012e12 <__any_on+0x3e>
 8012dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d803      	bhi.n	8012e0a <__any_on+0x36>
 8012e02:	2000      	movs	r0, #0
 8012e04:	bd10      	pop	{r4, pc}
 8012e06:	4603      	mov	r3, r0
 8012e08:	e7f7      	b.n	8012dfa <__any_on+0x26>
 8012e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e0e:	2900      	cmp	r1, #0
 8012e10:	d0f5      	beq.n	8012dfe <__any_on+0x2a>
 8012e12:	2001      	movs	r0, #1
 8012e14:	e7f6      	b.n	8012e04 <__any_on+0x30>

08012e16 <_calloc_r>:
 8012e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e18:	fba1 2402 	umull	r2, r4, r1, r2
 8012e1c:	b94c      	cbnz	r4, 8012e32 <_calloc_r+0x1c>
 8012e1e:	4611      	mov	r1, r2
 8012e20:	9201      	str	r2, [sp, #4]
 8012e22:	f000 f87b 	bl	8012f1c <_malloc_r>
 8012e26:	9a01      	ldr	r2, [sp, #4]
 8012e28:	4605      	mov	r5, r0
 8012e2a:	b930      	cbnz	r0, 8012e3a <_calloc_r+0x24>
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	b003      	add	sp, #12
 8012e30:	bd30      	pop	{r4, r5, pc}
 8012e32:	220c      	movs	r2, #12
 8012e34:	6002      	str	r2, [r0, #0]
 8012e36:	2500      	movs	r5, #0
 8012e38:	e7f8      	b.n	8012e2c <_calloc_r+0x16>
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	f7fc f84a 	bl	800eed4 <memset>
 8012e40:	e7f4      	b.n	8012e2c <_calloc_r+0x16>
	...

08012e44 <_free_r>:
 8012e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e46:	2900      	cmp	r1, #0
 8012e48:	d044      	beq.n	8012ed4 <_free_r+0x90>
 8012e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e4e:	9001      	str	r0, [sp, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	f1a1 0404 	sub.w	r4, r1, #4
 8012e56:	bfb8      	it	lt
 8012e58:	18e4      	addlt	r4, r4, r3
 8012e5a:	f000 fca5 	bl	80137a8 <__malloc_lock>
 8012e5e:	4a1e      	ldr	r2, [pc, #120]	; (8012ed8 <_free_r+0x94>)
 8012e60:	9801      	ldr	r0, [sp, #4]
 8012e62:	6813      	ldr	r3, [r2, #0]
 8012e64:	b933      	cbnz	r3, 8012e74 <_free_r+0x30>
 8012e66:	6063      	str	r3, [r4, #4]
 8012e68:	6014      	str	r4, [r2, #0]
 8012e6a:	b003      	add	sp, #12
 8012e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e70:	f000 bca0 	b.w	80137b4 <__malloc_unlock>
 8012e74:	42a3      	cmp	r3, r4
 8012e76:	d908      	bls.n	8012e8a <_free_r+0x46>
 8012e78:	6825      	ldr	r5, [r4, #0]
 8012e7a:	1961      	adds	r1, r4, r5
 8012e7c:	428b      	cmp	r3, r1
 8012e7e:	bf01      	itttt	eq
 8012e80:	6819      	ldreq	r1, [r3, #0]
 8012e82:	685b      	ldreq	r3, [r3, #4]
 8012e84:	1949      	addeq	r1, r1, r5
 8012e86:	6021      	streq	r1, [r4, #0]
 8012e88:	e7ed      	b.n	8012e66 <_free_r+0x22>
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	b10b      	cbz	r3, 8012e94 <_free_r+0x50>
 8012e90:	42a3      	cmp	r3, r4
 8012e92:	d9fa      	bls.n	8012e8a <_free_r+0x46>
 8012e94:	6811      	ldr	r1, [r2, #0]
 8012e96:	1855      	adds	r5, r2, r1
 8012e98:	42a5      	cmp	r5, r4
 8012e9a:	d10b      	bne.n	8012eb4 <_free_r+0x70>
 8012e9c:	6824      	ldr	r4, [r4, #0]
 8012e9e:	4421      	add	r1, r4
 8012ea0:	1854      	adds	r4, r2, r1
 8012ea2:	42a3      	cmp	r3, r4
 8012ea4:	6011      	str	r1, [r2, #0]
 8012ea6:	d1e0      	bne.n	8012e6a <_free_r+0x26>
 8012ea8:	681c      	ldr	r4, [r3, #0]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	6053      	str	r3, [r2, #4]
 8012eae:	4421      	add	r1, r4
 8012eb0:	6011      	str	r1, [r2, #0]
 8012eb2:	e7da      	b.n	8012e6a <_free_r+0x26>
 8012eb4:	d902      	bls.n	8012ebc <_free_r+0x78>
 8012eb6:	230c      	movs	r3, #12
 8012eb8:	6003      	str	r3, [r0, #0]
 8012eba:	e7d6      	b.n	8012e6a <_free_r+0x26>
 8012ebc:	6825      	ldr	r5, [r4, #0]
 8012ebe:	1961      	adds	r1, r4, r5
 8012ec0:	428b      	cmp	r3, r1
 8012ec2:	bf04      	itt	eq
 8012ec4:	6819      	ldreq	r1, [r3, #0]
 8012ec6:	685b      	ldreq	r3, [r3, #4]
 8012ec8:	6063      	str	r3, [r4, #4]
 8012eca:	bf04      	itt	eq
 8012ecc:	1949      	addeq	r1, r1, r5
 8012ece:	6021      	streq	r1, [r4, #0]
 8012ed0:	6054      	str	r4, [r2, #4]
 8012ed2:	e7ca      	b.n	8012e6a <_free_r+0x26>
 8012ed4:	b003      	add	sp, #12
 8012ed6:	bd30      	pop	{r4, r5, pc}
 8012ed8:	20009428 	.word	0x20009428

08012edc <sbrk_aligned>:
 8012edc:	b570      	push	{r4, r5, r6, lr}
 8012ede:	4e0e      	ldr	r6, [pc, #56]	; (8012f18 <sbrk_aligned+0x3c>)
 8012ee0:	460c      	mov	r4, r1
 8012ee2:	6831      	ldr	r1, [r6, #0]
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	b911      	cbnz	r1, 8012eee <sbrk_aligned+0x12>
 8012ee8:	f000 fb4a 	bl	8013580 <_sbrk_r>
 8012eec:	6030      	str	r0, [r6, #0]
 8012eee:	4621      	mov	r1, r4
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f000 fb45 	bl	8013580 <_sbrk_r>
 8012ef6:	1c43      	adds	r3, r0, #1
 8012ef8:	d00a      	beq.n	8012f10 <sbrk_aligned+0x34>
 8012efa:	1cc4      	adds	r4, r0, #3
 8012efc:	f024 0403 	bic.w	r4, r4, #3
 8012f00:	42a0      	cmp	r0, r4
 8012f02:	d007      	beq.n	8012f14 <sbrk_aligned+0x38>
 8012f04:	1a21      	subs	r1, r4, r0
 8012f06:	4628      	mov	r0, r5
 8012f08:	f000 fb3a 	bl	8013580 <_sbrk_r>
 8012f0c:	3001      	adds	r0, #1
 8012f0e:	d101      	bne.n	8012f14 <sbrk_aligned+0x38>
 8012f10:	f04f 34ff 	mov.w	r4, #4294967295
 8012f14:	4620      	mov	r0, r4
 8012f16:	bd70      	pop	{r4, r5, r6, pc}
 8012f18:	2000942c 	.word	0x2000942c

08012f1c <_malloc_r>:
 8012f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f20:	1ccd      	adds	r5, r1, #3
 8012f22:	f025 0503 	bic.w	r5, r5, #3
 8012f26:	3508      	adds	r5, #8
 8012f28:	2d0c      	cmp	r5, #12
 8012f2a:	bf38      	it	cc
 8012f2c:	250c      	movcc	r5, #12
 8012f2e:	2d00      	cmp	r5, #0
 8012f30:	4607      	mov	r7, r0
 8012f32:	db01      	blt.n	8012f38 <_malloc_r+0x1c>
 8012f34:	42a9      	cmp	r1, r5
 8012f36:	d905      	bls.n	8012f44 <_malloc_r+0x28>
 8012f38:	230c      	movs	r3, #12
 8012f3a:	603b      	str	r3, [r7, #0]
 8012f3c:	2600      	movs	r6, #0
 8012f3e:	4630      	mov	r0, r6
 8012f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f44:	4e2e      	ldr	r6, [pc, #184]	; (8013000 <_malloc_r+0xe4>)
 8012f46:	f000 fc2f 	bl	80137a8 <__malloc_lock>
 8012f4a:	6833      	ldr	r3, [r6, #0]
 8012f4c:	461c      	mov	r4, r3
 8012f4e:	bb34      	cbnz	r4, 8012f9e <_malloc_r+0x82>
 8012f50:	4629      	mov	r1, r5
 8012f52:	4638      	mov	r0, r7
 8012f54:	f7ff ffc2 	bl	8012edc <sbrk_aligned>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	d14d      	bne.n	8012ffa <_malloc_r+0xde>
 8012f5e:	6834      	ldr	r4, [r6, #0]
 8012f60:	4626      	mov	r6, r4
 8012f62:	2e00      	cmp	r6, #0
 8012f64:	d140      	bne.n	8012fe8 <_malloc_r+0xcc>
 8012f66:	6823      	ldr	r3, [r4, #0]
 8012f68:	4631      	mov	r1, r6
 8012f6a:	4638      	mov	r0, r7
 8012f6c:	eb04 0803 	add.w	r8, r4, r3
 8012f70:	f000 fb06 	bl	8013580 <_sbrk_r>
 8012f74:	4580      	cmp	r8, r0
 8012f76:	d13a      	bne.n	8012fee <_malloc_r+0xd2>
 8012f78:	6821      	ldr	r1, [r4, #0]
 8012f7a:	3503      	adds	r5, #3
 8012f7c:	1a6d      	subs	r5, r5, r1
 8012f7e:	f025 0503 	bic.w	r5, r5, #3
 8012f82:	3508      	adds	r5, #8
 8012f84:	2d0c      	cmp	r5, #12
 8012f86:	bf38      	it	cc
 8012f88:	250c      	movcc	r5, #12
 8012f8a:	4629      	mov	r1, r5
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	f7ff ffa5 	bl	8012edc <sbrk_aligned>
 8012f92:	3001      	adds	r0, #1
 8012f94:	d02b      	beq.n	8012fee <_malloc_r+0xd2>
 8012f96:	6823      	ldr	r3, [r4, #0]
 8012f98:	442b      	add	r3, r5
 8012f9a:	6023      	str	r3, [r4, #0]
 8012f9c:	e00e      	b.n	8012fbc <_malloc_r+0xa0>
 8012f9e:	6822      	ldr	r2, [r4, #0]
 8012fa0:	1b52      	subs	r2, r2, r5
 8012fa2:	d41e      	bmi.n	8012fe2 <_malloc_r+0xc6>
 8012fa4:	2a0b      	cmp	r2, #11
 8012fa6:	d916      	bls.n	8012fd6 <_malloc_r+0xba>
 8012fa8:	1961      	adds	r1, r4, r5
 8012faa:	42a3      	cmp	r3, r4
 8012fac:	6025      	str	r5, [r4, #0]
 8012fae:	bf18      	it	ne
 8012fb0:	6059      	strne	r1, [r3, #4]
 8012fb2:	6863      	ldr	r3, [r4, #4]
 8012fb4:	bf08      	it	eq
 8012fb6:	6031      	streq	r1, [r6, #0]
 8012fb8:	5162      	str	r2, [r4, r5]
 8012fba:	604b      	str	r3, [r1, #4]
 8012fbc:	4638      	mov	r0, r7
 8012fbe:	f104 060b 	add.w	r6, r4, #11
 8012fc2:	f000 fbf7 	bl	80137b4 <__malloc_unlock>
 8012fc6:	f026 0607 	bic.w	r6, r6, #7
 8012fca:	1d23      	adds	r3, r4, #4
 8012fcc:	1af2      	subs	r2, r6, r3
 8012fce:	d0b6      	beq.n	8012f3e <_malloc_r+0x22>
 8012fd0:	1b9b      	subs	r3, r3, r6
 8012fd2:	50a3      	str	r3, [r4, r2]
 8012fd4:	e7b3      	b.n	8012f3e <_malloc_r+0x22>
 8012fd6:	6862      	ldr	r2, [r4, #4]
 8012fd8:	42a3      	cmp	r3, r4
 8012fda:	bf0c      	ite	eq
 8012fdc:	6032      	streq	r2, [r6, #0]
 8012fde:	605a      	strne	r2, [r3, #4]
 8012fe0:	e7ec      	b.n	8012fbc <_malloc_r+0xa0>
 8012fe2:	4623      	mov	r3, r4
 8012fe4:	6864      	ldr	r4, [r4, #4]
 8012fe6:	e7b2      	b.n	8012f4e <_malloc_r+0x32>
 8012fe8:	4634      	mov	r4, r6
 8012fea:	6876      	ldr	r6, [r6, #4]
 8012fec:	e7b9      	b.n	8012f62 <_malloc_r+0x46>
 8012fee:	230c      	movs	r3, #12
 8012ff0:	603b      	str	r3, [r7, #0]
 8012ff2:	4638      	mov	r0, r7
 8012ff4:	f000 fbde 	bl	80137b4 <__malloc_unlock>
 8012ff8:	e7a1      	b.n	8012f3e <_malloc_r+0x22>
 8012ffa:	6025      	str	r5, [r4, #0]
 8012ffc:	e7de      	b.n	8012fbc <_malloc_r+0xa0>
 8012ffe:	bf00      	nop
 8013000:	20009428 	.word	0x20009428

08013004 <__ssputs_r>:
 8013004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013008:	688e      	ldr	r6, [r1, #8]
 801300a:	429e      	cmp	r6, r3
 801300c:	4682      	mov	sl, r0
 801300e:	460c      	mov	r4, r1
 8013010:	4690      	mov	r8, r2
 8013012:	461f      	mov	r7, r3
 8013014:	d838      	bhi.n	8013088 <__ssputs_r+0x84>
 8013016:	898a      	ldrh	r2, [r1, #12]
 8013018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801301c:	d032      	beq.n	8013084 <__ssputs_r+0x80>
 801301e:	6825      	ldr	r5, [r4, #0]
 8013020:	6909      	ldr	r1, [r1, #16]
 8013022:	eba5 0901 	sub.w	r9, r5, r1
 8013026:	6965      	ldr	r5, [r4, #20]
 8013028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801302c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013030:	3301      	adds	r3, #1
 8013032:	444b      	add	r3, r9
 8013034:	106d      	asrs	r5, r5, #1
 8013036:	429d      	cmp	r5, r3
 8013038:	bf38      	it	cc
 801303a:	461d      	movcc	r5, r3
 801303c:	0553      	lsls	r3, r2, #21
 801303e:	d531      	bpl.n	80130a4 <__ssputs_r+0xa0>
 8013040:	4629      	mov	r1, r5
 8013042:	f7ff ff6b 	bl	8012f1c <_malloc_r>
 8013046:	4606      	mov	r6, r0
 8013048:	b950      	cbnz	r0, 8013060 <__ssputs_r+0x5c>
 801304a:	230c      	movs	r3, #12
 801304c:	f8ca 3000 	str.w	r3, [sl]
 8013050:	89a3      	ldrh	r3, [r4, #12]
 8013052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013056:	81a3      	strh	r3, [r4, #12]
 8013058:	f04f 30ff 	mov.w	r0, #4294967295
 801305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013060:	6921      	ldr	r1, [r4, #16]
 8013062:	464a      	mov	r2, r9
 8013064:	f7fb ff28 	bl	800eeb8 <memcpy>
 8013068:	89a3      	ldrh	r3, [r4, #12]
 801306a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801306e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013072:	81a3      	strh	r3, [r4, #12]
 8013074:	6126      	str	r6, [r4, #16]
 8013076:	6165      	str	r5, [r4, #20]
 8013078:	444e      	add	r6, r9
 801307a:	eba5 0509 	sub.w	r5, r5, r9
 801307e:	6026      	str	r6, [r4, #0]
 8013080:	60a5      	str	r5, [r4, #8]
 8013082:	463e      	mov	r6, r7
 8013084:	42be      	cmp	r6, r7
 8013086:	d900      	bls.n	801308a <__ssputs_r+0x86>
 8013088:	463e      	mov	r6, r7
 801308a:	6820      	ldr	r0, [r4, #0]
 801308c:	4632      	mov	r2, r6
 801308e:	4641      	mov	r1, r8
 8013090:	f000 fb70 	bl	8013774 <memmove>
 8013094:	68a3      	ldr	r3, [r4, #8]
 8013096:	1b9b      	subs	r3, r3, r6
 8013098:	60a3      	str	r3, [r4, #8]
 801309a:	6823      	ldr	r3, [r4, #0]
 801309c:	4433      	add	r3, r6
 801309e:	6023      	str	r3, [r4, #0]
 80130a0:	2000      	movs	r0, #0
 80130a2:	e7db      	b.n	801305c <__ssputs_r+0x58>
 80130a4:	462a      	mov	r2, r5
 80130a6:	f000 fb8b 	bl	80137c0 <_realloc_r>
 80130aa:	4606      	mov	r6, r0
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d1e1      	bne.n	8013074 <__ssputs_r+0x70>
 80130b0:	6921      	ldr	r1, [r4, #16]
 80130b2:	4650      	mov	r0, sl
 80130b4:	f7ff fec6 	bl	8012e44 <_free_r>
 80130b8:	e7c7      	b.n	801304a <__ssputs_r+0x46>
	...

080130bc <_svfiprintf_r>:
 80130bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c0:	4698      	mov	r8, r3
 80130c2:	898b      	ldrh	r3, [r1, #12]
 80130c4:	061b      	lsls	r3, r3, #24
 80130c6:	b09d      	sub	sp, #116	; 0x74
 80130c8:	4607      	mov	r7, r0
 80130ca:	460d      	mov	r5, r1
 80130cc:	4614      	mov	r4, r2
 80130ce:	d50e      	bpl.n	80130ee <_svfiprintf_r+0x32>
 80130d0:	690b      	ldr	r3, [r1, #16]
 80130d2:	b963      	cbnz	r3, 80130ee <_svfiprintf_r+0x32>
 80130d4:	2140      	movs	r1, #64	; 0x40
 80130d6:	f7ff ff21 	bl	8012f1c <_malloc_r>
 80130da:	6028      	str	r0, [r5, #0]
 80130dc:	6128      	str	r0, [r5, #16]
 80130de:	b920      	cbnz	r0, 80130ea <_svfiprintf_r+0x2e>
 80130e0:	230c      	movs	r3, #12
 80130e2:	603b      	str	r3, [r7, #0]
 80130e4:	f04f 30ff 	mov.w	r0, #4294967295
 80130e8:	e0d1      	b.n	801328e <_svfiprintf_r+0x1d2>
 80130ea:	2340      	movs	r3, #64	; 0x40
 80130ec:	616b      	str	r3, [r5, #20]
 80130ee:	2300      	movs	r3, #0
 80130f0:	9309      	str	r3, [sp, #36]	; 0x24
 80130f2:	2320      	movs	r3, #32
 80130f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80130fc:	2330      	movs	r3, #48	; 0x30
 80130fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80132a8 <_svfiprintf_r+0x1ec>
 8013102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013106:	f04f 0901 	mov.w	r9, #1
 801310a:	4623      	mov	r3, r4
 801310c:	469a      	mov	sl, r3
 801310e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013112:	b10a      	cbz	r2, 8013118 <_svfiprintf_r+0x5c>
 8013114:	2a25      	cmp	r2, #37	; 0x25
 8013116:	d1f9      	bne.n	801310c <_svfiprintf_r+0x50>
 8013118:	ebba 0b04 	subs.w	fp, sl, r4
 801311c:	d00b      	beq.n	8013136 <_svfiprintf_r+0x7a>
 801311e:	465b      	mov	r3, fp
 8013120:	4622      	mov	r2, r4
 8013122:	4629      	mov	r1, r5
 8013124:	4638      	mov	r0, r7
 8013126:	f7ff ff6d 	bl	8013004 <__ssputs_r>
 801312a:	3001      	adds	r0, #1
 801312c:	f000 80aa 	beq.w	8013284 <_svfiprintf_r+0x1c8>
 8013130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013132:	445a      	add	r2, fp
 8013134:	9209      	str	r2, [sp, #36]	; 0x24
 8013136:	f89a 3000 	ldrb.w	r3, [sl]
 801313a:	2b00      	cmp	r3, #0
 801313c:	f000 80a2 	beq.w	8013284 <_svfiprintf_r+0x1c8>
 8013140:	2300      	movs	r3, #0
 8013142:	f04f 32ff 	mov.w	r2, #4294967295
 8013146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801314a:	f10a 0a01 	add.w	sl, sl, #1
 801314e:	9304      	str	r3, [sp, #16]
 8013150:	9307      	str	r3, [sp, #28]
 8013152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013156:	931a      	str	r3, [sp, #104]	; 0x68
 8013158:	4654      	mov	r4, sl
 801315a:	2205      	movs	r2, #5
 801315c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013160:	4851      	ldr	r0, [pc, #324]	; (80132a8 <_svfiprintf_r+0x1ec>)
 8013162:	f7ed f865 	bl	8000230 <memchr>
 8013166:	9a04      	ldr	r2, [sp, #16]
 8013168:	b9d8      	cbnz	r0, 80131a2 <_svfiprintf_r+0xe6>
 801316a:	06d0      	lsls	r0, r2, #27
 801316c:	bf44      	itt	mi
 801316e:	2320      	movmi	r3, #32
 8013170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013174:	0711      	lsls	r1, r2, #28
 8013176:	bf44      	itt	mi
 8013178:	232b      	movmi	r3, #43	; 0x2b
 801317a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801317e:	f89a 3000 	ldrb.w	r3, [sl]
 8013182:	2b2a      	cmp	r3, #42	; 0x2a
 8013184:	d015      	beq.n	80131b2 <_svfiprintf_r+0xf6>
 8013186:	9a07      	ldr	r2, [sp, #28]
 8013188:	4654      	mov	r4, sl
 801318a:	2000      	movs	r0, #0
 801318c:	f04f 0c0a 	mov.w	ip, #10
 8013190:	4621      	mov	r1, r4
 8013192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013196:	3b30      	subs	r3, #48	; 0x30
 8013198:	2b09      	cmp	r3, #9
 801319a:	d94e      	bls.n	801323a <_svfiprintf_r+0x17e>
 801319c:	b1b0      	cbz	r0, 80131cc <_svfiprintf_r+0x110>
 801319e:	9207      	str	r2, [sp, #28]
 80131a0:	e014      	b.n	80131cc <_svfiprintf_r+0x110>
 80131a2:	eba0 0308 	sub.w	r3, r0, r8
 80131a6:	fa09 f303 	lsl.w	r3, r9, r3
 80131aa:	4313      	orrs	r3, r2
 80131ac:	9304      	str	r3, [sp, #16]
 80131ae:	46a2      	mov	sl, r4
 80131b0:	e7d2      	b.n	8013158 <_svfiprintf_r+0x9c>
 80131b2:	9b03      	ldr	r3, [sp, #12]
 80131b4:	1d19      	adds	r1, r3, #4
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	9103      	str	r1, [sp, #12]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	bfbb      	ittet	lt
 80131be:	425b      	neglt	r3, r3
 80131c0:	f042 0202 	orrlt.w	r2, r2, #2
 80131c4:	9307      	strge	r3, [sp, #28]
 80131c6:	9307      	strlt	r3, [sp, #28]
 80131c8:	bfb8      	it	lt
 80131ca:	9204      	strlt	r2, [sp, #16]
 80131cc:	7823      	ldrb	r3, [r4, #0]
 80131ce:	2b2e      	cmp	r3, #46	; 0x2e
 80131d0:	d10c      	bne.n	80131ec <_svfiprintf_r+0x130>
 80131d2:	7863      	ldrb	r3, [r4, #1]
 80131d4:	2b2a      	cmp	r3, #42	; 0x2a
 80131d6:	d135      	bne.n	8013244 <_svfiprintf_r+0x188>
 80131d8:	9b03      	ldr	r3, [sp, #12]
 80131da:	1d1a      	adds	r2, r3, #4
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	9203      	str	r2, [sp, #12]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	bfb8      	it	lt
 80131e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80131e8:	3402      	adds	r4, #2
 80131ea:	9305      	str	r3, [sp, #20]
 80131ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80132b8 <_svfiprintf_r+0x1fc>
 80131f0:	7821      	ldrb	r1, [r4, #0]
 80131f2:	2203      	movs	r2, #3
 80131f4:	4650      	mov	r0, sl
 80131f6:	f7ed f81b 	bl	8000230 <memchr>
 80131fa:	b140      	cbz	r0, 801320e <_svfiprintf_r+0x152>
 80131fc:	2340      	movs	r3, #64	; 0x40
 80131fe:	eba0 000a 	sub.w	r0, r0, sl
 8013202:	fa03 f000 	lsl.w	r0, r3, r0
 8013206:	9b04      	ldr	r3, [sp, #16]
 8013208:	4303      	orrs	r3, r0
 801320a:	3401      	adds	r4, #1
 801320c:	9304      	str	r3, [sp, #16]
 801320e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013212:	4826      	ldr	r0, [pc, #152]	; (80132ac <_svfiprintf_r+0x1f0>)
 8013214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013218:	2206      	movs	r2, #6
 801321a:	f7ed f809 	bl	8000230 <memchr>
 801321e:	2800      	cmp	r0, #0
 8013220:	d038      	beq.n	8013294 <_svfiprintf_r+0x1d8>
 8013222:	4b23      	ldr	r3, [pc, #140]	; (80132b0 <_svfiprintf_r+0x1f4>)
 8013224:	bb1b      	cbnz	r3, 801326e <_svfiprintf_r+0x1b2>
 8013226:	9b03      	ldr	r3, [sp, #12]
 8013228:	3307      	adds	r3, #7
 801322a:	f023 0307 	bic.w	r3, r3, #7
 801322e:	3308      	adds	r3, #8
 8013230:	9303      	str	r3, [sp, #12]
 8013232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013234:	4433      	add	r3, r6
 8013236:	9309      	str	r3, [sp, #36]	; 0x24
 8013238:	e767      	b.n	801310a <_svfiprintf_r+0x4e>
 801323a:	fb0c 3202 	mla	r2, ip, r2, r3
 801323e:	460c      	mov	r4, r1
 8013240:	2001      	movs	r0, #1
 8013242:	e7a5      	b.n	8013190 <_svfiprintf_r+0xd4>
 8013244:	2300      	movs	r3, #0
 8013246:	3401      	adds	r4, #1
 8013248:	9305      	str	r3, [sp, #20]
 801324a:	4619      	mov	r1, r3
 801324c:	f04f 0c0a 	mov.w	ip, #10
 8013250:	4620      	mov	r0, r4
 8013252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013256:	3a30      	subs	r2, #48	; 0x30
 8013258:	2a09      	cmp	r2, #9
 801325a:	d903      	bls.n	8013264 <_svfiprintf_r+0x1a8>
 801325c:	2b00      	cmp	r3, #0
 801325e:	d0c5      	beq.n	80131ec <_svfiprintf_r+0x130>
 8013260:	9105      	str	r1, [sp, #20]
 8013262:	e7c3      	b.n	80131ec <_svfiprintf_r+0x130>
 8013264:	fb0c 2101 	mla	r1, ip, r1, r2
 8013268:	4604      	mov	r4, r0
 801326a:	2301      	movs	r3, #1
 801326c:	e7f0      	b.n	8013250 <_svfiprintf_r+0x194>
 801326e:	ab03      	add	r3, sp, #12
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	462a      	mov	r2, r5
 8013274:	4b0f      	ldr	r3, [pc, #60]	; (80132b4 <_svfiprintf_r+0x1f8>)
 8013276:	a904      	add	r1, sp, #16
 8013278:	4638      	mov	r0, r7
 801327a:	f7fb fed3 	bl	800f024 <_printf_float>
 801327e:	1c42      	adds	r2, r0, #1
 8013280:	4606      	mov	r6, r0
 8013282:	d1d6      	bne.n	8013232 <_svfiprintf_r+0x176>
 8013284:	89ab      	ldrh	r3, [r5, #12]
 8013286:	065b      	lsls	r3, r3, #25
 8013288:	f53f af2c 	bmi.w	80130e4 <_svfiprintf_r+0x28>
 801328c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801328e:	b01d      	add	sp, #116	; 0x74
 8013290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013294:	ab03      	add	r3, sp, #12
 8013296:	9300      	str	r3, [sp, #0]
 8013298:	462a      	mov	r2, r5
 801329a:	4b06      	ldr	r3, [pc, #24]	; (80132b4 <_svfiprintf_r+0x1f8>)
 801329c:	a904      	add	r1, sp, #16
 801329e:	4638      	mov	r0, r7
 80132a0:	f7fc f964 	bl	800f56c <_printf_i>
 80132a4:	e7eb      	b.n	801327e <_svfiprintf_r+0x1c2>
 80132a6:	bf00      	nop
 80132a8:	08015544 	.word	0x08015544
 80132ac:	0801554e 	.word	0x0801554e
 80132b0:	0800f025 	.word	0x0800f025
 80132b4:	08013005 	.word	0x08013005
 80132b8:	0801554a 	.word	0x0801554a

080132bc <__sfputc_r>:
 80132bc:	6893      	ldr	r3, [r2, #8]
 80132be:	3b01      	subs	r3, #1
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	b410      	push	{r4}
 80132c4:	6093      	str	r3, [r2, #8]
 80132c6:	da08      	bge.n	80132da <__sfputc_r+0x1e>
 80132c8:	6994      	ldr	r4, [r2, #24]
 80132ca:	42a3      	cmp	r3, r4
 80132cc:	db01      	blt.n	80132d2 <__sfputc_r+0x16>
 80132ce:	290a      	cmp	r1, #10
 80132d0:	d103      	bne.n	80132da <__sfputc_r+0x1e>
 80132d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132d6:	f7fd bbf5 	b.w	8010ac4 <__swbuf_r>
 80132da:	6813      	ldr	r3, [r2, #0]
 80132dc:	1c58      	adds	r0, r3, #1
 80132de:	6010      	str	r0, [r2, #0]
 80132e0:	7019      	strb	r1, [r3, #0]
 80132e2:	4608      	mov	r0, r1
 80132e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132e8:	4770      	bx	lr

080132ea <__sfputs_r>:
 80132ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ec:	4606      	mov	r6, r0
 80132ee:	460f      	mov	r7, r1
 80132f0:	4614      	mov	r4, r2
 80132f2:	18d5      	adds	r5, r2, r3
 80132f4:	42ac      	cmp	r4, r5
 80132f6:	d101      	bne.n	80132fc <__sfputs_r+0x12>
 80132f8:	2000      	movs	r0, #0
 80132fa:	e007      	b.n	801330c <__sfputs_r+0x22>
 80132fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013300:	463a      	mov	r2, r7
 8013302:	4630      	mov	r0, r6
 8013304:	f7ff ffda 	bl	80132bc <__sfputc_r>
 8013308:	1c43      	adds	r3, r0, #1
 801330a:	d1f3      	bne.n	80132f4 <__sfputs_r+0xa>
 801330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013310 <_vfiprintf_r>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	460d      	mov	r5, r1
 8013316:	b09d      	sub	sp, #116	; 0x74
 8013318:	4614      	mov	r4, r2
 801331a:	4698      	mov	r8, r3
 801331c:	4606      	mov	r6, r0
 801331e:	b118      	cbz	r0, 8013328 <_vfiprintf_r+0x18>
 8013320:	6983      	ldr	r3, [r0, #24]
 8013322:	b90b      	cbnz	r3, 8013328 <_vfiprintf_r+0x18>
 8013324:	f7fe fc24 	bl	8011b70 <__sinit>
 8013328:	4b89      	ldr	r3, [pc, #548]	; (8013550 <_vfiprintf_r+0x240>)
 801332a:	429d      	cmp	r5, r3
 801332c:	d11b      	bne.n	8013366 <_vfiprintf_r+0x56>
 801332e:	6875      	ldr	r5, [r6, #4]
 8013330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013332:	07d9      	lsls	r1, r3, #31
 8013334:	d405      	bmi.n	8013342 <_vfiprintf_r+0x32>
 8013336:	89ab      	ldrh	r3, [r5, #12]
 8013338:	059a      	lsls	r2, r3, #22
 801333a:	d402      	bmi.n	8013342 <_vfiprintf_r+0x32>
 801333c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801333e:	f7ff f828 	bl	8012392 <__retarget_lock_acquire_recursive>
 8013342:	89ab      	ldrh	r3, [r5, #12]
 8013344:	071b      	lsls	r3, r3, #28
 8013346:	d501      	bpl.n	801334c <_vfiprintf_r+0x3c>
 8013348:	692b      	ldr	r3, [r5, #16]
 801334a:	b9eb      	cbnz	r3, 8013388 <_vfiprintf_r+0x78>
 801334c:	4629      	mov	r1, r5
 801334e:	4630      	mov	r0, r6
 8013350:	f7fd fc0a 	bl	8010b68 <__swsetup_r>
 8013354:	b1c0      	cbz	r0, 8013388 <_vfiprintf_r+0x78>
 8013356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013358:	07dc      	lsls	r4, r3, #31
 801335a:	d50e      	bpl.n	801337a <_vfiprintf_r+0x6a>
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	b01d      	add	sp, #116	; 0x74
 8013362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013366:	4b7b      	ldr	r3, [pc, #492]	; (8013554 <_vfiprintf_r+0x244>)
 8013368:	429d      	cmp	r5, r3
 801336a:	d101      	bne.n	8013370 <_vfiprintf_r+0x60>
 801336c:	68b5      	ldr	r5, [r6, #8]
 801336e:	e7df      	b.n	8013330 <_vfiprintf_r+0x20>
 8013370:	4b79      	ldr	r3, [pc, #484]	; (8013558 <_vfiprintf_r+0x248>)
 8013372:	429d      	cmp	r5, r3
 8013374:	bf08      	it	eq
 8013376:	68f5      	ldreq	r5, [r6, #12]
 8013378:	e7da      	b.n	8013330 <_vfiprintf_r+0x20>
 801337a:	89ab      	ldrh	r3, [r5, #12]
 801337c:	0598      	lsls	r0, r3, #22
 801337e:	d4ed      	bmi.n	801335c <_vfiprintf_r+0x4c>
 8013380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013382:	f7ff f807 	bl	8012394 <__retarget_lock_release_recursive>
 8013386:	e7e9      	b.n	801335c <_vfiprintf_r+0x4c>
 8013388:	2300      	movs	r3, #0
 801338a:	9309      	str	r3, [sp, #36]	; 0x24
 801338c:	2320      	movs	r3, #32
 801338e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013392:	f8cd 800c 	str.w	r8, [sp, #12]
 8013396:	2330      	movs	r3, #48	; 0x30
 8013398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801355c <_vfiprintf_r+0x24c>
 801339c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80133a0:	f04f 0901 	mov.w	r9, #1
 80133a4:	4623      	mov	r3, r4
 80133a6:	469a      	mov	sl, r3
 80133a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133ac:	b10a      	cbz	r2, 80133b2 <_vfiprintf_r+0xa2>
 80133ae:	2a25      	cmp	r2, #37	; 0x25
 80133b0:	d1f9      	bne.n	80133a6 <_vfiprintf_r+0x96>
 80133b2:	ebba 0b04 	subs.w	fp, sl, r4
 80133b6:	d00b      	beq.n	80133d0 <_vfiprintf_r+0xc0>
 80133b8:	465b      	mov	r3, fp
 80133ba:	4622      	mov	r2, r4
 80133bc:	4629      	mov	r1, r5
 80133be:	4630      	mov	r0, r6
 80133c0:	f7ff ff93 	bl	80132ea <__sfputs_r>
 80133c4:	3001      	adds	r0, #1
 80133c6:	f000 80aa 	beq.w	801351e <_vfiprintf_r+0x20e>
 80133ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133cc:	445a      	add	r2, fp
 80133ce:	9209      	str	r2, [sp, #36]	; 0x24
 80133d0:	f89a 3000 	ldrb.w	r3, [sl]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f000 80a2 	beq.w	801351e <_vfiprintf_r+0x20e>
 80133da:	2300      	movs	r3, #0
 80133dc:	f04f 32ff 	mov.w	r2, #4294967295
 80133e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133e4:	f10a 0a01 	add.w	sl, sl, #1
 80133e8:	9304      	str	r3, [sp, #16]
 80133ea:	9307      	str	r3, [sp, #28]
 80133ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133f0:	931a      	str	r3, [sp, #104]	; 0x68
 80133f2:	4654      	mov	r4, sl
 80133f4:	2205      	movs	r2, #5
 80133f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133fa:	4858      	ldr	r0, [pc, #352]	; (801355c <_vfiprintf_r+0x24c>)
 80133fc:	f7ec ff18 	bl	8000230 <memchr>
 8013400:	9a04      	ldr	r2, [sp, #16]
 8013402:	b9d8      	cbnz	r0, 801343c <_vfiprintf_r+0x12c>
 8013404:	06d1      	lsls	r1, r2, #27
 8013406:	bf44      	itt	mi
 8013408:	2320      	movmi	r3, #32
 801340a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801340e:	0713      	lsls	r3, r2, #28
 8013410:	bf44      	itt	mi
 8013412:	232b      	movmi	r3, #43	; 0x2b
 8013414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013418:	f89a 3000 	ldrb.w	r3, [sl]
 801341c:	2b2a      	cmp	r3, #42	; 0x2a
 801341e:	d015      	beq.n	801344c <_vfiprintf_r+0x13c>
 8013420:	9a07      	ldr	r2, [sp, #28]
 8013422:	4654      	mov	r4, sl
 8013424:	2000      	movs	r0, #0
 8013426:	f04f 0c0a 	mov.w	ip, #10
 801342a:	4621      	mov	r1, r4
 801342c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013430:	3b30      	subs	r3, #48	; 0x30
 8013432:	2b09      	cmp	r3, #9
 8013434:	d94e      	bls.n	80134d4 <_vfiprintf_r+0x1c4>
 8013436:	b1b0      	cbz	r0, 8013466 <_vfiprintf_r+0x156>
 8013438:	9207      	str	r2, [sp, #28]
 801343a:	e014      	b.n	8013466 <_vfiprintf_r+0x156>
 801343c:	eba0 0308 	sub.w	r3, r0, r8
 8013440:	fa09 f303 	lsl.w	r3, r9, r3
 8013444:	4313      	orrs	r3, r2
 8013446:	9304      	str	r3, [sp, #16]
 8013448:	46a2      	mov	sl, r4
 801344a:	e7d2      	b.n	80133f2 <_vfiprintf_r+0xe2>
 801344c:	9b03      	ldr	r3, [sp, #12]
 801344e:	1d19      	adds	r1, r3, #4
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	9103      	str	r1, [sp, #12]
 8013454:	2b00      	cmp	r3, #0
 8013456:	bfbb      	ittet	lt
 8013458:	425b      	neglt	r3, r3
 801345a:	f042 0202 	orrlt.w	r2, r2, #2
 801345e:	9307      	strge	r3, [sp, #28]
 8013460:	9307      	strlt	r3, [sp, #28]
 8013462:	bfb8      	it	lt
 8013464:	9204      	strlt	r2, [sp, #16]
 8013466:	7823      	ldrb	r3, [r4, #0]
 8013468:	2b2e      	cmp	r3, #46	; 0x2e
 801346a:	d10c      	bne.n	8013486 <_vfiprintf_r+0x176>
 801346c:	7863      	ldrb	r3, [r4, #1]
 801346e:	2b2a      	cmp	r3, #42	; 0x2a
 8013470:	d135      	bne.n	80134de <_vfiprintf_r+0x1ce>
 8013472:	9b03      	ldr	r3, [sp, #12]
 8013474:	1d1a      	adds	r2, r3, #4
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	9203      	str	r2, [sp, #12]
 801347a:	2b00      	cmp	r3, #0
 801347c:	bfb8      	it	lt
 801347e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013482:	3402      	adds	r4, #2
 8013484:	9305      	str	r3, [sp, #20]
 8013486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801356c <_vfiprintf_r+0x25c>
 801348a:	7821      	ldrb	r1, [r4, #0]
 801348c:	2203      	movs	r2, #3
 801348e:	4650      	mov	r0, sl
 8013490:	f7ec fece 	bl	8000230 <memchr>
 8013494:	b140      	cbz	r0, 80134a8 <_vfiprintf_r+0x198>
 8013496:	2340      	movs	r3, #64	; 0x40
 8013498:	eba0 000a 	sub.w	r0, r0, sl
 801349c:	fa03 f000 	lsl.w	r0, r3, r0
 80134a0:	9b04      	ldr	r3, [sp, #16]
 80134a2:	4303      	orrs	r3, r0
 80134a4:	3401      	adds	r4, #1
 80134a6:	9304      	str	r3, [sp, #16]
 80134a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134ac:	482c      	ldr	r0, [pc, #176]	; (8013560 <_vfiprintf_r+0x250>)
 80134ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80134b2:	2206      	movs	r2, #6
 80134b4:	f7ec febc 	bl	8000230 <memchr>
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d03f      	beq.n	801353c <_vfiprintf_r+0x22c>
 80134bc:	4b29      	ldr	r3, [pc, #164]	; (8013564 <_vfiprintf_r+0x254>)
 80134be:	bb1b      	cbnz	r3, 8013508 <_vfiprintf_r+0x1f8>
 80134c0:	9b03      	ldr	r3, [sp, #12]
 80134c2:	3307      	adds	r3, #7
 80134c4:	f023 0307 	bic.w	r3, r3, #7
 80134c8:	3308      	adds	r3, #8
 80134ca:	9303      	str	r3, [sp, #12]
 80134cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ce:	443b      	add	r3, r7
 80134d0:	9309      	str	r3, [sp, #36]	; 0x24
 80134d2:	e767      	b.n	80133a4 <_vfiprintf_r+0x94>
 80134d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80134d8:	460c      	mov	r4, r1
 80134da:	2001      	movs	r0, #1
 80134dc:	e7a5      	b.n	801342a <_vfiprintf_r+0x11a>
 80134de:	2300      	movs	r3, #0
 80134e0:	3401      	adds	r4, #1
 80134e2:	9305      	str	r3, [sp, #20]
 80134e4:	4619      	mov	r1, r3
 80134e6:	f04f 0c0a 	mov.w	ip, #10
 80134ea:	4620      	mov	r0, r4
 80134ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134f0:	3a30      	subs	r2, #48	; 0x30
 80134f2:	2a09      	cmp	r2, #9
 80134f4:	d903      	bls.n	80134fe <_vfiprintf_r+0x1ee>
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d0c5      	beq.n	8013486 <_vfiprintf_r+0x176>
 80134fa:	9105      	str	r1, [sp, #20]
 80134fc:	e7c3      	b.n	8013486 <_vfiprintf_r+0x176>
 80134fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013502:	4604      	mov	r4, r0
 8013504:	2301      	movs	r3, #1
 8013506:	e7f0      	b.n	80134ea <_vfiprintf_r+0x1da>
 8013508:	ab03      	add	r3, sp, #12
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	462a      	mov	r2, r5
 801350e:	4b16      	ldr	r3, [pc, #88]	; (8013568 <_vfiprintf_r+0x258>)
 8013510:	a904      	add	r1, sp, #16
 8013512:	4630      	mov	r0, r6
 8013514:	f7fb fd86 	bl	800f024 <_printf_float>
 8013518:	4607      	mov	r7, r0
 801351a:	1c78      	adds	r0, r7, #1
 801351c:	d1d6      	bne.n	80134cc <_vfiprintf_r+0x1bc>
 801351e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013520:	07d9      	lsls	r1, r3, #31
 8013522:	d405      	bmi.n	8013530 <_vfiprintf_r+0x220>
 8013524:	89ab      	ldrh	r3, [r5, #12]
 8013526:	059a      	lsls	r2, r3, #22
 8013528:	d402      	bmi.n	8013530 <_vfiprintf_r+0x220>
 801352a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801352c:	f7fe ff32 	bl	8012394 <__retarget_lock_release_recursive>
 8013530:	89ab      	ldrh	r3, [r5, #12]
 8013532:	065b      	lsls	r3, r3, #25
 8013534:	f53f af12 	bmi.w	801335c <_vfiprintf_r+0x4c>
 8013538:	9809      	ldr	r0, [sp, #36]	; 0x24
 801353a:	e711      	b.n	8013360 <_vfiprintf_r+0x50>
 801353c:	ab03      	add	r3, sp, #12
 801353e:	9300      	str	r3, [sp, #0]
 8013540:	462a      	mov	r2, r5
 8013542:	4b09      	ldr	r3, [pc, #36]	; (8013568 <_vfiprintf_r+0x258>)
 8013544:	a904      	add	r1, sp, #16
 8013546:	4630      	mov	r0, r6
 8013548:	f7fc f810 	bl	800f56c <_printf_i>
 801354c:	e7e4      	b.n	8013518 <_vfiprintf_r+0x208>
 801354e:	bf00      	nop
 8013550:	0801532c 	.word	0x0801532c
 8013554:	0801534c 	.word	0x0801534c
 8013558:	0801530c 	.word	0x0801530c
 801355c:	08015544 	.word	0x08015544
 8013560:	0801554e 	.word	0x0801554e
 8013564:	0800f025 	.word	0x0800f025
 8013568:	080132eb 	.word	0x080132eb
 801356c:	0801554a 	.word	0x0801554a

08013570 <nan>:
 8013570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013578 <nan+0x8>
 8013574:	4770      	bx	lr
 8013576:	bf00      	nop
 8013578:	00000000 	.word	0x00000000
 801357c:	7ff80000 	.word	0x7ff80000

08013580 <_sbrk_r>:
 8013580:	b538      	push	{r3, r4, r5, lr}
 8013582:	4d06      	ldr	r5, [pc, #24]	; (801359c <_sbrk_r+0x1c>)
 8013584:	2300      	movs	r3, #0
 8013586:	4604      	mov	r4, r0
 8013588:	4608      	mov	r0, r1
 801358a:	602b      	str	r3, [r5, #0]
 801358c:	f7f2 ff74 	bl	8006478 <_sbrk>
 8013590:	1c43      	adds	r3, r0, #1
 8013592:	d102      	bne.n	801359a <_sbrk_r+0x1a>
 8013594:	682b      	ldr	r3, [r5, #0]
 8013596:	b103      	cbz	r3, 801359a <_sbrk_r+0x1a>
 8013598:	6023      	str	r3, [r4, #0]
 801359a:	bd38      	pop	{r3, r4, r5, pc}
 801359c:	20009430 	.word	0x20009430

080135a0 <__sread>:
 80135a0:	b510      	push	{r4, lr}
 80135a2:	460c      	mov	r4, r1
 80135a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135a8:	f000 f93a 	bl	8013820 <_read_r>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	bfab      	itete	ge
 80135b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80135b2:	89a3      	ldrhlt	r3, [r4, #12]
 80135b4:	181b      	addge	r3, r3, r0
 80135b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80135ba:	bfac      	ite	ge
 80135bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80135be:	81a3      	strhlt	r3, [r4, #12]
 80135c0:	bd10      	pop	{r4, pc}

080135c2 <__swrite>:
 80135c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135c6:	461f      	mov	r7, r3
 80135c8:	898b      	ldrh	r3, [r1, #12]
 80135ca:	05db      	lsls	r3, r3, #23
 80135cc:	4605      	mov	r5, r0
 80135ce:	460c      	mov	r4, r1
 80135d0:	4616      	mov	r6, r2
 80135d2:	d505      	bpl.n	80135e0 <__swrite+0x1e>
 80135d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135d8:	2302      	movs	r3, #2
 80135da:	2200      	movs	r2, #0
 80135dc:	f000 f8b8 	bl	8013750 <_lseek_r>
 80135e0:	89a3      	ldrh	r3, [r4, #12]
 80135e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135ea:	81a3      	strh	r3, [r4, #12]
 80135ec:	4632      	mov	r2, r6
 80135ee:	463b      	mov	r3, r7
 80135f0:	4628      	mov	r0, r5
 80135f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135f6:	f000 b837 	b.w	8013668 <_write_r>

080135fa <__sseek>:
 80135fa:	b510      	push	{r4, lr}
 80135fc:	460c      	mov	r4, r1
 80135fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013602:	f000 f8a5 	bl	8013750 <_lseek_r>
 8013606:	1c43      	adds	r3, r0, #1
 8013608:	89a3      	ldrh	r3, [r4, #12]
 801360a:	bf15      	itete	ne
 801360c:	6560      	strne	r0, [r4, #84]	; 0x54
 801360e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013616:	81a3      	strheq	r3, [r4, #12]
 8013618:	bf18      	it	ne
 801361a:	81a3      	strhne	r3, [r4, #12]
 801361c:	bd10      	pop	{r4, pc}

0801361e <__sclose>:
 801361e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013622:	f000 b851 	b.w	80136c8 <_close_r>

08013626 <strncmp>:
 8013626:	b510      	push	{r4, lr}
 8013628:	b17a      	cbz	r2, 801364a <strncmp+0x24>
 801362a:	4603      	mov	r3, r0
 801362c:	3901      	subs	r1, #1
 801362e:	1884      	adds	r4, r0, r2
 8013630:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013634:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013638:	4290      	cmp	r0, r2
 801363a:	d101      	bne.n	8013640 <strncmp+0x1a>
 801363c:	42a3      	cmp	r3, r4
 801363e:	d101      	bne.n	8013644 <strncmp+0x1e>
 8013640:	1a80      	subs	r0, r0, r2
 8013642:	bd10      	pop	{r4, pc}
 8013644:	2800      	cmp	r0, #0
 8013646:	d1f3      	bne.n	8013630 <strncmp+0xa>
 8013648:	e7fa      	b.n	8013640 <strncmp+0x1a>
 801364a:	4610      	mov	r0, r2
 801364c:	e7f9      	b.n	8013642 <strncmp+0x1c>

0801364e <__ascii_wctomb>:
 801364e:	b149      	cbz	r1, 8013664 <__ascii_wctomb+0x16>
 8013650:	2aff      	cmp	r2, #255	; 0xff
 8013652:	bf85      	ittet	hi
 8013654:	238a      	movhi	r3, #138	; 0x8a
 8013656:	6003      	strhi	r3, [r0, #0]
 8013658:	700a      	strbls	r2, [r1, #0]
 801365a:	f04f 30ff 	movhi.w	r0, #4294967295
 801365e:	bf98      	it	ls
 8013660:	2001      	movls	r0, #1
 8013662:	4770      	bx	lr
 8013664:	4608      	mov	r0, r1
 8013666:	4770      	bx	lr

08013668 <_write_r>:
 8013668:	b538      	push	{r3, r4, r5, lr}
 801366a:	4d07      	ldr	r5, [pc, #28]	; (8013688 <_write_r+0x20>)
 801366c:	4604      	mov	r4, r0
 801366e:	4608      	mov	r0, r1
 8013670:	4611      	mov	r1, r2
 8013672:	2200      	movs	r2, #0
 8013674:	602a      	str	r2, [r5, #0]
 8013676:	461a      	mov	r2, r3
 8013678:	f7f2 fead 	bl	80063d6 <_write>
 801367c:	1c43      	adds	r3, r0, #1
 801367e:	d102      	bne.n	8013686 <_write_r+0x1e>
 8013680:	682b      	ldr	r3, [r5, #0]
 8013682:	b103      	cbz	r3, 8013686 <_write_r+0x1e>
 8013684:	6023      	str	r3, [r4, #0]
 8013686:	bd38      	pop	{r3, r4, r5, pc}
 8013688:	20009430 	.word	0x20009430

0801368c <__assert_func>:
 801368c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801368e:	4614      	mov	r4, r2
 8013690:	461a      	mov	r2, r3
 8013692:	4b09      	ldr	r3, [pc, #36]	; (80136b8 <__assert_func+0x2c>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	4605      	mov	r5, r0
 8013698:	68d8      	ldr	r0, [r3, #12]
 801369a:	b14c      	cbz	r4, 80136b0 <__assert_func+0x24>
 801369c:	4b07      	ldr	r3, [pc, #28]	; (80136bc <__assert_func+0x30>)
 801369e:	9100      	str	r1, [sp, #0]
 80136a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80136a4:	4906      	ldr	r1, [pc, #24]	; (80136c0 <__assert_func+0x34>)
 80136a6:	462b      	mov	r3, r5
 80136a8:	f000 f81e 	bl	80136e8 <fiprintf>
 80136ac:	f000 f8ca 	bl	8013844 <abort>
 80136b0:	4b04      	ldr	r3, [pc, #16]	; (80136c4 <__assert_func+0x38>)
 80136b2:	461c      	mov	r4, r3
 80136b4:	e7f3      	b.n	801369e <__assert_func+0x12>
 80136b6:	bf00      	nop
 80136b8:	2000002c 	.word	0x2000002c
 80136bc:	08015555 	.word	0x08015555
 80136c0:	08015562 	.word	0x08015562
 80136c4:	08015590 	.word	0x08015590

080136c8 <_close_r>:
 80136c8:	b538      	push	{r3, r4, r5, lr}
 80136ca:	4d06      	ldr	r5, [pc, #24]	; (80136e4 <_close_r+0x1c>)
 80136cc:	2300      	movs	r3, #0
 80136ce:	4604      	mov	r4, r0
 80136d0:	4608      	mov	r0, r1
 80136d2:	602b      	str	r3, [r5, #0]
 80136d4:	f7f2 fe9b 	bl	800640e <_close>
 80136d8:	1c43      	adds	r3, r0, #1
 80136da:	d102      	bne.n	80136e2 <_close_r+0x1a>
 80136dc:	682b      	ldr	r3, [r5, #0]
 80136de:	b103      	cbz	r3, 80136e2 <_close_r+0x1a>
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	20009430 	.word	0x20009430

080136e8 <fiprintf>:
 80136e8:	b40e      	push	{r1, r2, r3}
 80136ea:	b503      	push	{r0, r1, lr}
 80136ec:	4601      	mov	r1, r0
 80136ee:	ab03      	add	r3, sp, #12
 80136f0:	4805      	ldr	r0, [pc, #20]	; (8013708 <fiprintf+0x20>)
 80136f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80136f6:	6800      	ldr	r0, [r0, #0]
 80136f8:	9301      	str	r3, [sp, #4]
 80136fa:	f7ff fe09 	bl	8013310 <_vfiprintf_r>
 80136fe:	b002      	add	sp, #8
 8013700:	f85d eb04 	ldr.w	lr, [sp], #4
 8013704:	b003      	add	sp, #12
 8013706:	4770      	bx	lr
 8013708:	2000002c 	.word	0x2000002c

0801370c <_fstat_r>:
 801370c:	b538      	push	{r3, r4, r5, lr}
 801370e:	4d07      	ldr	r5, [pc, #28]	; (801372c <_fstat_r+0x20>)
 8013710:	2300      	movs	r3, #0
 8013712:	4604      	mov	r4, r0
 8013714:	4608      	mov	r0, r1
 8013716:	4611      	mov	r1, r2
 8013718:	602b      	str	r3, [r5, #0]
 801371a:	f7f2 fe84 	bl	8006426 <_fstat>
 801371e:	1c43      	adds	r3, r0, #1
 8013720:	d102      	bne.n	8013728 <_fstat_r+0x1c>
 8013722:	682b      	ldr	r3, [r5, #0]
 8013724:	b103      	cbz	r3, 8013728 <_fstat_r+0x1c>
 8013726:	6023      	str	r3, [r4, #0]
 8013728:	bd38      	pop	{r3, r4, r5, pc}
 801372a:	bf00      	nop
 801372c:	20009430 	.word	0x20009430

08013730 <_isatty_r>:
 8013730:	b538      	push	{r3, r4, r5, lr}
 8013732:	4d06      	ldr	r5, [pc, #24]	; (801374c <_isatty_r+0x1c>)
 8013734:	2300      	movs	r3, #0
 8013736:	4604      	mov	r4, r0
 8013738:	4608      	mov	r0, r1
 801373a:	602b      	str	r3, [r5, #0]
 801373c:	f7f2 fe83 	bl	8006446 <_isatty>
 8013740:	1c43      	adds	r3, r0, #1
 8013742:	d102      	bne.n	801374a <_isatty_r+0x1a>
 8013744:	682b      	ldr	r3, [r5, #0]
 8013746:	b103      	cbz	r3, 801374a <_isatty_r+0x1a>
 8013748:	6023      	str	r3, [r4, #0]
 801374a:	bd38      	pop	{r3, r4, r5, pc}
 801374c:	20009430 	.word	0x20009430

08013750 <_lseek_r>:
 8013750:	b538      	push	{r3, r4, r5, lr}
 8013752:	4d07      	ldr	r5, [pc, #28]	; (8013770 <_lseek_r+0x20>)
 8013754:	4604      	mov	r4, r0
 8013756:	4608      	mov	r0, r1
 8013758:	4611      	mov	r1, r2
 801375a:	2200      	movs	r2, #0
 801375c:	602a      	str	r2, [r5, #0]
 801375e:	461a      	mov	r2, r3
 8013760:	f7f2 fe7c 	bl	800645c <_lseek>
 8013764:	1c43      	adds	r3, r0, #1
 8013766:	d102      	bne.n	801376e <_lseek_r+0x1e>
 8013768:	682b      	ldr	r3, [r5, #0]
 801376a:	b103      	cbz	r3, 801376e <_lseek_r+0x1e>
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	bd38      	pop	{r3, r4, r5, pc}
 8013770:	20009430 	.word	0x20009430

08013774 <memmove>:
 8013774:	4288      	cmp	r0, r1
 8013776:	b510      	push	{r4, lr}
 8013778:	eb01 0402 	add.w	r4, r1, r2
 801377c:	d902      	bls.n	8013784 <memmove+0x10>
 801377e:	4284      	cmp	r4, r0
 8013780:	4623      	mov	r3, r4
 8013782:	d807      	bhi.n	8013794 <memmove+0x20>
 8013784:	1e43      	subs	r3, r0, #1
 8013786:	42a1      	cmp	r1, r4
 8013788:	d008      	beq.n	801379c <memmove+0x28>
 801378a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801378e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013792:	e7f8      	b.n	8013786 <memmove+0x12>
 8013794:	4402      	add	r2, r0
 8013796:	4601      	mov	r1, r0
 8013798:	428a      	cmp	r2, r1
 801379a:	d100      	bne.n	801379e <memmove+0x2a>
 801379c:	bd10      	pop	{r4, pc}
 801379e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137a6:	e7f7      	b.n	8013798 <memmove+0x24>

080137a8 <__malloc_lock>:
 80137a8:	4801      	ldr	r0, [pc, #4]	; (80137b0 <__malloc_lock+0x8>)
 80137aa:	f7fe bdf2 	b.w	8012392 <__retarget_lock_acquire_recursive>
 80137ae:	bf00      	nop
 80137b0:	20009424 	.word	0x20009424

080137b4 <__malloc_unlock>:
 80137b4:	4801      	ldr	r0, [pc, #4]	; (80137bc <__malloc_unlock+0x8>)
 80137b6:	f7fe bded 	b.w	8012394 <__retarget_lock_release_recursive>
 80137ba:	bf00      	nop
 80137bc:	20009424 	.word	0x20009424

080137c0 <_realloc_r>:
 80137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c4:	4680      	mov	r8, r0
 80137c6:	4614      	mov	r4, r2
 80137c8:	460e      	mov	r6, r1
 80137ca:	b921      	cbnz	r1, 80137d6 <_realloc_r+0x16>
 80137cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137d0:	4611      	mov	r1, r2
 80137d2:	f7ff bba3 	b.w	8012f1c <_malloc_r>
 80137d6:	b92a      	cbnz	r2, 80137e4 <_realloc_r+0x24>
 80137d8:	f7ff fb34 	bl	8012e44 <_free_r>
 80137dc:	4625      	mov	r5, r4
 80137de:	4628      	mov	r0, r5
 80137e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e4:	f000 f835 	bl	8013852 <_malloc_usable_size_r>
 80137e8:	4284      	cmp	r4, r0
 80137ea:	4607      	mov	r7, r0
 80137ec:	d802      	bhi.n	80137f4 <_realloc_r+0x34>
 80137ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80137f2:	d812      	bhi.n	801381a <_realloc_r+0x5a>
 80137f4:	4621      	mov	r1, r4
 80137f6:	4640      	mov	r0, r8
 80137f8:	f7ff fb90 	bl	8012f1c <_malloc_r>
 80137fc:	4605      	mov	r5, r0
 80137fe:	2800      	cmp	r0, #0
 8013800:	d0ed      	beq.n	80137de <_realloc_r+0x1e>
 8013802:	42bc      	cmp	r4, r7
 8013804:	4622      	mov	r2, r4
 8013806:	4631      	mov	r1, r6
 8013808:	bf28      	it	cs
 801380a:	463a      	movcs	r2, r7
 801380c:	f7fb fb54 	bl	800eeb8 <memcpy>
 8013810:	4631      	mov	r1, r6
 8013812:	4640      	mov	r0, r8
 8013814:	f7ff fb16 	bl	8012e44 <_free_r>
 8013818:	e7e1      	b.n	80137de <_realloc_r+0x1e>
 801381a:	4635      	mov	r5, r6
 801381c:	e7df      	b.n	80137de <_realloc_r+0x1e>
	...

08013820 <_read_r>:
 8013820:	b538      	push	{r3, r4, r5, lr}
 8013822:	4d07      	ldr	r5, [pc, #28]	; (8013840 <_read_r+0x20>)
 8013824:	4604      	mov	r4, r0
 8013826:	4608      	mov	r0, r1
 8013828:	4611      	mov	r1, r2
 801382a:	2200      	movs	r2, #0
 801382c:	602a      	str	r2, [r5, #0]
 801382e:	461a      	mov	r2, r3
 8013830:	f7f2 fdb4 	bl	800639c <_read>
 8013834:	1c43      	adds	r3, r0, #1
 8013836:	d102      	bne.n	801383e <_read_r+0x1e>
 8013838:	682b      	ldr	r3, [r5, #0]
 801383a:	b103      	cbz	r3, 801383e <_read_r+0x1e>
 801383c:	6023      	str	r3, [r4, #0]
 801383e:	bd38      	pop	{r3, r4, r5, pc}
 8013840:	20009430 	.word	0x20009430

08013844 <abort>:
 8013844:	b508      	push	{r3, lr}
 8013846:	2006      	movs	r0, #6
 8013848:	f000 f834 	bl	80138b4 <raise>
 801384c:	2001      	movs	r0, #1
 801384e:	f7f2 fd9b 	bl	8006388 <_exit>

08013852 <_malloc_usable_size_r>:
 8013852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013856:	1f18      	subs	r0, r3, #4
 8013858:	2b00      	cmp	r3, #0
 801385a:	bfbc      	itt	lt
 801385c:	580b      	ldrlt	r3, [r1, r0]
 801385e:	18c0      	addlt	r0, r0, r3
 8013860:	4770      	bx	lr

08013862 <_raise_r>:
 8013862:	291f      	cmp	r1, #31
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4604      	mov	r4, r0
 8013868:	460d      	mov	r5, r1
 801386a:	d904      	bls.n	8013876 <_raise_r+0x14>
 801386c:	2316      	movs	r3, #22
 801386e:	6003      	str	r3, [r0, #0]
 8013870:	f04f 30ff 	mov.w	r0, #4294967295
 8013874:	bd38      	pop	{r3, r4, r5, pc}
 8013876:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013878:	b112      	cbz	r2, 8013880 <_raise_r+0x1e>
 801387a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801387e:	b94b      	cbnz	r3, 8013894 <_raise_r+0x32>
 8013880:	4620      	mov	r0, r4
 8013882:	f000 f831 	bl	80138e8 <_getpid_r>
 8013886:	462a      	mov	r2, r5
 8013888:	4601      	mov	r1, r0
 801388a:	4620      	mov	r0, r4
 801388c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013890:	f000 b818 	b.w	80138c4 <_kill_r>
 8013894:	2b01      	cmp	r3, #1
 8013896:	d00a      	beq.n	80138ae <_raise_r+0x4c>
 8013898:	1c59      	adds	r1, r3, #1
 801389a:	d103      	bne.n	80138a4 <_raise_r+0x42>
 801389c:	2316      	movs	r3, #22
 801389e:	6003      	str	r3, [r0, #0]
 80138a0:	2001      	movs	r0, #1
 80138a2:	e7e7      	b.n	8013874 <_raise_r+0x12>
 80138a4:	2400      	movs	r4, #0
 80138a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138aa:	4628      	mov	r0, r5
 80138ac:	4798      	blx	r3
 80138ae:	2000      	movs	r0, #0
 80138b0:	e7e0      	b.n	8013874 <_raise_r+0x12>
	...

080138b4 <raise>:
 80138b4:	4b02      	ldr	r3, [pc, #8]	; (80138c0 <raise+0xc>)
 80138b6:	4601      	mov	r1, r0
 80138b8:	6818      	ldr	r0, [r3, #0]
 80138ba:	f7ff bfd2 	b.w	8013862 <_raise_r>
 80138be:	bf00      	nop
 80138c0:	2000002c 	.word	0x2000002c

080138c4 <_kill_r>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	4d07      	ldr	r5, [pc, #28]	; (80138e4 <_kill_r+0x20>)
 80138c8:	2300      	movs	r3, #0
 80138ca:	4604      	mov	r4, r0
 80138cc:	4608      	mov	r0, r1
 80138ce:	4611      	mov	r1, r2
 80138d0:	602b      	str	r3, [r5, #0]
 80138d2:	f7f2 fd49 	bl	8006368 <_kill>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	d102      	bne.n	80138e0 <_kill_r+0x1c>
 80138da:	682b      	ldr	r3, [r5, #0]
 80138dc:	b103      	cbz	r3, 80138e0 <_kill_r+0x1c>
 80138de:	6023      	str	r3, [r4, #0]
 80138e0:	bd38      	pop	{r3, r4, r5, pc}
 80138e2:	bf00      	nop
 80138e4:	20009430 	.word	0x20009430

080138e8 <_getpid_r>:
 80138e8:	f7f2 bd36 	b.w	8006358 <_getpid>

080138ec <round>:
 80138ec:	ec51 0b10 	vmov	r0, r1, d0
 80138f0:	b570      	push	{r4, r5, r6, lr}
 80138f2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80138f6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80138fa:	2c13      	cmp	r4, #19
 80138fc:	ee10 2a10 	vmov	r2, s0
 8013900:	460b      	mov	r3, r1
 8013902:	dc19      	bgt.n	8013938 <round+0x4c>
 8013904:	2c00      	cmp	r4, #0
 8013906:	da09      	bge.n	801391c <round+0x30>
 8013908:	3401      	adds	r4, #1
 801390a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801390e:	d103      	bne.n	8013918 <round+0x2c>
 8013910:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013914:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013918:	2200      	movs	r2, #0
 801391a:	e028      	b.n	801396e <round+0x82>
 801391c:	4d15      	ldr	r5, [pc, #84]	; (8013974 <round+0x88>)
 801391e:	4125      	asrs	r5, r4
 8013920:	ea01 0605 	and.w	r6, r1, r5
 8013924:	4332      	orrs	r2, r6
 8013926:	d00e      	beq.n	8013946 <round+0x5a>
 8013928:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801392c:	fa42 f404 	asr.w	r4, r2, r4
 8013930:	4423      	add	r3, r4
 8013932:	ea23 0305 	bic.w	r3, r3, r5
 8013936:	e7ef      	b.n	8013918 <round+0x2c>
 8013938:	2c33      	cmp	r4, #51	; 0x33
 801393a:	dd07      	ble.n	801394c <round+0x60>
 801393c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013940:	d101      	bne.n	8013946 <round+0x5a>
 8013942:	f7ec fccb 	bl	80002dc <__adddf3>
 8013946:	ec41 0b10 	vmov	d0, r0, r1
 801394a:	bd70      	pop	{r4, r5, r6, pc}
 801394c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8013950:	f04f 35ff 	mov.w	r5, #4294967295
 8013954:	40f5      	lsrs	r5, r6
 8013956:	4228      	tst	r0, r5
 8013958:	d0f5      	beq.n	8013946 <round+0x5a>
 801395a:	2101      	movs	r1, #1
 801395c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013960:	fa01 f404 	lsl.w	r4, r1, r4
 8013964:	1912      	adds	r2, r2, r4
 8013966:	bf28      	it	cs
 8013968:	185b      	addcs	r3, r3, r1
 801396a:	ea22 0205 	bic.w	r2, r2, r5
 801396e:	4619      	mov	r1, r3
 8013970:	4610      	mov	r0, r2
 8013972:	e7e8      	b.n	8013946 <round+0x5a>
 8013974:	000fffff 	.word	0x000fffff

08013978 <fmaxf>:
 8013978:	b508      	push	{r3, lr}
 801397a:	ed2d 8b02 	vpush	{d8}
 801397e:	eeb0 8a40 	vmov.f32	s16, s0
 8013982:	eef0 8a60 	vmov.f32	s17, s1
 8013986:	f000 f82d 	bl	80139e4 <__fpclassifyf>
 801398a:	b148      	cbz	r0, 80139a0 <fmaxf+0x28>
 801398c:	eeb0 0a68 	vmov.f32	s0, s17
 8013990:	f000 f828 	bl	80139e4 <__fpclassifyf>
 8013994:	b130      	cbz	r0, 80139a4 <fmaxf+0x2c>
 8013996:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801399e:	dc01      	bgt.n	80139a4 <fmaxf+0x2c>
 80139a0:	eeb0 8a68 	vmov.f32	s16, s17
 80139a4:	eeb0 0a48 	vmov.f32	s0, s16
 80139a8:	ecbd 8b02 	vpop	{d8}
 80139ac:	bd08      	pop	{r3, pc}

080139ae <fminf>:
 80139ae:	b508      	push	{r3, lr}
 80139b0:	ed2d 8b02 	vpush	{d8}
 80139b4:	eeb0 8a40 	vmov.f32	s16, s0
 80139b8:	eef0 8a60 	vmov.f32	s17, s1
 80139bc:	f000 f812 	bl	80139e4 <__fpclassifyf>
 80139c0:	b148      	cbz	r0, 80139d6 <fminf+0x28>
 80139c2:	eeb0 0a68 	vmov.f32	s0, s17
 80139c6:	f000 f80d 	bl	80139e4 <__fpclassifyf>
 80139ca:	b130      	cbz	r0, 80139da <fminf+0x2c>
 80139cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80139d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d4:	d401      	bmi.n	80139da <fminf+0x2c>
 80139d6:	eeb0 8a68 	vmov.f32	s16, s17
 80139da:	eeb0 0a48 	vmov.f32	s0, s16
 80139de:	ecbd 8b02 	vpop	{d8}
 80139e2:	bd08      	pop	{r3, pc}

080139e4 <__fpclassifyf>:
 80139e4:	ee10 3a10 	vmov	r3, s0
 80139e8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80139ec:	d00d      	beq.n	8013a0a <__fpclassifyf+0x26>
 80139ee:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80139f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80139f6:	d30a      	bcc.n	8013a0e <__fpclassifyf+0x2a>
 80139f8:	4b07      	ldr	r3, [pc, #28]	; (8013a18 <__fpclassifyf+0x34>)
 80139fa:	1e42      	subs	r2, r0, #1
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d908      	bls.n	8013a12 <__fpclassifyf+0x2e>
 8013a00:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8013a04:	4258      	negs	r0, r3
 8013a06:	4158      	adcs	r0, r3
 8013a08:	4770      	bx	lr
 8013a0a:	2002      	movs	r0, #2
 8013a0c:	4770      	bx	lr
 8013a0e:	2004      	movs	r0, #4
 8013a10:	4770      	bx	lr
 8013a12:	2003      	movs	r0, #3
 8013a14:	4770      	bx	lr
 8013a16:	bf00      	nop
 8013a18:	007ffffe 	.word	0x007ffffe
 8013a1c:	00000000 	.word	0x00000000

08013a20 <exp>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	ed2d 8b02 	vpush	{d8}
 8013a26:	ec55 4b10 	vmov	r4, r5, d0
 8013a2a:	f000 f881 	bl	8013b30 <__ieee754_exp>
 8013a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8013a32:	eef0 8a60 	vmov.f32	s17, s1
 8013a36:	ec45 4b10 	vmov	d0, r4, r5
 8013a3a:	f000 fab0 	bl	8013f9e <finite>
 8013a3e:	b168      	cbz	r0, 8013a5c <exp+0x3c>
 8013a40:	a317      	add	r3, pc, #92	; (adr r3, 8013aa0 <exp+0x80>)
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	4620      	mov	r0, r4
 8013a48:	4629      	mov	r1, r5
 8013a4a:	f7ed f88d 	bl	8000b68 <__aeabi_dcmpgt>
 8013a4e:	b160      	cbz	r0, 8013a6a <exp+0x4a>
 8013a50:	f7fb fa08 	bl	800ee64 <__errno>
 8013a54:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8013a90 <exp+0x70>
 8013a58:	2322      	movs	r3, #34	; 0x22
 8013a5a:	6003      	str	r3, [r0, #0]
 8013a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8013a60:	eef0 0a68 	vmov.f32	s1, s17
 8013a64:	ecbd 8b02 	vpop	{d8}
 8013a68:	bd38      	pop	{r3, r4, r5, pc}
 8013a6a:	a30f      	add	r3, pc, #60	; (adr r3, 8013aa8 <exp+0x88>)
 8013a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a70:	4620      	mov	r0, r4
 8013a72:	4629      	mov	r1, r5
 8013a74:	f7ed f85a 	bl	8000b2c <__aeabi_dcmplt>
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d0ef      	beq.n	8013a5c <exp+0x3c>
 8013a7c:	f7fb f9f2 	bl	800ee64 <__errno>
 8013a80:	2322      	movs	r3, #34	; 0x22
 8013a82:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8013a98 <exp+0x78>
 8013a86:	6003      	str	r3, [r0, #0]
 8013a88:	e7e8      	b.n	8013a5c <exp+0x3c>
 8013a8a:	bf00      	nop
 8013a8c:	f3af 8000 	nop.w
 8013a90:	00000000 	.word	0x00000000
 8013a94:	7ff00000 	.word	0x7ff00000
	...
 8013aa0:	fefa39ef 	.word	0xfefa39ef
 8013aa4:	40862e42 	.word	0x40862e42
 8013aa8:	d52d3051 	.word	0xd52d3051
 8013aac:	c0874910 	.word	0xc0874910

08013ab0 <fmodf>:
 8013ab0:	b508      	push	{r3, lr}
 8013ab2:	ed2d 8b02 	vpush	{d8}
 8013ab6:	eef0 8a40 	vmov.f32	s17, s0
 8013aba:	eeb0 8a60 	vmov.f32	s16, s1
 8013abe:	f000 f9b9 	bl	8013e34 <__ieee754_fmodf>
 8013ac2:	eef4 8a48 	vcmp.f32	s17, s16
 8013ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aca:	d60c      	bvs.n	8013ae6 <fmodf+0x36>
 8013acc:	eddf 8a07 	vldr	s17, [pc, #28]	; 8013aec <fmodf+0x3c>
 8013ad0:	eeb4 8a68 	vcmp.f32	s16, s17
 8013ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad8:	d105      	bne.n	8013ae6 <fmodf+0x36>
 8013ada:	f7fb f9c3 	bl	800ee64 <__errno>
 8013ade:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013ae2:	2321      	movs	r3, #33	; 0x21
 8013ae4:	6003      	str	r3, [r0, #0]
 8013ae6:	ecbd 8b02 	vpop	{d8}
 8013aea:	bd08      	pop	{r3, pc}
 8013aec:	00000000 	.word	0x00000000

08013af0 <sqrtf>:
 8013af0:	b508      	push	{r3, lr}
 8013af2:	ed2d 8b02 	vpush	{d8}
 8013af6:	eeb0 8a40 	vmov.f32	s16, s0
 8013afa:	f000 fa1d 	bl	8013f38 <__ieee754_sqrtf>
 8013afe:	eeb4 8a48 	vcmp.f32	s16, s16
 8013b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b06:	d60c      	bvs.n	8013b22 <sqrtf+0x32>
 8013b08:	eddf 8a07 	vldr	s17, [pc, #28]	; 8013b28 <sqrtf+0x38>
 8013b0c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b14:	d505      	bpl.n	8013b22 <sqrtf+0x32>
 8013b16:	f7fb f9a5 	bl	800ee64 <__errno>
 8013b1a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013b1e:	2321      	movs	r3, #33	; 0x21
 8013b20:	6003      	str	r3, [r0, #0]
 8013b22:	ecbd 8b02 	vpop	{d8}
 8013b26:	bd08      	pop	{r3, pc}
	...

08013b30 <__ieee754_exp>:
 8013b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b34:	ec55 4b10 	vmov	r4, r5, d0
 8013b38:	49b5      	ldr	r1, [pc, #724]	; (8013e10 <__ieee754_exp+0x2e0>)
 8013b3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b3e:	428b      	cmp	r3, r1
 8013b40:	ed2d 8b04 	vpush	{d8-d9}
 8013b44:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8013b48:	d93d      	bls.n	8013bc6 <__ieee754_exp+0x96>
 8013b4a:	49b2      	ldr	r1, [pc, #712]	; (8013e14 <__ieee754_exp+0x2e4>)
 8013b4c:	428b      	cmp	r3, r1
 8013b4e:	d918      	bls.n	8013b82 <__ieee754_exp+0x52>
 8013b50:	ee10 3a10 	vmov	r3, s0
 8013b54:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8013b58:	4313      	orrs	r3, r2
 8013b5a:	d009      	beq.n	8013b70 <__ieee754_exp+0x40>
 8013b5c:	ee10 2a10 	vmov	r2, s0
 8013b60:	462b      	mov	r3, r5
 8013b62:	4620      	mov	r0, r4
 8013b64:	4629      	mov	r1, r5
 8013b66:	f7ec fbb9 	bl	80002dc <__adddf3>
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	460d      	mov	r5, r1
 8013b6e:	e002      	b.n	8013b76 <__ieee754_exp+0x46>
 8013b70:	b10e      	cbz	r6, 8013b76 <__ieee754_exp+0x46>
 8013b72:	2400      	movs	r4, #0
 8013b74:	2500      	movs	r5, #0
 8013b76:	ecbd 8b04 	vpop	{d8-d9}
 8013b7a:	ec45 4b10 	vmov	d0, r4, r5
 8013b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b82:	a38d      	add	r3, pc, #564	; (adr r3, 8013db8 <__ieee754_exp+0x288>)
 8013b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b88:	ee10 0a10 	vmov	r0, s0
 8013b8c:	4629      	mov	r1, r5
 8013b8e:	f7ec ffeb 	bl	8000b68 <__aeabi_dcmpgt>
 8013b92:	4607      	mov	r7, r0
 8013b94:	b130      	cbz	r0, 8013ba4 <__ieee754_exp+0x74>
 8013b96:	ecbd 8b04 	vpop	{d8-d9}
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba0:	f000 b9f4 	b.w	8013f8c <__math_oflow>
 8013ba4:	a386      	add	r3, pc, #536	; (adr r3, 8013dc0 <__ieee754_exp+0x290>)
 8013ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013baa:	4620      	mov	r0, r4
 8013bac:	4629      	mov	r1, r5
 8013bae:	f7ec ffbd 	bl	8000b2c <__aeabi_dcmplt>
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	f000 808b 	beq.w	8013cce <__ieee754_exp+0x19e>
 8013bb8:	ecbd 8b04 	vpop	{d8-d9}
 8013bbc:	4638      	mov	r0, r7
 8013bbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bc2:	f000 b9da 	b.w	8013f7a <__math_uflow>
 8013bc6:	4a94      	ldr	r2, [pc, #592]	; (8013e18 <__ieee754_exp+0x2e8>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	f240 80ac 	bls.w	8013d26 <__ieee754_exp+0x1f6>
 8013bce:	4a93      	ldr	r2, [pc, #588]	; (8013e1c <__ieee754_exp+0x2ec>)
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d87c      	bhi.n	8013cce <__ieee754_exp+0x19e>
 8013bd4:	4b92      	ldr	r3, [pc, #584]	; (8013e20 <__ieee754_exp+0x2f0>)
 8013bd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bde:	ee10 0a10 	vmov	r0, s0
 8013be2:	4629      	mov	r1, r5
 8013be4:	f7ec fb78 	bl	80002d8 <__aeabi_dsub>
 8013be8:	4b8e      	ldr	r3, [pc, #568]	; (8013e24 <__ieee754_exp+0x2f4>)
 8013bea:	00f7      	lsls	r7, r6, #3
 8013bec:	443b      	add	r3, r7
 8013bee:	ed93 7b00 	vldr	d7, [r3]
 8013bf2:	f1c6 0a01 	rsb	sl, r6, #1
 8013bf6:	4680      	mov	r8, r0
 8013bf8:	4689      	mov	r9, r1
 8013bfa:	ebaa 0a06 	sub.w	sl, sl, r6
 8013bfe:	eeb0 8a47 	vmov.f32	s16, s14
 8013c02:	eef0 8a67 	vmov.f32	s17, s15
 8013c06:	ec53 2b18 	vmov	r2, r3, d8
 8013c0a:	4640      	mov	r0, r8
 8013c0c:	4649      	mov	r1, r9
 8013c0e:	f7ec fb63 	bl	80002d8 <__aeabi_dsub>
 8013c12:	4604      	mov	r4, r0
 8013c14:	460d      	mov	r5, r1
 8013c16:	4622      	mov	r2, r4
 8013c18:	462b      	mov	r3, r5
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	f7ec fd13 	bl	8000648 <__aeabi_dmul>
 8013c22:	a369      	add	r3, pc, #420	; (adr r3, 8013dc8 <__ieee754_exp+0x298>)
 8013c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c28:	4606      	mov	r6, r0
 8013c2a:	460f      	mov	r7, r1
 8013c2c:	f7ec fd0c 	bl	8000648 <__aeabi_dmul>
 8013c30:	a367      	add	r3, pc, #412	; (adr r3, 8013dd0 <__ieee754_exp+0x2a0>)
 8013c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c36:	f7ec fb4f 	bl	80002d8 <__aeabi_dsub>
 8013c3a:	4632      	mov	r2, r6
 8013c3c:	463b      	mov	r3, r7
 8013c3e:	f7ec fd03 	bl	8000648 <__aeabi_dmul>
 8013c42:	a365      	add	r3, pc, #404	; (adr r3, 8013dd8 <__ieee754_exp+0x2a8>)
 8013c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c48:	f7ec fb48 	bl	80002dc <__adddf3>
 8013c4c:	4632      	mov	r2, r6
 8013c4e:	463b      	mov	r3, r7
 8013c50:	f7ec fcfa 	bl	8000648 <__aeabi_dmul>
 8013c54:	a362      	add	r3, pc, #392	; (adr r3, 8013de0 <__ieee754_exp+0x2b0>)
 8013c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5a:	f7ec fb3d 	bl	80002d8 <__aeabi_dsub>
 8013c5e:	4632      	mov	r2, r6
 8013c60:	463b      	mov	r3, r7
 8013c62:	f7ec fcf1 	bl	8000648 <__aeabi_dmul>
 8013c66:	a360      	add	r3, pc, #384	; (adr r3, 8013de8 <__ieee754_exp+0x2b8>)
 8013c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6c:	f7ec fb36 	bl	80002dc <__adddf3>
 8013c70:	4632      	mov	r2, r6
 8013c72:	463b      	mov	r3, r7
 8013c74:	f7ec fce8 	bl	8000648 <__aeabi_dmul>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	4629      	mov	r1, r5
 8013c80:	f7ec fb2a 	bl	80002d8 <__aeabi_dsub>
 8013c84:	4602      	mov	r2, r0
 8013c86:	460b      	mov	r3, r1
 8013c88:	4606      	mov	r6, r0
 8013c8a:	460f      	mov	r7, r1
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	4629      	mov	r1, r5
 8013c90:	f7ec fcda 	bl	8000648 <__aeabi_dmul>
 8013c94:	ec41 0b19 	vmov	d9, r0, r1
 8013c98:	f1ba 0f00 	cmp.w	sl, #0
 8013c9c:	d15d      	bne.n	8013d5a <__ieee754_exp+0x22a>
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	4639      	mov	r1, r7
 8013ca8:	f7ec fb16 	bl	80002d8 <__aeabi_dsub>
 8013cac:	4602      	mov	r2, r0
 8013cae:	460b      	mov	r3, r1
 8013cb0:	ec51 0b19 	vmov	r0, r1, d9
 8013cb4:	f7ec fdf2 	bl	800089c <__aeabi_ddiv>
 8013cb8:	4622      	mov	r2, r4
 8013cba:	462b      	mov	r3, r5
 8013cbc:	f7ec fb0c 	bl	80002d8 <__aeabi_dsub>
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	460b      	mov	r3, r1
 8013cc4:	2000      	movs	r0, #0
 8013cc6:	4958      	ldr	r1, [pc, #352]	; (8013e28 <__ieee754_exp+0x2f8>)
 8013cc8:	f7ec fb06 	bl	80002d8 <__aeabi_dsub>
 8013ccc:	e74d      	b.n	8013b6a <__ieee754_exp+0x3a>
 8013cce:	4857      	ldr	r0, [pc, #348]	; (8013e2c <__ieee754_exp+0x2fc>)
 8013cd0:	a347      	add	r3, pc, #284	; (adr r3, 8013df0 <__ieee754_exp+0x2c0>)
 8013cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8013cda:	4629      	mov	r1, r5
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f7ec fcb3 	bl	8000648 <__aeabi_dmul>
 8013ce2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013ce6:	f7ec faf9 	bl	80002dc <__adddf3>
 8013cea:	f7ec ff5d 	bl	8000ba8 <__aeabi_d2iz>
 8013cee:	4682      	mov	sl, r0
 8013cf0:	f7ec fc40 	bl	8000574 <__aeabi_i2d>
 8013cf4:	a340      	add	r3, pc, #256	; (adr r3, 8013df8 <__ieee754_exp+0x2c8>)
 8013cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	460f      	mov	r7, r1
 8013cfe:	f7ec fca3 	bl	8000648 <__aeabi_dmul>
 8013d02:	4602      	mov	r2, r0
 8013d04:	460b      	mov	r3, r1
 8013d06:	4620      	mov	r0, r4
 8013d08:	4629      	mov	r1, r5
 8013d0a:	f7ec fae5 	bl	80002d8 <__aeabi_dsub>
 8013d0e:	a33c      	add	r3, pc, #240	; (adr r3, 8013e00 <__ieee754_exp+0x2d0>)
 8013d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d14:	4680      	mov	r8, r0
 8013d16:	4689      	mov	r9, r1
 8013d18:	4630      	mov	r0, r6
 8013d1a:	4639      	mov	r1, r7
 8013d1c:	f7ec fc94 	bl	8000648 <__aeabi_dmul>
 8013d20:	ec41 0b18 	vmov	d8, r0, r1
 8013d24:	e76f      	b.n	8013c06 <__ieee754_exp+0xd6>
 8013d26:	4a42      	ldr	r2, [pc, #264]	; (8013e30 <__ieee754_exp+0x300>)
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d811      	bhi.n	8013d50 <__ieee754_exp+0x220>
 8013d2c:	a336      	add	r3, pc, #216	; (adr r3, 8013e08 <__ieee754_exp+0x2d8>)
 8013d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d32:	ee10 0a10 	vmov	r0, s0
 8013d36:	4629      	mov	r1, r5
 8013d38:	f7ec fad0 	bl	80002dc <__adddf3>
 8013d3c:	4b3a      	ldr	r3, [pc, #232]	; (8013e28 <__ieee754_exp+0x2f8>)
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f7ec ff12 	bl	8000b68 <__aeabi_dcmpgt>
 8013d44:	b138      	cbz	r0, 8013d56 <__ieee754_exp+0x226>
 8013d46:	4b38      	ldr	r3, [pc, #224]	; (8013e28 <__ieee754_exp+0x2f8>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	4629      	mov	r1, r5
 8013d4e:	e70a      	b.n	8013b66 <__ieee754_exp+0x36>
 8013d50:	f04f 0a00 	mov.w	sl, #0
 8013d54:	e75f      	b.n	8013c16 <__ieee754_exp+0xe6>
 8013d56:	4682      	mov	sl, r0
 8013d58:	e75d      	b.n	8013c16 <__ieee754_exp+0xe6>
 8013d5a:	4632      	mov	r2, r6
 8013d5c:	463b      	mov	r3, r7
 8013d5e:	2000      	movs	r0, #0
 8013d60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8013d64:	f7ec fab8 	bl	80002d8 <__aeabi_dsub>
 8013d68:	4602      	mov	r2, r0
 8013d6a:	460b      	mov	r3, r1
 8013d6c:	ec51 0b19 	vmov	r0, r1, d9
 8013d70:	f7ec fd94 	bl	800089c <__aeabi_ddiv>
 8013d74:	4602      	mov	r2, r0
 8013d76:	460b      	mov	r3, r1
 8013d78:	ec51 0b18 	vmov	r0, r1, d8
 8013d7c:	f7ec faac 	bl	80002d8 <__aeabi_dsub>
 8013d80:	4642      	mov	r2, r8
 8013d82:	464b      	mov	r3, r9
 8013d84:	f7ec faa8 	bl	80002d8 <__aeabi_dsub>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	4926      	ldr	r1, [pc, #152]	; (8013e28 <__ieee754_exp+0x2f8>)
 8013d90:	f7ec faa2 	bl	80002d8 <__aeabi_dsub>
 8013d94:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8013d98:	4592      	cmp	sl, r2
 8013d9a:	db02      	blt.n	8013da2 <__ieee754_exp+0x272>
 8013d9c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013da0:	e6e3      	b.n	8013b6a <__ieee754_exp+0x3a>
 8013da2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8013da6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013daa:	2200      	movs	r2, #0
 8013dac:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8013db0:	f7ec fc4a 	bl	8000648 <__aeabi_dmul>
 8013db4:	e6d9      	b.n	8013b6a <__ieee754_exp+0x3a>
 8013db6:	bf00      	nop
 8013db8:	fefa39ef 	.word	0xfefa39ef
 8013dbc:	40862e42 	.word	0x40862e42
 8013dc0:	d52d3051 	.word	0xd52d3051
 8013dc4:	c0874910 	.word	0xc0874910
 8013dc8:	72bea4d0 	.word	0x72bea4d0
 8013dcc:	3e663769 	.word	0x3e663769
 8013dd0:	c5d26bf1 	.word	0xc5d26bf1
 8013dd4:	3ebbbd41 	.word	0x3ebbbd41
 8013dd8:	af25de2c 	.word	0xaf25de2c
 8013ddc:	3f11566a 	.word	0x3f11566a
 8013de0:	16bebd93 	.word	0x16bebd93
 8013de4:	3f66c16c 	.word	0x3f66c16c
 8013de8:	5555553e 	.word	0x5555553e
 8013dec:	3fc55555 	.word	0x3fc55555
 8013df0:	652b82fe 	.word	0x652b82fe
 8013df4:	3ff71547 	.word	0x3ff71547
 8013df8:	fee00000 	.word	0xfee00000
 8013dfc:	3fe62e42 	.word	0x3fe62e42
 8013e00:	35793c76 	.word	0x35793c76
 8013e04:	3dea39ef 	.word	0x3dea39ef
 8013e08:	8800759c 	.word	0x8800759c
 8013e0c:	7e37e43c 	.word	0x7e37e43c
 8013e10:	40862e41 	.word	0x40862e41
 8013e14:	7fefffff 	.word	0x7fefffff
 8013e18:	3fd62e42 	.word	0x3fd62e42
 8013e1c:	3ff0a2b1 	.word	0x3ff0a2b1
 8013e20:	080155a8 	.word	0x080155a8
 8013e24:	080155b8 	.word	0x080155b8
 8013e28:	3ff00000 	.word	0x3ff00000
 8013e2c:	08015598 	.word	0x08015598
 8013e30:	3defffff 	.word	0x3defffff

08013e34 <__ieee754_fmodf>:
 8013e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e36:	ee10 5a90 	vmov	r5, s1
 8013e3a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8013e3e:	d009      	beq.n	8013e54 <__ieee754_fmodf+0x20>
 8013e40:	ee10 2a10 	vmov	r2, s0
 8013e44:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013e48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013e4c:	da02      	bge.n	8013e54 <__ieee754_fmodf+0x20>
 8013e4e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013e52:	dd04      	ble.n	8013e5e <__ieee754_fmodf+0x2a>
 8013e54:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013e58:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e5e:	42a3      	cmp	r3, r4
 8013e60:	dbfc      	blt.n	8013e5c <__ieee754_fmodf+0x28>
 8013e62:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8013e66:	d105      	bne.n	8013e74 <__ieee754_fmodf+0x40>
 8013e68:	4b32      	ldr	r3, [pc, #200]	; (8013f34 <__ieee754_fmodf+0x100>)
 8013e6a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8013e6e:	ed93 0a00 	vldr	s0, [r3]
 8013e72:	e7f3      	b.n	8013e5c <__ieee754_fmodf+0x28>
 8013e74:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8013e78:	d13f      	bne.n	8013efa <__ieee754_fmodf+0xc6>
 8013e7a:	0219      	lsls	r1, r3, #8
 8013e7c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8013e80:	2900      	cmp	r1, #0
 8013e82:	dc37      	bgt.n	8013ef4 <__ieee754_fmodf+0xc0>
 8013e84:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8013e88:	d13d      	bne.n	8013f06 <__ieee754_fmodf+0xd2>
 8013e8a:	0227      	lsls	r7, r4, #8
 8013e8c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8013e90:	2f00      	cmp	r7, #0
 8013e92:	da35      	bge.n	8013f00 <__ieee754_fmodf+0xcc>
 8013e94:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8013e98:	bfbb      	ittet	lt
 8013e9a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8013e9e:	1a12      	sublt	r2, r2, r0
 8013ea0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8013ea4:	4093      	lsllt	r3, r2
 8013ea6:	bfa8      	it	ge
 8013ea8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8013eac:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8013eb0:	bfb5      	itete	lt
 8013eb2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8013eb6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8013eba:	1a52      	sublt	r2, r2, r1
 8013ebc:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8013ec0:	bfb8      	it	lt
 8013ec2:	4094      	lsllt	r4, r2
 8013ec4:	1a40      	subs	r0, r0, r1
 8013ec6:	1b1a      	subs	r2, r3, r4
 8013ec8:	bb00      	cbnz	r0, 8013f0c <__ieee754_fmodf+0xd8>
 8013eca:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8013ece:	bf38      	it	cc
 8013ed0:	4613      	movcc	r3, r2
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d0c8      	beq.n	8013e68 <__ieee754_fmodf+0x34>
 8013ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013eda:	db1f      	blt.n	8013f1c <__ieee754_fmodf+0xe8>
 8013edc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8013ee0:	db1f      	blt.n	8013f22 <__ieee754_fmodf+0xee>
 8013ee2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8013ee6:	317f      	adds	r1, #127	; 0x7f
 8013ee8:	4333      	orrs	r3, r6
 8013eea:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8013eee:	ee00 3a10 	vmov	s0, r3
 8013ef2:	e7b3      	b.n	8013e5c <__ieee754_fmodf+0x28>
 8013ef4:	3801      	subs	r0, #1
 8013ef6:	0049      	lsls	r1, r1, #1
 8013ef8:	e7c2      	b.n	8013e80 <__ieee754_fmodf+0x4c>
 8013efa:	15d8      	asrs	r0, r3, #23
 8013efc:	387f      	subs	r0, #127	; 0x7f
 8013efe:	e7c1      	b.n	8013e84 <__ieee754_fmodf+0x50>
 8013f00:	3901      	subs	r1, #1
 8013f02:	007f      	lsls	r7, r7, #1
 8013f04:	e7c4      	b.n	8013e90 <__ieee754_fmodf+0x5c>
 8013f06:	15e1      	asrs	r1, r4, #23
 8013f08:	397f      	subs	r1, #127	; 0x7f
 8013f0a:	e7c3      	b.n	8013e94 <__ieee754_fmodf+0x60>
 8013f0c:	2a00      	cmp	r2, #0
 8013f0e:	da02      	bge.n	8013f16 <__ieee754_fmodf+0xe2>
 8013f10:	005b      	lsls	r3, r3, #1
 8013f12:	3801      	subs	r0, #1
 8013f14:	e7d7      	b.n	8013ec6 <__ieee754_fmodf+0x92>
 8013f16:	d0a7      	beq.n	8013e68 <__ieee754_fmodf+0x34>
 8013f18:	0053      	lsls	r3, r2, #1
 8013f1a:	e7fa      	b.n	8013f12 <__ieee754_fmodf+0xde>
 8013f1c:	005b      	lsls	r3, r3, #1
 8013f1e:	3901      	subs	r1, #1
 8013f20:	e7d9      	b.n	8013ed6 <__ieee754_fmodf+0xa2>
 8013f22:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8013f26:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8013f2a:	3182      	adds	r1, #130	; 0x82
 8013f2c:	410b      	asrs	r3, r1
 8013f2e:	4333      	orrs	r3, r6
 8013f30:	e7dd      	b.n	8013eee <__ieee754_fmodf+0xba>
 8013f32:	bf00      	nop
 8013f34:	080155c8 	.word	0x080155c8

08013f38 <__ieee754_sqrtf>:
 8013f38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013f3c:	4770      	bx	lr

08013f3e <with_errno>:
 8013f3e:	b570      	push	{r4, r5, r6, lr}
 8013f40:	4604      	mov	r4, r0
 8013f42:	460d      	mov	r5, r1
 8013f44:	4616      	mov	r6, r2
 8013f46:	f7fa ff8d 	bl	800ee64 <__errno>
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	6006      	str	r6, [r0, #0]
 8013f4e:	4620      	mov	r0, r4
 8013f50:	bd70      	pop	{r4, r5, r6, pc}

08013f52 <xflow>:
 8013f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f54:	4614      	mov	r4, r2
 8013f56:	461d      	mov	r5, r3
 8013f58:	b108      	cbz	r0, 8013f5e <xflow+0xc>
 8013f5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8013f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f66:	4620      	mov	r0, r4
 8013f68:	4629      	mov	r1, r5
 8013f6a:	f7ec fb6d 	bl	8000648 <__aeabi_dmul>
 8013f6e:	2222      	movs	r2, #34	; 0x22
 8013f70:	b003      	add	sp, #12
 8013f72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f76:	f7ff bfe2 	b.w	8013f3e <with_errno>

08013f7a <__math_uflow>:
 8013f7a:	b508      	push	{r3, lr}
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013f82:	f7ff ffe6 	bl	8013f52 <xflow>
 8013f86:	ec41 0b10 	vmov	d0, r0, r1
 8013f8a:	bd08      	pop	{r3, pc}

08013f8c <__math_oflow>:
 8013f8c:	b508      	push	{r3, lr}
 8013f8e:	2200      	movs	r2, #0
 8013f90:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013f94:	f7ff ffdd 	bl	8013f52 <xflow>
 8013f98:	ec41 0b10 	vmov	d0, r0, r1
 8013f9c:	bd08      	pop	{r3, pc}

08013f9e <finite>:
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	ed8d 0b00 	vstr	d0, [sp]
 8013fa4:	9801      	ldr	r0, [sp, #4]
 8013fa6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013faa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013fae:	0fc0      	lsrs	r0, r0, #31
 8013fb0:	b002      	add	sp, #8
 8013fb2:	4770      	bx	lr

08013fb4 <_init>:
 8013fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fb6:	bf00      	nop
 8013fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fba:	bc08      	pop	{r3}
 8013fbc:	469e      	mov	lr, r3
 8013fbe:	4770      	bx	lr

08013fc0 <_fini>:
 8013fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fc2:	bf00      	nop
 8013fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fc6:	bc08      	pop	{r3}
 8013fc8:	469e      	mov	lr, r3
 8013fca:	4770      	bx	lr
