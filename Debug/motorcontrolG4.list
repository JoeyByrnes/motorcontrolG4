
motorcontrolG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012be4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  08012dc8  08012dc8  00022dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014308  08014308  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08014308  08014308  00024308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014310  08014310  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014310  08014310  00024310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014314  08014314  00024314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08014318  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096cc  20000220  08014538  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200098ec  08014538  000398ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028f3a  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000552f  00000000  00000000  0005918a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  0005e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb8  00000000  00000000  000605b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef94  00000000  00000000  00062270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028074  00000000  00000000  00091204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120ea7  00000000  00000000  000b9278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001da11f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ca0  00000000  00000000  001da170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012dac 	.word	0x08012dac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	08012dac 	.word	0x08012dac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00c fe31 	bl	800dcc8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010d2:	f005 fa0f 	bl	80064f4 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010dc:	f003 fe8f 	bl	8004dfe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ec:	f006 fa84 	bl	80075f8 <HAL_ADCEx_MultiModeConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f6:	f003 fe82 	bl	8004dfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_ADC1_Init+0xec>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001106:	237f      	movs	r3, #127	; 0x7f
 8001108:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001118:	f005 fda6 	bl	8006c68 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001122:	f003 fe6c 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000023c 	.word	0x2000023c
 8001134:	32601000 	.word	0x32601000

08001138 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00c fdbf 	bl	800dcc8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <MX_ADC2_Init+0xc4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001172:	2204      	movs	r2, #4
 8001174:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011b4:	f005 f99e 	bl	80064f4 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011be:	f003 fe1e 	bl	8004dfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC2_Init+0xc8>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	; 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011e0:	f005 fd42 	bl	8006c68 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011ea:	f003 fe08 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002a8 	.word	0x200002a8
 80011fc:	50000100 	.word	0x50000100
 8001200:	32601000 	.word	0x32601000

08001204 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00c fd53 	bl	800dcc8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <MX_ADC3_Init+0xe8>)
 8001226:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800122a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800122e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800124a:	2204      	movs	r2, #4
 800124c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800125c:	2201      	movs	r2, #1
 800125e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800128c:	f005 f932 	bl	80064f4 <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001296:	f003 fdb2 	bl	8004dfe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012a6:	f006 f9a7 	bl	80075f8 <HAL_ADCEx_MultiModeConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f003 fda5 	bl	8004dfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_ADC3_Init+0xec>)
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c0:	237f      	movs	r3, #127	; 0x7f
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012d2:	f005 fcc9 	bl	8006c68 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012dc:	f003 fd8f 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000314 	.word	0x20000314
 80012ec:	50000400 	.word	0x50000400
 80012f0:	32601000 	.word	0x32601000

080012f4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00c fce1 	bl	800dcc8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <MX_ADC4_Init+0xc4>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800130e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001312:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800132e:	2204      	movs	r2, #4
 8001330:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001340:	2201      	movs	r2, #1
 8001342:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001370:	f005 f8c0 	bl	80064f4 <HAL_ADC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800137a:	f003 fd40 	bl	8004dfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_ADC4_Init+0xc8>)
 8001380:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001382:	2306      	movs	r3, #6
 8001384:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138a:	237f      	movs	r3, #127	; 0x7f
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138e:	2304      	movs	r3, #4
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800139c:	f005 fc64 	bl	8006c68 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80013a6:	f003 fd2a 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000380 	.word	0x20000380
 80013b8:	50000500 	.word	0x50000500
 80013bc:	0c900008 	.word	0x0c900008

080013c0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00c fc7b 	bl	800dcc8 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <MX_ADC5_Init+0xc4>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013de:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001400:	2200      	movs	r2, #0
 8001402:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001406:	2200      	movs	r2, #0
 8001408:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC5_Init+0xc0>)
 800140c:	2201      	movs	r2, #1
 800140e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_ADC5_Init+0xc0>)
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC5_Init+0xc0>)
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_ADC5_Init+0xc0>)
 800143c:	f005 f85a 	bl	80064f4 <HAL_ADC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001446:	f003 fcda 	bl	8004dfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC5_Init+0xc8>)
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144e:	2306      	movs	r3, #6
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001456:	237f      	movs	r3, #127	; 0x7f
 8001458:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145a:	2304      	movs	r3, #4
 800145c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001468:	f005 fbfe 	bl	8006c68 <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001472:	f003 fcc4 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003ec 	.word	0x200003ec
 8001484:	50000600 	.word	0x50000600
 8001488:	04300002 	.word	0x04300002

0800148c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a6      	sub	sp, #152	; 0x98
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2254      	movs	r2, #84	; 0x54
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c fc0b 	bl	800dcc8 <memset>
  if(adcHandle->Instance==ADC1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ba:	d16b      	bne.n	8001594 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 f94f 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014d8:	f003 fc91 	bl	8004dfe <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014dc:	4b9f      	ldr	r3, [pc, #636]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a9e      	ldr	r2, [pc, #632]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014e6:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014ee:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a9b      	ldr	r2, [pc, #620]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b99      	ldr	r3, [pc, #612]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a95      	ldr	r2, [pc, #596]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001534:	4619      	mov	r1, r3
 8001536:	488b      	ldr	r0, [pc, #556]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 8001538:	f007 f9a8 	bl	800888c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800153e:	4a8b      	ldr	r2, [pc, #556]	; (800176c <HAL_ADC_MspInit+0x2e0>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001544:	2205      	movs	r2, #5
 8001546:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001548:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001576:	487c      	ldr	r0, [pc, #496]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001578:	f006 fc20 	bl	8007dbc <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001582:	f003 fc3c 	bl	8004dfe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
 800158c:	4a76      	ldr	r2, [pc, #472]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001592:	e1b4      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a75      	ldr	r2, [pc, #468]	; (8001770 <HAL_ADC_MspInit+0x2e4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d16b      	bne.n	8001676 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015a8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 f8de 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0x132>
      Error_Handler();
 80015ba:	f003 fc20 	bl	8004dfe <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10b      	bne.n	80015e8 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a62      	ldr	r2, [pc, #392]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a5c      	ldr	r2, [pc, #368]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001616:	4619      	mov	r1, r3
 8001618:	4852      	ldr	r0, [pc, #328]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 800161a:	f007 f937 	bl	800888c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_ADC_MspInit+0x2ec>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001658:	4846      	ldr	r0, [pc, #280]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800165a:	f006 fbaf 	bl	8007dbc <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001664:	f003 fbcb 	bl	8004dfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a42      	ldr	r2, [pc, #264]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
 800166e:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001674:	e143      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_ADC_MspInit+0x2f0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 8085 	bne.w	800178c <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f008 f86c 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800169e:	f003 fbae 	bl	8004dfe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016fa:	4619      	mov	r1, r3
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 80016fe:	f007 f8c5 	bl	800888c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_ADC_MspInit+0x2fc>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800170a:	2225      	movs	r2, #37	; 0x25
 800170c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800173e:	f006 fb3d 	bl	8007dbc <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_ADC_MspInit+0x2c0>
      Error_Handler();
 8001748:	f003 fb59 	bl	8004dfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001758:	e0d1      	b.n	80018fe <HAL_ADC_MspInit+0x472>
 800175a:	bf00      	nop
 800175c:	200005d8 	.word	0x200005d8
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400
 8001768:	20000458 	.word	0x20000458
 800176c:	40020008 	.word	0x40020008
 8001770:	50000100 	.word	0x50000100
 8001774:	200004b8 	.word	0x200004b8
 8001778:	4002001c 	.word	0x4002001c
 800177c:	50000400 	.word	0x50000400
 8001780:	200005dc 	.word	0x200005dc
 8001784:	20000518 	.word	0x20000518
 8001788:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_ADC_MspInit+0x47c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d16c      	bne.n	8001870 <HAL_ADC_MspInit+0x3e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800179c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a6:	4618      	mov	r0, r3
 80017a8:	f007 ffe2 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80017b2:	f003 fb24 	bl	8004dfe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001810:	4619      	mov	r1, r3
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <HAL_ADC_MspInit+0x488>)
 8001814:	f007 f83a 	bl	800888c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800181a:	4a40      	ldr	r2, [pc, #256]	; (800191c <HAL_ADC_MspInit+0x490>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001820:	2226      	movs	r2, #38	; 0x26
 8001822:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001852:	4831      	ldr	r0, [pc, #196]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001854:	f006 fab2 	bl	8007dbc <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 800185e:	f003 face 	bl	8004dfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800186e:	e046      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC5)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x494>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d141      	bne.n	80018fe <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001884:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188a:	4618      	mov	r0, r3
 800188c:	f007 ff70 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_ADC_MspInit+0x40e>
      Error_Handler();
 8001896:	f003 fab2 	bl	8004dfe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_ADC_MspInit+0x480>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0x438>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f006 ffc7 	bl	800888c <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3798      	adds	r7, #152	; 0x98
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	50000500 	.word	0x50000500
 800190c:	200005dc 	.word	0x200005dc
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400
 8001918:	20000578 	.word	0x20000578
 800191c:	40020044 	.word	0x40020044
 8001920:	50000600 	.word	0x50000600

08001924 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <order_phases+0x1e8>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 8001940:	4873      	ldr	r0, [pc, #460]	; (8001b10 <order_phases+0x1ec>)
 8001942:	f00d f8c9 	bl	800ead8 <puts>
		cal->started = 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001b14 <order_phases+0x1f0>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 7a05 	vldr	s15, [r3, #20]
 8001976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d529      	bpl.n	80019d8 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001996:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        cal->cal_position.elec_velocity = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019a0:	461a      	mov	r2, r3
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <order_phases+0x1f4>)
 80019ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80019c4:	332c      	adds	r3, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f001 fce3 	bl	8003394 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
    	return;
 80019d6:	e096      	b.n	8001b06 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a05 	vldr	s15, [r3, #20]
 80019de:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b1c <order_phases+0x1f8>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d51d      	bpl.n	8001a28 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80019f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a12:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a1c:	332c      	adds	r3, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f001 fcb7 	bl	8003394 <commutate>
    	return;
 8001a26:	e06e      	b.n	8001b06 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f001 fbcb 	bl	80031c4 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	eef0 7ae7 	vabs.f32	s15, s15
 8001a46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b20 <order_phases+0x1fc>
 8001a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a4e:	ee16 0a90 	vmov	r0, s13
 8001a52:	f7fe fda1 	bl	8000598 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f010 fe41 	bl	80126e4 <round>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8c5 	bl	8000bf8 <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd07      	ble.n	8001a9a <order_phases+0x176>
		cal->phase_order = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <order_phases+0x200>)
 8001a94:	f00d f820 	bl	800ead8 <puts>
 8001a98:	e006      	b.n	8001aa8 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001aa2:	4821      	ldr	r0, [pc, #132]	; (8001b28 <order_phases+0x204>)
 8001aa4:	f00d f818 	bl	800ead8 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	481f      	ldr	r0, [pc, #124]	; (8001b2c <order_phases+0x208>)
 8001ab0:	f00c ff8c 	bl	800e9cc <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd6d 	bl	8000598 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7fe fd68 	bl	8000598 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	4816      	ldr	r0, [pc, #88]	; (8001b30 <order_phases+0x20c>)
 8001ad6:	f00c ff79 	bl	800e9cc <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <order_phases+0x1e8>)
 8001ae4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <order_phases+0x1f4>)
 8001af4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	20000758 	.word	0x20000758
 8001b10:	08012dc8 	.word	0x08012dc8
 8001b14:	37d1b717 	.word	0x37d1b717
 8001b18:	20000658 	.word	0x20000658
 8001b1c:	3fd06cbe 	.word	0x3fd06cbe
 8001b20:	40c90fdb 	.word	0x40c90fdb
 8001b24:	08012dec 	.word	0x08012dec
 8001b28:	08012e04 	.word	0x08012e04
 8001b2c:	08012e1c 	.word	0x08012e1c
 8001b30:	08012e30 	.word	0x08012e30

08001b34 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7c1b      	ldrb	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001b4a:	489e      	ldr	r0, [pc, #632]	; (8001dc4 <calibrate_encoder+0x290>)
 8001b4c:	f00c ffc4 	bl	800ead8 <puts>
			cal->started = 1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001dc8 <calibrate_encoder+0x294>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d525      	bpl.n	8001be8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bae:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        controller->i_d_des = I_CAL;
 8001bb2:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <calibrate_encoder+0x298>)
 8001bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001bcc:	332c      	adds	r3, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f001 fbdf 	bl	8003394 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001be6:	e259      	b.n	800209c <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <calibrate_encoder+0x298>)
 8001bf0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bf4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001dd0 <calibrate_encoder+0x29c>
 8001bf8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bfc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001c00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	f140 808f 	bpl.w	8001d36 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001c36:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001c40:	332c      	adds	r3, #44	; 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f001 fba5 	bl	8003394 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dc00      	bgt.n	8001c62 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001c60:	e21c      	b.n	800209c <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001de8 <calibrate_encoder+0x2b4>
 8001c6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c70:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <calibrate_encoder+0x298>)
 8001c72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c76:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001dd0 <calibrate_encoder+0x29c>
 8001c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c86:	ee17 3a90 	vmov	r3, s15
 8001c8a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	13db      	asrs	r3, r3, #15
 8001c9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	f100 030a 	add.w	r3, r0, #10
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cb8:	461d      	mov	r5, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	685c      	ldr	r4, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc63 	bl	8000598 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4623      	mov	r3, r4
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4629      	mov	r1, r5
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <calibrate_encoder+0x2a4>)
 8001ce2:	f00c fe73 	bl	800e9cc <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ddc <calibrate_encoder+0x2a8>
 8001cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <calibrate_encoder+0x298>)
 8001d08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d0c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001de0 <calibrate_encoder+0x2ac>
 8001d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	f000 81b7 	beq.w	8002096 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001d34:	e1b2      	b.n	800209c <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <calibrate_encoder+0x298>)
 8001d3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d42:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001de4 <calibrate_encoder+0x2b0>
 8001d46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d4a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001d4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	f140 80a9 	bpl.w	8001eb8 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d6c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <calibrate_encoder+0x298>)
 8001d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001d98:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001da2:	332c      	adds	r3, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f001 faf4 	bl	8003394 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dc14      	bgt.n	8001dec <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001dc2:	e16a      	b.n	800209a <calibrate_encoder+0x566>
 8001dc4:	08012e4c 	.word	0x08012e4c
 8001dc8:	37d1b717 	.word	0x37d1b717
 8001dcc:	20000658 	.word	0x20000658
 8001dd0:	40c90fdb 	.word	0x40c90fdb
 8001dd4:	3983126e 	.word	0x3983126e
 8001dd8:	08012e74 	.word	0x08012e74
 8001ddc:	3ba0d97c 	.word	0x3ba0d97c
 8001de0:	43000000 	.word	0x43000000
 8001de4:	41490fdb 	.word	0x41490fdb
 8001de8:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8152 	beq.w	800209a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfc:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001de8 <calibrate_encoder+0x2b4>
 8001e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e04:	4ba7      	ldr	r3, [pc, #668]	; (80020a4 <calibrate_encoder+0x570>)
 8001e06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e0a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80020a8 <calibrate_encoder+0x574>
 8001e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1a:	ee17 3a90 	vmov	r3, s15
 8001e1e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	13db      	asrs	r3, r3, #15
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001e4e:	4610      	mov	r0, r2
 8001e50:	0fda      	lsrs	r2, r3, #31
 8001e52:	4413      	add	r3, r2
 8001e54:	105b      	asrs	r3, r3, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	f100 030a 	add.w	r3, r0, #10
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e68:	461d      	mov	r5, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	330a      	adds	r3, #10
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	685c      	ldr	r4, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb8b 	bl	8000598 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9cd 2300 	strd	r2, r3, [sp]
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4886      	ldr	r0, [pc, #536]	; (80020ac <calibrate_encoder+0x578>)
 8001e92:	f00c fd9b 	bl	800e9cc <iprintf>
			cal->sample_count--;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ea8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80020b0 <calibrate_encoder+0x57c>
 8001eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001eb6:	e0f0      	b.n	800209a <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f001 f983 	bl	80031c4 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec6:	e00b      	b.n	8001ee0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ecc:	330a      	adds	r3, #10
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed6:	4413      	add	r3, r2
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001edc:	3301      	adds	r3, #1
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <calibrate_encoder+0x570>)
 8001ee2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbe8      	blt.n	8001ec8 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <calibrate_encoder+0x570>)
 8001f02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f06:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80020b4 <calibrate_encoder+0x580>
 8001f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	ee17 2a90 	vmov	r2, s15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da01      	bge.n	8001f32 <calibrate_encoder+0x3fe>
 8001f2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f32:	125b      	asrs	r3, r3, #9
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f3a:	e0a0      	b.n	800207e <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	0fda      	lsrs	r2, r3, #31
 8001f44:	4413      	add	r3, r2
 8001f46:	105b      	asrs	r3, r3, #1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4c:	e068      	b.n	8002020 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <calibrate_encoder+0x570>)
 8001f5a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80020b4 <calibrate_encoder+0x580>
 8001f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6a:	eddf 6a52 	vldr	s13, [pc, #328]	; 80020b4 <calibrate_encoder+0x580>
 8001f6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da13      	bge.n	8001fb8 <calibrate_encoder+0x484>
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <calibrate_encoder+0x570>)
 8001f9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fa0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80020b4 <calibrate_encoder+0x580>
 8001fa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	e027      	b.n	8002008 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <calibrate_encoder+0x570>)
 8001fc4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fc8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80020b4 <calibrate_encoder+0x580>
 8001fcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	dd12      	ble.n	8002008 <calibrate_encoder+0x4d4>
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <calibrate_encoder+0x570>)
 8001fee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ff2:	eddf 6a30 	vldr	s13, [pc, #192]	; 80020b4 <calibrate_encoder+0x580>
 8001ff6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002002:	ee17 3a90 	vmov	r3, s15
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	330a      	adds	r3, #10
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002016:	4413      	add	r3, r2
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201c:	3301      	adds	r3, #1
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	0fda      	lsrs	r2, r3, #31
 8002024:	4413      	add	r3, r2
 8002026:	105b      	asrs	r3, r3, #1
 8002028:	461a      	mov	r2, r3
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	4293      	cmp	r3, r2
 800202e:	db8e      	blt.n	8001f4e <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8002030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	fb92 f3f3 	sdiv	r3, r2, r3
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	4413      	add	r3, r2
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	2b7f      	cmp	r3, #127	; 0x7f
 8002046:	dd02      	ble.n	800204e <calibrate_encoder+0x51a>
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	3b80      	subs	r3, #128	; 0x80
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800205e:	330a      	adds	r3, #10
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	461a      	mov	r2, r3
 8002070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002072:	4811      	ldr	r0, [pc, #68]	; (80020b8 <calibrate_encoder+0x584>)
 8002074:	f00c fcaa 	bl	800e9cc <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	3301      	adds	r3, #1
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002080:	2b7f      	cmp	r3, #127	; 0x7f
 8002082:	f77f af5b 	ble.w	8001f3c <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002094:	e002      	b.n	800209c <calibrate_encoder+0x568>
				return;
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <calibrate_encoder+0x568>
		return;
 800209a:	bf00      	nop
}
 800209c:	3748      	adds	r7, #72	; 0x48
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdb0      	pop	{r4, r5, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000658 	.word	0x20000658
 80020a8:	40c90fdb 	.word	0x40c90fdb
 80020ac:	08012e74 	.word	0x08012e74
 80020b0:	3ba0d97c 	.word	0x3ba0d97c
 80020b4:	43000000 	.word	0x43000000
 80020b8:	08012e84 	.word	0x08012e84

080020bc <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
//	msg->filter.FilterMaskIdLow=0;
//	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
//	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
//	msg->filter.FilterActivation=ENABLE;
//	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
//	msg->tx_header.DLC = 6; 			// message size of 8 byte
//	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
//	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
//	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2230      	movs	r2, #48	; 0x30
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00b fde9 	bl	800dcc8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_DAC1_Init+0x6c>)
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <MX_DAC1_Init+0x70>)
 80020fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020fc:	4814      	ldr	r0, [pc, #80]	; (8002150 <MX_DAC1_Init+0x6c>)
 80020fe:	f005 fc92 	bl	8007a26 <HAL_DAC_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002108:	f002 fe79 	bl	8004dfe <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800210c:	2302      	movs	r3, #2
 800210e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002128:	2301      	movs	r3, #1
 800212a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_DAC1_Init+0x6c>)
 8002138:	f005 fc98 	bl	8007a6c <HAL_DAC_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002142:	f002 fe5c 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200005e0 	.word	0x200005e0
 8002154:	50000800 	.word	0x50000800

08002158 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_DAC_MspInit+0x74>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d124      	bne.n	80021c4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021aa:	2310      	movs	r3, #16
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c0:	f006 fb64 	bl	800888c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	50000800 	.word	0x50000800
 80021d0:	40021000 	.word	0x40021000

080021d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <MX_DMA_Init+0x80>)
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <MX_DMA_Init+0x80>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6493      	str	r3, [r2, #72]	; 0x48
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_DMA_Init+0x80>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_DMA_Init+0x80>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <MX_DMA_Init+0x80>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6493      	str	r3, [r2, #72]	; 0x48
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_DMA_Init+0x80>)
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	200b      	movs	r0, #11
 8002210:	f005 fbd5 	bl	80079be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002214:	200b      	movs	r0, #11
 8002216:	f005 fbec 	bl	80079f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	200c      	movs	r0, #12
 8002220:	f005 fbcd 	bl	80079be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002224:	200c      	movs	r0, #12
 8002226:	f005 fbe4 	bl	80079f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	200d      	movs	r0, #13
 8002230:	f005 fbc5 	bl	80079be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002234:	200d      	movs	r0, #13
 8002236:	f005 fbdc 	bl	80079f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	200e      	movs	r0, #14
 8002240:	f005 fbbd 	bl	80079be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002244:	200e      	movs	r0, #14
 8002246:	f005 fbd4 	bl	80079f2 <HAL_NVIC_EnableIRQ>

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	480f      	ldr	r0, [pc, #60]	; (80022ac <drv_spi_write+0x54>)
 8002270:	f006 fc8e 	bl	8008b90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	1c9a      	adds	r2, r3, #2
 800227a:	2364      	movs	r3, #100	; 0x64
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <drv_spi_write+0x58>)
 8002282:	f007 fd6e 	bl	8009d62 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8002286:	bf00      	nop
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <drv_spi_write+0x58>)
 800228a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d0f9      	beq.n	8002288 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8002294:	2201      	movs	r2, #1
 8002296:	2110      	movs	r1, #16
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <drv_spi_write+0x54>)
 800229a:	f006 fc79 	bl	8008b90 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	885b      	ldrh	r3, [r3, #2]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	48000800 	.word	0x48000800
 80022b0:	200096e4 	.word	0x200096e4

080022b4 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	463b      	mov	r3, r7
 80022bc:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 80022c0:	463b      	mov	r3, r7
 80022c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ffc6 	bl	8002258 <drv_spi_write>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	463b      	mov	r3, r7
 80022de:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 80022e2:	463b      	mov	r3, r7
 80022e4:	f248 0101 	movw	r1, #32769	; 0x8001
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffb5 	bl	8002258 <drv_spi_write>
 80022ee:	4603      	mov	r3, r0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	e883 0003 	stmia.w	r3, {r0, r1}
 8002306:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	02db      	lsls	r3, r3, #11
 800230c:	b21b      	sxth	r3, r3
 800230e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002316:	b21b      	sxth	r3, r3
 8002318:	b29a      	uxth	r2, r3
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff99 	bl	8002258 <drv_spi_write>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	f107 0408 	add.w	r4, r7, #8
 800233a:	e884 0003 	stmia.w	r4, {r0, r1}
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	02db      	lsls	r3, r3, #11
 8002346:	b21a      	sxth	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b21b      	sxth	r3, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	b29a      	uxth	r2, r3
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff7d 	bl	8002258 <drv_spi_write>
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}

08002366 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8002366:	b590      	push	{r4, r7, lr}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	f107 0408 	add.w	r4, r7, #8
 8002370:	e884 0003 	stmia.w	r4, {r0, r1}
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	b21b      	sxth	r3, r3
 800237e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002382:	b21a      	sxth	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	01db      	lsls	r3, r3, #7
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	015b      	lsls	r3, r3, #5
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b21a      	sxth	r2, r3
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80023d4:	8afa      	ldrh	r2, [r7, #22]
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff3b 	bl	8002258 <drv_spi_write>
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b087      	sub	sp, #28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f107 0408 	add.w	r4, r7, #8
 80023f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	b21b      	sxth	r3, r3
 8002402:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002406:	b21a      	sxth	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21a      	sxth	r2, r3
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	b21b      	sxth	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b21a      	sxth	r2, r3
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	b21b      	sxth	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b21a      	sxth	r2, r3
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	b21b      	sxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b21b      	sxth	r3, r3
 800242e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002430:	8afa      	ldrh	r2, [r7, #22]
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff0d 	bl	8002258 <drv_spi_write>
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}

08002446 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002446:	b590      	push	{r4, r7, lr}
 8002448:	b087      	sub	sp, #28
 800244a:	af00      	add	r7, sp, #0
 800244c:	f107 0408 	add.w	r4, r7, #8
 8002450:	e884 0003 	stmia.w	r4, {r0, r1}
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	b21b      	sxth	r3, r3
 800245e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002462:	b21a      	sxth	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21a      	sxth	r2, r3
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	b21a      	sxth	r2, r3
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	b21b      	sxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b21a      	sxth	r2, r3
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	015b      	lsls	r3, r3, #5
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	b21b      	sxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b21a      	sxth	r2, r3
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b21a      	sxth	r2, r3
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80024b4:	8afa      	ldrh	r2, [r7, #22]
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fecb 	bl	8002258 <drv_spi_write>
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}

080024ca <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	463b      	mov	r3, r7
 80024d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80024d6:	2202      	movs	r2, #2
 80024d8:	463b      	mov	r3, r7
 80024da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024de:	f7ff ff0b 	bl	80022f8 <drv_read_register>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	2202      	movs	r2, #2
 80024ee:	4639      	mov	r1, r7
 80024f0:	c903      	ldmia	r1, {r0, r1}
 80024f2:	f7ff ff1d 	bl	8002330 <drv_write_register>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	463b      	mov	r3, r7
 8002506:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 800250a:	2202      	movs	r2, #2
 800250c:	463b      	mov	r3, r7
 800250e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002512:	f7ff fef1 	bl	80022f8 <drv_read_register>
 8002516:	4603      	mov	r3, r0
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	2202      	movs	r2, #2
 8002522:	4639      	mov	r1, r7
 8002524:	c903      	ldmia	r1, {r0, r1}
 8002526:	f7ff ff03 	bl	8002330 <drv_write_register>
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	463b      	mov	r3, r7
 800253c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8002540:	463b      	mov	r3, r7
 8002542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002546:	f7ff feb5 	bl	80022b4 <drv_read_FSR1>
 800254a:	4603      	mov	r3, r0
 800254c:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 800254e:	463b      	mov	r3, r7
 8002550:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002554:	f7ff febf 	bl	80022d6 <drv_read_FSR2>
 8002558:	4603      	mov	r3, r0
 800255a:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 800255c:	89fb      	ldrh	r3, [r7, #14]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <drv_print_faults+0x38>
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <drv_print_faults+0x190>)
 8002568:	f00c fa30 	bl	800e9cc <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <drv_print_faults+0x48>
 8002576:	4854      	ldr	r0, [pc, #336]	; (80026c8 <drv_print_faults+0x194>)
 8002578:	f00c fa28 	bl	800e9cc <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <drv_print_faults+0x58>
 8002586:	4851      	ldr	r0, [pc, #324]	; (80026cc <drv_print_faults+0x198>)
 8002588:	f00c fa20 	bl	800e9cc <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <drv_print_faults+0x68>
 8002596:	484e      	ldr	r0, [pc, #312]	; (80026d0 <drv_print_faults+0x19c>)
 8002598:	f00c fa18 	bl	800e9cc <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <drv_print_faults+0x78>
 80025a6:	484b      	ldr	r0, [pc, #300]	; (80026d4 <drv_print_faults+0x1a0>)
 80025a8:	f00c fa10 	bl	800e9cc <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <drv_print_faults+0x88>
 80025b6:	4848      	ldr	r0, [pc, #288]	; (80026d8 <drv_print_faults+0x1a4>)
 80025b8:	f00c fa08 	bl	800e9cc <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80025bc:	89fb      	ldrh	r3, [r7, #14]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <drv_print_faults+0x98>
 80025c6:	4845      	ldr	r0, [pc, #276]	; (80026dc <drv_print_faults+0x1a8>)
 80025c8:	f00c fa00 	bl	800e9cc <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <drv_print_faults+0xa8>
 80025d6:	4842      	ldr	r0, [pc, #264]	; (80026e0 <drv_print_faults+0x1ac>)
 80025d8:	f00c f9f8 	bl	800e9cc <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <drv_print_faults+0xb8>
 80025e6:	483f      	ldr	r0, [pc, #252]	; (80026e4 <drv_print_faults+0x1b0>)
 80025e8:	f00c f9f0 	bl	800e9cc <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <drv_print_faults+0xc8>
 80025f6:	483c      	ldr	r0, [pc, #240]	; (80026e8 <drv_print_faults+0x1b4>)
 80025f8:	f00c f9e8 	bl	800e9cc <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <drv_print_faults+0xd8>
 8002606:	4839      	ldr	r0, [pc, #228]	; (80026ec <drv_print_faults+0x1b8>)
 8002608:	f00c f9e0 	bl	800e9cc <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 800260c:	89bb      	ldrh	r3, [r7, #12]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <drv_print_faults+0xe8>
 8002616:	4836      	ldr	r0, [pc, #216]	; (80026f0 <drv_print_faults+0x1bc>)
 8002618:	f00c f9d8 	bl	800e9cc <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 800261c:	89bb      	ldrh	r3, [r7, #12]
 800261e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <drv_print_faults+0xf8>
 8002626:	4833      	ldr	r0, [pc, #204]	; (80026f4 <drv_print_faults+0x1c0>)
 8002628:	f00c f9d0 	bl	800e9cc <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 800262c:	89bb      	ldrh	r3, [r7, #12]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <drv_print_faults+0x108>
 8002636:	4830      	ldr	r0, [pc, #192]	; (80026f8 <drv_print_faults+0x1c4>)
 8002638:	f00c f9c8 	bl	800e9cc <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 800263c:	89bb      	ldrh	r3, [r7, #12]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <drv_print_faults+0x118>
 8002646:	482d      	ldr	r0, [pc, #180]	; (80026fc <drv_print_faults+0x1c8>)
 8002648:	f00c f9c0 	bl	800e9cc <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 800264c:	89bb      	ldrh	r3, [r7, #12]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <drv_print_faults+0x128>
 8002656:	482a      	ldr	r0, [pc, #168]	; (8002700 <drv_print_faults+0x1cc>)
 8002658:	f00c f9b8 	bl	800e9cc <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 800265c:	89bb      	ldrh	r3, [r7, #12]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <drv_print_faults+0x138>
 8002666:	4827      	ldr	r0, [pc, #156]	; (8002704 <drv_print_faults+0x1d0>)
 8002668:	f00c f9b0 	bl	800e9cc <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 800266c:	89bb      	ldrh	r3, [r7, #12]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <drv_print_faults+0x148>
 8002676:	4824      	ldr	r0, [pc, #144]	; (8002708 <drv_print_faults+0x1d4>)
 8002678:	f00c f9a8 	bl	800e9cc <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 800267c:	89bb      	ldrh	r3, [r7, #12]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <drv_print_faults+0x158>
 8002686:	4821      	ldr	r0, [pc, #132]	; (800270c <drv_print_faults+0x1d8>)
 8002688:	f00c f9a0 	bl	800e9cc <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 800268c:	89bb      	ldrh	r3, [r7, #12]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <drv_print_faults+0x168>
 8002696:	481e      	ldr	r0, [pc, #120]	; (8002710 <drv_print_faults+0x1dc>)
 8002698:	f00c f998 	bl	800e9cc <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 800269c:	89bb      	ldrh	r3, [r7, #12]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <drv_print_faults+0x178>
 80026a6:	481b      	ldr	r0, [pc, #108]	; (8002714 <drv_print_faults+0x1e0>)
 80026a8:	f00c f990 	bl	800e9cc <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80026ac:	89bb      	ldrh	r3, [r7, #12]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <drv_print_faults+0x188>
 80026b6:	4818      	ldr	r0, [pc, #96]	; (8002718 <drv_print_faults+0x1e4>)
 80026b8:	f00c f988 	bl	800e9cc <iprintf>

}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	08012e90 	.word	0x08012e90
 80026c8:	08012e9c 	.word	0x08012e9c
 80026cc:	08012ea8 	.word	0x08012ea8
 80026d0:	08012eb0 	.word	0x08012eb0
 80026d4:	08012eb8 	.word	0x08012eb8
 80026d8:	08012ec0 	.word	0x08012ec0
 80026dc:	08012ecc 	.word	0x08012ecc
 80026e0:	08012ed8 	.word	0x08012ed8
 80026e4:	08012ee4 	.word	0x08012ee4
 80026e8:	08012ef0 	.word	0x08012ef0
 80026ec:	08012efc 	.word	0x08012efc
 80026f0:	08012f08 	.word	0x08012f08
 80026f4:	08012f10 	.word	0x08012f10
 80026f8:	08012f18 	.word	0x08012f18
 80026fc:	08012f20 	.word	0x08012f20
 8002700:	08012f28 	.word	0x08012f28
 8002704:	08012f30 	.word	0x08012f30
 8002708:	08012f3c 	.word	0x08012f3c
 800270c:	08012f48 	.word	0x08012f48
 8002710:	08012f54 	.word	0x08012f54
 8002714:	08012f60 	.word	0x08012f60
 8002718:	08012f6c 	.word	0x08012f6c

0800271c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <MX_FDCAN1_Init+0x88>)
 8002724:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800273a:	2200      	movs	r2, #0
 800273c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002740:	2200      	movs	r2, #0
 8002742:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002746:	2200      	movs	r2, #0
 8002748:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800274c:	2210      	movs	r2, #16
 800274e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002752:	2201      	movs	r2, #1
 8002754:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002758:	2202      	movs	r2, #2
 800275a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800275e:	2202      	movs	r2, #2
 8002760:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002764:	2201      	movs	r2, #1
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800276a:	2201      	movs	r2, #1
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002770:	2201      	movs	r2, #1
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002776:	2201      	movs	r2, #1
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800277c:	2200      	movs	r2, #0
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002782:	2200      	movs	r2, #0
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002788:	2200      	movs	r2, #0
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800278e:	f005 fd8f 	bl	80082b0 <HAL_FDCAN_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002798:	f002 fb31 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200005f4 	.word	0x200005f4
 80027a4:	40006400 	.word	0x40006400

080027a8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0a0      	sub	sp, #128	; 0x80
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027c0:	f107 0318 	add.w	r3, r7, #24
 80027c4:	2254      	movs	r2, #84	; 0x54
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f00b fa7d 	bl	800dcc8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <HAL_FDCAN_MspInit+0xe8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d156      	bne.n	8002886 <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e4:	f107 0318 	add.w	r3, r7, #24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f006 ffc1 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80027f4:	f002 fb03 	bl	8004dfe <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 80027fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_FDCAN_MspInit+0xec>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA12     ------> FDCAN1_TX
    PB8-BOOT0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002852:	2309      	movs	r3, #9
 8002854:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800285a:	4619      	mov	r1, r3
 800285c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002860:	f006 f814 	bl	800888c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002868:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002876:	2309      	movs	r3, #9
 8002878:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	; (8002898 <HAL_FDCAN_MspInit+0xf0>)
 8002882:	f006 f803 	bl	800888c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002886:	bf00      	nop
 8002888:	3780      	adds	r7, #128	; 0x80
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40006400 	.word	0x40006400
 8002894:	40021000 	.word	0x40021000
 8002898:	48000400 	.word	0x48000400

0800289c <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b07      	cmp	r3, #7
 80028aa:	d901      	bls.n	80028b0 <flash_writer_init+0x14>
 80028ac:	2307      	movs	r3, #7
 80028ae:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <flash_writer_init+0x38>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	20000000 	.word	0x20000000

080028d8 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock(); //JB
 80028e0:	f005 ff02 	bl	80086e8 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR /*| FLASH_FLAG_PGPERR */| FLASH_FLAG_PGSERR);
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <flash_writer_open+0x20>)
 80028e6:	22b1      	movs	r2, #177	; 0xb1
 80028e8:	611a      	str	r2, [r3, #16]
    //FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3); //JB
    fw->ready = true;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40022000 	.word	0x40022000

080028fc <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 80028fc:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002900:	b087      	sub	sp, #28
 8002902:	af00      	add	r7, sp, #0
 8002904:	1d3c      	adds	r4, r7, #4
 8002906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800290a:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, fw.base + 4 * index, un.b); //JB
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	18d1      	adds	r1, r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	4698      	mov	r8, r3
 800291e:	4691      	mov	r9, r2
 8002920:	4642      	mov	r2, r8
 8002922:	464b      	mov	r3, r9
 8002924:	2001      	movs	r0, #1
 8002926:	f005 fe89 	bl	800863c <HAL_FLASH_Program>
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002934 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, fw.base + 4 * index, x); //JB
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002934:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002938:	b089      	sub	sp, #36	; 0x24
 800293a:	af00      	add	r7, sp, #0
 800293c:	f107 040c 	add.w	r4, r7, #12
 8002940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, fw.base + 4 * index, un.b); //JB
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	18d1      	adds	r1, r2, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2200      	movs	r2, #0
 800295a:	4698      	mov	r8, r3
 800295c:	4691      	mov	r9, r2
 800295e:	4642      	mov	r2, r8
 8002960:	464b      	mov	r3, r9
 8002962:	2001      	movs	r0, #1
 8002964:	f005 fe6a 	bl	800863c <HAL_FLASH_Program>
}
 8002968:	bf00      	nop
 800296a:	3724      	adds	r7, #36	; 0x24
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002972 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
    //FLASH_Lock(); //JB
    fw->ready = false;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 800298c:	b490      	push	{r4, r7}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	1d3c      	adds	r4, r7, #4
 8002994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002998:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <flash_read_int+0x28>)
 800299e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc90      	pop	{r4, r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000000 	.word	0x20000000

080029b8 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80029b8:	b490      	push	{r4, r7}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	1d3c      	adds	r4, r7, #4
 80029c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029c4:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <flash_read_float+0x30>)
 80029ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	ee07 3a90 	vmov	s15, r3
}
 80029da:	eeb0 0a67 	vmov.f32	s0, s15
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc90      	pop	{r4, r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000000 	.word	0x20000000

080029ec <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a14:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a26:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a38:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <set_dtc+0x140>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d136      	bne.n	8002ab2 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <set_dtc+0x144>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <set_dtc+0x144>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a62:	ee17 2a90 	vmov	r2, s15
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <set_dtc+0x144>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <set_dtc+0x144>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a86:	ee17 2a90 	vmov	r2, s15
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002a8c:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <set_dtc+0x144>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <set_dtc+0x144>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	ee17 2a90 	vmov	r2, s15
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 8002ab0:	e035      	b.n	8002b1e <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <set_dtc+0x144>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <set_dtc+0x144>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad0:	ee17 2a90 	vmov	r2, s15
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <set_dtc+0x144>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <set_dtc+0x144>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af4:	ee17 2a90 	vmov	r2, s15
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <set_dtc+0x144>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <set_dtc+0x144>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b18:	ee17 2a90 	vmov	r2, s15
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000758 	.word	0x20000758
 8002b30:	200097b0 	.word	0x200097b0

08002b34 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002b3c:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <analog_sample+0xec>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10e      	bne.n	8002b62 <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002b44:	4837      	ldr	r0, [pc, #220]	; (8002c24 <analog_sample+0xf0>)
 8002b46:	f004 f881 	bl	8006c4c <HAL_ADC_GetValue>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002b52:	4835      	ldr	r0, [pc, #212]	; (8002c28 <analog_sample+0xf4>)
 8002b54:	f004 f87a 	bl	8006c4c <HAL_ADC_GetValue>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	e00d      	b.n	8002b7e <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002b62:	4831      	ldr	r0, [pc, #196]	; (8002c28 <analog_sample+0xf4>)
 8002b64:	f004 f872 	bl	8006c4c <HAL_ADC_GetValue>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002b70:	482c      	ldr	r0, [pc, #176]	; (8002c24 <analog_sample+0xf0>)
 8002b72:	f004 f86b 	bl	8006c4c <HAL_ADC_GetValue>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002b7e:	4829      	ldr	r0, [pc, #164]	; (8002c24 <analog_sample+0xf0>)
 8002b80:	f003 fe7a 	bl	8006878 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	4826      	ldr	r0, [pc, #152]	; (8002c24 <analog_sample+0xf0>)
 8002b8a:	f003 ff59 	bl	8006a40 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002b8e:	4827      	ldr	r0, [pc, #156]	; (8002c2c <analog_sample+0xf8>)
 8002b90:	f004 f85c 	bl	8006c4c <HAL_ADC_GetValue>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c30 <analog_sample+0xfc>
 8002bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c04:	eeb1 7a67 	vneg.f32	s14, s15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000758 	.word	0x20000758
 8002c24:	2000023c 	.word	0x2000023c
 8002c28:	200002a8 	.word	0x200002a8
 8002c2c:	20000380 	.word	0x20000380
 8002c30:	3c533318 	.word	0x3c533318

08002c34 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c3e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c42:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c46:	60b8      	str	r0, [r7, #8]
 8002c48:	6079      	str	r1, [r7, #4]
 8002c4a:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002c4c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c50:	f002 fa00 	bl	8005054 <cos_lut>
 8002c54:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002c58:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c5c:	f002 f9c0 	bl	8004fe0 <sin_lut>
 8002c60:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002c64:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c70:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c8a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d34 <abc+0x100>
 8002c8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c96:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002caa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cae:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002d38 <abc+0x104>
 8002cb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002cb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002cbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002cc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cdc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002d38 <abc+0x104>
 8002ce0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ce4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ce8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002cec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d00:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002d34 <abc+0x100>
 8002d04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	edc3 7a00 	vstr	s15, [r3]
    }
 8002d2a:	bf00      	nop
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	3f5db3d7 	.word	0x3f5db3d7
 8002d38:	bf5db3d7 	.word	0xbf5db3d7

08002d3c <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	ed87 0a05 	vstr	s0, [r7, #20]
 8002d46:	edc7 0a04 	vstr	s1, [r7, #16]
 8002d4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002d4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002d56:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d5a:	f002 f97b 	bl	8005054 <cos_lut>
 8002d5e:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002d62:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d66:	f002 f93b 	bl	8004fe0 <sin_lut>
 8002d6a:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002d6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d72:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d7e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002e50 <dq0+0x114>
 8002d82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d86:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d8a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002e54 <dq0+0x118>
 8002daa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dae:	edd7 7a07 	vldr	s15, [r7, #28]
 8002db2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002db6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002dba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e58 <dq0+0x11c>
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002dd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ddc:	eeb1 7a67 	vneg.f32	s14, s15
 8002de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dec:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002e54 <dq0+0x118>
 8002df0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002df8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002dfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002e00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e14:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002e50 <dq0+0x114>
 8002e18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002e24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002e28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002e58 <dq0+0x11c>
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	edc3 7a00 	vstr	s15, [r3]

    }
 8002e46:	bf00      	nop
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	3f5db3d7 	.word	0x3f5db3d7
 8002e54:	bf5db3d7 	.word	0xbf5db3d7
 8002e58:	3f2aaaab 	.word	0x3f2aaaab

08002e5c <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	ed2d 8b02 	vpush	{d8}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	ed87 0a07 	vstr	s0, [r7, #28]
 8002e6a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002e6e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002e72:	edc7 1a04 	vstr	s3, [r7, #16]
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002e7c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002e80:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e84:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e88:	f002 f82c 	bl	8004ee4 <fminf3>
 8002e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8002e90:	ed97 1a04 	vldr	s2, [r7, #16]
 8002e94:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e98:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e9c:	f001 ffee 	bl	8004e7c <fmaxf3>
 8002ea0:	eef0 7a40 	vmov.f32	s15, s0
 8002ea4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002ea8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <svm+0x160>)
 8002eb6:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002eb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ebc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ecc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002fc0 <svm+0x164>
 8002ed0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ed4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002edc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002fc4 <svm+0x168>
 8002ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eec:	f001 ff8e 	bl	8004e0c <fast_fmaxf>
 8002ef0:	eef0 7a40 	vmov.f32	s15, s0
 8002ef4:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002fc8 <svm+0x16c>
 8002ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8002efc:	f001 ffa2 	bl	8004e44 <fast_fminf>
 8002f00:	eef0 7a40 	vmov.f32	s15, s0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002f0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002fc0 <svm+0x164>
 8002f22:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f36:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002fc4 <svm+0x168>
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	f001 ff65 	bl	8004e0c <fast_fmaxf>
 8002f42:	eef0 7a40 	vmov.f32	s15, s0
 8002f46:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002fc8 <svm+0x16c>
 8002f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4e:	f001 ff79 	bl	8004e44 <fast_fminf>
 8002f52:	eef0 7a40 	vmov.f32	s15, s0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002f5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f70:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002fc0 <svm+0x164>
 8002f74:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f78:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f80:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002fc4 <svm+0x168>
 8002f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f90:	f001 ff3c 	bl	8004e0c <fast_fmaxf>
 8002f94:	eef0 7a40 	vmov.f32	s15, s0
 8002f98:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002fc8 <svm+0x16c>
 8002f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa0:	f001 ff50 	bl	8004e44 <fast_fminf>
 8002fa4:	eef0 7a40 	vmov.f32	s15, s0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	edc3 7a00 	vstr	s15, [r3]

    }
 8002fae:	bf00      	nop
 8002fb0:	3728      	adds	r7, #40	; 0x28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	ecbd 8b02 	vpop	{d8}
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	3ef0a3d7 	.word	0x3ef0a3d7
 8002fc0:	3f933333 	.word	0x3f933333
 8002fc4:	00000000 	.word	0x00000000
 8002fc8:	3f70a3d7 	.word	0x3f70a3d7

08002fcc <zero_current>:

void zero_current(ControllerStruct *controller){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe0:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fcf6 	bl	80029ec <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e00f      	b.n	8003026 <zero_current+0x5a>
    	analog_sample(controller);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fd94 	bl	8002b34 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4413      	add	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3301      	adds	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	dbeb      	blt.n	8003006 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	fb92 f2f3 	sdiv	r2, r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	fb92 f2f3 	sdiv	r2, r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4b      	ldr	r2, [pc, #300]	; (800318c <init_controller_params+0x138>)
 8003060:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a49      	ldr	r2, [pc, #292]	; (800318c <init_controller_params+0x138>)
 8003066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <init_controller_params+0x13c>)
 800306c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003070:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003194 <init_controller_params+0x140>
 8003074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <init_controller_params+0x13c>)
 8003080:	edd3 7a02 	vldr	s15, [r3, #8]
 8003084:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003194 <init_controller_params+0x140>
 8003088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <init_controller_params+0x13c>)
 8003094:	edd3 7a02 	vldr	s15, [r3, #8]
 8003098:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003198 <init_controller_params+0x144>
 800309c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800319c <init_controller_params+0x148>
 80030a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80030cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80031a0 <init_controller_params+0x14c>
 80030d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <init_controller_params+0x150>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <init_controller_params+0x13c>)
 80030e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ea:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80031a8 <init_controller_params+0x154>
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	d803      	bhi.n	8003100 <init_controller_params+0xac>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <init_controller_params+0x158>)
 80030fc:	671a      	str	r2, [r3, #112]	; 0x70
 80030fe:	e002      	b.n	8003106 <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <init_controller_params+0x15c>)
 8003104:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e037      	b.n	800317c <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003116:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80031b4 <init_controller_params+0x160>
 800311a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80031b8 <init_controller_params+0x164>
 8003122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003126:	ee16 0a90 	vmov	r0, s13
 800312a:	f7fd fa35 	bl	8000598 <__aeabi_f2d>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	ec43 2b10 	vmov	d0, r2, r3
 8003136:	f00f fb6f 	bl	8012818 <exp>
 800313a:	ec51 0b10 	vmov	r0, r1, d0
 800313e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <init_controller_params+0x168>)
 8003144:	f7fd fa80 	bl	8000648 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <init_controller_params+0x16c>)
 8003156:	f7fd f8c1 	bl	80002dc <__adddf3>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fd69 	bl	8000c38 <__aeabi_d2f>
 8003166:	4601      	mov	r1, r0
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	333c      	adds	r3, #60	; 0x3c
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3301      	adds	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b7f      	cmp	r3, #127	; 0x7f
 8003180:	ddc4      	ble.n	800310c <init_controller_params+0xb8>
    }

    }
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	3d3851ec 	.word	0x3d3851ec
 8003190:	20000658 	.word	0x20000658
 8003194:	38d1b717 	.word	0x38d1b717
 8003198:	37d1b717 	.word	0x37d1b717
 800319c:	40c90fdb 	.word	0x40c90fdb
 80031a0:	3dcccccd 	.word	0x3dcccccd
 80031a4:	20000758 	.word	0x20000758
 80031a8:	42200000 	.word	0x42200000
 80031ac:	3ca4ffff 	.word	0x3ca4ffff
 80031b0:	3d24ffff 	.word	0x3d24ffff
 80031b4:	bc000000 	.word	0xbc000000
 80031b8:	3d03126f 	.word	0x3d03126f
 80031bc:	3ff33333 	.word	0x3ff33333
 80031c0:	3ff00000 	.word	0x3ff00000

080031c4 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <reset_foc+0xe4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <reset_foc+0xe4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ea:	ee17 2a90 	vmov	r2, s15
 80031ee:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <reset_foc+0xe4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <reset_foc+0xe4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320e:	ee17 2a90 	vmov	r2, s15
 8003212:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <reset_foc+0xe4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <reset_foc+0xe4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003232:	ee17 2a90 	vmov	r2, s15
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	200097b0 	.word	0x200097b0

080032ac <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - controller->v_ref);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	ed93 6a38 	vldr	s12, [r3, #224]	; 0xe0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80032cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 80032e4:	eddf 0a29 	vldr	s1, [pc, #164]	; 800338c <field_weaken+0xe0>
 80032e8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ec:	f001 fdaa 	bl	8004e44 <fast_fminf>
 80032f0:	eeb0 7a40 	vmov.f32	s14, s0
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <field_weaken+0xe4>)
 80032f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80032fa:	eef1 7a67 	vneg.f32	s15, s15
 80032fe:	eef0 0a67 	vmov.f32	s1, s15
 8003302:	eeb0 0a47 	vmov.f32	s0, s14
 8003306:	f001 fd81 	bl	8004e0c <fast_fmaxf>
 800330a:	eef0 7a40 	vmov.f32	s15, s0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->i_d_des = controller->fw_int;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800332c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800333c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003344:	eeb0 0a67 	vmov.f32	s0, s15
 8003348:	f00f face 	bl	80128e8 <sqrtf>
 800334c:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003356:	edd7 0a03 	vldr	s1, [r7, #12]
 800335a:	eeb0 0a67 	vmov.f32	s0, s15
 800335e:	f001 fd71 	bl	8004e44 <fast_fminf>
 8003362:	eeb0 7a40 	vmov.f32	s14, s0
 8003366:	edd7 7a03 	vldr	s15, [r7, #12]
 800336a:	eef1 7a67 	vneg.f32	s15, s15
 800336e:	eef0 0a67 	vmov.f32	s1, s15
 8003372:	eeb0 0a47 	vmov.f32	s0, s14
 8003376:	f001 fd49 	bl	8004e0c <fast_fmaxf>
 800337a:	eef0 7a40 	vmov.f32	s15, s0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8


}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	00000000 	.word	0x00000000
 8003390:	20000658 	.word	0x20000658

08003394 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80033b4:	4bd7      	ldr	r3, [pc, #860]	; (8003714 <commutate+0x380>)
 80033b6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80033ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80033ca:	4bd2      	ldr	r3, [pc, #840]	; (8003714 <commutate+0x380>)
 80033cc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80033d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	edd3 6a06 	vldr	s13, [r3, #24]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	ed93 6a07 	vldr	s12, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3340      	adds	r3, #64	; 0x40
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	eef0 1a46 	vmov.f32	s3, s12
 8003404:	eeb0 1a66 	vmov.f32	s2, s13
 8003408:	eef0 0a47 	vmov.f32	s1, s14
 800340c:	eeb0 0a67 	vmov.f32	s0, s15
 8003410:	f7ff fc94 	bl	8002d3c <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800341a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003718 <commutate+0x384>
 800341e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003428:	eddf 6abc 	vldr	s13, [pc, #752]	; 800371c <commutate+0x388>
 800342c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003440:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003718 <commutate+0x384>
 8003444:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800344e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800371c <commutate+0x388>
 8003452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003466:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003718 <commutate+0x384>
 800346a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a08 	vldr	s15, [r3, #32]
 8003474:	eddf 6aa9 	vldr	s13, [pc, #676]	; 800371c <commutate+0x388>
 8003478:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800347c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800348c:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003720 <commutate+0x38c>
 8003490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003494:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003724 <commutate+0x390>
 8003498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003728 <commutate+0x394>
 80034a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80034aa:	4b9a      	ldr	r3, [pc, #616]	; (8003714 <commutate+0x380>)
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80034c6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ca:	4610      	mov	r0, r2
 80034cc:	f001 fd3e 	bl	8004f4c <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80034f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f4:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800350a:	edd7 7a07 	vldr	s15, [r7, #28]
 800350e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800351c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003536:	eef0 0a47 	vmov.f32	s1, s14
 800353a:	eeb0 0a67 	vmov.f32	s0, s15
 800353e:	f001 fc81 	bl	8004e44 <fast_fminf>
 8003542:	eeb0 7a40 	vmov.f32	s14, s0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800354c:	eef1 7a67 	vneg.f32	s15, s15
 8003550:	eef0 0a67 	vmov.f32	s1, s15
 8003554:	eeb0 0a47 	vmov.f32	s0, s14
 8003558:	f001 fc58 	bl	8004e0c <fast_fmaxf>
 800355c:	eef0 7a40 	vmov.f32	s15, s0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003578:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800357c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800359a:	eef0 0a47 	vmov.f32	s1, s14
 800359e:	eeb0 0a67 	vmov.f32	s0, s15
 80035a2:	f001 fc4f 	bl	8004e44 <fast_fminf>
 80035a6:	eeb0 7a40 	vmov.f32	s14, s0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80035b0:	eef1 7a67 	vneg.f32	s15, s15
 80035b4:	eef0 0a67 	vmov.f32	s1, s15
 80035b8:	eeb0 0a47 	vmov.f32	s0, s14
 80035bc:	f001 fc26 	bl	8004e0c <fast_fmaxf>
 80035c0:	eef0 7a40 	vmov.f32	s15, s0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80035d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80035e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ee:	eeb0 0a67 	vmov.f32	s0, s15
 80035f2:	f00f f979 	bl	80128e8 <sqrtf>
 80035f6:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003600:	edd7 7a06 	vldr	s15, [r7, #24]
 8003604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800360e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003612:	edd7 7a04 	vldr	s15, [r7, #16]
 8003616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003632:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003636:	edd7 7a06 	vldr	s15, [r7, #24]
 800363a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003654:	eef0 0a47 	vmov.f32	s1, s14
 8003658:	eeb0 0a67 	vmov.f32	s0, s15
 800365c:	f001 fbf2 	bl	8004e44 <fast_fminf>
 8003660:	eeb0 7a40 	vmov.f32	s14, s0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800366a:	eef1 7a67 	vneg.f32	s15, s15
 800366e:	eef0 0a67 	vmov.f32	s1, s15
 8003672:	eeb0 0a47 	vmov.f32	s0, s14
 8003676:	f001 fbc9 	bl	8004e0c <fast_fmaxf>
 800367a:	eef0 7a40 	vmov.f32	s15, s0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80036a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ac:	f00f f91c 	bl	80128e8 <sqrtf>
 80036b0:	eef0 7a40 	vmov.f32	s15, s0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80036c0:	edd7 0a03 	vldr	s1, [r7, #12]
 80036c4:	eeb0 0a67 	vmov.f32	s0, s15
 80036c8:	f001 fbbc 	bl	8004e44 <fast_fminf>
 80036cc:	eeb0 7a40 	vmov.f32	s14, s0
 80036d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036d4:	eef1 7a67 	vneg.f32	s15, s15
 80036d8:	eef0 0a67 	vmov.f32	s1, s15
 80036dc:	eeb0 0a47 	vmov.f32	s0, s14
 80036e0:	f001 fb94 	bl	8004e0c <fast_fmaxf>
 80036e4:	eef0 7a40 	vmov.f32	s15, s0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003700:	eeb0 0a67 	vmov.f32	s0, s15
 8003704:	4610      	mov	r0, r2
 8003706:	f001 fc21 	bl	8004f4c <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	e00d      	b.n	8003730 <commutate+0x39c>
 8003714:	20000658 	.word	0x20000658
 8003718:	3f666666 	.word	0x3f666666
 800371c:	3dcccccd 	.word	0x3dcccccd
 8003720:	3f933333 	.word	0x3f933333
 8003724:	3f70a3d7 	.word	0x3f70a3d7
 8003728:	3f13cd3a 	.word	0x3f13cd3a
 800372c:	381d4951 	.word	0x381d4951
 8003730:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003734:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800372c <commutate+0x398>
 8003738:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800373c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	336c      	adds	r3, #108	; 0x6c
 800375c:	461a      	mov	r2, r3
 800375e:	eeb0 1a66 	vmov.f32	s2, s13
 8003762:	eef0 0a47 	vmov.f32	s1, s14
 8003766:	eeb0 0a67 	vmov.f32	s0, s15
 800376a:	f7ff fa63 	bl	8002c34 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	461a      	mov	r2, r3
 8003798:	eef0 1a46 	vmov.f32	s3, s12
 800379c:	eeb0 1a66 	vmov.f32	s2, s13
 80037a0:	eef0 0a47 	vmov.f32	s1, s14
 80037a4:	eeb0 0a67 	vmov.f32	s0, s15
 80037a8:	f7ff fb58 	bl	8002e5c <svm>

       set_dtc(controller);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff f91d 	bl	80029ec <set_dtc>

    }
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <torque_control>:


void torque_control(ControllerStruct *controller){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80037d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80037e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80037fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80037fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003806:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <torque_control+0xb0>)
 800380c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003810:	4b16      	ldr	r3, [pc, #88]	; (800386c <torque_control+0xb0>)
 8003812:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	ed97 7a03 	vldr	s14, [r7, #12]
 800381e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003828:	eef0 0a67 	vmov.f32	s1, s15
 800382c:	eeb0 0a66 	vmov.f32	s0, s13
 8003830:	f001 fb08 	bl	8004e44 <fast_fminf>
 8003834:	eeb0 7a40 	vmov.f32	s14, s0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800383e:	eef1 7a67 	vneg.f32	s15, s15
 8003842:	eef0 0a67 	vmov.f32	s1, s15
 8003846:	eeb0 0a47 	vmov.f32	s0, s14
 800384a:	f001 fadf 	bl	8004e0c <fast_fmaxf>
 800384e:	eef0 7a40 	vmov.f32	s15, s0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000658 	.word	0x20000658

08003870 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	785a      	ldrb	r2, [r3, #1]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d00d      	beq.n	80038f0 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f941 	bl	8003b5c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	785a      	ldrb	r2, [r3, #1]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8d2 	bl	8003a94 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	f200 80b8 	bhi.w	8003a6a <run_fsm+0x1aa>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <run_fsm+0x40>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003a69 	.word	0x08003a69
 8003904:	0800391d 	.word	0x0800391d
 8003908:	08003a1d 	.word	0x08003a1d
 800390c:	08003a6b 	.word	0x08003a6b
 8003910:	08003a69 	.word	0x08003a69
 8003914:	08003a5f 	.word	0x08003a5f
 8003918:	08003a69 	.word	0x08003a69
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 800391c:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <run_fsm+0x1b4>)
 800391e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003926:	4b54      	ldr	r3, [pc, #336]	; (8003a78 <run_fsm+0x1b8>)
 8003928:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800392c:	4a51      	ldr	r2, [pc, #324]	; (8003a74 <run_fsm+0x1b4>)
 800392e:	4952      	ldr	r1, [pc, #328]	; (8003a78 <run_fsm+0x1b8>)
 8003930:	4852      	ldr	r0, [pc, #328]	; (8003a7c <run_fsm+0x1bc>)
 8003932:	f7fd fff7 	bl	8001924 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003936:	e098      	b.n	8003a6a <run_fsm+0x1aa>
			 else if(!comm_encoder_cal.done_cal){
 8003938:	4b4e      	ldr	r3, [pc, #312]	; (8003a74 <run_fsm+0x1b4>)
 800393a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003942:	4b4d      	ldr	r3, [pc, #308]	; (8003a78 <run_fsm+0x1b8>)
 8003944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003948:	4a4a      	ldr	r2, [pc, #296]	; (8003a74 <run_fsm+0x1b4>)
 800394a:	494b      	ldr	r1, [pc, #300]	; (8003a78 <run_fsm+0x1b8>)
 800394c:	484b      	ldr	r0, [pc, #300]	; (8003a7c <run_fsm+0x1bc>)
 800394e:	f7fe f8f1 	bl	8001b34 <calibrate_encoder>
			 break;
 8003952:	e08a      	b.n	8003a6a <run_fsm+0x1aa>
				 E_ZERO = comm_encoder_cal.ezero;
 8003954:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <run_fsm+0x1b4>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <run_fsm+0x1c0>)
 800395a:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800395c:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <run_fsm+0x1c0>)
 800395e:	695c      	ldr	r4, [r3, #20]
 8003960:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <run_fsm+0x1bc>)
 8003962:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003966:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <run_fsm+0x1c0>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	425b      	negs	r3, r3
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003978:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003a84 <run_fsm+0x1c4>
 800397c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003980:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003984:	eeb0 0a47 	vmov.f32	s0, s14
 8003988:	f00e ff8e 	bl	80128a8 <fmodf>
 800398c:	eef0 7a40 	vmov.f32	s15, s0
 8003990:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003a88 <run_fsm+0x1c8>
 8003994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003998:	ee17 0a90 	vmov	r0, s15
 800399c:	f7fc fdfc 	bl	8000598 <__aeabi_f2d>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4621      	mov	r1, r4
 80039a6:	4839      	ldr	r0, [pc, #228]	; (8003a8c <run_fsm+0x1cc>)
 80039a8:	f00b f810 	bl	800e9cc <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <run_fsm+0x1bc>)
 80039ae:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <run_fsm+0x1b4>)
 80039b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80039b4:	33dc      	adds	r3, #220	; 0xdc
 80039b6:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	4618      	mov	r0, r3
 80039c0:	f00a f974 	bl	800dcac <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80039c4:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <run_fsm+0x1c0>)
 80039c6:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <run_fsm+0x1b4>)
 80039c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80039cc:	3318      	adds	r3, #24
 80039ce:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80039d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d6:	4618      	mov	r0, r3
 80039d8:	f00a f968 	bl	800dcac <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80039dc:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <run_fsm+0x1d0>)
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	9200      	str	r2, [sp, #0]
 80039e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e4:	f001 fd5e 	bl	80054a4 <preference_writer_ready>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <run_fsm+0x13a>
 80039f4:	4826      	ldr	r0, [pc, #152]	; (8003a90 <run_fsm+0x1d0>)
 80039f6:	f001 fd46 	bl	8005486 <preference_writer_open>
				 preference_writer_flush(&prefs);
 80039fa:	4825      	ldr	r0, [pc, #148]	; (8003a90 <run_fsm+0x1d0>)
 80039fc:	f001 fd60 	bl	80054c0 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003a00:	4823      	ldr	r0, [pc, #140]	; (8003a90 <run_fsm+0x1d0>)
 8003a02:	f001 fddb 	bl	80055bc <preference_writer_close>
				 preference_writer_load(prefs);
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <run_fsm+0x1d0>)
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	9200      	str	r2, [sp, #0]
 8003a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a0e:	f001 fd93 	bl	8005538 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003a12:	211b      	movs	r1, #27
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8f9 	bl	8003c0c <update_fsm>
			 break;
 8003a1a:	e026      	b.n	8003a6a <run_fsm+0x1aa>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <run_fsm+0x1c0>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dd0a      	ble.n	8003a3a <run_fsm+0x17a>
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <run_fsm+0x1b8>)
 8003a26:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <run_fsm+0x1c0>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dd03      	ble.n	8003a3a <run_fsm+0x17a>
				 zero_commands(&controller);
 8003a32:	4811      	ldr	r0, [pc, #68]	; (8003a78 <run_fsm+0x1b8>)
 8003a34:	f7ff ff1c 	bl	8003870 <zero_commands>
 8003a38:	e009      	b.n	8003a4e <run_fsm+0x18e>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003a3a:	480f      	ldr	r0, [pc, #60]	; (8003a78 <run_fsm+0x1b8>)
 8003a3c:	f7ff febe 	bl	80037bc <torque_control>
				 field_weaken(&controller);
 8003a40:	480d      	ldr	r0, [pc, #52]	; (8003a78 <run_fsm+0x1b8>)
 8003a42:	f7ff fc33 	bl	80032ac <field_weaken>
				 commutate(&controller, &comm_encoder);
 8003a46:	490d      	ldr	r1, [pc, #52]	; (8003a7c <run_fsm+0x1bc>)
 8003a48:	480b      	ldr	r0, [pc, #44]	; (8003a78 <run_fsm+0x1b8>)
 8003a4a:	f7ff fca3 	bl	8003394 <commutate>
			 }
			 controller.timeout ++;
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <run_fsm+0x1b8>)
 8003a50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a54:	3301      	adds	r3, #1
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <run_fsm+0x1b8>)
 8003a58:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 8003a5c:	e005      	b.n	8003a6a <run_fsm+0x1aa>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	4806      	ldr	r0, [pc, #24]	; (8003a7c <run_fsm+0x1bc>)
 8003a62:	f001 fcb9 	bl	80053d8 <ps_print>
			 break;
 8003a66:	e000      	b.n	8003a6a <run_fsm+0x1aa>
			 break;
 8003a68:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000115c 	.word	0x2000115c
 8003a78:	20000b6c 	.word	0x20000b6c
 8003a7c:	20000e74 	.word	0x20000e74
 8003a80:	20000758 	.word	0x20000758
 8003a84:	47800000 	.word	0x47800000
 8003a88:	40c90fdb 	.word	0x40c90fdb
 8003a8c:	08012f78 	.word	0x08012f78
 8003a90:	20000b58 	.word	0x20000b58

08003a94 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d84b      	bhi.n	8003b3c <fsm_enter_state+0xa8>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <fsm_enter_state+0x18>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ac5 	.word	0x08003ac5
 8003ab0:	08003af9 	.word	0x08003af9
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	08003b3d 	.word	0x08003b3d
 8003abc:	08003acb 	.word	0x08003acb
 8003ac0:	08003b3b 	.word	0x08003b3b
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003ac4:	f000 f978 	bl	8003db8 <enter_menu_state>
				break;
 8003ac8:	e038      	b.n	8003b3c <fsm_enter_state+0xa8>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003aca:	f000 f9a1 	bl	8003e10 <enter_setup_state>
				break;
 8003ace:	e035      	b.n	8003b3c <fsm_enter_state+0xa8>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	481b      	ldr	r0, [pc, #108]	; (8003b44 <fsm_enter_state+0xb0>)
 8003ad6:	f005 f85b 	bl	8008b90 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003ada:	481b      	ldr	r0, [pc, #108]	; (8003b48 <fsm_enter_state+0xb4>)
 8003adc:	f7ff fb72 	bl	80031c4 <reset_foc>
				drv_enable_gd(drv);
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <fsm_enter_state+0xb8>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	889a      	ldrh	r2, [r3, #4]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f362 030f 	bfi	r3, r2, #0, #16
 8003aee:	4608      	mov	r0, r1
 8003af0:	4619      	mov	r1, r3
 8003af2:	f7fe fcea 	bl	80024ca <drv_enable_gd>
				break;
 8003af6:	e021      	b.n	8003b3c <fsm_enter_state+0xa8>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <fsm_enter_state+0xbc>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <fsm_enter_state+0xbc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <fsm_enter_state+0xbc>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <fsm_enter_state+0xc0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	480e      	ldr	r0, [pc, #56]	; (8003b58 <fsm_enter_state+0xc4>)
 8003b1e:	f00a f8d3 	bl	800dcc8 <memset>
				drv_enable_gd(drv);
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <fsm_enter_state+0xb8>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4611      	mov	r1, r2
 8003b28:	889a      	ldrh	r2, [r3, #4]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f362 030f 	bfi	r3, r2, #0, #16
 8003b30:	4608      	mov	r0, r1
 8003b32:	4619      	mov	r1, r3
 8003b34:	f7fe fcc9 	bl	80024ca <drv_enable_gd>
				break;
 8003b38:	e000      	b.n	8003b3c <fsm_enter_state+0xa8>
				break;
 8003b3a:	bf00      	nop

		}
 }
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	48000800 	.word	0x48000800
 8003b48:	20000b6c 	.word	0x20000b6c
 8003b4c:	20001154 	.word	0x20001154
 8003b50:	2000115c 	.word	0x2000115c
 8003b54:	20000e74 	.word	0x20000e74
 8003b58:	20000f50 	.word	0x20000f50

08003b5c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d844      	bhi.n	8003bf6 <fsm_exit_state+0x9a>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <fsm_exit_state+0x18>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b8d 	.word	0x08003b8d
 8003b78:	08003bd9 	.word	0x08003bd9
 8003b7c:	08003ba5 	.word	0x08003ba5
 8003b80:	08003bf7 	.word	0x08003bf7
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9d 	.word	0x08003b9d
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	70da      	strb	r2, [r3, #3]
				break;
 8003b92:	e030      	b.n	8003bf6 <fsm_exit_state+0x9a>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	70da      	strb	r2, [r3, #3]
				break;
 8003b9a:	e02c      	b.n	8003bf6 <fsm_exit_state+0x9a>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	70da      	strb	r2, [r3, #3]
				break;
 8003ba2:	e028      	b.n	8003bf6 <fsm_exit_state+0x9a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <fsm_exit_state+0xa4>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	889a      	ldrh	r2, [r3, #4]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f362 030f 	bfi	r3, r2, #0, #16
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f7fe fc9f 	bl	80024fe <drv_disable_gd>
					reset_foc(&controller);
 8003bc0:	4810      	ldr	r0, [pc, #64]	; (8003c04 <fsm_exit_state+0xa8>)
 8003bc2:	f7ff faff 	bl	80031c4 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2120      	movs	r1, #32
 8003bca:	480f      	ldr	r0, [pc, #60]	; (8003c08 <fsm_exit_state+0xac>)
 8003bcc:	f004 ffe0 	bl	8008b90 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003bd0:	480c      	ldr	r0, [pc, #48]	; (8003c04 <fsm_exit_state+0xa8>)
 8003bd2:	f7ff fe4d 	bl	8003870 <zero_commands>
				break;
 8003bd6:	e00e      	b.n	8003bf6 <fsm_exit_state+0x9a>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <fsm_exit_state+0xa4>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	889a      	ldrh	r2, [r3, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	f362 030f 	bfi	r3, r2, #0, #16
 8003be6:	4608      	mov	r0, r1
 8003be8:	4619      	mov	r1, r3
 8003bea:	f7fe fc88 	bl	80024fe <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	70da      	strb	r2, [r3, #3]
				break;
 8003bf4:	bf00      	nop
		}

 }
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20001154 	.word	0x20001154
 8003c04:	20000b6c 	.word	0x20000b6c
 8003c08:	48000800 	.word	0x48000800

08003c0c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	2b1b      	cmp	r3, #27
 8003c1c:	d106      	bne.n	8003c2c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	70da      	strb	r2, [r3, #3]
		return;
 8003c2a:	e0b7      	b.n	8003d9c <update_fsm+0x190>
	}
	switch(fsmstate->state){
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	f200 80b3 	bhi.w	8003d9c <update_fsm+0x190>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <update_fsm+0x30>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c55 	.word	0x08003c55
 8003c40:	08003d9d 	.word	0x08003d9d
 8003c44:	08003d9d 	.word	0x08003d9d
 8003c48:	08003d9d 	.word	0x08003d9d
 8003c4c:	08003d61 	.word	0x08003d61
 8003c50:	08003d9d 	.word	0x08003d9d
		case MENU_MODE:
			switch (fsm_input){
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	3b63      	subs	r3, #99	; 0x63
 8003c58:	2b17      	cmp	r3, #23
 8003c5a:	f200 809e 	bhi.w	8003d9a <update_fsm+0x18e>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <update_fsm+0x58>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003cc5 	.word	0x08003cc5
 8003c68:	08003d9b 	.word	0x08003d9b
 8003c6c:	08003ce1 	.word	0x08003ce1
 8003c70:	08003d9b 	.word	0x08003d9b
 8003c74:	08003d9b 	.word	0x08003d9b
 8003c78:	08003d9b 	.word	0x08003d9b
 8003c7c:	08003d9b 	.word	0x08003d9b
 8003c80:	08003d9b 	.word	0x08003d9b
 8003c84:	08003d9b 	.word	0x08003d9b
 8003c88:	08003d9b 	.word	0x08003d9b
 8003c8c:	08003cd3 	.word	0x08003cd3
 8003c90:	08003d9b 	.word	0x08003d9b
 8003c94:	08003d9b 	.word	0x08003d9b
 8003c98:	08003d9b 	.word	0x08003d9b
 8003c9c:	08003d9b 	.word	0x08003d9b
 8003ca0:	08003d9b 	.word	0x08003d9b
 8003ca4:	08003cef 	.word	0x08003cef
 8003ca8:	08003d9b 	.word	0x08003d9b
 8003cac:	08003d9b 	.word	0x08003d9b
 8003cb0:	08003d9b 	.word	0x08003d9b
 8003cb4:	08003d9b 	.word	0x08003d9b
 8003cb8:	08003d9b 	.word	0x08003d9b
 8003cbc:	08003d9b 	.word	0x08003d9b
 8003cc0:	08003cfd 	.word	0x08003cfd
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	70da      	strb	r2, [r3, #3]
					break;
 8003cd0:	e045      	b.n	8003d5e <update_fsm+0x152>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	70da      	strb	r2, [r3, #3]
					break;
 8003cde:	e03e      	b.n	8003d5e <update_fsm+0x152>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2205      	movs	r2, #5
 8003ce4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	70da      	strb	r2, [r3, #3]
					break;
 8003cec:	e037      	b.n	8003d5e <update_fsm+0x152>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	70da      	strb	r2, [r3, #3]
					break;
 8003cfa:	e030      	b.n	8003d5e <update_fsm+0x152>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003cfc:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <update_fsm+0x198>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003d04:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003da8 <update_fsm+0x19c>
 8003d08:	4826      	ldr	r0, [pc, #152]	; (8003da4 <update_fsm+0x198>)
 8003d0a:	f001 f9f3 	bl	80050f4 <ps_sample>
					int zero_count = comm_encoder.count;
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <update_fsm+0x198>)
 8003d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d12:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003d14:	4a25      	ldr	r2, [pc, #148]	; (8003dac <update_fsm+0x1a0>)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <update_fsm+0x1a4>)
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	9200      	str	r2, [sp, #0]
 8003d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d22:	f001 fbbf 	bl	80054a4 <preference_writer_ready>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f083 0301 	eor.w	r3, r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <update_fsm+0x12c>
 8003d32:	481f      	ldr	r0, [pc, #124]	; (8003db0 <update_fsm+0x1a4>)
 8003d34:	f001 fba7 	bl	8005486 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003d38:	481d      	ldr	r0, [pc, #116]	; (8003db0 <update_fsm+0x1a4>)
 8003d3a:	f001 fbc1 	bl	80054c0 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003d3e:	481c      	ldr	r0, [pc, #112]	; (8003db0 <update_fsm+0x1a4>)
 8003d40:	f001 fc3c 	bl	80055bc <preference_writer_close>
					preference_writer_load(prefs);
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <update_fsm+0x1a4>)
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	9200      	str	r2, [sp, #0]
 8003d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d4c:	f001 fbf4 	bl	8005538 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <update_fsm+0x1a0>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4817      	ldr	r0, [pc, #92]	; (8003db4 <update_fsm+0x1a8>)
 8003d58:	f00a fe38 	bl	800e9cc <iprintf>
					break;
 8003d5c:	bf00      	nop
				}
			break;
 8003d5e:	e01c      	b.n	8003d9a <update_fsm+0x18e>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	2b0d      	cmp	r3, #13
 8003d64:	d103      	bne.n	8003d6e <update_fsm+0x162>
				process_user_input(fsmstate);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9c8 	bl	80040fc <process_user_input>
				break;
 8003d6c:	e016      	b.n	8003d9c <update_fsm+0x190>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7b1b      	ldrb	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <update_fsm+0x172>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	735a      	strb	r2, [r3, #13]
 8003d7c:	e006      	b.n	8003d8c <update_fsm+0x180>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7b1b      	ldrb	r3, [r3, #12]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7b1b      	ldrb	r3, [r3, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003d98:	e000      	b.n	8003d9c <update_fsm+0x190>
			break;
 8003d9a:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000e74 	.word	0x20000e74
 8003da8:	37d1b717 	.word	0x37d1b717
 8003dac:	20000758 	.word	0x20000758
 8003db0:	20000b58 	.word	0x20000b58
 8003db4:	08012f8c 	.word	0x08012f8c

08003db8 <enter_menu_state>:


 void enter_menu_state(void){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003dbc:	480c      	ldr	r0, [pc, #48]	; (8003df0 <enter_menu_state+0x38>)
 8003dbe:	f00a fe05 	bl	800e9cc <iprintf>
	    printf(" Commands:\n\r");
 8003dc2:	480c      	ldr	r0, [pc, #48]	; (8003df4 <enter_menu_state+0x3c>)
 8003dc4:	f00a fe02 	bl	800e9cc <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003dc8:	480b      	ldr	r0, [pc, #44]	; (8003df8 <enter_menu_state+0x40>)
 8003dca:	f00a fdff 	bl	800e9cc <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003dce:	480b      	ldr	r0, [pc, #44]	; (8003dfc <enter_menu_state+0x44>)
 8003dd0:	f00a fdfc 	bl	800e9cc <iprintf>
	    printf(" s - Setup\n\r");
 8003dd4:	480a      	ldr	r0, [pc, #40]	; (8003e00 <enter_menu_state+0x48>)
 8003dd6:	f00a fdf9 	bl	800e9cc <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003dda:	480a      	ldr	r0, [pc, #40]	; (8003e04 <enter_menu_state+0x4c>)
 8003ddc:	f00a fdf6 	bl	800e9cc <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003de0:	4809      	ldr	r0, [pc, #36]	; (8003e08 <enter_menu_state+0x50>)
 8003de2:	f00a fdf3 	bl	800e9cc <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003de6:	4809      	ldr	r0, [pc, #36]	; (8003e0c <enter_menu_state+0x54>)
 8003de8:	f00a fdf0 	bl	800e9cc <iprintf>

	    //gpio.led->write(0);
 }
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08012fb4 	.word	0x08012fb4
 8003df4:	08012fbc 	.word	0x08012fbc
 8003df8:	08012fcc 	.word	0x08012fcc
 8003dfc:	08012fe0 	.word	0x08012fe0
 8003e00:	08012ffc 	.word	0x08012ffc
 8003e04:	0801300c 	.word	0x0801300c
 8003e08:	08013024 	.word	0x08013024
 8003e0c:	08013040 	.word	0x08013040

08003e10 <enter_setup_state>:

 void enter_setup_state(void){
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003e16:	487d      	ldr	r0, [pc, #500]	; (800400c <enter_setup_state+0x1fc>)
 8003e18:	f00a fdd8 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003e1c:	4b7c      	ldr	r3, [pc, #496]	; (8004010 <enter_setup_state+0x200>)
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4b7c      	ldr	r3, [pc, #496]	; (8004014 <enter_setup_state+0x204>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <enter_setup_state+0x208>)
 8003e26:	4a7d      	ldr	r2, [pc, #500]	; (800401c <enter_setup_state+0x20c>)
 8003e28:	497d      	ldr	r1, [pc, #500]	; (8004020 <enter_setup_state+0x210>)
 8003e2a:	487e      	ldr	r0, [pc, #504]	; (8004024 <enter_setup_state+0x214>)
 8003e2c:	f00a fdce 	bl	800e9cc <iprintf>
	    printf("\r\n Motor:\r\n");
 8003e30:	487d      	ldr	r0, [pc, #500]	; (8004028 <enter_setup_state+0x218>)
 8003e32:	f00a fe51 	bl	800ead8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <enter_setup_state+0x21c>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fbac 	bl	8000598 <__aeabi_f2d>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e48:	4b79      	ldr	r3, [pc, #484]	; (8004030 <enter_setup_state+0x220>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4b79      	ldr	r3, [pc, #484]	; (8004034 <enter_setup_state+0x224>)
 8003e4e:	4a7a      	ldr	r2, [pc, #488]	; (8004038 <enter_setup_state+0x228>)
 8003e50:	497a      	ldr	r1, [pc, #488]	; (800403c <enter_setup_state+0x22c>)
 8003e52:	487b      	ldr	r0, [pc, #492]	; (8004040 <enter_setup_state+0x230>)
 8003e54:	f00a fdba 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003e58:	4b74      	ldr	r3, [pc, #464]	; (800402c <enter_setup_state+0x21c>)
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb9b 	bl	8000598 <__aeabi_f2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e6a:	4b71      	ldr	r3, [pc, #452]	; (8004030 <enter_setup_state+0x220>)
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	4b71      	ldr	r3, [pc, #452]	; (8004034 <enter_setup_state+0x224>)
 8003e70:	4a74      	ldr	r2, [pc, #464]	; (8004044 <enter_setup_state+0x234>)
 8003e72:	4975      	ldr	r1, [pc, #468]	; (8004048 <enter_setup_state+0x238>)
 8003e74:	4875      	ldr	r0, [pc, #468]	; (800404c <enter_setup_state+0x23c>)
 8003e76:	f00a fda9 	bl	800e9cc <iprintf>
	    printf("\r\n Control:\r\n");
 8003e7a:	4875      	ldr	r0, [pc, #468]	; (8004050 <enter_setup_state+0x240>)
 8003e7c:	f00a fe2c 	bl	800ead8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003e80:	4b6a      	ldr	r3, [pc, #424]	; (800402c <enter_setup_state+0x21c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fb87 	bl	8000598 <__aeabi_f2d>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e92:	4b70      	ldr	r3, [pc, #448]	; (8004054 <enter_setup_state+0x244>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4b70      	ldr	r3, [pc, #448]	; (8004058 <enter_setup_state+0x248>)
 8003e98:	4a70      	ldr	r2, [pc, #448]	; (800405c <enter_setup_state+0x24c>)
 8003e9a:	4971      	ldr	r1, [pc, #452]	; (8004060 <enter_setup_state+0x250>)
 8003e9c:	4871      	ldr	r0, [pc, #452]	; (8004064 <enter_setup_state+0x254>)
 8003e9e:	f00a fd95 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003ea2:	4b62      	ldr	r3, [pc, #392]	; (800402c <enter_setup_state+0x21c>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fb76 	bl	8000598 <__aeabi_f2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eb4:	4b6c      	ldr	r3, [pc, #432]	; (8004068 <enter_setup_state+0x258>)
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4b6c      	ldr	r3, [pc, #432]	; (800406c <enter_setup_state+0x25c>)
 8003eba:	4a6d      	ldr	r2, [pc, #436]	; (8004070 <enter_setup_state+0x260>)
 8003ebc:	496d      	ldr	r1, [pc, #436]	; (8004074 <enter_setup_state+0x264>)
 8003ebe:	4869      	ldr	r0, [pc, #420]	; (8004064 <enter_setup_state+0x254>)
 8003ec0:	f00a fd84 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <enter_setup_state+0x21c>)
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fb65 	bl	8000598 <__aeabi_f2d>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <enter_setup_state+0x220>)
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <enter_setup_state+0x220>)
 8003edc:	4a66      	ldr	r2, [pc, #408]	; (8004078 <enter_setup_state+0x268>)
 8003ede:	4967      	ldr	r1, [pc, #412]	; (800407c <enter_setup_state+0x26c>)
 8003ee0:	4860      	ldr	r0, [pc, #384]	; (8004064 <enter_setup_state+0x254>)
 8003ee2:	f00a fd73 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003ee6:	4b51      	ldr	r3, [pc, #324]	; (800402c <enter_setup_state+0x21c>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc fb54 	bl	8000598 <__aeabi_f2d>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	; (8004030 <enter_setup_state+0x220>)
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <enter_setup_state+0x220>)
 8003efe:	4a60      	ldr	r2, [pc, #384]	; (8004080 <enter_setup_state+0x270>)
 8003f00:	4960      	ldr	r1, [pc, #384]	; (8004084 <enter_setup_state+0x274>)
 8003f02:	4858      	ldr	r0, [pc, #352]	; (8004064 <enter_setup_state+0x254>)
 8003f04:	f00a fd62 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003f08:	4b48      	ldr	r3, [pc, #288]	; (800402c <enter_setup_state+0x21c>)
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fb43 	bl	8000598 <__aeabi_f2d>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <enter_setup_state+0x278>)
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	4b53      	ldr	r3, [pc, #332]	; (800406c <enter_setup_state+0x25c>)
 8003f20:	4a5a      	ldr	r2, [pc, #360]	; (800408c <enter_setup_state+0x27c>)
 8003f22:	495b      	ldr	r1, [pc, #364]	; (8004090 <enter_setup_state+0x280>)
 8003f24:	484f      	ldr	r0, [pc, #316]	; (8004064 <enter_setup_state+0x254>)
 8003f26:	f00a fd51 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003f2a:	4b40      	ldr	r3, [pc, #256]	; (800402c <enter_setup_state+0x21c>)
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fb32 	bl	8000598 <__aeabi_f2d>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f3c:	4b55      	ldr	r3, [pc, #340]	; (8004094 <enter_setup_state+0x284>)
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	4b4a      	ldr	r3, [pc, #296]	; (800406c <enter_setup_state+0x25c>)
 8003f42:	4a55      	ldr	r2, [pc, #340]	; (8004098 <enter_setup_state+0x288>)
 8003f44:	4955      	ldr	r1, [pc, #340]	; (800409c <enter_setup_state+0x28c>)
 8003f46:	4847      	ldr	r0, [pc, #284]	; (8004064 <enter_setup_state+0x254>)
 8003f48:	f00a fd40 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003f4c:	4b37      	ldr	r3, [pc, #220]	; (800402c <enter_setup_state+0x21c>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fb21 	bl	8000598 <__aeabi_f2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f5e:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <enter_setup_state+0x290>)
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4b42      	ldr	r3, [pc, #264]	; (800406c <enter_setup_state+0x25c>)
 8003f64:	4a4f      	ldr	r2, [pc, #316]	; (80040a4 <enter_setup_state+0x294>)
 8003f66:	4950      	ldr	r1, [pc, #320]	; (80040a8 <enter_setup_state+0x298>)
 8003f68:	483e      	ldr	r0, [pc, #248]	; (8004064 <enter_setup_state+0x254>)
 8003f6a:	f00a fd2f 	bl	800e9cc <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	; (800402c <enter_setup_state+0x21c>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fb10 	bl	8000598 <__aeabi_f2d>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f80:	4b4a      	ldr	r3, [pc, #296]	; (80040ac <enter_setup_state+0x29c>)
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4b39      	ldr	r3, [pc, #228]	; (800406c <enter_setup_state+0x25c>)
 8003f86:	4a4a      	ldr	r2, [pc, #296]	; (80040b0 <enter_setup_state+0x2a0>)
 8003f88:	494a      	ldr	r1, [pc, #296]	; (80040b4 <enter_setup_state+0x2a4>)
 8003f8a:	4836      	ldr	r0, [pc, #216]	; (8004064 <enter_setup_state+0x254>)
 8003f8c:	f00a fd1e 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <enter_setup_state+0x21c>)
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc faff 	bl	8000598 <__aeabi_f2d>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fa2:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <enter_setup_state+0x2a8>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <enter_setup_state+0x25c>)
 8003fa8:	4a44      	ldr	r2, [pc, #272]	; (80040bc <enter_setup_state+0x2ac>)
 8003faa:	4945      	ldr	r1, [pc, #276]	; (80040c0 <enter_setup_state+0x2b0>)
 8003fac:	482d      	ldr	r0, [pc, #180]	; (8004064 <enter_setup_state+0x254>)
 8003fae:	f00a fd0d 	bl	800e9cc <iprintf>
	    printf("\r\n CAN:\r\n");
 8003fb2:	4844      	ldr	r0, [pc, #272]	; (80040c4 <enter_setup_state+0x2b4>)
 8003fb4:	f00a fd90 	bl	800ead8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <enter_setup_state+0x2b8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	4b43      	ldr	r3, [pc, #268]	; (80040cc <enter_setup_state+0x2bc>)
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <enter_setup_state+0x224>)
 8003fc4:	4a42      	ldr	r2, [pc, #264]	; (80040d0 <enter_setup_state+0x2c0>)
 8003fc6:	4943      	ldr	r1, [pc, #268]	; (80040d4 <enter_setup_state+0x2c4>)
 8003fc8:	4843      	ldr	r0, [pc, #268]	; (80040d8 <enter_setup_state+0x2c8>)
 8003fca:	f00a fcff 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8003fce:	4b3e      	ldr	r3, [pc, #248]	; (80040c8 <enter_setup_state+0x2b8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <enter_setup_state+0x2bc>)
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <enter_setup_state+0x224>)
 8003fda:	4a40      	ldr	r2, [pc, #256]	; (80040dc <enter_setup_state+0x2cc>)
 8003fdc:	4940      	ldr	r1, [pc, #256]	; (80040e0 <enter_setup_state+0x2d0>)
 8003fde:	483e      	ldr	r0, [pc, #248]	; (80040d8 <enter_setup_state+0x2c8>)
 8003fe0:	f00a fcf4 	bl	800e9cc <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003fe4:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <enter_setup_state+0x2b8>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <enter_setup_state+0x2d4>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <enter_setup_state+0x224>)
 8003ff0:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <enter_setup_state+0x2d8>)
 8003ff2:	493e      	ldr	r1, [pc, #248]	; (80040ec <enter_setup_state+0x2dc>)
 8003ff4:	483e      	ldr	r0, [pc, #248]	; (80040f0 <enter_setup_state+0x2e0>)
 8003ff6:	f00a fce9 	bl	800e9cc <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003ffa:	483e      	ldr	r0, [pc, #248]	; (80040f4 <enter_setup_state+0x2e4>)
 8003ffc:	f00a fce6 	bl	800e9cc <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8004000:	483d      	ldr	r0, [pc, #244]	; (80040f8 <enter_setup_state+0x2e8>)
 8004002:	f00a fce3 	bl	800e9cc <iprintf>
 }
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08013058 	.word	0x08013058
 8004010:	080130ac 	.word	0x080130ac
 8004014:	080130bc 	.word	0x080130bc
 8004018:	08013074 	.word	0x08013074
 800401c:	08013078 	.word	0x08013078
 8004020:	08013084 	.word	0x08013084
 8004024:	0801308c 	.word	0x0801308c
 8004028:	080130c0 	.word	0x080130c0
 800402c:	20000658 	.word	0x20000658
 8004030:	08013100 	.word	0x08013100
 8004034:	080130cc 	.word	0x080130cc
 8004038:	080130d0 	.word	0x080130d0
 800403c:	080130dc 	.word	0x080130dc
 8004040:	080130e0 	.word	0x080130e0
 8004044:	08013104 	.word	0x08013104
 8004048:	0801311c 	.word	0x0801311c
 800404c:	08013120 	.word	0x08013120
 8004050:	08013140 	.word	0x08013140
 8004054:	08013190 	.word	0x08013190
 8004058:	08013150 	.word	0x08013150
 800405c:	08013154 	.word	0x08013154
 8004060:	0801316c 	.word	0x0801316c
 8004064:	08013170 	.word	0x08013170
 8004068:	080131b4 	.word	0x080131b4
 800406c:	08013198 	.word	0x08013198
 8004070:	0801319c 	.word	0x0801319c
 8004074:	080131b0 	.word	0x080131b0
 8004078:	080131bc 	.word	0x080131bc
 800407c:	080131d8 	.word	0x080131d8
 8004080:	080131dc 	.word	0x080131dc
 8004084:	080131fc 	.word	0x080131fc
 8004088:	08013220 	.word	0x08013220
 800408c:	08013200 	.word	0x08013200
 8004090:	0801321c 	.word	0x0801321c
 8004094:	0801324c 	.word	0x0801324c
 8004098:	08013228 	.word	0x08013228
 800409c:	08013248 	.word	0x08013248
 80040a0:	0801326c 	.word	0x0801326c
 80040a4:	08013250 	.word	0x08013250
 80040a8:	08013268 	.word	0x08013268
 80040ac:	08013290 	.word	0x08013290
 80040b0:	08013274 	.word	0x08013274
 80040b4:	0801328c 	.word	0x0801328c
 80040b8:	080132b4 	.word	0x080132b4
 80040bc:	08013298 	.word	0x08013298
 80040c0:	080132b0 	.word	0x080132b0
 80040c4:	080132bc 	.word	0x080132bc
 80040c8:	20000758 	.word	0x20000758
 80040cc:	080132f4 	.word	0x080132f4
 80040d0:	080132c8 	.word	0x080132c8
 80040d4:	080132d0 	.word	0x080132d0
 80040d8:	080132d4 	.word	0x080132d4
 80040dc:	080132f8 	.word	0x080132f8
 80040e0:	08013304 	.word	0x08013304
 80040e4:	08013348 	.word	0x08013348
 80040e8:	08013308 	.word	0x08013308
 80040ec:	08013328 	.word	0x08013328
 80040f0:	0801332c 	.word	0x0801332c
 80040f4:	08013350 	.word	0x08013350
 80040f8:	0801339c 	.word	0x0801339c

080040fc <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af02      	add	r7, sp, #8
 8004102:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7b5b      	ldrb	r3, [r3, #13]
 8004108:	3b61      	subs	r3, #97	; 0x61
 800410a:	2b17      	cmp	r3, #23
 800410c:	f200 8268 	bhi.w	80045e0 <process_user_input+0x4e4>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <process_user_input+0x1c>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004377 	.word	0x08004377
 800411c:	08004179 	.word	0x08004179
 8004120:	08004323 	.word	0x08004323
 8004124:	080044f5 	.word	0x080044f5
 8004128:	080045e1 	.word	0x080045e1
 800412c:	0800425d 	.word	0x0800425d
 8004130:	080043cb 	.word	0x080043cb
 8004134:	080042cf 	.word	0x080042cf
 8004138:	080041cd 	.word	0x080041cd
 800413c:	080045e1 	.word	0x080045e1
 8004140:	0800440f 	.word	0x0800440f
 8004144:	08004209 	.word	0x08004209
 8004148:	080041eb 	.word	0x080041eb
 800414c:	080045e1 	.word	0x080045e1
 8004150:	080045e1 	.word	0x080045e1
 8004154:	08004539 	.word	0x08004539
 8004158:	080045e1 	.word	0x080045e1
 800415c:	080045e1 	.word	0x080045e1
 8004160:	080045e1 	.word	0x080045e1
 8004164:	080042b1 	.word	0x080042b1
 8004168:	080045e1 	.word	0x080045e1
 800416c:	0800458d 	.word	0x0800458d
 8004170:	080045e1 	.word	0x080045e1
 8004174:	08004453 	.word	0x08004453
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f009 fd63 	bl	800dc48 <atof>
 8004182:	ec53 2b10 	vmov	r2, r3, d0
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	f7fc fd55 	bl	8000c38 <__aeabi_d2f>
 800418e:	4603      	mov	r3, r0
 8004190:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8004498 <process_user_input+0x39c>
 8004194:	ee00 3a10 	vmov	s0, r3
 8004198:	f00e fb05 	bl	80127a6 <fminf>
 800419c:	eef0 7a40 	vmov.f32	s15, s0
 80041a0:	eddf 0abe 	vldr	s1, [pc, #760]	; 800449c <process_user_input+0x3a0>
 80041a4:	eeb0 0a67 	vmov.f32	s0, s15
 80041a8:	f00e fae2 	bl	8012770 <fmaxf>
 80041ac:	eef0 7a40 	vmov.f32	s15, s0
 80041b0:	4bbb      	ldr	r3, [pc, #748]	; (80044a0 <process_user_input+0x3a4>)
 80041b2:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 80041b6:	4bba      	ldr	r3, [pc, #744]	; (80044a0 <process_user_input+0x3a4>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f9ec 	bl	8000598 <__aeabi_f2d>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	48b7      	ldr	r0, [pc, #732]	; (80044a4 <process_user_input+0x3a8>)
 80041c6:	f00a fc01 	bl	800e9cc <iprintf>
			 break;
 80041ca:	e210      	b.n	80045ee <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f009 fd3c 	bl	800dc4e <atoi>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4ab3      	ldr	r2, [pc, #716]	; (80044a8 <process_user_input+0x3ac>)
 80041da:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80041dc:	4bb2      	ldr	r3, [pc, #712]	; (80044a8 <process_user_input+0x3ac>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4619      	mov	r1, r3
 80041e2:	48b2      	ldr	r0, [pc, #712]	; (80044ac <process_user_input+0x3b0>)
 80041e4:	f00a fbf2 	bl	800e9cc <iprintf>
			 break;
 80041e8:	e201      	b.n	80045ee <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f009 fd2d 	bl	800dc4e <atoi>
 80041f4:	4603      	mov	r3, r0
 80041f6:	4aac      	ldr	r2, [pc, #688]	; (80044a8 <process_user_input+0x3ac>)
 80041f8:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 80041fa:	4bab      	ldr	r3, [pc, #684]	; (80044a8 <process_user_input+0x3ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4619      	mov	r1, r3
 8004200:	48ab      	ldr	r0, [pc, #684]	; (80044b0 <process_user_input+0x3b4>)
 8004202:	f00a fbe3 	bl	800e9cc <iprintf>
			 break;
 8004206:	e1f2      	b.n	80045ee <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f009 fd1b 	bl	800dc48 <atof>
 8004212:	ec53 2b10 	vmov	r2, r3, d0
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	f7fc fd0d 	bl	8000c38 <__aeabi_d2f>
 800421e:	4603      	mov	r3, r0
 8004220:	eddf 0aa4 	vldr	s1, [pc, #656]	; 80044b4 <process_user_input+0x3b8>
 8004224:	ee00 3a10 	vmov	s0, r3
 8004228:	f00e fabd 	bl	80127a6 <fminf>
 800422c:	eef0 7a40 	vmov.f32	s15, s0
 8004230:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80044f0 <process_user_input+0x3f4>
 8004234:	eeb0 0a67 	vmov.f32	s0, s15
 8004238:	f00e fa9a 	bl	8012770 <fmaxf>
 800423c:	eef0 7a40 	vmov.f32	s15, s0
 8004240:	4b97      	ldr	r3, [pc, #604]	; (80044a0 <process_user_input+0x3a4>)
 8004242:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8004246:	4b96      	ldr	r3, [pc, #600]	; (80044a0 <process_user_input+0x3a4>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc f9a4 	bl	8000598 <__aeabi_f2d>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4898      	ldr	r0, [pc, #608]	; (80044b8 <process_user_input+0x3bc>)
 8004256:	f00a fbb9 	bl	800e9cc <iprintf>
			 break;
 800425a:	e1c8      	b.n	80045ee <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f009 fcf1 	bl	800dc48 <atof>
 8004266:	ec53 2b10 	vmov	r2, r3, d0
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f7fc fce3 	bl	8000c38 <__aeabi_d2f>
 8004272:	4603      	mov	r3, r0
 8004274:	eddf 0a91 	vldr	s1, [pc, #580]	; 80044bc <process_user_input+0x3c0>
 8004278:	ee00 3a10 	vmov	s0, r3
 800427c:	f00e fa93 	bl	80127a6 <fminf>
 8004280:	eef0 7a40 	vmov.f32	s15, s0
 8004284:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80044f0 <process_user_input+0x3f4>
 8004288:	eeb0 0a67 	vmov.f32	s0, s15
 800428c:	f00e fa70 	bl	8012770 <fmaxf>
 8004290:	eef0 7a40 	vmov.f32	s15, s0
 8004294:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <process_user_input+0x3a4>)
 8004296:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800429a:	4b81      	ldr	r3, [pc, #516]	; (80044a0 <process_user_input+0x3a4>)
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc f97a 	bl	8000598 <__aeabi_f2d>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4885      	ldr	r0, [pc, #532]	; (80044c0 <process_user_input+0x3c4>)
 80042aa:	f00a fb8f 	bl	800e9cc <iprintf>
			 break;
 80042ae:	e19e      	b.n	80045ee <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f009 fcca 	bl	800dc4e <atoi>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a7a      	ldr	r2, [pc, #488]	; (80044a8 <process_user_input+0x3ac>)
 80042be:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80042c0:	4b79      	ldr	r3, [pc, #484]	; (80044a8 <process_user_input+0x3ac>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4619      	mov	r1, r3
 80042c6:	487f      	ldr	r0, [pc, #508]	; (80044c4 <process_user_input+0x3c8>)
 80042c8:	f00a fb80 	bl	800e9cc <iprintf>
			 break;
 80042cc:	e18f      	b.n	80045ee <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f009 fcb8 	bl	800dc48 <atof>
 80042d8:	ec53 2b10 	vmov	r2, r3, d0
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	f7fc fcaa 	bl	8000c38 <__aeabi_d2f>
 80042e4:	4603      	mov	r3, r0
 80042e6:	eddf 0a78 	vldr	s1, [pc, #480]	; 80044c8 <process_user_input+0x3cc>
 80042ea:	ee00 3a10 	vmov	s0, r3
 80042ee:	f00e fa5a 	bl	80127a6 <fminf>
 80042f2:	eef0 7a40 	vmov.f32	s15, s0
 80042f6:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80044f0 <process_user_input+0x3f4>
 80042fa:	eeb0 0a67 	vmov.f32	s0, s15
 80042fe:	f00e fa37 	bl	8012770 <fmaxf>
 8004302:	eef0 7a40 	vmov.f32	s15, s0
 8004306:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <process_user_input+0x3a4>)
 8004308:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 800430c:	4b64      	ldr	r3, [pc, #400]	; (80044a0 <process_user_input+0x3a4>)
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc f941 	bl	8000598 <__aeabi_f2d>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	486c      	ldr	r0, [pc, #432]	; (80044cc <process_user_input+0x3d0>)
 800431c:	f00a fb56 	bl	800e9cc <iprintf>
			 break;
 8004320:	e165      	b.n	80045ee <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	4618      	mov	r0, r3
 8004328:	f009 fc8e 	bl	800dc48 <atof>
 800432c:	ec53 2b10 	vmov	r2, r3, d0
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	f7fc fc80 	bl	8000c38 <__aeabi_d2f>
 8004338:	4603      	mov	r3, r0
 800433a:	eddf 0a65 	vldr	s1, [pc, #404]	; 80044d0 <process_user_input+0x3d4>
 800433e:	ee00 3a10 	vmov	s0, r3
 8004342:	f00e fa30 	bl	80127a6 <fminf>
 8004346:	eef0 7a40 	vmov.f32	s15, s0
 800434a:	eddf 0a69 	vldr	s1, [pc, #420]	; 80044f0 <process_user_input+0x3f4>
 800434e:	eeb0 0a67 	vmov.f32	s0, s15
 8004352:	f00e fa0d 	bl	8012770 <fmaxf>
 8004356:	eef0 7a40 	vmov.f32	s15, s0
 800435a:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <process_user_input+0x3a4>)
 800435c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8004360:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <process_user_input+0x3a4>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc f917 	bl	8000598 <__aeabi_f2d>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4859      	ldr	r0, [pc, #356]	; (80044d4 <process_user_input+0x3d8>)
 8004370:	f00a fb2c 	bl	800e9cc <iprintf>
			 break;
 8004374:	e13b      	b.n	80045ee <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f009 fc64 	bl	800dc48 <atof>
 8004380:	ec53 2b10 	vmov	r2, r3, d0
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	f7fc fc56 	bl	8000c38 <__aeabi_d2f>
 800438c:	4603      	mov	r3, r0
 800438e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004392:	ee00 3a10 	vmov	s0, r3
 8004396:	f00e fa06 	bl	80127a6 <fminf>
 800439a:	eef0 7a40 	vmov.f32	s15, s0
 800439e:	eddf 0a54 	vldr	s1, [pc, #336]	; 80044f0 <process_user_input+0x3f4>
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	f00e f9e3 	bl	8012770 <fmaxf>
 80043aa:	eef0 7a40 	vmov.f32	s15, s0
 80043ae:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <process_user_input+0x3a4>)
 80043b0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 80043b4:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <process_user_input+0x3a4>)
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fc f8ed 	bl	8000598 <__aeabi_f2d>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4845      	ldr	r0, [pc, #276]	; (80044d8 <process_user_input+0x3dc>)
 80043c4:	f00a fb02 	bl	800e9cc <iprintf>
			 break;
 80043c8:	e111      	b.n	80045ee <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f009 fc3a 	bl	800dc48 <atof>
 80043d4:	ec53 2b10 	vmov	r2, r3, d0
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	f7fc fc2c 	bl	8000c38 <__aeabi_d2f>
 80043e0:	4603      	mov	r3, r0
 80043e2:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80044dc <process_user_input+0x3e0>
 80043e6:	ee00 3a10 	vmov	s0, r3
 80043ea:	f00e f9c1 	bl	8012770 <fmaxf>
 80043ee:	eef0 7a40 	vmov.f32	s15, s0
 80043f2:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <process_user_input+0x3a4>)
 80043f4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <process_user_input+0x3a4>)
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc f8cb 	bl	8000598 <__aeabi_f2d>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4836      	ldr	r0, [pc, #216]	; (80044e0 <process_user_input+0x3e4>)
 8004408:	f00a fae0 	bl	800e9cc <iprintf>
			 break;
 800440c:	e0ef      	b.n	80045ee <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f009 fc18 	bl	800dc48 <atof>
 8004418:	ec53 2b10 	vmov	r2, r3, d0
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	f7fc fc0a 	bl	8000c38 <__aeabi_d2f>
 8004424:	4603      	mov	r3, r0
 8004426:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80044e4 <process_user_input+0x3e8>
 800442a:	ee00 3a10 	vmov	s0, r3
 800442e:	f00e f99f 	bl	8012770 <fmaxf>
 8004432:	eef0 7a40 	vmov.f32	s15, s0
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <process_user_input+0x3a4>)
 8004438:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <process_user_input+0x3a4>)
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc f8a9 	bl	8000598 <__aeabi_f2d>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4827      	ldr	r0, [pc, #156]	; (80044e8 <process_user_input+0x3ec>)
 800444c:	f00a fabe 	bl	800e9cc <iprintf>
			 break;
 8004450:	e0cd      	b.n	80045ee <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3304      	adds	r3, #4
 8004456:	4618      	mov	r0, r3
 8004458:	f009 fbf6 	bl	800dc48 <atof>
 800445c:	ec53 2b10 	vmov	r2, r3, d0
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f7fc fbe8 	bl	8000c38 <__aeabi_d2f>
 8004468:	4603      	mov	r3, r0
 800446a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80044f0 <process_user_input+0x3f4>
 800446e:	ee00 3a10 	vmov	s0, r3
 8004472:	f00e f97d 	bl	8012770 <fmaxf>
 8004476:	eef0 7a40 	vmov.f32	s15, s0
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <process_user_input+0x3a4>)
 800447c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <process_user_input+0x3a4>)
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc f887 	bl	8000598 <__aeabi_f2d>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4817      	ldr	r0, [pc, #92]	; (80044ec <process_user_input+0x3f0>)
 8004490:	f00a fa9c 	bl	800e9cc <iprintf>
			 break;
 8004494:	e0ab      	b.n	80045ee <process_user_input+0x4f2>
 8004496:	bf00      	nop
 8004498:	44fa0000 	.word	0x44fa0000
 800449c:	42c80000 	.word	0x42c80000
 80044a0:	20000658 	.word	0x20000658
 80044a4:	080133c8 	.word	0x080133c8
 80044a8:	20000758 	.word	0x20000758
 80044ac:	080133dc 	.word	0x080133dc
 80044b0:	080133f0 	.word	0x080133f0
 80044b4:	42700000 	.word	0x42700000
 80044b8:	08013408 	.word	0x08013408
 80044bc:	42040000 	.word	0x42040000
 80044c0:	0801341c 	.word	0x0801341c
 80044c4:	08013434 	.word	0x08013434
 80044c8:	43160000 	.word	0x43160000
 80044cc:	0801344c 	.word	0x0801344c
 80044d0:	42200000 	.word	0x42200000
 80044d4:	08013464 	.word	0x08013464
 80044d8:	0801347c 	.word	0x0801347c
 80044dc:	3a83126f 	.word	0x3a83126f
 80044e0:	08013490 	.word	0x08013490
 80044e4:	38d1b717 	.word	0x38d1b717
 80044e8:	080134a0 	.word	0x080134a0
 80044ec:	080134b0 	.word	0x080134b0
 80044f0:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f009 fba5 	bl	800dc48 <atof>
 80044fe:	ec53 2b10 	vmov	r2, r3, d0
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	f7fc fb97 	bl	8000c38 <__aeabi_d2f>
 800450a:	4603      	mov	r3, r0
 800450c:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80044f0 <process_user_input+0x3f4>
 8004510:	ee00 3a10 	vmov	s0, r3
 8004514:	f00e f92c 	bl	8012770 <fmaxf>
 8004518:	eef0 7a40 	vmov.f32	s15, s0
 800451c:	4b4b      	ldr	r3, [pc, #300]	; (800464c <process_user_input+0x550>)
 800451e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8004522:	4b4a      	ldr	r3, [pc, #296]	; (800464c <process_user_input+0x550>)
 8004524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc f836 	bl	8000598 <__aeabi_f2d>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4847      	ldr	r0, [pc, #284]	; (8004650 <process_user_input+0x554>)
 8004532:	f00a fa4b 	bl	800e9cc <iprintf>
			 break;
 8004536:	e05a      	b.n	80045ee <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f009 fb83 	bl	800dc48 <atof>
 8004542:	ec53 2b10 	vmov	r2, r3, d0
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	f7fc fb75 	bl	8000c38 <__aeabi_d2f>
 800454e:	4603      	mov	r3, r0
 8004550:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004654 <process_user_input+0x558>
 8004554:	ee00 3a10 	vmov	s0, r3
 8004558:	f00e f90a 	bl	8012770 <fmaxf>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <process_user_input+0x550>)
 8004562:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <process_user_input+0x550>)
 8004568:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800456c:	eef1 7a67 	vneg.f32	s15, s15
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <process_user_input+0x550>)
 8004572:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 8004576:	4b35      	ldr	r3, [pc, #212]	; (800464c <process_user_input+0x550>)
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc f80c 	bl	8000598 <__aeabi_f2d>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4834      	ldr	r0, [pc, #208]	; (8004658 <process_user_input+0x55c>)
 8004586:	f00a fa21 	bl	800e9cc <iprintf>
			 break;
 800458a:	e030      	b.n	80045ee <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f009 fb59 	bl	800dc48 <atof>
 8004596:	ec53 2b10 	vmov	r2, r3, d0
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	f7fc fb4b 	bl	8000c38 <__aeabi_d2f>
 80045a2:	4603      	mov	r3, r0
 80045a4:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8004654 <process_user_input+0x558>
 80045a8:	ee00 3a10 	vmov	s0, r3
 80045ac:	f00e f8e0 	bl	8012770 <fmaxf>
 80045b0:	eef0 7a40 	vmov.f32	s15, s0
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <process_user_input+0x550>)
 80045b6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <process_user_input+0x550>)
 80045bc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80045c0:	eef1 7a67 	vneg.f32	s15, s15
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <process_user_input+0x550>)
 80045c6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <process_user_input+0x550>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ffe2 	bl	8000598 <__aeabi_f2d>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4820      	ldr	r0, [pc, #128]	; (800465c <process_user_input+0x560>)
 80045da:	f00a f9f7 	bl	800e9cc <iprintf>
			 break;
 80045de:	e006      	b.n	80045ee <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	481e      	ldr	r0, [pc, #120]	; (8004660 <process_user_input+0x564>)
 80045e8:	f00a f9f0 	bl	800e9cc <iprintf>
			 break;
 80045ec:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <process_user_input+0x568>)
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	9200      	str	r2, [sp, #0]
 80045f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f6:	f000 ff55 	bl	80054a4 <preference_writer_ready>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f083 0301 	eor.w	r3, r3, #1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <process_user_input+0x510>
 8004606:	4817      	ldr	r0, [pc, #92]	; (8004664 <process_user_input+0x568>)
 8004608:	f000 ff3d 	bl	8005486 <preference_writer_open>
	 preference_writer_flush(&prefs);
 800460c:	4815      	ldr	r0, [pc, #84]	; (8004664 <process_user_input+0x568>)
 800460e:	f000 ff57 	bl	80054c0 <preference_writer_flush>
	 preference_writer_close(&prefs);
 8004612:	4814      	ldr	r0, [pc, #80]	; (8004664 <process_user_input+0x568>)
 8004614:	f000 ffd2 	bl	80055bc <preference_writer_close>
	 preference_writer_load(prefs);
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <process_user_input+0x568>)
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	9200      	str	r2, [sp, #0]
 800461e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004620:	f000 ff8a 	bl	8005538 <preference_writer_load>

	 enter_setup_state();
 8004624:	f7ff fbf4 	bl	8003e10 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	2208      	movs	r2, #8
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f009 fb43 	bl	800dcc8 <memset>
 }
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000658 	.word	0x20000658
 8004650:	080134c4 	.word	0x080134c4
 8004654:	00000000 	.word	0x00000000
 8004658:	080134d8 	.word	0x080134d8
 800465c:	080134ec 	.word	0x080134ec
 8004660:	08013500 	.word	0x08013500
 8004664:	20000b58 	.word	0x20000b58

08004668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466e:	f107 0314 	add.w	r3, r7, #20
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <MX_GPIO_Init+0x164>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	4a52      	ldr	r2, [pc, #328]	; (80047cc <MX_GPIO_Init+0x164>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800468a:	4b50      	ldr	r3, [pc, #320]	; (80047cc <MX_GPIO_Init+0x164>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004696:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <MX_GPIO_Init+0x164>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <MX_GPIO_Init+0x164>)
 800469c:	f043 0320 	orr.w	r3, r3, #32
 80046a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046a2:	4b4a      	ldr	r3, [pc, #296]	; (80047cc <MX_GPIO_Init+0x164>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <MX_GPIO_Init+0x164>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4a46      	ldr	r2, [pc, #280]	; (80047cc <MX_GPIO_Init+0x164>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ba:	4b44      	ldr	r3, [pc, #272]	; (80047cc <MX_GPIO_Init+0x164>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <MX_GPIO_Init+0x164>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <MX_GPIO_Init+0x164>)
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d2:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <MX_GPIO_Init+0x164>)
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 80046de:	2200      	movs	r2, #0
 80046e0:	f24c 0110 	movw	r1, #49168	; 0xc010
 80046e4:	483a      	ldr	r0, [pc, #232]	; (80047d0 <MX_GPIO_Init+0x168>)
 80046e6:	f004 fa53 	bl	8008b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2103      	movs	r1, #3
 80046ee:	4839      	ldr	r0, [pc, #228]	; (80047d4 <MX_GPIO_Init+0x16c>)
 80046f0:	f004 fa4e 	bl	8008b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80046f4:	2200      	movs	r2, #0
 80046f6:	2108      	movs	r1, #8
 80046f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046fc:	f004 fa48 	bl	8008b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8004706:	4834      	ldr	r0, [pc, #208]	; (80047d8 <MX_GPIO_Init+0x170>)
 8004708:	f004 fa42 	bl	8008b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 800470c:	f24c 0310 	movw	r3, #49168	; 0xc010
 8004710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004712:	2301      	movs	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471a:	2300      	movs	r3, #0
 800471c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800471e:	f107 0314 	add.w	r3, r7, #20
 8004722:	4619      	mov	r1, r3
 8004724:	482a      	ldr	r0, [pc, #168]	; (80047d0 <MX_GPIO_Init+0x168>)
 8004726:	f004 f8b1 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800472a:	2303      	movs	r3, #3
 800472c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472e:	2301      	movs	r3, #1
 8004730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4619      	mov	r1, r3
 8004740:	4824      	ldr	r0, [pc, #144]	; (80047d4 <MX_GPIO_Init+0x16c>)
 8004742:	f004 f8a3 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004746:	2308      	movs	r3, #8
 8004748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800474a:	2301      	movs	r3, #1
 800474c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	4619      	mov	r1, r3
 800475c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004760:	f004 f894 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800476a:	2301      	movs	r3, #1
 800476c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4619      	mov	r1, r3
 800477c:	4816      	ldr	r0, [pc, #88]	; (80047d8 <MX_GPIO_Init+0x170>)
 800477e:	f004 f885 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004782:	2370      	movs	r3, #112	; 0x70
 8004784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4619      	mov	r1, r3
 8004794:	4810      	ldr	r0, [pc, #64]	; (80047d8 <MX_GPIO_Init+0x170>)
 8004796:	f004 f879 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800479a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800479e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a0:	2301      	movs	r3, #1
 80047a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a8:	2303      	movs	r3, #3
 80047aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4619      	mov	r1, r3
 80047b2:	4809      	ldr	r0, [pc, #36]	; (80047d8 <MX_GPIO_Init+0x170>)
 80047b4:	f004 f86a 	bl	800888c <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <MX_GPIO_Init+0x174>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a07      	ldr	r2, [pc, #28]	; (80047dc <MX_GPIO_Init+0x174>)
 80047be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c2:	6053      	str	r3, [r2, #4]

}
 80047c4:	bf00      	nop
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	48000800 	.word	0x48000800
 80047d4:	48001400 	.word	0x48001400
 80047d8:	48000400 	.word	0x48000400
 80047dc:	40010000 	.word	0x40010000

080047e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047e6:	f001 fbc2 	bl	8005f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047ea:	f000 fabb 	bl	8004d64 <SystemClock_Config>
  //SysTick->CTRL = 0b011;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047ee:	f7ff ff3b 	bl	8004668 <MX_GPIO_Init>
  MX_DMA_Init();
 80047f2:	f7fd fcef 	bl	80021d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80047f6:	f7fc fc27 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 80047fa:	f7fc fc9d 	bl	8001138 <MX_ADC2_Init>
  MX_ADC3_Init();
 80047fe:	f7fc fd01 	bl	8001204 <MX_ADC3_Init>
  MX_ADC5_Init();
 8004802:	f7fc fddd 	bl	80013c0 <MX_ADC5_Init>
  MX_DAC1_Init();
 8004806:	f7fd fc6d 	bl	80020e4 <MX_DAC1_Init>
  MX_SPI1_Init();
 800480a:	f000 fee7 	bl	80055dc <MX_SPI1_Init>
  MX_SPI2_Init();
 800480e:	f000 ff23 	bl	8005658 <MX_SPI2_Init>
  MX_TIM2_Init();
 8004812:	f001 f96f 	bl	8005af4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8004816:	f001 faaf 	bl	8005d78 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 800481a:	f001 f9db 	bl	8005bd4 <MX_TIM8_Init>
  MX_ADC4_Init();
 800481e:	f7fc fd69 	bl	80012f4 <MX_ADC4_Init>
  MX_FDCAN1_Init();
 8004822:	f7fd ff7b 	bl	800271c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004826:	2106      	movs	r1, #6
 8004828:	48ad      	ldr	r0, [pc, #692]	; (8004ae0 <main+0x300>)
 800482a:	f000 fe1b 	bl	8005464 <preference_writer_init>
  preference_writer_load(prefs);
 800482e:	4bac      	ldr	r3, [pc, #688]	; (8004ae0 <main+0x300>)
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	9200      	str	r2, [sp, #0]
 8004834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004836:	f000 fe7f 	bl	8005538 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 800483a:	4baa      	ldr	r3, [pc, #680]	; (8004ae4 <main+0x304>)
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d102      	bne.n	800484a <main+0x6a>
 8004844:	4ba7      	ldr	r3, [pc, #668]	; (8004ae4 <main+0x304>)
 8004846:	2200      	movs	r2, #0
 8004848:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 800484a:	4ba6      	ldr	r3, [pc, #664]	; (8004ae4 <main+0x304>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d102      	bne.n	800485a <main+0x7a>
 8004854:	4ba3      	ldr	r3, [pc, #652]	; (8004ae4 <main+0x304>)
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800485a:	4ba3      	ldr	r3, [pc, #652]	; (8004ae8 <main+0x308>)
 800485c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004860:	eef4 7a67 	vcmp.f32	s15, s15
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d609      	bvs.n	800487e <main+0x9e>
 800486a:	4b9f      	ldr	r3, [pc, #636]	; (8004ae8 <main+0x308>)
 800486c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004870:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004874:	eef4 7a47 	vcmp.f32	s15, s14
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d102      	bne.n	8004884 <main+0xa4>
 800487e:	4b9a      	ldr	r3, [pc, #616]	; (8004ae8 <main+0x308>)
 8004880:	4a9a      	ldr	r2, [pc, #616]	; (8004aec <main+0x30c>)
 8004882:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004884:	4b98      	ldr	r3, [pc, #608]	; (8004ae8 <main+0x308>)
 8004886:	edd3 7a03 	vldr	s15, [r3, #12]
 800488a:	eef4 7a67 	vcmp.f32	s15, s15
 800488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004892:	d609      	bvs.n	80048a8 <main+0xc8>
 8004894:	4b94      	ldr	r3, [pc, #592]	; (8004ae8 <main+0x308>)
 8004896:	edd3 7a03 	vldr	s15, [r3, #12]
 800489a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800489e:	eef4 7a47 	vcmp.f32	s15, s14
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	d102      	bne.n	80048ae <main+0xce>
 80048a8:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <main+0x308>)
 80048aa:	4a91      	ldr	r2, [pc, #580]	; (8004af0 <main+0x310>)
 80048ac:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80048ae:	4b8e      	ldr	r3, [pc, #568]	; (8004ae8 <main+0x308>)
 80048b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80048b4:	eef4 7a67 	vcmp.f32	s15, s15
 80048b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048bc:	d609      	bvs.n	80048d2 <main+0xf2>
 80048be:	4b8a      	ldr	r3, [pc, #552]	; (8004ae8 <main+0x308>)
 80048c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80048c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80048c8:	eef4 7a47 	vcmp.f32	s15, s14
 80048cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d0:	d103      	bne.n	80048da <main+0xfa>
 80048d2:	4b85      	ldr	r3, [pc, #532]	; (8004ae8 <main+0x308>)
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80048da:	4b82      	ldr	r3, [pc, #520]	; (8004ae4 <main+0x304>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d102      	bne.n	80048ea <main+0x10a>
 80048e4:	4b7f      	ldr	r3, [pc, #508]	; (8004ae4 <main+0x304>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80048ea:	4b7e      	ldr	r3, [pc, #504]	; (8004ae4 <main+0x304>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <main+0x11a>
 80048f4:	4b7b      	ldr	r3, [pc, #492]	; (8004ae4 <main+0x304>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80048fa:	4b7a      	ldr	r3, [pc, #488]	; (8004ae4 <main+0x304>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d103      	bne.n	800490c <main+0x12c>
 8004904:	4b77      	ldr	r3, [pc, #476]	; (8004ae4 <main+0x304>)
 8004906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800490a:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 800490c:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <main+0x308>)
 800490e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004912:	eef4 7a67 	vcmp.f32	s15, s15
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	d609      	bvs.n	8004930 <main+0x150>
 800491c:	4b72      	ldr	r3, [pc, #456]	; (8004ae8 <main+0x308>)
 800491e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004922:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004926:	eef4 7a47 	vcmp.f32	s15, s14
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	d103      	bne.n	8004938 <main+0x158>
 8004930:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <main+0x308>)
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004938:	4b6b      	ldr	r3, [pc, #428]	; (8004ae8 <main+0x308>)
 800493a:	edd3 7a08 	vldr	s15, [r3, #32]
 800493e:	eef4 7a67 	vcmp.f32	s15, s15
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d609      	bvs.n	800495c <main+0x17c>
 8004948:	4b67      	ldr	r3, [pc, #412]	; (8004ae8 <main+0x308>)
 800494a:	edd3 7a08 	vldr	s15, [r3, #32]
 800494e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004952:	eef4 7a47 	vcmp.f32	s15, s14
 8004956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495a:	d102      	bne.n	8004962 <main+0x182>
 800495c:	4b62      	ldr	r3, [pc, #392]	; (8004ae8 <main+0x308>)
 800495e:	4a65      	ldr	r2, [pc, #404]	; (8004af4 <main+0x314>)
 8004960:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004962:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <main+0x308>)
 8004964:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004968:	eef4 7a67 	vcmp.f32	s15, s15
 800496c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004970:	d609      	bvs.n	8004986 <main+0x1a6>
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <main+0x308>)
 8004974:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004978:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800497c:	eef4 7a47 	vcmp.f32	s15, s14
 8004980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004984:	d102      	bne.n	800498c <main+0x1ac>
 8004986:	4b58      	ldr	r3, [pc, #352]	; (8004ae8 <main+0x308>)
 8004988:	4a5b      	ldr	r2, [pc, #364]	; (8004af8 <main+0x318>)
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800498c:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <main+0x308>)
 800498e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004992:	eef4 7a67 	vcmp.f32	s15, s15
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	d609      	bvs.n	80049b0 <main+0x1d0>
 800499c:	4b52      	ldr	r3, [pc, #328]	; (8004ae8 <main+0x308>)
 800499e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80049a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049a6:	eef4 7a47 	vcmp.f32	s15, s14
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	d102      	bne.n	80049b6 <main+0x1d6>
 80049b0:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <main+0x308>)
 80049b2:	4a52      	ldr	r2, [pc, #328]	; (8004afc <main+0x31c>)
 80049b4:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80049b6:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <main+0x308>)
 80049b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80049bc:	eef4 7a67 	vcmp.f32	s15, s15
 80049c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c4:	d609      	bvs.n	80049da <main+0x1fa>
 80049c6:	4b48      	ldr	r3, [pc, #288]	; (8004ae8 <main+0x308>)
 80049c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80049cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049d0:	eef4 7a47 	vcmp.f32	s15, s14
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	d102      	bne.n	80049e0 <main+0x200>
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <main+0x308>)
 80049dc:	4a48      	ldr	r2, [pc, #288]	; (8004b00 <main+0x320>)
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <main+0x308>)
 80049e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80049e6:	eef4 7a67 	vcmp.f32	s15, s15
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d609      	bvs.n	8004a04 <main+0x224>
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <main+0x308>)
 80049f2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80049f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049fa:	eef4 7a47 	vcmp.f32	s15, s14
 80049fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a02:	d103      	bne.n	8004a0c <main+0x22c>
 8004a04:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <main+0x308>)
 8004a06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a0a:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <main+0x308>)
 8004a0e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004a12:	eef4 7a67 	vcmp.f32	s15, s15
 8004a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1a:	d609      	bvs.n	8004a30 <main+0x250>
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <main+0x308>)
 8004a1e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004a22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a26:	eef4 7a47 	vcmp.f32	s15, s14
 8004a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2e:	d103      	bne.n	8004a38 <main+0x258>
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <main+0x308>)
 8004a32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <main+0x308>)
 8004a3a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004a3e:	eef4 7a67 	vcmp.f32	s15, s15
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	d609      	bvs.n	8004a5c <main+0x27c>
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <main+0x308>)
 8004a4a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004a4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a52:	eef4 7a47 	vcmp.f32	s15, s14
 8004a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5a:	d102      	bne.n	8004a62 <main+0x282>
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <main+0x308>)
 8004a5e:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <main+0x324>)
 8004a60:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <main+0x308>)
 8004a64:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a68:	eef4 7a67 	vcmp.f32	s15, s15
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	d609      	bvs.n	8004a86 <main+0x2a6>
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <main+0x308>)
 8004a74:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a7c:	eef4 7a47 	vcmp.f32	s15, s14
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	d102      	bne.n	8004a8c <main+0x2ac>
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <main+0x308>)
 8004a88:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <main+0x31c>)
 8004a8a:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <main+0x308>)
 8004a8e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004a92:	eef4 7a67 	vcmp.f32	s15, s15
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	d702      	bvc.n	8004aa2 <main+0x2c2>
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <main+0x308>)
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <main+0x328>)
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <main+0x308>)
 8004aa4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004aa8:	eef4 7a67 	vcmp.f32	s15, s15
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d702      	bvc.n	8004ab8 <main+0x2d8>
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <main+0x308>)
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <main+0x32c>)
 8004ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <main+0x308>)
 8004aba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004abe:	eef4 7a67 	vcmp.f32	s15, s15
 8004ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac6:	d702      	bvc.n	8004ace <main+0x2ee>
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <main+0x308>)
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <main+0x330>)
 8004acc:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <main+0x308>)
 8004ad0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004ad4:	eef4 7a67 	vcmp.f32	s15, s15
 8004ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004adc:	d71d      	bvc.n	8004b1a <main+0x33a>
 8004ade:	e019      	b.n	8004b14 <main+0x334>
 8004ae0:	20000b58 	.word	0x20000b58
 8004ae4:	20000758 	.word	0x20000758
 8004ae8:	20000658 	.word	0x20000658
 8004aec:	447a0000 	.word	0x447a0000
 8004af0:	42200000 	.word	0x42200000
 8004af4:	42fa0000 	.word	0x42fa0000
 8004af8:	41600000 	.word	0x41600000
 8004afc:	40a00000 	.word	0x40a00000
 8004b00:	41a80000 	.word	0x41a80000
 8004b04:	43fa0000 	.word	0x43fa0000
 8004b08:	41480000 	.word	0x41480000
 8004b0c:	c1480000 	.word	0xc1480000
 8004b10:	42820000 	.word	0x42820000
 8004b14:	4b7e      	ldr	r3, [pc, #504]	; (8004d10 <main+0x530>)
 8004b16:	4a7f      	ldr	r2, [pc, #508]	; (8004d14 <main+0x534>)
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b22:	487d      	ldr	r0, [pc, #500]	; (8004d18 <main+0x538>)
 8004b24:	f009 ff52 	bl	800e9cc <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8004b28:	487c      	ldr	r0, [pc, #496]	; (8004d1c <main+0x53c>)
 8004b2a:	f7fe fa93 	bl	8003054 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004b2e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004b32:	2100      	movs	r1, #0
 8004b34:	487a      	ldr	r0, [pc, #488]	; (8004d20 <main+0x540>)
 8004b36:	f009 f8c7 	bl	800dcc8 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	; (8004d24 <main+0x544>)
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	4a7a      	ldr	r2, [pc, #488]	; (8004d28 <main+0x548>)
 8004b40:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004b44:	4b77      	ldr	r3, [pc, #476]	; (8004d24 <main+0x544>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4a77      	ldr	r2, [pc, #476]	; (8004d28 <main+0x548>)
 8004b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 8004b4e:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <main+0x530>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	4a75      	ldr	r2, [pc, #468]	; (8004d28 <main+0x548>)
 8004b54:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004b56:	2164      	movs	r1, #100	; 0x64
 8004b58:	4873      	ldr	r0, [pc, #460]	; (8004d28 <main+0x548>)
 8004b5a:	f000 fa93 	bl	8005084 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004b5e:	4b72      	ldr	r3, [pc, #456]	; (8004d28 <main+0x548>)
 8004b60:	4a70      	ldr	r2, [pc, #448]	; (8004d24 <main+0x544>)
 8004b62:	33dc      	adds	r3, #220	; 0xdc
 8004b64:	f102 0118 	add.w	r1, r2, #24
 8004b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f009 f89d 	bl	800dcac <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004b72:	486e      	ldr	r0, [pc, #440]	; (8004d2c <main+0x54c>)
 8004b74:	f001 fe80 	bl	8006878 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004b78:	486d      	ldr	r0, [pc, #436]	; (8004d30 <main+0x550>)
 8004b7a:	f001 fe7d 	bl	8006878 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004b7e:	486d      	ldr	r0, [pc, #436]	; (8004d34 <main+0x554>)
 8004b80:	f001 fe7a 	bl	8006878 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);//JB
 8004b84:	486c      	ldr	r0, [pc, #432]	; (8004d38 <main+0x558>)
 8004b86:	f001 fe77 	bl	8006878 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	2110      	movs	r1, #16
 8004b8e:	486b      	ldr	r0, [pc, #428]	; (8004d3c <main+0x55c>)
 8004b90:	f003 fffe 	bl	8008b90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004b94:	2201      	movs	r2, #1
 8004b96:	2108      	movs	r1, #8
 8004b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b9c:	f003 fff8 	bl	8008b90 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f001 fa55 	bl	8006050 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f001 fa52 	bl	8006050 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004bac:	4964      	ldr	r1, [pc, #400]	; (8004d40 <main+0x560>)
 8004bae:	2301      	movs	r3, #1
 8004bb0:	9306      	str	r3, [sp, #24]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9305      	str	r3, [sp, #20]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9303      	str	r3, [sp, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9302      	str	r3, [sp, #8]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2200      	movs	r2, #0
 8004bce:	c903      	ldmia	r1, {r0, r1}
 8004bd0:	f7fd fbc9 	bl	8002366 <drv_write_DCR>
  HAL_Delay(1);
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f001 fa3b 	bl	8006050 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 8004bda:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <main+0x530>)
 8004bdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004be0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004d44 <main+0x564>
 8004be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	d802      	bhi.n	8004bf4 <main+0x414>
 8004bee:	2303      	movs	r3, #3
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	e001      	b.n	8004bf8 <main+0x418>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 8004bf8:	4951      	ldr	r1, [pc, #324]	; (8004d40 <main+0x560>)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9306      	str	r3, [sp, #24]
 8004bfe:	2301      	movs	r3, #1
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	2301      	movs	r3, #1
 8004c04:	9304      	str	r3, [sp, #16]
 8004c06:	2301      	movs	r3, #1
 8004c08:	9303      	str	r3, [sp, #12]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9302      	str	r3, [sp, #8]
 8004c0e:	2303      	movs	r3, #3
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2301      	movs	r3, #1
 8004c18:	2200      	movs	r2, #0
 8004c1a:	c903      	ldmia	r1, {r0, r1}
 8004c1c:	f7fd fc13 	bl	8002446 <drv_write_CSACR>
  HAL_Delay(1);
 8004c20:	2001      	movs	r0, #1
 8004c22:	f001 fa15 	bl	8006050 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 8004c26:	4946      	ldr	r1, [pc, #280]	; (8004d40 <main+0x560>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9306      	str	r3, [sp, #24]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	2300      	movs	r3, #0
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	2300      	movs	r3, #0
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	9302      	str	r3, [sp, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	2300      	movs	r3, #0
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	2301      	movs	r3, #1
 8004c46:	2200      	movs	r2, #0
 8004c48:	c903      	ldmia	r1, {r0, r1}
 8004c4a:	f7fd fbfc 	bl	8002446 <drv_write_CSACR>
  HAL_Delay(1);
 8004c4e:	2001      	movs	r0, #1
 8004c50:	f001 f9fe 	bl	8006050 <HAL_Delay>
  zero_current(&controller);
 8004c54:	4831      	ldr	r0, [pc, #196]	; (8004d1c <main+0x53c>)
 8004c56:	f7fe f9b9 	bl	8002fcc <zero_current>
  HAL_Delay(1);
 8004c5a:	2001      	movs	r0, #1
 8004c5c:	f001 f9f8 	bl	8006050 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 8004c60:	4937      	ldr	r1, [pc, #220]	; (8004d40 <main+0x560>)
 8004c62:	2305      	movs	r3, #5
 8004c64:	9302      	str	r3, [sp, #8]
 8004c66:	2301      	movs	r3, #1
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2201      	movs	r2, #1
 8004c72:	c903      	ldmia	r1, {r0, r1}
 8004c74:	f7fd fbb9 	bl	80023ea <drv_write_OCPCR>
  HAL_Delay(1);
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f001 f9e9 	bl	8006050 <HAL_Delay>
  drv_disable_gd(drv);
 8004c7e:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <main+0x560>)
 8004c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c84:	f7fd fc3b 	bl	80024fe <drv_disable_gd>
  HAL_Delay(1);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f001 f9e1 	bl	8006050 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <main+0x53c>)
 8004c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <main+0x53c>)
 8004c96:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	482a      	ldr	r0, [pc, #168]	; (8004d48 <main+0x568>)
 8004c9e:	f009 fe95 	bl	800e9cc <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4829      	ldr	r0, [pc, #164]	; (8004d4c <main+0x56c>)
 8004ca6:	f005 fcfb 	bl	800a6a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004caa:	2104      	movs	r1, #4
 8004cac:	4827      	ldr	r0, [pc, #156]	; (8004d4c <main+0x56c>)
 8004cae:	f005 fcf7 	bl	800a6a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004cb2:	2108      	movs	r1, #8
 8004cb4:	4825      	ldr	r0, [pc, #148]	; (8004d4c <main+0x56c>)
 8004cb6:	f005 fcf3 	bl	800a6a0 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);//JB
 8004cba:	4825      	ldr	r0, [pc, #148]	; (8004d50 <main+0x570>)
 8004cbc:	f7fd f9fe 	bl	80020bc <can_rx_init>
  can_tx_init(&can_tx);
 8004cc0:	4824      	ldr	r0, [pc, #144]	; (8004d54 <main+0x574>)
 8004cc2:	f7fd fa05 	bl	80020d0 <can_tx_init>
  //HAL_CAN_Start(&CAN_H); //start CAN//JB
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt//JB

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2100      	movs	r1, #0
 8004cca:	201c      	movs	r0, #28
 8004ccc:	f002 fe77 	bl	80079be <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2015      	movs	r0, #21
 8004cd6:	f002 fe72 	bl	80079be <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <main+0x578>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <main+0x578>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <main+0x578>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 8004cec:	2201      	movs	r2, #1
 8004cee:	491b      	ldr	r1, [pc, #108]	; (8004d5c <main+0x57c>)
 8004cf0:	481b      	ldr	r0, [pc, #108]	; (8004d60 <main+0x580>)
 8004cf2:	f007 f819 	bl	800bd28 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8004cf6:	4815      	ldr	r0, [pc, #84]	; (8004d4c <main+0x56c>)
 8004cf8:	f005 fc02 	bl	800a500 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8004cfc:	2064      	movs	r0, #100	; 0x64
 8004cfe:	f001 f9a7 	bl	8006050 <HAL_Delay>
	  drv_print_faults(drv);
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <main+0x560>)
 8004d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d08:	f7fd fc14 	bl	8002534 <drv_print_faults>
	  HAL_Delay(100);
 8004d0c:	e7f6      	b.n	8004cfc <main+0x51c>
 8004d0e:	bf00      	nop
 8004d10:	20000658 	.word	0x20000658
 8004d14:	c2820000 	.word	0xc2820000
 8004d18:	08013528 	.word	0x08013528
 8004d1c:	20000b6c 	.word	0x20000b6c
 8004d20:	20009388 	.word	0x20009388
 8004d24:	20000758 	.word	0x20000758
 8004d28:	20000e74 	.word	0x20000e74
 8004d2c:	2000023c 	.word	0x2000023c
 8004d30:	200002a8 	.word	0x200002a8
 8004d34:	20000314 	.word	0x20000314
 8004d38:	20000380 	.word	0x20000380
 8004d3c:	48000800 	.word	0x48000800
 8004d40:	20001154 	.word	0x20001154
 8004d44:	42200000 	.word	0x42200000
 8004d48:	0801354c 	.word	0x0801354c
 8004d4c:	200097b0 	.word	0x200097b0
 8004d50:	20009694 	.word	0x20009694
 8004d54:	20009668 	.word	0x20009668
 8004d58:	20000e64 	.word	0x20000e64
 8004d5c:	200096e0 	.word	0x200096e0
 8004d60:	20009848 	.word	0x20009848

08004d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b094      	sub	sp, #80	; 0x50
 8004d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d6a:	f107 0318 	add.w	r3, r7, #24
 8004d6e:	2238      	movs	r2, #56	; 0x38
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f008 ffa8 	bl	800dcc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d78:	1d3b      	adds	r3, r7, #4
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004d86:	2000      	movs	r0, #0
 8004d88:	f003 ff1a 	bl	8008bc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8004da6:	2315      	movs	r3, #21
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004daa:	2302      	movs	r3, #2
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004dae:	2302      	movs	r3, #2
 8004db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004db2:	2302      	movs	r3, #2
 8004db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004db6:	f107 0318 	add.w	r3, r7, #24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f003 ffa4 	bl	8008d08 <HAL_RCC_OscConfig>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004dc6:	f000 f81a 	bl	8004dfe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dca:	230f      	movs	r3, #15
 8004dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	2104      	movs	r1, #4
 8004de6:	4618      	mov	r0, r3
 8004de8:	f004 faa6 	bl	8009338 <HAL_RCC_ClockConfig>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004df2:	f000 f804 	bl	8004dfe <Error_Handler>
  }
}
 8004df6:	bf00      	nop
 8004df8:	3750      	adds	r7, #80	; 0x50
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e16:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004e1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e1e:	edd7 7a00 	vldr	s15, [r7]
 8004e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	dd01      	ble.n	8004e30 <fast_fmaxf+0x24>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	e000      	b.n	8004e32 <fast_fmaxf+0x26>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	ee07 3a90 	vmov	s15, r3
    }
 8004e36:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <fast_fminf>:

float fast_fminf(float x, float y){
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e4e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004e52:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e56:	edd7 7a00 	vldr	s15, [r7]
 8004e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	d501      	bpl.n	8004e68 <fast_fminf+0x24>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	e000      	b.n	8004e6a <fast_fminf+0x26>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	ee07 3a90 	vmov	s15, r3
    }
 8004e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e86:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e8a:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004e8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9e:	dd0c      	ble.n	8004eba <fmaxf3+0x3e>
 8004ea0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb0:	dd01      	ble.n	8004eb6 <fmaxf3+0x3a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	e00d      	b.n	8004ed2 <fmaxf3+0x56>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	e00b      	b.n	8004ed2 <fmaxf3+0x56>
 8004eba:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ec2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	dd01      	ble.n	8004ed0 <fmaxf3+0x54>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	e000      	b.n	8004ed2 <fmaxf3+0x56>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	ee07 3a90 	vmov	s15, r3
    }
 8004ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <fminf3>:

float fminf3(float x, float y, float z){
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	ed87 0a03 	vstr	s0, [r7, #12]
 8004eee:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ef2:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004ef6:	ed97 7a03 	vldr	s14, [r7, #12]
 8004efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	d50c      	bpl.n	8004f22 <fminf3+0x3e>
 8004f08:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	d501      	bpl.n	8004f1e <fminf3+0x3a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	e00d      	b.n	8004f3a <fminf3+0x56>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	e00b      	b.n	8004f3a <fminf3+0x56>
 8004f22:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	d501      	bpl.n	8004f38 <fminf3+0x54>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	e000      	b.n	8004f3a <fminf3+0x56>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	ee07 3a90 	vmov	s15, r3
    }
 8004f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	ed93 7a00 	vldr	s14, [r3]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	edd3 7a00 	vldr	s15, [r3]
 8004f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	edd3 6a00 	vldr	s13, [r3]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	edd3 7a00 	vldr	s15, [r3]
 8004f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f82:	f00d fcb1 	bl	80128e8 <sqrtf>
 8004f86:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004f8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9a:	dc00      	bgt.n	8004f9e <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004f9c:	e01b      	b.n	8004fd6 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	ed93 7a00 	vldr	s14, [r3]
 8004fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fa8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fac:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	ed93 7a00 	vldr	s14, [r3]
 8004fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fc4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	edc3 7a00 	vstr	s15, [r3]
    }
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <sin_lut>:
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
    }

float sin_lut(float theta){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004fea:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005048 <sin_lut+0x68>
 8004fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ff2:	f00d fc59 	bl	80128a8 <fmodf>
 8004ff6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005006:	d506      	bpl.n	8005016 <sin_lut+0x36>
 8005008:	edd7 7a01 	vldr	s15, [r7, #4]
 800500c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005048 <sin_lut+0x68>
 8005010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005014:	e001      	b.n	800501a <sin_lut+0x3a>
 8005016:	edd7 7a01 	vldr	s15, [r7, #4]
 800501a:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 800501e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005022:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800504c <sin_lut+0x6c>
 8005026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800502a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502e:	ee17 3a90 	vmov	r3, s15
 8005032:	4a07      	ldr	r2, [pc, #28]	; (8005050 <sin_lut+0x70>)
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	ee07 3a90 	vmov	s15, r3
}
 800503e:	eeb0 0a67 	vmov.f32	s0, s15
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40c90fdb 	.word	0x40c90fdb
 800504c:	42a2f983 	.word	0x42a2f983
 8005050:	080135e0 	.word	0x080135e0

08005054 <cos_lut>:

float cos_lut(float theta){
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 800505e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005080 <cos_lut+0x2c>
 8005062:	edd7 7a01 	vldr	s15, [r7, #4]
 8005066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506a:	eeb0 0a67 	vmov.f32	s0, s15
 800506e:	f7ff ffb7 	bl	8004fe0 <sin_lut>
 8005072:	eef0 7a40 	vmov.f32	s15, s0
}
 8005076:	eeb0 0a67 	vmov.f32	s0, s15
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	3fc90fdb 	.word	0x3fc90fdb

08005084 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e021      	b.n	80050d8 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050a0:	4812      	ldr	r0, [pc, #72]	; (80050ec <ps_warmup+0x68>)
 80050a2:	f003 fd75 	bl	8008b90 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	1c9a      	adds	r2, r3, #2
 80050ac:	2364      	movs	r3, #100	; 0x64
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2301      	movs	r3, #1
 80050b2:	480f      	ldr	r0, [pc, #60]	; (80050f0 <ps_warmup+0x6c>)
 80050b4:	f004 fe55 	bl	8009d62 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80050b8:	bf00      	nop
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <ps_warmup+0x6c>)
 80050bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d0f9      	beq.n	80050ba <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80050c6:	2201      	movs	r2, #1
 80050c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050cc:	4807      	ldr	r0, [pc, #28]	; (80050ec <ps_warmup+0x68>)
 80050ce:	f003 fd5f 	bl	8008b90 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	dbd9      	blt.n	8005094 <ps_warmup+0x10>
	}
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	48000400 	.word	0x48000400
 80050f0:	20009748 	.word	0x20009748

080050f4 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	; 0x30
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005108:	2313      	movs	r3, #19
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
 800510c:	e011      	b.n	8005132 <ps_sample+0x3e>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	3b01      	subs	r3, #1
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	3302      	adds	r3, #2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	3304      	adds	r3, #4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	3302      	adds	r3, #2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3304      	adds	r3, #4
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	3b01      	subs	r3, #1
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	dcea      	bgt.n	800510e <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800513e:	2200      	movs	r2, #0
 8005140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005144:	489d      	ldr	r0, [pc, #628]	; (80053bc <ps_sample+0x2c8>)
 8005146:	f003 fd23 	bl	8008b90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1c9a      	adds	r2, r3, #2
 8005150:	2364      	movs	r3, #100	; 0x64
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2301      	movs	r3, #1
 8005156:	489a      	ldr	r0, [pc, #616]	; (80053c0 <ps_sample+0x2cc>)
 8005158:	f004 fe03 	bl	8009d62 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800515c:	bf00      	nop
 800515e:	4b98      	ldr	r3, [pc, #608]	; (80053c0 <ps_sample+0x2cc>)
 8005160:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d0f9      	beq.n	800515e <ps_sample+0x6a>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800516a:	2201      	movs	r2, #1
 800516c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005170:	4892      	ldr	r0, [pc, #584]	; (80053bc <ps_sample+0x2c8>)
 8005172:	f003 fd0d 	bl	8008b90 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	885b      	ldrh	r3, [r3, #2]
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005184:	125b      	asrs	r3, r3, #9
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	3336      	adds	r3, #54	; 0x36
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005196:	125b      	asrs	r3, r3, #9
 8005198:	3301      	adds	r3, #1
 800519a:	425a      	negs	r2, r3
 800519c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a4:	bf58      	it	pl
 80051a6:	4253      	negpl	r3, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	3336      	adds	r3, #54	; 0x36
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	125b      	asrs	r3, r3, #9
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80051de:	4b79      	ldr	r3, [pc, #484]	; (80053c4 <ps_sample+0x2d0>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ec:	eddf 6a76 	vldr	s13, [pc, #472]	; 80053c8 <ps_sample+0x2d4>
 80051f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005204:	ee17 3a90 	vmov	r3, s15
 8005208:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80053cc <ps_sample+0x2d8>
 8005222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d507      	bpl.n	800524c <ps_sample+0x158>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005242:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80053cc <ps_sample+0x2d8>
 8005246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800524a:	e002      	b.n	8005252 <ps_sample+0x15e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005262:	4b58      	ldr	r3, [pc, #352]	; (80053c4 <ps_sample+0x2d0>)
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005274:	eddf 6a54 	vldr	s13, [pc, #336]	; 80053c8 <ps_sample+0x2d4>
 8005278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800528c:	ee17 3a90 	vmov	r3, s15
 8005290:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052a6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80053cc <ps_sample+0x2d8>
 80052aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80052ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c2:	d507      	bpl.n	80052d4 <ps_sample+0x1e0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80052ca:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80053cc <ps_sample+0x2d8>
 80052ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052d2:	e002      	b.n	80052da <ps_sample+0x1e6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80052f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 80052f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80052fc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80053d0 <ps_sample+0x2dc>
 8005300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	dd03      	ble.n	8005312 <ps_sample+0x21e>
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	623b      	str	r3, [r7, #32]
 8005310:	e00a      	b.n	8005328 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005312:	edd7 7a03 	vldr	s15, [r7, #12]
 8005316:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80053d4 <ps_sample+0x2e0>
 800531a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	d501      	bpl.n	8005328 <ps_sample+0x234>
 8005324:	2301      	movs	r3, #1
 8005326:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	441a      	add	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <ps_sample+0x25e>
		encoder->turns = 0;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	ed93 7a01 	vldr	s14, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005366:	eddf 6a19 	vldr	s13, [pc, #100]	; 80053cc <ps_sample+0x2d8>
 800536a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800536e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	edc3 7a03 	vstr	s15, [r3, #12]
//
//	float vel = (new_pos_avg - old_pos_avg)/(dt*9.0);



	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	ed93 7a03 	vldr	s14, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005384:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005388:	edd7 7a00 	vldr	s15, [r7]
 800538c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005390:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80053b4:	bf00      	nop
 80053b6:	3728      	adds	r7, #40	; 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	48000400 	.word	0x48000400
 80053c0:	20009748 	.word	0x20009748
 80053c4:	20000758 	.word	0x20000758
 80053c8:	47800000 	.word	0x47800000
 80053cc:	40c90fdb 	.word	0x40c90fdb
 80053d0:	40490fdb 	.word	0x40490fdb
 80053d4:	c0490fdb 	.word	0xc0490fdb

080053d8 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e6:	4619      	mov	r1, r3
 80053e8:	4818      	ldr	r0, [pc, #96]	; (800544c <ps_print+0x74>)
 80053ea:	f009 faef 	bl	800e9cc <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f2:	4619      	mov	r1, r3
 80053f4:	4816      	ldr	r0, [pc, #88]	; (8005450 <ps_print+0x78>)
 80053f6:	f009 fae9 	bl	800e9cc <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fb f8ca 	bl	8000598 <__aeabi_f2d>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4812      	ldr	r0, [pc, #72]	; (8005454 <ps_print+0x7c>)
 800540a:	f009 fadf 	bl	800e9cc <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb f8c0 	bl	8000598 <__aeabi_f2d>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	480e      	ldr	r0, [pc, #56]	; (8005458 <ps_print+0x80>)
 800541e:	f009 fad5 	bl	800e9cc <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	4618      	mov	r0, r3
 8005428:	f7fb f8b6 	bl	8000598 <__aeabi_f2d>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	480a      	ldr	r0, [pc, #40]	; (800545c <ps_print+0x84>)
 8005432:	f009 facb 	bl	800e9cc <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543c:	4619      	mov	r1, r3
 800543e:	4808      	ldr	r0, [pc, #32]	; (8005460 <ps_print+0x88>)
 8005440:	f009 fac4 	bl	800e9cc <iprintf>
	//HAL_Delay(dt_ms);
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	08013574 	.word	0x08013574
 8005450:	0801357c 	.word	0x0801357c
 8005454:	08013594 	.word	0x08013594
 8005458:	080135a8 	.word	0x080135a8
 800545c:	080135bc 	.word	0x080135bc
 8005460:	080135d0 	.word	0x080135d0

08005464 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd fa12 	bl	800289c <flash_writer_init>
	pr->sector = sector;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	60da      	str	r2, [r3, #12]
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fd fa21 	bl	80028d8 <flash_writer_open>
    pr->ready = true;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	741a      	strb	r2, [r3, #16]
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 80054a4:	b084      	sub	sp, #16
 80054a6:	b490      	push	{r4, r7}
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	f107 0408 	add.w	r4, r7, #8
 80054ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 80054b2:	7e3b      	ldrb	r3, [r7, #24]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc90      	pop	{r4, r7}
 80054ba:	b004      	add	sp, #16
 80054bc:	4770      	bx	lr
	...

080054c0 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e00d      	b.n	80054ea <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	4a17      	ldr	r2, [pc, #92]	; (8005530 <preference_writer_flush+0x70>)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	460b      	mov	r3, r1
 80054de:	ca07      	ldmia	r2, {r0, r1, r2}
 80054e0:	f7fd fa0c 	bl	80028fc <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2bff      	cmp	r3, #255	; 0xff
 80054ee:	ddee      	ble.n	80054ce <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 80054f0:	e012      	b.n	8005518 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054fa:	4a0e      	ldr	r2, [pc, #56]	; (8005534 <preference_writer_flush+0x74>)
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	edd3 7a00 	vldr	s15, [r3]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	eeb0 0a67 	vmov.f32	s0, s15
 800550a:	460b      	mov	r3, r1
 800550c:	ca07      	ldmia	r2, {r0, r1, r2}
 800550e:	f7fd fa11 	bl	8002934 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800551e:	dbe8      	blt.n	80054f2 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	741a      	strb	r2, [r3, #16]
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000758 	.word	0x20000758
 8005534:	20000658 	.word	0x20000658

08005538 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005538:	b084      	sub	sp, #16
 800553a:	b590      	push	{r4, r7, lr}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	f107 0418 	add.w	r4, r7, #24
 8005544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005548:	2300      	movs	r3, #0
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e00d      	b.n	800556a <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f107 0218 	add.w	r2, r7, #24
 8005554:	ca07      	ldmia	r2, {r0, r1, r2}
 8005556:	f7fd fa19 	bl	800298c <flash_read_int>
 800555a:	4602      	mov	r2, r0
 800555c:	4915      	ldr	r1, [pc, #84]	; (80055b4 <preference_writer_load+0x7c>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3301      	adds	r3, #1
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2bff      	cmp	r3, #255	; 0xff
 800556e:	ddee      	ble.n	800554e <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005570:	e013      	b.n	800559a <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 800557a:	4613      	mov	r3, r2
 800557c:	f107 0218 	add.w	r2, r7, #24
 8005580:	ca07      	ldmia	r2, {r0, r1, r2}
 8005582:	f7fd fa19 	bl	80029b8 <flash_read_float>
 8005586:	eef0 7a40 	vmov.f32	s15, s0
 800558a:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <preference_writer_load+0x80>)
 800558c:	00a3      	lsls	r3, r4, #2
 800558e:	4413      	add	r3, r2
 8005590:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3301      	adds	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80055a0:	dbe7      	blt.n	8005572 <preference_writer_load+0x3a>
    }
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80055ae:	b004      	add	sp, #16
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000758 	.word	0x20000758
 80055b8:	20000658 	.word	0x20000658

080055bc <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fd f9d0 	bl	8002972 <flash_writer_close>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80055e0:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <MX_SPI1_Init+0x74>)
 80055e2:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <MX_SPI1_Init+0x78>)
 80055e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055e6:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <MX_SPI1_Init+0x74>)
 80055e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <MX_SPI1_Init+0x74>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <MX_SPI1_Init+0x74>)
 80055f6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80055fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055fc:	4b14      	ldr	r3, [pc, #80]	; (8005650 <MX_SPI1_Init+0x74>)
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005602:	4b13      	ldr	r3, [pc, #76]	; (8005650 <MX_SPI1_Init+0x74>)
 8005604:	2200      	movs	r2, #0
 8005606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <MX_SPI1_Init+0x74>)
 800560a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <MX_SPI1_Init+0x74>)
 8005612:	2228      	movs	r2, #40	; 0x28
 8005614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005616:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <MX_SPI1_Init+0x74>)
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <MX_SPI1_Init+0x74>)
 800561e:	2200      	movs	r2, #0
 8005620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <MX_SPI1_Init+0x74>)
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <MX_SPI1_Init+0x74>)
 800562a:	2207      	movs	r2, #7
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <MX_SPI1_Init+0x74>)
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <MX_SPI1_Init+0x74>)
 8005636:	2208      	movs	r2, #8
 8005638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800563a:	4805      	ldr	r0, [pc, #20]	; (8005650 <MX_SPI1_Init+0x74>)
 800563c:	f004 fae6 	bl	8009c0c <HAL_SPI_Init>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005646:	f7ff fbda 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	200096e4 	.word	0x200096e4
 8005654:	40013000 	.word	0x40013000

08005658 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <MX_SPI2_Init+0x74>)
 800565e:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <MX_SPI2_Init+0x78>)
 8005660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005662:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <MX_SPI2_Init+0x74>)
 8005664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005668:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800566a:	4b18      	ldr	r3, [pc, #96]	; (80056cc <MX_SPI2_Init+0x74>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005670:	4b16      	ldr	r3, [pc, #88]	; (80056cc <MX_SPI2_Init+0x74>)
 8005672:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005676:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005678:	4b14      	ldr	r3, [pc, #80]	; (80056cc <MX_SPI2_Init+0x74>)
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <MX_SPI2_Init+0x74>)
 8005680:	2201      	movs	r2, #1
 8005682:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <MX_SPI2_Init+0x74>)
 8005686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <MX_SPI2_Init+0x74>)
 800568e:	2210      	movs	r2, #16
 8005690:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <MX_SPI2_Init+0x74>)
 8005694:	2200      	movs	r2, #0
 8005696:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <MX_SPI2_Init+0x74>)
 800569a:	2200      	movs	r2, #0
 800569c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <MX_SPI2_Init+0x74>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <MX_SPI2_Init+0x74>)
 80056a6:	2207      	movs	r2, #7
 80056a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <MX_SPI2_Init+0x74>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <MX_SPI2_Init+0x74>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80056b6:	4805      	ldr	r0, [pc, #20]	; (80056cc <MX_SPI2_Init+0x74>)
 80056b8:	f004 faa8 	bl	8009c0c <HAL_SPI_Init>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80056c2:	f7ff fb9c 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20009748 	.word	0x20009748
 80056d0:	40003800 	.word	0x40003800

080056d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	; 0x30
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056dc:	f107 031c 	add.w	r3, r7, #28
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <HAL_SPI_MspInit+0xdc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d129      	bne.n	800574a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056f6:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 80056fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005700:	6613      	str	r3, [r2, #96]	; 0x60
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800570e:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	4a28      	ldr	r2, [pc, #160]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800571a:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005726:	23e0      	movs	r3, #224	; 0xe0
 8005728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572a:	2302      	movs	r3, #2
 800572c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005732:	2300      	movs	r3, #0
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005736:	2305      	movs	r3, #5
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573a:	f107 031c 	add.w	r3, r7, #28
 800573e:	4619      	mov	r1, r3
 8005740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005744:	f003 f8a2 	bl	800888c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005748:	e02d      	b.n	80057a6 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <HAL_SPI_MspInit+0xe4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d128      	bne.n	80057a6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005754:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 800575a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800575e:	6593      	str	r3, [r2, #88]	; 0x58
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_SPI_MspInit+0xe0>)
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005784:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005792:	2300      	movs	r3, #0
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005796:	2305      	movs	r3, #5
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800579a:	f107 031c 	add.w	r3, r7, #28
 800579e:	4619      	mov	r1, r3
 80057a0:	4806      	ldr	r0, [pc, #24]	; (80057bc <HAL_SPI_MspInit+0xe8>)
 80057a2:	f003 f873 	bl	800888c <HAL_GPIO_Init>
}
 80057a6:	bf00      	nop
 80057a8:	3730      	adds	r7, #48	; 0x30
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40013000 	.word	0x40013000
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40003800 	.word	0x40003800
 80057bc:	48000400 	.word	0x48000400

080057c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <HAL_MspInit+0x44>)
 80057c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ca:	4a0e      	ldr	r2, [pc, #56]	; (8005804 <HAL_MspInit+0x44>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6613      	str	r3, [r2, #96]	; 0x60
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <HAL_MspInit+0x44>)
 80057d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_MspInit+0x44>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	4a08      	ldr	r2, [pc, #32]	; (8005804 <HAL_MspInit+0x44>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_MspInit+0x44>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000

08005808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800580c:	e7fe      	b.n	800580c <NMI_Handler+0x4>

0800580e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005812:	e7fe      	b.n	8005812 <HardFault_Handler+0x4>

08005814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <MemManage_Handler+0x4>

0800581a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <BusFault_Handler+0x4>

08005820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <UsageFault_Handler+0x4>

08005826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005854:	f000 fbde 	bl	8006014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}

0800585c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <DMA1_Channel1_IRQHandler+0x10>)
 8005862:	f002 fc13 	bl	800808c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000458 	.word	0x20000458

08005870 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005874:	4802      	ldr	r0, [pc, #8]	; (8005880 <DMA1_Channel2_IRQHandler+0x10>)
 8005876:	f002 fc09 	bl	800808c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200004b8 	.word	0x200004b8

08005884 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005888:	4802      	ldr	r0, [pc, #8]	; (8005894 <DMA1_Channel3_IRQHandler+0x10>)
 800588a:	f002 fbff 	bl	800808c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000518 	.word	0x20000518

08005898 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800589c:	4802      	ldr	r0, [pc, #8]	; (80058a8 <DMA1_Channel4_IRQHandler+0x10>)
 800589e:	f002 fbf5 	bl	800808c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000578 	.word	0x20000578

080058ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 80058b0:	480c      	ldr	r0, [pc, #48]	; (80058e4 <TIM2_IRQHandler+0x38>)
 80058b2:	f7fd f93f 	bl	8002b34 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80058b6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80058e8 <TIM2_IRQHandler+0x3c>
 80058ba:	480c      	ldr	r0, [pc, #48]	; (80058ec <TIM2_IRQHandler+0x40>)
 80058bc:	f7ff fc1a 	bl	80050f4 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 80058c0:	480b      	ldr	r0, [pc, #44]	; (80058f0 <TIM2_IRQHandler+0x44>)
 80058c2:	f7fd fffd 	bl	80038c0 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 80058c6:	f000 f83d 	bl	8005944 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <TIM2_IRQHandler+0x38>)
 80058cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <TIM2_IRQHandler+0x38>)
 80058d4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058d8:	4806      	ldr	r0, [pc, #24]	; (80058f4 <TIM2_IRQHandler+0x48>)
 80058da:	f004 fff3 	bl	800a8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000b6c 	.word	0x20000b6c
 80058e8:	37d1b717 	.word	0x37d1b717
 80058ec:	20000e74 	.word	0x20000e74
 80058f0:	20000e64 	.word	0x20000e64
 80058f4:	200097b0 	.word	0x200097b0

080058f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	HAL_UART_IRQHandler(&huart3);
 80058fe:	4809      	ldr	r0, [pc, #36]	; (8005924 <USART3_IRQHandler+0x2c>)
 8005900:	f006 fa68 	bl	800bdd4 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005904:	4b08      	ldr	r3, [pc, #32]	; (8005928 <USART3_IRQHandler+0x30>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	4619      	mov	r1, r3
 800590e:	4807      	ldr	r0, [pc, #28]	; (800592c <USART3_IRQHandler+0x34>)
 8005910:	f7fe f97c 	bl	8003c0c <update_fsm>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005914:	4803      	ldr	r0, [pc, #12]	; (8005924 <USART3_IRQHandler+0x2c>)
 8005916:	f006 fa5d 	bl	800bdd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20009848 	.word	0x20009848
 8005928:	200096e0 	.word	0x200096e0
 800592c:	20000e64 	.word	0x20000e64

08005930 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005934:	4802      	ldr	r0, [pc, #8]	; (8005940 <TIM8_UP_IRQHandler+0x10>)
 8005936:	f004 ffc5 	bl	800a8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200097fc 	.word	0x200097fc

08005944 <can_tx_rx>:

/* USER CODE BEGIN 1 */


void can_tx_rx(void){ //JB
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
//			unpack_cmd(can_rx, controller.commands);	// Unpack commands
//			controller.timeout = 0;					// Reset timeout counter
//		}
//	}

}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005952:	b480      	push	{r7}
 8005954:	af00      	add	r7, sp, #0
	return 1;
 8005956:	2301      	movs	r3, #1
}
 8005958:	4618      	mov	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <_kill>:

int _kill(int pid, int sig)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800596c:	f008 f974 	bl	800dc58 <__errno>
 8005970:	4603      	mov	r3, r0
 8005972:	2216      	movs	r2, #22
 8005974:	601a      	str	r2, [r3, #0]
	return -1;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <_exit>:

void _exit (int status)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800598a:	f04f 31ff 	mov.w	r1, #4294967295
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff ffe7 	bl	8005962 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005994:	e7fe      	b.n	8005994 <_exit+0x12>

08005996 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	e00a      	b.n	80059be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059a8:	f3af 8000 	nop.w
 80059ac:	4601      	mov	r1, r0
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	60ba      	str	r2, [r7, #8]
 80059b4:	b2ca      	uxtb	r2, r1
 80059b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3301      	adds	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	dbf0      	blt.n	80059a8 <_read+0x12>
	}

return len;
 80059c6:	687b      	ldr	r3, [r7, #4]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e009      	b.n	80059f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	60ba      	str	r2, [r7, #8]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fa72 	bl	8005ed4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3301      	adds	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	dbf1      	blt.n	80059e2 <_write+0x12>
	}
	return len;
 80059fe:	687b      	ldr	r3, [r7, #4]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <_close>:

int _close(int file)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	return -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a30:	605a      	str	r2, [r3, #4]
	return 0;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_isatty>:

int _isatty(int file)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	return 1;
 8005a48:	2301      	movs	r3, #1
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
	return 0;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <_sbrk+0x50>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <_sbrk+0x16>
		heap_end = &end;
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <_sbrk+0x50>)
 8005a82:	4a10      	ldr	r2, [pc, #64]	; (8005ac4 <_sbrk+0x54>)
 8005a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <_sbrk+0x50>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <_sbrk+0x50>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	466a      	mov	r2, sp
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d907      	bls.n	8005aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a9a:	f008 f8dd 	bl	800dc58 <__errno>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	220c      	movs	r2, #12
 8005aa2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa8:	e006      	b.n	8005ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_sbrk+0x50>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <_sbrk+0x50>)
 8005ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	200097ac 	.word	0x200097ac
 8005ac4:	200098f0 	.word	0x200098f0

08005ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <SystemInit+0x28>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <SystemInit+0x28>)
 8005ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <SystemInit+0x28>)
 8005ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ae2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005afa:	f107 031c 	add.w	r3, r7, #28
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b06:	463b      	mov	r3, r7
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	615a      	str	r2, [r3, #20]
 8005b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b18:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b28:	2220      	movs	r2, #32
 8005b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b2e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8005b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b34:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b3a:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b3c:	2280      	movs	r2, #128	; 0x80
 8005b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005b40:	4823      	ldr	r0, [pc, #140]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b42:	f004 fd55 	bl	800a5f0 <HAL_TIM_PWM_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005b4c:	f7ff f957 	bl	8004dfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b58:	f107 031c 	add.w	r3, r7, #28
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	481c      	ldr	r0, [pc, #112]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b60:	f005 ff20 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8005b6a:	f7ff f948 	bl	8004dfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b6e:	2360      	movs	r3, #96	; 0x60
 8005b70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005b76:	2302      	movs	r3, #2
 8005b78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b7e:	463b      	mov	r3, r7
 8005b80:	2200      	movs	r2, #0
 8005b82:	4619      	mov	r1, r3
 8005b84:	4812      	ldr	r0, [pc, #72]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b86:	f005 f81d 	bl	800abc4 <HAL_TIM_PWM_ConfigChannel>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8005b90:	f7ff f935 	bl	8004dfe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b94:	463b      	mov	r3, r7
 8005b96:	2204      	movs	r2, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	480d      	ldr	r0, [pc, #52]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005b9c:	f005 f812 	bl	800abc4 <HAL_TIM_PWM_ConfigChannel>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8005ba6:	f7ff f92a 	bl	8004dfe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005baa:	463b      	mov	r3, r7
 8005bac:	2208      	movs	r2, #8
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4807      	ldr	r0, [pc, #28]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005bb2:	f005 f807 	bl	800abc4 <HAL_TIM_PWM_ConfigChannel>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8005bbc:	f7ff f91f 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005bc0:	4803      	ldr	r0, [pc, #12]	; (8005bd0 <MX_TIM2_Init+0xdc>)
 8005bc2:	f000 f8a5 	bl	8005d10 <HAL_TIM_MspPostInit>

}
 8005bc6:	bf00      	nop
 8005bc8:	3728      	adds	r7, #40	; 0x28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200097b0 	.word	0x200097b0

08005bd4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bda:	f107 0310 	add.w	r3, r7, #16
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	605a      	str	r2, [r3, #4]
 8005be4:	609a      	str	r2, [r3, #8]
 8005be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005bf4:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <MX_TIM8_Init+0xa4>)
 8005bf6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20999;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c06:	f245 2207 	movw	r2, #20999	; 0x5207
 8005c0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c12:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005c1e:	4815      	ldr	r0, [pc, #84]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c20:	f004 fc16 	bl	800a450 <HAL_TIM_Base_Init>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8005c2a:	f7ff f8e8 	bl	8004dfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005c34:	f107 0310 	add.w	r3, r7, #16
 8005c38:	4619      	mov	r1, r3
 8005c3a:	480e      	ldr	r0, [pc, #56]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c3c:	f005 f8d6 	bl	800adec <HAL_TIM_ConfigClockSource>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8005c46:	f7ff f8da 	bl	8004dfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4806      	ldr	r0, [pc, #24]	; (8005c74 <MX_TIM8_Init+0xa0>)
 8005c5c:	f005 fea2 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005c66:	f7ff f8ca 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005c6a:	bf00      	nop
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200097fc 	.word	0x200097fc
 8005c78:	40013400 	.word	0x40013400

08005c7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d113      	bne.n	8005cb6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_TIM_PWM_MspInit+0x44>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <HAL_TIM_PWM_MspInit+0x44>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6593      	str	r3, [r2, #88]	; 0x58
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_TIM_PWM_MspInit+0x44>)
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	201c      	movs	r0, #28
 8005cac:	f001 fe87 	bl	80079be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005cb0:	201c      	movs	r0, #28
 8005cb2:	f001 fe9e 	bl	80079f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <HAL_TIM_Base_MspInit+0x44>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d113      	bne.n	8005cfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <HAL_TIM_Base_MspInit+0x48>)
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <HAL_TIM_Base_MspInit+0x48>)
 8005cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <HAL_TIM_Base_MspInit+0x48>)
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	202c      	movs	r0, #44	; 0x2c
 8005cf4:	f001 fe63 	bl	80079be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8005cf8:	202c      	movs	r0, #44	; 0x2c
 8005cfa:	f001 fe7a 	bl	80079f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40013400 	.word	0x40013400
 8005d0c:	40021000 	.word	0x40021000

08005d10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d30:	d11c      	bne.n	8005d6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <HAL_TIM_MspPostInit+0x64>)
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <HAL_TIM_MspPostInit+0x64>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <HAL_TIM_MspPostInit+0x64>)
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005d4a:	2307      	movs	r3, #7
 8005d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5e:	f107 030c 	add.w	r3, r7, #12
 8005d62:	4619      	mov	r1, r3
 8005d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d68:	f002 fd90 	bl	800888c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005d6c:	bf00      	nop
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40021000 	.word	0x40021000

08005d78 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005d7c:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005d7e:	4a23      	ldr	r2, [pc, #140]	; (8005e0c <MX_USART3_UART_Init+0x94>)
 8005d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d8a:	4b1f      	ldr	r3, [pc, #124]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d96:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005d9e:	220c      	movs	r2, #12
 8005da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005da8:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dae:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005db4:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005dc0:	4811      	ldr	r0, [pc, #68]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005dc2:	f005 fecb 	bl	800bb5c <HAL_UART_Init>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005dcc:	f7ff f817 	bl	8004dfe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	480d      	ldr	r0, [pc, #52]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005dd4:	f007 fe6d 	bl	800dab2 <HAL_UARTEx_SetTxFifoThreshold>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005dde:	f7ff f80e 	bl	8004dfe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005de2:	2100      	movs	r1, #0
 8005de4:	4808      	ldr	r0, [pc, #32]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005de6:	f007 fea2 	bl	800db2e <HAL_UARTEx_SetRxFifoThreshold>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005df0:	f7ff f805 	bl	8004dfe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005df4:	4804      	ldr	r0, [pc, #16]	; (8005e08 <MX_USART3_UART_Init+0x90>)
 8005df6:	f007 fe23 	bl	800da40 <HAL_UARTEx_DisableFifoMode>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005e00:	f7fe fffd 	bl	8004dfe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e04:	bf00      	nop
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20009848 	.word	0x20009848
 8005e0c:	40004800 	.word	0x40004800

08005e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b09e      	sub	sp, #120	; 0x78
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	60da      	str	r2, [r3, #12]
 8005e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	2254      	movs	r2, #84	; 0x54
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f007 ff49 	bl	800dcc8 <memset>
  if(uartHandle->Instance==USART3)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <HAL_UART_MspInit+0xb8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d13e      	bne.n	8005ebe <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005e40:	2304      	movs	r3, #4
 8005e42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e48:	f107 0310 	add.w	r3, r7, #16
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f003 fc8f 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005e58:	f7fe ffd1 	bl	8004dfe <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_UART_MspInit+0xbc>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_UART_MspInit+0xbc>)
 8005e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <HAL_UART_MspInit+0xbc>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_UART_MspInit+0xbc>)
 8005e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e78:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <HAL_UART_MspInit+0xbc>)
 8005e7a:	f043 0304 	orr.w	r3, r3, #4
 8005e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_UART_MspInit+0xbc>)
 8005e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005e8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e90:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e92:	2302      	movs	r3, #2
 8005e94:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e9e:	2307      	movs	r3, #7
 8005ea0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ea2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4809      	ldr	r0, [pc, #36]	; (8005ed0 <HAL_UART_MspInit+0xc0>)
 8005eaa:	f002 fcef 	bl	800888c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2027      	movs	r0, #39	; 0x27
 8005eb4:	f001 fd83 	bl	80079be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005eb8:	2027      	movs	r0, #39	; 0x27
 8005eba:	f001 fd9a 	bl	80079f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	3778      	adds	r7, #120	; 0x78
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	48000800 	.word	0x48000800

08005ed4 <__io_putchar>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xffff);
 8005edc:	1d39      	adds	r1, r7, #4
 8005ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4803      	ldr	r0, [pc, #12]	; (8005ef4 <__io_putchar+0x20>)
 8005ee6:	f005 fe89 	bl	800bbfc <HAL_UART_Transmit>
return 0;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20009848 	.word	0x20009848

08005ef8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 8005f00:	2201      	movs	r2, #1
 8005f02:	4904      	ldr	r1, [pc, #16]	; (8005f14 <HAL_UART_RxCpltCallback+0x1c>)
 8005f04:	4804      	ldr	r0, [pc, #16]	; (8005f18 <HAL_UART_RxCpltCallback+0x20>)
 8005f06:	f005 ff0f 	bl	800bd28 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200096e0 	.word	0x200096e0
 8005f18:	20009848 	.word	0x20009848

08005f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f1c:	480d      	ldr	r0, [pc, #52]	; (8005f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f20:	480d      	ldr	r0, [pc, #52]	; (8005f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f22:	490e      	ldr	r1, [pc, #56]	; (8005f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f24:	4a0e      	ldr	r2, [pc, #56]	; (8005f60 <LoopForever+0xe>)
  movs r3, #0
 8005f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f28:	e002      	b.n	8005f30 <LoopCopyDataInit>

08005f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f2e:	3304      	adds	r3, #4

08005f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f34:	d3f9      	bcc.n	8005f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f36:	4a0b      	ldr	r2, [pc, #44]	; (8005f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f38:	4c0b      	ldr	r4, [pc, #44]	; (8005f68 <LoopForever+0x16>)
  movs r3, #0
 8005f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f3c:	e001      	b.n	8005f42 <LoopFillZerobss>

08005f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f40:	3204      	adds	r2, #4

08005f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f44:	d3fb      	bcc.n	8005f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f46:	f7ff fdbf 	bl	8005ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f4a:	f007 fe8b 	bl	800dc64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f4e:	f7fe fc47 	bl	80047e0 <main>

08005f52 <LoopForever>:

LoopForever:
    b LoopForever
 8005f52:	e7fe      	b.n	8005f52 <LoopForever>
  ldr   r0, =_estack
 8005f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f5c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8005f60:	08014318 	.word	0x08014318
  ldr r2, =_sbss
 8005f64:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005f68:	200098ec 	.word	0x200098ec

08005f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f6c:	e7fe      	b.n	8005f6c <ADC1_2_IRQHandler>

08005f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f78:	2003      	movs	r0, #3
 8005f7a:	f001 fd15 	bl	80079a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f000 f80e 	bl	8005fa0 <HAL_InitTick>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	71fb      	strb	r3, [r7, #7]
 8005f8e:	e001      	b.n	8005f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f90:	f7ff fc16 	bl	80057c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f94:	79fb      	ldrb	r3, [r7, #7]

}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <HAL_InitTick+0x68>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d022      	beq.n	8005ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <HAL_InitTick+0x6c>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b13      	ldr	r3, [pc, #76]	; (8006008 <HAL_InitTick+0x68>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fd20 	bl	8007a0e <HAL_SYSTICK_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10f      	bne.n	8005ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d809      	bhi.n	8005fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	f001 fcec 	bl	80079be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <HAL_InitTick+0x70>)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e007      	b.n	8005ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
 8005ff2:	e004      	b.n	8005ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	e001      	b.n	8005ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000028 	.word	0x20000028
 800600c:	20000020 	.word	0x20000020
 8006010:	20000024 	.word	0x20000024

08006014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_IncTick+0x1c>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_IncTick+0x20>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4413      	add	r3, r2
 8006022:	4a03      	ldr	r2, [pc, #12]	; (8006030 <HAL_IncTick+0x1c>)
 8006024:	6013      	str	r3, [r2, #0]
}
 8006026:	bf00      	nop
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	200098d8 	.word	0x200098d8
 8006034:	20000028 	.word	0x20000028

08006038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  return uwTick;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_GetTick+0x14>)
 800603e:	681b      	ldr	r3, [r3, #0]
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200098d8 	.word	0x200098d8

08006050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006058:	f7ff ffee 	bl	8006038 <HAL_GetTick>
 800605c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d004      	beq.n	8006074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_Delay+0x40>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006074:	bf00      	nop
 8006076:	f7ff ffdf 	bl	8006038 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	429a      	cmp	r2, r3
 8006084:	d8f7      	bhi.n	8006076 <HAL_Delay+0x26>
  {
  }
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000028 	.word	0x20000028

08006094 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	609a      	str	r2, [r3, #8]
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3360      	adds	r3, #96	; 0x60
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4b08      	ldr	r3, [pc, #32]	; (8006140 <LL_ADC_SetOffset+0x44>)
 800611e:	4013      	ands	r3, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	4313      	orrs	r3, r2
 800612c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	03fff000 	.word	0x03fff000

08006144 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3360      	adds	r3, #96	; 0x60
 8006152:	461a      	mov	r2, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3360      	adds	r3, #96	; 0x60
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	431a      	orrs	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3360      	adds	r3, #96	; 0x60
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3360      	adds	r3, #96	; 0x60
 80061ec:	461a      	mov	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	431a      	orrs	r2, r3
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	615a      	str	r2, [r3, #20]
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800625e:	b480      	push	{r7}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3330      	adds	r3, #48	; 0x30
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	4413      	add	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	211f      	movs	r1, #31
 800628a:	fa01 f303 	lsl.w	r3, r1, r3
 800628e:	43db      	mvns	r3, r3
 8006290:	401a      	ands	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0e9b      	lsrs	r3, r3, #26
 8006296:	f003 011f 	and.w	r1, r3, #31
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	431a      	orrs	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3314      	adds	r3, #20
 80062c6:	461a      	mov	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	0e5b      	lsrs	r3, r3, #25
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	4413      	add	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2107      	movs	r1, #7
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	401a      	ands	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	0d1b      	lsrs	r3, r3, #20
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	431a      	orrs	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a0f      	ldr	r2, [pc, #60]	; (8006358 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10a      	bne.n	8006336 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632c:	431a      	orrs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006334:	e00a      	b.n	800634c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006342:	43db      	mvns	r3, r3
 8006344:	401a      	ands	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	407f0000 	.word	0x407f0000

0800635c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 031f 	and.w	r3, r3, #31
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80063a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6093      	str	r3, [r2, #8]
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063cc:	d101      	bne.n	80063d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80063f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800641c:	d101      	bne.n	8006422 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006444:	f043 0201 	orr.w	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <LL_ADC_IsEnabled+0x18>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <LL_ADC_IsEnabled+0x1a>
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800648e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006492:	f043 0204 	orr.w	r2, r3, #4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d101      	bne.n	80064be <LL_ADC_REG_IsConversionOngoing+0x18>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d101      	bne.n	80064e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006500:	2300      	movs	r3, #0
 8006502:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e1af      	b.n	800686e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d109      	bne.n	8006530 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fa ffb5 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff3f 	bl	80063b8 <LL_ADC_IsDeepPowerDownEnabled>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff ff25 	bl	8006394 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff ff5a 	bl	8006408 <LL_ADC_IsInternalRegulatorEnabled>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d115      	bne.n	8006586 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff3e 	bl	80063e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006564:	4b9f      	ldr	r3, [pc, #636]	; (80067e4 <HAL_ADC_Init+0x2f0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	099b      	lsrs	r3, r3, #6
 800656a:	4a9f      	ldr	r2, [pc, #636]	; (80067e8 <HAL_ADC_Init+0x2f4>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	099b      	lsrs	r3, r3, #6
 8006572:	3301      	adds	r3, #1
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006578:	e002      	b.n	8006580 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	3b01      	subs	r3, #1
 800657e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f9      	bne.n	800657a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff ff3c 	bl	8006408 <LL_ADC_IsInternalRegulatorEnabled>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	f043 0210 	orr.w	r2, r3, #16
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a6:	f043 0201 	orr.w	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff ff75 	bl	80064a6 <LL_ADC_REG_IsConversionOngoing>
 80065bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 8148 	bne.w	800685c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 8144 	bne.w	800685c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80065dc:	f043 0202 	orr.w	r2, r3, #2
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff35 	bl	8006458 <LL_ADC_IsEnabled>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d141      	bne.n	8006678 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065fc:	d004      	beq.n	8006608 <HAL_ADC_Init+0x114>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a7a      	ldr	r2, [pc, #488]	; (80067ec <HAL_ADC_Init+0x2f8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10f      	bne.n	8006628 <HAL_ADC_Init+0x134>
 8006608:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800660c:	f7ff ff24 	bl	8006458 <LL_ADC_IsEnabled>
 8006610:	4604      	mov	r4, r0
 8006612:	4876      	ldr	r0, [pc, #472]	; (80067ec <HAL_ADC_Init+0x2f8>)
 8006614:	f7ff ff20 	bl	8006458 <LL_ADC_IsEnabled>
 8006618:	4603      	mov	r3, r0
 800661a:	4323      	orrs	r3, r4
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e012      	b.n	800664e <HAL_ADC_Init+0x15a>
 8006628:	4871      	ldr	r0, [pc, #452]	; (80067f0 <HAL_ADC_Init+0x2fc>)
 800662a:	f7ff ff15 	bl	8006458 <LL_ADC_IsEnabled>
 800662e:	4604      	mov	r4, r0
 8006630:	4870      	ldr	r0, [pc, #448]	; (80067f4 <HAL_ADC_Init+0x300>)
 8006632:	f7ff ff11 	bl	8006458 <LL_ADC_IsEnabled>
 8006636:	4603      	mov	r3, r0
 8006638:	431c      	orrs	r4, r3
 800663a:	486f      	ldr	r0, [pc, #444]	; (80067f8 <HAL_ADC_Init+0x304>)
 800663c:	f7ff ff0c 	bl	8006458 <LL_ADC_IsEnabled>
 8006640:	4603      	mov	r3, r0
 8006642:	4323      	orrs	r3, r4
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d012      	beq.n	8006678 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800665a:	d004      	beq.n	8006666 <HAL_ADC_Init+0x172>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a62      	ldr	r2, [pc, #392]	; (80067ec <HAL_ADC_Init+0x2f8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_ADC_Init+0x176>
 8006666:	4a65      	ldr	r2, [pc, #404]	; (80067fc <HAL_ADC_Init+0x308>)
 8006668:	e000      	b.n	800666c <HAL_ADC_Init+0x178>
 800666a:	4a65      	ldr	r2, [pc, #404]	; (8006800 <HAL_ADC_Init+0x30c>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7ff fd0e 	bl	8006094 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7f5b      	ldrb	r3, [r3, #29]
 800667c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006682:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006688:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800668e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006696:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d106      	bne.n	80066b4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	045b      	lsls	r3, r3, #17
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <HAL_ADC_Init+0x310>)
 80066d8:	4013      	ands	r3, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6812      	ldr	r2, [r2, #0]
 80066de:	69b9      	ldr	r1, [r7, #24]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fed1 	bl	80064a6 <LL_ADC_REG_IsConversionOngoing>
 8006704:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fede 	bl	80064cc <LL_ADC_INJ_IsConversionOngoing>
 8006710:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d17f      	bne.n	8006818 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d17c      	bne.n	8006818 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006722:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800672a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800673a:	f023 0302 	bic.w	r3, r3, #2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	69b9      	ldr	r1, [r7, #24]
 8006744:	430b      	orrs	r3, r1
 8006746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d017      	beq.n	8006780 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800675e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006768:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800676c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6911      	ldr	r1, [r2, #16]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	430b      	orrs	r3, r1
 800677a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800677e:	e013      	b.n	80067a8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800678e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80067a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d12a      	bne.n	8006808 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067bc:	f023 0304 	bic.w	r3, r3, #4
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067c8:	4311      	orrs	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067ce:	4311      	orrs	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067d4:	430a      	orrs	r2, r1
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	611a      	str	r2, [r3, #16]
 80067e2:	e019      	b.n	8006818 <HAL_ADC_Init+0x324>
 80067e4:	20000020 	.word	0x20000020
 80067e8:	053e2d63 	.word	0x053e2d63
 80067ec:	50000100 	.word	0x50000100
 80067f0:	50000400 	.word	0x50000400
 80067f4:	50000500 	.word	0x50000500
 80067f8:	50000600 	.word	0x50000600
 80067fc:	50000300 	.word	0x50000300
 8006800:	50000700 	.word	0x50000700
 8006804:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10c      	bne.n	800683a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	f023 010f 	bic.w	r1, r3, #15
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
 8006838:	e007      	b.n	800684a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 020f 	bic.w	r2, r2, #15
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684e:	f023 0303 	bic.w	r3, r3, #3
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	65da      	str	r2, [r3, #92]	; 0x5c
 800685a:	e007      	b.n	800686c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	f043 0210 	orr.w	r2, r3, #16
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800686c:	7ffb      	ldrb	r3, [r7, #31]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3724      	adds	r7, #36	; 0x24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}
 8006876:	bf00      	nop

08006878 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006888:	d004      	beq.n	8006894 <HAL_ADC_Start+0x1c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a67      	ldr	r2, [pc, #412]	; (8006a2c <HAL_ADC_Start+0x1b4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d101      	bne.n	8006898 <HAL_ADC_Start+0x20>
 8006894:	4b66      	ldr	r3, [pc, #408]	; (8006a30 <HAL_ADC_Start+0x1b8>)
 8006896:	e000      	b.n	800689a <HAL_ADC_Start+0x22>
 8006898:	4b66      	ldr	r3, [pc, #408]	; (8006a34 <HAL_ADC_Start+0x1bc>)
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fd5e 	bl	800635c <LL_ADC_GetMultimode>
 80068a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fdfd 	bl	80064a6 <LL_ADC_REG_IsConversionOngoing>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 80b4 	bne.w	8006a1c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_ADC_Start+0x4a>
 80068be:	2302      	movs	r3, #2
 80068c0:	e0af      	b.n	8006a22 <HAL_ADC_Start+0x1aa>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fe0c 	bl	80074e8 <ADC_Enable>
 80068d0:	4603      	mov	r3, r0
 80068d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f040 809b 	bne.w	8006a12 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a4d      	ldr	r2, [pc, #308]	; (8006a2c <HAL_ADC_Start+0x1b4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d009      	beq.n	800690e <HAL_ADC_Start+0x96>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a4e      	ldr	r2, [pc, #312]	; (8006a38 <HAL_ADC_Start+0x1c0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d002      	beq.n	800690a <HAL_ADC_Start+0x92>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	e003      	b.n	8006912 <HAL_ADC_Start+0x9a>
 800690a:	4b4c      	ldr	r3, [pc, #304]	; (8006a3c <HAL_ADC_Start+0x1c4>)
 800690c:	e001      	b.n	8006912 <HAL_ADC_Start+0x9a>
 800690e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	4293      	cmp	r3, r2
 8006918:	d002      	beq.n	8006920 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006938:	d106      	bne.n	8006948 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693e:	f023 0206 	bic.w	r2, r3, #6
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	661a      	str	r2, [r3, #96]	; 0x60
 8006946:	e002      	b.n	800694e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	221c      	movs	r2, #28
 8006954:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a32      	ldr	r2, [pc, #200]	; (8006a2c <HAL_ADC_Start+0x1b4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_ADC_Start+0x104>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a32      	ldr	r2, [pc, #200]	; (8006a38 <HAL_ADC_Start+0x1c0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d002      	beq.n	8006978 <HAL_ADC_Start+0x100>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	e003      	b.n	8006980 <HAL_ADC_Start+0x108>
 8006978:	4b30      	ldr	r3, [pc, #192]	; (8006a3c <HAL_ADC_Start+0x1c4>)
 800697a:	e001      	b.n	8006980 <HAL_ADC_Start+0x108>
 800697c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	4293      	cmp	r3, r2
 8006986:	d008      	beq.n	800699a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b05      	cmp	r3, #5
 8006992:	d002      	beq.n	800699a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b09      	cmp	r3, #9
 8006998:	d114      	bne.n	80069c4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fd5e 	bl	800647e <LL_ADC_REG_StartConversion>
 80069c2:	e02d      	b.n	8006a20 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <HAL_ADC_Start+0x1b4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_ADC_Start+0x176>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_ADC_Start+0x1c0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d002      	beq.n	80069ea <HAL_ADC_Start+0x172>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	e003      	b.n	80069f2 <HAL_ADC_Start+0x17a>
 80069ea:	4b14      	ldr	r3, [pc, #80]	; (8006a3c <HAL_ADC_Start+0x1c4>)
 80069ec:	e001      	b.n	80069f2 <HAL_ADC_Start+0x17a>
 80069ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80069f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00f      	beq.n	8006a20 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a10:	e006      	b.n	8006a20 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006a1a:	e001      	b.n	8006a20 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	50000100 	.word	0x50000100
 8006a30:	50000300 	.word	0x50000300
 8006a34:	50000700 	.word	0x50000700
 8006a38:	50000500 	.word	0x50000500
 8006a3c:	50000400 	.word	0x50000400

08006a40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a52:	d004      	beq.n	8006a5e <HAL_ADC_PollForConversion+0x1e>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a77      	ldr	r2, [pc, #476]	; (8006c38 <HAL_ADC_PollForConversion+0x1f8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d101      	bne.n	8006a62 <HAL_ADC_PollForConversion+0x22>
 8006a5e:	4b77      	ldr	r3, [pc, #476]	; (8006c3c <HAL_ADC_PollForConversion+0x1fc>)
 8006a60:	e000      	b.n	8006a64 <HAL_ADC_PollForConversion+0x24>
 8006a62:	4b77      	ldr	r3, [pc, #476]	; (8006c40 <HAL_ADC_PollForConversion+0x200>)
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fc79 	bl	800635c <LL_ADC_GetMultimode>
 8006a6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d102      	bne.n	8006a7a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006a74:	2308      	movs	r3, #8
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	e037      	b.n	8006aea <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	d002      	beq.n	8006a8c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	d111      	bne.n	8006ab0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9e:	f043 0220 	orr.w	r2, r3, #32
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0c1      	b.n	8006c2e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006aaa:	2304      	movs	r3, #4
 8006aac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006aae:	e01c      	b.n	8006aea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ab8:	d004      	beq.n	8006ac4 <HAL_ADC_PollForConversion+0x84>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a5e      	ldr	r2, [pc, #376]	; (8006c38 <HAL_ADC_PollForConversion+0x1f8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d101      	bne.n	8006ac8 <HAL_ADC_PollForConversion+0x88>
 8006ac4:	4b5d      	ldr	r3, [pc, #372]	; (8006c3c <HAL_ADC_PollForConversion+0x1fc>)
 8006ac6:	e000      	b.n	8006aca <HAL_ADC_PollForConversion+0x8a>
 8006ac8:	4b5d      	ldr	r3, [pc, #372]	; (8006c40 <HAL_ADC_PollForConversion+0x200>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fc54 	bl	8006378 <LL_ADC_GetMultiDMATransfer>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0a3      	b.n	8006c2e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006aea:	f7ff faa5 	bl	8006038 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006af0:	e021      	b.n	8006b36 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d01d      	beq.n	8006b36 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006afa:	f7ff fa9d 	bl	8006038 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d302      	bcc.n	8006b10 <HAL_ADC_PollForConversion+0xd0>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d112      	bne.n	8006b36 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e07b      	b.n	8006c2e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0d6      	beq.n	8006af2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fb6f 	bl	8006238 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01c      	beq.n	8006b9a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7f5b      	ldrb	r3, [r3, #29]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d118      	bne.n	8006b9a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d111      	bne.n	8006b9a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d105      	bne.n	8006b9a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b92:	f043 0201 	orr.w	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <HAL_ADC_PollForConversion+0x1f8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_ADC_PollForConversion+0x178>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <HAL_ADC_PollForConversion+0x204>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d002      	beq.n	8006bb4 <HAL_ADC_PollForConversion+0x174>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	e003      	b.n	8006bbc <HAL_ADC_PollForConversion+0x17c>
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <HAL_ADC_PollForConversion+0x208>)
 8006bb6:	e001      	b.n	8006bbc <HAL_ADC_PollForConversion+0x17c>
 8006bb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d008      	beq.n	8006bd6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d002      	beq.n	8006bd6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2b09      	cmp	r3, #9
 8006bd4:	d104      	bne.n	8006be0 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e014      	b.n	8006c0a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <HAL_ADC_PollForConversion+0x1f8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d009      	beq.n	8006bfe <HAL_ADC_PollForConversion+0x1be>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <HAL_ADC_PollForConversion+0x204>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d002      	beq.n	8006bfa <HAL_ADC_PollForConversion+0x1ba>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	e003      	b.n	8006c02 <HAL_ADC_PollForConversion+0x1c2>
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <HAL_ADC_PollForConversion+0x208>)
 8006bfc:	e001      	b.n	8006c02 <HAL_ADC_PollForConversion+0x1c2>
 8006bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d104      	bne.n	8006c1a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2208      	movs	r2, #8
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	e008      	b.n	8006c2c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	220c      	movs	r2, #12
 8006c2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	50000100 	.word	0x50000100
 8006c3c:	50000300 	.word	0x50000300
 8006c40:	50000700 	.word	0x50000700
 8006c44:	50000500 	.word	0x50000500
 8006c48:	50000400 	.word	0x50000400

08006c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b0b6      	sub	sp, #216	; 0xd8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d102      	bne.n	8006c8c <HAL_ADC_ConfigChannel+0x24>
 8006c86:	2302      	movs	r3, #2
 8006c88:	f000 bc13 	b.w	80074b2 <HAL_ADC_ConfigChannel+0x84a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fc04 	bl	80064a6 <LL_ADC_REG_IsConversionOngoing>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 83f3 	bne.w	800748c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7ff fad3 	bl	800625e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff fbf2 	bl	80064a6 <LL_ADC_REG_IsConversionOngoing>
 8006cc2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff fbfe 	bl	80064cc <LL_ADC_INJ_IsConversionOngoing>
 8006cd0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006cd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 81d9 	bne.w	8007090 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 81d4 	bne.w	8007090 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf0:	d10f      	bne.n	8006d12 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f7ff fada 	bl	80062b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fa81 	bl	8006212 <LL_ADC_SetSamplingTimeCommonConfig>
 8006d10:	e00e      	b.n	8006d30 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6819      	ldr	r1, [r3, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7ff fac9 	bl	80062b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff fa71 	bl	8006212 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	08db      	lsrs	r3, r3, #3
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d022      	beq.n	8006d98 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6919      	ldr	r1, [r3, #16]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d62:	f7ff f9cb 	bl	80060fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6919      	ldr	r1, [r3, #16]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f7ff fa17 	bl	80061a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6919      	ldr	r1, [r3, #16]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	7f1b      	ldrb	r3, [r3, #28]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d102      	bne.n	8006d8e <HAL_ADC_ConfigChannel+0x126>
 8006d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d8c:	e000      	b.n	8006d90 <HAL_ADC_ConfigChannel+0x128>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	461a      	mov	r2, r3
 8006d92:	f7ff fa23 	bl	80061dc <LL_ADC_SetOffsetSaturation>
 8006d96:	e17b      	b.n	8007090 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff f9d0 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x15c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff f9c5 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	0e9b      	lsrs	r3, r3, #26
 8006dbe:	f003 021f 	and.w	r2, r3, #31
 8006dc2:	e01e      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x19a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f9ba 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dda:	fa93 f3a3 	rbit	r3, r3
 8006dde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006df2:	2320      	movs	r3, #32
 8006df4:	e004      	b.n	8006e00 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dfa:	fab3 f383 	clz	r3, r3
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_ADC_ConfigChannel+0x1b2>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	0e9b      	lsrs	r3, r3, #26
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	e018      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x1e4>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e26:	fa93 f3a3 	rbit	r3, r3
 8006e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006e3e:	2320      	movs	r3, #32
 8006e40:	e004      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e46:	fab3 f383 	clz	r3, r3
 8006e4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d106      	bne.n	8006e5e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff f989 	bl	8006170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2101      	movs	r1, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f96d 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <HAL_ADC_ConfigChannel+0x222>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2101      	movs	r1, #1
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff f962 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006e80:	4603      	mov	r3, r0
 8006e82:	0e9b      	lsrs	r3, r3, #26
 8006e84:	f003 021f 	and.w	r2, r3, #31
 8006e88:	e01e      	b.n	8006ec8 <HAL_ADC_ConfigChannel+0x260>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2101      	movs	r1, #1
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff f957 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ea0:	fa93 f3a3 	rbit	r3, r3
 8006ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006eb8:	2320      	movs	r3, #32
 8006eba:	e004      	b.n	8006ec6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ec0:	fab3 f383 	clz	r3, r3
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x278>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	0e9b      	lsrs	r3, r3, #26
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	e018      	b.n	8006f12 <HAL_ADC_ConfigChannel+0x2aa>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eec:	fa93 f3a3 	rbit	r3, r3
 8006ef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006f04:	2320      	movs	r3, #32
 8006f06:	e004      	b.n	8006f12 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f0c:	fab3 f383 	clz	r3, r3
 8006f10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d106      	bne.n	8006f24 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff f926 	bl	8006170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2102      	movs	r1, #2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff f90a 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <HAL_ADC_ConfigChannel+0x2e8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2102      	movs	r1, #2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff f8ff 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006f46:	4603      	mov	r3, r0
 8006f48:	0e9b      	lsrs	r3, r3, #26
 8006f4a:	f003 021f 	and.w	r2, r3, #31
 8006f4e:	e01e      	b.n	8006f8e <HAL_ADC_ConfigChannel+0x326>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2102      	movs	r1, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff f8f4 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f66:	fa93 f3a3 	rbit	r3, r3
 8006f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006f7e:	2320      	movs	r3, #32
 8006f80:	e004      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f86:	fab3 f383 	clz	r3, r3
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <HAL_ADC_ConfigChannel+0x33e>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	0e9b      	lsrs	r3, r3, #26
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	e016      	b.n	8006fd4 <HAL_ADC_ConfigChannel+0x36c>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fb2:	fa93 f3a3 	rbit	r3, r3
 8006fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006fc6:	2320      	movs	r3, #32
 8006fc8:	e004      	b.n	8006fd4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fce:	fab3 f383 	clz	r3, r3
 8006fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d106      	bne.n	8006fe6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2102      	movs	r1, #2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff f8c5 	bl	8006170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2103      	movs	r1, #3
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff f8a9 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <HAL_ADC_ConfigChannel+0x3aa>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2103      	movs	r1, #3
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff f89e 	bl	8006144 <LL_ADC_GetOffsetChannel>
 8007008:	4603      	mov	r3, r0
 800700a:	0e9b      	lsrs	r3, r3, #26
 800700c:	f003 021f 	and.w	r2, r3, #31
 8007010:	e017      	b.n	8007042 <HAL_ADC_ConfigChannel+0x3da>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2103      	movs	r1, #3
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff f893 	bl	8006144 <LL_ADC_GetOffsetChannel>
 800701e:	4603      	mov	r3, r0
 8007020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007024:	fa93 f3a3 	rbit	r3, r3
 8007028:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800702a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800702c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800702e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007034:	2320      	movs	r3, #32
 8007036:	e003      	b.n	8007040 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800703a:	fab3 f383 	clz	r3, r3
 800703e:	b2db      	uxtb	r3, r3
 8007040:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <HAL_ADC_ConfigChannel+0x3f2>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	0e9b      	lsrs	r3, r3, #26
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	e011      	b.n	800707e <HAL_ADC_ConfigChannel+0x416>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007062:	fa93 f3a3 	rbit	r3, r3
 8007066:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800706a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007072:	2320      	movs	r3, #32
 8007074:	e003      	b.n	800707e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007078:	fab3 f383 	clz	r3, r3
 800707c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800707e:	429a      	cmp	r2, r3
 8007080:	d106      	bne.n	8007090 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	2103      	movs	r1, #3
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff f870 	bl	8006170 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff f9df 	bl	8006458 <LL_ADC_IsEnabled>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 813d 	bne.w	800731c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6819      	ldr	r1, [r3, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7ff f92c 	bl	800630c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4aa2      	ldr	r2, [pc, #648]	; (8007344 <HAL_ADC_ConfigChannel+0x6dc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f040 812e 	bne.w	800731c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x480>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	0e9b      	lsrs	r3, r3, #26
 80070d6:	3301      	adds	r3, #1
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	2b09      	cmp	r3, #9
 80070de:	bf94      	ite	ls
 80070e0:	2301      	movls	r3, #1
 80070e2:	2300      	movhi	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	e019      	b.n	800711c <HAL_ADC_ConfigChannel+0x4b4>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f0:	fa93 f3a3 	rbit	r3, r3
 80070f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80070f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80070fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007100:	2320      	movs	r3, #32
 8007102:	e003      	b.n	800710c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007106:	fab3 f383 	clz	r3, r3
 800710a:	b2db      	uxtb	r3, r3
 800710c:	3301      	adds	r3, #1
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	2b09      	cmp	r3, #9
 8007114:	bf94      	ite	ls
 8007116:	2301      	movls	r3, #1
 8007118:	2300      	movhi	r3, #0
 800711a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800711c:	2b00      	cmp	r3, #0
 800711e:	d079      	beq.n	8007214 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <HAL_ADC_ConfigChannel+0x4d4>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	0e9b      	lsrs	r3, r3, #26
 8007132:	3301      	adds	r3, #1
 8007134:	069b      	lsls	r3, r3, #26
 8007136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800713a:	e015      	b.n	8007168 <HAL_ADC_ConfigChannel+0x500>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007144:	fa93 f3a3 	rbit	r3, r3
 8007148:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800714e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007154:	2320      	movs	r3, #32
 8007156:	e003      	b.n	8007160 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800715a:	fab3 f383 	clz	r3, r3
 800715e:	b2db      	uxtb	r3, r3
 8007160:	3301      	adds	r3, #1
 8007162:	069b      	lsls	r3, r3, #26
 8007164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007170:	2b00      	cmp	r3, #0
 8007172:	d109      	bne.n	8007188 <HAL_ADC_ConfigChannel+0x520>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	0e9b      	lsrs	r3, r3, #26
 800717a:	3301      	adds	r3, #1
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2101      	movs	r1, #1
 8007182:	fa01 f303 	lsl.w	r3, r1, r3
 8007186:	e017      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x550>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007190:	fa93 f3a3 	rbit	r3, r3
 8007194:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007198:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800719a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80071a0:	2320      	movs	r3, #32
 80071a2:	e003      	b.n	80071ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80071a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a6:	fab3 f383 	clz	r3, r3
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	3301      	adds	r3, #1
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2101      	movs	r1, #1
 80071b4:	fa01 f303 	lsl.w	r3, r1, r3
 80071b8:	ea42 0103 	orr.w	r1, r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <HAL_ADC_ConfigChannel+0x576>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	0e9b      	lsrs	r3, r3, #26
 80071ce:	3301      	adds	r3, #1
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	4613      	mov	r3, r2
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	4413      	add	r3, r2
 80071da:	051b      	lsls	r3, r3, #20
 80071dc:	e018      	b.n	8007210 <HAL_ADC_ConfigChannel+0x5a8>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	fa93 f3a3 	rbit	r3, r3
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80071f6:	2320      	movs	r3, #32
 80071f8:	e003      	b.n	8007202 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80071fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fc:	fab3 f383 	clz	r3, r3
 8007200:	b2db      	uxtb	r3, r3
 8007202:	3301      	adds	r3, #1
 8007204:	f003 021f 	and.w	r2, r3, #31
 8007208:	4613      	mov	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4413      	add	r3, r2
 800720e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007210:	430b      	orrs	r3, r1
 8007212:	e07e      	b.n	8007312 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <HAL_ADC_ConfigChannel+0x5c8>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	0e9b      	lsrs	r3, r3, #26
 8007226:	3301      	adds	r3, #1
 8007228:	069b      	lsls	r3, r3, #26
 800722a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800722e:	e015      	b.n	800725c <HAL_ADC_ConfigChannel+0x5f4>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	fa93 f3a3 	rbit	r3, r3
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007248:	2320      	movs	r3, #32
 800724a:	e003      	b.n	8007254 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	fab3 f383 	clz	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	3301      	adds	r3, #1
 8007256:	069b      	lsls	r3, r3, #26
 8007258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <HAL_ADC_ConfigChannel+0x614>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	0e9b      	lsrs	r3, r3, #26
 800726e:	3301      	adds	r3, #1
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2101      	movs	r1, #1
 8007276:	fa01 f303 	lsl.w	r3, r1, r3
 800727a:	e017      	b.n	80072ac <HAL_ADC_ConfigChannel+0x644>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	fa93 f3a3 	rbit	r3, r3
 8007288:	61fb      	str	r3, [r7, #28]
  return result;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007294:	2320      	movs	r3, #32
 8007296:	e003      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	fab3 f383 	clz	r3, r3
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	3301      	adds	r3, #1
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	2101      	movs	r1, #1
 80072a8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ac:	ea42 0103 	orr.w	r1, r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10d      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x670>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	0e9b      	lsrs	r3, r3, #26
 80072c2:	3301      	adds	r3, #1
 80072c4:	f003 021f 	and.w	r2, r3, #31
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	3b1e      	subs	r3, #30
 80072d0:	051b      	lsls	r3, r3, #20
 80072d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072d6:	e01b      	b.n	8007310 <HAL_ADC_ConfigChannel+0x6a8>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	fa93 f3a3 	rbit	r3, r3
 80072e4:	613b      	str	r3, [r7, #16]
  return result;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80072f0:	2320      	movs	r3, #32
 80072f2:	e003      	b.n	80072fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	fab3 f383 	clz	r3, r3
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3301      	adds	r3, #1
 80072fe:	f003 021f 	and.w	r2, r3, #31
 8007302:	4613      	mov	r3, r2
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	4413      	add	r3, r2
 8007308:	3b1e      	subs	r3, #30
 800730a:	051b      	lsls	r3, r3, #20
 800730c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007310:	430b      	orrs	r3, r1
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	6892      	ldr	r2, [r2, #8]
 8007316:	4619      	mov	r1, r3
 8007318:	f7fe ffcd 	bl	80062b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <HAL_ADC_ConfigChannel+0x6e0>)
 8007322:	4013      	ands	r3, r2
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80be 	beq.w	80074a6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007332:	d004      	beq.n	800733e <HAL_ADC_ConfigChannel+0x6d6>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <HAL_ADC_ConfigChannel+0x6e4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d10a      	bne.n	8007354 <HAL_ADC_ConfigChannel+0x6ec>
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <HAL_ADC_ConfigChannel+0x6e8>)
 8007340:	e009      	b.n	8007356 <HAL_ADC_ConfigChannel+0x6ee>
 8007342:	bf00      	nop
 8007344:	407f0000 	.word	0x407f0000
 8007348:	80080000 	.word	0x80080000
 800734c:	50000100 	.word	0x50000100
 8007350:	50000300 	.word	0x50000300
 8007354:	4b59      	ldr	r3, [pc, #356]	; (80074bc <HAL_ADC_ConfigChannel+0x854>)
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fec2 	bl	80060e0 <LL_ADC_GetCommonPathInternalCh>
 800735c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a56      	ldr	r2, [pc, #344]	; (80074c0 <HAL_ADC_ConfigChannel+0x858>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_ADC_ConfigChannel+0x70c>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a55      	ldr	r2, [pc, #340]	; (80074c4 <HAL_ADC_ConfigChannel+0x85c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d13a      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d134      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007388:	d005      	beq.n	8007396 <HAL_ADC_ConfigChannel+0x72e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a4e      	ldr	r2, [pc, #312]	; (80074c8 <HAL_ADC_ConfigChannel+0x860>)
 8007390:	4293      	cmp	r3, r2
 8007392:	f040 8085 	bne.w	80074a0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800739e:	d004      	beq.n	80073aa <HAL_ADC_ConfigChannel+0x742>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a49      	ldr	r2, [pc, #292]	; (80074cc <HAL_ADC_ConfigChannel+0x864>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <HAL_ADC_ConfigChannel+0x746>
 80073aa:	4a49      	ldr	r2, [pc, #292]	; (80074d0 <HAL_ADC_ConfigChannel+0x868>)
 80073ac:	e000      	b.n	80073b0 <HAL_ADC_ConfigChannel+0x748>
 80073ae:	4a43      	ldr	r2, [pc, #268]	; (80074bc <HAL_ADC_ConfigChannel+0x854>)
 80073b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7fe fe7d 	bl	80060ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073c0:	4b44      	ldr	r3, [pc, #272]	; (80074d4 <HAL_ADC_ConfigChannel+0x86c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	099b      	lsrs	r3, r3, #6
 80073c6:	4a44      	ldr	r2, [pc, #272]	; (80074d8 <HAL_ADC_ConfigChannel+0x870>)
 80073c8:	fba2 2303 	umull	r2, r3, r2, r3
 80073cc:	099b      	lsrs	r3, r3, #6
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	4613      	mov	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80073da:	e002      	b.n	80073e2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3b01      	subs	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1f9      	bne.n	80073dc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073e8:	e05a      	b.n	80074a0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3b      	ldr	r2, [pc, #236]	; (80074dc <HAL_ADC_ConfigChannel+0x874>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d125      	bne.n	8007440 <HAL_ADC_ConfigChannel+0x7d8>
 80073f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11f      	bne.n	8007440 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a31      	ldr	r2, [pc, #196]	; (80074cc <HAL_ADC_ConfigChannel+0x864>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d104      	bne.n	8007414 <HAL_ADC_ConfigChannel+0x7ac>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a34      	ldr	r2, [pc, #208]	; (80074e0 <HAL_ADC_ConfigChannel+0x878>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d047      	beq.n	80074a4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741c:	d004      	beq.n	8007428 <HAL_ADC_ConfigChannel+0x7c0>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a2a      	ldr	r2, [pc, #168]	; (80074cc <HAL_ADC_ConfigChannel+0x864>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d101      	bne.n	800742c <HAL_ADC_ConfigChannel+0x7c4>
 8007428:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <HAL_ADC_ConfigChannel+0x868>)
 800742a:	e000      	b.n	800742e <HAL_ADC_ConfigChannel+0x7c6>
 800742c:	4a23      	ldr	r2, [pc, #140]	; (80074bc <HAL_ADC_ConfigChannel+0x854>)
 800742e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f7fe fe3e 	bl	80060ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800743e:	e031      	b.n	80074a4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <HAL_ADC_ConfigChannel+0x87c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d12d      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800744a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800744e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d127      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <HAL_ADC_ConfigChannel+0x864>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d022      	beq.n	80074a6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007468:	d004      	beq.n	8007474 <HAL_ADC_ConfigChannel+0x80c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a17      	ldr	r2, [pc, #92]	; (80074cc <HAL_ADC_ConfigChannel+0x864>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x810>
 8007474:	4a16      	ldr	r2, [pc, #88]	; (80074d0 <HAL_ADC_ConfigChannel+0x868>)
 8007476:	e000      	b.n	800747a <HAL_ADC_ConfigChannel+0x812>
 8007478:	4a10      	ldr	r2, [pc, #64]	; (80074bc <HAL_ADC_ConfigChannel+0x854>)
 800747a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800747e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7fe fe18 	bl	80060ba <LL_ADC_SetCommonPathInternalCh>
 800748a:	e00c      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800749e:	e002      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80074ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	37d8      	adds	r7, #216	; 0xd8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	50000700 	.word	0x50000700
 80074c0:	c3210000 	.word	0xc3210000
 80074c4:	90c00010 	.word	0x90c00010
 80074c8:	50000600 	.word	0x50000600
 80074cc:	50000100 	.word	0x50000100
 80074d0:	50000300 	.word	0x50000300
 80074d4:	20000020 	.word	0x20000020
 80074d8:	053e2d63 	.word	0x053e2d63
 80074dc:	c7520000 	.word	0xc7520000
 80074e0:	50000500 	.word	0x50000500
 80074e4:	cb840000 	.word	0xcb840000

080074e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe ffaf 	bl	8006458 <LL_ADC_IsEnabled>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d14d      	bne.n	800759c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <ADC_Enable+0xc0>)
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00d      	beq.n	800752a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	f043 0210 	orr.w	r2, r3, #16
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751e:	f043 0201 	orr.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e039      	b.n	800759e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe ff7e 	bl	8006430 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007534:	f7fe fd80 	bl	8006038 <HAL_GetTick>
 8007538:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800753a:	e028      	b.n	800758e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe ff89 	bl	8006458 <LL_ADC_IsEnabled>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe ff6d 	bl	8006430 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007556:	f7fe fd6f 	bl	8006038 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d914      	bls.n	800758e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d00d      	beq.n	800758e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007576:	f043 0210 	orr.w	r2, r3, #16
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007582:	f043 0201 	orr.w	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e007      	b.n	800759e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b01      	cmp	r3, #1
 800759a:	d1cf      	bne.n	800753c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	8000003f 	.word	0x8000003f

080075ac <LL_ADC_IsEnabled>:
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <LL_ADC_IsEnabled+0x18>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <LL_ADC_IsEnabled+0x1a>
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d101      	bne.n	80075ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b0a1      	sub	sp, #132	; 0x84
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007612:	2302      	movs	r3, #2
 8007614:	e0e7      	b.n	80077e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800761e:	2300      	movs	r3, #0
 8007620:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007622:	2300      	movs	r3, #0
 8007624:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762e:	d102      	bne.n	8007636 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007630:	4b6f      	ldr	r3, [pc, #444]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	e009      	b.n	800764a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a6e      	ldr	r2, [pc, #440]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d102      	bne.n	8007646 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007640:	4b6d      	ldr	r3, [pc, #436]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	e001      	b.n	800764a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007654:	f043 0220 	orr.w	r2, r3, #32
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0be      	b.n	80077e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff ffb1 	bl	80075d2 <LL_ADC_REG_IsConversionOngoing>
 8007670:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff ffab 	bl	80075d2 <LL_ADC_REG_IsConversionOngoing>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	f040 80a0 	bne.w	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 809c 	bne.w	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007694:	d004      	beq.n	80076a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a55      	ldr	r2, [pc, #340]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d101      	bne.n	80076a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80076a0:	4b56      	ldr	r3, [pc, #344]	; (80077fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80076a2:	e000      	b.n	80076a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80076a4:	4b56      	ldr	r3, [pc, #344]	; (8007800 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80076a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d04b      	beq.n	8007748 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80076b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076c2:	035b      	lsls	r3, r3, #13
 80076c4:	430b      	orrs	r3, r1
 80076c6:	431a      	orrs	r2, r3
 80076c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076d4:	d004      	beq.n	80076e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a45      	ldr	r2, [pc, #276]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10f      	bne.n	8007700 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80076e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80076e4:	f7ff ff62 	bl	80075ac <LL_ADC_IsEnabled>
 80076e8:	4604      	mov	r4, r0
 80076ea:	4841      	ldr	r0, [pc, #260]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076ec:	f7ff ff5e 	bl	80075ac <LL_ADC_IsEnabled>
 80076f0:	4603      	mov	r3, r0
 80076f2:	4323      	orrs	r3, r4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	e012      	b.n	8007726 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007700:	483c      	ldr	r0, [pc, #240]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007702:	f7ff ff53 	bl	80075ac <LL_ADC_IsEnabled>
 8007706:	4604      	mov	r4, r0
 8007708:	483b      	ldr	r0, [pc, #236]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800770a:	f7ff ff4f 	bl	80075ac <LL_ADC_IsEnabled>
 800770e:	4603      	mov	r3, r0
 8007710:	431c      	orrs	r4, r3
 8007712:	483c      	ldr	r0, [pc, #240]	; (8007804 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007714:	f7ff ff4a 	bl	80075ac <LL_ADC_IsEnabled>
 8007718:	4603      	mov	r3, r0
 800771a:	4323      	orrs	r3, r4
 800771c:	2b00      	cmp	r3, #0
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d056      	beq.n	80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800772a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007732:	f023 030f 	bic.w	r3, r3, #15
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	6811      	ldr	r1, [r2, #0]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	6892      	ldr	r2, [r2, #8]
 800773e:	430a      	orrs	r2, r1
 8007740:	431a      	orrs	r2, r3
 8007742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007744:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007746:	e047      	b.n	80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007752:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800775c:	d004      	beq.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10f      	bne.n	8007788 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007768:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800776c:	f7ff ff1e 	bl	80075ac <LL_ADC_IsEnabled>
 8007770:	4604      	mov	r4, r0
 8007772:	481f      	ldr	r0, [pc, #124]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007774:	f7ff ff1a 	bl	80075ac <LL_ADC_IsEnabled>
 8007778:	4603      	mov	r3, r0
 800777a:	4323      	orrs	r3, r4
 800777c:	2b00      	cmp	r3, #0
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e012      	b.n	80077ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007788:	481a      	ldr	r0, [pc, #104]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800778a:	f7ff ff0f 	bl	80075ac <LL_ADC_IsEnabled>
 800778e:	4604      	mov	r4, r0
 8007790:	4819      	ldr	r0, [pc, #100]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007792:	f7ff ff0b 	bl	80075ac <LL_ADC_IsEnabled>
 8007796:	4603      	mov	r3, r0
 8007798:	431c      	orrs	r4, r3
 800779a:	481a      	ldr	r0, [pc, #104]	; (8007804 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800779c:	f7ff ff06 	bl	80075ac <LL_ADC_IsEnabled>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4323      	orrs	r3, r4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bf0c      	ite	eq
 80077a8:	2301      	moveq	r3, #1
 80077aa:	2300      	movne	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d012      	beq.n	80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80077b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80077c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077c2:	e009      	b.n	80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	f043 0220 	orr.w	r2, r3, #32
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80077d6:	e000      	b.n	80077da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80077e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3784      	adds	r7, #132	; 0x84
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd90      	pop	{r4, r7, pc}
 80077ee:	bf00      	nop
 80077f0:	50000100 	.word	0x50000100
 80077f4:	50000400 	.word	0x50000400
 80077f8:	50000500 	.word	0x50000500
 80077fc:	50000300 	.word	0x50000300
 8007800:	50000700 	.word	0x50000700
 8007804:	50000600 	.word	0x50000600

08007808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <__NVIC_SetPriorityGrouping+0x44>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007824:	4013      	ands	r3, r2
 8007826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800783a:	4a04      	ldr	r2, [pc, #16]	; (800784c <__NVIC_SetPriorityGrouping+0x44>)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	60d3      	str	r3, [r2, #12]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	e000ed00 	.word	0xe000ed00

08007850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <__NVIC_GetPriorityGrouping+0x18>)
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	0a1b      	lsrs	r3, r3, #8
 800785a:	f003 0307 	and.w	r3, r3, #7
}
 800785e:	4618      	mov	r0, r3
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	e000ed00 	.word	0xe000ed00

0800786c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800787a:	2b00      	cmp	r3, #0
 800787c:	db0b      	blt.n	8007896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	f003 021f 	and.w	r2, r3, #31
 8007884:	4907      	ldr	r1, [pc, #28]	; (80078a4 <__NVIC_EnableIRQ+0x38>)
 8007886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	2001      	movs	r0, #1
 800788e:	fa00 f202 	lsl.w	r2, r0, r2
 8007892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	e000e100 	.word	0xe000e100

080078a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	db0a      	blt.n	80078d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	490c      	ldr	r1, [pc, #48]	; (80078f4 <__NVIC_SetPriority+0x4c>)
 80078c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c6:	0112      	lsls	r2, r2, #4
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	440b      	add	r3, r1
 80078cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078d0:	e00a      	b.n	80078e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	4908      	ldr	r1, [pc, #32]	; (80078f8 <__NVIC_SetPriority+0x50>)
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	3b04      	subs	r3, #4
 80078e0:	0112      	lsls	r2, r2, #4
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	440b      	add	r3, r1
 80078e6:	761a      	strb	r2, [r3, #24]
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	e000e100 	.word	0xe000e100
 80078f8:	e000ed00 	.word	0xe000ed00

080078fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b089      	sub	sp, #36	; 0x24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f1c3 0307 	rsb	r3, r3, #7
 8007916:	2b04      	cmp	r3, #4
 8007918:	bf28      	it	cs
 800791a:	2304      	movcs	r3, #4
 800791c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	3304      	adds	r3, #4
 8007922:	2b06      	cmp	r3, #6
 8007924:	d902      	bls.n	800792c <NVIC_EncodePriority+0x30>
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	3b03      	subs	r3, #3
 800792a:	e000      	b.n	800792e <NVIC_EncodePriority+0x32>
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007930:	f04f 32ff 	mov.w	r2, #4294967295
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	43da      	mvns	r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	401a      	ands	r2, r3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007944:	f04f 31ff 	mov.w	r1, #4294967295
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	fa01 f303 	lsl.w	r3, r1, r3
 800794e:	43d9      	mvns	r1, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	4313      	orrs	r3, r2
         );
}
 8007956:	4618      	mov	r0, r3
 8007958:	3724      	adds	r7, #36	; 0x24
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
	...

08007964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3b01      	subs	r3, #1
 8007970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007974:	d301      	bcc.n	800797a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007976:	2301      	movs	r3, #1
 8007978:	e00f      	b.n	800799a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <SysTick_Config+0x40>)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3b01      	subs	r3, #1
 8007980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007982:	210f      	movs	r1, #15
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	f7ff ff8e 	bl	80078a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <SysTick_Config+0x40>)
 800798e:	2200      	movs	r2, #0
 8007990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007992:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <SysTick_Config+0x40>)
 8007994:	2207      	movs	r2, #7
 8007996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	e000e010 	.word	0xe000e010

080079a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff ff29 	bl	8007808 <__NVIC_SetPriorityGrouping>
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	4603      	mov	r3, r0
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079cc:	f7ff ff40 	bl	8007850 <__NVIC_GetPriorityGrouping>
 80079d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	f7ff ff90 	bl	80078fc <NVIC_EncodePriority>
 80079dc:	4602      	mov	r2, r0
 80079de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff ff5f 	bl	80078a8 <__NVIC_SetPriority>
}
 80079ea:	bf00      	nop
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	4603      	mov	r3, r0
 80079fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff ff33 	bl	800786c <__NVIC_EnableIRQ>
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff ffa4 	bl	8007964 <SysTick_Config>
 8007a1c:	4603      	mov	r3, r0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e014      	b.n	8007a62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	791b      	ldrb	r3, [r3, #4]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fa fb85 	bl	8002158 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	795b      	ldrb	r3, [r3, #5]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_DAC_ConfigChannel+0x18>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e192      	b.n	8007daa <HAL_DAC_ConfigChannel+0x33e>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d174      	bne.n	8007b82 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007a98:	f7fe face 	bl	8006038 <HAL_GetTick>
 8007a9c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d134      	bne.n	8007b0e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007aa4:	e011      	b.n	8007aca <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007aa6:	f7fe fac7 	bl	8006038 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d90a      	bls.n	8007aca <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f043 0208 	orr.w	r2, r3, #8
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e16f      	b.n	8007daa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f7fe fab9 	bl	8006050 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8007ae8:	e01e      	b.n	8007b28 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007aea:	f7fe faa5 	bl	8006038 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d90a      	bls.n	8007b0e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f043 0208 	orr.w	r2, r3, #8
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2203      	movs	r2, #3
 8007b08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e14d      	b.n	8007daa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dbe8      	blt.n	8007aea <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f7fe fa99 	bl	8006050 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b26:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007b38:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	ea02 0103 	and.w	r1, r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	409a      	lsls	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	21ff      	movs	r1, #255	; 0xff
 8007b64:	fa01 f303 	lsl.w	r3, r1, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	ea02 0103 	and.w	r1, r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	409a      	lsls	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d11d      	bne.n	8007bc6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	221f      	movs	r2, #31
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	4013      	ands	r3, r2
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d102      	bne.n	8007bf0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	623b      	str	r3, [r7, #32]
 8007bee:	e00f      	b.n	8007c10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d102      	bne.n	8007bfe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	623b      	str	r3, [r7, #32]
 8007bfc:	e008      	b.n	8007c10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007c06:	2301      	movs	r3, #1
 8007c08:	623b      	str	r3, [r7, #32]
 8007c0a:	e001      	b.n	8007c10 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	4013      	ands	r3, r2
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	791b      	ldrb	r3, [r3, #4]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d102      	bne.n	8007c44 <HAL_DAC_ConfigChannel+0x1d8>
 8007c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c42:	e000      	b.n	8007c46 <HAL_DAC_ConfigChannel+0x1da>
 8007c44:	2300      	movs	r3, #0
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	4013      	ands	r3, r2
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	795b      	ldrb	r3, [r3, #5]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d102      	bne.n	8007c70 <HAL_DAC_ConfigChannel+0x204>
 8007c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c6e:	e000      	b.n	8007c72 <HAL_DAC_ConfigChannel+0x206>
 8007c70:	2300      	movs	r3, #0
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d114      	bne.n	8007cb2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007c88:	f001 fcf4 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 8007c8c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	4a48      	ldr	r2, [pc, #288]	; (8007db4 <HAL_DAC_ConfigChannel+0x348>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d904      	bls.n	8007ca0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	e00f      	b.n	8007cc0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4a45      	ldr	r2, [pc, #276]	; (8007db8 <HAL_DAC_ConfigChannel+0x34c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d90a      	bls.n	8007cbe <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb0:	e006      	b.n	8007cc0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbc:	e000      	b.n	8007cc0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007cbe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f003 0310 	and.w	r3, r3, #16
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43da      	mvns	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	400a      	ands	r2, r1
 8007cf6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f003 0310 	and.w	r3, r3, #16
 8007d06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	43db      	mvns	r3, r3
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	4013      	ands	r3, r2
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6819      	ldr	r1, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	22c0      	movs	r2, #192	; 0xc0
 8007d44:	fa02 f303 	lsl.w	r3, r2, r3
 8007d48:	43da      	mvns	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	400a      	ands	r2, r1
 8007d50:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	089b      	lsrs	r3, r3, #2
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007d80:	fa01 f303 	lsl.w	r3, r1, r3
 8007d84:	43db      	mvns	r3, r3
 8007d86:	ea02 0103 	and.w	r1, r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	409a      	lsls	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3728      	adds	r7, #40	; 0x28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	09896800 	.word	0x09896800
 8007db8:	04c4b400 	.word	0x04c4b400

08007dbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e08d      	b.n	8007eea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4b47      	ldr	r3, [pc, #284]	; (8007ef4 <HAL_DMA_Init+0x138>)
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d80f      	bhi.n	8007dfa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b45      	ldr	r3, [pc, #276]	; (8007ef8 <HAL_DMA_Init+0x13c>)
 8007de2:	4413      	add	r3, r2
 8007de4:	4a45      	ldr	r2, [pc, #276]	; (8007efc <HAL_DMA_Init+0x140>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	091b      	lsrs	r3, r3, #4
 8007dec:	009a      	lsls	r2, r3, #2
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a42      	ldr	r2, [pc, #264]	; (8007f00 <HAL_DMA_Init+0x144>)
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40
 8007df8:	e00e      	b.n	8007e18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4b40      	ldr	r3, [pc, #256]	; (8007f04 <HAL_DMA_Init+0x148>)
 8007e02:	4413      	add	r3, r2
 8007e04:	4a3d      	ldr	r2, [pc, #244]	; (8007efc <HAL_DMA_Init+0x140>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	009a      	lsls	r2, r3, #2
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a3c      	ldr	r2, [pc, #240]	; (8007f08 <HAL_DMA_Init+0x14c>)
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f9be 	bl	80081ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e78:	d102      	bne.n	8007e80 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e94:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d010      	beq.n	8007ec0 <HAL_DMA_Init+0x104>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d80c      	bhi.n	8007ec0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f9de 	bl	8008268 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	e008      	b.n	8007ed2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40020407 	.word	0x40020407
 8007ef8:	bffdfff8 	.word	0xbffdfff8
 8007efc:	cccccccd 	.word	0xcccccccd
 8007f00:	40020000 	.word	0x40020000
 8007f04:	bffdfbf8 	.word	0xbffdfbf8
 8007f08:	40020400 	.word	0x40020400

08007f0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d005      	beq.n	8007f30 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2204      	movs	r2, #4
 8007f28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	e037      	b.n	8007fa0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 020e 	bic.w	r2, r2, #14
 8007f3e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f4e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f64:	f003 021f 	and.w	r2, r3, #31
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007f72:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f7c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00c      	beq.n	8007fa0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f94:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007f9e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d00d      	beq.n	8007ff2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2204      	movs	r2, #4
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
 8007ff0:	e047      	b.n	8008082 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 020e 	bic.w	r2, r2, #14
 8008000:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0201 	bic.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008020:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	f003 021f 	and.w	r2, r3, #31
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2101      	movs	r1, #1
 8008030:	fa01 f202 	lsl.w	r2, r1, r2
 8008034:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800803e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00c      	beq.n	8008062 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008056:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008060:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
    }
  }
  return status;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	2204      	movs	r2, #4
 80080ae:	409a      	lsls	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d026      	beq.n	8008106 <HAL_DMA_IRQHandler+0x7a>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d021      	beq.n	8008106 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d107      	bne.n	80080e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0204 	bic.w	r2, r2, #4
 80080de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e4:	f003 021f 	and.w	r2, r3, #31
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	2104      	movs	r1, #4
 80080ee:	fa01 f202 	lsl.w	r2, r1, r2
 80080f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d071      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008104:	e06c      	b.n	80081e0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2202      	movs	r2, #2
 8008110:	409a      	lsls	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d02e      	beq.n	8008178 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d029      	beq.n	8008178 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10b      	bne.n	800814a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 020a 	bic.w	r2, r2, #10
 8008140:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814e:	f003 021f 	and.w	r2, r3, #31
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2102      	movs	r1, #2
 8008158:	fa01 f202 	lsl.w	r2, r1, r2
 800815c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d038      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008176:	e033      	b.n	80081e0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2208      	movs	r2, #8
 8008182:	409a      	lsls	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4013      	ands	r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d02a      	beq.n	80081e2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d025      	beq.n	80081e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 020e 	bic.w	r2, r2, #14
 80081a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081aa:	f003 021f 	and.w	r2, r3, #31
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2101      	movs	r1, #1
 80081b4:	fa01 f202 	lsl.w	r2, r1, r2
 80081b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
}
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	4b16      	ldr	r3, [pc, #88]	; (8008254 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d802      	bhi.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008200:	4b15      	ldr	r3, [pc, #84]	; (8008258 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e001      	b.n	800820a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008206:	4b15      	ldr	r3, [pc, #84]	; (800825c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008208:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	3b08      	subs	r3, #8
 8008216:	4a12      	ldr	r2, [pc, #72]	; (8008260 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008218:	fba2 2303 	umull	r2, r3, r2, r3
 800821c:	091b      	lsrs	r3, r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008224:	089b      	lsrs	r3, r3, #2
 8008226:	009a      	lsls	r2, r3, #2
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4413      	add	r3, r2
 800822c:	461a      	mov	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a0b      	ldr	r2, [pc, #44]	; (8008264 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008236:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	2201      	movs	r2, #1
 8008240:	409a      	lsls	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40020407 	.word	0x40020407
 8008258:	40020800 	.word	0x40020800
 800825c:	40020820 	.word	0x40020820
 8008260:	cccccccd 	.word	0xcccccccd
 8008264:	40020880 	.word	0x40020880

08008268 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	461a      	mov	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a08      	ldr	r2, [pc, #32]	; (80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800828a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3b01      	subs	r3, #1
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	2201      	movs	r2, #1
 8008296:	409a      	lsls	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800829c:	bf00      	nop
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	1000823f 	.word	0x1000823f
 80082ac:	40020940 	.word	0x40020940

080082b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e147      	b.n	8008552 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fa fa66 	bl	80027a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0210 	bic.w	r2, r2, #16
 80082ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082ec:	f7fd fea4 	bl	8006038 <HAL_GetTick>
 80082f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80082f2:	e012      	b.n	800831a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80082f4:	f7fd fea0 	bl	8006038 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b0a      	cmp	r3, #10
 8008300:	d90b      	bls.n	800831a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008306:	f043 0201 	orr.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2203      	movs	r2, #3
 8008312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e11b      	b.n	8008552 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f003 0308 	and.w	r3, r3, #8
 8008324:	2b08      	cmp	r3, #8
 8008326:	d0e5      	beq.n	80082f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008338:	f7fd fe7e 	bl	8006038 <HAL_GetTick>
 800833c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800833e:	e012      	b.n	8008366 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008340:	f7fd fe7a 	bl	8006038 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b0a      	cmp	r3, #10
 800834c:	d90b      	bls.n	8008366 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008352:	f043 0201 	orr.w	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2203      	movs	r2, #3
 800835e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e0f5      	b.n	8008552 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0e5      	beq.n	8008340 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0202 	orr.w	r2, r2, #2
 8008382:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a74      	ldr	r2, [pc, #464]	; (800855c <HAL_FDCAN_Init+0x2ac>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d103      	bne.n	8008396 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800838e:	4a74      	ldr	r2, [pc, #464]	; (8008560 <HAL_FDCAN_Init+0x2b0>)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	7c1b      	ldrb	r3, [r3, #16]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d108      	bne.n	80083b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ac:	619a      	str	r2, [r3, #24]
 80083ae:	e007      	b.n	80083c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7c5b      	ldrb	r3, [r3, #17]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d108      	bne.n	80083da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083d6:	619a      	str	r2, [r3, #24]
 80083d8:	e007      	b.n	80083ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	7c9b      	ldrb	r3, [r3, #18]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d108      	bne.n	8008404 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008400:	619a      	str	r2, [r3, #24]
 8008402:	e007      	b.n	8008414 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008412:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008438:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0210 	bic.w	r2, r2, #16
 8008448:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d108      	bne.n	8008464 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0204 	orr.w	r2, r2, #4
 8008460:	619a      	str	r2, [r3, #24]
 8008462:	e02c      	b.n	80084be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d028      	beq.n	80084be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d01c      	beq.n	80084ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008482:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0210 	orr.w	r2, r2, #16
 8008492:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d110      	bne.n	80084be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0220 	orr.w	r2, r2, #32
 80084aa:	619a      	str	r2, [r3, #24]
 80084ac:	e007      	b.n	80084be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699a      	ldr	r2, [r3, #24]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f042 0220 	orr.w	r2, r2, #32
 80084bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80084d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	3b01      	subs	r3, #1
 80084e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80084e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084f2:	d115      	bne.n	8008520 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	3b01      	subs	r3, #1
 8008500:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008502:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008508:	3b01      	subs	r3, #1
 800850a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800850c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	3b01      	subs	r3, #1
 8008516:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800851c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800851e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f814 	bl	8008564 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40006400 	.word	0x40006400
 8008560:	40006500 	.word	0x40006500

08008564 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800856c:	4b30      	ldr	r3, [pc, #192]	; (8008630 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800856e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a2f      	ldr	r2, [pc, #188]	; (8008634 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d103      	bne.n	8008582 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008580:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d103      	bne.n	8008594 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008592:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	041a      	lsls	r2, r3, #16
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085c8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	061a      	lsls	r2, r3, #24
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e005      	b.n	8008616 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3304      	adds	r3, #4
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	429a      	cmp	r2, r3
 8008620:	d3f3      	bcc.n	800860a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	4000a400 	.word	0x4000a400
 8008634:	40006800 	.word	0x40006800
 8008638:	40006c00 	.word	0x40006c00

0800863c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800864e:	4b24      	ldr	r3, [pc, #144]	; (80086e0 <HAL_FLASH_Program+0xa4>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_FLASH_Program+0x1e>
 8008656:	2302      	movs	r3, #2
 8008658:	e03e      	b.n	80086d8 <HAL_FLASH_Program+0x9c>
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <HAL_FLASH_Program+0xa4>)
 800865c:	2201      	movs	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008664:	f000 f862 	bl	800872c <FLASH_WaitForLastOperation>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d12e      	bne.n	80086d0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008672:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <HAL_FLASH_Program+0xa4>)
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d107      	bne.n	800868e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800867e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008682:	68b8      	ldr	r0, [r7, #8]
 8008684:	f000 f8a6 	bl	80087d4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008688:	2301      	movs	r3, #1
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	e010      	b.n	80086b0 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d002      	beq.n	800869a <HAL_FLASH_Program+0x5e>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d10a      	bne.n	80086b0 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	4619      	mov	r1, r3
 800869e:	68b8      	ldr	r0, [r7, #8]
 80086a0:	f000 f8be 	bl	8008820 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d102      	bne.n	80086b0 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80086aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086ae:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80086b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086b4:	f000 f83a 	bl	800872c <FLASH_WaitForLastOperation>
 80086b8:	4603      	mov	r3, r0
 80086ba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <HAL_FLASH_Program+0xa8>)
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	43db      	mvns	r3, r3
 80086ca:	4906      	ldr	r1, [pc, #24]	; (80086e4 <HAL_FLASH_Program+0xa8>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80086d0:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <HAL_FLASH_Program+0xa4>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	2000002c 	.word	0x2000002c
 80086e4:	40022000 	.word	0x40022000

080086e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086f2:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <HAL_FLASH_Unlock+0x38>)
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da0b      	bge.n	8008712 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <HAL_FLASH_Unlock+0x38>)
 80086fc:	4a09      	ldr	r2, [pc, #36]	; (8008724 <HAL_FLASH_Unlock+0x3c>)
 80086fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <HAL_FLASH_Unlock+0x38>)
 8008702:	4a09      	ldr	r2, [pc, #36]	; (8008728 <HAL_FLASH_Unlock+0x40>)
 8008704:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <HAL_FLASH_Unlock+0x38>)
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	da01      	bge.n	8008712 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008712:	79fb      	ldrb	r3, [r7, #7]
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	40022000 	.word	0x40022000
 8008724:	45670123 	.word	0x45670123
 8008728:	cdef89ab 	.word	0xcdef89ab

0800872c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8008734:	f7fd fc80 	bl	8006038 <HAL_GetTick>
 8008738:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800873a:	e009      	b.n	8008750 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800873c:	f7fd fc7c 	bl	8006038 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	429a      	cmp	r2, r3
 800874a:	d201      	bcs.n	8008750 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e038      	b.n	80087c2 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800875c:	d0ee      	beq.n	800873c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800875e:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008766:	4013      	ands	r3, r2
 8008768:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01e      	beq.n	80087ae <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008770:	4b17      	ldr	r3, [pc, #92]	; (80087d0 <FLASH_WaitForLastOperation+0xa4>)
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4313      	orrs	r3, r2
 8008778:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <FLASH_WaitForLastOperation+0xa4>)
 800877a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d007      	beq.n	8008796 <FLASH_WaitForLastOperation+0x6a>
 8008786:	4b11      	ldr	r3, [pc, #68]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008790:	490e      	ldr	r1, [pc, #56]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 8008792:	4313      	orrs	r3, r2
 8008794:	618b      	str	r3, [r1, #24]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <FLASH_WaitForLastOperation+0x7e>
 80087a0:	4a0a      	ldr	r2, [pc, #40]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087a8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e009      	b.n	80087c2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80087ae:	4b07      	ldr	r3, [pc, #28]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d102      	bne.n	80087c0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80087ba:	4b04      	ldr	r3, [pc, #16]	; (80087cc <FLASH_WaitForLastOperation+0xa0>)
 80087bc:	2201      	movs	r2, #1
 80087be:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40022000 	.word	0x40022000
 80087d0:	2000002c 	.word	0x2000002c

080087d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80087e0:	4b0e      	ldr	r3, [pc, #56]	; (800881c <FLASH_Program_DoubleWord+0x48>)
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	4a0d      	ldr	r2, [pc, #52]	; (800881c <FLASH_Program_DoubleWord+0x48>)
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80087f2:	f3bf 8f6f 	isb	sy
}
 80087f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80087f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	000a      	movs	r2, r1
 8008806:	2300      	movs	r3, #0
 8008808:	68f9      	ldr	r1, [r7, #12]
 800880a:	3104      	adds	r1, #4
 800880c:	4613      	mov	r3, r2
 800880e:	600b      	str	r3, [r1, #0]
}
 8008810:	bf00      	nop
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	40022000 	.word	0x40022000

08008820 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008820:	b480      	push	{r7}
 8008822:	b089      	sub	sp, #36	; 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <FLASH_Program_Fast+0x68>)
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	4a13      	ldr	r2, [pc, #76]	; (8008888 <FLASH_Program_Fast+0x68>)
 800883c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008840:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008842:	f3ef 8310 	mrs	r3, PRIMASK
 8008846:	60fb      	str	r3, [r7, #12]
  return(result);
 8008848:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800884a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800884c:	b672      	cpsid	i
}
 800884e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	3304      	adds	r3, #4
 800885c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	3304      	adds	r3, #4
 8008862:	617b      	str	r3, [r7, #20]
    row_index--;
 8008864:	7ffb      	ldrb	r3, [r7, #31]
 8008866:	3b01      	subs	r3, #1
 8008868:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800886a:	7ffb      	ldrb	r3, [r7, #31]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1ef      	bne.n	8008850 <FLASH_Program_Fast+0x30>
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f383 8810 	msr	PRIMASK, r3
}
 800887a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800887c:	bf00      	nop
 800887e:	3724      	adds	r7, #36	; 0x24
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	40022000 	.word	0x40022000

0800888c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800889a:	e15a      	b.n	8008b52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	2101      	movs	r1, #1
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	fa01 f303 	lsl.w	r3, r1, r3
 80088a8:	4013      	ands	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 814c 	beq.w	8008b4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d005      	beq.n	80088cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d130      	bne.n	800892e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	2203      	movs	r2, #3
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	43db      	mvns	r3, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4013      	ands	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008902:	2201      	movs	r2, #1
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	fa02 f303 	lsl.w	r3, r2, r3
 800890a:	43db      	mvns	r3, r3
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4013      	ands	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	091b      	lsrs	r3, r3, #4
 8008918:	f003 0201 	and.w	r2, r3, #1
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	2b03      	cmp	r3, #3
 8008938:	d017      	beq.n	800896a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	2203      	movs	r2, #3
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	43db      	mvns	r3, r3
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4013      	ands	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	2b02      	cmp	r3, #2
 8008974:	d123      	bne.n	80089be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	08da      	lsrs	r2, r3, #3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3208      	adds	r2, #8
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	220f      	movs	r2, #15
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	43db      	mvns	r3, r3
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4013      	ands	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	08da      	lsrs	r2, r3, #3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3208      	adds	r2, #8
 80089b8:	6939      	ldr	r1, [r7, #16]
 80089ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	2203      	movs	r2, #3
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	43db      	mvns	r3, r3
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4013      	ands	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f003 0203 	and.w	r2, r3, #3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80a6 	beq.w	8008b4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a00:	4b5b      	ldr	r3, [pc, #364]	; (8008b70 <HAL_GPIO_Init+0x2e4>)
 8008a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a04:	4a5a      	ldr	r2, [pc, #360]	; (8008b70 <HAL_GPIO_Init+0x2e4>)
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	6613      	str	r3, [r2, #96]	; 0x60
 8008a0c:	4b58      	ldr	r3, [pc, #352]	; (8008b70 <HAL_GPIO_Init+0x2e4>)
 8008a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a18:	4a56      	ldr	r2, [pc, #344]	; (8008b74 <HAL_GPIO_Init+0x2e8>)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	089b      	lsrs	r3, r3, #2
 8008a1e:	3302      	adds	r3, #2
 8008a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	220f      	movs	r2, #15
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008a42:	d01f      	beq.n	8008a84 <HAL_GPIO_Init+0x1f8>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a4c      	ldr	r2, [pc, #304]	; (8008b78 <HAL_GPIO_Init+0x2ec>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d019      	beq.n	8008a80 <HAL_GPIO_Init+0x1f4>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a4b      	ldr	r2, [pc, #300]	; (8008b7c <HAL_GPIO_Init+0x2f0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d013      	beq.n	8008a7c <HAL_GPIO_Init+0x1f0>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a4a      	ldr	r2, [pc, #296]	; (8008b80 <HAL_GPIO_Init+0x2f4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00d      	beq.n	8008a78 <HAL_GPIO_Init+0x1ec>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a49      	ldr	r2, [pc, #292]	; (8008b84 <HAL_GPIO_Init+0x2f8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <HAL_GPIO_Init+0x1e8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a48      	ldr	r2, [pc, #288]	; (8008b88 <HAL_GPIO_Init+0x2fc>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d101      	bne.n	8008a70 <HAL_GPIO_Init+0x1e4>
 8008a6c:	2305      	movs	r3, #5
 8008a6e:	e00a      	b.n	8008a86 <HAL_GPIO_Init+0x1fa>
 8008a70:	2306      	movs	r3, #6
 8008a72:	e008      	b.n	8008a86 <HAL_GPIO_Init+0x1fa>
 8008a74:	2304      	movs	r3, #4
 8008a76:	e006      	b.n	8008a86 <HAL_GPIO_Init+0x1fa>
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e004      	b.n	8008a86 <HAL_GPIO_Init+0x1fa>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e002      	b.n	8008a86 <HAL_GPIO_Init+0x1fa>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <HAL_GPIO_Init+0x1fa>
 8008a84:	2300      	movs	r3, #0
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	f002 0203 	and.w	r2, r2, #3
 8008a8c:	0092      	lsls	r2, r2, #2
 8008a8e:	4093      	lsls	r3, r2
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a96:	4937      	ldr	r1, [pc, #220]	; (8008b74 <HAL_GPIO_Init+0x2e8>)
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	089b      	lsrs	r3, r3, #2
 8008a9c:	3302      	adds	r3, #2
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008aa4:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ac8:	4a30      	ldr	r2, [pc, #192]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008ace:	4b2f      	ldr	r3, [pc, #188]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	43db      	mvns	r3, r3
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4013      	ands	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008af2:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008af8:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	43db      	mvns	r3, r3
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4013      	ands	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b1c:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	43db      	mvns	r3, r3
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b46:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <HAL_GPIO_Init+0x300>)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f ae9d 	bne.w	800889c <HAL_GPIO_Init+0x10>
  }
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	40021000 	.word	0x40021000
 8008b74:	40010000 	.word	0x40010000
 8008b78:	48000400 	.word	0x48000400
 8008b7c:	48000800 	.word	0x48000800
 8008b80:	48000c00 	.word	0x48000c00
 8008b84:	48001000 	.word	0x48001000
 8008b88:	48001400 	.word	0x48001400
 8008b8c:	40010400 	.word	0x40010400

08008b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	807b      	strh	r3, [r7, #2]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ba0:	787b      	ldrb	r3, [r7, #1]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ba6:	887a      	ldrh	r2, [r7, #2]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008bac:	e002      	b.n	8008bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d141      	bne.n	8008c52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008bce:	4b4b      	ldr	r3, [pc, #300]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bda:	d131      	bne.n	8008c40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bdc:	4b47      	ldr	r3, [pc, #284]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008be2:	4a46      	ldr	r2, [pc, #280]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008bec:	4b43      	ldr	r3, [pc, #268]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008bf4:	4a41      	ldr	r2, [pc, #260]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008bfc:	4b40      	ldr	r3, [pc, #256]	; (8008d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2232      	movs	r2, #50	; 0x32
 8008c02:	fb02 f303 	mul.w	r3, r2, r3
 8008c06:	4a3f      	ldr	r2, [pc, #252]	; (8008d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c08:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0c:	0c9b      	lsrs	r3, r3, #18
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c12:	e002      	b.n	8008c1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c1a:	4b38      	ldr	r3, [pc, #224]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c26:	d102      	bne.n	8008c2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f2      	bne.n	8008c14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c2e:	4b33      	ldr	r3, [pc, #204]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3a:	d158      	bne.n	8008cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e057      	b.n	8008cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c40:	4b2e      	ldr	r3, [pc, #184]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c46:	4a2d      	ldr	r2, [pc, #180]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008c50:	e04d      	b.n	8008cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d141      	bne.n	8008cde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c5a:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c66:	d131      	bne.n	8008ccc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c68:	4b24      	ldr	r3, [pc, #144]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c6e:	4a23      	ldr	r2, [pc, #140]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c78:	4b20      	ldr	r3, [pc, #128]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c80:	4a1e      	ldr	r2, [pc, #120]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c88:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2232      	movs	r2, #50	; 0x32
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c94:	fba2 2303 	umull	r2, r3, r2, r3
 8008c98:	0c9b      	lsrs	r3, r3, #18
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c9e:	e002      	b.n	8008ca6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ca6:	4b15      	ldr	r3, [pc, #84]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb2:	d102      	bne.n	8008cba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f2      	bne.n	8008ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008cba:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc6:	d112      	bne.n	8008cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e011      	b.n	8008cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cd2:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008cdc:	e007      	b.n	8008cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008cde:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ce6:	4a05      	ldr	r2, [pc, #20]	; (8008cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	40007000 	.word	0x40007000
 8008d00:	20000020 	.word	0x20000020
 8008d04:	431bde83 	.word	0x431bde83

08008d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e306      	b.n	8009328 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d075      	beq.n	8008e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d26:	4b97      	ldr	r3, [pc, #604]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d30:	4b94      	ldr	r3, [pc, #592]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b0c      	cmp	r3, #12
 8008d3e:	d102      	bne.n	8008d46 <HAL_RCC_OscConfig+0x3e>
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d002      	beq.n	8008d4c <HAL_RCC_OscConfig+0x44>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d10b      	bne.n	8008d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d4c:	4b8d      	ldr	r3, [pc, #564]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d05b      	beq.n	8008e10 <HAL_RCC_OscConfig+0x108>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d157      	bne.n	8008e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e2e1      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6c:	d106      	bne.n	8008d7c <HAL_RCC_OscConfig+0x74>
 8008d6e:	4b85      	ldr	r3, [pc, #532]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a84      	ldr	r2, [pc, #528]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	e01d      	b.n	8008db8 <HAL_RCC_OscConfig+0xb0>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d84:	d10c      	bne.n	8008da0 <HAL_RCC_OscConfig+0x98>
 8008d86:	4b7f      	ldr	r3, [pc, #508]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a7e      	ldr	r2, [pc, #504]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	4b7c      	ldr	r3, [pc, #496]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a7b      	ldr	r2, [pc, #492]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	e00b      	b.n	8008db8 <HAL_RCC_OscConfig+0xb0>
 8008da0:	4b78      	ldr	r3, [pc, #480]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a77      	ldr	r2, [pc, #476]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	4b75      	ldr	r3, [pc, #468]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a74      	ldr	r2, [pc, #464]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d013      	beq.n	8008de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fd f93a 	bl	8006038 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dc8:	f7fd f936 	bl	8006038 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b64      	cmp	r3, #100	; 0x64
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e2a6      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dda:	4b6a      	ldr	r3, [pc, #424]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0f0      	beq.n	8008dc8 <HAL_RCC_OscConfig+0xc0>
 8008de6:	e014      	b.n	8008e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7fd f926 	bl	8006038 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008df0:	f7fd f922 	bl	8006038 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b64      	cmp	r3, #100	; 0x64
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e292      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e02:	4b60      	ldr	r3, [pc, #384]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f0      	bne.n	8008df0 <HAL_RCC_OscConfig+0xe8>
 8008e0e:	e000      	b.n	8008e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d075      	beq.n	8008f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e1e:	4b59      	ldr	r3, [pc, #356]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f003 030c 	and.w	r3, r3, #12
 8008e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e28:	4b56      	ldr	r3, [pc, #344]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b0c      	cmp	r3, #12
 8008e36:	d102      	bne.n	8008e3e <HAL_RCC_OscConfig+0x136>
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d002      	beq.n	8008e44 <HAL_RCC_OscConfig+0x13c>
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d11f      	bne.n	8008e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e44:	4b4f      	ldr	r3, [pc, #316]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <HAL_RCC_OscConfig+0x154>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e265      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e5c:	4b49      	ldr	r3, [pc, #292]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	4946      	ldr	r1, [pc, #280]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008e70:	4b45      	ldr	r3, [pc, #276]	; (8008f88 <HAL_RCC_OscConfig+0x280>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fd f893 	bl	8005fa0 <HAL_InitTick>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d043      	beq.n	8008f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e251      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d023      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e8c:	4b3d      	ldr	r3, [pc, #244]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a3c      	ldr	r2, [pc, #240]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e98:	f7fd f8ce 	bl	8006038 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ea0:	f7fd f8ca 	bl	8006038 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e23a      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eb2:	4b34      	ldr	r3, [pc, #208]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f0      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ebe:	4b31      	ldr	r3, [pc, #196]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	061b      	lsls	r3, r3, #24
 8008ecc:	492d      	ldr	r1, [pc, #180]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	604b      	str	r3, [r1, #4]
 8008ed2:	e01a      	b.n	8008f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ed4:	4b2b      	ldr	r3, [pc, #172]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2a      	ldr	r2, [pc, #168]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee0:	f7fd f8aa 	bl	8006038 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ee8:	f7fd f8a6 	bl	8006038 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e216      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008efa:	4b22      	ldr	r3, [pc, #136]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1f0      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x1e0>
 8008f06:	e000      	b.n	8008f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d041      	beq.n	8008f9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d01c      	beq.n	8008f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f24:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008f26:	f043 0301 	orr.w	r3, r3, #1
 8008f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f2e:	f7fd f883 	bl	8006038 <HAL_GetTick>
 8008f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f34:	e008      	b.n	8008f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f36:	f7fd f87f 	bl	8006038 <HAL_GetTick>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d901      	bls.n	8008f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e1ef      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f48:	4b0e      	ldr	r3, [pc, #56]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0ef      	beq.n	8008f36 <HAL_RCC_OscConfig+0x22e>
 8008f56:	e020      	b.n	8008f9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <HAL_RCC_OscConfig+0x27c>)
 8008f60:	f023 0301 	bic.w	r3, r3, #1
 8008f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f68:	f7fd f866 	bl	8006038 <HAL_GetTick>
 8008f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f6e:	e00d      	b.n	8008f8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f70:	f7fd f862 	bl	8006038 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d906      	bls.n	8008f8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e1d2      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
 8008f82:	bf00      	nop
 8008f84:	40021000 	.word	0x40021000
 8008f88:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f8c:	4b8c      	ldr	r3, [pc, #560]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8008f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1ea      	bne.n	8008f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 80a6 	beq.w	80090f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008fac:	4b84      	ldr	r3, [pc, #528]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <HAL_RCC_OscConfig+0x2b4>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <HAL_RCC_OscConfig+0x2b6>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fc2:	4b7f      	ldr	r3, [pc, #508]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8008fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc6:	4a7e      	ldr	r2, [pc, #504]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8008fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8008fce:	4b7c      	ldr	r3, [pc, #496]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fde:	4b79      	ldr	r3, [pc, #484]	; (80091c4 <HAL_RCC_OscConfig+0x4bc>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d118      	bne.n	800901c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fea:	4b76      	ldr	r3, [pc, #472]	; (80091c4 <HAL_RCC_OscConfig+0x4bc>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a75      	ldr	r2, [pc, #468]	; (80091c4 <HAL_RCC_OscConfig+0x4bc>)
 8008ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ff6:	f7fd f81f 	bl	8006038 <HAL_GetTick>
 8008ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ffc:	e008      	b.n	8009010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ffe:	f7fd f81b 	bl	8006038 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e18b      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009010:	4b6c      	ldr	r3, [pc, #432]	; (80091c4 <HAL_RCC_OscConfig+0x4bc>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0f0      	beq.n	8008ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d108      	bne.n	8009036 <HAL_RCC_OscConfig+0x32e>
 8009024:	4b66      	ldr	r3, [pc, #408]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902a:	4a65      	ldr	r2, [pc, #404]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 800902c:	f043 0301 	orr.w	r3, r3, #1
 8009030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009034:	e024      	b.n	8009080 <HAL_RCC_OscConfig+0x378>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b05      	cmp	r3, #5
 800903c:	d110      	bne.n	8009060 <HAL_RCC_OscConfig+0x358>
 800903e:	4b60      	ldr	r3, [pc, #384]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009044:	4a5e      	ldr	r2, [pc, #376]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009046:	f043 0304 	orr.w	r3, r3, #4
 800904a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800904e:	4b5c      	ldr	r3, [pc, #368]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009054:	4a5a      	ldr	r2, [pc, #360]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800905e:	e00f      	b.n	8009080 <HAL_RCC_OscConfig+0x378>
 8009060:	4b57      	ldr	r3, [pc, #348]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009066:	4a56      	ldr	r2, [pc, #344]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009068:	f023 0301 	bic.w	r3, r3, #1
 800906c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009070:	4b53      	ldr	r3, [pc, #332]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009076:	4a52      	ldr	r2, [pc, #328]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009078:	f023 0304 	bic.w	r3, r3, #4
 800907c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d016      	beq.n	80090b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009088:	f7fc ffd6 	bl	8006038 <HAL_GetTick>
 800908c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800908e:	e00a      	b.n	80090a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009090:	f7fc ffd2 	bl	8006038 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f241 3288 	movw	r2, #5000	; 0x1388
 800909e:	4293      	cmp	r3, r2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e140      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090a6:	4b46      	ldr	r3, [pc, #280]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 80090a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0ed      	beq.n	8009090 <HAL_RCC_OscConfig+0x388>
 80090b4:	e015      	b.n	80090e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b6:	f7fc ffbf 	bl	8006038 <HAL_GetTick>
 80090ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090bc:	e00a      	b.n	80090d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090be:	f7fc ffbb 	bl	8006038 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d901      	bls.n	80090d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e129      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090d4:	4b3a      	ldr	r3, [pc, #232]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 80090d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1ed      	bne.n	80090be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090e2:	7ffb      	ldrb	r3, [r7, #31]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d105      	bne.n	80090f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090e8:	4b35      	ldr	r3, [pc, #212]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 80090ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ec:	4a34      	ldr	r2, [pc, #208]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 80090ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d03c      	beq.n	800917a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d01c      	beq.n	8009142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009108:	4b2d      	ldr	r3, [pc, #180]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 800910a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800910e:	4a2c      	ldr	r2, [pc, #176]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009118:	f7fc ff8e 	bl	8006038 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009120:	f7fc ff8a 	bl	8006038 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e0fa      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009132:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0ef      	beq.n	8009120 <HAL_RCC_OscConfig+0x418>
 8009140:	e01b      	b.n	800917a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009142:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009148:	4a1d      	ldr	r2, [pc, #116]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 800914a:	f023 0301 	bic.w	r3, r3, #1
 800914e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fc ff71 	bl	8006038 <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009158:	e008      	b.n	800916c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800915a:	f7fc ff6d 	bl	8006038 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e0dd      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800916c:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 800916e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1ef      	bne.n	800915a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 80d1 	beq.w	8009326 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009184:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f003 030c 	and.w	r3, r3, #12
 800918c:	2b0c      	cmp	r3, #12
 800918e:	f000 808b 	beq.w	80092a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d15e      	bne.n	8009258 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <HAL_RCC_OscConfig+0x4b8>)
 80091a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a6:	f7fc ff47 	bl	8006038 <HAL_GetTick>
 80091aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091ac:	e00c      	b.n	80091c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091ae:	f7fc ff43 	bl	8006038 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d905      	bls.n	80091c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e0b3      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091c8:	4b59      	ldr	r3, [pc, #356]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1ec      	bne.n	80091ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091d4:	4b56      	ldr	r3, [pc, #344]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	4b56      	ldr	r3, [pc, #344]	; (8009334 <HAL_RCC_OscConfig+0x62c>)
 80091da:	4013      	ands	r3, r2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6a11      	ldr	r1, [r2, #32]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091e4:	3a01      	subs	r2, #1
 80091e6:	0112      	lsls	r2, r2, #4
 80091e8:	4311      	orrs	r1, r2
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80091ee:	0212      	lsls	r2, r2, #8
 80091f0:	4311      	orrs	r1, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091f6:	0852      	lsrs	r2, r2, #1
 80091f8:	3a01      	subs	r2, #1
 80091fa:	0552      	lsls	r2, r2, #21
 80091fc:	4311      	orrs	r1, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009202:	0852      	lsrs	r2, r2, #1
 8009204:	3a01      	subs	r2, #1
 8009206:	0652      	lsls	r2, r2, #25
 8009208:	4311      	orrs	r1, r2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800920e:	06d2      	lsls	r2, r2, #27
 8009210:	430a      	orrs	r2, r1
 8009212:	4947      	ldr	r1, [pc, #284]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 8009214:	4313      	orrs	r3, r2
 8009216:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009218:	4b45      	ldr	r3, [pc, #276]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a44      	ldr	r2, [pc, #272]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800921e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009222:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009224:	4b42      	ldr	r3, [pc, #264]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	4a41      	ldr	r2, [pc, #260]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800922a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800922e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009230:	f7fc ff02 	bl	8006038 <HAL_GetTick>
 8009234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009236:	e008      	b.n	800924a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009238:	f7fc fefe 	bl	8006038 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e06e      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800924a:	4b39      	ldr	r3, [pc, #228]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0f0      	beq.n	8009238 <HAL_RCC_OscConfig+0x530>
 8009256:	e066      	b.n	8009326 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009258:	4b35      	ldr	r3, [pc, #212]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a34      	ldr	r2, [pc, #208]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800925e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009262:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009264:	4b32      	ldr	r3, [pc, #200]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	4a31      	ldr	r2, [pc, #196]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800926a:	f023 0303 	bic.w	r3, r3, #3
 800926e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009270:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4a2e      	ldr	r2, [pc, #184]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 8009276:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800927a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800927e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009280:	f7fc feda 	bl	8006038 <HAL_GetTick>
 8009284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009286:	e008      	b.n	800929a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009288:	f7fc fed6 	bl	8006038 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e046      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800929a:	4b25      	ldr	r3, [pc, #148]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1f0      	bne.n	8009288 <HAL_RCC_OscConfig+0x580>
 80092a6:	e03e      	b.n	8009326 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e039      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80092b4:	4b1e      	ldr	r3, [pc, #120]	; (8009330 <HAL_RCC_OscConfig+0x628>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f003 0203 	and.w	r2, r3, #3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d12c      	bne.n	8009322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	3b01      	subs	r3, #1
 80092d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d123      	bne.n	8009322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d11b      	bne.n	8009322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d113      	bne.n	8009322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009304:	085b      	lsrs	r3, r3, #1
 8009306:	3b01      	subs	r3, #1
 8009308:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800930a:	429a      	cmp	r2, r3
 800930c:	d109      	bne.n	8009322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	085b      	lsrs	r3, r3, #1
 800931a:	3b01      	subs	r3, #1
 800931c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800931e:	429a      	cmp	r2, r3
 8009320:	d001      	beq.n	8009326 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3720      	adds	r7, #32
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40021000 	.word	0x40021000
 8009334:	019f800c 	.word	0x019f800c

08009338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e11e      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009350:	4b91      	ldr	r3, [pc, #580]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d910      	bls.n	8009380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800935e:	4b8e      	ldr	r3, [pc, #568]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f023 020f 	bic.w	r2, r3, #15
 8009366:	498c      	ldr	r1, [pc, #560]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	4313      	orrs	r3, r2
 800936c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800936e:	4b8a      	ldr	r3, [pc, #552]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d001      	beq.n	8009380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e106      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d073      	beq.n	8009474 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2b03      	cmp	r3, #3
 8009392:	d129      	bne.n	80093e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009394:	4b81      	ldr	r3, [pc, #516]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e0f4      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80093a4:	f000 f99e 	bl	80096e4 <RCC_GetSysClockFreqFromPLLSource>
 80093a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	4a7c      	ldr	r2, [pc, #496]	; (80095a0 <HAL_RCC_ClockConfig+0x268>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d93f      	bls.n	8009432 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80093b2:	4b7a      	ldr	r3, [pc, #488]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d033      	beq.n	8009432 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d12f      	bne.n	8009432 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80093d2:	4b72      	ldr	r3, [pc, #456]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093da:	4a70      	ldr	r2, [pc, #448]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80093dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	e024      	b.n	8009432 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d107      	bne.n	8009400 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093f0:	4b6a      	ldr	r3, [pc, #424]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0c6      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009400:	4b66      	ldr	r3, [pc, #408]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e0be      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009410:	f000 f8ce 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 8009414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	4a61      	ldr	r2, [pc, #388]	; (80095a0 <HAL_RCC_ClockConfig+0x268>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d909      	bls.n	8009432 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800941e:	4b5f      	ldr	r3, [pc, #380]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009426:	4a5d      	ldr	r2, [pc, #372]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800942e:	2380      	movs	r3, #128	; 0x80
 8009430:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009432:	4b5a      	ldr	r3, [pc, #360]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f023 0203 	bic.w	r2, r3, #3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	4957      	ldr	r1, [pc, #348]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009440:	4313      	orrs	r3, r2
 8009442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009444:	f7fc fdf8 	bl	8006038 <HAL_GetTick>
 8009448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800944a:	e00a      	b.n	8009462 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800944c:	f7fc fdf4 	bl	8006038 <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	f241 3288 	movw	r2, #5000	; 0x1388
 800945a:	4293      	cmp	r3, r2
 800945c:	d901      	bls.n	8009462 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e095      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009462:	4b4e      	ldr	r3, [pc, #312]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f003 020c 	and.w	r2, r3, #12
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	429a      	cmp	r2, r3
 8009472:	d1eb      	bne.n	800944c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d023      	beq.n	80094c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800948c:	4b43      	ldr	r3, [pc, #268]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	4a42      	ldr	r2, [pc, #264]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009496:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0308 	and.w	r3, r3, #8
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80094a4:	4b3d      	ldr	r3, [pc, #244]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094ac:	4a3b      	ldr	r2, [pc, #236]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80094ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80094b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094b4:	4b39      	ldr	r3, [pc, #228]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	4936      	ldr	r1, [pc, #216]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	608b      	str	r3, [r1, #8]
 80094c6:	e008      	b.n	80094da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b80      	cmp	r3, #128	; 0x80
 80094cc:	d105      	bne.n	80094da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80094ce:	4b33      	ldr	r3, [pc, #204]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4a32      	ldr	r2, [pc, #200]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 80094d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094da:	4b2f      	ldr	r3, [pc, #188]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d21d      	bcs.n	8009524 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094e8:	4b2b      	ldr	r3, [pc, #172]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f023 020f 	bic.w	r2, r3, #15
 80094f0:	4929      	ldr	r1, [pc, #164]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80094f8:	f7fc fd9e 	bl	8006038 <HAL_GetTick>
 80094fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094fe:	e00a      	b.n	8009516 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009500:	f7fc fd9a 	bl	8006038 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	f241 3288 	movw	r2, #5000	; 0x1388
 800950e:	4293      	cmp	r3, r2
 8009510:	d901      	bls.n	8009516 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e03b      	b.n	800958e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009516:	4b20      	ldr	r3, [pc, #128]	; (8009598 <HAL_RCC_ClockConfig+0x260>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d1ed      	bne.n	8009500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0304 	and.w	r3, r3, #4
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009530:	4b1a      	ldr	r3, [pc, #104]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	4917      	ldr	r1, [pc, #92]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 800953e:	4313      	orrs	r3, r2
 8009540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0308 	and.w	r3, r3, #8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800954e:	4b13      	ldr	r3, [pc, #76]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	490f      	ldr	r1, [pc, #60]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 800955e:	4313      	orrs	r3, r2
 8009560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009562:	f000 f825 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 8009566:	4602      	mov	r2, r0
 8009568:	4b0c      	ldr	r3, [pc, #48]	; (800959c <HAL_RCC_ClockConfig+0x264>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	091b      	lsrs	r3, r3, #4
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	490c      	ldr	r1, [pc, #48]	; (80095a4 <HAL_RCC_ClockConfig+0x26c>)
 8009574:	5ccb      	ldrb	r3, [r1, r3]
 8009576:	f003 031f 	and.w	r3, r3, #31
 800957a:	fa22 f303 	lsr.w	r3, r2, r3
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <HAL_RCC_ClockConfig+0x270>)
 8009580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009582:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <HAL_RCC_ClockConfig+0x274>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f7fc fd0a 	bl	8005fa0 <HAL_InitTick>
 800958c:	4603      	mov	r3, r0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	40022000 	.word	0x40022000
 800959c:	40021000 	.word	0x40021000
 80095a0:	04c4b400 	.word	0x04c4b400
 80095a4:	08013de0 	.word	0x08013de0
 80095a8:	20000020 	.word	0x20000020
 80095ac:	20000024 	.word	0x20000024

080095b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80095b6:	4b2c      	ldr	r3, [pc, #176]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 030c 	and.w	r3, r3, #12
 80095be:	2b04      	cmp	r3, #4
 80095c0:	d102      	bne.n	80095c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80095c2:	4b2a      	ldr	r3, [pc, #168]	; (800966c <HAL_RCC_GetSysClockFreq+0xbc>)
 80095c4:	613b      	str	r3, [r7, #16]
 80095c6:	e047      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80095c8:	4b27      	ldr	r3, [pc, #156]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 030c 	and.w	r3, r3, #12
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d102      	bne.n	80095da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80095d4:	4b26      	ldr	r3, [pc, #152]	; (8009670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	e03e      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80095da:	4b23      	ldr	r3, [pc, #140]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f003 030c 	and.w	r3, r3, #12
 80095e2:	2b0c      	cmp	r3, #12
 80095e4:	d136      	bne.n	8009654 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095e6:	4b20      	ldr	r3, [pc, #128]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f003 0303 	and.w	r3, r3, #3
 80095ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095f0:	4b1d      	ldr	r3, [pc, #116]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	091b      	lsrs	r3, r3, #4
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	3301      	adds	r3, #1
 80095fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b03      	cmp	r3, #3
 8009602:	d10c      	bne.n	800961e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009604:	4a1a      	ldr	r2, [pc, #104]	; (8009670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	fbb2 f3f3 	udiv	r3, r2, r3
 800960c:	4a16      	ldr	r2, [pc, #88]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800960e:	68d2      	ldr	r2, [r2, #12]
 8009610:	0a12      	lsrs	r2, r2, #8
 8009612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	617b      	str	r3, [r7, #20]
      break;
 800961c:	e00c      	b.n	8009638 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800961e:	4a13      	ldr	r2, [pc, #76]	; (800966c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	fbb2 f3f3 	udiv	r3, r2, r3
 8009626:	4a10      	ldr	r2, [pc, #64]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009628:	68d2      	ldr	r2, [r2, #12]
 800962a:	0a12      	lsrs	r2, r2, #8
 800962c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009630:	fb02 f303 	mul.w	r3, r2, r3
 8009634:	617b      	str	r3, [r7, #20]
      break;
 8009636:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009638:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	0e5b      	lsrs	r3, r3, #25
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	3301      	adds	r3, #1
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	e001      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009658:	693b      	ldr	r3, [r7, #16]
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	40021000 	.word	0x40021000
 800966c:	00f42400 	.word	0x00f42400
 8009670:	007a1200 	.word	0x007a1200

08009674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009678:	4b03      	ldr	r3, [pc, #12]	; (8009688 <HAL_RCC_GetHCLKFreq+0x14>)
 800967a:	681b      	ldr	r3, [r3, #0]
}
 800967c:	4618      	mov	r0, r3
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20000020 	.word	0x20000020

0800968c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009690:	f7ff fff0 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 8009694:	4602      	mov	r2, r0
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	0a1b      	lsrs	r3, r3, #8
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	4904      	ldr	r1, [pc, #16]	; (80096b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096a2:	5ccb      	ldrb	r3, [r1, r3]
 80096a4:	f003 031f 	and.w	r3, r3, #31
 80096a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40021000 	.word	0x40021000
 80096b4:	08013df0 	.word	0x08013df0

080096b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80096bc:	f7ff ffda 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 80096c0:	4602      	mov	r2, r0
 80096c2:	4b06      	ldr	r3, [pc, #24]	; (80096dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	0adb      	lsrs	r3, r3, #11
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	4904      	ldr	r1, [pc, #16]	; (80096e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096ce:	5ccb      	ldrb	r3, [r1, r3]
 80096d0:	f003 031f 	and.w	r3, r3, #31
 80096d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096d8:	4618      	mov	r0, r3
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40021000 	.word	0x40021000
 80096e0:	08013df0 	.word	0x08013df0

080096e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80096ea:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	f003 0303 	and.w	r3, r3, #3
 80096f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80096f4:	4b1b      	ldr	r3, [pc, #108]	; (8009764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	091b      	lsrs	r3, r3, #4
 80096fa:	f003 030f 	and.w	r3, r3, #15
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d10c      	bne.n	8009722 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009708:	4a17      	ldr	r2, [pc, #92]	; (8009768 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009710:	4a14      	ldr	r2, [pc, #80]	; (8009764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009712:	68d2      	ldr	r2, [r2, #12]
 8009714:	0a12      	lsrs	r2, r2, #8
 8009716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	617b      	str	r3, [r7, #20]
    break;
 8009720:	e00c      	b.n	800973c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009722:	4a12      	ldr	r2, [pc, #72]	; (800976c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	fbb2 f3f3 	udiv	r3, r2, r3
 800972a:	4a0e      	ldr	r2, [pc, #56]	; (8009764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800972c:	68d2      	ldr	r2, [r2, #12]
 800972e:	0a12      	lsrs	r2, r2, #8
 8009730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009734:	fb02 f303 	mul.w	r3, r2, r3
 8009738:	617b      	str	r3, [r7, #20]
    break;
 800973a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800973c:	4b09      	ldr	r3, [pc, #36]	; (8009764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	0e5b      	lsrs	r3, r3, #25
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	3301      	adds	r3, #1
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	fbb2 f3f3 	udiv	r3, r2, r3
 8009754:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009756:	687b      	ldr	r3, [r7, #4]
}
 8009758:	4618      	mov	r0, r3
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	40021000 	.word	0x40021000
 8009768:	007a1200 	.word	0x007a1200
 800976c:	00f42400 	.word	0x00f42400

08009770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009778:	2300      	movs	r3, #0
 800977a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800977c:	2300      	movs	r3, #0
 800977e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 8098 	beq.w	80098be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800978e:	2300      	movs	r3, #0
 8009790:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009792:	4b43      	ldr	r3, [pc, #268]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10d      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800979e:	4b40      	ldr	r3, [pc, #256]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	4a3f      	ldr	r2, [pc, #252]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097a8:	6593      	str	r3, [r2, #88]	; 0x58
 80097aa:	4b3d      	ldr	r3, [pc, #244]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b2:	60bb      	str	r3, [r7, #8]
 80097b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097b6:	2301      	movs	r3, #1
 80097b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097ba:	4b3a      	ldr	r3, [pc, #232]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a39      	ldr	r2, [pc, #228]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80097c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097c6:	f7fc fc37 	bl	8006038 <HAL_GetTick>
 80097ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097cc:	e009      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097ce:	f7fc fc33 	bl	8006038 <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d902      	bls.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	74fb      	strb	r3, [r7, #19]
        break;
 80097e0:	e005      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097e2:	4b30      	ldr	r3, [pc, #192]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0ef      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80097ee:	7cfb      	ldrb	r3, [r7, #19]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d159      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80097f4:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01e      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	429a      	cmp	r2, r3
 800980e:	d019      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009810:	4b23      	ldr	r3, [pc, #140]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800981a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800981c:	4b20      	ldr	r3, [pc, #128]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009822:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800982c:	4b1c      	ldr	r3, [pc, #112]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800982e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009832:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800983c:	4a18      	ldr	r2, [pc, #96]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d016      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984e:	f7fc fbf3 	bl	8006038 <HAL_GetTick>
 8009852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009854:	e00b      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009856:	f7fc fbef 	bl	8006038 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f241 3288 	movw	r2, #5000	; 0x1388
 8009864:	4293      	cmp	r3, r2
 8009866:	d902      	bls.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	74fb      	strb	r3, [r7, #19]
            break;
 800986c:	e006      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0ec      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800987c:	7cfb      	ldrb	r3, [r7, #19]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10b      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009882:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009890:	4903      	ldr	r1, [pc, #12]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009892:	4313      	orrs	r3, r2
 8009894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009898:	e008      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800989a:	7cfb      	ldrb	r3, [r7, #19]
 800989c:	74bb      	strb	r3, [r7, #18]
 800989e:	e005      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80098a0:	40021000 	.word	0x40021000
 80098a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	7cfb      	ldrb	r3, [r7, #19]
 80098aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098ac:	7c7b      	ldrb	r3, [r7, #17]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d105      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098b2:	4ba7      	ldr	r3, [pc, #668]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b6:	4aa6      	ldr	r2, [pc, #664]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80098ca:	4ba1      	ldr	r3, [pc, #644]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d0:	f023 0203 	bic.w	r2, r3, #3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	499d      	ldr	r1, [pc, #628]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80098ec:	4b98      	ldr	r3, [pc, #608]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f2:	f023 020c 	bic.w	r2, r3, #12
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	4995      	ldr	r1, [pc, #596]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800990e:	4b90      	ldr	r3, [pc, #576]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	498c      	ldr	r1, [pc, #560]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800991e:	4313      	orrs	r3, r2
 8009920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00a      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009930:	4b87      	ldr	r3, [pc, #540]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	4984      	ldr	r1, [pc, #528]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009940:	4313      	orrs	r3, r2
 8009942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0310 	and.w	r3, r3, #16
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009952:	4b7f      	ldr	r3, [pc, #508]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	497b      	ldr	r1, [pc, #492]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009962:	4313      	orrs	r3, r2
 8009964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00a      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009974:	4b76      	ldr	r3, [pc, #472]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	4973      	ldr	r1, [pc, #460]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009984:	4313      	orrs	r3, r2
 8009986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00a      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009996:	4b6e      	ldr	r3, [pc, #440]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800999c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	496a      	ldr	r1, [pc, #424]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00a      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80099b8:	4b65      	ldr	r3, [pc, #404]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	4962      	ldr	r1, [pc, #392]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00a      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099da:	4b5d      	ldr	r3, [pc, #372]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	4959      	ldr	r1, [pc, #356]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00a      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099fc:	4b54      	ldr	r3, [pc, #336]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a02:	f023 0203 	bic.w	r2, r3, #3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	4951      	ldr	r1, [pc, #324]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00a      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a1e:	4b4c      	ldr	r3, [pc, #304]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	4948      	ldr	r1, [pc, #288]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d015      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a40:	4b43      	ldr	r3, [pc, #268]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4e:	4940      	ldr	r1, [pc, #256]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a5e:	d105      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a60:	4b3b      	ldr	r3, [pc, #236]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	4a3a      	ldr	r2, [pc, #232]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d015      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009a78:	4b35      	ldr	r3, [pc, #212]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	4932      	ldr	r1, [pc, #200]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a96:	d105      	bne.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a98:	4b2d      	ldr	r3, [pc, #180]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	4a2c      	ldr	r2, [pc, #176]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d015      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ab0:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	4924      	ldr	r1, [pc, #144]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ace:	d105      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ad0:	4b1f      	ldr	r3, [pc, #124]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	4a1e      	ldr	r2, [pc, #120]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ada:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d015      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ae8:	4b19      	ldr	r3, [pc, #100]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af6:	4916      	ldr	r1, [pc, #88]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b06:	d105      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	4a10      	ldr	r2, [pc, #64]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d019      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	4908      	ldr	r1, [pc, #32]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b3e:	d109      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b40:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	4a02      	ldr	r2, [pc, #8]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b4a:	60d3      	str	r3, [r2, #12]
 8009b4c:	e002      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009b4e:	bf00      	nop
 8009b50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d015      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009b60:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	4926      	ldr	r1, [pc, #152]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b7e:	d105      	bne.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009b80:	4b21      	ldr	r3, [pc, #132]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	4a20      	ldr	r2, [pc, #128]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d015      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009b98:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ba6:	4918      	ldr	r1, [pc, #96]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb6:	d105      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	4a12      	ldr	r2, [pc, #72]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d015      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bde:	490a      	ldr	r1, [pc, #40]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bee:	d105      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bf0:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	4a04      	ldr	r2, [pc, #16]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009bfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	40021000 	.word	0x40021000

08009c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e09d      	b.n	8009d5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d108      	bne.n	8009c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c2e:	d009      	beq.n	8009c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	61da      	str	r2, [r3, #28]
 8009c36:	e005      	b.n	8009c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d106      	bne.n	8009c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7fb fd38 	bl	80056d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c84:	d902      	bls.n	8009c8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e002      	b.n	8009c92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c9a:	d007      	beq.n	8009cac <HAL_SPI_Init+0xa0>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ca4:	d002      	beq.n	8009cac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cee:	ea42 0103 	orr.w	r1, r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	0c1b      	lsrs	r3, r3, #16
 8009d08:	f003 0204 	and.w	r2, r3, #4
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	f003 0310 	and.w	r3, r3, #16
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1a:	f003 0308 	and.w	r3, r3, #8
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d28:	ea42 0103 	orr.w	r1, r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69da      	ldr	r2, [r3, #28]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b08a      	sub	sp, #40	; 0x28
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
 8009d6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d70:	2301      	movs	r3, #1
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_SPI_TransmitReceive+0x26>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e1fb      	b.n	800a180 <HAL_SPI_TransmitReceive+0x41e>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d90:	f7fc f952 	bl	8006038 <HAL_GetTick>
 8009d94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009da4:	887b      	ldrh	r3, [r7, #2]
 8009da6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009da8:	887b      	ldrh	r3, [r7, #2]
 8009daa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dac:	7efb      	ldrb	r3, [r7, #27]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d00e      	beq.n	8009dd0 <HAL_SPI_TransmitReceive+0x6e>
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009db8:	d106      	bne.n	8009dc8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d102      	bne.n	8009dc8 <HAL_SPI_TransmitReceive+0x66>
 8009dc2:	7efb      	ldrb	r3, [r7, #27]
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d003      	beq.n	8009dd0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009dce:	e1cd      	b.n	800a16c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <HAL_SPI_TransmitReceive+0x80>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <HAL_SPI_TransmitReceive+0x80>
 8009ddc:	887b      	ldrh	r3, [r7, #2]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009de8:	e1c0      	b.n	800a16c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d003      	beq.n	8009dfe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2205      	movs	r2, #5
 8009dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	887a      	ldrh	r2, [r7, #2]
 8009e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	887a      	ldrh	r2, [r7, #2]
 8009e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	887a      	ldrh	r2, [r7, #2]
 8009e24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	887a      	ldrh	r2, [r7, #2]
 8009e2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e40:	d802      	bhi.n	8009e48 <HAL_SPI_TransmitReceive+0xe6>
 8009e42:	8a3b      	ldrh	r3, [r7, #16]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d908      	bls.n	8009e5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e56:	605a      	str	r2, [r3, #4]
 8009e58:	e007      	b.n	8009e6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d007      	beq.n	8009e88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e90:	d97c      	bls.n	8009f8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <HAL_SPI_TransmitReceive+0x13e>
 8009e9a:	8a7b      	ldrh	r3, [r7, #18]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d169      	bne.n	8009f74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea4:	881a      	ldrh	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	1c9a      	adds	r2, r3, #2
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ec4:	e056      	b.n	8009f74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d11b      	bne.n	8009f0c <HAL_SPI_TransmitReceive+0x1aa>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d016      	beq.n	8009f0c <HAL_SPI_TransmitReceive+0x1aa>
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d113      	bne.n	8009f0c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	881a      	ldrh	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef4:	1c9a      	adds	r2, r3, #2
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d11c      	bne.n	8009f54 <HAL_SPI_TransmitReceive+0x1f2>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	b292      	uxth	r2, r2
 8009f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	1c9a      	adds	r2, r3, #2
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f50:	2301      	movs	r3, #1
 8009f52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f54:	f7fc f870 	bl	8006038 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d807      	bhi.n	8009f74 <HAL_SPI_TransmitReceive+0x212>
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d003      	beq.n	8009f74 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009f72:	e0fb      	b.n	800a16c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1a3      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x164>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d19d      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x164>
 8009f8a:	e0df      	b.n	800a14c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <HAL_SPI_TransmitReceive+0x23a>
 8009f94:	8a7b      	ldrh	r3, [r7, #18]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	f040 80cb 	bne.w	800a132 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d912      	bls.n	8009fcc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	881a      	ldrh	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	1c9a      	adds	r2, r3, #2
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b02      	subs	r3, #2
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fca:	e0b2      	b.n	800a132 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	330c      	adds	r3, #12
 8009fd6:	7812      	ldrb	r2, [r2, #0]
 8009fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	3b01      	subs	r3, #1
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff2:	e09e      	b.n	800a132 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d134      	bne.n	800a06c <HAL_SPI_TransmitReceive+0x30a>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a006:	b29b      	uxth	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d02f      	beq.n	800a06c <HAL_SPI_TransmitReceive+0x30a>
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d12c      	bne.n	800a06c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a016:	b29b      	uxth	r3, r3
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d912      	bls.n	800a042 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	881a      	ldrh	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02c:	1c9a      	adds	r2, r3, #2
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a036:	b29b      	uxth	r3, r3
 800a038:	3b02      	subs	r3, #2
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a040:	e012      	b.n	800a068 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	330c      	adds	r3, #12
 800a04c:	7812      	ldrb	r2, [r2, #0]
 800a04e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3b01      	subs	r3, #1
 800a062:	b29a      	uxth	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b01      	cmp	r3, #1
 800a078:	d148      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x3aa>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d042      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d923      	bls.n	800a0da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	b292      	uxth	r2, r2
 800a09e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	1c9a      	adds	r2, r3, #2
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	3b02      	subs	r3, #2
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d81f      	bhi.n	800a108 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0d6:	605a      	str	r2, [r3, #4]
 800a0d8:	e016      	b.n	800a108 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f103 020c 	add.w	r2, r3, #12
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	b2d2      	uxtb	r2, r2
 800a0ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3b01      	subs	r3, #1
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a108:	2301      	movs	r3, #1
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a10c:	f7fb ff94 	bl	8006038 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a118:	429a      	cmp	r2, r3
 800a11a:	d803      	bhi.n	800a124 <HAL_SPI_TransmitReceive+0x3c2>
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a122:	d102      	bne.n	800a12a <HAL_SPI_TransmitReceive+0x3c8>
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	2b00      	cmp	r3, #0
 800a128:	d103      	bne.n	800a132 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a130:	e01c      	b.n	800a16c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a136:	b29b      	uxth	r3, r3
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f47f af5b 	bne.w	8009ff4 <HAL_SPI_TransmitReceive+0x292>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	f47f af54 	bne.w	8009ff4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f937 	bl	800a3c4 <SPI_EndRxTxTransaction>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d006      	beq.n	800a16a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	661a      	str	r2, [r3, #96]	; 0x60
 800a168:	e000      	b.n	800a16c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a16a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a17c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a180:	4618      	mov	r0, r3
 800a182:	3728      	adds	r7, #40	; 0x28
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a198:	f7fb ff4e 	bl	8006038 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a0:	1a9b      	subs	r3, r3, r2
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1a8:	f7fb ff46 	bl	8006038 <HAL_GetTick>
 800a1ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1ae:	4b39      	ldr	r3, [pc, #228]	; (800a294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	015b      	lsls	r3, r3, #5
 800a1b4:	0d1b      	lsrs	r3, r3, #20
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	fb02 f303 	mul.w	r3, r2, r3
 800a1bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1be:	e054      	b.n	800a26a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c6:	d050      	beq.n	800a26a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1c8:	f7fb ff36 	bl	8006038 <HAL_GetTick>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d902      	bls.n	800a1de <SPI_WaitFlagStateUntilTimeout+0x56>
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d13d      	bne.n	800a25a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1f6:	d111      	bne.n	800a21c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a200:	d004      	beq.n	800a20c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a20a:	d107      	bne.n	800a21c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a21a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a224:	d10f      	bne.n	800a246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e017      	b.n	800a28a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	3b01      	subs	r3, #1
 800a268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4013      	ands	r3, r2
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	429a      	cmp	r2, r3
 800a278:	bf0c      	ite	eq
 800a27a:	2301      	moveq	r3, #1
 800a27c:	2300      	movne	r3, #0
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	461a      	mov	r2, r3
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	429a      	cmp	r2, r3
 800a286:	d19b      	bne.n	800a1c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3720      	adds	r7, #32
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20000020 	.word	0x20000020

0800a298 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a2aa:	f7fb fec5 	bl	8006038 <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	1a9b      	subs	r3, r3, r2
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a2ba:	f7fb febd 	bl	8006038 <HAL_GetTick>
 800a2be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a2c8:	4b3d      	ldr	r3, [pc, #244]	; (800a3c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	00da      	lsls	r2, r3, #3
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	0d1b      	lsrs	r3, r3, #20
 800a2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a2e0:	e060      	b.n	800a3a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a2e8:	d107      	bne.n	800a2fa <SPI_WaitFifoStateUntilTimeout+0x62>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d104      	bne.n	800a2fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a300:	d050      	beq.n	800a3a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a302:	f7fb fe99 	bl	8006038 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30e:	429a      	cmp	r2, r3
 800a310:	d902      	bls.n	800a318 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d13d      	bne.n	800a394 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a330:	d111      	bne.n	800a356 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a33a:	d004      	beq.n	800a346 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a344:	d107      	bne.n	800a356 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a35e:	d10f      	bne.n	800a380 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a37e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e010      	b.n	800a3b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d196      	bne.n	800a2e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3728      	adds	r7, #40	; 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000020 	.word	0x20000020

0800a3c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff ff5b 	bl	800a298 <SPI_WaitFifoStateUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ec:	f043 0220 	orr.w	r2, r3, #32
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e027      	b.n	800a448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2200      	movs	r2, #0
 800a400:	2180      	movs	r1, #128	; 0x80
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff fec0 	bl	800a188 <SPI_WaitFlagStateUntilTimeout>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d007      	beq.n	800a41e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a412:	f043 0220 	orr.w	r2, r3, #32
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e014      	b.n	800a448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2200      	movs	r2, #0
 800a426:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff ff34 	bl	800a298 <SPI_WaitFifoStateUntilTimeout>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d007      	beq.n	800a446 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a43a:	f043 0220 	orr.w	r2, r3, #32
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e000      	b.n	800a448 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e049      	b.n	800a4f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fb fc24 	bl	8005cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f000 fdf4 	bl	800b07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	d001      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e054      	b.n	800a5c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f042 0201 	orr.w	r2, r2, #1
 800a52e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a26      	ldr	r2, [pc, #152]	; (800a5d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d022      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a542:	d01d      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a22      	ldr	r2, [pc, #136]	; (800a5d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d018      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a21      	ldr	r2, [pc, #132]	; (800a5d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d013      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a1f      	ldr	r2, [pc, #124]	; (800a5dc <HAL_TIM_Base_Start_IT+0xdc>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00e      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a1e      	ldr	r2, [pc, #120]	; (800a5e0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d009      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a1c      	ldr	r2, [pc, #112]	; (800a5e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d004      	beq.n	800a580 <HAL_TIM_Base_Start_IT+0x80>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a1b      	ldr	r2, [pc, #108]	; (800a5e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d115      	bne.n	800a5ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689a      	ldr	r2, [r3, #8]
 800a586:	4b19      	ldr	r3, [pc, #100]	; (800a5ec <HAL_TIM_Base_Start_IT+0xec>)
 800a588:	4013      	ands	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b06      	cmp	r3, #6
 800a590:	d015      	beq.n	800a5be <HAL_TIM_Base_Start_IT+0xbe>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a598:	d011      	beq.n	800a5be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f042 0201 	orr.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5aa:	e008      	b.n	800a5be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0201 	orr.w	r2, r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	e000      	b.n	800a5c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	40012c00 	.word	0x40012c00
 800a5d4:	40000400 	.word	0x40000400
 800a5d8:	40000800 	.word	0x40000800
 800a5dc:	40000c00 	.word	0x40000c00
 800a5e0:	40013400 	.word	0x40013400
 800a5e4:	40014000 	.word	0x40014000
 800a5e8:	40015000 	.word	0x40015000
 800a5ec:	00010007 	.word	0x00010007

0800a5f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e049      	b.n	800a696 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d106      	bne.n	800a61c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7fb fb30 	bl	8005c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2202      	movs	r2, #2
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f000 fd24 	bl	800b07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d109      	bne.n	800a6c4 <HAL_TIM_PWM_Start+0x24>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	bf14      	ite	ne
 800a6bc:	2301      	movne	r3, #1
 800a6be:	2300      	moveq	r3, #0
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	e03c      	b.n	800a73e <HAL_TIM_PWM_Start+0x9e>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d109      	bne.n	800a6de <HAL_TIM_PWM_Start+0x3e>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	bf14      	ite	ne
 800a6d6:	2301      	movne	r3, #1
 800a6d8:	2300      	moveq	r3, #0
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	e02f      	b.n	800a73e <HAL_TIM_PWM_Start+0x9e>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d109      	bne.n	800a6f8 <HAL_TIM_PWM_Start+0x58>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	bf14      	ite	ne
 800a6f0:	2301      	movne	r3, #1
 800a6f2:	2300      	moveq	r3, #0
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	e022      	b.n	800a73e <HAL_TIM_PWM_Start+0x9e>
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2b0c      	cmp	r3, #12
 800a6fc:	d109      	bne.n	800a712 <HAL_TIM_PWM_Start+0x72>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b01      	cmp	r3, #1
 800a708:	bf14      	ite	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	2300      	moveq	r3, #0
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	e015      	b.n	800a73e <HAL_TIM_PWM_Start+0x9e>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b10      	cmp	r3, #16
 800a716:	d109      	bne.n	800a72c <HAL_TIM_PWM_Start+0x8c>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	bf14      	ite	ne
 800a724:	2301      	movne	r3, #1
 800a726:	2300      	moveq	r3, #0
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	e008      	b.n	800a73e <HAL_TIM_PWM_Start+0x9e>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b01      	cmp	r3, #1
 800a736:	bf14      	ite	ne
 800a738:	2301      	movne	r3, #1
 800a73a:	2300      	moveq	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e0a6      	b.n	800a894 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d104      	bne.n	800a756 <HAL_TIM_PWM_Start+0xb6>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a754:	e023      	b.n	800a79e <HAL_TIM_PWM_Start+0xfe>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d104      	bne.n	800a766 <HAL_TIM_PWM_Start+0xc6>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a764:	e01b      	b.n	800a79e <HAL_TIM_PWM_Start+0xfe>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d104      	bne.n	800a776 <HAL_TIM_PWM_Start+0xd6>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a774:	e013      	b.n	800a79e <HAL_TIM_PWM_Start+0xfe>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b0c      	cmp	r3, #12
 800a77a:	d104      	bne.n	800a786 <HAL_TIM_PWM_Start+0xe6>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a784:	e00b      	b.n	800a79e <HAL_TIM_PWM_Start+0xfe>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b10      	cmp	r3, #16
 800a78a:	d104      	bne.n	800a796 <HAL_TIM_PWM_Start+0xf6>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a794:	e003      	b.n	800a79e <HAL_TIM_PWM_Start+0xfe>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2202      	movs	r2, #2
 800a79a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f001 f8d6 	bl	800b958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a3a      	ldr	r2, [pc, #232]	; (800a89c <HAL_TIM_PWM_Start+0x1fc>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d018      	beq.n	800a7e8 <HAL_TIM_PWM_Start+0x148>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a39      	ldr	r2, [pc, #228]	; (800a8a0 <HAL_TIM_PWM_Start+0x200>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d013      	beq.n	800a7e8 <HAL_TIM_PWM_Start+0x148>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a37      	ldr	r2, [pc, #220]	; (800a8a4 <HAL_TIM_PWM_Start+0x204>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00e      	beq.n	800a7e8 <HAL_TIM_PWM_Start+0x148>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a36      	ldr	r2, [pc, #216]	; (800a8a8 <HAL_TIM_PWM_Start+0x208>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d009      	beq.n	800a7e8 <HAL_TIM_PWM_Start+0x148>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a34      	ldr	r2, [pc, #208]	; (800a8ac <HAL_TIM_PWM_Start+0x20c>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d004      	beq.n	800a7e8 <HAL_TIM_PWM_Start+0x148>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a33      	ldr	r2, [pc, #204]	; (800a8b0 <HAL_TIM_PWM_Start+0x210>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d101      	bne.n	800a7ec <HAL_TIM_PWM_Start+0x14c>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e000      	b.n	800a7ee <HAL_TIM_PWM_Start+0x14e>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d007      	beq.n	800a802 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a25      	ldr	r2, [pc, #148]	; (800a89c <HAL_TIM_PWM_Start+0x1fc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d022      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a814:	d01d      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <HAL_TIM_PWM_Start+0x214>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d018      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a24      	ldr	r2, [pc, #144]	; (800a8b8 <HAL_TIM_PWM_Start+0x218>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d013      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a23      	ldr	r2, [pc, #140]	; (800a8bc <HAL_TIM_PWM_Start+0x21c>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00e      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a19      	ldr	r2, [pc, #100]	; (800a8a0 <HAL_TIM_PWM_Start+0x200>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d009      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a18      	ldr	r2, [pc, #96]	; (800a8a4 <HAL_TIM_PWM_Start+0x204>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d004      	beq.n	800a852 <HAL_TIM_PWM_Start+0x1b2>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a18      	ldr	r2, [pc, #96]	; (800a8b0 <HAL_TIM_PWM_Start+0x210>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d115      	bne.n	800a87e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <HAL_TIM_PWM_Start+0x220>)
 800a85a:	4013      	ands	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b06      	cmp	r3, #6
 800a862:	d015      	beq.n	800a890 <HAL_TIM_PWM_Start+0x1f0>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86a:	d011      	beq.n	800a890 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0201 	orr.w	r2, r2, #1
 800a87a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a87c:	e008      	b.n	800a890 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 0201 	orr.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e000      	b.n	800a892 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	40012c00 	.word	0x40012c00
 800a8a0:	40013400 	.word	0x40013400
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40014400 	.word	0x40014400
 800a8ac:	40014800 	.word	0x40014800
 800a8b0:	40015000 	.word	0x40015000
 800a8b4:	40000400 	.word	0x40000400
 800a8b8:	40000800 	.word	0x40000800
 800a8bc:	40000c00 	.word	0x40000c00
 800a8c0:	00010007 	.word	0x00010007

0800a8c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d122      	bne.n	800a920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d11b      	bne.n	800a920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f06f 0202 	mvn.w	r2, #2
 800a8f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fb9a 	bl	800b040 <HAL_TIM_IC_CaptureCallback>
 800a90c:	e005      	b.n	800a91a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fb8c 	bl	800b02c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fb9d 	bl	800b054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	f003 0304 	and.w	r3, r3, #4
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d122      	bne.n	800a974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d11b      	bne.n	800a974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f06f 0204 	mvn.w	r2, #4
 800a944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2202      	movs	r2, #2
 800a94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fb70 	bl	800b040 <HAL_TIM_IC_CaptureCallback>
 800a960:	e005      	b.n	800a96e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fb62 	bl	800b02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fb73 	bl	800b054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b08      	cmp	r3, #8
 800a980:	d122      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f003 0308 	and.w	r3, r3, #8
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d11b      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f06f 0208 	mvn.w	r2, #8
 800a998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2204      	movs	r2, #4
 800a99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fb46 	bl	800b040 <HAL_TIM_IC_CaptureCallback>
 800a9b4:	e005      	b.n	800a9c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fb38 	bl	800b02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb49 	bl	800b054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0310 	and.w	r3, r3, #16
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d122      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	d11b      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0210 	mvn.w	r2, #16
 800a9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fb1c 	bl	800b040 <HAL_TIM_IC_CaptureCallback>
 800aa08:	e005      	b.n	800aa16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fb0e 	bl	800b02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fb1f 	bl	800b054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d10e      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d107      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f06f 0201 	mvn.w	r2, #1
 800aa40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fae8 	bl	800b018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d10e      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa60:	2b80      	cmp	r3, #128	; 0x80
 800aa62:	d107      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 f838 	bl	800bae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa82:	d10e      	bne.n	800aaa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8e:	2b80      	cmp	r3, #128	; 0x80
 800aa90:	d107      	bne.n	800aaa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 f82b 	bl	800baf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaac:	2b40      	cmp	r3, #64	; 0x40
 800aaae:	d10e      	bne.n	800aace <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	d107      	bne.n	800aace <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 facd 	bl	800b068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f003 0320 	and.w	r3, r3, #32
 800aad8:	2b20      	cmp	r3, #32
 800aada:	d10e      	bne.n	800aafa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f003 0320 	and.w	r3, r3, #32
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	d107      	bne.n	800aafa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f06f 0220 	mvn.w	r2, #32
 800aaf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 ffeb 	bl	800bad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab08:	d10f      	bne.n	800ab2a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab18:	d107      	bne.n	800ab2a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ab22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fff1 	bl	800bb0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab38:	d10f      	bne.n	800ab5a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab48:	d107      	bne.n	800ab5a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ab52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 ffe3 	bl	800bb20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab68:	d10f      	bne.n	800ab8a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab78:	d107      	bne.n	800ab8a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ab82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 ffd5 	bl	800bb34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab98:	d10f      	bne.n	800abba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aba8:	d107      	bne.n	800abba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800abb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 ffc7 	bl	800bb48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abde:	2302      	movs	r3, #2
 800abe0:	e0ff      	b.n	800ade2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b14      	cmp	r3, #20
 800abee:	f200 80f0 	bhi.w	800add2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac4d 	.word	0x0800ac4d
 800abfc:	0800add3 	.word	0x0800add3
 800ac00:	0800add3 	.word	0x0800add3
 800ac04:	0800add3 	.word	0x0800add3
 800ac08:	0800ac8d 	.word	0x0800ac8d
 800ac0c:	0800add3 	.word	0x0800add3
 800ac10:	0800add3 	.word	0x0800add3
 800ac14:	0800add3 	.word	0x0800add3
 800ac18:	0800accf 	.word	0x0800accf
 800ac1c:	0800add3 	.word	0x0800add3
 800ac20:	0800add3 	.word	0x0800add3
 800ac24:	0800add3 	.word	0x0800add3
 800ac28:	0800ad0f 	.word	0x0800ad0f
 800ac2c:	0800add3 	.word	0x0800add3
 800ac30:	0800add3 	.word	0x0800add3
 800ac34:	0800add3 	.word	0x0800add3
 800ac38:	0800ad51 	.word	0x0800ad51
 800ac3c:	0800add3 	.word	0x0800add3
 800ac40:	0800add3 	.word	0x0800add3
 800ac44:	0800add3 	.word	0x0800add3
 800ac48:	0800ad91 	.word	0x0800ad91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 faba 	bl	800b1cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	699a      	ldr	r2, [r3, #24]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f042 0208 	orr.w	r2, r2, #8
 800ac66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0204 	bic.w	r2, r2, #4
 800ac76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6999      	ldr	r1, [r3, #24]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	691a      	ldr	r2, [r3, #16]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	619a      	str	r2, [r3, #24]
      break;
 800ac8a:	e0a5      	b.n	800add8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68b9      	ldr	r1, [r7, #8]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fb34 	bl	800b300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699a      	ldr	r2, [r3, #24]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	699a      	ldr	r2, [r3, #24]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6999      	ldr	r1, [r3, #24]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	021a      	lsls	r2, r3, #8
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	619a      	str	r2, [r3, #24]
      break;
 800accc:	e084      	b.n	800add8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 fba7 	bl	800b428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69da      	ldr	r2, [r3, #28]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f042 0208 	orr.w	r2, r2, #8
 800ace8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69da      	ldr	r2, [r3, #28]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f022 0204 	bic.w	r2, r2, #4
 800acf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	69d9      	ldr	r1, [r3, #28]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	691a      	ldr	r2, [r3, #16]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	61da      	str	r2, [r3, #28]
      break;
 800ad0c:	e064      	b.n	800add8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fc19 	bl	800b54c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69da      	ldr	r2, [r3, #28]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	69da      	ldr	r2, [r3, #28]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	69d9      	ldr	r1, [r3, #28]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	021a      	lsls	r2, r3, #8
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	61da      	str	r2, [r3, #28]
      break;
 800ad4e:	e043      	b.n	800add8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fc8c 	bl	800b674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f042 0208 	orr.w	r2, r2, #8
 800ad6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0204 	bic.w	r2, r2, #4
 800ad7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ad8e:	e023      	b.n	800add8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fcd6 	bl	800b748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800add0:	e002      	b.n	800add8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	75fb      	strb	r3, [r7, #23]
      break;
 800add6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop

0800adec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d101      	bne.n	800ae08 <HAL_TIM_ConfigClockSource+0x1c>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e0f6      	b.n	800aff6 <HAL_TIM_ConfigClockSource+0x20a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ae26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ae2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a6f      	ldr	r2, [pc, #444]	; (800b000 <HAL_TIM_ConfigClockSource+0x214>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	f000 80c1 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800ae48:	4a6d      	ldr	r2, [pc, #436]	; (800b000 <HAL_TIM_ConfigClockSource+0x214>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f200 80c6 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae50:	4a6c      	ldr	r2, [pc, #432]	; (800b004 <HAL_TIM_ConfigClockSource+0x218>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	f000 80b9 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800ae58:	4a6a      	ldr	r2, [pc, #424]	; (800b004 <HAL_TIM_ConfigClockSource+0x218>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	f200 80be 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae60:	4a69      	ldr	r2, [pc, #420]	; (800b008 <HAL_TIM_ConfigClockSource+0x21c>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	f000 80b1 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800ae68:	4a67      	ldr	r2, [pc, #412]	; (800b008 <HAL_TIM_ConfigClockSource+0x21c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	f200 80b6 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae70:	4a66      	ldr	r2, [pc, #408]	; (800b00c <HAL_TIM_ConfigClockSource+0x220>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	f000 80a9 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800ae78:	4a64      	ldr	r2, [pc, #400]	; (800b00c <HAL_TIM_ConfigClockSource+0x220>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	f200 80ae 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae80:	4a63      	ldr	r2, [pc, #396]	; (800b010 <HAL_TIM_ConfigClockSource+0x224>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	f000 80a1 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800ae88:	4a61      	ldr	r2, [pc, #388]	; (800b010 <HAL_TIM_ConfigClockSource+0x224>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	f200 80a6 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae90:	4a60      	ldr	r2, [pc, #384]	; (800b014 <HAL_TIM_ConfigClockSource+0x228>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	f000 8099 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800ae98:	4a5e      	ldr	r2, [pc, #376]	; (800b014 <HAL_TIM_ConfigClockSource+0x228>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	f200 809e 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aea0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aea4:	f000 8091 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800aea8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aeac:	f200 8096 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aeb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeb4:	f000 8089 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800aeb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aebc:	f200 808e 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec4:	d03e      	beq.n	800af44 <HAL_TIM_ConfigClockSource+0x158>
 800aec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeca:	f200 8087 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aed2:	f000 8086 	beq.w	800afe2 <HAL_TIM_ConfigClockSource+0x1f6>
 800aed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeda:	d87f      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aedc:	2b70      	cmp	r3, #112	; 0x70
 800aede:	d01a      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0x12a>
 800aee0:	2b70      	cmp	r3, #112	; 0x70
 800aee2:	d87b      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aee4:	2b60      	cmp	r3, #96	; 0x60
 800aee6:	d050      	beq.n	800af8a <HAL_TIM_ConfigClockSource+0x19e>
 800aee8:	2b60      	cmp	r3, #96	; 0x60
 800aeea:	d877      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aeec:	2b50      	cmp	r3, #80	; 0x50
 800aeee:	d03c      	beq.n	800af6a <HAL_TIM_ConfigClockSource+0x17e>
 800aef0:	2b50      	cmp	r3, #80	; 0x50
 800aef2:	d873      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aef4:	2b40      	cmp	r3, #64	; 0x40
 800aef6:	d058      	beq.n	800afaa <HAL_TIM_ConfigClockSource+0x1be>
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d86f      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800aefc:	2b30      	cmp	r3, #48	; 0x30
 800aefe:	d064      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800af00:	2b30      	cmp	r3, #48	; 0x30
 800af02:	d86b      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800af04:	2b20      	cmp	r3, #32
 800af06:	d060      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d867      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d05c      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800af10:	2b10      	cmp	r3, #16
 800af12:	d05a      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x1de>
 800af14:	e062      	b.n	800afdc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6818      	ldr	r0, [r3, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	6899      	ldr	r1, [r3, #8]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	f000 fcf7 	bl	800b918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	609a      	str	r2, [r3, #8]
      break;
 800af42:	e04f      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6818      	ldr	r0, [r3, #0]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	6899      	ldr	r1, [r3, #8]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	f000 fce0 	bl	800b918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af66:	609a      	str	r2, [r3, #8]
      break;
 800af68:	e03c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6818      	ldr	r0, [r3, #0]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	6859      	ldr	r1, [r3, #4]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	461a      	mov	r2, r3
 800af78:	f000 fc52 	bl	800b820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2150      	movs	r1, #80	; 0x50
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fcab 	bl	800b8de <TIM_ITRx_SetConfig>
      break;
 800af88:	e02c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6859      	ldr	r1, [r3, #4]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	461a      	mov	r2, r3
 800af98:	f000 fc71 	bl	800b87e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2160      	movs	r1, #96	; 0x60
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fc9b 	bl	800b8de <TIM_ITRx_SetConfig>
      break;
 800afa8:	e01c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6859      	ldr	r1, [r3, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	461a      	mov	r2, r3
 800afb8:	f000 fc32 	bl	800b820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2140      	movs	r1, #64	; 0x40
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fc8b 	bl	800b8de <TIM_ITRx_SetConfig>
      break;
 800afc8:	e00c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f000 fc82 	bl	800b8de <TIM_ITRx_SetConfig>
      break;
 800afda:	e003      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
      break;
 800afe0:	e000      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800afe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	00100070 	.word	0x00100070
 800b004:	00100060 	.word	0x00100060
 800b008:	00100050 	.word	0x00100050
 800b00c:	00100040 	.word	0x00100040
 800b010:	00100030 	.word	0x00100030
 800b014:	00100020 	.word	0x00100020

0800b018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a46      	ldr	r2, [pc, #280]	; (800b1a8 <TIM_Base_SetConfig+0x12c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d017      	beq.n	800b0c4 <TIM_Base_SetConfig+0x48>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b09a:	d013      	beq.n	800b0c4 <TIM_Base_SetConfig+0x48>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a43      	ldr	r2, [pc, #268]	; (800b1ac <TIM_Base_SetConfig+0x130>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d00f      	beq.n	800b0c4 <TIM_Base_SetConfig+0x48>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a42      	ldr	r2, [pc, #264]	; (800b1b0 <TIM_Base_SetConfig+0x134>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d00b      	beq.n	800b0c4 <TIM_Base_SetConfig+0x48>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a41      	ldr	r2, [pc, #260]	; (800b1b4 <TIM_Base_SetConfig+0x138>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d007      	beq.n	800b0c4 <TIM_Base_SetConfig+0x48>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a40      	ldr	r2, [pc, #256]	; (800b1b8 <TIM_Base_SetConfig+0x13c>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d003      	beq.n	800b0c4 <TIM_Base_SetConfig+0x48>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a3f      	ldr	r2, [pc, #252]	; (800b1bc <TIM_Base_SetConfig+0x140>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d108      	bne.n	800b0d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a33      	ldr	r2, [pc, #204]	; (800b1a8 <TIM_Base_SetConfig+0x12c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d023      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e4:	d01f      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a30      	ldr	r2, [pc, #192]	; (800b1ac <TIM_Base_SetConfig+0x130>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d01b      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a2f      	ldr	r2, [pc, #188]	; (800b1b0 <TIM_Base_SetConfig+0x134>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d017      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a2e      	ldr	r2, [pc, #184]	; (800b1b4 <TIM_Base_SetConfig+0x138>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d013      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a2d      	ldr	r2, [pc, #180]	; (800b1b8 <TIM_Base_SetConfig+0x13c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d00f      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a2d      	ldr	r2, [pc, #180]	; (800b1c0 <TIM_Base_SetConfig+0x144>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d00b      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a2c      	ldr	r2, [pc, #176]	; (800b1c4 <TIM_Base_SetConfig+0x148>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d007      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a2b      	ldr	r2, [pc, #172]	; (800b1c8 <TIM_Base_SetConfig+0x14c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d003      	beq.n	800b126 <TIM_Base_SetConfig+0xaa>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a26      	ldr	r2, [pc, #152]	; (800b1bc <TIM_Base_SetConfig+0x140>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d108      	bne.n	800b138 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b12c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	4313      	orrs	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a12      	ldr	r2, [pc, #72]	; (800b1a8 <TIM_Base_SetConfig+0x12c>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d013      	beq.n	800b18c <TIM_Base_SetConfig+0x110>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <TIM_Base_SetConfig+0x13c>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00f      	beq.n	800b18c <TIM_Base_SetConfig+0x110>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a14      	ldr	r2, [pc, #80]	; (800b1c0 <TIM_Base_SetConfig+0x144>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d00b      	beq.n	800b18c <TIM_Base_SetConfig+0x110>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a13      	ldr	r2, [pc, #76]	; (800b1c4 <TIM_Base_SetConfig+0x148>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d007      	beq.n	800b18c <TIM_Base_SetConfig+0x110>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a12      	ldr	r2, [pc, #72]	; (800b1c8 <TIM_Base_SetConfig+0x14c>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d003      	beq.n	800b18c <TIM_Base_SetConfig+0x110>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a0d      	ldr	r2, [pc, #52]	; (800b1bc <TIM_Base_SetConfig+0x140>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d103      	bne.n	800b194 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	615a      	str	r2, [r3, #20]
}
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	40012c00 	.word	0x40012c00
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800
 800b1b4:	40000c00 	.word	0x40000c00
 800b1b8:	40013400 	.word	0x40013400
 800b1bc:	40015000 	.word	0x40015000
 800b1c0:	40014000 	.word	0x40014000
 800b1c4:	40014400 	.word	0x40014400
 800b1c8:	40014800 	.word	0x40014800

0800b1cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	f023 0201 	bic.w	r2, r3, #1
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0303 	bic.w	r3, r3, #3
 800b206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f023 0302 	bic.w	r3, r3, #2
 800b218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a30      	ldr	r2, [pc, #192]	; (800b2e8 <TIM_OC1_SetConfig+0x11c>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d013      	beq.n	800b254 <TIM_OC1_SetConfig+0x88>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a2f      	ldr	r2, [pc, #188]	; (800b2ec <TIM_OC1_SetConfig+0x120>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d00f      	beq.n	800b254 <TIM_OC1_SetConfig+0x88>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a2e      	ldr	r2, [pc, #184]	; (800b2f0 <TIM_OC1_SetConfig+0x124>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d00b      	beq.n	800b254 <TIM_OC1_SetConfig+0x88>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a2d      	ldr	r2, [pc, #180]	; (800b2f4 <TIM_OC1_SetConfig+0x128>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d007      	beq.n	800b254 <TIM_OC1_SetConfig+0x88>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a2c      	ldr	r2, [pc, #176]	; (800b2f8 <TIM_OC1_SetConfig+0x12c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d003      	beq.n	800b254 <TIM_OC1_SetConfig+0x88>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <TIM_OC1_SetConfig+0x130>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d10c      	bne.n	800b26e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	f023 0308 	bic.w	r3, r3, #8
 800b25a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	4313      	orrs	r3, r2
 800b264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f023 0304 	bic.w	r3, r3, #4
 800b26c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a1d      	ldr	r2, [pc, #116]	; (800b2e8 <TIM_OC1_SetConfig+0x11c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d013      	beq.n	800b29e <TIM_OC1_SetConfig+0xd2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a1c      	ldr	r2, [pc, #112]	; (800b2ec <TIM_OC1_SetConfig+0x120>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00f      	beq.n	800b29e <TIM_OC1_SetConfig+0xd2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <TIM_OC1_SetConfig+0x124>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00b      	beq.n	800b29e <TIM_OC1_SetConfig+0xd2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1a      	ldr	r2, [pc, #104]	; (800b2f4 <TIM_OC1_SetConfig+0x128>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d007      	beq.n	800b29e <TIM_OC1_SetConfig+0xd2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a19      	ldr	r2, [pc, #100]	; (800b2f8 <TIM_OC1_SetConfig+0x12c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d003      	beq.n	800b29e <TIM_OC1_SetConfig+0xd2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a18      	ldr	r2, [pc, #96]	; (800b2fc <TIM_OC1_SetConfig+0x130>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d111      	bne.n	800b2c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	621a      	str	r2, [r3, #32]
}
 800b2dc:	bf00      	nop
 800b2de:	371c      	adds	r7, #28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	40012c00 	.word	0x40012c00
 800b2ec:	40013400 	.word	0x40013400
 800b2f0:	40014000 	.word	0x40014000
 800b2f4:	40014400 	.word	0x40014400
 800b2f8:	40014800 	.word	0x40014800
 800b2fc:	40015000 	.word	0x40015000

0800b300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f023 0210 	bic.w	r2, r3, #16
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b32e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	021b      	lsls	r3, r3, #8
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	4313      	orrs	r3, r2
 800b346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f023 0320 	bic.w	r3, r3, #32
 800b34e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	011b      	lsls	r3, r3, #4
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a2c      	ldr	r2, [pc, #176]	; (800b410 <TIM_OC2_SetConfig+0x110>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d007      	beq.n	800b374 <TIM_OC2_SetConfig+0x74>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a2b      	ldr	r2, [pc, #172]	; (800b414 <TIM_OC2_SetConfig+0x114>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <TIM_OC2_SetConfig+0x74>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a2a      	ldr	r2, [pc, #168]	; (800b418 <TIM_OC2_SetConfig+0x118>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d10d      	bne.n	800b390 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	011b      	lsls	r3, r3, #4
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4313      	orrs	r3, r2
 800b386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b38e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <TIM_OC2_SetConfig+0x110>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d013      	beq.n	800b3c0 <TIM_OC2_SetConfig+0xc0>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <TIM_OC2_SetConfig+0x114>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00f      	beq.n	800b3c0 <TIM_OC2_SetConfig+0xc0>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a1e      	ldr	r2, [pc, #120]	; (800b41c <TIM_OC2_SetConfig+0x11c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00b      	beq.n	800b3c0 <TIM_OC2_SetConfig+0xc0>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a1d      	ldr	r2, [pc, #116]	; (800b420 <TIM_OC2_SetConfig+0x120>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d007      	beq.n	800b3c0 <TIM_OC2_SetConfig+0xc0>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a1c      	ldr	r2, [pc, #112]	; (800b424 <TIM_OC2_SetConfig+0x124>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d003      	beq.n	800b3c0 <TIM_OC2_SetConfig+0xc0>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a17      	ldr	r2, [pc, #92]	; (800b418 <TIM_OC2_SetConfig+0x118>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d113      	bne.n	800b3e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	621a      	str	r2, [r3, #32]
}
 800b402:	bf00      	nop
 800b404:	371c      	adds	r7, #28
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	40012c00 	.word	0x40012c00
 800b414:	40013400 	.word	0x40013400
 800b418:	40015000 	.word	0x40015000
 800b41c:	40014000 	.word	0x40014000
 800b420:	40014400 	.word	0x40014400
 800b424:	40014800 	.word	0x40014800

0800b428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	021b      	lsls	r3, r3, #8
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	4313      	orrs	r3, r2
 800b480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a2b      	ldr	r2, [pc, #172]	; (800b534 <TIM_OC3_SetConfig+0x10c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d007      	beq.n	800b49a <TIM_OC3_SetConfig+0x72>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a2a      	ldr	r2, [pc, #168]	; (800b538 <TIM_OC3_SetConfig+0x110>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d003      	beq.n	800b49a <TIM_OC3_SetConfig+0x72>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a29      	ldr	r2, [pc, #164]	; (800b53c <TIM_OC3_SetConfig+0x114>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d10d      	bne.n	800b4b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	021b      	lsls	r3, r3, #8
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a1e      	ldr	r2, [pc, #120]	; (800b534 <TIM_OC3_SetConfig+0x10c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d013      	beq.n	800b4e6 <TIM_OC3_SetConfig+0xbe>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a1d      	ldr	r2, [pc, #116]	; (800b538 <TIM_OC3_SetConfig+0x110>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d00f      	beq.n	800b4e6 <TIM_OC3_SetConfig+0xbe>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a1d      	ldr	r2, [pc, #116]	; (800b540 <TIM_OC3_SetConfig+0x118>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d00b      	beq.n	800b4e6 <TIM_OC3_SetConfig+0xbe>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a1c      	ldr	r2, [pc, #112]	; (800b544 <TIM_OC3_SetConfig+0x11c>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d007      	beq.n	800b4e6 <TIM_OC3_SetConfig+0xbe>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1b      	ldr	r2, [pc, #108]	; (800b548 <TIM_OC3_SetConfig+0x120>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d003      	beq.n	800b4e6 <TIM_OC3_SetConfig+0xbe>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a16      	ldr	r2, [pc, #88]	; (800b53c <TIM_OC3_SetConfig+0x114>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d113      	bne.n	800b50e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	011b      	lsls	r3, r3, #4
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	011b      	lsls	r3, r3, #4
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	621a      	str	r2, [r3, #32]
}
 800b528:	bf00      	nop
 800b52a:	371c      	adds	r7, #28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	40012c00 	.word	0x40012c00
 800b538:	40013400 	.word	0x40013400
 800b53c:	40015000 	.word	0x40015000
 800b540:	40014000 	.word	0x40014000
 800b544:	40014400 	.word	0x40014400
 800b548:	40014800 	.word	0x40014800

0800b54c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b57a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4313      	orrs	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b59a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	031b      	lsls	r3, r3, #12
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a2c      	ldr	r2, [pc, #176]	; (800b65c <TIM_OC4_SetConfig+0x110>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d007      	beq.n	800b5c0 <TIM_OC4_SetConfig+0x74>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a2b      	ldr	r2, [pc, #172]	; (800b660 <TIM_OC4_SetConfig+0x114>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d003      	beq.n	800b5c0 <TIM_OC4_SetConfig+0x74>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a2a      	ldr	r2, [pc, #168]	; (800b664 <TIM_OC4_SetConfig+0x118>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10d      	bne.n	800b5dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	031b      	lsls	r3, r3, #12
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a1f      	ldr	r2, [pc, #124]	; (800b65c <TIM_OC4_SetConfig+0x110>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d013      	beq.n	800b60c <TIM_OC4_SetConfig+0xc0>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a1e      	ldr	r2, [pc, #120]	; (800b660 <TIM_OC4_SetConfig+0x114>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d00f      	beq.n	800b60c <TIM_OC4_SetConfig+0xc0>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a1e      	ldr	r2, [pc, #120]	; (800b668 <TIM_OC4_SetConfig+0x11c>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d00b      	beq.n	800b60c <TIM_OC4_SetConfig+0xc0>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a1d      	ldr	r2, [pc, #116]	; (800b66c <TIM_OC4_SetConfig+0x120>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d007      	beq.n	800b60c <TIM_OC4_SetConfig+0xc0>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a1c      	ldr	r2, [pc, #112]	; (800b670 <TIM_OC4_SetConfig+0x124>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d003      	beq.n	800b60c <TIM_OC4_SetConfig+0xc0>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a17      	ldr	r2, [pc, #92]	; (800b664 <TIM_OC4_SetConfig+0x118>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d113      	bne.n	800b634 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b612:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b61a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	019b      	lsls	r3, r3, #6
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	4313      	orrs	r3, r2
 800b626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	019b      	lsls	r3, r3, #6
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	4313      	orrs	r3, r2
 800b632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	621a      	str	r2, [r3, #32]
}
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	40012c00 	.word	0x40012c00
 800b660:	40013400 	.word	0x40013400
 800b664:	40015000 	.word	0x40015000
 800b668:	40014000 	.word	0x40014000
 800b66c:	40014400 	.word	0x40014400
 800b670:	40014800 	.word	0x40014800

0800b674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a19      	ldr	r2, [pc, #100]	; (800b730 <TIM_OC5_SetConfig+0xbc>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d013      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x82>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a18      	ldr	r2, [pc, #96]	; (800b734 <TIM_OC5_SetConfig+0xc0>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00f      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x82>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a17      	ldr	r2, [pc, #92]	; (800b738 <TIM_OC5_SetConfig+0xc4>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00b      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x82>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a16      	ldr	r2, [pc, #88]	; (800b73c <TIM_OC5_SetConfig+0xc8>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d007      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x82>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a15      	ldr	r2, [pc, #84]	; (800b740 <TIM_OC5_SetConfig+0xcc>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d003      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x82>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a14      	ldr	r2, [pc, #80]	; (800b744 <TIM_OC5_SetConfig+0xd0>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d109      	bne.n	800b70a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	021b      	lsls	r3, r3, #8
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	4313      	orrs	r3, r2
 800b708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	621a      	str	r2, [r3, #32]
}
 800b724:	bf00      	nop
 800b726:	371c      	adds	r7, #28
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	40012c00 	.word	0x40012c00
 800b734:	40013400 	.word	0x40013400
 800b738:	40014000 	.word	0x40014000
 800b73c:	40014400 	.word	0x40014400
 800b740:	40014800 	.word	0x40014800
 800b744:	40015000 	.word	0x40015000

0800b748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4313      	orrs	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b78e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	051b      	lsls	r3, r3, #20
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	4313      	orrs	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a1a      	ldr	r2, [pc, #104]	; (800b808 <TIM_OC6_SetConfig+0xc0>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d013      	beq.n	800b7cc <TIM_OC6_SetConfig+0x84>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a19      	ldr	r2, [pc, #100]	; (800b80c <TIM_OC6_SetConfig+0xc4>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d00f      	beq.n	800b7cc <TIM_OC6_SetConfig+0x84>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a18      	ldr	r2, [pc, #96]	; (800b810 <TIM_OC6_SetConfig+0xc8>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d00b      	beq.n	800b7cc <TIM_OC6_SetConfig+0x84>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a17      	ldr	r2, [pc, #92]	; (800b814 <TIM_OC6_SetConfig+0xcc>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d007      	beq.n	800b7cc <TIM_OC6_SetConfig+0x84>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a16      	ldr	r2, [pc, #88]	; (800b818 <TIM_OC6_SetConfig+0xd0>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d003      	beq.n	800b7cc <TIM_OC6_SetConfig+0x84>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a15      	ldr	r2, [pc, #84]	; (800b81c <TIM_OC6_SetConfig+0xd4>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d109      	bne.n	800b7e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	695b      	ldr	r3, [r3, #20]
 800b7d8:	029b      	lsls	r3, r3, #10
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	621a      	str	r2, [r3, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	40012c00 	.word	0x40012c00
 800b80c:	40013400 	.word	0x40013400
 800b810:	40014000 	.word	0x40014000
 800b814:	40014400 	.word	0x40014400
 800b818:	40014800 	.word	0x40014800
 800b81c:	40015000 	.word	0x40015000

0800b820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	f023 0201 	bic.w	r2, r3, #1
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b84a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	4313      	orrs	r3, r2
 800b854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f023 030a 	bic.w	r3, r3, #10
 800b85c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	4313      	orrs	r3, r2
 800b864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	621a      	str	r2, [r3, #32]
}
 800b872:	bf00      	nop
 800b874:	371c      	adds	r7, #28
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b87e:	b480      	push	{r7}
 800b880:	b087      	sub	sp, #28
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	f023 0210 	bic.w	r2, r3, #16
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	031b      	lsls	r3, r3, #12
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	621a      	str	r2, [r3, #32]
}
 800b8d2:	bf00      	nop
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b8f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	f043 0307 	orr.w	r3, r3, #7
 800b904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	609a      	str	r2, [r3, #8]
}
 800b90c:	bf00      	nop
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	021a      	lsls	r2, r3, #8
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	431a      	orrs	r2, r3
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4313      	orrs	r3, r2
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	4313      	orrs	r3, r2
 800b944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	609a      	str	r2, [r3, #8]
}
 800b94c:	bf00      	nop
 800b94e:	371c      	adds	r7, #28
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b958:	b480      	push	{r7}
 800b95a:	b087      	sub	sp, #28
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 031f 	and.w	r3, r3, #31
 800b96a:	2201      	movs	r2, #1
 800b96c:	fa02 f303 	lsl.w	r3, r2, r3
 800b970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6a1a      	ldr	r2, [r3, #32]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	43db      	mvns	r3, r3
 800b97a:	401a      	ands	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6a1a      	ldr	r2, [r3, #32]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f003 031f 	and.w	r3, r3, #31
 800b98a:	6879      	ldr	r1, [r7, #4]
 800b98c:	fa01 f303 	lsl.w	r3, r1, r3
 800b990:	431a      	orrs	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	621a      	str	r2, [r3, #32]
}
 800b996:	bf00      	nop
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e074      	b.n	800baa6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a34      	ldr	r2, [pc, #208]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d009      	beq.n	800b9fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a33      	ldr	r2, [pc, #204]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d004      	beq.n	800b9fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a31      	ldr	r2, [pc, #196]	; (800babc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d108      	bne.n	800ba0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ba12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d022      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba3c:	d01d      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a1f      	ldr	r2, [pc, #124]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d018      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a1d      	ldr	r2, [pc, #116]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d013      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a1c      	ldr	r2, [pc, #112]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d00e      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d009      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a18      	ldr	r2, [pc, #96]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d004      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d10c      	bne.n	800ba94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	40012c00 	.word	0x40012c00
 800bab8:	40013400 	.word	0x40013400
 800babc:	40015000 	.word	0x40015000
 800bac0:	40000400 	.word	0x40000400
 800bac4:	40000800 	.word	0x40000800
 800bac8:	40000c00 	.word	0x40000c00
 800bacc:	40014000 	.word	0x40014000

0800bad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e042      	b.n	800bbf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d106      	bne.n	800bb86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7fa f945 	bl	8005e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2224      	movs	r2, #36	; 0x24
 800bb8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f022 0201 	bic.w	r2, r2, #1
 800bb9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fc50 	bl	800c444 <UART_SetConfig>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d101      	bne.n	800bbae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e022      	b.n	800bbf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 ff40 	bl	800ca3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689a      	ldr	r2, [r3, #8]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f042 0201 	orr.w	r2, r2, #1
 800bbea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 ffc7 	bl	800cb80 <UART_CheckIdleState>
 800bbf2:	4603      	mov	r3, r0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	; 0x28
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc12:	2b20      	cmp	r3, #32
 800bc14:	f040 8083 	bne.w	800bd1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <HAL_UART_Transmit+0x28>
 800bc1e:	88fb      	ldrh	r3, [r7, #6]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e07b      	b.n	800bd20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d101      	bne.n	800bc36 <HAL_UART_Transmit+0x3a>
 800bc32:	2302      	movs	r3, #2
 800bc34:	e074      	b.n	800bd20 <HAL_UART_Transmit+0x124>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2221      	movs	r2, #33	; 0x21
 800bc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc4e:	f7fa f9f3 	bl	8006038 <HAL_GetTick>
 800bc52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	88fa      	ldrh	r2, [r7, #6]
 800bc60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc6c:	d108      	bne.n	800bc80 <HAL_UART_Transmit+0x84>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d104      	bne.n	800bc80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	e003      	b.n	800bc88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bc90:	e02c      	b.n	800bcec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2180      	movs	r1, #128	; 0x80
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f000 ffba 	bl	800cc16 <UART_WaitOnFlagUntilTimeout>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e039      	b.n	800bd20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10b      	bne.n	800bcca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	3302      	adds	r3, #2
 800bcc6:	61bb      	str	r3, [r7, #24]
 800bcc8:	e007      	b.n	800bcda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	781a      	ldrb	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	3b01      	subs	r3, #1
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1cc      	bne.n	800bc92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2140      	movs	r1, #64	; 0x40
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 ff87 	bl	800cc16 <UART_WaitOnFlagUntilTimeout>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e006      	b.n	800bd20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e000      	b.n	800bd20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bd1e:	2302      	movs	r3, #2
  }
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3720      	adds	r7, #32
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	4613      	mov	r3, r2
 800bd34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd3c:	2b20      	cmp	r3, #32
 800bd3e:	d142      	bne.n	800bdc6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d002      	beq.n	800bd4c <HAL_UART_Receive_IT+0x24>
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e03b      	b.n	800bdc8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d101      	bne.n	800bd5e <HAL_UART_Receive_IT+0x36>
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	e034      	b.n	800bdc8 <HAL_UART_Receive_IT+0xa0>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a17      	ldr	r2, [pc, #92]	; (800bdd0 <HAL_UART_Receive_IT+0xa8>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d01f      	beq.n	800bdb6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d018      	beq.n	800bdb6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	613b      	str	r3, [r7, #16]
   return(result);
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	623b      	str	r3, [r7, #32]
 800bda4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	69f9      	ldr	r1, [r7, #28]
 800bda8:	6a3a      	ldr	r2, [r7, #32]
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e6      	bne.n	800bd84 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bdb6:	88fb      	ldrh	r3, [r7, #6]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 fff3 	bl	800cda8 <UART_Start_Receive_IT>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	e000      	b.n	800bdc8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bdc6:	2302      	movs	r3, #2
  }
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3728      	adds	r7, #40	; 0x28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	40008000 	.word	0x40008000

0800bdd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b0ba      	sub	sp, #232	; 0xe8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	69db      	ldr	r3, [r3, #28]
 800bde2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bdfe:	f640 030f 	movw	r3, #2063	; 0x80f
 800be02:	4013      	ands	r3, r2
 800be04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800be08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d11b      	bne.n	800be48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d015      	beq.n	800be48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	2b00      	cmp	r3, #0
 800be26:	d105      	bne.n	800be34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d009      	beq.n	800be48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 82d6 	beq.w	800c3ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	4798      	blx	r3
      }
      return;
 800be46:	e2d0      	b.n	800c3ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 811f 	beq.w	800c090 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be56:	4b8b      	ldr	r3, [pc, #556]	; (800c084 <HAL_UART_IRQHandler+0x2b0>)
 800be58:	4013      	ands	r3, r2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be62:	4b89      	ldr	r3, [pc, #548]	; (800c088 <HAL_UART_IRQHandler+0x2b4>)
 800be64:	4013      	ands	r3, r2
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8112 	beq.w	800c090 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	d011      	beq.n	800be9c <HAL_UART_IRQHandler+0xc8>
 800be78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00b      	beq.n	800be9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2201      	movs	r2, #1
 800be8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be92:	f043 0201 	orr.w	r2, r3, #1
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d011      	beq.n	800becc <HAL_UART_IRQHandler+0xf8>
 800bea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00b      	beq.n	800becc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2202      	movs	r2, #2
 800beba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bec2:	f043 0204 	orr.w	r2, r3, #4
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800becc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d011      	beq.n	800befc <HAL_UART_IRQHandler+0x128>
 800bed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2204      	movs	r2, #4
 800beea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef2:	f043 0202 	orr.w	r2, r3, #2
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800befc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf00:	f003 0308 	and.w	r3, r3, #8
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d017      	beq.n	800bf38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf0c:	f003 0320 	and.w	r3, r3, #32
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d105      	bne.n	800bf20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf18:	4b5a      	ldr	r3, [pc, #360]	; (800c084 <HAL_UART_IRQHandler+0x2b0>)
 800bf1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2208      	movs	r2, #8
 800bf26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf2e:	f043 0208 	orr.w	r2, r3, #8
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d012      	beq.n	800bf6a <HAL_UART_IRQHandler+0x196>
 800bf44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00c      	beq.n	800bf6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf60:	f043 0220 	orr.w	r2, r3, #32
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 823c 	beq.w	800c3ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf7a:	f003 0320 	and.w	r3, r3, #32
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d013      	beq.n	800bfaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf86:	f003 0320 	and.w	r3, r3, #32
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d105      	bne.n	800bf9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfbe:	2b40      	cmp	r3, #64	; 0x40
 800bfc0:	d005      	beq.n	800bfce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d04f      	beq.n	800c06e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f001 f814 	bl	800cffc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfde:	2b40      	cmp	r3, #64	; 0x40
 800bfe0:	d141      	bne.n	800c066 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bff0:	e853 3f00 	ldrex	r3, [r3]
 800bff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3308      	adds	r3, #8
 800c00a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c00e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c01a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c01e:	e841 2300 	strex	r3, r2, [r1]
 800c022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1d9      	bne.n	800bfe2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d013      	beq.n	800c05e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c03a:	4a14      	ldr	r2, [pc, #80]	; (800c08c <HAL_UART_IRQHandler+0x2b8>)
 800c03c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c042:	4618      	mov	r0, r3
 800c044:	f7fb ffbb 	bl	8007fbe <HAL_DMA_Abort_IT>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d017      	beq.n	800c07e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	e00f      	b.n	800c07e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9da 	bl	800c418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c064:	e00b      	b.n	800c07e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f9d6 	bl	800c418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06c:	e007      	b.n	800c07e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f9d2 	bl	800c418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c07c:	e1b7      	b.n	800c3ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c07e:	bf00      	nop
    return;
 800c080:	e1b5      	b.n	800c3ee <HAL_UART_IRQHandler+0x61a>
 800c082:	bf00      	nop
 800c084:	10000001 	.word	0x10000001
 800c088:	04000120 	.word	0x04000120
 800c08c:	0800d0c9 	.word	0x0800d0c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c094:	2b01      	cmp	r3, #1
 800c096:	f040 814a 	bne.w	800c32e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c09e:	f003 0310 	and.w	r3, r3, #16
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 8143 	beq.w	800c32e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ac:	f003 0310 	and.w	r3, r3, #16
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 813c 	beq.w	800c32e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2210      	movs	r2, #16
 800c0bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c8:	2b40      	cmp	r3, #64	; 0x40
 800c0ca:	f040 80b5 	bne.w	800c238 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8187 	beq.w	800c3f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c0ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	f080 817f 	bcs.w	800c3f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0320 	and.w	r3, r3, #32
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f040 8086 	bne.w	800c21c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c12c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c13a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c13e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1da      	bne.n	800c110 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3308      	adds	r3, #8
 800c160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c16a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c16c:	f023 0301 	bic.w	r3, r3, #1
 800c170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3308      	adds	r3, #8
 800c17a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c17e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e1      	bne.n	800c15a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3308      	adds	r3, #8
 800c19c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1c2:	e841 2300 	strex	r3, r2, [r1]
 800c1c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1e3      	bne.n	800c196 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ec:	f023 0310 	bic.w	r3, r3, #16
 800c1f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800c200:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e4      	bne.n	800c1dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c216:	4618      	mov	r0, r3
 800c218:	f7fb fe78 	bl	8007f0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c228:	b29b      	uxth	r3, r3
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f8fb 	bl	800c42c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c236:	e0dc      	b.n	800c3f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c244:	b29b      	uxth	r3, r3
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c252:	b29b      	uxth	r3, r3
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 80ce 	beq.w	800c3f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c25a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 80c9 	beq.w	800c3f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c286:	647b      	str	r3, [r7, #68]	; 0x44
 800c288:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c28c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e4      	bne.n	800c264 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2b0:	f023 0301 	bic.w	r3, r3, #1
 800c2b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2c2:	633a      	str	r2, [r7, #48]	; 0x30
 800c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e1      	bne.n	800c29a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2220      	movs	r2, #32
 800c2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 0310 	bic.w	r3, r3, #16
 800c2fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	461a      	mov	r2, r3
 800c308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c30c:	61fb      	str	r3, [r7, #28]
 800c30e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c310:	69b9      	ldr	r1, [r7, #24]
 800c312:	69fa      	ldr	r2, [r7, #28]
 800c314:	e841 2300 	strex	r3, r2, [r1]
 800c318:	617b      	str	r3, [r7, #20]
   return(result);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e4      	bne.n	800c2ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f880 	bl	800c42c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c32c:	e063      	b.n	800c3f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00e      	beq.n	800c358 <HAL_UART_IRQHandler+0x584>
 800c33a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c33e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d008      	beq.n	800c358 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c34e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 fb57 	bl	800da04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c356:	e051      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c360:	2b00      	cmp	r3, #0
 800c362:	d014      	beq.n	800c38e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d105      	bne.n	800c37c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d008      	beq.n	800c38e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c380:	2b00      	cmp	r3, #0
 800c382:	d03a      	beq.n	800c3fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	4798      	blx	r3
    }
    return;
 800c38c:	e035      	b.n	800c3fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c396:	2b00      	cmp	r3, #0
 800c398:	d009      	beq.n	800c3ae <HAL_UART_IRQHandler+0x5da>
 800c39a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fea4 	bl	800d0f4 <UART_EndTransmit_IT>
    return;
 800c3ac:	e026      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d009      	beq.n	800c3ce <HAL_UART_IRQHandler+0x5fa>
 800c3ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f001 fb30 	bl	800da2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3cc:	e016      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d010      	beq.n	800c3fc <HAL_UART_IRQHandler+0x628>
 800c3da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	da0c      	bge.n	800c3fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f001 fb18 	bl	800da18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3e8:	e008      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
      return;
 800c3ea:	bf00      	nop
 800c3ec:	e006      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
    return;
 800c3ee:	bf00      	nop
 800c3f0:	e004      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
      return;
 800c3f2:	bf00      	nop
 800c3f4:	e002      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
      return;
 800c3f6:	bf00      	nop
 800c3f8:	e000      	b.n	800c3fc <HAL_UART_IRQHandler+0x628>
    return;
 800c3fa:	bf00      	nop
  }
}
 800c3fc:	37e8      	adds	r7, #232	; 0xe8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop

0800c404 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	460b      	mov	r3, r1
 800c436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c448:	b08c      	sub	sp, #48	; 0x30
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	431a      	orrs	r2, r3
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	695b      	ldr	r3, [r3, #20]
 800c462:	431a      	orrs	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	69db      	ldr	r3, [r3, #28]
 800c468:	4313      	orrs	r3, r2
 800c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	4baa      	ldr	r3, [pc, #680]	; (800c71c <UART_SetConfig+0x2d8>)
 800c474:	4013      	ands	r3, r2
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	6812      	ldr	r2, [r2, #0]
 800c47a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c47c:	430b      	orrs	r3, r1
 800c47e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	68da      	ldr	r2, [r3, #12]
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	430a      	orrs	r2, r1
 800c494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a9f      	ldr	r2, [pc, #636]	; (800c720 <UART_SetConfig+0x2dc>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d004      	beq.n	800c4b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c4ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	6812      	ldr	r2, [r2, #0]
 800c4c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4c4:	430b      	orrs	r3, r1
 800c4c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ce:	f023 010f 	bic.w	r1, r3, #15
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a90      	ldr	r2, [pc, #576]	; (800c724 <UART_SetConfig+0x2e0>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d125      	bne.n	800c534 <UART_SetConfig+0xf0>
 800c4e8:	4b8f      	ldr	r3, [pc, #572]	; (800c728 <UART_SetConfig+0x2e4>)
 800c4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d81a      	bhi.n	800c52c <UART_SetConfig+0xe8>
 800c4f6:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <UART_SetConfig+0xb8>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c50d 	.word	0x0800c50d
 800c500:	0800c51d 	.word	0x0800c51d
 800c504:	0800c515 	.word	0x0800c515
 800c508:	0800c525 	.word	0x0800c525
 800c50c:	2301      	movs	r3, #1
 800c50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c512:	e116      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c514:	2302      	movs	r3, #2
 800c516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c51a:	e112      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c51c:	2304      	movs	r3, #4
 800c51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c522:	e10e      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c524:	2308      	movs	r3, #8
 800c526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c52a:	e10a      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c52c:	2310      	movs	r3, #16
 800c52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c532:	e106      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a7c      	ldr	r2, [pc, #496]	; (800c72c <UART_SetConfig+0x2e8>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d138      	bne.n	800c5b0 <UART_SetConfig+0x16c>
 800c53e:	4b7a      	ldr	r3, [pc, #488]	; (800c728 <UART_SetConfig+0x2e4>)
 800c540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c544:	f003 030c 	and.w	r3, r3, #12
 800c548:	2b0c      	cmp	r3, #12
 800c54a:	d82d      	bhi.n	800c5a8 <UART_SetConfig+0x164>
 800c54c:	a201      	add	r2, pc, #4	; (adr r2, 800c554 <UART_SetConfig+0x110>)
 800c54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c552:	bf00      	nop
 800c554:	0800c589 	.word	0x0800c589
 800c558:	0800c5a9 	.word	0x0800c5a9
 800c55c:	0800c5a9 	.word	0x0800c5a9
 800c560:	0800c5a9 	.word	0x0800c5a9
 800c564:	0800c599 	.word	0x0800c599
 800c568:	0800c5a9 	.word	0x0800c5a9
 800c56c:	0800c5a9 	.word	0x0800c5a9
 800c570:	0800c5a9 	.word	0x0800c5a9
 800c574:	0800c591 	.word	0x0800c591
 800c578:	0800c5a9 	.word	0x0800c5a9
 800c57c:	0800c5a9 	.word	0x0800c5a9
 800c580:	0800c5a9 	.word	0x0800c5a9
 800c584:	0800c5a1 	.word	0x0800c5a1
 800c588:	2300      	movs	r3, #0
 800c58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c58e:	e0d8      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c590:	2302      	movs	r3, #2
 800c592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c596:	e0d4      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c598:	2304      	movs	r3, #4
 800c59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c59e:	e0d0      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5a0:	2308      	movs	r3, #8
 800c5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5a6:	e0cc      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5ae:	e0c8      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a5e      	ldr	r2, [pc, #376]	; (800c730 <UART_SetConfig+0x2ec>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d125      	bne.n	800c606 <UART_SetConfig+0x1c2>
 800c5ba:	4b5b      	ldr	r3, [pc, #364]	; (800c728 <UART_SetConfig+0x2e4>)
 800c5bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c5c4:	2b30      	cmp	r3, #48	; 0x30
 800c5c6:	d016      	beq.n	800c5f6 <UART_SetConfig+0x1b2>
 800c5c8:	2b30      	cmp	r3, #48	; 0x30
 800c5ca:	d818      	bhi.n	800c5fe <UART_SetConfig+0x1ba>
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	d00a      	beq.n	800c5e6 <UART_SetConfig+0x1a2>
 800c5d0:	2b20      	cmp	r3, #32
 800c5d2:	d814      	bhi.n	800c5fe <UART_SetConfig+0x1ba>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <UART_SetConfig+0x19a>
 800c5d8:	2b10      	cmp	r3, #16
 800c5da:	d008      	beq.n	800c5ee <UART_SetConfig+0x1aa>
 800c5dc:	e00f      	b.n	800c5fe <UART_SetConfig+0x1ba>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5e4:	e0ad      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5e6:	2302      	movs	r3, #2
 800c5e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5ec:	e0a9      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5ee:	2304      	movs	r3, #4
 800c5f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5f4:	e0a5      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5f6:	2308      	movs	r3, #8
 800c5f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5fc:	e0a1      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c5fe:	2310      	movs	r3, #16
 800c600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c604:	e09d      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a4a      	ldr	r2, [pc, #296]	; (800c734 <UART_SetConfig+0x2f0>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d125      	bne.n	800c65c <UART_SetConfig+0x218>
 800c610:	4b45      	ldr	r3, [pc, #276]	; (800c728 <UART_SetConfig+0x2e4>)
 800c612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c61a:	2bc0      	cmp	r3, #192	; 0xc0
 800c61c:	d016      	beq.n	800c64c <UART_SetConfig+0x208>
 800c61e:	2bc0      	cmp	r3, #192	; 0xc0
 800c620:	d818      	bhi.n	800c654 <UART_SetConfig+0x210>
 800c622:	2b80      	cmp	r3, #128	; 0x80
 800c624:	d00a      	beq.n	800c63c <UART_SetConfig+0x1f8>
 800c626:	2b80      	cmp	r3, #128	; 0x80
 800c628:	d814      	bhi.n	800c654 <UART_SetConfig+0x210>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d002      	beq.n	800c634 <UART_SetConfig+0x1f0>
 800c62e:	2b40      	cmp	r3, #64	; 0x40
 800c630:	d008      	beq.n	800c644 <UART_SetConfig+0x200>
 800c632:	e00f      	b.n	800c654 <UART_SetConfig+0x210>
 800c634:	2300      	movs	r3, #0
 800c636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c63a:	e082      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c63c:	2302      	movs	r3, #2
 800c63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c642:	e07e      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c644:	2304      	movs	r3, #4
 800c646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c64a:	e07a      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c64c:	2308      	movs	r3, #8
 800c64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c652:	e076      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c654:	2310      	movs	r3, #16
 800c656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c65a:	e072      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a35      	ldr	r2, [pc, #212]	; (800c738 <UART_SetConfig+0x2f4>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d12a      	bne.n	800c6bc <UART_SetConfig+0x278>
 800c666:	4b30      	ldr	r3, [pc, #192]	; (800c728 <UART_SetConfig+0x2e4>)
 800c668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c674:	d01a      	beq.n	800c6ac <UART_SetConfig+0x268>
 800c676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c67a:	d81b      	bhi.n	800c6b4 <UART_SetConfig+0x270>
 800c67c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c680:	d00c      	beq.n	800c69c <UART_SetConfig+0x258>
 800c682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c686:	d815      	bhi.n	800c6b4 <UART_SetConfig+0x270>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <UART_SetConfig+0x250>
 800c68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c690:	d008      	beq.n	800c6a4 <UART_SetConfig+0x260>
 800c692:	e00f      	b.n	800c6b4 <UART_SetConfig+0x270>
 800c694:	2300      	movs	r3, #0
 800c696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c69a:	e052      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c69c:	2302      	movs	r3, #2
 800c69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6a2:	e04e      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c6a4:	2304      	movs	r3, #4
 800c6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6aa:	e04a      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c6ac:	2308      	movs	r3, #8
 800c6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6b2:	e046      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c6b4:	2310      	movs	r3, #16
 800c6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6ba:	e042      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a17      	ldr	r2, [pc, #92]	; (800c720 <UART_SetConfig+0x2dc>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d13a      	bne.n	800c73c <UART_SetConfig+0x2f8>
 800c6c6:	4b18      	ldr	r3, [pc, #96]	; (800c728 <UART_SetConfig+0x2e4>)
 800c6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c6d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6d4:	d01a      	beq.n	800c70c <UART_SetConfig+0x2c8>
 800c6d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6da:	d81b      	bhi.n	800c714 <UART_SetConfig+0x2d0>
 800c6dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6e0:	d00c      	beq.n	800c6fc <UART_SetConfig+0x2b8>
 800c6e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6e6:	d815      	bhi.n	800c714 <UART_SetConfig+0x2d0>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <UART_SetConfig+0x2b0>
 800c6ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f0:	d008      	beq.n	800c704 <UART_SetConfig+0x2c0>
 800c6f2:	e00f      	b.n	800c714 <UART_SetConfig+0x2d0>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6fa:	e022      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c702:	e01e      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c704:	2304      	movs	r3, #4
 800c706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c70a:	e01a      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c70c:	2308      	movs	r3, #8
 800c70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c712:	e016      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c714:	2310      	movs	r3, #16
 800c716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c71a:	e012      	b.n	800c742 <UART_SetConfig+0x2fe>
 800c71c:	cfff69f3 	.word	0xcfff69f3
 800c720:	40008000 	.word	0x40008000
 800c724:	40013800 	.word	0x40013800
 800c728:	40021000 	.word	0x40021000
 800c72c:	40004400 	.word	0x40004400
 800c730:	40004800 	.word	0x40004800
 800c734:	40004c00 	.word	0x40004c00
 800c738:	40005000 	.word	0x40005000
 800c73c:	2310      	movs	r3, #16
 800c73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4aae      	ldr	r2, [pc, #696]	; (800ca00 <UART_SetConfig+0x5bc>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	f040 8097 	bne.w	800c87c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c74e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c752:	2b08      	cmp	r3, #8
 800c754:	d823      	bhi.n	800c79e <UART_SetConfig+0x35a>
 800c756:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <UART_SetConfig+0x318>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c781 	.word	0x0800c781
 800c760:	0800c79f 	.word	0x0800c79f
 800c764:	0800c789 	.word	0x0800c789
 800c768:	0800c79f 	.word	0x0800c79f
 800c76c:	0800c78f 	.word	0x0800c78f
 800c770:	0800c79f 	.word	0x0800c79f
 800c774:	0800c79f 	.word	0x0800c79f
 800c778:	0800c79f 	.word	0x0800c79f
 800c77c:	0800c797 	.word	0x0800c797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c780:	f7fc ff84 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800c784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c786:	e010      	b.n	800c7aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c788:	4b9e      	ldr	r3, [pc, #632]	; (800ca04 <UART_SetConfig+0x5c0>)
 800c78a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c78c:	e00d      	b.n	800c7aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c78e:	f7fc ff0f 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800c792:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c794:	e009      	b.n	800c7aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c79a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c79c:	e005      	b.n	800c7aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c7a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8130 	beq.w	800ca12 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b6:	4a94      	ldr	r2, [pc, #592]	; (800ca08 <UART_SetConfig+0x5c4>)
 800c7b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d305      	bcc.n	800c7e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7dc:	69ba      	ldr	r2, [r7, #24]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d903      	bls.n	800c7ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c7e8:	e113      	b.n	800ca12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	60bb      	str	r3, [r7, #8]
 800c7f0:	60fa      	str	r2, [r7, #12]
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	4a84      	ldr	r2, [pc, #528]	; (800ca08 <UART_SetConfig+0x5c4>)
 800c7f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	2200      	movs	r2, #0
 800c800:	603b      	str	r3, [r7, #0]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c808:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c80c:	f7f4 fa64 	bl	8000cd8 <__aeabi_uldivmod>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4610      	mov	r0, r2
 800c816:	4619      	mov	r1, r3
 800c818:	f04f 0200 	mov.w	r2, #0
 800c81c:	f04f 0300 	mov.w	r3, #0
 800c820:	020b      	lsls	r3, r1, #8
 800c822:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c826:	0202      	lsls	r2, r0, #8
 800c828:	6979      	ldr	r1, [r7, #20]
 800c82a:	6849      	ldr	r1, [r1, #4]
 800c82c:	0849      	lsrs	r1, r1, #1
 800c82e:	2000      	movs	r0, #0
 800c830:	460c      	mov	r4, r1
 800c832:	4605      	mov	r5, r0
 800c834:	eb12 0804 	adds.w	r8, r2, r4
 800c838:	eb43 0905 	adc.w	r9, r3, r5
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	469a      	mov	sl, r3
 800c844:	4693      	mov	fp, r2
 800c846:	4652      	mov	r2, sl
 800c848:	465b      	mov	r3, fp
 800c84a:	4640      	mov	r0, r8
 800c84c:	4649      	mov	r1, r9
 800c84e:	f7f4 fa43 	bl	8000cd8 <__aeabi_uldivmod>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4613      	mov	r3, r2
 800c858:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c860:	d308      	bcc.n	800c874 <UART_SetConfig+0x430>
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c868:	d204      	bcs.n	800c874 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6a3a      	ldr	r2, [r7, #32]
 800c870:	60da      	str	r2, [r3, #12]
 800c872:	e0ce      	b.n	800ca12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c87a:	e0ca      	b.n	800ca12 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	69db      	ldr	r3, [r3, #28]
 800c880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c884:	d166      	bne.n	800c954 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c88a:	2b08      	cmp	r3, #8
 800c88c:	d827      	bhi.n	800c8de <UART_SetConfig+0x49a>
 800c88e:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <UART_SetConfig+0x450>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8b9 	.word	0x0800c8b9
 800c898:	0800c8c1 	.word	0x0800c8c1
 800c89c:	0800c8c9 	.word	0x0800c8c9
 800c8a0:	0800c8df 	.word	0x0800c8df
 800c8a4:	0800c8cf 	.word	0x0800c8cf
 800c8a8:	0800c8df 	.word	0x0800c8df
 800c8ac:	0800c8df 	.word	0x0800c8df
 800c8b0:	0800c8df 	.word	0x0800c8df
 800c8b4:	0800c8d7 	.word	0x0800c8d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8b8:	f7fc fee8 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800c8bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8be:	e014      	b.n	800c8ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8c0:	f7fc fefa 	bl	80096b8 <HAL_RCC_GetPCLK2Freq>
 800c8c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8c6:	e010      	b.n	800c8ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8c8:	4b4e      	ldr	r3, [pc, #312]	; (800ca04 <UART_SetConfig+0x5c0>)
 800c8ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8cc:	e00d      	b.n	800c8ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8ce:	f7fc fe6f 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800c8d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8d4:	e009      	b.n	800c8ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8dc:	e005      	b.n	800c8ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c8e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 8090 	beq.w	800ca12 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	4a44      	ldr	r2, [pc, #272]	; (800ca08 <UART_SetConfig+0x5c4>)
 800c8f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	fbb3 f3f2 	udiv	r3, r3, r2
 800c904:	005a      	lsls	r2, r3, #1
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	085b      	lsrs	r3, r3, #1
 800c90c:	441a      	add	r2, r3
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	fbb2 f3f3 	udiv	r3, r2, r3
 800c916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	2b0f      	cmp	r3, #15
 800c91c:	d916      	bls.n	800c94c <UART_SetConfig+0x508>
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c924:	d212      	bcs.n	800c94c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	b29b      	uxth	r3, r3
 800c92a:	f023 030f 	bic.w	r3, r3, #15
 800c92e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	085b      	lsrs	r3, r3, #1
 800c934:	b29b      	uxth	r3, r3
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	8bfb      	ldrh	r3, [r7, #30]
 800c93e:	4313      	orrs	r3, r2
 800c940:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	8bfa      	ldrh	r2, [r7, #30]
 800c948:	60da      	str	r2, [r3, #12]
 800c94a:	e062      	b.n	800ca12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c952:	e05e      	b.n	800ca12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c954:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c958:	2b08      	cmp	r3, #8
 800c95a:	d828      	bhi.n	800c9ae <UART_SetConfig+0x56a>
 800c95c:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <UART_SetConfig+0x520>)
 800c95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c962:	bf00      	nop
 800c964:	0800c989 	.word	0x0800c989
 800c968:	0800c991 	.word	0x0800c991
 800c96c:	0800c999 	.word	0x0800c999
 800c970:	0800c9af 	.word	0x0800c9af
 800c974:	0800c99f 	.word	0x0800c99f
 800c978:	0800c9af 	.word	0x0800c9af
 800c97c:	0800c9af 	.word	0x0800c9af
 800c980:	0800c9af 	.word	0x0800c9af
 800c984:	0800c9a7 	.word	0x0800c9a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c988:	f7fc fe80 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800c98c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c98e:	e014      	b.n	800c9ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c990:	f7fc fe92 	bl	80096b8 <HAL_RCC_GetPCLK2Freq>
 800c994:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c996:	e010      	b.n	800c9ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c998:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <UART_SetConfig+0x5c0>)
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c99c:	e00d      	b.n	800c9ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c99e:	f7fc fe07 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800c9a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c9a4:	e009      	b.n	800c9ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c9ac:	e005      	b.n	800c9ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c9b8:	bf00      	nop
    }

    if (pclk != 0U)
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d028      	beq.n	800ca12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c4:	4a10      	ldr	r2, [pc, #64]	; (800ca08 <UART_SetConfig+0x5c4>)
 800c9c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	085b      	lsrs	r3, r3, #1
 800c9d8:	441a      	add	r2, r3
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	2b0f      	cmp	r3, #15
 800c9e8:	d910      	bls.n	800ca0c <UART_SetConfig+0x5c8>
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f0:	d20c      	bcs.n	800ca0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	60da      	str	r2, [r3, #12]
 800c9fc:	e009      	b.n	800ca12 <UART_SetConfig+0x5ce>
 800c9fe:	bf00      	nop
 800ca00:	40008000 	.word	0x40008000
 800ca04:	00f42400 	.word	0x00f42400
 800ca08:	08013df8 	.word	0x08013df8
      }
      else
      {
        ret = HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2200      	movs	r2, #0
 800ca26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ca2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3730      	adds	r7, #48	; 0x30
 800ca36:	46bd      	mov	sp, r7
 800ca38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ca3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00a      	beq.n	800ca66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	430a      	orrs	r2, r1
 800ca64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6a:	f003 0302 	and.w	r3, r3, #2
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00a      	beq.n	800ca88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	430a      	orrs	r2, r1
 800ca86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00a      	beq.n	800caaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caae:	f003 0308 	and.w	r3, r3, #8
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	430a      	orrs	r2, r1
 800caca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	f003 0310 	and.w	r3, r3, #16
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00a      	beq.n	800caee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	430a      	orrs	r2, r1
 800caec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf2:	f003 0320 	and.w	r3, r3, #32
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01a      	beq.n	800cb52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb3a:	d10a      	bne.n	800cb52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	605a      	str	r2, [r3, #4]
  }
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af02      	add	r7, sp, #8
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb90:	f7f9 fa52 	bl	8006038 <HAL_GetTick>
 800cb94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 0308 	and.w	r3, r3, #8
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d10e      	bne.n	800cbc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f82f 	bl	800cc16 <UART_WaitOnFlagUntilTimeout>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	e025      	b.n	800cc0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 0304 	and.w	r3, r3, #4
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	d10e      	bne.n	800cbee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f819 	bl	800cc16 <UART_WaitOnFlagUntilTimeout>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e00f      	b.n	800cc0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2220      	movs	r2, #32
 800cbf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2220      	movs	r2, #32
 800cbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b09c      	sub	sp, #112	; 0x70
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	60f8      	str	r0, [r7, #12]
 800cc1e:	60b9      	str	r1, [r7, #8]
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	4613      	mov	r3, r2
 800cc24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc26:	e0a9      	b.n	800cd7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2e:	f000 80a5 	beq.w	800cd7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc32:	f7f9 fa01 	bl	8006038 <HAL_GetTick>
 800cc36:	4602      	mov	r2, r0
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d302      	bcc.n	800cc48 <UART_WaitOnFlagUntilTimeout+0x32>
 800cc42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d140      	bne.n	800ccca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc5c:	667b      	str	r3, [r7, #100]	; 0x64
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc6e:	e841 2300 	strex	r3, r2, [r1]
 800cc72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1e6      	bne.n	800cc48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3308      	adds	r3, #8
 800cc80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc84:	e853 3f00 	ldrex	r3, [r3]
 800cc88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	f023 0301 	bic.w	r3, r3, #1
 800cc90:	663b      	str	r3, [r7, #96]	; 0x60
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3308      	adds	r3, #8
 800cc98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc9a:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cca2:	e841 2300 	strex	r3, r2, [r1]
 800cca6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1e5      	bne.n	800cc7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2220      	movs	r2, #32
 800ccb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e069      	b.n	800cd9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 0304 	and.w	r3, r3, #4
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d051      	beq.n	800cd7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	69db      	ldr	r3, [r3, #28]
 800ccde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cce6:	d149      	bne.n	800cd7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	e853 3f00 	ldrex	r3, [r3]
 800ccfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd10:	637b      	str	r3, [r7, #52]	; 0x34
 800cd12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd18:	e841 2300 	strex	r3, r2, [r1]
 800cd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1e6      	bne.n	800ccf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3308      	adds	r3, #8
 800cd2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	e853 3f00 	ldrex	r3, [r3]
 800cd32:	613b      	str	r3, [r7, #16]
   return(result);
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	f023 0301 	bic.w	r3, r3, #1
 800cd3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3308      	adds	r3, #8
 800cd42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd44:	623a      	str	r2, [r7, #32]
 800cd46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd48:	69f9      	ldr	r1, [r7, #28]
 800cd4a:	6a3a      	ldr	r2, [r7, #32]
 800cd4c:	e841 2300 	strex	r3, r2, [r1]
 800cd50:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1e5      	bne.n	800cd24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2220      	movs	r2, #32
 800cd5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2220      	movs	r2, #32
 800cd64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e010      	b.n	800cd9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	69da      	ldr	r2, [r3, #28]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	4013      	ands	r3, r2
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	bf0c      	ite	eq
 800cd8c:	2301      	moveq	r3, #1
 800cd8e:	2300      	movne	r3, #0
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	461a      	mov	r2, r3
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	f43f af46 	beq.w	800cc28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3770      	adds	r7, #112	; 0x70
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
	...

0800cda8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b0a3      	sub	sp, #140	; 0x8c
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	88fa      	ldrh	r2, [r7, #6]
 800cdc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	88fa      	ldrh	r2, [r7, #6]
 800cdc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdda:	d10e      	bne.n	800cdfa <UART_Start_Receive_IT+0x52>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d105      	bne.n	800cdf0 <UART_Start_Receive_IT+0x48>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cdea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdee:	e02d      	b.n	800ce4c <UART_Start_Receive_IT+0xa4>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	22ff      	movs	r2, #255	; 0xff
 800cdf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdf8:	e028      	b.n	800ce4c <UART_Start_Receive_IT+0xa4>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10d      	bne.n	800ce1e <UART_Start_Receive_IT+0x76>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d104      	bne.n	800ce14 <UART_Start_Receive_IT+0x6c>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	22ff      	movs	r2, #255	; 0xff
 800ce0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce12:	e01b      	b.n	800ce4c <UART_Start_Receive_IT+0xa4>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	227f      	movs	r2, #127	; 0x7f
 800ce18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce1c:	e016      	b.n	800ce4c <UART_Start_Receive_IT+0xa4>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce26:	d10d      	bne.n	800ce44 <UART_Start_Receive_IT+0x9c>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d104      	bne.n	800ce3a <UART_Start_Receive_IT+0x92>
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	227f      	movs	r2, #127	; 0x7f
 800ce34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce38:	e008      	b.n	800ce4c <UART_Start_Receive_IT+0xa4>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	223f      	movs	r2, #63	; 0x3f
 800ce3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce42:	e003      	b.n	800ce4c <UART_Start_Receive_IT+0xa4>
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2222      	movs	r2, #34	; 0x22
 800ce58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	3308      	adds	r3, #8
 800ce62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce66:	e853 3f00 	ldrex	r3, [r3]
 800ce6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ce6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3308      	adds	r3, #8
 800ce7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ce80:	673a      	str	r2, [r7, #112]	; 0x70
 800ce82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce88:	e841 2300 	strex	r3, r2, [r1]
 800ce8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ce8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1e3      	bne.n	800ce5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce9c:	d153      	bne.n	800cf46 <UART_Start_Receive_IT+0x19e>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cea4:	88fa      	ldrh	r2, [r7, #6]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d34d      	bcc.n	800cf46 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceb2:	d107      	bne.n	800cec4 <UART_Start_Receive_IT+0x11c>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d103      	bne.n	800cec4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4a4b      	ldr	r2, [pc, #300]	; (800cfec <UART_Start_Receive_IT+0x244>)
 800cec0:	671a      	str	r2, [r3, #112]	; 0x70
 800cec2:	e002      	b.n	800ceca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	4a4a      	ldr	r2, [pc, #296]	; (800cff0 <UART_Start_Receive_IT+0x248>)
 800cec8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d01a      	beq.n	800cf10 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cefc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cefe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e4      	bne.n	800ceda <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	3308      	adds	r3, #8
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1a:	e853 3f00 	ldrex	r3, [r3]
 800cf1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf30:	64ba      	str	r2, [r7, #72]	; 0x48
 800cf32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf38:	e841 2300 	strex	r3, r2, [r1]
 800cf3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cf3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e5      	bne.n	800cf10 <UART_Start_Receive_IT+0x168>
 800cf44:	e04a      	b.n	800cfdc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf4e:	d107      	bne.n	800cf60 <UART_Start_Receive_IT+0x1b8>
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d103      	bne.n	800cf60 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4a26      	ldr	r2, [pc, #152]	; (800cff4 <UART_Start_Receive_IT+0x24c>)
 800cf5c:	671a      	str	r2, [r3, #112]	; 0x70
 800cf5e:	e002      	b.n	800cf66 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4a25      	ldr	r2, [pc, #148]	; (800cff8 <UART_Start_Receive_IT+0x250>)
 800cf64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d019      	beq.n	800cfaa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	e853 3f00 	ldrex	r3, [r3]
 800cf82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cf8a:	677b      	str	r3, [r7, #116]	; 0x74
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
 800cf92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf94:	637b      	str	r3, [r7, #52]	; 0x34
 800cf96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e6      	bne.n	800cf76 <UART_Start_Receive_IT+0x1ce>
 800cfa8:	e018      	b.n	800cfdc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	e853 3f00 	ldrex	r3, [r3]
 800cfb6:	613b      	str	r3, [r7, #16]
   return(result);
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	f043 0320 	orr.w	r3, r3, #32
 800cfbe:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfc8:	623b      	str	r3, [r7, #32]
 800cfca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfcc:	69f9      	ldr	r1, [r7, #28]
 800cfce:	6a3a      	ldr	r2, [r7, #32]
 800cfd0:	e841 2300 	strex	r3, r2, [r1]
 800cfd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1e6      	bne.n	800cfaa <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	378c      	adds	r7, #140	; 0x8c
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	0800d705 	.word	0x0800d705
 800cff0:	0800d40d 	.word	0x0800d40d
 800cff4:	0800d2ab 	.word	0x0800d2ab
 800cff8:	0800d14b 	.word	0x0800d14b

0800cffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b095      	sub	sp, #84	; 0x54
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00c:	e853 3f00 	ldrex	r3, [r3]
 800d010:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d022:	643b      	str	r3, [r7, #64]	; 0x40
 800d024:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d02a:	e841 2300 	strex	r3, r2, [r1]
 800d02e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1e6      	bne.n	800d004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3308      	adds	r3, #8
 800d03c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	e853 3f00 	ldrex	r3, [r3]
 800d044:	61fb      	str	r3, [r7, #28]
   return(result);
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d04c:	f023 0301 	bic.w	r3, r3, #1
 800d050:	64bb      	str	r3, [r7, #72]	; 0x48
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3308      	adds	r3, #8
 800d058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d05a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d05c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d062:	e841 2300 	strex	r3, r2, [r1]
 800d066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1e3      	bne.n	800d036 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d072:	2b01      	cmp	r3, #1
 800d074:	d118      	bne.n	800d0a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	e853 3f00 	ldrex	r3, [r3]
 800d082:	60bb      	str	r3, [r7, #8]
   return(result);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	f023 0310 	bic.w	r3, r3, #16
 800d08a:	647b      	str	r3, [r7, #68]	; 0x44
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d094:	61bb      	str	r3, [r7, #24]
 800d096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d098:	6979      	ldr	r1, [r7, #20]
 800d09a:	69ba      	ldr	r2, [r7, #24]
 800d09c:	e841 2300 	strex	r3, r2, [r1]
 800d0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1e6      	bne.n	800d076 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d0bc:	bf00      	nop
 800d0be:	3754      	adds	r7, #84	; 0x54
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7ff f996 	bl	800c418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	60bb      	str	r3, [r7, #8]
   return(result);
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d110:	61fb      	str	r3, [r7, #28]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	69ba      	ldr	r2, [r7, #24]
 800d122:	e841 2300 	strex	r3, r2, [r1]
 800d126:	613b      	str	r3, [r7, #16]
   return(result);
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e6      	bne.n	800d0fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2220      	movs	r2, #32
 800d132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff f961 	bl	800c404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d142:	bf00      	nop
 800d144:	3720      	adds	r7, #32
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b096      	sub	sp, #88	; 0x58
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d158:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d162:	2b22      	cmp	r3, #34	; 0x22
 800d164:	f040 8095 	bne.w	800d292 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d172:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d176:	b2d9      	uxtb	r1, r3
 800d178:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d182:	400a      	ands	r2, r1
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d198:	b29b      	uxth	r3, r3
 800d19a:	3b01      	subs	r3, #1
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d178      	bne.n	800d2a2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b8:	e853 3f00 	ldrex	r3, [r3]
 800d1bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1c4:	653b      	str	r3, [r7, #80]	; 0x50
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d1d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d1d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1d6:	e841 2300 	strex	r3, r2, [r1]
 800d1da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1e6      	bne.n	800d1b0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	623b      	str	r3, [r7, #32]
   return(result);
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	f023 0301 	bic.w	r3, r3, #1
 800d1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d202:	633a      	str	r2, [r7, #48]	; 0x30
 800d204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d20a:	e841 2300 	strex	r3, r2, [r1]
 800d20e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1e5      	bne.n	800d1e2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d12e      	bne.n	800d28a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	e853 3f00 	ldrex	r3, [r3]
 800d23e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f023 0310 	bic.w	r3, r3, #16
 800d246:	64bb      	str	r3, [r7, #72]	; 0x48
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	461a      	mov	r2, r3
 800d24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d250:	61fb      	str	r3, [r7, #28]
 800d252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d254:	69b9      	ldr	r1, [r7, #24]
 800d256:	69fa      	ldr	r2, [r7, #28]
 800d258:	e841 2300 	strex	r3, r2, [r1]
 800d25c:	617b      	str	r3, [r7, #20]
   return(result);
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1e6      	bne.n	800d232 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	69db      	ldr	r3, [r3, #28]
 800d26a:	f003 0310 	and.w	r3, r3, #16
 800d26e:	2b10      	cmp	r3, #16
 800d270:	d103      	bne.n	800d27a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2210      	movs	r2, #16
 800d278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff f8d2 	bl	800c42c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d288:	e00b      	b.n	800d2a2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7f8 fe34 	bl	8005ef8 <HAL_UART_RxCpltCallback>
}
 800d290:	e007      	b.n	800d2a2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	699a      	ldr	r2, [r3, #24]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f042 0208 	orr.w	r2, r2, #8
 800d2a0:	619a      	str	r2, [r3, #24]
}
 800d2a2:	bf00      	nop
 800d2a4:	3758      	adds	r7, #88	; 0x58
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b096      	sub	sp, #88	; 0x58
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c2:	2b22      	cmp	r3, #34	; 0x22
 800d2c4:	f040 8095 	bne.w	800d3f2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d2d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d2dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ec:	1c9a      	adds	r2, r3, #2
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d178      	bne.n	800d402 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	e853 3f00 	ldrex	r3, [r3]
 800d31c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d324:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d32e:	643b      	str	r3, [r7, #64]	; 0x40
 800d330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d336:	e841 2300 	strex	r3, r2, [r1]
 800d33a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1e6      	bne.n	800d310 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3308      	adds	r3, #8
 800d348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	e853 3f00 	ldrex	r3, [r3]
 800d350:	61fb      	str	r3, [r7, #28]
   return(result);
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	f023 0301 	bic.w	r3, r3, #1
 800d358:	64bb      	str	r3, [r7, #72]	; 0x48
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3308      	adds	r3, #8
 800d360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d362:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d36a:	e841 2300 	strex	r3, r2, [r1]
 800d36e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1e5      	bne.n	800d342 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2220      	movs	r2, #32
 800d37a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d12e      	bne.n	800d3ea <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	f023 0310 	bic.w	r3, r3, #16
 800d3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b0:	61bb      	str	r3, [r7, #24]
 800d3b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b4:	6979      	ldr	r1, [r7, #20]
 800d3b6:	69ba      	ldr	r2, [r7, #24]
 800d3b8:	e841 2300 	strex	r3, r2, [r1]
 800d3bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1e6      	bne.n	800d392 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	69db      	ldr	r3, [r3, #28]
 800d3ca:	f003 0310 	and.w	r3, r3, #16
 800d3ce:	2b10      	cmp	r3, #16
 800d3d0:	d103      	bne.n	800d3da <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2210      	movs	r2, #16
 800d3d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7ff f822 	bl	800c42c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3e8:	e00b      	b.n	800d402 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7f8 fd84 	bl	8005ef8 <HAL_UART_RxCpltCallback>
}
 800d3f0:	e007      	b.n	800d402 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	699a      	ldr	r2, [r3, #24]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f042 0208 	orr.w	r2, r2, #8
 800d400:	619a      	str	r2, [r3, #24]
}
 800d402:	bf00      	nop
 800d404:	3758      	adds	r7, #88	; 0x58
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b0a6      	sub	sp, #152	; 0x98
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d41a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	69db      	ldr	r3, [r3, #28]
 800d424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d442:	2b22      	cmp	r3, #34	; 0x22
 800d444:	f040 814f 	bne.w	800d6e6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d44e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d452:	e0f6      	b.n	800d642 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d45e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d462:	b2d9      	uxtb	r1, r3
 800d464:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d46e:	400a      	ands	r2, r1
 800d470:	b2d2      	uxtb	r2, r2
 800d472:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d484:	b29b      	uxth	r3, r3
 800d486:	3b01      	subs	r3, #1
 800d488:	b29a      	uxth	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d49a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d49e:	f003 0307 	and.w	r3, r3, #7
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d053      	beq.n	800d54e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d011      	beq.n	800d4d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d4b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00b      	beq.n	800d4d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4cc:	f043 0201 	orr.w	r2, r3, #1
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d011      	beq.n	800d506 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d4e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00b      	beq.n	800d506 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4fc:	f043 0204 	orr.w	r2, r3, #4
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d506:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d50a:	f003 0304 	and.w	r3, r3, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d011      	beq.n	800d536 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2204      	movs	r2, #4
 800d524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d52c:	f043 0202 	orr.w	r2, r3, #2
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f7fe ff69 	bl	800c418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d554:	b29b      	uxth	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	d173      	bne.n	800d642 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d562:	e853 3f00 	ldrex	r3, [r3]
 800d566:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d56a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d56e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d57c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d57e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d580:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d582:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d584:	e841 2300 	strex	r3, r2, [r1]
 800d588:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d58a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1e4      	bne.n	800d55a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3308      	adds	r3, #8
 800d596:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d59a:	e853 3f00 	ldrex	r3, [r3]
 800d59e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5a6:	f023 0301 	bic.w	r3, r3, #1
 800d5aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d5b4:	657a      	str	r2, [r7, #84]	; 0x54
 800d5b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5bc:	e841 2300 	strex	r3, r2, [r1]
 800d5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e3      	bne.n	800d590 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2220      	movs	r2, #32
 800d5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d12e      	bne.n	800d63c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ec:	e853 3f00 	ldrex	r3, [r3]
 800d5f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	f023 0310 	bic.w	r3, r3, #16
 800d5f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	461a      	mov	r2, r3
 800d600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d602:	643b      	str	r3, [r7, #64]	; 0x40
 800d604:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d606:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d60a:	e841 2300 	strex	r3, r2, [r1]
 800d60e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1e6      	bne.n	800d5e4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	69db      	ldr	r3, [r3, #28]
 800d61c:	f003 0310 	and.w	r3, r3, #16
 800d620:	2b10      	cmp	r3, #16
 800d622:	d103      	bne.n	800d62c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2210      	movs	r2, #16
 800d62a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d632:	4619      	mov	r1, r3
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7fe fef9 	bl	800c42c <HAL_UARTEx_RxEventCallback>
 800d63a:	e002      	b.n	800d642 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7f8 fc5b 	bl	8005ef8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d642:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d646:	2b00      	cmp	r3, #0
 800d648:	d006      	beq.n	800d658 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800d64a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d64e:	f003 0320 	and.w	r3, r3, #32
 800d652:	2b00      	cmp	r3, #0
 800d654:	f47f aefe 	bne.w	800d454 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d65e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d662:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d666:	2b00      	cmp	r3, #0
 800d668:	d045      	beq.n	800d6f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d670:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d674:	429a      	cmp	r2, r3
 800d676:	d23e      	bcs.n	800d6f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3308      	adds	r3, #8
 800d67e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	e853 3f00 	ldrex	r3, [r3]
 800d686:	61fb      	str	r3, [r7, #28]
   return(result);
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d68e:	673b      	str	r3, [r7, #112]	; 0x70
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3308      	adds	r3, #8
 800d696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d69a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6a0:	e841 2300 	strex	r3, r2, [r1]
 800d6a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1e5      	bne.n	800d678 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a14      	ldr	r2, [pc, #80]	; (800d700 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d6b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	e853 3f00 	ldrex	r3, [r3]
 800d6be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	f043 0320 	orr.w	r3, r3, #32
 800d6c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d0:	61bb      	str	r3, [r7, #24]
 800d6d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d4:	6979      	ldr	r1, [r7, #20]
 800d6d6:	69ba      	ldr	r2, [r7, #24]
 800d6d8:	e841 2300 	strex	r3, r2, [r1]
 800d6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e6      	bne.n	800d6b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6e4:	e007      	b.n	800d6f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699a      	ldr	r2, [r3, #24]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f042 0208 	orr.w	r2, r2, #8
 800d6f4:	619a      	str	r2, [r3, #24]
}
 800d6f6:	bf00      	nop
 800d6f8:	3798      	adds	r7, #152	; 0x98
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	0800d14b 	.word	0x0800d14b

0800d704 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b0a8      	sub	sp, #160	; 0xa0
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d712:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	69db      	ldr	r3, [r3, #28]
 800d71c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d73a:	2b22      	cmp	r3, #34	; 0x22
 800d73c:	f040 8153 	bne.w	800d9e6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d746:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d74a:	e0fa      	b.n	800d942 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d752:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d75a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d75e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d762:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d766:	4013      	ands	r3, r2
 800d768:	b29a      	uxth	r2, r3
 800d76a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d76e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d774:	1c9a      	adds	r2, r3, #2
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d780:	b29b      	uxth	r3, r3
 800d782:	3b01      	subs	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	69db      	ldr	r3, [r3, #28]
 800d792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d79a:	f003 0307 	and.w	r3, r3, #7
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d053      	beq.n	800d84a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d011      	beq.n	800d7d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d7ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00b      	beq.n	800d7d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7c8:	f043 0201 	orr.w	r2, r3, #1
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7d6:	f003 0302 	and.w	r3, r3, #2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d011      	beq.n	800d802 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d7de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00b      	beq.n	800d802 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7f8:	f043 0204 	orr.w	r2, r3, #4
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d806:	f003 0304 	and.w	r3, r3, #4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d011      	beq.n	800d832 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d80e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d812:	f003 0301 	and.w	r3, r3, #1
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00b      	beq.n	800d832 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2204      	movs	r2, #4
 800d820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d828:	f043 0202 	orr.w	r2, r3, #2
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d006      	beq.n	800d84a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7fe fdeb 	bl	800c418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d850:	b29b      	uxth	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d175      	bne.n	800d942 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d86a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d87a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d87e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e4      	bne.n	800d856 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3308      	adds	r3, #8
 800d892:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d896:	e853 3f00 	ldrex	r3, [r3]
 800d89a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d89e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8a2:	f023 0301 	bic.w	r3, r3, #1
 800d8a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d8b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800d8b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8bc:	e841 2300 	strex	r3, r2, [r1]
 800d8c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1e1      	bne.n	800d88c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d12e      	bne.n	800d93c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	e853 3f00 	ldrex	r3, [r3]
 800d8f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f4:	f023 0310 	bic.w	r3, r3, #16
 800d8f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d902:	647b      	str	r3, [r7, #68]	; 0x44
 800d904:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d90a:	e841 2300 	strex	r3, r2, [r1]
 800d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1e6      	bne.n	800d8e4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	69db      	ldr	r3, [r3, #28]
 800d91c:	f003 0310 	and.w	r3, r3, #16
 800d920:	2b10      	cmp	r3, #16
 800d922:	d103      	bne.n	800d92c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2210      	movs	r2, #16
 800d92a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7fe fd79 	bl	800c42c <HAL_UARTEx_RxEventCallback>
 800d93a:	e002      	b.n	800d942 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7f8 fadb 	bl	8005ef8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d942:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d946:	2b00      	cmp	r3, #0
 800d948:	d006      	beq.n	800d958 <UART_RxISR_16BIT_FIFOEN+0x254>
 800d94a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d94e:	f003 0320 	and.w	r3, r3, #32
 800d952:	2b00      	cmp	r3, #0
 800d954:	f47f aefa 	bne.w	800d74c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d95e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d962:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d966:	2b00      	cmp	r3, #0
 800d968:	d045      	beq.n	800d9f6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d970:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d974:	429a      	cmp	r2, r3
 800d976:	d23e      	bcs.n	800d9f6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3308      	adds	r3, #8
 800d97e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	e853 3f00 	ldrex	r3, [r3]
 800d986:	623b      	str	r3, [r7, #32]
   return(result);
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d98e:	677b      	str	r3, [r7, #116]	; 0x74
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3308      	adds	r3, #8
 800d996:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d998:	633a      	str	r2, [r7, #48]	; 0x30
 800d99a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d99e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a0:	e841 2300 	strex	r3, r2, [r1]
 800d9a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1e5      	bne.n	800d978 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a14      	ldr	r2, [pc, #80]	; (800da00 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d9b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	e853 3f00 	ldrex	r3, [r3]
 800d9be:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f043 0320 	orr.w	r3, r3, #32
 800d9c6:	673b      	str	r3, [r7, #112]	; 0x70
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9d0:	61fb      	str	r3, [r7, #28]
 800d9d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d4:	69b9      	ldr	r1, [r7, #24]
 800d9d6:	69fa      	ldr	r2, [r7, #28]
 800d9d8:	e841 2300 	strex	r3, r2, [r1]
 800d9dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1e6      	bne.n	800d9b2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d9e4:	e007      	b.n	800d9f6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f042 0208 	orr.w	r2, r2, #8
 800d9f4:	619a      	str	r2, [r3, #24]
}
 800d9f6:	bf00      	nop
 800d9f8:	37a0      	adds	r7, #160	; 0xa0
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	0800d2ab 	.word	0x0800d2ab

0800da04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d101      	bne.n	800da56 <HAL_UARTEx_DisableFifoMode+0x16>
 800da52:	2302      	movs	r3, #2
 800da54:	e027      	b.n	800daa6 <HAL_UARTEx_DisableFifoMode+0x66>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2224      	movs	r2, #36	; 0x24
 800da62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f022 0201 	bic.w	r2, r2, #1
 800da7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800da84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2220      	movs	r2, #32
 800da98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d101      	bne.n	800daca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dac6:	2302      	movs	r3, #2
 800dac8:	e02d      	b.n	800db26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2224      	movs	r2, #36	; 0x24
 800dad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f022 0201 	bic.w	r2, r2, #1
 800daf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	430a      	orrs	r2, r1
 800db04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f850 	bl	800dbac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2220      	movs	r2, #32
 800db18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d101      	bne.n	800db46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db42:	2302      	movs	r3, #2
 800db44:	e02d      	b.n	800dba2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2224      	movs	r2, #36	; 0x24
 800db52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f022 0201 	bic.w	r2, r2, #1
 800db6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	683a      	ldr	r2, [r7, #0]
 800db7e:	430a      	orrs	r2, r1
 800db80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f812 	bl	800dbac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2220      	movs	r2, #32
 800db94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
	...

0800dbac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d108      	bne.n	800dbce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dbcc:	e031      	b.n	800dc32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dbce:	2308      	movs	r3, #8
 800dbd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dbd2:	2308      	movs	r3, #8
 800dbd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	0e5b      	lsrs	r3, r3, #25
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	f003 0307 	and.w	r3, r3, #7
 800dbe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	0f5b      	lsrs	r3, r3, #29
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	f003 0307 	and.w	r3, r3, #7
 800dbf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbf6:	7bbb      	ldrb	r3, [r7, #14]
 800dbf8:	7b3a      	ldrb	r2, [r7, #12]
 800dbfa:	4911      	ldr	r1, [pc, #68]	; (800dc40 <UARTEx_SetNbDataToProcess+0x94>)
 800dbfc:	5c8a      	ldrb	r2, [r1, r2]
 800dbfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc02:	7b3a      	ldrb	r2, [r7, #12]
 800dc04:	490f      	ldr	r1, [pc, #60]	; (800dc44 <UARTEx_SetNbDataToProcess+0x98>)
 800dc06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc08:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	7b7a      	ldrb	r2, [r7, #13]
 800dc18:	4909      	ldr	r1, [pc, #36]	; (800dc40 <UARTEx_SetNbDataToProcess+0x94>)
 800dc1a:	5c8a      	ldrb	r2, [r1, r2]
 800dc1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc20:	7b7a      	ldrb	r2, [r7, #13]
 800dc22:	4908      	ldr	r1, [pc, #32]	; (800dc44 <UARTEx_SetNbDataToProcess+0x98>)
 800dc24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc26:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dc32:	bf00      	nop
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	08013e10 	.word	0x08013e10
 800dc44:	08013e18 	.word	0x08013e18

0800dc48 <atof>:
 800dc48:	2100      	movs	r1, #0
 800dc4a:	f001 bd9d 	b.w	800f788 <strtod>

0800dc4e <atoi>:
 800dc4e:	220a      	movs	r2, #10
 800dc50:	2100      	movs	r1, #0
 800dc52:	f001 be29 	b.w	800f8a8 <strtol>
	...

0800dc58 <__errno>:
 800dc58:	4b01      	ldr	r3, [pc, #4]	; (800dc60 <__errno+0x8>)
 800dc5a:	6818      	ldr	r0, [r3, #0]
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	2000004c 	.word	0x2000004c

0800dc64 <__libc_init_array>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	4d0d      	ldr	r5, [pc, #52]	; (800dc9c <__libc_init_array+0x38>)
 800dc68:	4c0d      	ldr	r4, [pc, #52]	; (800dca0 <__libc_init_array+0x3c>)
 800dc6a:	1b64      	subs	r4, r4, r5
 800dc6c:	10a4      	asrs	r4, r4, #2
 800dc6e:	2600      	movs	r6, #0
 800dc70:	42a6      	cmp	r6, r4
 800dc72:	d109      	bne.n	800dc88 <__libc_init_array+0x24>
 800dc74:	4d0b      	ldr	r5, [pc, #44]	; (800dca4 <__libc_init_array+0x40>)
 800dc76:	4c0c      	ldr	r4, [pc, #48]	; (800dca8 <__libc_init_array+0x44>)
 800dc78:	f005 f898 	bl	8012dac <_init>
 800dc7c:	1b64      	subs	r4, r4, r5
 800dc7e:	10a4      	asrs	r4, r4, #2
 800dc80:	2600      	movs	r6, #0
 800dc82:	42a6      	cmp	r6, r4
 800dc84:	d105      	bne.n	800dc92 <__libc_init_array+0x2e>
 800dc86:	bd70      	pop	{r4, r5, r6, pc}
 800dc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc8c:	4798      	blx	r3
 800dc8e:	3601      	adds	r6, #1
 800dc90:	e7ee      	b.n	800dc70 <__libc_init_array+0xc>
 800dc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc96:	4798      	blx	r3
 800dc98:	3601      	adds	r6, #1
 800dc9a:	e7f2      	b.n	800dc82 <__libc_init_array+0x1e>
 800dc9c:	08014310 	.word	0x08014310
 800dca0:	08014310 	.word	0x08014310
 800dca4:	08014310 	.word	0x08014310
 800dca8:	08014314 	.word	0x08014314

0800dcac <memcpy>:
 800dcac:	440a      	add	r2, r1
 800dcae:	4291      	cmp	r1, r2
 800dcb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcb4:	d100      	bne.n	800dcb8 <memcpy+0xc>
 800dcb6:	4770      	bx	lr
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcc2:	4291      	cmp	r1, r2
 800dcc4:	d1f9      	bne.n	800dcba <memcpy+0xe>
 800dcc6:	bd10      	pop	{r4, pc}

0800dcc8 <memset>:
 800dcc8:	4402      	add	r2, r0
 800dcca:	4603      	mov	r3, r0
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d100      	bne.n	800dcd2 <memset+0xa>
 800dcd0:	4770      	bx	lr
 800dcd2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcd6:	e7f9      	b.n	800dccc <memset+0x4>

0800dcd8 <__cvt>:
 800dcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcdc:	ec55 4b10 	vmov	r4, r5, d0
 800dce0:	2d00      	cmp	r5, #0
 800dce2:	460e      	mov	r6, r1
 800dce4:	4619      	mov	r1, r3
 800dce6:	462b      	mov	r3, r5
 800dce8:	bfbb      	ittet	lt
 800dcea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dcee:	461d      	movlt	r5, r3
 800dcf0:	2300      	movge	r3, #0
 800dcf2:	232d      	movlt	r3, #45	; 0x2d
 800dcf4:	700b      	strb	r3, [r1, #0]
 800dcf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dcfc:	4691      	mov	r9, r2
 800dcfe:	f023 0820 	bic.w	r8, r3, #32
 800dd02:	bfbc      	itt	lt
 800dd04:	4622      	movlt	r2, r4
 800dd06:	4614      	movlt	r4, r2
 800dd08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd0c:	d005      	beq.n	800dd1a <__cvt+0x42>
 800dd0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd12:	d100      	bne.n	800dd16 <__cvt+0x3e>
 800dd14:	3601      	adds	r6, #1
 800dd16:	2102      	movs	r1, #2
 800dd18:	e000      	b.n	800dd1c <__cvt+0x44>
 800dd1a:	2103      	movs	r1, #3
 800dd1c:	ab03      	add	r3, sp, #12
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	ab02      	add	r3, sp, #8
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	ec45 4b10 	vmov	d0, r4, r5
 800dd28:	4653      	mov	r3, sl
 800dd2a:	4632      	mov	r2, r6
 800dd2c:	f001 ff14 	bl	800fb58 <_dtoa_r>
 800dd30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd34:	4607      	mov	r7, r0
 800dd36:	d102      	bne.n	800dd3e <__cvt+0x66>
 800dd38:	f019 0f01 	tst.w	r9, #1
 800dd3c:	d022      	beq.n	800dd84 <__cvt+0xac>
 800dd3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd42:	eb07 0906 	add.w	r9, r7, r6
 800dd46:	d110      	bne.n	800dd6a <__cvt+0x92>
 800dd48:	783b      	ldrb	r3, [r7, #0]
 800dd4a:	2b30      	cmp	r3, #48	; 0x30
 800dd4c:	d10a      	bne.n	800dd64 <__cvt+0x8c>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2300      	movs	r3, #0
 800dd52:	4620      	mov	r0, r4
 800dd54:	4629      	mov	r1, r5
 800dd56:	f7f2 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 800dd5a:	b918      	cbnz	r0, 800dd64 <__cvt+0x8c>
 800dd5c:	f1c6 0601 	rsb	r6, r6, #1
 800dd60:	f8ca 6000 	str.w	r6, [sl]
 800dd64:	f8da 3000 	ldr.w	r3, [sl]
 800dd68:	4499      	add	r9, r3
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4620      	mov	r0, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	f7f2 fed1 	bl	8000b18 <__aeabi_dcmpeq>
 800dd76:	b108      	cbz	r0, 800dd7c <__cvt+0xa4>
 800dd78:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd7c:	2230      	movs	r2, #48	; 0x30
 800dd7e:	9b03      	ldr	r3, [sp, #12]
 800dd80:	454b      	cmp	r3, r9
 800dd82:	d307      	bcc.n	800dd94 <__cvt+0xbc>
 800dd84:	9b03      	ldr	r3, [sp, #12]
 800dd86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd88:	1bdb      	subs	r3, r3, r7
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	b004      	add	sp, #16
 800dd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd94:	1c59      	adds	r1, r3, #1
 800dd96:	9103      	str	r1, [sp, #12]
 800dd98:	701a      	strb	r2, [r3, #0]
 800dd9a:	e7f0      	b.n	800dd7e <__cvt+0xa6>

0800dd9c <__exponent>:
 800dd9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2900      	cmp	r1, #0
 800dda2:	bfb8      	it	lt
 800dda4:	4249      	neglt	r1, r1
 800dda6:	f803 2b02 	strb.w	r2, [r3], #2
 800ddaa:	bfb4      	ite	lt
 800ddac:	222d      	movlt	r2, #45	; 0x2d
 800ddae:	222b      	movge	r2, #43	; 0x2b
 800ddb0:	2909      	cmp	r1, #9
 800ddb2:	7042      	strb	r2, [r0, #1]
 800ddb4:	dd2a      	ble.n	800de0c <__exponent+0x70>
 800ddb6:	f10d 0407 	add.w	r4, sp, #7
 800ddba:	46a4      	mov	ip, r4
 800ddbc:	270a      	movs	r7, #10
 800ddbe:	46a6      	mov	lr, r4
 800ddc0:	460a      	mov	r2, r1
 800ddc2:	fb91 f6f7 	sdiv	r6, r1, r7
 800ddc6:	fb07 1516 	mls	r5, r7, r6, r1
 800ddca:	3530      	adds	r5, #48	; 0x30
 800ddcc:	2a63      	cmp	r2, #99	; 0x63
 800ddce:	f104 34ff 	add.w	r4, r4, #4294967295
 800ddd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	dcf1      	bgt.n	800ddbe <__exponent+0x22>
 800ddda:	3130      	adds	r1, #48	; 0x30
 800dddc:	f1ae 0502 	sub.w	r5, lr, #2
 800dde0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dde4:	1c44      	adds	r4, r0, #1
 800dde6:	4629      	mov	r1, r5
 800dde8:	4561      	cmp	r1, ip
 800ddea:	d30a      	bcc.n	800de02 <__exponent+0x66>
 800ddec:	f10d 0209 	add.w	r2, sp, #9
 800ddf0:	eba2 020e 	sub.w	r2, r2, lr
 800ddf4:	4565      	cmp	r5, ip
 800ddf6:	bf88      	it	hi
 800ddf8:	2200      	movhi	r2, #0
 800ddfa:	4413      	add	r3, r2
 800ddfc:	1a18      	subs	r0, r3, r0
 800ddfe:	b003      	add	sp, #12
 800de00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de06:	f804 2f01 	strb.w	r2, [r4, #1]!
 800de0a:	e7ed      	b.n	800dde8 <__exponent+0x4c>
 800de0c:	2330      	movs	r3, #48	; 0x30
 800de0e:	3130      	adds	r1, #48	; 0x30
 800de10:	7083      	strb	r3, [r0, #2]
 800de12:	70c1      	strb	r1, [r0, #3]
 800de14:	1d03      	adds	r3, r0, #4
 800de16:	e7f1      	b.n	800ddfc <__exponent+0x60>

0800de18 <_printf_float>:
 800de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	ed2d 8b02 	vpush	{d8}
 800de20:	b08d      	sub	sp, #52	; 0x34
 800de22:	460c      	mov	r4, r1
 800de24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de28:	4616      	mov	r6, r2
 800de2a:	461f      	mov	r7, r3
 800de2c:	4605      	mov	r5, r0
 800de2e:	f003 f9a7 	bl	8011180 <_localeconv_r>
 800de32:	f8d0 a000 	ldr.w	sl, [r0]
 800de36:	4650      	mov	r0, sl
 800de38:	f7f2 f9f2 	bl	8000220 <strlen>
 800de3c:	2300      	movs	r3, #0
 800de3e:	930a      	str	r3, [sp, #40]	; 0x28
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	9305      	str	r3, [sp, #20]
 800de44:	f8d8 3000 	ldr.w	r3, [r8]
 800de48:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de4c:	3307      	adds	r3, #7
 800de4e:	f023 0307 	bic.w	r3, r3, #7
 800de52:	f103 0208 	add.w	r2, r3, #8
 800de56:	f8c8 2000 	str.w	r2, [r8]
 800de5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800de62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800de66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de6a:	9307      	str	r3, [sp, #28]
 800de6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800de70:	ee08 0a10 	vmov	s16, r0
 800de74:	4b9f      	ldr	r3, [pc, #636]	; (800e0f4 <_printf_float+0x2dc>)
 800de76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de7a:	f04f 32ff 	mov.w	r2, #4294967295
 800de7e:	f7f2 fe7d 	bl	8000b7c <__aeabi_dcmpun>
 800de82:	bb88      	cbnz	r0, 800dee8 <_printf_float+0xd0>
 800de84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de88:	4b9a      	ldr	r3, [pc, #616]	; (800e0f4 <_printf_float+0x2dc>)
 800de8a:	f04f 32ff 	mov.w	r2, #4294967295
 800de8e:	f7f2 fe57 	bl	8000b40 <__aeabi_dcmple>
 800de92:	bb48      	cbnz	r0, 800dee8 <_printf_float+0xd0>
 800de94:	2200      	movs	r2, #0
 800de96:	2300      	movs	r3, #0
 800de98:	4640      	mov	r0, r8
 800de9a:	4649      	mov	r1, r9
 800de9c:	f7f2 fe46 	bl	8000b2c <__aeabi_dcmplt>
 800dea0:	b110      	cbz	r0, 800dea8 <_printf_float+0x90>
 800dea2:	232d      	movs	r3, #45	; 0x2d
 800dea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dea8:	4b93      	ldr	r3, [pc, #588]	; (800e0f8 <_printf_float+0x2e0>)
 800deaa:	4894      	ldr	r0, [pc, #592]	; (800e0fc <_printf_float+0x2e4>)
 800deac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800deb0:	bf94      	ite	ls
 800deb2:	4698      	movls	r8, r3
 800deb4:	4680      	movhi	r8, r0
 800deb6:	2303      	movs	r3, #3
 800deb8:	6123      	str	r3, [r4, #16]
 800deba:	9b05      	ldr	r3, [sp, #20]
 800debc:	f023 0204 	bic.w	r2, r3, #4
 800dec0:	6022      	str	r2, [r4, #0]
 800dec2:	f04f 0900 	mov.w	r9, #0
 800dec6:	9700      	str	r7, [sp, #0]
 800dec8:	4633      	mov	r3, r6
 800deca:	aa0b      	add	r2, sp, #44	; 0x2c
 800decc:	4621      	mov	r1, r4
 800dece:	4628      	mov	r0, r5
 800ded0:	f000 f9d8 	bl	800e284 <_printf_common>
 800ded4:	3001      	adds	r0, #1
 800ded6:	f040 8090 	bne.w	800dffa <_printf_float+0x1e2>
 800deda:	f04f 30ff 	mov.w	r0, #4294967295
 800dede:	b00d      	add	sp, #52	; 0x34
 800dee0:	ecbd 8b02 	vpop	{d8}
 800dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee8:	4642      	mov	r2, r8
 800deea:	464b      	mov	r3, r9
 800deec:	4640      	mov	r0, r8
 800deee:	4649      	mov	r1, r9
 800def0:	f7f2 fe44 	bl	8000b7c <__aeabi_dcmpun>
 800def4:	b140      	cbz	r0, 800df08 <_printf_float+0xf0>
 800def6:	464b      	mov	r3, r9
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfbc      	itt	lt
 800defc:	232d      	movlt	r3, #45	; 0x2d
 800defe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df02:	487f      	ldr	r0, [pc, #508]	; (800e100 <_printf_float+0x2e8>)
 800df04:	4b7f      	ldr	r3, [pc, #508]	; (800e104 <_printf_float+0x2ec>)
 800df06:	e7d1      	b.n	800deac <_printf_float+0x94>
 800df08:	6863      	ldr	r3, [r4, #4]
 800df0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df0e:	9206      	str	r2, [sp, #24]
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	d13f      	bne.n	800df94 <_printf_float+0x17c>
 800df14:	2306      	movs	r3, #6
 800df16:	6063      	str	r3, [r4, #4]
 800df18:	9b05      	ldr	r3, [sp, #20]
 800df1a:	6861      	ldr	r1, [r4, #4]
 800df1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df20:	2300      	movs	r3, #0
 800df22:	9303      	str	r3, [sp, #12]
 800df24:	ab0a      	add	r3, sp, #40	; 0x28
 800df26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df2a:	ab09      	add	r3, sp, #36	; 0x24
 800df2c:	ec49 8b10 	vmov	d0, r8, r9
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	6022      	str	r2, [r4, #0]
 800df34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df38:	4628      	mov	r0, r5
 800df3a:	f7ff fecd 	bl	800dcd8 <__cvt>
 800df3e:	9b06      	ldr	r3, [sp, #24]
 800df40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df42:	2b47      	cmp	r3, #71	; 0x47
 800df44:	4680      	mov	r8, r0
 800df46:	d108      	bne.n	800df5a <_printf_float+0x142>
 800df48:	1cc8      	adds	r0, r1, #3
 800df4a:	db02      	blt.n	800df52 <_printf_float+0x13a>
 800df4c:	6863      	ldr	r3, [r4, #4]
 800df4e:	4299      	cmp	r1, r3
 800df50:	dd41      	ble.n	800dfd6 <_printf_float+0x1be>
 800df52:	f1ab 0b02 	sub.w	fp, fp, #2
 800df56:	fa5f fb8b 	uxtb.w	fp, fp
 800df5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df5e:	d820      	bhi.n	800dfa2 <_printf_float+0x18a>
 800df60:	3901      	subs	r1, #1
 800df62:	465a      	mov	r2, fp
 800df64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800df68:	9109      	str	r1, [sp, #36]	; 0x24
 800df6a:	f7ff ff17 	bl	800dd9c <__exponent>
 800df6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df70:	1813      	adds	r3, r2, r0
 800df72:	2a01      	cmp	r2, #1
 800df74:	4681      	mov	r9, r0
 800df76:	6123      	str	r3, [r4, #16]
 800df78:	dc02      	bgt.n	800df80 <_printf_float+0x168>
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	07d2      	lsls	r2, r2, #31
 800df7e:	d501      	bpl.n	800df84 <_printf_float+0x16c>
 800df80:	3301      	adds	r3, #1
 800df82:	6123      	str	r3, [r4, #16]
 800df84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d09c      	beq.n	800dec6 <_printf_float+0xae>
 800df8c:	232d      	movs	r3, #45	; 0x2d
 800df8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df92:	e798      	b.n	800dec6 <_printf_float+0xae>
 800df94:	9a06      	ldr	r2, [sp, #24]
 800df96:	2a47      	cmp	r2, #71	; 0x47
 800df98:	d1be      	bne.n	800df18 <_printf_float+0x100>
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1bc      	bne.n	800df18 <_printf_float+0x100>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e7b9      	b.n	800df16 <_printf_float+0xfe>
 800dfa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dfa6:	d118      	bne.n	800dfda <_printf_float+0x1c2>
 800dfa8:	2900      	cmp	r1, #0
 800dfaa:	6863      	ldr	r3, [r4, #4]
 800dfac:	dd0b      	ble.n	800dfc6 <_printf_float+0x1ae>
 800dfae:	6121      	str	r1, [r4, #16]
 800dfb0:	b913      	cbnz	r3, 800dfb8 <_printf_float+0x1a0>
 800dfb2:	6822      	ldr	r2, [r4, #0]
 800dfb4:	07d0      	lsls	r0, r2, #31
 800dfb6:	d502      	bpl.n	800dfbe <_printf_float+0x1a6>
 800dfb8:	3301      	adds	r3, #1
 800dfba:	440b      	add	r3, r1
 800dfbc:	6123      	str	r3, [r4, #16]
 800dfbe:	65a1      	str	r1, [r4, #88]	; 0x58
 800dfc0:	f04f 0900 	mov.w	r9, #0
 800dfc4:	e7de      	b.n	800df84 <_printf_float+0x16c>
 800dfc6:	b913      	cbnz	r3, 800dfce <_printf_float+0x1b6>
 800dfc8:	6822      	ldr	r2, [r4, #0]
 800dfca:	07d2      	lsls	r2, r2, #31
 800dfcc:	d501      	bpl.n	800dfd2 <_printf_float+0x1ba>
 800dfce:	3302      	adds	r3, #2
 800dfd0:	e7f4      	b.n	800dfbc <_printf_float+0x1a4>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e7f2      	b.n	800dfbc <_printf_float+0x1a4>
 800dfd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dfda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfdc:	4299      	cmp	r1, r3
 800dfde:	db05      	blt.n	800dfec <_printf_float+0x1d4>
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	6121      	str	r1, [r4, #16]
 800dfe4:	07d8      	lsls	r0, r3, #31
 800dfe6:	d5ea      	bpl.n	800dfbe <_printf_float+0x1a6>
 800dfe8:	1c4b      	adds	r3, r1, #1
 800dfea:	e7e7      	b.n	800dfbc <_printf_float+0x1a4>
 800dfec:	2900      	cmp	r1, #0
 800dfee:	bfd4      	ite	le
 800dff0:	f1c1 0202 	rsble	r2, r1, #2
 800dff4:	2201      	movgt	r2, #1
 800dff6:	4413      	add	r3, r2
 800dff8:	e7e0      	b.n	800dfbc <_printf_float+0x1a4>
 800dffa:	6823      	ldr	r3, [r4, #0]
 800dffc:	055a      	lsls	r2, r3, #21
 800dffe:	d407      	bmi.n	800e010 <_printf_float+0x1f8>
 800e000:	6923      	ldr	r3, [r4, #16]
 800e002:	4642      	mov	r2, r8
 800e004:	4631      	mov	r1, r6
 800e006:	4628      	mov	r0, r5
 800e008:	47b8      	blx	r7
 800e00a:	3001      	adds	r0, #1
 800e00c:	d12c      	bne.n	800e068 <_printf_float+0x250>
 800e00e:	e764      	b.n	800deda <_printf_float+0xc2>
 800e010:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e014:	f240 80e0 	bls.w	800e1d8 <_printf_float+0x3c0>
 800e018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e01c:	2200      	movs	r2, #0
 800e01e:	2300      	movs	r3, #0
 800e020:	f7f2 fd7a 	bl	8000b18 <__aeabi_dcmpeq>
 800e024:	2800      	cmp	r0, #0
 800e026:	d034      	beq.n	800e092 <_printf_float+0x27a>
 800e028:	4a37      	ldr	r2, [pc, #220]	; (800e108 <_printf_float+0x2f0>)
 800e02a:	2301      	movs	r3, #1
 800e02c:	4631      	mov	r1, r6
 800e02e:	4628      	mov	r0, r5
 800e030:	47b8      	blx	r7
 800e032:	3001      	adds	r0, #1
 800e034:	f43f af51 	beq.w	800deda <_printf_float+0xc2>
 800e038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e03c:	429a      	cmp	r2, r3
 800e03e:	db02      	blt.n	800e046 <_printf_float+0x22e>
 800e040:	6823      	ldr	r3, [r4, #0]
 800e042:	07d8      	lsls	r0, r3, #31
 800e044:	d510      	bpl.n	800e068 <_printf_float+0x250>
 800e046:	ee18 3a10 	vmov	r3, s16
 800e04a:	4652      	mov	r2, sl
 800e04c:	4631      	mov	r1, r6
 800e04e:	4628      	mov	r0, r5
 800e050:	47b8      	blx	r7
 800e052:	3001      	adds	r0, #1
 800e054:	f43f af41 	beq.w	800deda <_printf_float+0xc2>
 800e058:	f04f 0800 	mov.w	r8, #0
 800e05c:	f104 091a 	add.w	r9, r4, #26
 800e060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e062:	3b01      	subs	r3, #1
 800e064:	4543      	cmp	r3, r8
 800e066:	dc09      	bgt.n	800e07c <_printf_float+0x264>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	079b      	lsls	r3, r3, #30
 800e06c:	f100 8105 	bmi.w	800e27a <_printf_float+0x462>
 800e070:	68e0      	ldr	r0, [r4, #12]
 800e072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e074:	4298      	cmp	r0, r3
 800e076:	bfb8      	it	lt
 800e078:	4618      	movlt	r0, r3
 800e07a:	e730      	b.n	800dede <_printf_float+0xc6>
 800e07c:	2301      	movs	r3, #1
 800e07e:	464a      	mov	r2, r9
 800e080:	4631      	mov	r1, r6
 800e082:	4628      	mov	r0, r5
 800e084:	47b8      	blx	r7
 800e086:	3001      	adds	r0, #1
 800e088:	f43f af27 	beq.w	800deda <_printf_float+0xc2>
 800e08c:	f108 0801 	add.w	r8, r8, #1
 800e090:	e7e6      	b.n	800e060 <_printf_float+0x248>
 800e092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e094:	2b00      	cmp	r3, #0
 800e096:	dc39      	bgt.n	800e10c <_printf_float+0x2f4>
 800e098:	4a1b      	ldr	r2, [pc, #108]	; (800e108 <_printf_float+0x2f0>)
 800e09a:	2301      	movs	r3, #1
 800e09c:	4631      	mov	r1, r6
 800e09e:	4628      	mov	r0, r5
 800e0a0:	47b8      	blx	r7
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	f43f af19 	beq.w	800deda <_printf_float+0xc2>
 800e0a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	d102      	bne.n	800e0b6 <_printf_float+0x29e>
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	07d9      	lsls	r1, r3, #31
 800e0b4:	d5d8      	bpl.n	800e068 <_printf_float+0x250>
 800e0b6:	ee18 3a10 	vmov	r3, s16
 800e0ba:	4652      	mov	r2, sl
 800e0bc:	4631      	mov	r1, r6
 800e0be:	4628      	mov	r0, r5
 800e0c0:	47b8      	blx	r7
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	f43f af09 	beq.w	800deda <_printf_float+0xc2>
 800e0c8:	f04f 0900 	mov.w	r9, #0
 800e0cc:	f104 0a1a 	add.w	sl, r4, #26
 800e0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d2:	425b      	negs	r3, r3
 800e0d4:	454b      	cmp	r3, r9
 800e0d6:	dc01      	bgt.n	800e0dc <_printf_float+0x2c4>
 800e0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0da:	e792      	b.n	800e002 <_printf_float+0x1ea>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	4652      	mov	r2, sl
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	47b8      	blx	r7
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	f43f aef7 	beq.w	800deda <_printf_float+0xc2>
 800e0ec:	f109 0901 	add.w	r9, r9, #1
 800e0f0:	e7ee      	b.n	800e0d0 <_printf_float+0x2b8>
 800e0f2:	bf00      	nop
 800e0f4:	7fefffff 	.word	0x7fefffff
 800e0f8:	08013e24 	.word	0x08013e24
 800e0fc:	08013e28 	.word	0x08013e28
 800e100:	08013e30 	.word	0x08013e30
 800e104:	08013e2c 	.word	0x08013e2c
 800e108:	08013e34 	.word	0x08013e34
 800e10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e10e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e110:	429a      	cmp	r2, r3
 800e112:	bfa8      	it	ge
 800e114:	461a      	movge	r2, r3
 800e116:	2a00      	cmp	r2, #0
 800e118:	4691      	mov	r9, r2
 800e11a:	dc37      	bgt.n	800e18c <_printf_float+0x374>
 800e11c:	f04f 0b00 	mov.w	fp, #0
 800e120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e124:	f104 021a 	add.w	r2, r4, #26
 800e128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e12a:	9305      	str	r3, [sp, #20]
 800e12c:	eba3 0309 	sub.w	r3, r3, r9
 800e130:	455b      	cmp	r3, fp
 800e132:	dc33      	bgt.n	800e19c <_printf_float+0x384>
 800e134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e138:	429a      	cmp	r2, r3
 800e13a:	db3b      	blt.n	800e1b4 <_printf_float+0x39c>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	07da      	lsls	r2, r3, #31
 800e140:	d438      	bmi.n	800e1b4 <_printf_float+0x39c>
 800e142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e144:	9a05      	ldr	r2, [sp, #20]
 800e146:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e148:	1a9a      	subs	r2, r3, r2
 800e14a:	eba3 0901 	sub.w	r9, r3, r1
 800e14e:	4591      	cmp	r9, r2
 800e150:	bfa8      	it	ge
 800e152:	4691      	movge	r9, r2
 800e154:	f1b9 0f00 	cmp.w	r9, #0
 800e158:	dc35      	bgt.n	800e1c6 <_printf_float+0x3ae>
 800e15a:	f04f 0800 	mov.w	r8, #0
 800e15e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e162:	f104 0a1a 	add.w	sl, r4, #26
 800e166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e16a:	1a9b      	subs	r3, r3, r2
 800e16c:	eba3 0309 	sub.w	r3, r3, r9
 800e170:	4543      	cmp	r3, r8
 800e172:	f77f af79 	ble.w	800e068 <_printf_float+0x250>
 800e176:	2301      	movs	r3, #1
 800e178:	4652      	mov	r2, sl
 800e17a:	4631      	mov	r1, r6
 800e17c:	4628      	mov	r0, r5
 800e17e:	47b8      	blx	r7
 800e180:	3001      	adds	r0, #1
 800e182:	f43f aeaa 	beq.w	800deda <_printf_float+0xc2>
 800e186:	f108 0801 	add.w	r8, r8, #1
 800e18a:	e7ec      	b.n	800e166 <_printf_float+0x34e>
 800e18c:	4613      	mov	r3, r2
 800e18e:	4631      	mov	r1, r6
 800e190:	4642      	mov	r2, r8
 800e192:	4628      	mov	r0, r5
 800e194:	47b8      	blx	r7
 800e196:	3001      	adds	r0, #1
 800e198:	d1c0      	bne.n	800e11c <_printf_float+0x304>
 800e19a:	e69e      	b.n	800deda <_printf_float+0xc2>
 800e19c:	2301      	movs	r3, #1
 800e19e:	4631      	mov	r1, r6
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	9205      	str	r2, [sp, #20]
 800e1a4:	47b8      	blx	r7
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	f43f ae97 	beq.w	800deda <_printf_float+0xc2>
 800e1ac:	9a05      	ldr	r2, [sp, #20]
 800e1ae:	f10b 0b01 	add.w	fp, fp, #1
 800e1b2:	e7b9      	b.n	800e128 <_printf_float+0x310>
 800e1b4:	ee18 3a10 	vmov	r3, s16
 800e1b8:	4652      	mov	r2, sl
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	4628      	mov	r0, r5
 800e1be:	47b8      	blx	r7
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d1be      	bne.n	800e142 <_printf_float+0x32a>
 800e1c4:	e689      	b.n	800deda <_printf_float+0xc2>
 800e1c6:	9a05      	ldr	r2, [sp, #20]
 800e1c8:	464b      	mov	r3, r9
 800e1ca:	4442      	add	r2, r8
 800e1cc:	4631      	mov	r1, r6
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	47b8      	blx	r7
 800e1d2:	3001      	adds	r0, #1
 800e1d4:	d1c1      	bne.n	800e15a <_printf_float+0x342>
 800e1d6:	e680      	b.n	800deda <_printf_float+0xc2>
 800e1d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1da:	2a01      	cmp	r2, #1
 800e1dc:	dc01      	bgt.n	800e1e2 <_printf_float+0x3ca>
 800e1de:	07db      	lsls	r3, r3, #31
 800e1e0:	d538      	bpl.n	800e254 <_printf_float+0x43c>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4642      	mov	r2, r8
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	47b8      	blx	r7
 800e1ec:	3001      	adds	r0, #1
 800e1ee:	f43f ae74 	beq.w	800deda <_printf_float+0xc2>
 800e1f2:	ee18 3a10 	vmov	r3, s16
 800e1f6:	4652      	mov	r2, sl
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	47b8      	blx	r7
 800e1fe:	3001      	adds	r0, #1
 800e200:	f43f ae6b 	beq.w	800deda <_printf_float+0xc2>
 800e204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e208:	2200      	movs	r2, #0
 800e20a:	2300      	movs	r3, #0
 800e20c:	f7f2 fc84 	bl	8000b18 <__aeabi_dcmpeq>
 800e210:	b9d8      	cbnz	r0, 800e24a <_printf_float+0x432>
 800e212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e214:	f108 0201 	add.w	r2, r8, #1
 800e218:	3b01      	subs	r3, #1
 800e21a:	4631      	mov	r1, r6
 800e21c:	4628      	mov	r0, r5
 800e21e:	47b8      	blx	r7
 800e220:	3001      	adds	r0, #1
 800e222:	d10e      	bne.n	800e242 <_printf_float+0x42a>
 800e224:	e659      	b.n	800deda <_printf_float+0xc2>
 800e226:	2301      	movs	r3, #1
 800e228:	4652      	mov	r2, sl
 800e22a:	4631      	mov	r1, r6
 800e22c:	4628      	mov	r0, r5
 800e22e:	47b8      	blx	r7
 800e230:	3001      	adds	r0, #1
 800e232:	f43f ae52 	beq.w	800deda <_printf_float+0xc2>
 800e236:	f108 0801 	add.w	r8, r8, #1
 800e23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e23c:	3b01      	subs	r3, #1
 800e23e:	4543      	cmp	r3, r8
 800e240:	dcf1      	bgt.n	800e226 <_printf_float+0x40e>
 800e242:	464b      	mov	r3, r9
 800e244:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e248:	e6dc      	b.n	800e004 <_printf_float+0x1ec>
 800e24a:	f04f 0800 	mov.w	r8, #0
 800e24e:	f104 0a1a 	add.w	sl, r4, #26
 800e252:	e7f2      	b.n	800e23a <_printf_float+0x422>
 800e254:	2301      	movs	r3, #1
 800e256:	4642      	mov	r2, r8
 800e258:	e7df      	b.n	800e21a <_printf_float+0x402>
 800e25a:	2301      	movs	r3, #1
 800e25c:	464a      	mov	r2, r9
 800e25e:	4631      	mov	r1, r6
 800e260:	4628      	mov	r0, r5
 800e262:	47b8      	blx	r7
 800e264:	3001      	adds	r0, #1
 800e266:	f43f ae38 	beq.w	800deda <_printf_float+0xc2>
 800e26a:	f108 0801 	add.w	r8, r8, #1
 800e26e:	68e3      	ldr	r3, [r4, #12]
 800e270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e272:	1a5b      	subs	r3, r3, r1
 800e274:	4543      	cmp	r3, r8
 800e276:	dcf0      	bgt.n	800e25a <_printf_float+0x442>
 800e278:	e6fa      	b.n	800e070 <_printf_float+0x258>
 800e27a:	f04f 0800 	mov.w	r8, #0
 800e27e:	f104 0919 	add.w	r9, r4, #25
 800e282:	e7f4      	b.n	800e26e <_printf_float+0x456>

0800e284 <_printf_common>:
 800e284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e288:	4616      	mov	r6, r2
 800e28a:	4699      	mov	r9, r3
 800e28c:	688a      	ldr	r2, [r1, #8]
 800e28e:	690b      	ldr	r3, [r1, #16]
 800e290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e294:	4293      	cmp	r3, r2
 800e296:	bfb8      	it	lt
 800e298:	4613      	movlt	r3, r2
 800e29a:	6033      	str	r3, [r6, #0]
 800e29c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2a0:	4607      	mov	r7, r0
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	b10a      	cbz	r2, 800e2aa <_printf_common+0x26>
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	6033      	str	r3, [r6, #0]
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	0699      	lsls	r1, r3, #26
 800e2ae:	bf42      	ittt	mi
 800e2b0:	6833      	ldrmi	r3, [r6, #0]
 800e2b2:	3302      	addmi	r3, #2
 800e2b4:	6033      	strmi	r3, [r6, #0]
 800e2b6:	6825      	ldr	r5, [r4, #0]
 800e2b8:	f015 0506 	ands.w	r5, r5, #6
 800e2bc:	d106      	bne.n	800e2cc <_printf_common+0x48>
 800e2be:	f104 0a19 	add.w	sl, r4, #25
 800e2c2:	68e3      	ldr	r3, [r4, #12]
 800e2c4:	6832      	ldr	r2, [r6, #0]
 800e2c6:	1a9b      	subs	r3, r3, r2
 800e2c8:	42ab      	cmp	r3, r5
 800e2ca:	dc26      	bgt.n	800e31a <_printf_common+0x96>
 800e2cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2d0:	1e13      	subs	r3, r2, #0
 800e2d2:	6822      	ldr	r2, [r4, #0]
 800e2d4:	bf18      	it	ne
 800e2d6:	2301      	movne	r3, #1
 800e2d8:	0692      	lsls	r2, r2, #26
 800e2da:	d42b      	bmi.n	800e334 <_printf_common+0xb0>
 800e2dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	47c0      	blx	r8
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	d01e      	beq.n	800e328 <_printf_common+0xa4>
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	68e5      	ldr	r5, [r4, #12]
 800e2ee:	6832      	ldr	r2, [r6, #0]
 800e2f0:	f003 0306 	and.w	r3, r3, #6
 800e2f4:	2b04      	cmp	r3, #4
 800e2f6:	bf08      	it	eq
 800e2f8:	1aad      	subeq	r5, r5, r2
 800e2fa:	68a3      	ldr	r3, [r4, #8]
 800e2fc:	6922      	ldr	r2, [r4, #16]
 800e2fe:	bf0c      	ite	eq
 800e300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e304:	2500      	movne	r5, #0
 800e306:	4293      	cmp	r3, r2
 800e308:	bfc4      	itt	gt
 800e30a:	1a9b      	subgt	r3, r3, r2
 800e30c:	18ed      	addgt	r5, r5, r3
 800e30e:	2600      	movs	r6, #0
 800e310:	341a      	adds	r4, #26
 800e312:	42b5      	cmp	r5, r6
 800e314:	d11a      	bne.n	800e34c <_printf_common+0xc8>
 800e316:	2000      	movs	r0, #0
 800e318:	e008      	b.n	800e32c <_printf_common+0xa8>
 800e31a:	2301      	movs	r3, #1
 800e31c:	4652      	mov	r2, sl
 800e31e:	4649      	mov	r1, r9
 800e320:	4638      	mov	r0, r7
 800e322:	47c0      	blx	r8
 800e324:	3001      	adds	r0, #1
 800e326:	d103      	bne.n	800e330 <_printf_common+0xac>
 800e328:	f04f 30ff 	mov.w	r0, #4294967295
 800e32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e330:	3501      	adds	r5, #1
 800e332:	e7c6      	b.n	800e2c2 <_printf_common+0x3e>
 800e334:	18e1      	adds	r1, r4, r3
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	2030      	movs	r0, #48	; 0x30
 800e33a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e33e:	4422      	add	r2, r4
 800e340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e348:	3302      	adds	r3, #2
 800e34a:	e7c7      	b.n	800e2dc <_printf_common+0x58>
 800e34c:	2301      	movs	r3, #1
 800e34e:	4622      	mov	r2, r4
 800e350:	4649      	mov	r1, r9
 800e352:	4638      	mov	r0, r7
 800e354:	47c0      	blx	r8
 800e356:	3001      	adds	r0, #1
 800e358:	d0e6      	beq.n	800e328 <_printf_common+0xa4>
 800e35a:	3601      	adds	r6, #1
 800e35c:	e7d9      	b.n	800e312 <_printf_common+0x8e>
	...

0800e360 <_printf_i>:
 800e360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e364:	7e0f      	ldrb	r7, [r1, #24]
 800e366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e368:	2f78      	cmp	r7, #120	; 0x78
 800e36a:	4691      	mov	r9, r2
 800e36c:	4680      	mov	r8, r0
 800e36e:	460c      	mov	r4, r1
 800e370:	469a      	mov	sl, r3
 800e372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e376:	d807      	bhi.n	800e388 <_printf_i+0x28>
 800e378:	2f62      	cmp	r7, #98	; 0x62
 800e37a:	d80a      	bhi.n	800e392 <_printf_i+0x32>
 800e37c:	2f00      	cmp	r7, #0
 800e37e:	f000 80d8 	beq.w	800e532 <_printf_i+0x1d2>
 800e382:	2f58      	cmp	r7, #88	; 0x58
 800e384:	f000 80a3 	beq.w	800e4ce <_printf_i+0x16e>
 800e388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e38c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e390:	e03a      	b.n	800e408 <_printf_i+0xa8>
 800e392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e396:	2b15      	cmp	r3, #21
 800e398:	d8f6      	bhi.n	800e388 <_printf_i+0x28>
 800e39a:	a101      	add	r1, pc, #4	; (adr r1, 800e3a0 <_printf_i+0x40>)
 800e39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3a0:	0800e3f9 	.word	0x0800e3f9
 800e3a4:	0800e40d 	.word	0x0800e40d
 800e3a8:	0800e389 	.word	0x0800e389
 800e3ac:	0800e389 	.word	0x0800e389
 800e3b0:	0800e389 	.word	0x0800e389
 800e3b4:	0800e389 	.word	0x0800e389
 800e3b8:	0800e40d 	.word	0x0800e40d
 800e3bc:	0800e389 	.word	0x0800e389
 800e3c0:	0800e389 	.word	0x0800e389
 800e3c4:	0800e389 	.word	0x0800e389
 800e3c8:	0800e389 	.word	0x0800e389
 800e3cc:	0800e519 	.word	0x0800e519
 800e3d0:	0800e43d 	.word	0x0800e43d
 800e3d4:	0800e4fb 	.word	0x0800e4fb
 800e3d8:	0800e389 	.word	0x0800e389
 800e3dc:	0800e389 	.word	0x0800e389
 800e3e0:	0800e53b 	.word	0x0800e53b
 800e3e4:	0800e389 	.word	0x0800e389
 800e3e8:	0800e43d 	.word	0x0800e43d
 800e3ec:	0800e389 	.word	0x0800e389
 800e3f0:	0800e389 	.word	0x0800e389
 800e3f4:	0800e503 	.word	0x0800e503
 800e3f8:	682b      	ldr	r3, [r5, #0]
 800e3fa:	1d1a      	adds	r2, r3, #4
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	602a      	str	r2, [r5, #0]
 800e400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e408:	2301      	movs	r3, #1
 800e40a:	e0a3      	b.n	800e554 <_printf_i+0x1f4>
 800e40c:	6820      	ldr	r0, [r4, #0]
 800e40e:	6829      	ldr	r1, [r5, #0]
 800e410:	0606      	lsls	r6, r0, #24
 800e412:	f101 0304 	add.w	r3, r1, #4
 800e416:	d50a      	bpl.n	800e42e <_printf_i+0xce>
 800e418:	680e      	ldr	r6, [r1, #0]
 800e41a:	602b      	str	r3, [r5, #0]
 800e41c:	2e00      	cmp	r6, #0
 800e41e:	da03      	bge.n	800e428 <_printf_i+0xc8>
 800e420:	232d      	movs	r3, #45	; 0x2d
 800e422:	4276      	negs	r6, r6
 800e424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e428:	485e      	ldr	r0, [pc, #376]	; (800e5a4 <_printf_i+0x244>)
 800e42a:	230a      	movs	r3, #10
 800e42c:	e019      	b.n	800e462 <_printf_i+0x102>
 800e42e:	680e      	ldr	r6, [r1, #0]
 800e430:	602b      	str	r3, [r5, #0]
 800e432:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e436:	bf18      	it	ne
 800e438:	b236      	sxthne	r6, r6
 800e43a:	e7ef      	b.n	800e41c <_printf_i+0xbc>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	6820      	ldr	r0, [r4, #0]
 800e440:	1d19      	adds	r1, r3, #4
 800e442:	6029      	str	r1, [r5, #0]
 800e444:	0601      	lsls	r1, r0, #24
 800e446:	d501      	bpl.n	800e44c <_printf_i+0xec>
 800e448:	681e      	ldr	r6, [r3, #0]
 800e44a:	e002      	b.n	800e452 <_printf_i+0xf2>
 800e44c:	0646      	lsls	r6, r0, #25
 800e44e:	d5fb      	bpl.n	800e448 <_printf_i+0xe8>
 800e450:	881e      	ldrh	r6, [r3, #0]
 800e452:	4854      	ldr	r0, [pc, #336]	; (800e5a4 <_printf_i+0x244>)
 800e454:	2f6f      	cmp	r7, #111	; 0x6f
 800e456:	bf0c      	ite	eq
 800e458:	2308      	moveq	r3, #8
 800e45a:	230a      	movne	r3, #10
 800e45c:	2100      	movs	r1, #0
 800e45e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e462:	6865      	ldr	r5, [r4, #4]
 800e464:	60a5      	str	r5, [r4, #8]
 800e466:	2d00      	cmp	r5, #0
 800e468:	bfa2      	ittt	ge
 800e46a:	6821      	ldrge	r1, [r4, #0]
 800e46c:	f021 0104 	bicge.w	r1, r1, #4
 800e470:	6021      	strge	r1, [r4, #0]
 800e472:	b90e      	cbnz	r6, 800e478 <_printf_i+0x118>
 800e474:	2d00      	cmp	r5, #0
 800e476:	d04d      	beq.n	800e514 <_printf_i+0x1b4>
 800e478:	4615      	mov	r5, r2
 800e47a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e47e:	fb03 6711 	mls	r7, r3, r1, r6
 800e482:	5dc7      	ldrb	r7, [r0, r7]
 800e484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e488:	4637      	mov	r7, r6
 800e48a:	42bb      	cmp	r3, r7
 800e48c:	460e      	mov	r6, r1
 800e48e:	d9f4      	bls.n	800e47a <_printf_i+0x11a>
 800e490:	2b08      	cmp	r3, #8
 800e492:	d10b      	bne.n	800e4ac <_printf_i+0x14c>
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	07de      	lsls	r6, r3, #31
 800e498:	d508      	bpl.n	800e4ac <_printf_i+0x14c>
 800e49a:	6923      	ldr	r3, [r4, #16]
 800e49c:	6861      	ldr	r1, [r4, #4]
 800e49e:	4299      	cmp	r1, r3
 800e4a0:	bfde      	ittt	le
 800e4a2:	2330      	movle	r3, #48	; 0x30
 800e4a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4ac:	1b52      	subs	r2, r2, r5
 800e4ae:	6122      	str	r2, [r4, #16]
 800e4b0:	f8cd a000 	str.w	sl, [sp]
 800e4b4:	464b      	mov	r3, r9
 800e4b6:	aa03      	add	r2, sp, #12
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	4640      	mov	r0, r8
 800e4bc:	f7ff fee2 	bl	800e284 <_printf_common>
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d14c      	bne.n	800e55e <_printf_i+0x1fe>
 800e4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c8:	b004      	add	sp, #16
 800e4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ce:	4835      	ldr	r0, [pc, #212]	; (800e5a4 <_printf_i+0x244>)
 800e4d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e4d4:	6829      	ldr	r1, [r5, #0]
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4dc:	6029      	str	r1, [r5, #0]
 800e4de:	061d      	lsls	r5, r3, #24
 800e4e0:	d514      	bpl.n	800e50c <_printf_i+0x1ac>
 800e4e2:	07df      	lsls	r7, r3, #31
 800e4e4:	bf44      	itt	mi
 800e4e6:	f043 0320 	orrmi.w	r3, r3, #32
 800e4ea:	6023      	strmi	r3, [r4, #0]
 800e4ec:	b91e      	cbnz	r6, 800e4f6 <_printf_i+0x196>
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	f023 0320 	bic.w	r3, r3, #32
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	2310      	movs	r3, #16
 800e4f8:	e7b0      	b.n	800e45c <_printf_i+0xfc>
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	f043 0320 	orr.w	r3, r3, #32
 800e500:	6023      	str	r3, [r4, #0]
 800e502:	2378      	movs	r3, #120	; 0x78
 800e504:	4828      	ldr	r0, [pc, #160]	; (800e5a8 <_printf_i+0x248>)
 800e506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e50a:	e7e3      	b.n	800e4d4 <_printf_i+0x174>
 800e50c:	0659      	lsls	r1, r3, #25
 800e50e:	bf48      	it	mi
 800e510:	b2b6      	uxthmi	r6, r6
 800e512:	e7e6      	b.n	800e4e2 <_printf_i+0x182>
 800e514:	4615      	mov	r5, r2
 800e516:	e7bb      	b.n	800e490 <_printf_i+0x130>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	6826      	ldr	r6, [r4, #0]
 800e51c:	6961      	ldr	r1, [r4, #20]
 800e51e:	1d18      	adds	r0, r3, #4
 800e520:	6028      	str	r0, [r5, #0]
 800e522:	0635      	lsls	r5, r6, #24
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	d501      	bpl.n	800e52c <_printf_i+0x1cc>
 800e528:	6019      	str	r1, [r3, #0]
 800e52a:	e002      	b.n	800e532 <_printf_i+0x1d2>
 800e52c:	0670      	lsls	r0, r6, #25
 800e52e:	d5fb      	bpl.n	800e528 <_printf_i+0x1c8>
 800e530:	8019      	strh	r1, [r3, #0]
 800e532:	2300      	movs	r3, #0
 800e534:	6123      	str	r3, [r4, #16]
 800e536:	4615      	mov	r5, r2
 800e538:	e7ba      	b.n	800e4b0 <_printf_i+0x150>
 800e53a:	682b      	ldr	r3, [r5, #0]
 800e53c:	1d1a      	adds	r2, r3, #4
 800e53e:	602a      	str	r2, [r5, #0]
 800e540:	681d      	ldr	r5, [r3, #0]
 800e542:	6862      	ldr	r2, [r4, #4]
 800e544:	2100      	movs	r1, #0
 800e546:	4628      	mov	r0, r5
 800e548:	f7f1 fe72 	bl	8000230 <memchr>
 800e54c:	b108      	cbz	r0, 800e552 <_printf_i+0x1f2>
 800e54e:	1b40      	subs	r0, r0, r5
 800e550:	6060      	str	r0, [r4, #4]
 800e552:	6863      	ldr	r3, [r4, #4]
 800e554:	6123      	str	r3, [r4, #16]
 800e556:	2300      	movs	r3, #0
 800e558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e55c:	e7a8      	b.n	800e4b0 <_printf_i+0x150>
 800e55e:	6923      	ldr	r3, [r4, #16]
 800e560:	462a      	mov	r2, r5
 800e562:	4649      	mov	r1, r9
 800e564:	4640      	mov	r0, r8
 800e566:	47d0      	blx	sl
 800e568:	3001      	adds	r0, #1
 800e56a:	d0ab      	beq.n	800e4c4 <_printf_i+0x164>
 800e56c:	6823      	ldr	r3, [r4, #0]
 800e56e:	079b      	lsls	r3, r3, #30
 800e570:	d413      	bmi.n	800e59a <_printf_i+0x23a>
 800e572:	68e0      	ldr	r0, [r4, #12]
 800e574:	9b03      	ldr	r3, [sp, #12]
 800e576:	4298      	cmp	r0, r3
 800e578:	bfb8      	it	lt
 800e57a:	4618      	movlt	r0, r3
 800e57c:	e7a4      	b.n	800e4c8 <_printf_i+0x168>
 800e57e:	2301      	movs	r3, #1
 800e580:	4632      	mov	r2, r6
 800e582:	4649      	mov	r1, r9
 800e584:	4640      	mov	r0, r8
 800e586:	47d0      	blx	sl
 800e588:	3001      	adds	r0, #1
 800e58a:	d09b      	beq.n	800e4c4 <_printf_i+0x164>
 800e58c:	3501      	adds	r5, #1
 800e58e:	68e3      	ldr	r3, [r4, #12]
 800e590:	9903      	ldr	r1, [sp, #12]
 800e592:	1a5b      	subs	r3, r3, r1
 800e594:	42ab      	cmp	r3, r5
 800e596:	dcf2      	bgt.n	800e57e <_printf_i+0x21e>
 800e598:	e7eb      	b.n	800e572 <_printf_i+0x212>
 800e59a:	2500      	movs	r5, #0
 800e59c:	f104 0619 	add.w	r6, r4, #25
 800e5a0:	e7f5      	b.n	800e58e <_printf_i+0x22e>
 800e5a2:	bf00      	nop
 800e5a4:	08013e36 	.word	0x08013e36
 800e5a8:	08013e47 	.word	0x08013e47

0800e5ac <_scanf_float>:
 800e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b0:	b087      	sub	sp, #28
 800e5b2:	4617      	mov	r7, r2
 800e5b4:	9303      	str	r3, [sp, #12]
 800e5b6:	688b      	ldr	r3, [r1, #8]
 800e5b8:	1e5a      	subs	r2, r3, #1
 800e5ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e5be:	bf83      	ittte	hi
 800e5c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e5c4:	195b      	addhi	r3, r3, r5
 800e5c6:	9302      	strhi	r3, [sp, #8]
 800e5c8:	2300      	movls	r3, #0
 800e5ca:	bf86      	itte	hi
 800e5cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e5d0:	608b      	strhi	r3, [r1, #8]
 800e5d2:	9302      	strls	r3, [sp, #8]
 800e5d4:	680b      	ldr	r3, [r1, #0]
 800e5d6:	468b      	mov	fp, r1
 800e5d8:	2500      	movs	r5, #0
 800e5da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e5de:	f84b 3b1c 	str.w	r3, [fp], #28
 800e5e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	465e      	mov	r6, fp
 800e5ec:	46aa      	mov	sl, r5
 800e5ee:	46a9      	mov	r9, r5
 800e5f0:	9501      	str	r5, [sp, #4]
 800e5f2:	68a2      	ldr	r2, [r4, #8]
 800e5f4:	b152      	cbz	r2, 800e60c <_scanf_float+0x60>
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b4e      	cmp	r3, #78	; 0x4e
 800e5fc:	d864      	bhi.n	800e6c8 <_scanf_float+0x11c>
 800e5fe:	2b40      	cmp	r3, #64	; 0x40
 800e600:	d83c      	bhi.n	800e67c <_scanf_float+0xd0>
 800e602:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e606:	b2c8      	uxtb	r0, r1
 800e608:	280e      	cmp	r0, #14
 800e60a:	d93a      	bls.n	800e682 <_scanf_float+0xd6>
 800e60c:	f1b9 0f00 	cmp.w	r9, #0
 800e610:	d003      	beq.n	800e61a <_scanf_float+0x6e>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e61e:	f1ba 0f01 	cmp.w	sl, #1
 800e622:	f200 8113 	bhi.w	800e84c <_scanf_float+0x2a0>
 800e626:	455e      	cmp	r6, fp
 800e628:	f200 8105 	bhi.w	800e836 <_scanf_float+0x28a>
 800e62c:	2501      	movs	r5, #1
 800e62e:	4628      	mov	r0, r5
 800e630:	b007      	add	sp, #28
 800e632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e63a:	2a0d      	cmp	r2, #13
 800e63c:	d8e6      	bhi.n	800e60c <_scanf_float+0x60>
 800e63e:	a101      	add	r1, pc, #4	; (adr r1, 800e644 <_scanf_float+0x98>)
 800e640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e644:	0800e783 	.word	0x0800e783
 800e648:	0800e60d 	.word	0x0800e60d
 800e64c:	0800e60d 	.word	0x0800e60d
 800e650:	0800e60d 	.word	0x0800e60d
 800e654:	0800e7e3 	.word	0x0800e7e3
 800e658:	0800e7bb 	.word	0x0800e7bb
 800e65c:	0800e60d 	.word	0x0800e60d
 800e660:	0800e60d 	.word	0x0800e60d
 800e664:	0800e791 	.word	0x0800e791
 800e668:	0800e60d 	.word	0x0800e60d
 800e66c:	0800e60d 	.word	0x0800e60d
 800e670:	0800e60d 	.word	0x0800e60d
 800e674:	0800e60d 	.word	0x0800e60d
 800e678:	0800e749 	.word	0x0800e749
 800e67c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e680:	e7db      	b.n	800e63a <_scanf_float+0x8e>
 800e682:	290e      	cmp	r1, #14
 800e684:	d8c2      	bhi.n	800e60c <_scanf_float+0x60>
 800e686:	a001      	add	r0, pc, #4	; (adr r0, 800e68c <_scanf_float+0xe0>)
 800e688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e68c:	0800e73b 	.word	0x0800e73b
 800e690:	0800e60d 	.word	0x0800e60d
 800e694:	0800e73b 	.word	0x0800e73b
 800e698:	0800e7cf 	.word	0x0800e7cf
 800e69c:	0800e60d 	.word	0x0800e60d
 800e6a0:	0800e6e9 	.word	0x0800e6e9
 800e6a4:	0800e725 	.word	0x0800e725
 800e6a8:	0800e725 	.word	0x0800e725
 800e6ac:	0800e725 	.word	0x0800e725
 800e6b0:	0800e725 	.word	0x0800e725
 800e6b4:	0800e725 	.word	0x0800e725
 800e6b8:	0800e725 	.word	0x0800e725
 800e6bc:	0800e725 	.word	0x0800e725
 800e6c0:	0800e725 	.word	0x0800e725
 800e6c4:	0800e725 	.word	0x0800e725
 800e6c8:	2b6e      	cmp	r3, #110	; 0x6e
 800e6ca:	d809      	bhi.n	800e6e0 <_scanf_float+0x134>
 800e6cc:	2b60      	cmp	r3, #96	; 0x60
 800e6ce:	d8b2      	bhi.n	800e636 <_scanf_float+0x8a>
 800e6d0:	2b54      	cmp	r3, #84	; 0x54
 800e6d2:	d077      	beq.n	800e7c4 <_scanf_float+0x218>
 800e6d4:	2b59      	cmp	r3, #89	; 0x59
 800e6d6:	d199      	bne.n	800e60c <_scanf_float+0x60>
 800e6d8:	2d07      	cmp	r5, #7
 800e6da:	d197      	bne.n	800e60c <_scanf_float+0x60>
 800e6dc:	2508      	movs	r5, #8
 800e6de:	e029      	b.n	800e734 <_scanf_float+0x188>
 800e6e0:	2b74      	cmp	r3, #116	; 0x74
 800e6e2:	d06f      	beq.n	800e7c4 <_scanf_float+0x218>
 800e6e4:	2b79      	cmp	r3, #121	; 0x79
 800e6e6:	e7f6      	b.n	800e6d6 <_scanf_float+0x12a>
 800e6e8:	6821      	ldr	r1, [r4, #0]
 800e6ea:	05c8      	lsls	r0, r1, #23
 800e6ec:	d51a      	bpl.n	800e724 <_scanf_float+0x178>
 800e6ee:	9b02      	ldr	r3, [sp, #8]
 800e6f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e6f4:	6021      	str	r1, [r4, #0]
 800e6f6:	f109 0901 	add.w	r9, r9, #1
 800e6fa:	b11b      	cbz	r3, 800e704 <_scanf_float+0x158>
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	3201      	adds	r2, #1
 800e700:	9302      	str	r3, [sp, #8]
 800e702:	60a2      	str	r2, [r4, #8]
 800e704:	68a3      	ldr	r3, [r4, #8]
 800e706:	3b01      	subs	r3, #1
 800e708:	60a3      	str	r3, [r4, #8]
 800e70a:	6923      	ldr	r3, [r4, #16]
 800e70c:	3301      	adds	r3, #1
 800e70e:	6123      	str	r3, [r4, #16]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3b01      	subs	r3, #1
 800e714:	2b00      	cmp	r3, #0
 800e716:	607b      	str	r3, [r7, #4]
 800e718:	f340 8084 	ble.w	800e824 <_scanf_float+0x278>
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	3301      	adds	r3, #1
 800e720:	603b      	str	r3, [r7, #0]
 800e722:	e766      	b.n	800e5f2 <_scanf_float+0x46>
 800e724:	eb1a 0f05 	cmn.w	sl, r5
 800e728:	f47f af70 	bne.w	800e60c <_scanf_float+0x60>
 800e72c:	6822      	ldr	r2, [r4, #0]
 800e72e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e732:	6022      	str	r2, [r4, #0]
 800e734:	f806 3b01 	strb.w	r3, [r6], #1
 800e738:	e7e4      	b.n	800e704 <_scanf_float+0x158>
 800e73a:	6822      	ldr	r2, [r4, #0]
 800e73c:	0610      	lsls	r0, r2, #24
 800e73e:	f57f af65 	bpl.w	800e60c <_scanf_float+0x60>
 800e742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e746:	e7f4      	b.n	800e732 <_scanf_float+0x186>
 800e748:	f1ba 0f00 	cmp.w	sl, #0
 800e74c:	d10e      	bne.n	800e76c <_scanf_float+0x1c0>
 800e74e:	f1b9 0f00 	cmp.w	r9, #0
 800e752:	d10e      	bne.n	800e772 <_scanf_float+0x1c6>
 800e754:	6822      	ldr	r2, [r4, #0]
 800e756:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e75a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e75e:	d108      	bne.n	800e772 <_scanf_float+0x1c6>
 800e760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e764:	6022      	str	r2, [r4, #0]
 800e766:	f04f 0a01 	mov.w	sl, #1
 800e76a:	e7e3      	b.n	800e734 <_scanf_float+0x188>
 800e76c:	f1ba 0f02 	cmp.w	sl, #2
 800e770:	d055      	beq.n	800e81e <_scanf_float+0x272>
 800e772:	2d01      	cmp	r5, #1
 800e774:	d002      	beq.n	800e77c <_scanf_float+0x1d0>
 800e776:	2d04      	cmp	r5, #4
 800e778:	f47f af48 	bne.w	800e60c <_scanf_float+0x60>
 800e77c:	3501      	adds	r5, #1
 800e77e:	b2ed      	uxtb	r5, r5
 800e780:	e7d8      	b.n	800e734 <_scanf_float+0x188>
 800e782:	f1ba 0f01 	cmp.w	sl, #1
 800e786:	f47f af41 	bne.w	800e60c <_scanf_float+0x60>
 800e78a:	f04f 0a02 	mov.w	sl, #2
 800e78e:	e7d1      	b.n	800e734 <_scanf_float+0x188>
 800e790:	b97d      	cbnz	r5, 800e7b2 <_scanf_float+0x206>
 800e792:	f1b9 0f00 	cmp.w	r9, #0
 800e796:	f47f af3c 	bne.w	800e612 <_scanf_float+0x66>
 800e79a:	6822      	ldr	r2, [r4, #0]
 800e79c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e7a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e7a4:	f47f af39 	bne.w	800e61a <_scanf_float+0x6e>
 800e7a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e7ac:	6022      	str	r2, [r4, #0]
 800e7ae:	2501      	movs	r5, #1
 800e7b0:	e7c0      	b.n	800e734 <_scanf_float+0x188>
 800e7b2:	2d03      	cmp	r5, #3
 800e7b4:	d0e2      	beq.n	800e77c <_scanf_float+0x1d0>
 800e7b6:	2d05      	cmp	r5, #5
 800e7b8:	e7de      	b.n	800e778 <_scanf_float+0x1cc>
 800e7ba:	2d02      	cmp	r5, #2
 800e7bc:	f47f af26 	bne.w	800e60c <_scanf_float+0x60>
 800e7c0:	2503      	movs	r5, #3
 800e7c2:	e7b7      	b.n	800e734 <_scanf_float+0x188>
 800e7c4:	2d06      	cmp	r5, #6
 800e7c6:	f47f af21 	bne.w	800e60c <_scanf_float+0x60>
 800e7ca:	2507      	movs	r5, #7
 800e7cc:	e7b2      	b.n	800e734 <_scanf_float+0x188>
 800e7ce:	6822      	ldr	r2, [r4, #0]
 800e7d0:	0591      	lsls	r1, r2, #22
 800e7d2:	f57f af1b 	bpl.w	800e60c <_scanf_float+0x60>
 800e7d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e7da:	6022      	str	r2, [r4, #0]
 800e7dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7e0:	e7a8      	b.n	800e734 <_scanf_float+0x188>
 800e7e2:	6822      	ldr	r2, [r4, #0]
 800e7e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e7e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e7ec:	d006      	beq.n	800e7fc <_scanf_float+0x250>
 800e7ee:	0550      	lsls	r0, r2, #21
 800e7f0:	f57f af0c 	bpl.w	800e60c <_scanf_float+0x60>
 800e7f4:	f1b9 0f00 	cmp.w	r9, #0
 800e7f8:	f43f af0f 	beq.w	800e61a <_scanf_float+0x6e>
 800e7fc:	0591      	lsls	r1, r2, #22
 800e7fe:	bf58      	it	pl
 800e800:	9901      	ldrpl	r1, [sp, #4]
 800e802:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e806:	bf58      	it	pl
 800e808:	eba9 0101 	subpl.w	r1, r9, r1
 800e80c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e810:	bf58      	it	pl
 800e812:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e816:	6022      	str	r2, [r4, #0]
 800e818:	f04f 0900 	mov.w	r9, #0
 800e81c:	e78a      	b.n	800e734 <_scanf_float+0x188>
 800e81e:	f04f 0a03 	mov.w	sl, #3
 800e822:	e787      	b.n	800e734 <_scanf_float+0x188>
 800e824:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e828:	4639      	mov	r1, r7
 800e82a:	4640      	mov	r0, r8
 800e82c:	4798      	blx	r3
 800e82e:	2800      	cmp	r0, #0
 800e830:	f43f aedf 	beq.w	800e5f2 <_scanf_float+0x46>
 800e834:	e6ea      	b.n	800e60c <_scanf_float+0x60>
 800e836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e83a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e83e:	463a      	mov	r2, r7
 800e840:	4640      	mov	r0, r8
 800e842:	4798      	blx	r3
 800e844:	6923      	ldr	r3, [r4, #16]
 800e846:	3b01      	subs	r3, #1
 800e848:	6123      	str	r3, [r4, #16]
 800e84a:	e6ec      	b.n	800e626 <_scanf_float+0x7a>
 800e84c:	1e6b      	subs	r3, r5, #1
 800e84e:	2b06      	cmp	r3, #6
 800e850:	d825      	bhi.n	800e89e <_scanf_float+0x2f2>
 800e852:	2d02      	cmp	r5, #2
 800e854:	d836      	bhi.n	800e8c4 <_scanf_float+0x318>
 800e856:	455e      	cmp	r6, fp
 800e858:	f67f aee8 	bls.w	800e62c <_scanf_float+0x80>
 800e85c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e860:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e864:	463a      	mov	r2, r7
 800e866:	4640      	mov	r0, r8
 800e868:	4798      	blx	r3
 800e86a:	6923      	ldr	r3, [r4, #16]
 800e86c:	3b01      	subs	r3, #1
 800e86e:	6123      	str	r3, [r4, #16]
 800e870:	e7f1      	b.n	800e856 <_scanf_float+0x2aa>
 800e872:	9802      	ldr	r0, [sp, #8]
 800e874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e878:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e87c:	9002      	str	r0, [sp, #8]
 800e87e:	463a      	mov	r2, r7
 800e880:	4640      	mov	r0, r8
 800e882:	4798      	blx	r3
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	3b01      	subs	r3, #1
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e88e:	fa5f fa8a 	uxtb.w	sl, sl
 800e892:	f1ba 0f02 	cmp.w	sl, #2
 800e896:	d1ec      	bne.n	800e872 <_scanf_float+0x2c6>
 800e898:	3d03      	subs	r5, #3
 800e89a:	b2ed      	uxtb	r5, r5
 800e89c:	1b76      	subs	r6, r6, r5
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	05da      	lsls	r2, r3, #23
 800e8a2:	d52f      	bpl.n	800e904 <_scanf_float+0x358>
 800e8a4:	055b      	lsls	r3, r3, #21
 800e8a6:	d510      	bpl.n	800e8ca <_scanf_float+0x31e>
 800e8a8:	455e      	cmp	r6, fp
 800e8aa:	f67f aebf 	bls.w	800e62c <_scanf_float+0x80>
 800e8ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8b6:	463a      	mov	r2, r7
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	4798      	blx	r3
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	6123      	str	r3, [r4, #16]
 800e8c2:	e7f1      	b.n	800e8a8 <_scanf_float+0x2fc>
 800e8c4:	46aa      	mov	sl, r5
 800e8c6:	9602      	str	r6, [sp, #8]
 800e8c8:	e7df      	b.n	800e88a <_scanf_float+0x2de>
 800e8ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e8ce:	6923      	ldr	r3, [r4, #16]
 800e8d0:	2965      	cmp	r1, #101	; 0x65
 800e8d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800e8da:	6123      	str	r3, [r4, #16]
 800e8dc:	d00c      	beq.n	800e8f8 <_scanf_float+0x34c>
 800e8de:	2945      	cmp	r1, #69	; 0x45
 800e8e0:	d00a      	beq.n	800e8f8 <_scanf_float+0x34c>
 800e8e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8e6:	463a      	mov	r2, r7
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4798      	blx	r3
 800e8ec:	6923      	ldr	r3, [r4, #16]
 800e8ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	1eb5      	subs	r5, r6, #2
 800e8f6:	6123      	str	r3, [r4, #16]
 800e8f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8fc:	463a      	mov	r2, r7
 800e8fe:	4640      	mov	r0, r8
 800e900:	4798      	blx	r3
 800e902:	462e      	mov	r6, r5
 800e904:	6825      	ldr	r5, [r4, #0]
 800e906:	f015 0510 	ands.w	r5, r5, #16
 800e90a:	d159      	bne.n	800e9c0 <_scanf_float+0x414>
 800e90c:	7035      	strb	r5, [r6, #0]
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e918:	d11b      	bne.n	800e952 <_scanf_float+0x3a6>
 800e91a:	9b01      	ldr	r3, [sp, #4]
 800e91c:	454b      	cmp	r3, r9
 800e91e:	eba3 0209 	sub.w	r2, r3, r9
 800e922:	d123      	bne.n	800e96c <_scanf_float+0x3c0>
 800e924:	2200      	movs	r2, #0
 800e926:	4659      	mov	r1, fp
 800e928:	4640      	mov	r0, r8
 800e92a:	f000 ff27 	bl	800f77c <_strtod_r>
 800e92e:	6822      	ldr	r2, [r4, #0]
 800e930:	9b03      	ldr	r3, [sp, #12]
 800e932:	f012 0f02 	tst.w	r2, #2
 800e936:	ec57 6b10 	vmov	r6, r7, d0
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	d021      	beq.n	800e982 <_scanf_float+0x3d6>
 800e93e:	9903      	ldr	r1, [sp, #12]
 800e940:	1d1a      	adds	r2, r3, #4
 800e942:	600a      	str	r2, [r1, #0]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	e9c3 6700 	strd	r6, r7, [r3]
 800e94a:	68e3      	ldr	r3, [r4, #12]
 800e94c:	3301      	adds	r3, #1
 800e94e:	60e3      	str	r3, [r4, #12]
 800e950:	e66d      	b.n	800e62e <_scanf_float+0x82>
 800e952:	9b04      	ldr	r3, [sp, #16]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d0e5      	beq.n	800e924 <_scanf_float+0x378>
 800e958:	9905      	ldr	r1, [sp, #20]
 800e95a:	230a      	movs	r3, #10
 800e95c:	462a      	mov	r2, r5
 800e95e:	3101      	adds	r1, #1
 800e960:	4640      	mov	r0, r8
 800e962:	f000 ff9f 	bl	800f8a4 <_strtol_r>
 800e966:	9b04      	ldr	r3, [sp, #16]
 800e968:	9e05      	ldr	r6, [sp, #20]
 800e96a:	1ac2      	subs	r2, r0, r3
 800e96c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e970:	429e      	cmp	r6, r3
 800e972:	bf28      	it	cs
 800e974:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e978:	4912      	ldr	r1, [pc, #72]	; (800e9c4 <_scanf_float+0x418>)
 800e97a:	4630      	mov	r0, r6
 800e97c:	f000 f8ba 	bl	800eaf4 <siprintf>
 800e980:	e7d0      	b.n	800e924 <_scanf_float+0x378>
 800e982:	9903      	ldr	r1, [sp, #12]
 800e984:	f012 0f04 	tst.w	r2, #4
 800e988:	f103 0204 	add.w	r2, r3, #4
 800e98c:	600a      	str	r2, [r1, #0]
 800e98e:	d1d9      	bne.n	800e944 <_scanf_float+0x398>
 800e990:	f8d3 8000 	ldr.w	r8, [r3]
 800e994:	ee10 2a10 	vmov	r2, s0
 800e998:	ee10 0a10 	vmov	r0, s0
 800e99c:	463b      	mov	r3, r7
 800e99e:	4639      	mov	r1, r7
 800e9a0:	f7f2 f8ec 	bl	8000b7c <__aeabi_dcmpun>
 800e9a4:	b128      	cbz	r0, 800e9b2 <_scanf_float+0x406>
 800e9a6:	4808      	ldr	r0, [pc, #32]	; (800e9c8 <_scanf_float+0x41c>)
 800e9a8:	f000 f89e 	bl	800eae8 <nanf>
 800e9ac:	ed88 0a00 	vstr	s0, [r8]
 800e9b0:	e7cb      	b.n	800e94a <_scanf_float+0x39e>
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f2 f93f 	bl	8000c38 <__aeabi_d2f>
 800e9ba:	f8c8 0000 	str.w	r0, [r8]
 800e9be:	e7c4      	b.n	800e94a <_scanf_float+0x39e>
 800e9c0:	2500      	movs	r5, #0
 800e9c2:	e634      	b.n	800e62e <_scanf_float+0x82>
 800e9c4:	08013e58 	.word	0x08013e58
 800e9c8:	080142c8 	.word	0x080142c8

0800e9cc <iprintf>:
 800e9cc:	b40f      	push	{r0, r1, r2, r3}
 800e9ce:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <iprintf+0x2c>)
 800e9d0:	b513      	push	{r0, r1, r4, lr}
 800e9d2:	681c      	ldr	r4, [r3, #0]
 800e9d4:	b124      	cbz	r4, 800e9e0 <iprintf+0x14>
 800e9d6:	69a3      	ldr	r3, [r4, #24]
 800e9d8:	b913      	cbnz	r3, 800e9e0 <iprintf+0x14>
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f001 ffc4 	bl	8010968 <__sinit>
 800e9e0:	ab05      	add	r3, sp, #20
 800e9e2:	9a04      	ldr	r2, [sp, #16]
 800e9e4:	68a1      	ldr	r1, [r4, #8]
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f003 fb8d 	bl	8012108 <_vfiprintf_r>
 800e9ee:	b002      	add	sp, #8
 800e9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9f4:	b004      	add	sp, #16
 800e9f6:	4770      	bx	lr
 800e9f8:	2000004c 	.word	0x2000004c

0800e9fc <_puts_r>:
 800e9fc:	b570      	push	{r4, r5, r6, lr}
 800e9fe:	460e      	mov	r6, r1
 800ea00:	4605      	mov	r5, r0
 800ea02:	b118      	cbz	r0, 800ea0c <_puts_r+0x10>
 800ea04:	6983      	ldr	r3, [r0, #24]
 800ea06:	b90b      	cbnz	r3, 800ea0c <_puts_r+0x10>
 800ea08:	f001 ffae 	bl	8010968 <__sinit>
 800ea0c:	69ab      	ldr	r3, [r5, #24]
 800ea0e:	68ac      	ldr	r4, [r5, #8]
 800ea10:	b913      	cbnz	r3, 800ea18 <_puts_r+0x1c>
 800ea12:	4628      	mov	r0, r5
 800ea14:	f001 ffa8 	bl	8010968 <__sinit>
 800ea18:	4b2c      	ldr	r3, [pc, #176]	; (800eacc <_puts_r+0xd0>)
 800ea1a:	429c      	cmp	r4, r3
 800ea1c:	d120      	bne.n	800ea60 <_puts_r+0x64>
 800ea1e:	686c      	ldr	r4, [r5, #4]
 800ea20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea22:	07db      	lsls	r3, r3, #31
 800ea24:	d405      	bmi.n	800ea32 <_puts_r+0x36>
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	0598      	lsls	r0, r3, #22
 800ea2a:	d402      	bmi.n	800ea32 <_puts_r+0x36>
 800ea2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea2e:	f002 fbac 	bl	801118a <__retarget_lock_acquire_recursive>
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	0719      	lsls	r1, r3, #28
 800ea36:	d51d      	bpl.n	800ea74 <_puts_r+0x78>
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	b1db      	cbz	r3, 800ea74 <_puts_r+0x78>
 800ea3c:	3e01      	subs	r6, #1
 800ea3e:	68a3      	ldr	r3, [r4, #8]
 800ea40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea44:	3b01      	subs	r3, #1
 800ea46:	60a3      	str	r3, [r4, #8]
 800ea48:	bb39      	cbnz	r1, 800ea9a <_puts_r+0x9e>
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	da38      	bge.n	800eac0 <_puts_r+0xc4>
 800ea4e:	4622      	mov	r2, r4
 800ea50:	210a      	movs	r1, #10
 800ea52:	4628      	mov	r0, r5
 800ea54:	f000 ff32 	bl	800f8bc <__swbuf_r>
 800ea58:	3001      	adds	r0, #1
 800ea5a:	d011      	beq.n	800ea80 <_puts_r+0x84>
 800ea5c:	250a      	movs	r5, #10
 800ea5e:	e011      	b.n	800ea84 <_puts_r+0x88>
 800ea60:	4b1b      	ldr	r3, [pc, #108]	; (800ead0 <_puts_r+0xd4>)
 800ea62:	429c      	cmp	r4, r3
 800ea64:	d101      	bne.n	800ea6a <_puts_r+0x6e>
 800ea66:	68ac      	ldr	r4, [r5, #8]
 800ea68:	e7da      	b.n	800ea20 <_puts_r+0x24>
 800ea6a:	4b1a      	ldr	r3, [pc, #104]	; (800ead4 <_puts_r+0xd8>)
 800ea6c:	429c      	cmp	r4, r3
 800ea6e:	bf08      	it	eq
 800ea70:	68ec      	ldreq	r4, [r5, #12]
 800ea72:	e7d5      	b.n	800ea20 <_puts_r+0x24>
 800ea74:	4621      	mov	r1, r4
 800ea76:	4628      	mov	r0, r5
 800ea78:	f000 ff72 	bl	800f960 <__swsetup_r>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d0dd      	beq.n	800ea3c <_puts_r+0x40>
 800ea80:	f04f 35ff 	mov.w	r5, #4294967295
 800ea84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea86:	07da      	lsls	r2, r3, #31
 800ea88:	d405      	bmi.n	800ea96 <_puts_r+0x9a>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	059b      	lsls	r3, r3, #22
 800ea8e:	d402      	bmi.n	800ea96 <_puts_r+0x9a>
 800ea90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea92:	f002 fb7b 	bl	801118c <__retarget_lock_release_recursive>
 800ea96:	4628      	mov	r0, r5
 800ea98:	bd70      	pop	{r4, r5, r6, pc}
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	da04      	bge.n	800eaa8 <_puts_r+0xac>
 800ea9e:	69a2      	ldr	r2, [r4, #24]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	dc06      	bgt.n	800eab2 <_puts_r+0xb6>
 800eaa4:	290a      	cmp	r1, #10
 800eaa6:	d004      	beq.n	800eab2 <_puts_r+0xb6>
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	1c5a      	adds	r2, r3, #1
 800eaac:	6022      	str	r2, [r4, #0]
 800eaae:	7019      	strb	r1, [r3, #0]
 800eab0:	e7c5      	b.n	800ea3e <_puts_r+0x42>
 800eab2:	4622      	mov	r2, r4
 800eab4:	4628      	mov	r0, r5
 800eab6:	f000 ff01 	bl	800f8bc <__swbuf_r>
 800eaba:	3001      	adds	r0, #1
 800eabc:	d1bf      	bne.n	800ea3e <_puts_r+0x42>
 800eabe:	e7df      	b.n	800ea80 <_puts_r+0x84>
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	250a      	movs	r5, #10
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	6022      	str	r2, [r4, #0]
 800eac8:	701d      	strb	r5, [r3, #0]
 800eaca:	e7db      	b.n	800ea84 <_puts_r+0x88>
 800eacc:	08014064 	.word	0x08014064
 800ead0:	08014084 	.word	0x08014084
 800ead4:	08014044 	.word	0x08014044

0800ead8 <puts>:
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <puts+0xc>)
 800eada:	4601      	mov	r1, r0
 800eadc:	6818      	ldr	r0, [r3, #0]
 800eade:	f7ff bf8d 	b.w	800e9fc <_puts_r>
 800eae2:	bf00      	nop
 800eae4:	2000004c 	.word	0x2000004c

0800eae8 <nanf>:
 800eae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eaf0 <nanf+0x8>
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	7fc00000 	.word	0x7fc00000

0800eaf4 <siprintf>:
 800eaf4:	b40e      	push	{r1, r2, r3}
 800eaf6:	b500      	push	{lr}
 800eaf8:	b09c      	sub	sp, #112	; 0x70
 800eafa:	ab1d      	add	r3, sp, #116	; 0x74
 800eafc:	9002      	str	r0, [sp, #8]
 800eafe:	9006      	str	r0, [sp, #24]
 800eb00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb04:	4809      	ldr	r0, [pc, #36]	; (800eb2c <siprintf+0x38>)
 800eb06:	9107      	str	r1, [sp, #28]
 800eb08:	9104      	str	r1, [sp, #16]
 800eb0a:	4909      	ldr	r1, [pc, #36]	; (800eb30 <siprintf+0x3c>)
 800eb0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb10:	9105      	str	r1, [sp, #20]
 800eb12:	6800      	ldr	r0, [r0, #0]
 800eb14:	9301      	str	r3, [sp, #4]
 800eb16:	a902      	add	r1, sp, #8
 800eb18:	f003 f9cc 	bl	8011eb4 <_svfiprintf_r>
 800eb1c:	9b02      	ldr	r3, [sp, #8]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	701a      	strb	r2, [r3, #0]
 800eb22:	b01c      	add	sp, #112	; 0x70
 800eb24:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb28:	b003      	add	sp, #12
 800eb2a:	4770      	bx	lr
 800eb2c:	2000004c 	.word	0x2000004c
 800eb30:	ffff0208 	.word	0xffff0208

0800eb34 <sulp>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	4604      	mov	r4, r0
 800eb38:	460d      	mov	r5, r1
 800eb3a:	ec45 4b10 	vmov	d0, r4, r5
 800eb3e:	4616      	mov	r6, r2
 800eb40:	f002 ff16 	bl	8011970 <__ulp>
 800eb44:	ec51 0b10 	vmov	r0, r1, d0
 800eb48:	b17e      	cbz	r6, 800eb6a <sulp+0x36>
 800eb4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	dd09      	ble.n	800eb6a <sulp+0x36>
 800eb56:	051b      	lsls	r3, r3, #20
 800eb58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eb5c:	2400      	movs	r4, #0
 800eb5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eb62:	4622      	mov	r2, r4
 800eb64:	462b      	mov	r3, r5
 800eb66:	f7f1 fd6f 	bl	8000648 <__aeabi_dmul>
 800eb6a:	bd70      	pop	{r4, r5, r6, pc}
 800eb6c:	0000      	movs	r0, r0
	...

0800eb70 <_strtod_l>:
 800eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	ed2d 8b02 	vpush	{d8}
 800eb78:	b09d      	sub	sp, #116	; 0x74
 800eb7a:	461f      	mov	r7, r3
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	9318      	str	r3, [sp, #96]	; 0x60
 800eb80:	4ba2      	ldr	r3, [pc, #648]	; (800ee0c <_strtod_l+0x29c>)
 800eb82:	9213      	str	r2, [sp, #76]	; 0x4c
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	9305      	str	r3, [sp, #20]
 800eb88:	4604      	mov	r4, r0
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	4688      	mov	r8, r1
 800eb8e:	f7f1 fb47 	bl	8000220 <strlen>
 800eb92:	f04f 0a00 	mov.w	sl, #0
 800eb96:	4605      	mov	r5, r0
 800eb98:	f04f 0b00 	mov.w	fp, #0
 800eb9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eba2:	781a      	ldrb	r2, [r3, #0]
 800eba4:	2a2b      	cmp	r2, #43	; 0x2b
 800eba6:	d04e      	beq.n	800ec46 <_strtod_l+0xd6>
 800eba8:	d83b      	bhi.n	800ec22 <_strtod_l+0xb2>
 800ebaa:	2a0d      	cmp	r2, #13
 800ebac:	d834      	bhi.n	800ec18 <_strtod_l+0xa8>
 800ebae:	2a08      	cmp	r2, #8
 800ebb0:	d834      	bhi.n	800ec1c <_strtod_l+0xac>
 800ebb2:	2a00      	cmp	r2, #0
 800ebb4:	d03e      	beq.n	800ec34 <_strtod_l+0xc4>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	930a      	str	r3, [sp, #40]	; 0x28
 800ebba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ebbc:	7833      	ldrb	r3, [r6, #0]
 800ebbe:	2b30      	cmp	r3, #48	; 0x30
 800ebc0:	f040 80b0 	bne.w	800ed24 <_strtod_l+0x1b4>
 800ebc4:	7873      	ldrb	r3, [r6, #1]
 800ebc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ebca:	2b58      	cmp	r3, #88	; 0x58
 800ebcc:	d168      	bne.n	800eca0 <_strtod_l+0x130>
 800ebce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	ab18      	add	r3, sp, #96	; 0x60
 800ebd4:	9702      	str	r7, [sp, #8]
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	4a8d      	ldr	r2, [pc, #564]	; (800ee10 <_strtod_l+0x2a0>)
 800ebda:	ab19      	add	r3, sp, #100	; 0x64
 800ebdc:	a917      	add	r1, sp, #92	; 0x5c
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f001 ffc6 	bl	8010b70 <__gethex>
 800ebe4:	f010 0707 	ands.w	r7, r0, #7
 800ebe8:	4605      	mov	r5, r0
 800ebea:	d005      	beq.n	800ebf8 <_strtod_l+0x88>
 800ebec:	2f06      	cmp	r7, #6
 800ebee:	d12c      	bne.n	800ec4a <_strtod_l+0xda>
 800ebf0:	3601      	adds	r6, #1
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ebf6:	930a      	str	r3, [sp, #40]	; 0x28
 800ebf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f040 8590 	bne.w	800f720 <_strtod_l+0xbb0>
 800ec00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec02:	b1eb      	cbz	r3, 800ec40 <_strtod_l+0xd0>
 800ec04:	4652      	mov	r2, sl
 800ec06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec0a:	ec43 2b10 	vmov	d0, r2, r3
 800ec0e:	b01d      	add	sp, #116	; 0x74
 800ec10:	ecbd 8b02 	vpop	{d8}
 800ec14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec18:	2a20      	cmp	r2, #32
 800ec1a:	d1cc      	bne.n	800ebb6 <_strtod_l+0x46>
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ec20:	e7be      	b.n	800eba0 <_strtod_l+0x30>
 800ec22:	2a2d      	cmp	r2, #45	; 0x2d
 800ec24:	d1c7      	bne.n	800ebb6 <_strtod_l+0x46>
 800ec26:	2201      	movs	r2, #1
 800ec28:	920a      	str	r2, [sp, #40]	; 0x28
 800ec2a:	1c5a      	adds	r2, r3, #1
 800ec2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec2e:	785b      	ldrb	r3, [r3, #1]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1c2      	bne.n	800ebba <_strtod_l+0x4a>
 800ec34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f040 856e 	bne.w	800f71c <_strtod_l+0xbac>
 800ec40:	4652      	mov	r2, sl
 800ec42:	465b      	mov	r3, fp
 800ec44:	e7e1      	b.n	800ec0a <_strtod_l+0x9a>
 800ec46:	2200      	movs	r2, #0
 800ec48:	e7ee      	b.n	800ec28 <_strtod_l+0xb8>
 800ec4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec4c:	b13a      	cbz	r2, 800ec5e <_strtod_l+0xee>
 800ec4e:	2135      	movs	r1, #53	; 0x35
 800ec50:	a81a      	add	r0, sp, #104	; 0x68
 800ec52:	f002 ff98 	bl	8011b86 <__copybits>
 800ec56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f002 fb57 	bl	801130c <_Bfree>
 800ec5e:	3f01      	subs	r7, #1
 800ec60:	2f04      	cmp	r7, #4
 800ec62:	d806      	bhi.n	800ec72 <_strtod_l+0x102>
 800ec64:	e8df f007 	tbb	[pc, r7]
 800ec68:	1714030a 	.word	0x1714030a
 800ec6c:	0a          	.byte	0x0a
 800ec6d:	00          	.byte	0x00
 800ec6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ec72:	0728      	lsls	r0, r5, #28
 800ec74:	d5c0      	bpl.n	800ebf8 <_strtod_l+0x88>
 800ec76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ec7a:	e7bd      	b.n	800ebf8 <_strtod_l+0x88>
 800ec7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ec80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ec86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ec8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ec8e:	e7f0      	b.n	800ec72 <_strtod_l+0x102>
 800ec90:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ee14 <_strtod_l+0x2a4>
 800ec94:	e7ed      	b.n	800ec72 <_strtod_l+0x102>
 800ec96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ec9a:	f04f 3aff 	mov.w	sl, #4294967295
 800ec9e:	e7e8      	b.n	800ec72 <_strtod_l+0x102>
 800eca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	9217      	str	r2, [sp, #92]	; 0x5c
 800eca6:	785b      	ldrb	r3, [r3, #1]
 800eca8:	2b30      	cmp	r3, #48	; 0x30
 800ecaa:	d0f9      	beq.n	800eca0 <_strtod_l+0x130>
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d0a3      	beq.n	800ebf8 <_strtod_l+0x88>
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f04f 0900 	mov.w	r9, #0
 800ecb6:	9304      	str	r3, [sp, #16]
 800ecb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecba:	9308      	str	r3, [sp, #32]
 800ecbc:	f8cd 901c 	str.w	r9, [sp, #28]
 800ecc0:	464f      	mov	r7, r9
 800ecc2:	220a      	movs	r2, #10
 800ecc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ecc6:	7806      	ldrb	r6, [r0, #0]
 800ecc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800eccc:	b2d9      	uxtb	r1, r3
 800ecce:	2909      	cmp	r1, #9
 800ecd0:	d92a      	bls.n	800ed28 <_strtod_l+0x1b8>
 800ecd2:	9905      	ldr	r1, [sp, #20]
 800ecd4:	462a      	mov	r2, r5
 800ecd6:	f003 fba2 	bl	801241e <strncmp>
 800ecda:	b398      	cbz	r0, 800ed44 <_strtod_l+0x1d4>
 800ecdc:	2000      	movs	r0, #0
 800ecde:	4632      	mov	r2, r6
 800ece0:	463d      	mov	r5, r7
 800ece2:	9005      	str	r0, [sp, #20]
 800ece4:	4603      	mov	r3, r0
 800ece6:	2a65      	cmp	r2, #101	; 0x65
 800ece8:	d001      	beq.n	800ecee <_strtod_l+0x17e>
 800ecea:	2a45      	cmp	r2, #69	; 0x45
 800ecec:	d118      	bne.n	800ed20 <_strtod_l+0x1b0>
 800ecee:	b91d      	cbnz	r5, 800ecf8 <_strtod_l+0x188>
 800ecf0:	9a04      	ldr	r2, [sp, #16]
 800ecf2:	4302      	orrs	r2, r0
 800ecf4:	d09e      	beq.n	800ec34 <_strtod_l+0xc4>
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ecfc:	f108 0201 	add.w	r2, r8, #1
 800ed00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed02:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ed06:	2a2b      	cmp	r2, #43	; 0x2b
 800ed08:	d075      	beq.n	800edf6 <_strtod_l+0x286>
 800ed0a:	2a2d      	cmp	r2, #45	; 0x2d
 800ed0c:	d07b      	beq.n	800ee06 <_strtod_l+0x296>
 800ed0e:	f04f 0c00 	mov.w	ip, #0
 800ed12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ed16:	2909      	cmp	r1, #9
 800ed18:	f240 8082 	bls.w	800ee20 <_strtod_l+0x2b0>
 800ed1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ed20:	2600      	movs	r6, #0
 800ed22:	e09d      	b.n	800ee60 <_strtod_l+0x2f0>
 800ed24:	2300      	movs	r3, #0
 800ed26:	e7c4      	b.n	800ecb2 <_strtod_l+0x142>
 800ed28:	2f08      	cmp	r7, #8
 800ed2a:	bfd8      	it	le
 800ed2c:	9907      	ldrle	r1, [sp, #28]
 800ed2e:	f100 0001 	add.w	r0, r0, #1
 800ed32:	bfda      	itte	le
 800ed34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed38:	9307      	strle	r3, [sp, #28]
 800ed3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ed3e:	3701      	adds	r7, #1
 800ed40:	9017      	str	r0, [sp, #92]	; 0x5c
 800ed42:	e7bf      	b.n	800ecc4 <_strtod_l+0x154>
 800ed44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed46:	195a      	adds	r2, r3, r5
 800ed48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed4a:	5d5a      	ldrb	r2, [r3, r5]
 800ed4c:	2f00      	cmp	r7, #0
 800ed4e:	d037      	beq.n	800edc0 <_strtod_l+0x250>
 800ed50:	9005      	str	r0, [sp, #20]
 800ed52:	463d      	mov	r5, r7
 800ed54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ed58:	2b09      	cmp	r3, #9
 800ed5a:	d912      	bls.n	800ed82 <_strtod_l+0x212>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e7c2      	b.n	800ece6 <_strtod_l+0x176>
 800ed60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed66:	785a      	ldrb	r2, [r3, #1]
 800ed68:	3001      	adds	r0, #1
 800ed6a:	2a30      	cmp	r2, #48	; 0x30
 800ed6c:	d0f8      	beq.n	800ed60 <_strtod_l+0x1f0>
 800ed6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ed72:	2b08      	cmp	r3, #8
 800ed74:	f200 84d9 	bhi.w	800f72a <_strtod_l+0xbba>
 800ed78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed7a:	9005      	str	r0, [sp, #20]
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	9308      	str	r3, [sp, #32]
 800ed80:	4605      	mov	r5, r0
 800ed82:	3a30      	subs	r2, #48	; 0x30
 800ed84:	f100 0301 	add.w	r3, r0, #1
 800ed88:	d014      	beq.n	800edb4 <_strtod_l+0x244>
 800ed8a:	9905      	ldr	r1, [sp, #20]
 800ed8c:	4419      	add	r1, r3
 800ed8e:	9105      	str	r1, [sp, #20]
 800ed90:	462b      	mov	r3, r5
 800ed92:	eb00 0e05 	add.w	lr, r0, r5
 800ed96:	210a      	movs	r1, #10
 800ed98:	4573      	cmp	r3, lr
 800ed9a:	d113      	bne.n	800edc4 <_strtod_l+0x254>
 800ed9c:	182b      	adds	r3, r5, r0
 800ed9e:	2b08      	cmp	r3, #8
 800eda0:	f105 0501 	add.w	r5, r5, #1
 800eda4:	4405      	add	r5, r0
 800eda6:	dc1c      	bgt.n	800ede2 <_strtod_l+0x272>
 800eda8:	9907      	ldr	r1, [sp, #28]
 800edaa:	230a      	movs	r3, #10
 800edac:	fb03 2301 	mla	r3, r3, r1, r2
 800edb0:	9307      	str	r3, [sp, #28]
 800edb2:	2300      	movs	r3, #0
 800edb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800edb6:	1c51      	adds	r1, r2, #1
 800edb8:	9117      	str	r1, [sp, #92]	; 0x5c
 800edba:	7852      	ldrb	r2, [r2, #1]
 800edbc:	4618      	mov	r0, r3
 800edbe:	e7c9      	b.n	800ed54 <_strtod_l+0x1e4>
 800edc0:	4638      	mov	r0, r7
 800edc2:	e7d2      	b.n	800ed6a <_strtod_l+0x1fa>
 800edc4:	2b08      	cmp	r3, #8
 800edc6:	dc04      	bgt.n	800edd2 <_strtod_l+0x262>
 800edc8:	9e07      	ldr	r6, [sp, #28]
 800edca:	434e      	muls	r6, r1
 800edcc:	9607      	str	r6, [sp, #28]
 800edce:	3301      	adds	r3, #1
 800edd0:	e7e2      	b.n	800ed98 <_strtod_l+0x228>
 800edd2:	f103 0c01 	add.w	ip, r3, #1
 800edd6:	f1bc 0f10 	cmp.w	ip, #16
 800edda:	bfd8      	it	le
 800eddc:	fb01 f909 	mulle.w	r9, r1, r9
 800ede0:	e7f5      	b.n	800edce <_strtod_l+0x25e>
 800ede2:	2d10      	cmp	r5, #16
 800ede4:	bfdc      	itt	le
 800ede6:	230a      	movle	r3, #10
 800ede8:	fb03 2909 	mlale	r9, r3, r9, r2
 800edec:	e7e1      	b.n	800edb2 <_strtod_l+0x242>
 800edee:	2300      	movs	r3, #0
 800edf0:	9305      	str	r3, [sp, #20]
 800edf2:	2301      	movs	r3, #1
 800edf4:	e77c      	b.n	800ecf0 <_strtod_l+0x180>
 800edf6:	f04f 0c00 	mov.w	ip, #0
 800edfa:	f108 0202 	add.w	r2, r8, #2
 800edfe:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee00:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ee04:	e785      	b.n	800ed12 <_strtod_l+0x1a2>
 800ee06:	f04f 0c01 	mov.w	ip, #1
 800ee0a:	e7f6      	b.n	800edfa <_strtod_l+0x28a>
 800ee0c:	0801410c 	.word	0x0801410c
 800ee10:	08013e60 	.word	0x08013e60
 800ee14:	7ff00000 	.word	0x7ff00000
 800ee18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee1a:	1c51      	adds	r1, r2, #1
 800ee1c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee1e:	7852      	ldrb	r2, [r2, #1]
 800ee20:	2a30      	cmp	r2, #48	; 0x30
 800ee22:	d0f9      	beq.n	800ee18 <_strtod_l+0x2a8>
 800ee24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ee28:	2908      	cmp	r1, #8
 800ee2a:	f63f af79 	bhi.w	800ed20 <_strtod_l+0x1b0>
 800ee2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ee32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee34:	9206      	str	r2, [sp, #24]
 800ee36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee38:	1c51      	adds	r1, r2, #1
 800ee3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee3c:	7852      	ldrb	r2, [r2, #1]
 800ee3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ee42:	2e09      	cmp	r6, #9
 800ee44:	d937      	bls.n	800eeb6 <_strtod_l+0x346>
 800ee46:	9e06      	ldr	r6, [sp, #24]
 800ee48:	1b89      	subs	r1, r1, r6
 800ee4a:	2908      	cmp	r1, #8
 800ee4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ee50:	dc02      	bgt.n	800ee58 <_strtod_l+0x2e8>
 800ee52:	4576      	cmp	r6, lr
 800ee54:	bfa8      	it	ge
 800ee56:	4676      	movge	r6, lr
 800ee58:	f1bc 0f00 	cmp.w	ip, #0
 800ee5c:	d000      	beq.n	800ee60 <_strtod_l+0x2f0>
 800ee5e:	4276      	negs	r6, r6
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	d14d      	bne.n	800ef00 <_strtod_l+0x390>
 800ee64:	9904      	ldr	r1, [sp, #16]
 800ee66:	4301      	orrs	r1, r0
 800ee68:	f47f aec6 	bne.w	800ebf8 <_strtod_l+0x88>
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f47f aee1 	bne.w	800ec34 <_strtod_l+0xc4>
 800ee72:	2a69      	cmp	r2, #105	; 0x69
 800ee74:	d027      	beq.n	800eec6 <_strtod_l+0x356>
 800ee76:	dc24      	bgt.n	800eec2 <_strtod_l+0x352>
 800ee78:	2a49      	cmp	r2, #73	; 0x49
 800ee7a:	d024      	beq.n	800eec6 <_strtod_l+0x356>
 800ee7c:	2a4e      	cmp	r2, #78	; 0x4e
 800ee7e:	f47f aed9 	bne.w	800ec34 <_strtod_l+0xc4>
 800ee82:	499f      	ldr	r1, [pc, #636]	; (800f100 <_strtod_l+0x590>)
 800ee84:	a817      	add	r0, sp, #92	; 0x5c
 800ee86:	f002 f8cb 	bl	8011020 <__match>
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	f43f aed2 	beq.w	800ec34 <_strtod_l+0xc4>
 800ee90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	2b28      	cmp	r3, #40	; 0x28
 800ee96:	d12d      	bne.n	800eef4 <_strtod_l+0x384>
 800ee98:	499a      	ldr	r1, [pc, #616]	; (800f104 <_strtod_l+0x594>)
 800ee9a:	aa1a      	add	r2, sp, #104	; 0x68
 800ee9c:	a817      	add	r0, sp, #92	; 0x5c
 800ee9e:	f002 f8d3 	bl	8011048 <__hexnan>
 800eea2:	2805      	cmp	r0, #5
 800eea4:	d126      	bne.n	800eef4 <_strtod_l+0x384>
 800eea6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eea8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800eeac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eeb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eeb4:	e6a0      	b.n	800ebf8 <_strtod_l+0x88>
 800eeb6:	210a      	movs	r1, #10
 800eeb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800eebc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800eec0:	e7b9      	b.n	800ee36 <_strtod_l+0x2c6>
 800eec2:	2a6e      	cmp	r2, #110	; 0x6e
 800eec4:	e7db      	b.n	800ee7e <_strtod_l+0x30e>
 800eec6:	4990      	ldr	r1, [pc, #576]	; (800f108 <_strtod_l+0x598>)
 800eec8:	a817      	add	r0, sp, #92	; 0x5c
 800eeca:	f002 f8a9 	bl	8011020 <__match>
 800eece:	2800      	cmp	r0, #0
 800eed0:	f43f aeb0 	beq.w	800ec34 <_strtod_l+0xc4>
 800eed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eed6:	498d      	ldr	r1, [pc, #564]	; (800f10c <_strtod_l+0x59c>)
 800eed8:	3b01      	subs	r3, #1
 800eeda:	a817      	add	r0, sp, #92	; 0x5c
 800eedc:	9317      	str	r3, [sp, #92]	; 0x5c
 800eede:	f002 f89f 	bl	8011020 <__match>
 800eee2:	b910      	cbnz	r0, 800eeea <_strtod_l+0x37a>
 800eee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eee6:	3301      	adds	r3, #1
 800eee8:	9317      	str	r3, [sp, #92]	; 0x5c
 800eeea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f11c <_strtod_l+0x5ac>
 800eeee:	f04f 0a00 	mov.w	sl, #0
 800eef2:	e681      	b.n	800ebf8 <_strtod_l+0x88>
 800eef4:	4886      	ldr	r0, [pc, #536]	; (800f110 <_strtod_l+0x5a0>)
 800eef6:	f003 fa37 	bl	8012368 <nan>
 800eefa:	ec5b ab10 	vmov	sl, fp, d0
 800eefe:	e67b      	b.n	800ebf8 <_strtod_l+0x88>
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	9807      	ldr	r0, [sp, #28]
 800ef04:	1af3      	subs	r3, r6, r3
 800ef06:	2f00      	cmp	r7, #0
 800ef08:	bf08      	it	eq
 800ef0a:	462f      	moveq	r7, r5
 800ef0c:	2d10      	cmp	r5, #16
 800ef0e:	9306      	str	r3, [sp, #24]
 800ef10:	46a8      	mov	r8, r5
 800ef12:	bfa8      	it	ge
 800ef14:	f04f 0810 	movge.w	r8, #16
 800ef18:	f7f1 fb1c 	bl	8000554 <__aeabi_ui2d>
 800ef1c:	2d09      	cmp	r5, #9
 800ef1e:	4682      	mov	sl, r0
 800ef20:	468b      	mov	fp, r1
 800ef22:	dd13      	ble.n	800ef4c <_strtod_l+0x3dc>
 800ef24:	4b7b      	ldr	r3, [pc, #492]	; (800f114 <_strtod_l+0x5a4>)
 800ef26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ef2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ef2e:	f7f1 fb8b 	bl	8000648 <__aeabi_dmul>
 800ef32:	4682      	mov	sl, r0
 800ef34:	4648      	mov	r0, r9
 800ef36:	468b      	mov	fp, r1
 800ef38:	f7f1 fb0c 	bl	8000554 <__aeabi_ui2d>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4650      	mov	r0, sl
 800ef42:	4659      	mov	r1, fp
 800ef44:	f7f1 f9ca 	bl	80002dc <__adddf3>
 800ef48:	4682      	mov	sl, r0
 800ef4a:	468b      	mov	fp, r1
 800ef4c:	2d0f      	cmp	r5, #15
 800ef4e:	dc38      	bgt.n	800efc2 <_strtod_l+0x452>
 800ef50:	9b06      	ldr	r3, [sp, #24]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f43f ae50 	beq.w	800ebf8 <_strtod_l+0x88>
 800ef58:	dd24      	ble.n	800efa4 <_strtod_l+0x434>
 800ef5a:	2b16      	cmp	r3, #22
 800ef5c:	dc0b      	bgt.n	800ef76 <_strtod_l+0x406>
 800ef5e:	496d      	ldr	r1, [pc, #436]	; (800f114 <_strtod_l+0x5a4>)
 800ef60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef68:	4652      	mov	r2, sl
 800ef6a:	465b      	mov	r3, fp
 800ef6c:	f7f1 fb6c 	bl	8000648 <__aeabi_dmul>
 800ef70:	4682      	mov	sl, r0
 800ef72:	468b      	mov	fp, r1
 800ef74:	e640      	b.n	800ebf8 <_strtod_l+0x88>
 800ef76:	9a06      	ldr	r2, [sp, #24]
 800ef78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	db20      	blt.n	800efc2 <_strtod_l+0x452>
 800ef80:	4c64      	ldr	r4, [pc, #400]	; (800f114 <_strtod_l+0x5a4>)
 800ef82:	f1c5 050f 	rsb	r5, r5, #15
 800ef86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef8a:	4652      	mov	r2, sl
 800ef8c:	465b      	mov	r3, fp
 800ef8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef92:	f7f1 fb59 	bl	8000648 <__aeabi_dmul>
 800ef96:	9b06      	ldr	r3, [sp, #24]
 800ef98:	1b5d      	subs	r5, r3, r5
 800ef9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800efa2:	e7e3      	b.n	800ef6c <_strtod_l+0x3fc>
 800efa4:	9b06      	ldr	r3, [sp, #24]
 800efa6:	3316      	adds	r3, #22
 800efa8:	db0b      	blt.n	800efc2 <_strtod_l+0x452>
 800efaa:	9b05      	ldr	r3, [sp, #20]
 800efac:	1b9e      	subs	r6, r3, r6
 800efae:	4b59      	ldr	r3, [pc, #356]	; (800f114 <_strtod_l+0x5a4>)
 800efb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800efb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800efb8:	4650      	mov	r0, sl
 800efba:	4659      	mov	r1, fp
 800efbc:	f7f1 fc6e 	bl	800089c <__aeabi_ddiv>
 800efc0:	e7d6      	b.n	800ef70 <_strtod_l+0x400>
 800efc2:	9b06      	ldr	r3, [sp, #24]
 800efc4:	eba5 0808 	sub.w	r8, r5, r8
 800efc8:	4498      	add	r8, r3
 800efca:	f1b8 0f00 	cmp.w	r8, #0
 800efce:	dd74      	ble.n	800f0ba <_strtod_l+0x54a>
 800efd0:	f018 030f 	ands.w	r3, r8, #15
 800efd4:	d00a      	beq.n	800efec <_strtod_l+0x47c>
 800efd6:	494f      	ldr	r1, [pc, #316]	; (800f114 <_strtod_l+0x5a4>)
 800efd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efdc:	4652      	mov	r2, sl
 800efde:	465b      	mov	r3, fp
 800efe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efe4:	f7f1 fb30 	bl	8000648 <__aeabi_dmul>
 800efe8:	4682      	mov	sl, r0
 800efea:	468b      	mov	fp, r1
 800efec:	f038 080f 	bics.w	r8, r8, #15
 800eff0:	d04f      	beq.n	800f092 <_strtod_l+0x522>
 800eff2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800eff6:	dd22      	ble.n	800f03e <_strtod_l+0x4ce>
 800eff8:	2500      	movs	r5, #0
 800effa:	462e      	mov	r6, r5
 800effc:	9507      	str	r5, [sp, #28]
 800effe:	9505      	str	r5, [sp, #20]
 800f000:	2322      	movs	r3, #34	; 0x22
 800f002:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f11c <_strtod_l+0x5ac>
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	f04f 0a00 	mov.w	sl, #0
 800f00c:	9b07      	ldr	r3, [sp, #28]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f43f adf2 	beq.w	800ebf8 <_strtod_l+0x88>
 800f014:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f016:	4620      	mov	r0, r4
 800f018:	f002 f978 	bl	801130c <_Bfree>
 800f01c:	9905      	ldr	r1, [sp, #20]
 800f01e:	4620      	mov	r0, r4
 800f020:	f002 f974 	bl	801130c <_Bfree>
 800f024:	4631      	mov	r1, r6
 800f026:	4620      	mov	r0, r4
 800f028:	f002 f970 	bl	801130c <_Bfree>
 800f02c:	9907      	ldr	r1, [sp, #28]
 800f02e:	4620      	mov	r0, r4
 800f030:	f002 f96c 	bl	801130c <_Bfree>
 800f034:	4629      	mov	r1, r5
 800f036:	4620      	mov	r0, r4
 800f038:	f002 f968 	bl	801130c <_Bfree>
 800f03c:	e5dc      	b.n	800ebf8 <_strtod_l+0x88>
 800f03e:	4b36      	ldr	r3, [pc, #216]	; (800f118 <_strtod_l+0x5a8>)
 800f040:	9304      	str	r3, [sp, #16]
 800f042:	2300      	movs	r3, #0
 800f044:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f048:	4650      	mov	r0, sl
 800f04a:	4659      	mov	r1, fp
 800f04c:	4699      	mov	r9, r3
 800f04e:	f1b8 0f01 	cmp.w	r8, #1
 800f052:	dc21      	bgt.n	800f098 <_strtod_l+0x528>
 800f054:	b10b      	cbz	r3, 800f05a <_strtod_l+0x4ea>
 800f056:	4682      	mov	sl, r0
 800f058:	468b      	mov	fp, r1
 800f05a:	4b2f      	ldr	r3, [pc, #188]	; (800f118 <_strtod_l+0x5a8>)
 800f05c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f060:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f064:	4652      	mov	r2, sl
 800f066:	465b      	mov	r3, fp
 800f068:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f06c:	f7f1 faec 	bl	8000648 <__aeabi_dmul>
 800f070:	4b2a      	ldr	r3, [pc, #168]	; (800f11c <_strtod_l+0x5ac>)
 800f072:	460a      	mov	r2, r1
 800f074:	400b      	ands	r3, r1
 800f076:	492a      	ldr	r1, [pc, #168]	; (800f120 <_strtod_l+0x5b0>)
 800f078:	428b      	cmp	r3, r1
 800f07a:	4682      	mov	sl, r0
 800f07c:	d8bc      	bhi.n	800eff8 <_strtod_l+0x488>
 800f07e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f082:	428b      	cmp	r3, r1
 800f084:	bf86      	itte	hi
 800f086:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f124 <_strtod_l+0x5b4>
 800f08a:	f04f 3aff 	movhi.w	sl, #4294967295
 800f08e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f092:	2300      	movs	r3, #0
 800f094:	9304      	str	r3, [sp, #16]
 800f096:	e084      	b.n	800f1a2 <_strtod_l+0x632>
 800f098:	f018 0f01 	tst.w	r8, #1
 800f09c:	d005      	beq.n	800f0aa <_strtod_l+0x53a>
 800f09e:	9b04      	ldr	r3, [sp, #16]
 800f0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a4:	f7f1 fad0 	bl	8000648 <__aeabi_dmul>
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	9a04      	ldr	r2, [sp, #16]
 800f0ac:	3208      	adds	r2, #8
 800f0ae:	f109 0901 	add.w	r9, r9, #1
 800f0b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f0b6:	9204      	str	r2, [sp, #16]
 800f0b8:	e7c9      	b.n	800f04e <_strtod_l+0x4de>
 800f0ba:	d0ea      	beq.n	800f092 <_strtod_l+0x522>
 800f0bc:	f1c8 0800 	rsb	r8, r8, #0
 800f0c0:	f018 020f 	ands.w	r2, r8, #15
 800f0c4:	d00a      	beq.n	800f0dc <_strtod_l+0x56c>
 800f0c6:	4b13      	ldr	r3, [pc, #76]	; (800f114 <_strtod_l+0x5a4>)
 800f0c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0cc:	4650      	mov	r0, sl
 800f0ce:	4659      	mov	r1, fp
 800f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d4:	f7f1 fbe2 	bl	800089c <__aeabi_ddiv>
 800f0d8:	4682      	mov	sl, r0
 800f0da:	468b      	mov	fp, r1
 800f0dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f0e0:	d0d7      	beq.n	800f092 <_strtod_l+0x522>
 800f0e2:	f1b8 0f1f 	cmp.w	r8, #31
 800f0e6:	dd1f      	ble.n	800f128 <_strtod_l+0x5b8>
 800f0e8:	2500      	movs	r5, #0
 800f0ea:	462e      	mov	r6, r5
 800f0ec:	9507      	str	r5, [sp, #28]
 800f0ee:	9505      	str	r5, [sp, #20]
 800f0f0:	2322      	movs	r3, #34	; 0x22
 800f0f2:	f04f 0a00 	mov.w	sl, #0
 800f0f6:	f04f 0b00 	mov.w	fp, #0
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	e786      	b.n	800f00c <_strtod_l+0x49c>
 800f0fe:	bf00      	nop
 800f100:	08013e31 	.word	0x08013e31
 800f104:	08013e74 	.word	0x08013e74
 800f108:	08013e29 	.word	0x08013e29
 800f10c:	08013fb4 	.word	0x08013fb4
 800f110:	080142c8 	.word	0x080142c8
 800f114:	080141a8 	.word	0x080141a8
 800f118:	08014180 	.word	0x08014180
 800f11c:	7ff00000 	.word	0x7ff00000
 800f120:	7ca00000 	.word	0x7ca00000
 800f124:	7fefffff 	.word	0x7fefffff
 800f128:	f018 0310 	ands.w	r3, r8, #16
 800f12c:	bf18      	it	ne
 800f12e:	236a      	movne	r3, #106	; 0x6a
 800f130:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f4e0 <_strtod_l+0x970>
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	4650      	mov	r0, sl
 800f138:	4659      	mov	r1, fp
 800f13a:	2300      	movs	r3, #0
 800f13c:	f018 0f01 	tst.w	r8, #1
 800f140:	d004      	beq.n	800f14c <_strtod_l+0x5dc>
 800f142:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f146:	f7f1 fa7f 	bl	8000648 <__aeabi_dmul>
 800f14a:	2301      	movs	r3, #1
 800f14c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f150:	f109 0908 	add.w	r9, r9, #8
 800f154:	d1f2      	bne.n	800f13c <_strtod_l+0x5cc>
 800f156:	b10b      	cbz	r3, 800f15c <_strtod_l+0x5ec>
 800f158:	4682      	mov	sl, r0
 800f15a:	468b      	mov	fp, r1
 800f15c:	9b04      	ldr	r3, [sp, #16]
 800f15e:	b1c3      	cbz	r3, 800f192 <_strtod_l+0x622>
 800f160:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f164:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f168:	2b00      	cmp	r3, #0
 800f16a:	4659      	mov	r1, fp
 800f16c:	dd11      	ble.n	800f192 <_strtod_l+0x622>
 800f16e:	2b1f      	cmp	r3, #31
 800f170:	f340 8124 	ble.w	800f3bc <_strtod_l+0x84c>
 800f174:	2b34      	cmp	r3, #52	; 0x34
 800f176:	bfde      	ittt	le
 800f178:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f17c:	f04f 33ff 	movle.w	r3, #4294967295
 800f180:	fa03 f202 	lslle.w	r2, r3, r2
 800f184:	f04f 0a00 	mov.w	sl, #0
 800f188:	bfcc      	ite	gt
 800f18a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f18e:	ea02 0b01 	andle.w	fp, r2, r1
 800f192:	2200      	movs	r2, #0
 800f194:	2300      	movs	r3, #0
 800f196:	4650      	mov	r0, sl
 800f198:	4659      	mov	r1, fp
 800f19a:	f7f1 fcbd 	bl	8000b18 <__aeabi_dcmpeq>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d1a2      	bne.n	800f0e8 <_strtod_l+0x578>
 800f1a2:	9b07      	ldr	r3, [sp, #28]
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	9908      	ldr	r1, [sp, #32]
 800f1a8:	462b      	mov	r3, r5
 800f1aa:	463a      	mov	r2, r7
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f002 f915 	bl	80113dc <__s2b>
 800f1b2:	9007      	str	r0, [sp, #28]
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	f43f af1f 	beq.w	800eff8 <_strtod_l+0x488>
 800f1ba:	9b05      	ldr	r3, [sp, #20]
 800f1bc:	1b9e      	subs	r6, r3, r6
 800f1be:	9b06      	ldr	r3, [sp, #24]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	bfb4      	ite	lt
 800f1c4:	4633      	movlt	r3, r6
 800f1c6:	2300      	movge	r3, #0
 800f1c8:	930c      	str	r3, [sp, #48]	; 0x30
 800f1ca:	9b06      	ldr	r3, [sp, #24]
 800f1cc:	2500      	movs	r5, #0
 800f1ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f1d2:	9312      	str	r3, [sp, #72]	; 0x48
 800f1d4:	462e      	mov	r6, r5
 800f1d6:	9b07      	ldr	r3, [sp, #28]
 800f1d8:	4620      	mov	r0, r4
 800f1da:	6859      	ldr	r1, [r3, #4]
 800f1dc:	f002 f856 	bl	801128c <_Balloc>
 800f1e0:	9005      	str	r0, [sp, #20]
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	f43f af0c 	beq.w	800f000 <_strtod_l+0x490>
 800f1e8:	9b07      	ldr	r3, [sp, #28]
 800f1ea:	691a      	ldr	r2, [r3, #16]
 800f1ec:	3202      	adds	r2, #2
 800f1ee:	f103 010c 	add.w	r1, r3, #12
 800f1f2:	0092      	lsls	r2, r2, #2
 800f1f4:	300c      	adds	r0, #12
 800f1f6:	f7fe fd59 	bl	800dcac <memcpy>
 800f1fa:	ec4b ab10 	vmov	d0, sl, fp
 800f1fe:	aa1a      	add	r2, sp, #104	; 0x68
 800f200:	a919      	add	r1, sp, #100	; 0x64
 800f202:	4620      	mov	r0, r4
 800f204:	f002 fc30 	bl	8011a68 <__d2b>
 800f208:	ec4b ab18 	vmov	d8, sl, fp
 800f20c:	9018      	str	r0, [sp, #96]	; 0x60
 800f20e:	2800      	cmp	r0, #0
 800f210:	f43f aef6 	beq.w	800f000 <_strtod_l+0x490>
 800f214:	2101      	movs	r1, #1
 800f216:	4620      	mov	r0, r4
 800f218:	f002 f97a 	bl	8011510 <__i2b>
 800f21c:	4606      	mov	r6, r0
 800f21e:	2800      	cmp	r0, #0
 800f220:	f43f aeee 	beq.w	800f000 <_strtod_l+0x490>
 800f224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f226:	9904      	ldr	r1, [sp, #16]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	bfab      	itete	ge
 800f22c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f22e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f230:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f232:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f236:	bfac      	ite	ge
 800f238:	eb03 0902 	addge.w	r9, r3, r2
 800f23c:	1ad7      	sublt	r7, r2, r3
 800f23e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f240:	eba3 0801 	sub.w	r8, r3, r1
 800f244:	4490      	add	r8, r2
 800f246:	4ba1      	ldr	r3, [pc, #644]	; (800f4cc <_strtod_l+0x95c>)
 800f248:	f108 38ff 	add.w	r8, r8, #4294967295
 800f24c:	4598      	cmp	r8, r3
 800f24e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f252:	f280 80c7 	bge.w	800f3e4 <_strtod_l+0x874>
 800f256:	eba3 0308 	sub.w	r3, r3, r8
 800f25a:	2b1f      	cmp	r3, #31
 800f25c:	eba2 0203 	sub.w	r2, r2, r3
 800f260:	f04f 0101 	mov.w	r1, #1
 800f264:	f300 80b1 	bgt.w	800f3ca <_strtod_l+0x85a>
 800f268:	fa01 f303 	lsl.w	r3, r1, r3
 800f26c:	930d      	str	r3, [sp, #52]	; 0x34
 800f26e:	2300      	movs	r3, #0
 800f270:	9308      	str	r3, [sp, #32]
 800f272:	eb09 0802 	add.w	r8, r9, r2
 800f276:	9b04      	ldr	r3, [sp, #16]
 800f278:	45c1      	cmp	r9, r8
 800f27a:	4417      	add	r7, r2
 800f27c:	441f      	add	r7, r3
 800f27e:	464b      	mov	r3, r9
 800f280:	bfa8      	it	ge
 800f282:	4643      	movge	r3, r8
 800f284:	42bb      	cmp	r3, r7
 800f286:	bfa8      	it	ge
 800f288:	463b      	movge	r3, r7
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	bfc2      	ittt	gt
 800f28e:	eba8 0803 	subgt.w	r8, r8, r3
 800f292:	1aff      	subgt	r7, r7, r3
 800f294:	eba9 0903 	subgt.w	r9, r9, r3
 800f298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	dd17      	ble.n	800f2ce <_strtod_l+0x75e>
 800f29e:	4631      	mov	r1, r6
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f002 f9f4 	bl	8011690 <__pow5mult>
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f43f aea8 	beq.w	800f000 <_strtod_l+0x490>
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f002 f941 	bl	801153c <__multiply>
 800f2ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	f43f ae9f 	beq.w	800f000 <_strtod_l+0x490>
 800f2c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f002 f821 	bl	801130c <_Bfree>
 800f2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2cc:	9318      	str	r3, [sp, #96]	; 0x60
 800f2ce:	f1b8 0f00 	cmp.w	r8, #0
 800f2d2:	f300 808c 	bgt.w	800f3ee <_strtod_l+0x87e>
 800f2d6:	9b06      	ldr	r3, [sp, #24]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	dd08      	ble.n	800f2ee <_strtod_l+0x77e>
 800f2dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2de:	9905      	ldr	r1, [sp, #20]
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f002 f9d5 	bl	8011690 <__pow5mult>
 800f2e6:	9005      	str	r0, [sp, #20]
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	f43f ae89 	beq.w	800f000 <_strtod_l+0x490>
 800f2ee:	2f00      	cmp	r7, #0
 800f2f0:	dd08      	ble.n	800f304 <_strtod_l+0x794>
 800f2f2:	9905      	ldr	r1, [sp, #20]
 800f2f4:	463a      	mov	r2, r7
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f002 fa24 	bl	8011744 <__lshift>
 800f2fc:	9005      	str	r0, [sp, #20]
 800f2fe:	2800      	cmp	r0, #0
 800f300:	f43f ae7e 	beq.w	800f000 <_strtod_l+0x490>
 800f304:	f1b9 0f00 	cmp.w	r9, #0
 800f308:	dd08      	ble.n	800f31c <_strtod_l+0x7ac>
 800f30a:	4631      	mov	r1, r6
 800f30c:	464a      	mov	r2, r9
 800f30e:	4620      	mov	r0, r4
 800f310:	f002 fa18 	bl	8011744 <__lshift>
 800f314:	4606      	mov	r6, r0
 800f316:	2800      	cmp	r0, #0
 800f318:	f43f ae72 	beq.w	800f000 <_strtod_l+0x490>
 800f31c:	9a05      	ldr	r2, [sp, #20]
 800f31e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f320:	4620      	mov	r0, r4
 800f322:	f002 fa9b 	bl	801185c <__mdiff>
 800f326:	4605      	mov	r5, r0
 800f328:	2800      	cmp	r0, #0
 800f32a:	f43f ae69 	beq.w	800f000 <_strtod_l+0x490>
 800f32e:	68c3      	ldr	r3, [r0, #12]
 800f330:	930b      	str	r3, [sp, #44]	; 0x2c
 800f332:	2300      	movs	r3, #0
 800f334:	60c3      	str	r3, [r0, #12]
 800f336:	4631      	mov	r1, r6
 800f338:	f002 fa74 	bl	8011824 <__mcmp>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	da60      	bge.n	800f402 <_strtod_l+0x892>
 800f340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f342:	ea53 030a 	orrs.w	r3, r3, sl
 800f346:	f040 8082 	bne.w	800f44e <_strtod_l+0x8de>
 800f34a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d17d      	bne.n	800f44e <_strtod_l+0x8de>
 800f352:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f356:	0d1b      	lsrs	r3, r3, #20
 800f358:	051b      	lsls	r3, r3, #20
 800f35a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f35e:	d976      	bls.n	800f44e <_strtod_l+0x8de>
 800f360:	696b      	ldr	r3, [r5, #20]
 800f362:	b913      	cbnz	r3, 800f36a <_strtod_l+0x7fa>
 800f364:	692b      	ldr	r3, [r5, #16]
 800f366:	2b01      	cmp	r3, #1
 800f368:	dd71      	ble.n	800f44e <_strtod_l+0x8de>
 800f36a:	4629      	mov	r1, r5
 800f36c:	2201      	movs	r2, #1
 800f36e:	4620      	mov	r0, r4
 800f370:	f002 f9e8 	bl	8011744 <__lshift>
 800f374:	4631      	mov	r1, r6
 800f376:	4605      	mov	r5, r0
 800f378:	f002 fa54 	bl	8011824 <__mcmp>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	dd66      	ble.n	800f44e <_strtod_l+0x8de>
 800f380:	9904      	ldr	r1, [sp, #16]
 800f382:	4a53      	ldr	r2, [pc, #332]	; (800f4d0 <_strtod_l+0x960>)
 800f384:	465b      	mov	r3, fp
 800f386:	2900      	cmp	r1, #0
 800f388:	f000 8081 	beq.w	800f48e <_strtod_l+0x91e>
 800f38c:	ea02 010b 	and.w	r1, r2, fp
 800f390:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f394:	dc7b      	bgt.n	800f48e <_strtod_l+0x91e>
 800f396:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f39a:	f77f aea9 	ble.w	800f0f0 <_strtod_l+0x580>
 800f39e:	4b4d      	ldr	r3, [pc, #308]	; (800f4d4 <_strtod_l+0x964>)
 800f3a0:	4650      	mov	r0, sl
 800f3a2:	4659      	mov	r1, fp
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f7f1 f94f 	bl	8000648 <__aeabi_dmul>
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	4303      	orrs	r3, r0
 800f3ae:	bf08      	it	eq
 800f3b0:	2322      	moveq	r3, #34	; 0x22
 800f3b2:	4682      	mov	sl, r0
 800f3b4:	468b      	mov	fp, r1
 800f3b6:	bf08      	it	eq
 800f3b8:	6023      	streq	r3, [r4, #0]
 800f3ba:	e62b      	b.n	800f014 <_strtod_l+0x4a4>
 800f3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f3c4:	ea03 0a0a 	and.w	sl, r3, sl
 800f3c8:	e6e3      	b.n	800f192 <_strtod_l+0x622>
 800f3ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f3ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f3d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f3d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f3da:	fa01 f308 	lsl.w	r3, r1, r8
 800f3de:	9308      	str	r3, [sp, #32]
 800f3e0:	910d      	str	r1, [sp, #52]	; 0x34
 800f3e2:	e746      	b.n	800f272 <_strtod_l+0x702>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	9308      	str	r3, [sp, #32]
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800f3ec:	e741      	b.n	800f272 <_strtod_l+0x702>
 800f3ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3f0:	4642      	mov	r2, r8
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f002 f9a6 	bl	8011744 <__lshift>
 800f3f8:	9018      	str	r0, [sp, #96]	; 0x60
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	f47f af6b 	bne.w	800f2d6 <_strtod_l+0x766>
 800f400:	e5fe      	b.n	800f000 <_strtod_l+0x490>
 800f402:	465f      	mov	r7, fp
 800f404:	d16e      	bne.n	800f4e4 <_strtod_l+0x974>
 800f406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f408:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f40c:	b342      	cbz	r2, 800f460 <_strtod_l+0x8f0>
 800f40e:	4a32      	ldr	r2, [pc, #200]	; (800f4d8 <_strtod_l+0x968>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d128      	bne.n	800f466 <_strtod_l+0x8f6>
 800f414:	9b04      	ldr	r3, [sp, #16]
 800f416:	4651      	mov	r1, sl
 800f418:	b1eb      	cbz	r3, 800f456 <_strtod_l+0x8e6>
 800f41a:	4b2d      	ldr	r3, [pc, #180]	; (800f4d0 <_strtod_l+0x960>)
 800f41c:	403b      	ands	r3, r7
 800f41e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f422:	f04f 32ff 	mov.w	r2, #4294967295
 800f426:	d819      	bhi.n	800f45c <_strtod_l+0x8ec>
 800f428:	0d1b      	lsrs	r3, r3, #20
 800f42a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f42e:	fa02 f303 	lsl.w	r3, r2, r3
 800f432:	4299      	cmp	r1, r3
 800f434:	d117      	bne.n	800f466 <_strtod_l+0x8f6>
 800f436:	4b29      	ldr	r3, [pc, #164]	; (800f4dc <_strtod_l+0x96c>)
 800f438:	429f      	cmp	r7, r3
 800f43a:	d102      	bne.n	800f442 <_strtod_l+0x8d2>
 800f43c:	3101      	adds	r1, #1
 800f43e:	f43f addf 	beq.w	800f000 <_strtod_l+0x490>
 800f442:	4b23      	ldr	r3, [pc, #140]	; (800f4d0 <_strtod_l+0x960>)
 800f444:	403b      	ands	r3, r7
 800f446:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f44a:	f04f 0a00 	mov.w	sl, #0
 800f44e:	9b04      	ldr	r3, [sp, #16]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1a4      	bne.n	800f39e <_strtod_l+0x82e>
 800f454:	e5de      	b.n	800f014 <_strtod_l+0x4a4>
 800f456:	f04f 33ff 	mov.w	r3, #4294967295
 800f45a:	e7ea      	b.n	800f432 <_strtod_l+0x8c2>
 800f45c:	4613      	mov	r3, r2
 800f45e:	e7e8      	b.n	800f432 <_strtod_l+0x8c2>
 800f460:	ea53 030a 	orrs.w	r3, r3, sl
 800f464:	d08c      	beq.n	800f380 <_strtod_l+0x810>
 800f466:	9b08      	ldr	r3, [sp, #32]
 800f468:	b1db      	cbz	r3, 800f4a2 <_strtod_l+0x932>
 800f46a:	423b      	tst	r3, r7
 800f46c:	d0ef      	beq.n	800f44e <_strtod_l+0x8de>
 800f46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f470:	9a04      	ldr	r2, [sp, #16]
 800f472:	4650      	mov	r0, sl
 800f474:	4659      	mov	r1, fp
 800f476:	b1c3      	cbz	r3, 800f4aa <_strtod_l+0x93a>
 800f478:	f7ff fb5c 	bl	800eb34 <sulp>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	ec51 0b18 	vmov	r0, r1, d8
 800f484:	f7f0 ff2a 	bl	80002dc <__adddf3>
 800f488:	4682      	mov	sl, r0
 800f48a:	468b      	mov	fp, r1
 800f48c:	e7df      	b.n	800f44e <_strtod_l+0x8de>
 800f48e:	4013      	ands	r3, r2
 800f490:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f494:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f498:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f49c:	f04f 3aff 	mov.w	sl, #4294967295
 800f4a0:	e7d5      	b.n	800f44e <_strtod_l+0x8de>
 800f4a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4a4:	ea13 0f0a 	tst.w	r3, sl
 800f4a8:	e7e0      	b.n	800f46c <_strtod_l+0x8fc>
 800f4aa:	f7ff fb43 	bl	800eb34 <sulp>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	ec51 0b18 	vmov	r0, r1, d8
 800f4b6:	f7f0 ff0f 	bl	80002d8 <__aeabi_dsub>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4682      	mov	sl, r0
 800f4c0:	468b      	mov	fp, r1
 800f4c2:	f7f1 fb29 	bl	8000b18 <__aeabi_dcmpeq>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d0c1      	beq.n	800f44e <_strtod_l+0x8de>
 800f4ca:	e611      	b.n	800f0f0 <_strtod_l+0x580>
 800f4cc:	fffffc02 	.word	0xfffffc02
 800f4d0:	7ff00000 	.word	0x7ff00000
 800f4d4:	39500000 	.word	0x39500000
 800f4d8:	000fffff 	.word	0x000fffff
 800f4dc:	7fefffff 	.word	0x7fefffff
 800f4e0:	08013e88 	.word	0x08013e88
 800f4e4:	4631      	mov	r1, r6
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f002 fb1a 	bl	8011b20 <__ratio>
 800f4ec:	ec59 8b10 	vmov	r8, r9, d0
 800f4f0:	ee10 0a10 	vmov	r0, s0
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4fa:	4649      	mov	r1, r9
 800f4fc:	f7f1 fb20 	bl	8000b40 <__aeabi_dcmple>
 800f500:	2800      	cmp	r0, #0
 800f502:	d07a      	beq.n	800f5fa <_strtod_l+0xa8a>
 800f504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f506:	2b00      	cmp	r3, #0
 800f508:	d04a      	beq.n	800f5a0 <_strtod_l+0xa30>
 800f50a:	4b95      	ldr	r3, [pc, #596]	; (800f760 <_strtod_l+0xbf0>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f512:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f760 <_strtod_l+0xbf0>
 800f516:	f04f 0800 	mov.w	r8, #0
 800f51a:	4b92      	ldr	r3, [pc, #584]	; (800f764 <_strtod_l+0xbf4>)
 800f51c:	403b      	ands	r3, r7
 800f51e:	930d      	str	r3, [sp, #52]	; 0x34
 800f520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f522:	4b91      	ldr	r3, [pc, #580]	; (800f768 <_strtod_l+0xbf8>)
 800f524:	429a      	cmp	r2, r3
 800f526:	f040 80b0 	bne.w	800f68a <_strtod_l+0xb1a>
 800f52a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f52e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f532:	ec4b ab10 	vmov	d0, sl, fp
 800f536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f53a:	f002 fa19 	bl	8011970 <__ulp>
 800f53e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f542:	ec53 2b10 	vmov	r2, r3, d0
 800f546:	f7f1 f87f 	bl	8000648 <__aeabi_dmul>
 800f54a:	4652      	mov	r2, sl
 800f54c:	465b      	mov	r3, fp
 800f54e:	f7f0 fec5 	bl	80002dc <__adddf3>
 800f552:	460b      	mov	r3, r1
 800f554:	4983      	ldr	r1, [pc, #524]	; (800f764 <_strtod_l+0xbf4>)
 800f556:	4a85      	ldr	r2, [pc, #532]	; (800f76c <_strtod_l+0xbfc>)
 800f558:	4019      	ands	r1, r3
 800f55a:	4291      	cmp	r1, r2
 800f55c:	4682      	mov	sl, r0
 800f55e:	d960      	bls.n	800f622 <_strtod_l+0xab2>
 800f560:	ee18 3a90 	vmov	r3, s17
 800f564:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f568:	4293      	cmp	r3, r2
 800f56a:	d104      	bne.n	800f576 <_strtod_l+0xa06>
 800f56c:	ee18 3a10 	vmov	r3, s16
 800f570:	3301      	adds	r3, #1
 800f572:	f43f ad45 	beq.w	800f000 <_strtod_l+0x490>
 800f576:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f778 <_strtod_l+0xc08>
 800f57a:	f04f 3aff 	mov.w	sl, #4294967295
 800f57e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f580:	4620      	mov	r0, r4
 800f582:	f001 fec3 	bl	801130c <_Bfree>
 800f586:	9905      	ldr	r1, [sp, #20]
 800f588:	4620      	mov	r0, r4
 800f58a:	f001 febf 	bl	801130c <_Bfree>
 800f58e:	4631      	mov	r1, r6
 800f590:	4620      	mov	r0, r4
 800f592:	f001 febb 	bl	801130c <_Bfree>
 800f596:	4629      	mov	r1, r5
 800f598:	4620      	mov	r0, r4
 800f59a:	f001 feb7 	bl	801130c <_Bfree>
 800f59e:	e61a      	b.n	800f1d6 <_strtod_l+0x666>
 800f5a0:	f1ba 0f00 	cmp.w	sl, #0
 800f5a4:	d11b      	bne.n	800f5de <_strtod_l+0xa6e>
 800f5a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5aa:	b9f3      	cbnz	r3, 800f5ea <_strtod_l+0xa7a>
 800f5ac:	4b6c      	ldr	r3, [pc, #432]	; (800f760 <_strtod_l+0xbf0>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	f7f1 faba 	bl	8000b2c <__aeabi_dcmplt>
 800f5b8:	b9d0      	cbnz	r0, 800f5f0 <_strtod_l+0xa80>
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4649      	mov	r1, r9
 800f5be:	4b6c      	ldr	r3, [pc, #432]	; (800f770 <_strtod_l+0xc00>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f7f1 f841 	bl	8000648 <__aeabi_dmul>
 800f5c6:	4680      	mov	r8, r0
 800f5c8:	4689      	mov	r9, r1
 800f5ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f5ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f5d2:	9315      	str	r3, [sp, #84]	; 0x54
 800f5d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f5d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f5dc:	e79d      	b.n	800f51a <_strtod_l+0x9aa>
 800f5de:	f1ba 0f01 	cmp.w	sl, #1
 800f5e2:	d102      	bne.n	800f5ea <_strtod_l+0xa7a>
 800f5e4:	2f00      	cmp	r7, #0
 800f5e6:	f43f ad83 	beq.w	800f0f0 <_strtod_l+0x580>
 800f5ea:	4b62      	ldr	r3, [pc, #392]	; (800f774 <_strtod_l+0xc04>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	e78e      	b.n	800f50e <_strtod_l+0x99e>
 800f5f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f770 <_strtod_l+0xc00>
 800f5f4:	f04f 0800 	mov.w	r8, #0
 800f5f8:	e7e7      	b.n	800f5ca <_strtod_l+0xa5a>
 800f5fa:	4b5d      	ldr	r3, [pc, #372]	; (800f770 <_strtod_l+0xc00>)
 800f5fc:	4640      	mov	r0, r8
 800f5fe:	4649      	mov	r1, r9
 800f600:	2200      	movs	r2, #0
 800f602:	f7f1 f821 	bl	8000648 <__aeabi_dmul>
 800f606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f608:	4680      	mov	r8, r0
 800f60a:	4689      	mov	r9, r1
 800f60c:	b933      	cbnz	r3, 800f61c <_strtod_l+0xaac>
 800f60e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f612:	900e      	str	r0, [sp, #56]	; 0x38
 800f614:	930f      	str	r3, [sp, #60]	; 0x3c
 800f616:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f61a:	e7dd      	b.n	800f5d8 <_strtod_l+0xa68>
 800f61c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f620:	e7f9      	b.n	800f616 <_strtod_l+0xaa6>
 800f622:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f626:	9b04      	ldr	r3, [sp, #16]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1a8      	bne.n	800f57e <_strtod_l+0xa0e>
 800f62c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f632:	0d1b      	lsrs	r3, r3, #20
 800f634:	051b      	lsls	r3, r3, #20
 800f636:	429a      	cmp	r2, r3
 800f638:	d1a1      	bne.n	800f57e <_strtod_l+0xa0e>
 800f63a:	4640      	mov	r0, r8
 800f63c:	4649      	mov	r1, r9
 800f63e:	f7f1 fb63 	bl	8000d08 <__aeabi_d2lz>
 800f642:	f7f0 ffd3 	bl	80005ec <__aeabi_l2d>
 800f646:	4602      	mov	r2, r0
 800f648:	460b      	mov	r3, r1
 800f64a:	4640      	mov	r0, r8
 800f64c:	4649      	mov	r1, r9
 800f64e:	f7f0 fe43 	bl	80002d8 <__aeabi_dsub>
 800f652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f658:	ea43 030a 	orr.w	r3, r3, sl
 800f65c:	4313      	orrs	r3, r2
 800f65e:	4680      	mov	r8, r0
 800f660:	4689      	mov	r9, r1
 800f662:	d055      	beq.n	800f710 <_strtod_l+0xba0>
 800f664:	a336      	add	r3, pc, #216	; (adr r3, 800f740 <_strtod_l+0xbd0>)
 800f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66a:	f7f1 fa5f 	bl	8000b2c <__aeabi_dcmplt>
 800f66e:	2800      	cmp	r0, #0
 800f670:	f47f acd0 	bne.w	800f014 <_strtod_l+0x4a4>
 800f674:	a334      	add	r3, pc, #208	; (adr r3, 800f748 <_strtod_l+0xbd8>)
 800f676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67a:	4640      	mov	r0, r8
 800f67c:	4649      	mov	r1, r9
 800f67e:	f7f1 fa73 	bl	8000b68 <__aeabi_dcmpgt>
 800f682:	2800      	cmp	r0, #0
 800f684:	f43f af7b 	beq.w	800f57e <_strtod_l+0xa0e>
 800f688:	e4c4      	b.n	800f014 <_strtod_l+0x4a4>
 800f68a:	9b04      	ldr	r3, [sp, #16]
 800f68c:	b333      	cbz	r3, 800f6dc <_strtod_l+0xb6c>
 800f68e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f690:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f694:	d822      	bhi.n	800f6dc <_strtod_l+0xb6c>
 800f696:	a32e      	add	r3, pc, #184	; (adr r3, 800f750 <_strtod_l+0xbe0>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4640      	mov	r0, r8
 800f69e:	4649      	mov	r1, r9
 800f6a0:	f7f1 fa4e 	bl	8000b40 <__aeabi_dcmple>
 800f6a4:	b1a0      	cbz	r0, 800f6d0 <_strtod_l+0xb60>
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	f7f1 faa5 	bl	8000bf8 <__aeabi_d2uiz>
 800f6ae:	2801      	cmp	r0, #1
 800f6b0:	bf38      	it	cc
 800f6b2:	2001      	movcc	r0, #1
 800f6b4:	f7f0 ff4e 	bl	8000554 <__aeabi_ui2d>
 800f6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6ba:	4680      	mov	r8, r0
 800f6bc:	4689      	mov	r9, r1
 800f6be:	bb23      	cbnz	r3, 800f70a <_strtod_l+0xb9a>
 800f6c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6c4:	9010      	str	r0, [sp, #64]	; 0x40
 800f6c6:	9311      	str	r3, [sp, #68]	; 0x44
 800f6c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f6d8:	1a9b      	subs	r3, r3, r2
 800f6da:	9309      	str	r3, [sp, #36]	; 0x24
 800f6dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f6e4:	eef0 0a68 	vmov.f32	s1, s17
 800f6e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f6ec:	f002 f940 	bl	8011970 <__ulp>
 800f6f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6f4:	ec53 2b10 	vmov	r2, r3, d0
 800f6f8:	f7f0 ffa6 	bl	8000648 <__aeabi_dmul>
 800f6fc:	ec53 2b18 	vmov	r2, r3, d8
 800f700:	f7f0 fdec 	bl	80002dc <__adddf3>
 800f704:	4682      	mov	sl, r0
 800f706:	468b      	mov	fp, r1
 800f708:	e78d      	b.n	800f626 <_strtod_l+0xab6>
 800f70a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f70e:	e7db      	b.n	800f6c8 <_strtod_l+0xb58>
 800f710:	a311      	add	r3, pc, #68	; (adr r3, 800f758 <_strtod_l+0xbe8>)
 800f712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f716:	f7f1 fa09 	bl	8000b2c <__aeabi_dcmplt>
 800f71a:	e7b2      	b.n	800f682 <_strtod_l+0xb12>
 800f71c:	2300      	movs	r3, #0
 800f71e:	930a      	str	r3, [sp, #40]	; 0x28
 800f720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f724:	6013      	str	r3, [r2, #0]
 800f726:	f7ff ba6b 	b.w	800ec00 <_strtod_l+0x90>
 800f72a:	2a65      	cmp	r2, #101	; 0x65
 800f72c:	f43f ab5f 	beq.w	800edee <_strtod_l+0x27e>
 800f730:	2a45      	cmp	r2, #69	; 0x45
 800f732:	f43f ab5c 	beq.w	800edee <_strtod_l+0x27e>
 800f736:	2301      	movs	r3, #1
 800f738:	f7ff bb94 	b.w	800ee64 <_strtod_l+0x2f4>
 800f73c:	f3af 8000 	nop.w
 800f740:	94a03595 	.word	0x94a03595
 800f744:	3fdfffff 	.word	0x3fdfffff
 800f748:	35afe535 	.word	0x35afe535
 800f74c:	3fe00000 	.word	0x3fe00000
 800f750:	ffc00000 	.word	0xffc00000
 800f754:	41dfffff 	.word	0x41dfffff
 800f758:	94a03595 	.word	0x94a03595
 800f75c:	3fcfffff 	.word	0x3fcfffff
 800f760:	3ff00000 	.word	0x3ff00000
 800f764:	7ff00000 	.word	0x7ff00000
 800f768:	7fe00000 	.word	0x7fe00000
 800f76c:	7c9fffff 	.word	0x7c9fffff
 800f770:	3fe00000 	.word	0x3fe00000
 800f774:	bff00000 	.word	0xbff00000
 800f778:	7fefffff 	.word	0x7fefffff

0800f77c <_strtod_r>:
 800f77c:	4b01      	ldr	r3, [pc, #4]	; (800f784 <_strtod_r+0x8>)
 800f77e:	f7ff b9f7 	b.w	800eb70 <_strtod_l>
 800f782:	bf00      	nop
 800f784:	200000b4 	.word	0x200000b4

0800f788 <strtod>:
 800f788:	460a      	mov	r2, r1
 800f78a:	4601      	mov	r1, r0
 800f78c:	4802      	ldr	r0, [pc, #8]	; (800f798 <strtod+0x10>)
 800f78e:	4b03      	ldr	r3, [pc, #12]	; (800f79c <strtod+0x14>)
 800f790:	6800      	ldr	r0, [r0, #0]
 800f792:	f7ff b9ed 	b.w	800eb70 <_strtod_l>
 800f796:	bf00      	nop
 800f798:	2000004c 	.word	0x2000004c
 800f79c:	200000b4 	.word	0x200000b4

0800f7a0 <_strtol_l.constprop.0>:
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a6:	d001      	beq.n	800f7ac <_strtol_l.constprop.0+0xc>
 800f7a8:	2b24      	cmp	r3, #36	; 0x24
 800f7aa:	d906      	bls.n	800f7ba <_strtol_l.constprop.0+0x1a>
 800f7ac:	f7fe fa54 	bl	800dc58 <__errno>
 800f7b0:	2316      	movs	r3, #22
 800f7b2:	6003      	str	r3, [r0, #0]
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f8a0 <_strtol_l.constprop.0+0x100>
 800f7be:	460d      	mov	r5, r1
 800f7c0:	462e      	mov	r6, r5
 800f7c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f7ca:	f017 0708 	ands.w	r7, r7, #8
 800f7ce:	d1f7      	bne.n	800f7c0 <_strtol_l.constprop.0+0x20>
 800f7d0:	2c2d      	cmp	r4, #45	; 0x2d
 800f7d2:	d132      	bne.n	800f83a <_strtol_l.constprop.0+0x9a>
 800f7d4:	782c      	ldrb	r4, [r5, #0]
 800f7d6:	2701      	movs	r7, #1
 800f7d8:	1cb5      	adds	r5, r6, #2
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d05b      	beq.n	800f896 <_strtol_l.constprop.0+0xf6>
 800f7de:	2b10      	cmp	r3, #16
 800f7e0:	d109      	bne.n	800f7f6 <_strtol_l.constprop.0+0x56>
 800f7e2:	2c30      	cmp	r4, #48	; 0x30
 800f7e4:	d107      	bne.n	800f7f6 <_strtol_l.constprop.0+0x56>
 800f7e6:	782c      	ldrb	r4, [r5, #0]
 800f7e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f7ec:	2c58      	cmp	r4, #88	; 0x58
 800f7ee:	d14d      	bne.n	800f88c <_strtol_l.constprop.0+0xec>
 800f7f0:	786c      	ldrb	r4, [r5, #1]
 800f7f2:	2310      	movs	r3, #16
 800f7f4:	3502      	adds	r5, #2
 800f7f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f7fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7fe:	f04f 0c00 	mov.w	ip, #0
 800f802:	fbb8 f9f3 	udiv	r9, r8, r3
 800f806:	4666      	mov	r6, ip
 800f808:	fb03 8a19 	mls	sl, r3, r9, r8
 800f80c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f810:	f1be 0f09 	cmp.w	lr, #9
 800f814:	d816      	bhi.n	800f844 <_strtol_l.constprop.0+0xa4>
 800f816:	4674      	mov	r4, lr
 800f818:	42a3      	cmp	r3, r4
 800f81a:	dd24      	ble.n	800f866 <_strtol_l.constprop.0+0xc6>
 800f81c:	f1bc 0f00 	cmp.w	ip, #0
 800f820:	db1e      	blt.n	800f860 <_strtol_l.constprop.0+0xc0>
 800f822:	45b1      	cmp	r9, r6
 800f824:	d31c      	bcc.n	800f860 <_strtol_l.constprop.0+0xc0>
 800f826:	d101      	bne.n	800f82c <_strtol_l.constprop.0+0x8c>
 800f828:	45a2      	cmp	sl, r4
 800f82a:	db19      	blt.n	800f860 <_strtol_l.constprop.0+0xc0>
 800f82c:	fb06 4603 	mla	r6, r6, r3, r4
 800f830:	f04f 0c01 	mov.w	ip, #1
 800f834:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f838:	e7e8      	b.n	800f80c <_strtol_l.constprop.0+0x6c>
 800f83a:	2c2b      	cmp	r4, #43	; 0x2b
 800f83c:	bf04      	itt	eq
 800f83e:	782c      	ldrbeq	r4, [r5, #0]
 800f840:	1cb5      	addeq	r5, r6, #2
 800f842:	e7ca      	b.n	800f7da <_strtol_l.constprop.0+0x3a>
 800f844:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f848:	f1be 0f19 	cmp.w	lr, #25
 800f84c:	d801      	bhi.n	800f852 <_strtol_l.constprop.0+0xb2>
 800f84e:	3c37      	subs	r4, #55	; 0x37
 800f850:	e7e2      	b.n	800f818 <_strtol_l.constprop.0+0x78>
 800f852:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f856:	f1be 0f19 	cmp.w	lr, #25
 800f85a:	d804      	bhi.n	800f866 <_strtol_l.constprop.0+0xc6>
 800f85c:	3c57      	subs	r4, #87	; 0x57
 800f85e:	e7db      	b.n	800f818 <_strtol_l.constprop.0+0x78>
 800f860:	f04f 3cff 	mov.w	ip, #4294967295
 800f864:	e7e6      	b.n	800f834 <_strtol_l.constprop.0+0x94>
 800f866:	f1bc 0f00 	cmp.w	ip, #0
 800f86a:	da05      	bge.n	800f878 <_strtol_l.constprop.0+0xd8>
 800f86c:	2322      	movs	r3, #34	; 0x22
 800f86e:	6003      	str	r3, [r0, #0]
 800f870:	4646      	mov	r6, r8
 800f872:	b942      	cbnz	r2, 800f886 <_strtol_l.constprop.0+0xe6>
 800f874:	4630      	mov	r0, r6
 800f876:	e79e      	b.n	800f7b6 <_strtol_l.constprop.0+0x16>
 800f878:	b107      	cbz	r7, 800f87c <_strtol_l.constprop.0+0xdc>
 800f87a:	4276      	negs	r6, r6
 800f87c:	2a00      	cmp	r2, #0
 800f87e:	d0f9      	beq.n	800f874 <_strtol_l.constprop.0+0xd4>
 800f880:	f1bc 0f00 	cmp.w	ip, #0
 800f884:	d000      	beq.n	800f888 <_strtol_l.constprop.0+0xe8>
 800f886:	1e69      	subs	r1, r5, #1
 800f888:	6011      	str	r1, [r2, #0]
 800f88a:	e7f3      	b.n	800f874 <_strtol_l.constprop.0+0xd4>
 800f88c:	2430      	movs	r4, #48	; 0x30
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d1b1      	bne.n	800f7f6 <_strtol_l.constprop.0+0x56>
 800f892:	2308      	movs	r3, #8
 800f894:	e7af      	b.n	800f7f6 <_strtol_l.constprop.0+0x56>
 800f896:	2c30      	cmp	r4, #48	; 0x30
 800f898:	d0a5      	beq.n	800f7e6 <_strtol_l.constprop.0+0x46>
 800f89a:	230a      	movs	r3, #10
 800f89c:	e7ab      	b.n	800f7f6 <_strtol_l.constprop.0+0x56>
 800f89e:	bf00      	nop
 800f8a0:	08013eb1 	.word	0x08013eb1

0800f8a4 <_strtol_r>:
 800f8a4:	f7ff bf7c 	b.w	800f7a0 <_strtol_l.constprop.0>

0800f8a8 <strtol>:
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	460a      	mov	r2, r1
 800f8ac:	4601      	mov	r1, r0
 800f8ae:	4802      	ldr	r0, [pc, #8]	; (800f8b8 <strtol+0x10>)
 800f8b0:	6800      	ldr	r0, [r0, #0]
 800f8b2:	f7ff bf75 	b.w	800f7a0 <_strtol_l.constprop.0>
 800f8b6:	bf00      	nop
 800f8b8:	2000004c 	.word	0x2000004c

0800f8bc <__swbuf_r>:
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	460e      	mov	r6, r1
 800f8c0:	4614      	mov	r4, r2
 800f8c2:	4605      	mov	r5, r0
 800f8c4:	b118      	cbz	r0, 800f8ce <__swbuf_r+0x12>
 800f8c6:	6983      	ldr	r3, [r0, #24]
 800f8c8:	b90b      	cbnz	r3, 800f8ce <__swbuf_r+0x12>
 800f8ca:	f001 f84d 	bl	8010968 <__sinit>
 800f8ce:	4b21      	ldr	r3, [pc, #132]	; (800f954 <__swbuf_r+0x98>)
 800f8d0:	429c      	cmp	r4, r3
 800f8d2:	d12b      	bne.n	800f92c <__swbuf_r+0x70>
 800f8d4:	686c      	ldr	r4, [r5, #4]
 800f8d6:	69a3      	ldr	r3, [r4, #24]
 800f8d8:	60a3      	str	r3, [r4, #8]
 800f8da:	89a3      	ldrh	r3, [r4, #12]
 800f8dc:	071a      	lsls	r2, r3, #28
 800f8de:	d52f      	bpl.n	800f940 <__swbuf_r+0x84>
 800f8e0:	6923      	ldr	r3, [r4, #16]
 800f8e2:	b36b      	cbz	r3, 800f940 <__swbuf_r+0x84>
 800f8e4:	6923      	ldr	r3, [r4, #16]
 800f8e6:	6820      	ldr	r0, [r4, #0]
 800f8e8:	1ac0      	subs	r0, r0, r3
 800f8ea:	6963      	ldr	r3, [r4, #20]
 800f8ec:	b2f6      	uxtb	r6, r6
 800f8ee:	4283      	cmp	r3, r0
 800f8f0:	4637      	mov	r7, r6
 800f8f2:	dc04      	bgt.n	800f8fe <__swbuf_r+0x42>
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f000 ffa2 	bl	8010840 <_fflush_r>
 800f8fc:	bb30      	cbnz	r0, 800f94c <__swbuf_r+0x90>
 800f8fe:	68a3      	ldr	r3, [r4, #8]
 800f900:	3b01      	subs	r3, #1
 800f902:	60a3      	str	r3, [r4, #8]
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	6022      	str	r2, [r4, #0]
 800f90a:	701e      	strb	r6, [r3, #0]
 800f90c:	6963      	ldr	r3, [r4, #20]
 800f90e:	3001      	adds	r0, #1
 800f910:	4283      	cmp	r3, r0
 800f912:	d004      	beq.n	800f91e <__swbuf_r+0x62>
 800f914:	89a3      	ldrh	r3, [r4, #12]
 800f916:	07db      	lsls	r3, r3, #31
 800f918:	d506      	bpl.n	800f928 <__swbuf_r+0x6c>
 800f91a:	2e0a      	cmp	r6, #10
 800f91c:	d104      	bne.n	800f928 <__swbuf_r+0x6c>
 800f91e:	4621      	mov	r1, r4
 800f920:	4628      	mov	r0, r5
 800f922:	f000 ff8d 	bl	8010840 <_fflush_r>
 800f926:	b988      	cbnz	r0, 800f94c <__swbuf_r+0x90>
 800f928:	4638      	mov	r0, r7
 800f92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92c:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <__swbuf_r+0x9c>)
 800f92e:	429c      	cmp	r4, r3
 800f930:	d101      	bne.n	800f936 <__swbuf_r+0x7a>
 800f932:	68ac      	ldr	r4, [r5, #8]
 800f934:	e7cf      	b.n	800f8d6 <__swbuf_r+0x1a>
 800f936:	4b09      	ldr	r3, [pc, #36]	; (800f95c <__swbuf_r+0xa0>)
 800f938:	429c      	cmp	r4, r3
 800f93a:	bf08      	it	eq
 800f93c:	68ec      	ldreq	r4, [r5, #12]
 800f93e:	e7ca      	b.n	800f8d6 <__swbuf_r+0x1a>
 800f940:	4621      	mov	r1, r4
 800f942:	4628      	mov	r0, r5
 800f944:	f000 f80c 	bl	800f960 <__swsetup_r>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d0cb      	beq.n	800f8e4 <__swbuf_r+0x28>
 800f94c:	f04f 37ff 	mov.w	r7, #4294967295
 800f950:	e7ea      	b.n	800f928 <__swbuf_r+0x6c>
 800f952:	bf00      	nop
 800f954:	08014064 	.word	0x08014064
 800f958:	08014084 	.word	0x08014084
 800f95c:	08014044 	.word	0x08014044

0800f960 <__swsetup_r>:
 800f960:	4b32      	ldr	r3, [pc, #200]	; (800fa2c <__swsetup_r+0xcc>)
 800f962:	b570      	push	{r4, r5, r6, lr}
 800f964:	681d      	ldr	r5, [r3, #0]
 800f966:	4606      	mov	r6, r0
 800f968:	460c      	mov	r4, r1
 800f96a:	b125      	cbz	r5, 800f976 <__swsetup_r+0x16>
 800f96c:	69ab      	ldr	r3, [r5, #24]
 800f96e:	b913      	cbnz	r3, 800f976 <__swsetup_r+0x16>
 800f970:	4628      	mov	r0, r5
 800f972:	f000 fff9 	bl	8010968 <__sinit>
 800f976:	4b2e      	ldr	r3, [pc, #184]	; (800fa30 <__swsetup_r+0xd0>)
 800f978:	429c      	cmp	r4, r3
 800f97a:	d10f      	bne.n	800f99c <__swsetup_r+0x3c>
 800f97c:	686c      	ldr	r4, [r5, #4]
 800f97e:	89a3      	ldrh	r3, [r4, #12]
 800f980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f984:	0719      	lsls	r1, r3, #28
 800f986:	d42c      	bmi.n	800f9e2 <__swsetup_r+0x82>
 800f988:	06dd      	lsls	r5, r3, #27
 800f98a:	d411      	bmi.n	800f9b0 <__swsetup_r+0x50>
 800f98c:	2309      	movs	r3, #9
 800f98e:	6033      	str	r3, [r6, #0]
 800f990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	f04f 30ff 	mov.w	r0, #4294967295
 800f99a:	e03e      	b.n	800fa1a <__swsetup_r+0xba>
 800f99c:	4b25      	ldr	r3, [pc, #148]	; (800fa34 <__swsetup_r+0xd4>)
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	d101      	bne.n	800f9a6 <__swsetup_r+0x46>
 800f9a2:	68ac      	ldr	r4, [r5, #8]
 800f9a4:	e7eb      	b.n	800f97e <__swsetup_r+0x1e>
 800f9a6:	4b24      	ldr	r3, [pc, #144]	; (800fa38 <__swsetup_r+0xd8>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	bf08      	it	eq
 800f9ac:	68ec      	ldreq	r4, [r5, #12]
 800f9ae:	e7e6      	b.n	800f97e <__swsetup_r+0x1e>
 800f9b0:	0758      	lsls	r0, r3, #29
 800f9b2:	d512      	bpl.n	800f9da <__swsetup_r+0x7a>
 800f9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9b6:	b141      	cbz	r1, 800f9ca <__swsetup_r+0x6a>
 800f9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9bc:	4299      	cmp	r1, r3
 800f9be:	d002      	beq.n	800f9c6 <__swsetup_r+0x66>
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	f002 f93b 	bl	8011c3c <_free_r>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	6363      	str	r3, [r4, #52]	; 0x34
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9d0:	81a3      	strh	r3, [r4, #12]
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	6063      	str	r3, [r4, #4]
 800f9d6:	6923      	ldr	r3, [r4, #16]
 800f9d8:	6023      	str	r3, [r4, #0]
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	f043 0308 	orr.w	r3, r3, #8
 800f9e0:	81a3      	strh	r3, [r4, #12]
 800f9e2:	6923      	ldr	r3, [r4, #16]
 800f9e4:	b94b      	cbnz	r3, 800f9fa <__swsetup_r+0x9a>
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9f0:	d003      	beq.n	800f9fa <__swsetup_r+0x9a>
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f001 fbef 	bl	80111d8 <__smakebuf_r>
 800f9fa:	89a0      	ldrh	r0, [r4, #12]
 800f9fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa00:	f010 0301 	ands.w	r3, r0, #1
 800fa04:	d00a      	beq.n	800fa1c <__swsetup_r+0xbc>
 800fa06:	2300      	movs	r3, #0
 800fa08:	60a3      	str	r3, [r4, #8]
 800fa0a:	6963      	ldr	r3, [r4, #20]
 800fa0c:	425b      	negs	r3, r3
 800fa0e:	61a3      	str	r3, [r4, #24]
 800fa10:	6923      	ldr	r3, [r4, #16]
 800fa12:	b943      	cbnz	r3, 800fa26 <__swsetup_r+0xc6>
 800fa14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa18:	d1ba      	bne.n	800f990 <__swsetup_r+0x30>
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
 800fa1c:	0781      	lsls	r1, r0, #30
 800fa1e:	bf58      	it	pl
 800fa20:	6963      	ldrpl	r3, [r4, #20]
 800fa22:	60a3      	str	r3, [r4, #8]
 800fa24:	e7f4      	b.n	800fa10 <__swsetup_r+0xb0>
 800fa26:	2000      	movs	r0, #0
 800fa28:	e7f7      	b.n	800fa1a <__swsetup_r+0xba>
 800fa2a:	bf00      	nop
 800fa2c:	2000004c 	.word	0x2000004c
 800fa30:	08014064 	.word	0x08014064
 800fa34:	08014084 	.word	0x08014084
 800fa38:	08014044 	.word	0x08014044

0800fa3c <quorem>:
 800fa3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa40:	6903      	ldr	r3, [r0, #16]
 800fa42:	690c      	ldr	r4, [r1, #16]
 800fa44:	42a3      	cmp	r3, r4
 800fa46:	4607      	mov	r7, r0
 800fa48:	f2c0 8081 	blt.w	800fb4e <quorem+0x112>
 800fa4c:	3c01      	subs	r4, #1
 800fa4e:	f101 0814 	add.w	r8, r1, #20
 800fa52:	f100 0514 	add.w	r5, r0, #20
 800fa56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa5a:	9301      	str	r3, [sp, #4]
 800fa5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa64:	3301      	adds	r3, #1
 800fa66:	429a      	cmp	r2, r3
 800fa68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa70:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa74:	d331      	bcc.n	800fada <quorem+0x9e>
 800fa76:	f04f 0e00 	mov.w	lr, #0
 800fa7a:	4640      	mov	r0, r8
 800fa7c:	46ac      	mov	ip, r5
 800fa7e:	46f2      	mov	sl, lr
 800fa80:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa84:	b293      	uxth	r3, r2
 800fa86:	fb06 e303 	mla	r3, r6, r3, lr
 800fa8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	ebaa 0303 	sub.w	r3, sl, r3
 800fa94:	f8dc a000 	ldr.w	sl, [ip]
 800fa98:	0c12      	lsrs	r2, r2, #16
 800fa9a:	fa13 f38a 	uxtah	r3, r3, sl
 800fa9e:	fb06 e202 	mla	r2, r6, r2, lr
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	9b00      	ldr	r3, [sp, #0]
 800faa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800faaa:	b292      	uxth	r2, r2
 800faac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fab4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fab8:	4581      	cmp	r9, r0
 800faba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fabe:	f84c 3b04 	str.w	r3, [ip], #4
 800fac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fac6:	d2db      	bcs.n	800fa80 <quorem+0x44>
 800fac8:	f855 300b 	ldr.w	r3, [r5, fp]
 800facc:	b92b      	cbnz	r3, 800fada <quorem+0x9e>
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	3b04      	subs	r3, #4
 800fad2:	429d      	cmp	r5, r3
 800fad4:	461a      	mov	r2, r3
 800fad6:	d32e      	bcc.n	800fb36 <quorem+0xfa>
 800fad8:	613c      	str	r4, [r7, #16]
 800fada:	4638      	mov	r0, r7
 800fadc:	f001 fea2 	bl	8011824 <__mcmp>
 800fae0:	2800      	cmp	r0, #0
 800fae2:	db24      	blt.n	800fb2e <quorem+0xf2>
 800fae4:	3601      	adds	r6, #1
 800fae6:	4628      	mov	r0, r5
 800fae8:	f04f 0c00 	mov.w	ip, #0
 800faec:	f858 2b04 	ldr.w	r2, [r8], #4
 800faf0:	f8d0 e000 	ldr.w	lr, [r0]
 800faf4:	b293      	uxth	r3, r2
 800faf6:	ebac 0303 	sub.w	r3, ip, r3
 800fafa:	0c12      	lsrs	r2, r2, #16
 800fafc:	fa13 f38e 	uxtah	r3, r3, lr
 800fb00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb0e:	45c1      	cmp	r9, r8
 800fb10:	f840 3b04 	str.w	r3, [r0], #4
 800fb14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb18:	d2e8      	bcs.n	800faec <quorem+0xb0>
 800fb1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb22:	b922      	cbnz	r2, 800fb2e <quorem+0xf2>
 800fb24:	3b04      	subs	r3, #4
 800fb26:	429d      	cmp	r5, r3
 800fb28:	461a      	mov	r2, r3
 800fb2a:	d30a      	bcc.n	800fb42 <quorem+0x106>
 800fb2c:	613c      	str	r4, [r7, #16]
 800fb2e:	4630      	mov	r0, r6
 800fb30:	b003      	add	sp, #12
 800fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb36:	6812      	ldr	r2, [r2, #0]
 800fb38:	3b04      	subs	r3, #4
 800fb3a:	2a00      	cmp	r2, #0
 800fb3c:	d1cc      	bne.n	800fad8 <quorem+0x9c>
 800fb3e:	3c01      	subs	r4, #1
 800fb40:	e7c7      	b.n	800fad2 <quorem+0x96>
 800fb42:	6812      	ldr	r2, [r2, #0]
 800fb44:	3b04      	subs	r3, #4
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	d1f0      	bne.n	800fb2c <quorem+0xf0>
 800fb4a:	3c01      	subs	r4, #1
 800fb4c:	e7eb      	b.n	800fb26 <quorem+0xea>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	e7ee      	b.n	800fb30 <quorem+0xf4>
 800fb52:	0000      	movs	r0, r0
 800fb54:	0000      	movs	r0, r0
	...

0800fb58 <_dtoa_r>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	ed2d 8b04 	vpush	{d8-d9}
 800fb60:	ec57 6b10 	vmov	r6, r7, d0
 800fb64:	b093      	sub	sp, #76	; 0x4c
 800fb66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb6c:	9106      	str	r1, [sp, #24]
 800fb6e:	ee10 aa10 	vmov	sl, s0
 800fb72:	4604      	mov	r4, r0
 800fb74:	9209      	str	r2, [sp, #36]	; 0x24
 800fb76:	930c      	str	r3, [sp, #48]	; 0x30
 800fb78:	46bb      	mov	fp, r7
 800fb7a:	b975      	cbnz	r5, 800fb9a <_dtoa_r+0x42>
 800fb7c:	2010      	movs	r0, #16
 800fb7e:	f001 fb6b 	bl	8011258 <malloc>
 800fb82:	4602      	mov	r2, r0
 800fb84:	6260      	str	r0, [r4, #36]	; 0x24
 800fb86:	b920      	cbnz	r0, 800fb92 <_dtoa_r+0x3a>
 800fb88:	4ba7      	ldr	r3, [pc, #668]	; (800fe28 <_dtoa_r+0x2d0>)
 800fb8a:	21ea      	movs	r1, #234	; 0xea
 800fb8c:	48a7      	ldr	r0, [pc, #668]	; (800fe2c <_dtoa_r+0x2d4>)
 800fb8e:	f002 fc79 	bl	8012484 <__assert_func>
 800fb92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb96:	6005      	str	r5, [r0, #0]
 800fb98:	60c5      	str	r5, [r0, #12]
 800fb9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb9c:	6819      	ldr	r1, [r3, #0]
 800fb9e:	b151      	cbz	r1, 800fbb6 <_dtoa_r+0x5e>
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	604a      	str	r2, [r1, #4]
 800fba4:	2301      	movs	r3, #1
 800fba6:	4093      	lsls	r3, r2
 800fba8:	608b      	str	r3, [r1, #8]
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f001 fbae 	bl	801130c <_Bfree>
 800fbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
 800fbb6:	1e3b      	subs	r3, r7, #0
 800fbb8:	bfaa      	itet	ge
 800fbba:	2300      	movge	r3, #0
 800fbbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fbc0:	f8c8 3000 	strge.w	r3, [r8]
 800fbc4:	4b9a      	ldr	r3, [pc, #616]	; (800fe30 <_dtoa_r+0x2d8>)
 800fbc6:	bfbc      	itt	lt
 800fbc8:	2201      	movlt	r2, #1
 800fbca:	f8c8 2000 	strlt.w	r2, [r8]
 800fbce:	ea33 030b 	bics.w	r3, r3, fp
 800fbd2:	d11b      	bne.n	800fc0c <_dtoa_r+0xb4>
 800fbd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbd6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbe0:	4333      	orrs	r3, r6
 800fbe2:	f000 8592 	beq.w	801070a <_dtoa_r+0xbb2>
 800fbe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbe8:	b963      	cbnz	r3, 800fc04 <_dtoa_r+0xac>
 800fbea:	4b92      	ldr	r3, [pc, #584]	; (800fe34 <_dtoa_r+0x2dc>)
 800fbec:	e022      	b.n	800fc34 <_dtoa_r+0xdc>
 800fbee:	4b92      	ldr	r3, [pc, #584]	; (800fe38 <_dtoa_r+0x2e0>)
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	3308      	adds	r3, #8
 800fbf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	9801      	ldr	r0, [sp, #4]
 800fbfa:	b013      	add	sp, #76	; 0x4c
 800fbfc:	ecbd 8b04 	vpop	{d8-d9}
 800fc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc04:	4b8b      	ldr	r3, [pc, #556]	; (800fe34 <_dtoa_r+0x2dc>)
 800fc06:	9301      	str	r3, [sp, #4]
 800fc08:	3303      	adds	r3, #3
 800fc0a:	e7f3      	b.n	800fbf4 <_dtoa_r+0x9c>
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	2300      	movs	r3, #0
 800fc10:	4650      	mov	r0, sl
 800fc12:	4659      	mov	r1, fp
 800fc14:	f7f0 ff80 	bl	8000b18 <__aeabi_dcmpeq>
 800fc18:	ec4b ab19 	vmov	d9, sl, fp
 800fc1c:	4680      	mov	r8, r0
 800fc1e:	b158      	cbz	r0, 800fc38 <_dtoa_r+0xe0>
 800fc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc22:	2301      	movs	r3, #1
 800fc24:	6013      	str	r3, [r2, #0]
 800fc26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	f000 856b 	beq.w	8010704 <_dtoa_r+0xbac>
 800fc2e:	4883      	ldr	r0, [pc, #524]	; (800fe3c <_dtoa_r+0x2e4>)
 800fc30:	6018      	str	r0, [r3, #0]
 800fc32:	1e43      	subs	r3, r0, #1
 800fc34:	9301      	str	r3, [sp, #4]
 800fc36:	e7df      	b.n	800fbf8 <_dtoa_r+0xa0>
 800fc38:	ec4b ab10 	vmov	d0, sl, fp
 800fc3c:	aa10      	add	r2, sp, #64	; 0x40
 800fc3e:	a911      	add	r1, sp, #68	; 0x44
 800fc40:	4620      	mov	r0, r4
 800fc42:	f001 ff11 	bl	8011a68 <__d2b>
 800fc46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fc4a:	ee08 0a10 	vmov	s16, r0
 800fc4e:	2d00      	cmp	r5, #0
 800fc50:	f000 8084 	beq.w	800fd5c <_dtoa_r+0x204>
 800fc54:	ee19 3a90 	vmov	r3, s19
 800fc58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fc60:	4656      	mov	r6, sl
 800fc62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fc66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fc6e:	4b74      	ldr	r3, [pc, #464]	; (800fe40 <_dtoa_r+0x2e8>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	4630      	mov	r0, r6
 800fc74:	4639      	mov	r1, r7
 800fc76:	f7f0 fb2f 	bl	80002d8 <__aeabi_dsub>
 800fc7a:	a365      	add	r3, pc, #404	; (adr r3, 800fe10 <_dtoa_r+0x2b8>)
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	f7f0 fce2 	bl	8000648 <__aeabi_dmul>
 800fc84:	a364      	add	r3, pc, #400	; (adr r3, 800fe18 <_dtoa_r+0x2c0>)
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	f7f0 fb27 	bl	80002dc <__adddf3>
 800fc8e:	4606      	mov	r6, r0
 800fc90:	4628      	mov	r0, r5
 800fc92:	460f      	mov	r7, r1
 800fc94:	f7f0 fc6e 	bl	8000574 <__aeabi_i2d>
 800fc98:	a361      	add	r3, pc, #388	; (adr r3, 800fe20 <_dtoa_r+0x2c8>)
 800fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9e:	f7f0 fcd3 	bl	8000648 <__aeabi_dmul>
 800fca2:	4602      	mov	r2, r0
 800fca4:	460b      	mov	r3, r1
 800fca6:	4630      	mov	r0, r6
 800fca8:	4639      	mov	r1, r7
 800fcaa:	f7f0 fb17 	bl	80002dc <__adddf3>
 800fcae:	4606      	mov	r6, r0
 800fcb0:	460f      	mov	r7, r1
 800fcb2:	f7f0 ff79 	bl	8000ba8 <__aeabi_d2iz>
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	9000      	str	r0, [sp, #0]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	f7f0 ff34 	bl	8000b2c <__aeabi_dcmplt>
 800fcc4:	b150      	cbz	r0, 800fcdc <_dtoa_r+0x184>
 800fcc6:	9800      	ldr	r0, [sp, #0]
 800fcc8:	f7f0 fc54 	bl	8000574 <__aeabi_i2d>
 800fccc:	4632      	mov	r2, r6
 800fcce:	463b      	mov	r3, r7
 800fcd0:	f7f0 ff22 	bl	8000b18 <__aeabi_dcmpeq>
 800fcd4:	b910      	cbnz	r0, 800fcdc <_dtoa_r+0x184>
 800fcd6:	9b00      	ldr	r3, [sp, #0]
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	9b00      	ldr	r3, [sp, #0]
 800fcde:	2b16      	cmp	r3, #22
 800fce0:	d85a      	bhi.n	800fd98 <_dtoa_r+0x240>
 800fce2:	9a00      	ldr	r2, [sp, #0]
 800fce4:	4b57      	ldr	r3, [pc, #348]	; (800fe44 <_dtoa_r+0x2ec>)
 800fce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	ec51 0b19 	vmov	r0, r1, d9
 800fcf2:	f7f0 ff1b 	bl	8000b2c <__aeabi_dcmplt>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d050      	beq.n	800fd9c <_dtoa_r+0x244>
 800fcfa:	9b00      	ldr	r3, [sp, #0]
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	2300      	movs	r3, #0
 800fd02:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd06:	1b5d      	subs	r5, r3, r5
 800fd08:	1e6b      	subs	r3, r5, #1
 800fd0a:	9305      	str	r3, [sp, #20]
 800fd0c:	bf45      	ittet	mi
 800fd0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd12:	9304      	strmi	r3, [sp, #16]
 800fd14:	2300      	movpl	r3, #0
 800fd16:	2300      	movmi	r3, #0
 800fd18:	bf4c      	ite	mi
 800fd1a:	9305      	strmi	r3, [sp, #20]
 800fd1c:	9304      	strpl	r3, [sp, #16]
 800fd1e:	9b00      	ldr	r3, [sp, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	db3d      	blt.n	800fda0 <_dtoa_r+0x248>
 800fd24:	9b05      	ldr	r3, [sp, #20]
 800fd26:	9a00      	ldr	r2, [sp, #0]
 800fd28:	920a      	str	r2, [sp, #40]	; 0x28
 800fd2a:	4413      	add	r3, r2
 800fd2c:	9305      	str	r3, [sp, #20]
 800fd2e:	2300      	movs	r3, #0
 800fd30:	9307      	str	r3, [sp, #28]
 800fd32:	9b06      	ldr	r3, [sp, #24]
 800fd34:	2b09      	cmp	r3, #9
 800fd36:	f200 8089 	bhi.w	800fe4c <_dtoa_r+0x2f4>
 800fd3a:	2b05      	cmp	r3, #5
 800fd3c:	bfc4      	itt	gt
 800fd3e:	3b04      	subgt	r3, #4
 800fd40:	9306      	strgt	r3, [sp, #24]
 800fd42:	9b06      	ldr	r3, [sp, #24]
 800fd44:	f1a3 0302 	sub.w	r3, r3, #2
 800fd48:	bfcc      	ite	gt
 800fd4a:	2500      	movgt	r5, #0
 800fd4c:	2501      	movle	r5, #1
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	f200 8087 	bhi.w	800fe62 <_dtoa_r+0x30a>
 800fd54:	e8df f003 	tbb	[pc, r3]
 800fd58:	59383a2d 	.word	0x59383a2d
 800fd5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd60:	441d      	add	r5, r3
 800fd62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd66:	2b20      	cmp	r3, #32
 800fd68:	bfc1      	itttt	gt
 800fd6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fd72:	fa0b f303 	lslgt.w	r3, fp, r3
 800fd76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fd7a:	bfda      	itte	le
 800fd7c:	f1c3 0320 	rsble	r3, r3, #32
 800fd80:	fa06 f003 	lslle.w	r0, r6, r3
 800fd84:	4318      	orrgt	r0, r3
 800fd86:	f7f0 fbe5 	bl	8000554 <__aeabi_ui2d>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	4606      	mov	r6, r0
 800fd8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fd92:	3d01      	subs	r5, #1
 800fd94:	930e      	str	r3, [sp, #56]	; 0x38
 800fd96:	e76a      	b.n	800fc6e <_dtoa_r+0x116>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e7b2      	b.n	800fd02 <_dtoa_r+0x1aa>
 800fd9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd9e:	e7b1      	b.n	800fd04 <_dtoa_r+0x1ac>
 800fda0:	9b04      	ldr	r3, [sp, #16]
 800fda2:	9a00      	ldr	r2, [sp, #0]
 800fda4:	1a9b      	subs	r3, r3, r2
 800fda6:	9304      	str	r3, [sp, #16]
 800fda8:	4253      	negs	r3, r2
 800fdaa:	9307      	str	r3, [sp, #28]
 800fdac:	2300      	movs	r3, #0
 800fdae:	930a      	str	r3, [sp, #40]	; 0x28
 800fdb0:	e7bf      	b.n	800fd32 <_dtoa_r+0x1da>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9308      	str	r3, [sp, #32]
 800fdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dc55      	bgt.n	800fe68 <_dtoa_r+0x310>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	9209      	str	r2, [sp, #36]	; 0x24
 800fdc6:	e00c      	b.n	800fde2 <_dtoa_r+0x28a>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e7f3      	b.n	800fdb4 <_dtoa_r+0x25c>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdd0:	9308      	str	r3, [sp, #32]
 800fdd2:	9b00      	ldr	r3, [sp, #0]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	9302      	str	r3, [sp, #8]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	9303      	str	r3, [sp, #12]
 800fdde:	bfb8      	it	lt
 800fde0:	2301      	movlt	r3, #1
 800fde2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fde4:	2200      	movs	r2, #0
 800fde6:	6042      	str	r2, [r0, #4]
 800fde8:	2204      	movs	r2, #4
 800fdea:	f102 0614 	add.w	r6, r2, #20
 800fdee:	429e      	cmp	r6, r3
 800fdf0:	6841      	ldr	r1, [r0, #4]
 800fdf2:	d93d      	bls.n	800fe70 <_dtoa_r+0x318>
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	f001 fa49 	bl	801128c <_Balloc>
 800fdfa:	9001      	str	r0, [sp, #4]
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d13b      	bne.n	800fe78 <_dtoa_r+0x320>
 800fe00:	4b11      	ldr	r3, [pc, #68]	; (800fe48 <_dtoa_r+0x2f0>)
 800fe02:	4602      	mov	r2, r0
 800fe04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe08:	e6c0      	b.n	800fb8c <_dtoa_r+0x34>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e7df      	b.n	800fdce <_dtoa_r+0x276>
 800fe0e:	bf00      	nop
 800fe10:	636f4361 	.word	0x636f4361
 800fe14:	3fd287a7 	.word	0x3fd287a7
 800fe18:	8b60c8b3 	.word	0x8b60c8b3
 800fe1c:	3fc68a28 	.word	0x3fc68a28
 800fe20:	509f79fb 	.word	0x509f79fb
 800fe24:	3fd34413 	.word	0x3fd34413
 800fe28:	08013fbe 	.word	0x08013fbe
 800fe2c:	08013fd5 	.word	0x08013fd5
 800fe30:	7ff00000 	.word	0x7ff00000
 800fe34:	08013fba 	.word	0x08013fba
 800fe38:	08013fb1 	.word	0x08013fb1
 800fe3c:	08013e35 	.word	0x08013e35
 800fe40:	3ff80000 	.word	0x3ff80000
 800fe44:	080141a8 	.word	0x080141a8
 800fe48:	08014030 	.word	0x08014030
 800fe4c:	2501      	movs	r5, #1
 800fe4e:	2300      	movs	r3, #0
 800fe50:	9306      	str	r3, [sp, #24]
 800fe52:	9508      	str	r5, [sp, #32]
 800fe54:	f04f 33ff 	mov.w	r3, #4294967295
 800fe58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	2312      	movs	r3, #18
 800fe60:	e7b0      	b.n	800fdc4 <_dtoa_r+0x26c>
 800fe62:	2301      	movs	r3, #1
 800fe64:	9308      	str	r3, [sp, #32]
 800fe66:	e7f5      	b.n	800fe54 <_dtoa_r+0x2fc>
 800fe68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe6e:	e7b8      	b.n	800fde2 <_dtoa_r+0x28a>
 800fe70:	3101      	adds	r1, #1
 800fe72:	6041      	str	r1, [r0, #4]
 800fe74:	0052      	lsls	r2, r2, #1
 800fe76:	e7b8      	b.n	800fdea <_dtoa_r+0x292>
 800fe78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe7a:	9a01      	ldr	r2, [sp, #4]
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	9b03      	ldr	r3, [sp, #12]
 800fe80:	2b0e      	cmp	r3, #14
 800fe82:	f200 809d 	bhi.w	800ffc0 <_dtoa_r+0x468>
 800fe86:	2d00      	cmp	r5, #0
 800fe88:	f000 809a 	beq.w	800ffc0 <_dtoa_r+0x468>
 800fe8c:	9b00      	ldr	r3, [sp, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	dd32      	ble.n	800fef8 <_dtoa_r+0x3a0>
 800fe92:	4ab7      	ldr	r2, [pc, #732]	; (8010170 <_dtoa_r+0x618>)
 800fe94:	f003 030f 	and.w	r3, r3, #15
 800fe98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fea0:	9b00      	ldr	r3, [sp, #0]
 800fea2:	05d8      	lsls	r0, r3, #23
 800fea4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fea8:	d516      	bpl.n	800fed8 <_dtoa_r+0x380>
 800feaa:	4bb2      	ldr	r3, [pc, #712]	; (8010174 <_dtoa_r+0x61c>)
 800feac:	ec51 0b19 	vmov	r0, r1, d9
 800feb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800feb4:	f7f0 fcf2 	bl	800089c <__aeabi_ddiv>
 800feb8:	f007 070f 	and.w	r7, r7, #15
 800febc:	4682      	mov	sl, r0
 800febe:	468b      	mov	fp, r1
 800fec0:	2503      	movs	r5, #3
 800fec2:	4eac      	ldr	r6, [pc, #688]	; (8010174 <_dtoa_r+0x61c>)
 800fec4:	b957      	cbnz	r7, 800fedc <_dtoa_r+0x384>
 800fec6:	4642      	mov	r2, r8
 800fec8:	464b      	mov	r3, r9
 800feca:	4650      	mov	r0, sl
 800fecc:	4659      	mov	r1, fp
 800fece:	f7f0 fce5 	bl	800089c <__aeabi_ddiv>
 800fed2:	4682      	mov	sl, r0
 800fed4:	468b      	mov	fp, r1
 800fed6:	e028      	b.n	800ff2a <_dtoa_r+0x3d2>
 800fed8:	2502      	movs	r5, #2
 800feda:	e7f2      	b.n	800fec2 <_dtoa_r+0x36a>
 800fedc:	07f9      	lsls	r1, r7, #31
 800fede:	d508      	bpl.n	800fef2 <_dtoa_r+0x39a>
 800fee0:	4640      	mov	r0, r8
 800fee2:	4649      	mov	r1, r9
 800fee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fee8:	f7f0 fbae 	bl	8000648 <__aeabi_dmul>
 800feec:	3501      	adds	r5, #1
 800feee:	4680      	mov	r8, r0
 800fef0:	4689      	mov	r9, r1
 800fef2:	107f      	asrs	r7, r7, #1
 800fef4:	3608      	adds	r6, #8
 800fef6:	e7e5      	b.n	800fec4 <_dtoa_r+0x36c>
 800fef8:	f000 809b 	beq.w	8010032 <_dtoa_r+0x4da>
 800fefc:	9b00      	ldr	r3, [sp, #0]
 800fefe:	4f9d      	ldr	r7, [pc, #628]	; (8010174 <_dtoa_r+0x61c>)
 800ff00:	425e      	negs	r6, r3
 800ff02:	4b9b      	ldr	r3, [pc, #620]	; (8010170 <_dtoa_r+0x618>)
 800ff04:	f006 020f 	and.w	r2, r6, #15
 800ff08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff10:	ec51 0b19 	vmov	r0, r1, d9
 800ff14:	f7f0 fb98 	bl	8000648 <__aeabi_dmul>
 800ff18:	1136      	asrs	r6, r6, #4
 800ff1a:	4682      	mov	sl, r0
 800ff1c:	468b      	mov	fp, r1
 800ff1e:	2300      	movs	r3, #0
 800ff20:	2502      	movs	r5, #2
 800ff22:	2e00      	cmp	r6, #0
 800ff24:	d17a      	bne.n	801001c <_dtoa_r+0x4c4>
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1d3      	bne.n	800fed2 <_dtoa_r+0x37a>
 800ff2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 8082 	beq.w	8010036 <_dtoa_r+0x4de>
 800ff32:	4b91      	ldr	r3, [pc, #580]	; (8010178 <_dtoa_r+0x620>)
 800ff34:	2200      	movs	r2, #0
 800ff36:	4650      	mov	r0, sl
 800ff38:	4659      	mov	r1, fp
 800ff3a:	f7f0 fdf7 	bl	8000b2c <__aeabi_dcmplt>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d079      	beq.n	8010036 <_dtoa_r+0x4de>
 800ff42:	9b03      	ldr	r3, [sp, #12]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d076      	beq.n	8010036 <_dtoa_r+0x4de>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	dd36      	ble.n	800ffbc <_dtoa_r+0x464>
 800ff4e:	9b00      	ldr	r3, [sp, #0]
 800ff50:	4650      	mov	r0, sl
 800ff52:	4659      	mov	r1, fp
 800ff54:	1e5f      	subs	r7, r3, #1
 800ff56:	2200      	movs	r2, #0
 800ff58:	4b88      	ldr	r3, [pc, #544]	; (801017c <_dtoa_r+0x624>)
 800ff5a:	f7f0 fb75 	bl	8000648 <__aeabi_dmul>
 800ff5e:	9e02      	ldr	r6, [sp, #8]
 800ff60:	4682      	mov	sl, r0
 800ff62:	468b      	mov	fp, r1
 800ff64:	3501      	adds	r5, #1
 800ff66:	4628      	mov	r0, r5
 800ff68:	f7f0 fb04 	bl	8000574 <__aeabi_i2d>
 800ff6c:	4652      	mov	r2, sl
 800ff6e:	465b      	mov	r3, fp
 800ff70:	f7f0 fb6a 	bl	8000648 <__aeabi_dmul>
 800ff74:	4b82      	ldr	r3, [pc, #520]	; (8010180 <_dtoa_r+0x628>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	f7f0 f9b0 	bl	80002dc <__adddf3>
 800ff7c:	46d0      	mov	r8, sl
 800ff7e:	46d9      	mov	r9, fp
 800ff80:	4682      	mov	sl, r0
 800ff82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ff86:	2e00      	cmp	r6, #0
 800ff88:	d158      	bne.n	801003c <_dtoa_r+0x4e4>
 800ff8a:	4b7e      	ldr	r3, [pc, #504]	; (8010184 <_dtoa_r+0x62c>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	4640      	mov	r0, r8
 800ff90:	4649      	mov	r1, r9
 800ff92:	f7f0 f9a1 	bl	80002d8 <__aeabi_dsub>
 800ff96:	4652      	mov	r2, sl
 800ff98:	465b      	mov	r3, fp
 800ff9a:	4680      	mov	r8, r0
 800ff9c:	4689      	mov	r9, r1
 800ff9e:	f7f0 fde3 	bl	8000b68 <__aeabi_dcmpgt>
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	f040 8295 	bne.w	80104d2 <_dtoa_r+0x97a>
 800ffa8:	4652      	mov	r2, sl
 800ffaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ffae:	4640      	mov	r0, r8
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	f7f0 fdbb 	bl	8000b2c <__aeabi_dcmplt>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	f040 8289 	bne.w	80104ce <_dtoa_r+0x976>
 800ffbc:	ec5b ab19 	vmov	sl, fp, d9
 800ffc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f2c0 8148 	blt.w	8010258 <_dtoa_r+0x700>
 800ffc8:	9a00      	ldr	r2, [sp, #0]
 800ffca:	2a0e      	cmp	r2, #14
 800ffcc:	f300 8144 	bgt.w	8010258 <_dtoa_r+0x700>
 800ffd0:	4b67      	ldr	r3, [pc, #412]	; (8010170 <_dtoa_r+0x618>)
 800ffd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f280 80d5 	bge.w	801018c <_dtoa_r+0x634>
 800ffe2:	9b03      	ldr	r3, [sp, #12]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f300 80d1 	bgt.w	801018c <_dtoa_r+0x634>
 800ffea:	f040 826f 	bne.w	80104cc <_dtoa_r+0x974>
 800ffee:	4b65      	ldr	r3, [pc, #404]	; (8010184 <_dtoa_r+0x62c>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	4640      	mov	r0, r8
 800fff4:	4649      	mov	r1, r9
 800fff6:	f7f0 fb27 	bl	8000648 <__aeabi_dmul>
 800fffa:	4652      	mov	r2, sl
 800fffc:	465b      	mov	r3, fp
 800fffe:	f7f0 fda9 	bl	8000b54 <__aeabi_dcmpge>
 8010002:	9e03      	ldr	r6, [sp, #12]
 8010004:	4637      	mov	r7, r6
 8010006:	2800      	cmp	r0, #0
 8010008:	f040 8245 	bne.w	8010496 <_dtoa_r+0x93e>
 801000c:	9d01      	ldr	r5, [sp, #4]
 801000e:	2331      	movs	r3, #49	; 0x31
 8010010:	f805 3b01 	strb.w	r3, [r5], #1
 8010014:	9b00      	ldr	r3, [sp, #0]
 8010016:	3301      	adds	r3, #1
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	e240      	b.n	801049e <_dtoa_r+0x946>
 801001c:	07f2      	lsls	r2, r6, #31
 801001e:	d505      	bpl.n	801002c <_dtoa_r+0x4d4>
 8010020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010024:	f7f0 fb10 	bl	8000648 <__aeabi_dmul>
 8010028:	3501      	adds	r5, #1
 801002a:	2301      	movs	r3, #1
 801002c:	1076      	asrs	r6, r6, #1
 801002e:	3708      	adds	r7, #8
 8010030:	e777      	b.n	800ff22 <_dtoa_r+0x3ca>
 8010032:	2502      	movs	r5, #2
 8010034:	e779      	b.n	800ff2a <_dtoa_r+0x3d2>
 8010036:	9f00      	ldr	r7, [sp, #0]
 8010038:	9e03      	ldr	r6, [sp, #12]
 801003a:	e794      	b.n	800ff66 <_dtoa_r+0x40e>
 801003c:	9901      	ldr	r1, [sp, #4]
 801003e:	4b4c      	ldr	r3, [pc, #304]	; (8010170 <_dtoa_r+0x618>)
 8010040:	4431      	add	r1, r6
 8010042:	910d      	str	r1, [sp, #52]	; 0x34
 8010044:	9908      	ldr	r1, [sp, #32]
 8010046:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801004a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801004e:	2900      	cmp	r1, #0
 8010050:	d043      	beq.n	80100da <_dtoa_r+0x582>
 8010052:	494d      	ldr	r1, [pc, #308]	; (8010188 <_dtoa_r+0x630>)
 8010054:	2000      	movs	r0, #0
 8010056:	f7f0 fc21 	bl	800089c <__aeabi_ddiv>
 801005a:	4652      	mov	r2, sl
 801005c:	465b      	mov	r3, fp
 801005e:	f7f0 f93b 	bl	80002d8 <__aeabi_dsub>
 8010062:	9d01      	ldr	r5, [sp, #4]
 8010064:	4682      	mov	sl, r0
 8010066:	468b      	mov	fp, r1
 8010068:	4649      	mov	r1, r9
 801006a:	4640      	mov	r0, r8
 801006c:	f7f0 fd9c 	bl	8000ba8 <__aeabi_d2iz>
 8010070:	4606      	mov	r6, r0
 8010072:	f7f0 fa7f 	bl	8000574 <__aeabi_i2d>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4640      	mov	r0, r8
 801007c:	4649      	mov	r1, r9
 801007e:	f7f0 f92b 	bl	80002d8 <__aeabi_dsub>
 8010082:	3630      	adds	r6, #48	; 0x30
 8010084:	f805 6b01 	strb.w	r6, [r5], #1
 8010088:	4652      	mov	r2, sl
 801008a:	465b      	mov	r3, fp
 801008c:	4680      	mov	r8, r0
 801008e:	4689      	mov	r9, r1
 8010090:	f7f0 fd4c 	bl	8000b2c <__aeabi_dcmplt>
 8010094:	2800      	cmp	r0, #0
 8010096:	d163      	bne.n	8010160 <_dtoa_r+0x608>
 8010098:	4642      	mov	r2, r8
 801009a:	464b      	mov	r3, r9
 801009c:	4936      	ldr	r1, [pc, #216]	; (8010178 <_dtoa_r+0x620>)
 801009e:	2000      	movs	r0, #0
 80100a0:	f7f0 f91a 	bl	80002d8 <__aeabi_dsub>
 80100a4:	4652      	mov	r2, sl
 80100a6:	465b      	mov	r3, fp
 80100a8:	f7f0 fd40 	bl	8000b2c <__aeabi_dcmplt>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f040 80b5 	bne.w	801021c <_dtoa_r+0x6c4>
 80100b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100b4:	429d      	cmp	r5, r3
 80100b6:	d081      	beq.n	800ffbc <_dtoa_r+0x464>
 80100b8:	4b30      	ldr	r3, [pc, #192]	; (801017c <_dtoa_r+0x624>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	4650      	mov	r0, sl
 80100be:	4659      	mov	r1, fp
 80100c0:	f7f0 fac2 	bl	8000648 <__aeabi_dmul>
 80100c4:	4b2d      	ldr	r3, [pc, #180]	; (801017c <_dtoa_r+0x624>)
 80100c6:	4682      	mov	sl, r0
 80100c8:	468b      	mov	fp, r1
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	2200      	movs	r2, #0
 80100d0:	f7f0 faba 	bl	8000648 <__aeabi_dmul>
 80100d4:	4680      	mov	r8, r0
 80100d6:	4689      	mov	r9, r1
 80100d8:	e7c6      	b.n	8010068 <_dtoa_r+0x510>
 80100da:	4650      	mov	r0, sl
 80100dc:	4659      	mov	r1, fp
 80100de:	f7f0 fab3 	bl	8000648 <__aeabi_dmul>
 80100e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100e4:	9d01      	ldr	r5, [sp, #4]
 80100e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80100e8:	4682      	mov	sl, r0
 80100ea:	468b      	mov	fp, r1
 80100ec:	4649      	mov	r1, r9
 80100ee:	4640      	mov	r0, r8
 80100f0:	f7f0 fd5a 	bl	8000ba8 <__aeabi_d2iz>
 80100f4:	4606      	mov	r6, r0
 80100f6:	f7f0 fa3d 	bl	8000574 <__aeabi_i2d>
 80100fa:	3630      	adds	r6, #48	; 0x30
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	4640      	mov	r0, r8
 8010102:	4649      	mov	r1, r9
 8010104:	f7f0 f8e8 	bl	80002d8 <__aeabi_dsub>
 8010108:	f805 6b01 	strb.w	r6, [r5], #1
 801010c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801010e:	429d      	cmp	r5, r3
 8010110:	4680      	mov	r8, r0
 8010112:	4689      	mov	r9, r1
 8010114:	f04f 0200 	mov.w	r2, #0
 8010118:	d124      	bne.n	8010164 <_dtoa_r+0x60c>
 801011a:	4b1b      	ldr	r3, [pc, #108]	; (8010188 <_dtoa_r+0x630>)
 801011c:	4650      	mov	r0, sl
 801011e:	4659      	mov	r1, fp
 8010120:	f7f0 f8dc 	bl	80002dc <__adddf3>
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	4640      	mov	r0, r8
 801012a:	4649      	mov	r1, r9
 801012c:	f7f0 fd1c 	bl	8000b68 <__aeabi_dcmpgt>
 8010130:	2800      	cmp	r0, #0
 8010132:	d173      	bne.n	801021c <_dtoa_r+0x6c4>
 8010134:	4652      	mov	r2, sl
 8010136:	465b      	mov	r3, fp
 8010138:	4913      	ldr	r1, [pc, #76]	; (8010188 <_dtoa_r+0x630>)
 801013a:	2000      	movs	r0, #0
 801013c:	f7f0 f8cc 	bl	80002d8 <__aeabi_dsub>
 8010140:	4602      	mov	r2, r0
 8010142:	460b      	mov	r3, r1
 8010144:	4640      	mov	r0, r8
 8010146:	4649      	mov	r1, r9
 8010148:	f7f0 fcf0 	bl	8000b2c <__aeabi_dcmplt>
 801014c:	2800      	cmp	r0, #0
 801014e:	f43f af35 	beq.w	800ffbc <_dtoa_r+0x464>
 8010152:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010154:	1e6b      	subs	r3, r5, #1
 8010156:	930f      	str	r3, [sp, #60]	; 0x3c
 8010158:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801015c:	2b30      	cmp	r3, #48	; 0x30
 801015e:	d0f8      	beq.n	8010152 <_dtoa_r+0x5fa>
 8010160:	9700      	str	r7, [sp, #0]
 8010162:	e049      	b.n	80101f8 <_dtoa_r+0x6a0>
 8010164:	4b05      	ldr	r3, [pc, #20]	; (801017c <_dtoa_r+0x624>)
 8010166:	f7f0 fa6f 	bl	8000648 <__aeabi_dmul>
 801016a:	4680      	mov	r8, r0
 801016c:	4689      	mov	r9, r1
 801016e:	e7bd      	b.n	80100ec <_dtoa_r+0x594>
 8010170:	080141a8 	.word	0x080141a8
 8010174:	08014180 	.word	0x08014180
 8010178:	3ff00000 	.word	0x3ff00000
 801017c:	40240000 	.word	0x40240000
 8010180:	401c0000 	.word	0x401c0000
 8010184:	40140000 	.word	0x40140000
 8010188:	3fe00000 	.word	0x3fe00000
 801018c:	9d01      	ldr	r5, [sp, #4]
 801018e:	4656      	mov	r6, sl
 8010190:	465f      	mov	r7, fp
 8010192:	4642      	mov	r2, r8
 8010194:	464b      	mov	r3, r9
 8010196:	4630      	mov	r0, r6
 8010198:	4639      	mov	r1, r7
 801019a:	f7f0 fb7f 	bl	800089c <__aeabi_ddiv>
 801019e:	f7f0 fd03 	bl	8000ba8 <__aeabi_d2iz>
 80101a2:	4682      	mov	sl, r0
 80101a4:	f7f0 f9e6 	bl	8000574 <__aeabi_i2d>
 80101a8:	4642      	mov	r2, r8
 80101aa:	464b      	mov	r3, r9
 80101ac:	f7f0 fa4c 	bl	8000648 <__aeabi_dmul>
 80101b0:	4602      	mov	r2, r0
 80101b2:	460b      	mov	r3, r1
 80101b4:	4630      	mov	r0, r6
 80101b6:	4639      	mov	r1, r7
 80101b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80101bc:	f7f0 f88c 	bl	80002d8 <__aeabi_dsub>
 80101c0:	f805 6b01 	strb.w	r6, [r5], #1
 80101c4:	9e01      	ldr	r6, [sp, #4]
 80101c6:	9f03      	ldr	r7, [sp, #12]
 80101c8:	1bae      	subs	r6, r5, r6
 80101ca:	42b7      	cmp	r7, r6
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	d135      	bne.n	801023e <_dtoa_r+0x6e6>
 80101d2:	f7f0 f883 	bl	80002dc <__adddf3>
 80101d6:	4642      	mov	r2, r8
 80101d8:	464b      	mov	r3, r9
 80101da:	4606      	mov	r6, r0
 80101dc:	460f      	mov	r7, r1
 80101de:	f7f0 fcc3 	bl	8000b68 <__aeabi_dcmpgt>
 80101e2:	b9d0      	cbnz	r0, 801021a <_dtoa_r+0x6c2>
 80101e4:	4642      	mov	r2, r8
 80101e6:	464b      	mov	r3, r9
 80101e8:	4630      	mov	r0, r6
 80101ea:	4639      	mov	r1, r7
 80101ec:	f7f0 fc94 	bl	8000b18 <__aeabi_dcmpeq>
 80101f0:	b110      	cbz	r0, 80101f8 <_dtoa_r+0x6a0>
 80101f2:	f01a 0f01 	tst.w	sl, #1
 80101f6:	d110      	bne.n	801021a <_dtoa_r+0x6c2>
 80101f8:	4620      	mov	r0, r4
 80101fa:	ee18 1a10 	vmov	r1, s16
 80101fe:	f001 f885 	bl	801130c <_Bfree>
 8010202:	2300      	movs	r3, #0
 8010204:	9800      	ldr	r0, [sp, #0]
 8010206:	702b      	strb	r3, [r5, #0]
 8010208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801020a:	3001      	adds	r0, #1
 801020c:	6018      	str	r0, [r3, #0]
 801020e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010210:	2b00      	cmp	r3, #0
 8010212:	f43f acf1 	beq.w	800fbf8 <_dtoa_r+0xa0>
 8010216:	601d      	str	r5, [r3, #0]
 8010218:	e4ee      	b.n	800fbf8 <_dtoa_r+0xa0>
 801021a:	9f00      	ldr	r7, [sp, #0]
 801021c:	462b      	mov	r3, r5
 801021e:	461d      	mov	r5, r3
 8010220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010224:	2a39      	cmp	r2, #57	; 0x39
 8010226:	d106      	bne.n	8010236 <_dtoa_r+0x6de>
 8010228:	9a01      	ldr	r2, [sp, #4]
 801022a:	429a      	cmp	r2, r3
 801022c:	d1f7      	bne.n	801021e <_dtoa_r+0x6c6>
 801022e:	9901      	ldr	r1, [sp, #4]
 8010230:	2230      	movs	r2, #48	; 0x30
 8010232:	3701      	adds	r7, #1
 8010234:	700a      	strb	r2, [r1, #0]
 8010236:	781a      	ldrb	r2, [r3, #0]
 8010238:	3201      	adds	r2, #1
 801023a:	701a      	strb	r2, [r3, #0]
 801023c:	e790      	b.n	8010160 <_dtoa_r+0x608>
 801023e:	4ba6      	ldr	r3, [pc, #664]	; (80104d8 <_dtoa_r+0x980>)
 8010240:	2200      	movs	r2, #0
 8010242:	f7f0 fa01 	bl	8000648 <__aeabi_dmul>
 8010246:	2200      	movs	r2, #0
 8010248:	2300      	movs	r3, #0
 801024a:	4606      	mov	r6, r0
 801024c:	460f      	mov	r7, r1
 801024e:	f7f0 fc63 	bl	8000b18 <__aeabi_dcmpeq>
 8010252:	2800      	cmp	r0, #0
 8010254:	d09d      	beq.n	8010192 <_dtoa_r+0x63a>
 8010256:	e7cf      	b.n	80101f8 <_dtoa_r+0x6a0>
 8010258:	9a08      	ldr	r2, [sp, #32]
 801025a:	2a00      	cmp	r2, #0
 801025c:	f000 80d7 	beq.w	801040e <_dtoa_r+0x8b6>
 8010260:	9a06      	ldr	r2, [sp, #24]
 8010262:	2a01      	cmp	r2, #1
 8010264:	f300 80ba 	bgt.w	80103dc <_dtoa_r+0x884>
 8010268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801026a:	2a00      	cmp	r2, #0
 801026c:	f000 80b2 	beq.w	80103d4 <_dtoa_r+0x87c>
 8010270:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010274:	9e07      	ldr	r6, [sp, #28]
 8010276:	9d04      	ldr	r5, [sp, #16]
 8010278:	9a04      	ldr	r2, [sp, #16]
 801027a:	441a      	add	r2, r3
 801027c:	9204      	str	r2, [sp, #16]
 801027e:	9a05      	ldr	r2, [sp, #20]
 8010280:	2101      	movs	r1, #1
 8010282:	441a      	add	r2, r3
 8010284:	4620      	mov	r0, r4
 8010286:	9205      	str	r2, [sp, #20]
 8010288:	f001 f942 	bl	8011510 <__i2b>
 801028c:	4607      	mov	r7, r0
 801028e:	2d00      	cmp	r5, #0
 8010290:	dd0c      	ble.n	80102ac <_dtoa_r+0x754>
 8010292:	9b05      	ldr	r3, [sp, #20]
 8010294:	2b00      	cmp	r3, #0
 8010296:	dd09      	ble.n	80102ac <_dtoa_r+0x754>
 8010298:	42ab      	cmp	r3, r5
 801029a:	9a04      	ldr	r2, [sp, #16]
 801029c:	bfa8      	it	ge
 801029e:	462b      	movge	r3, r5
 80102a0:	1ad2      	subs	r2, r2, r3
 80102a2:	9204      	str	r2, [sp, #16]
 80102a4:	9a05      	ldr	r2, [sp, #20]
 80102a6:	1aed      	subs	r5, r5, r3
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	9305      	str	r3, [sp, #20]
 80102ac:	9b07      	ldr	r3, [sp, #28]
 80102ae:	b31b      	cbz	r3, 80102f8 <_dtoa_r+0x7a0>
 80102b0:	9b08      	ldr	r3, [sp, #32]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 80af 	beq.w	8010416 <_dtoa_r+0x8be>
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	dd13      	ble.n	80102e4 <_dtoa_r+0x78c>
 80102bc:	4639      	mov	r1, r7
 80102be:	4632      	mov	r2, r6
 80102c0:	4620      	mov	r0, r4
 80102c2:	f001 f9e5 	bl	8011690 <__pow5mult>
 80102c6:	ee18 2a10 	vmov	r2, s16
 80102ca:	4601      	mov	r1, r0
 80102cc:	4607      	mov	r7, r0
 80102ce:	4620      	mov	r0, r4
 80102d0:	f001 f934 	bl	801153c <__multiply>
 80102d4:	ee18 1a10 	vmov	r1, s16
 80102d8:	4680      	mov	r8, r0
 80102da:	4620      	mov	r0, r4
 80102dc:	f001 f816 	bl	801130c <_Bfree>
 80102e0:	ee08 8a10 	vmov	s16, r8
 80102e4:	9b07      	ldr	r3, [sp, #28]
 80102e6:	1b9a      	subs	r2, r3, r6
 80102e8:	d006      	beq.n	80102f8 <_dtoa_r+0x7a0>
 80102ea:	ee18 1a10 	vmov	r1, s16
 80102ee:	4620      	mov	r0, r4
 80102f0:	f001 f9ce 	bl	8011690 <__pow5mult>
 80102f4:	ee08 0a10 	vmov	s16, r0
 80102f8:	2101      	movs	r1, #1
 80102fa:	4620      	mov	r0, r4
 80102fc:	f001 f908 	bl	8011510 <__i2b>
 8010300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010302:	2b00      	cmp	r3, #0
 8010304:	4606      	mov	r6, r0
 8010306:	f340 8088 	ble.w	801041a <_dtoa_r+0x8c2>
 801030a:	461a      	mov	r2, r3
 801030c:	4601      	mov	r1, r0
 801030e:	4620      	mov	r0, r4
 8010310:	f001 f9be 	bl	8011690 <__pow5mult>
 8010314:	9b06      	ldr	r3, [sp, #24]
 8010316:	2b01      	cmp	r3, #1
 8010318:	4606      	mov	r6, r0
 801031a:	f340 8081 	ble.w	8010420 <_dtoa_r+0x8c8>
 801031e:	f04f 0800 	mov.w	r8, #0
 8010322:	6933      	ldr	r3, [r6, #16]
 8010324:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010328:	6918      	ldr	r0, [r3, #16]
 801032a:	f001 f8a1 	bl	8011470 <__hi0bits>
 801032e:	f1c0 0020 	rsb	r0, r0, #32
 8010332:	9b05      	ldr	r3, [sp, #20]
 8010334:	4418      	add	r0, r3
 8010336:	f010 001f 	ands.w	r0, r0, #31
 801033a:	f000 8092 	beq.w	8010462 <_dtoa_r+0x90a>
 801033e:	f1c0 0320 	rsb	r3, r0, #32
 8010342:	2b04      	cmp	r3, #4
 8010344:	f340 808a 	ble.w	801045c <_dtoa_r+0x904>
 8010348:	f1c0 001c 	rsb	r0, r0, #28
 801034c:	9b04      	ldr	r3, [sp, #16]
 801034e:	4403      	add	r3, r0
 8010350:	9304      	str	r3, [sp, #16]
 8010352:	9b05      	ldr	r3, [sp, #20]
 8010354:	4403      	add	r3, r0
 8010356:	4405      	add	r5, r0
 8010358:	9305      	str	r3, [sp, #20]
 801035a:	9b04      	ldr	r3, [sp, #16]
 801035c:	2b00      	cmp	r3, #0
 801035e:	dd07      	ble.n	8010370 <_dtoa_r+0x818>
 8010360:	ee18 1a10 	vmov	r1, s16
 8010364:	461a      	mov	r2, r3
 8010366:	4620      	mov	r0, r4
 8010368:	f001 f9ec 	bl	8011744 <__lshift>
 801036c:	ee08 0a10 	vmov	s16, r0
 8010370:	9b05      	ldr	r3, [sp, #20]
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd05      	ble.n	8010382 <_dtoa_r+0x82a>
 8010376:	4631      	mov	r1, r6
 8010378:	461a      	mov	r2, r3
 801037a:	4620      	mov	r0, r4
 801037c:	f001 f9e2 	bl	8011744 <__lshift>
 8010380:	4606      	mov	r6, r0
 8010382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010384:	2b00      	cmp	r3, #0
 8010386:	d06e      	beq.n	8010466 <_dtoa_r+0x90e>
 8010388:	ee18 0a10 	vmov	r0, s16
 801038c:	4631      	mov	r1, r6
 801038e:	f001 fa49 	bl	8011824 <__mcmp>
 8010392:	2800      	cmp	r0, #0
 8010394:	da67      	bge.n	8010466 <_dtoa_r+0x90e>
 8010396:	9b00      	ldr	r3, [sp, #0]
 8010398:	3b01      	subs	r3, #1
 801039a:	ee18 1a10 	vmov	r1, s16
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	220a      	movs	r2, #10
 80103a2:	2300      	movs	r3, #0
 80103a4:	4620      	mov	r0, r4
 80103a6:	f000 ffd3 	bl	8011350 <__multadd>
 80103aa:	9b08      	ldr	r3, [sp, #32]
 80103ac:	ee08 0a10 	vmov	s16, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f000 81b1 	beq.w	8010718 <_dtoa_r+0xbc0>
 80103b6:	2300      	movs	r3, #0
 80103b8:	4639      	mov	r1, r7
 80103ba:	220a      	movs	r2, #10
 80103bc:	4620      	mov	r0, r4
 80103be:	f000 ffc7 	bl	8011350 <__multadd>
 80103c2:	9b02      	ldr	r3, [sp, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	4607      	mov	r7, r0
 80103c8:	f300 808e 	bgt.w	80104e8 <_dtoa_r+0x990>
 80103cc:	9b06      	ldr	r3, [sp, #24]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	dc51      	bgt.n	8010476 <_dtoa_r+0x91e>
 80103d2:	e089      	b.n	80104e8 <_dtoa_r+0x990>
 80103d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103da:	e74b      	b.n	8010274 <_dtoa_r+0x71c>
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	1e5e      	subs	r6, r3, #1
 80103e0:	9b07      	ldr	r3, [sp, #28]
 80103e2:	42b3      	cmp	r3, r6
 80103e4:	bfbf      	itttt	lt
 80103e6:	9b07      	ldrlt	r3, [sp, #28]
 80103e8:	9607      	strlt	r6, [sp, #28]
 80103ea:	1af2      	sublt	r2, r6, r3
 80103ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80103ee:	bfb6      	itet	lt
 80103f0:	189b      	addlt	r3, r3, r2
 80103f2:	1b9e      	subge	r6, r3, r6
 80103f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80103f6:	9b03      	ldr	r3, [sp, #12]
 80103f8:	bfb8      	it	lt
 80103fa:	2600      	movlt	r6, #0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	bfb7      	itett	lt
 8010400:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010404:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010408:	1a9d      	sublt	r5, r3, r2
 801040a:	2300      	movlt	r3, #0
 801040c:	e734      	b.n	8010278 <_dtoa_r+0x720>
 801040e:	9e07      	ldr	r6, [sp, #28]
 8010410:	9d04      	ldr	r5, [sp, #16]
 8010412:	9f08      	ldr	r7, [sp, #32]
 8010414:	e73b      	b.n	801028e <_dtoa_r+0x736>
 8010416:	9a07      	ldr	r2, [sp, #28]
 8010418:	e767      	b.n	80102ea <_dtoa_r+0x792>
 801041a:	9b06      	ldr	r3, [sp, #24]
 801041c:	2b01      	cmp	r3, #1
 801041e:	dc18      	bgt.n	8010452 <_dtoa_r+0x8fa>
 8010420:	f1ba 0f00 	cmp.w	sl, #0
 8010424:	d115      	bne.n	8010452 <_dtoa_r+0x8fa>
 8010426:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801042a:	b993      	cbnz	r3, 8010452 <_dtoa_r+0x8fa>
 801042c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010430:	0d1b      	lsrs	r3, r3, #20
 8010432:	051b      	lsls	r3, r3, #20
 8010434:	b183      	cbz	r3, 8010458 <_dtoa_r+0x900>
 8010436:	9b04      	ldr	r3, [sp, #16]
 8010438:	3301      	adds	r3, #1
 801043a:	9304      	str	r3, [sp, #16]
 801043c:	9b05      	ldr	r3, [sp, #20]
 801043e:	3301      	adds	r3, #1
 8010440:	9305      	str	r3, [sp, #20]
 8010442:	f04f 0801 	mov.w	r8, #1
 8010446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010448:	2b00      	cmp	r3, #0
 801044a:	f47f af6a 	bne.w	8010322 <_dtoa_r+0x7ca>
 801044e:	2001      	movs	r0, #1
 8010450:	e76f      	b.n	8010332 <_dtoa_r+0x7da>
 8010452:	f04f 0800 	mov.w	r8, #0
 8010456:	e7f6      	b.n	8010446 <_dtoa_r+0x8ee>
 8010458:	4698      	mov	r8, r3
 801045a:	e7f4      	b.n	8010446 <_dtoa_r+0x8ee>
 801045c:	f43f af7d 	beq.w	801035a <_dtoa_r+0x802>
 8010460:	4618      	mov	r0, r3
 8010462:	301c      	adds	r0, #28
 8010464:	e772      	b.n	801034c <_dtoa_r+0x7f4>
 8010466:	9b03      	ldr	r3, [sp, #12]
 8010468:	2b00      	cmp	r3, #0
 801046a:	dc37      	bgt.n	80104dc <_dtoa_r+0x984>
 801046c:	9b06      	ldr	r3, [sp, #24]
 801046e:	2b02      	cmp	r3, #2
 8010470:	dd34      	ble.n	80104dc <_dtoa_r+0x984>
 8010472:	9b03      	ldr	r3, [sp, #12]
 8010474:	9302      	str	r3, [sp, #8]
 8010476:	9b02      	ldr	r3, [sp, #8]
 8010478:	b96b      	cbnz	r3, 8010496 <_dtoa_r+0x93e>
 801047a:	4631      	mov	r1, r6
 801047c:	2205      	movs	r2, #5
 801047e:	4620      	mov	r0, r4
 8010480:	f000 ff66 	bl	8011350 <__multadd>
 8010484:	4601      	mov	r1, r0
 8010486:	4606      	mov	r6, r0
 8010488:	ee18 0a10 	vmov	r0, s16
 801048c:	f001 f9ca 	bl	8011824 <__mcmp>
 8010490:	2800      	cmp	r0, #0
 8010492:	f73f adbb 	bgt.w	801000c <_dtoa_r+0x4b4>
 8010496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010498:	9d01      	ldr	r5, [sp, #4]
 801049a:	43db      	mvns	r3, r3
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	f04f 0800 	mov.w	r8, #0
 80104a2:	4631      	mov	r1, r6
 80104a4:	4620      	mov	r0, r4
 80104a6:	f000 ff31 	bl	801130c <_Bfree>
 80104aa:	2f00      	cmp	r7, #0
 80104ac:	f43f aea4 	beq.w	80101f8 <_dtoa_r+0x6a0>
 80104b0:	f1b8 0f00 	cmp.w	r8, #0
 80104b4:	d005      	beq.n	80104c2 <_dtoa_r+0x96a>
 80104b6:	45b8      	cmp	r8, r7
 80104b8:	d003      	beq.n	80104c2 <_dtoa_r+0x96a>
 80104ba:	4641      	mov	r1, r8
 80104bc:	4620      	mov	r0, r4
 80104be:	f000 ff25 	bl	801130c <_Bfree>
 80104c2:	4639      	mov	r1, r7
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 ff21 	bl	801130c <_Bfree>
 80104ca:	e695      	b.n	80101f8 <_dtoa_r+0x6a0>
 80104cc:	2600      	movs	r6, #0
 80104ce:	4637      	mov	r7, r6
 80104d0:	e7e1      	b.n	8010496 <_dtoa_r+0x93e>
 80104d2:	9700      	str	r7, [sp, #0]
 80104d4:	4637      	mov	r7, r6
 80104d6:	e599      	b.n	801000c <_dtoa_r+0x4b4>
 80104d8:	40240000 	.word	0x40240000
 80104dc:	9b08      	ldr	r3, [sp, #32]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 80ca 	beq.w	8010678 <_dtoa_r+0xb20>
 80104e4:	9b03      	ldr	r3, [sp, #12]
 80104e6:	9302      	str	r3, [sp, #8]
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	dd05      	ble.n	80104f8 <_dtoa_r+0x9a0>
 80104ec:	4639      	mov	r1, r7
 80104ee:	462a      	mov	r2, r5
 80104f0:	4620      	mov	r0, r4
 80104f2:	f001 f927 	bl	8011744 <__lshift>
 80104f6:	4607      	mov	r7, r0
 80104f8:	f1b8 0f00 	cmp.w	r8, #0
 80104fc:	d05b      	beq.n	80105b6 <_dtoa_r+0xa5e>
 80104fe:	6879      	ldr	r1, [r7, #4]
 8010500:	4620      	mov	r0, r4
 8010502:	f000 fec3 	bl	801128c <_Balloc>
 8010506:	4605      	mov	r5, r0
 8010508:	b928      	cbnz	r0, 8010516 <_dtoa_r+0x9be>
 801050a:	4b87      	ldr	r3, [pc, #540]	; (8010728 <_dtoa_r+0xbd0>)
 801050c:	4602      	mov	r2, r0
 801050e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010512:	f7ff bb3b 	b.w	800fb8c <_dtoa_r+0x34>
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	3202      	adds	r2, #2
 801051a:	0092      	lsls	r2, r2, #2
 801051c:	f107 010c 	add.w	r1, r7, #12
 8010520:	300c      	adds	r0, #12
 8010522:	f7fd fbc3 	bl	800dcac <memcpy>
 8010526:	2201      	movs	r2, #1
 8010528:	4629      	mov	r1, r5
 801052a:	4620      	mov	r0, r4
 801052c:	f001 f90a 	bl	8011744 <__lshift>
 8010530:	9b01      	ldr	r3, [sp, #4]
 8010532:	f103 0901 	add.w	r9, r3, #1
 8010536:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801053a:	4413      	add	r3, r2
 801053c:	9305      	str	r3, [sp, #20]
 801053e:	f00a 0301 	and.w	r3, sl, #1
 8010542:	46b8      	mov	r8, r7
 8010544:	9304      	str	r3, [sp, #16]
 8010546:	4607      	mov	r7, r0
 8010548:	4631      	mov	r1, r6
 801054a:	ee18 0a10 	vmov	r0, s16
 801054e:	f7ff fa75 	bl	800fa3c <quorem>
 8010552:	4641      	mov	r1, r8
 8010554:	9002      	str	r0, [sp, #8]
 8010556:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801055a:	ee18 0a10 	vmov	r0, s16
 801055e:	f001 f961 	bl	8011824 <__mcmp>
 8010562:	463a      	mov	r2, r7
 8010564:	9003      	str	r0, [sp, #12]
 8010566:	4631      	mov	r1, r6
 8010568:	4620      	mov	r0, r4
 801056a:	f001 f977 	bl	801185c <__mdiff>
 801056e:	68c2      	ldr	r2, [r0, #12]
 8010570:	f109 3bff 	add.w	fp, r9, #4294967295
 8010574:	4605      	mov	r5, r0
 8010576:	bb02      	cbnz	r2, 80105ba <_dtoa_r+0xa62>
 8010578:	4601      	mov	r1, r0
 801057a:	ee18 0a10 	vmov	r0, s16
 801057e:	f001 f951 	bl	8011824 <__mcmp>
 8010582:	4602      	mov	r2, r0
 8010584:	4629      	mov	r1, r5
 8010586:	4620      	mov	r0, r4
 8010588:	9207      	str	r2, [sp, #28]
 801058a:	f000 febf 	bl	801130c <_Bfree>
 801058e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010592:	ea43 0102 	orr.w	r1, r3, r2
 8010596:	9b04      	ldr	r3, [sp, #16]
 8010598:	430b      	orrs	r3, r1
 801059a:	464d      	mov	r5, r9
 801059c:	d10f      	bne.n	80105be <_dtoa_r+0xa66>
 801059e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105a2:	d02a      	beq.n	80105fa <_dtoa_r+0xaa2>
 80105a4:	9b03      	ldr	r3, [sp, #12]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	dd02      	ble.n	80105b0 <_dtoa_r+0xa58>
 80105aa:	9b02      	ldr	r3, [sp, #8]
 80105ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80105b0:	f88b a000 	strb.w	sl, [fp]
 80105b4:	e775      	b.n	80104a2 <_dtoa_r+0x94a>
 80105b6:	4638      	mov	r0, r7
 80105b8:	e7ba      	b.n	8010530 <_dtoa_r+0x9d8>
 80105ba:	2201      	movs	r2, #1
 80105bc:	e7e2      	b.n	8010584 <_dtoa_r+0xa2c>
 80105be:	9b03      	ldr	r3, [sp, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	db04      	blt.n	80105ce <_dtoa_r+0xa76>
 80105c4:	9906      	ldr	r1, [sp, #24]
 80105c6:	430b      	orrs	r3, r1
 80105c8:	9904      	ldr	r1, [sp, #16]
 80105ca:	430b      	orrs	r3, r1
 80105cc:	d122      	bne.n	8010614 <_dtoa_r+0xabc>
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	ddee      	ble.n	80105b0 <_dtoa_r+0xa58>
 80105d2:	ee18 1a10 	vmov	r1, s16
 80105d6:	2201      	movs	r2, #1
 80105d8:	4620      	mov	r0, r4
 80105da:	f001 f8b3 	bl	8011744 <__lshift>
 80105de:	4631      	mov	r1, r6
 80105e0:	ee08 0a10 	vmov	s16, r0
 80105e4:	f001 f91e 	bl	8011824 <__mcmp>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	dc03      	bgt.n	80105f4 <_dtoa_r+0xa9c>
 80105ec:	d1e0      	bne.n	80105b0 <_dtoa_r+0xa58>
 80105ee:	f01a 0f01 	tst.w	sl, #1
 80105f2:	d0dd      	beq.n	80105b0 <_dtoa_r+0xa58>
 80105f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105f8:	d1d7      	bne.n	80105aa <_dtoa_r+0xa52>
 80105fa:	2339      	movs	r3, #57	; 0x39
 80105fc:	f88b 3000 	strb.w	r3, [fp]
 8010600:	462b      	mov	r3, r5
 8010602:	461d      	mov	r5, r3
 8010604:	3b01      	subs	r3, #1
 8010606:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801060a:	2a39      	cmp	r2, #57	; 0x39
 801060c:	d071      	beq.n	80106f2 <_dtoa_r+0xb9a>
 801060e:	3201      	adds	r2, #1
 8010610:	701a      	strb	r2, [r3, #0]
 8010612:	e746      	b.n	80104a2 <_dtoa_r+0x94a>
 8010614:	2a00      	cmp	r2, #0
 8010616:	dd07      	ble.n	8010628 <_dtoa_r+0xad0>
 8010618:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801061c:	d0ed      	beq.n	80105fa <_dtoa_r+0xaa2>
 801061e:	f10a 0301 	add.w	r3, sl, #1
 8010622:	f88b 3000 	strb.w	r3, [fp]
 8010626:	e73c      	b.n	80104a2 <_dtoa_r+0x94a>
 8010628:	9b05      	ldr	r3, [sp, #20]
 801062a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801062e:	4599      	cmp	r9, r3
 8010630:	d047      	beq.n	80106c2 <_dtoa_r+0xb6a>
 8010632:	ee18 1a10 	vmov	r1, s16
 8010636:	2300      	movs	r3, #0
 8010638:	220a      	movs	r2, #10
 801063a:	4620      	mov	r0, r4
 801063c:	f000 fe88 	bl	8011350 <__multadd>
 8010640:	45b8      	cmp	r8, r7
 8010642:	ee08 0a10 	vmov	s16, r0
 8010646:	f04f 0300 	mov.w	r3, #0
 801064a:	f04f 020a 	mov.w	r2, #10
 801064e:	4641      	mov	r1, r8
 8010650:	4620      	mov	r0, r4
 8010652:	d106      	bne.n	8010662 <_dtoa_r+0xb0a>
 8010654:	f000 fe7c 	bl	8011350 <__multadd>
 8010658:	4680      	mov	r8, r0
 801065a:	4607      	mov	r7, r0
 801065c:	f109 0901 	add.w	r9, r9, #1
 8010660:	e772      	b.n	8010548 <_dtoa_r+0x9f0>
 8010662:	f000 fe75 	bl	8011350 <__multadd>
 8010666:	4639      	mov	r1, r7
 8010668:	4680      	mov	r8, r0
 801066a:	2300      	movs	r3, #0
 801066c:	220a      	movs	r2, #10
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fe6e 	bl	8011350 <__multadd>
 8010674:	4607      	mov	r7, r0
 8010676:	e7f1      	b.n	801065c <_dtoa_r+0xb04>
 8010678:	9b03      	ldr	r3, [sp, #12]
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	9d01      	ldr	r5, [sp, #4]
 801067e:	ee18 0a10 	vmov	r0, s16
 8010682:	4631      	mov	r1, r6
 8010684:	f7ff f9da 	bl	800fa3c <quorem>
 8010688:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	f805 ab01 	strb.w	sl, [r5], #1
 8010692:	1aea      	subs	r2, r5, r3
 8010694:	9b02      	ldr	r3, [sp, #8]
 8010696:	4293      	cmp	r3, r2
 8010698:	dd09      	ble.n	80106ae <_dtoa_r+0xb56>
 801069a:	ee18 1a10 	vmov	r1, s16
 801069e:	2300      	movs	r3, #0
 80106a0:	220a      	movs	r2, #10
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 fe54 	bl	8011350 <__multadd>
 80106a8:	ee08 0a10 	vmov	s16, r0
 80106ac:	e7e7      	b.n	801067e <_dtoa_r+0xb26>
 80106ae:	9b02      	ldr	r3, [sp, #8]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	bfc8      	it	gt
 80106b4:	461d      	movgt	r5, r3
 80106b6:	9b01      	ldr	r3, [sp, #4]
 80106b8:	bfd8      	it	le
 80106ba:	2501      	movle	r5, #1
 80106bc:	441d      	add	r5, r3
 80106be:	f04f 0800 	mov.w	r8, #0
 80106c2:	ee18 1a10 	vmov	r1, s16
 80106c6:	2201      	movs	r2, #1
 80106c8:	4620      	mov	r0, r4
 80106ca:	f001 f83b 	bl	8011744 <__lshift>
 80106ce:	4631      	mov	r1, r6
 80106d0:	ee08 0a10 	vmov	s16, r0
 80106d4:	f001 f8a6 	bl	8011824 <__mcmp>
 80106d8:	2800      	cmp	r0, #0
 80106da:	dc91      	bgt.n	8010600 <_dtoa_r+0xaa8>
 80106dc:	d102      	bne.n	80106e4 <_dtoa_r+0xb8c>
 80106de:	f01a 0f01 	tst.w	sl, #1
 80106e2:	d18d      	bne.n	8010600 <_dtoa_r+0xaa8>
 80106e4:	462b      	mov	r3, r5
 80106e6:	461d      	mov	r5, r3
 80106e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106ec:	2a30      	cmp	r2, #48	; 0x30
 80106ee:	d0fa      	beq.n	80106e6 <_dtoa_r+0xb8e>
 80106f0:	e6d7      	b.n	80104a2 <_dtoa_r+0x94a>
 80106f2:	9a01      	ldr	r2, [sp, #4]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d184      	bne.n	8010602 <_dtoa_r+0xaaa>
 80106f8:	9b00      	ldr	r3, [sp, #0]
 80106fa:	3301      	adds	r3, #1
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	2331      	movs	r3, #49	; 0x31
 8010700:	7013      	strb	r3, [r2, #0]
 8010702:	e6ce      	b.n	80104a2 <_dtoa_r+0x94a>
 8010704:	4b09      	ldr	r3, [pc, #36]	; (801072c <_dtoa_r+0xbd4>)
 8010706:	f7ff ba95 	b.w	800fc34 <_dtoa_r+0xdc>
 801070a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801070c:	2b00      	cmp	r3, #0
 801070e:	f47f aa6e 	bne.w	800fbee <_dtoa_r+0x96>
 8010712:	4b07      	ldr	r3, [pc, #28]	; (8010730 <_dtoa_r+0xbd8>)
 8010714:	f7ff ba8e 	b.w	800fc34 <_dtoa_r+0xdc>
 8010718:	9b02      	ldr	r3, [sp, #8]
 801071a:	2b00      	cmp	r3, #0
 801071c:	dcae      	bgt.n	801067c <_dtoa_r+0xb24>
 801071e:	9b06      	ldr	r3, [sp, #24]
 8010720:	2b02      	cmp	r3, #2
 8010722:	f73f aea8 	bgt.w	8010476 <_dtoa_r+0x91e>
 8010726:	e7a9      	b.n	801067c <_dtoa_r+0xb24>
 8010728:	08014030 	.word	0x08014030
 801072c:	08013e34 	.word	0x08013e34
 8010730:	08013fb1 	.word	0x08013fb1

08010734 <__sflush_r>:
 8010734:	898a      	ldrh	r2, [r1, #12]
 8010736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801073a:	4605      	mov	r5, r0
 801073c:	0710      	lsls	r0, r2, #28
 801073e:	460c      	mov	r4, r1
 8010740:	d458      	bmi.n	80107f4 <__sflush_r+0xc0>
 8010742:	684b      	ldr	r3, [r1, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	dc05      	bgt.n	8010754 <__sflush_r+0x20>
 8010748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801074a:	2b00      	cmp	r3, #0
 801074c:	dc02      	bgt.n	8010754 <__sflush_r+0x20>
 801074e:	2000      	movs	r0, #0
 8010750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010756:	2e00      	cmp	r6, #0
 8010758:	d0f9      	beq.n	801074e <__sflush_r+0x1a>
 801075a:	2300      	movs	r3, #0
 801075c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010760:	682f      	ldr	r7, [r5, #0]
 8010762:	602b      	str	r3, [r5, #0]
 8010764:	d032      	beq.n	80107cc <__sflush_r+0x98>
 8010766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010768:	89a3      	ldrh	r3, [r4, #12]
 801076a:	075a      	lsls	r2, r3, #29
 801076c:	d505      	bpl.n	801077a <__sflush_r+0x46>
 801076e:	6863      	ldr	r3, [r4, #4]
 8010770:	1ac0      	subs	r0, r0, r3
 8010772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010774:	b10b      	cbz	r3, 801077a <__sflush_r+0x46>
 8010776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010778:	1ac0      	subs	r0, r0, r3
 801077a:	2300      	movs	r3, #0
 801077c:	4602      	mov	r2, r0
 801077e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010780:	6a21      	ldr	r1, [r4, #32]
 8010782:	4628      	mov	r0, r5
 8010784:	47b0      	blx	r6
 8010786:	1c43      	adds	r3, r0, #1
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	d106      	bne.n	801079a <__sflush_r+0x66>
 801078c:	6829      	ldr	r1, [r5, #0]
 801078e:	291d      	cmp	r1, #29
 8010790:	d82c      	bhi.n	80107ec <__sflush_r+0xb8>
 8010792:	4a2a      	ldr	r2, [pc, #168]	; (801083c <__sflush_r+0x108>)
 8010794:	40ca      	lsrs	r2, r1
 8010796:	07d6      	lsls	r6, r2, #31
 8010798:	d528      	bpl.n	80107ec <__sflush_r+0xb8>
 801079a:	2200      	movs	r2, #0
 801079c:	6062      	str	r2, [r4, #4]
 801079e:	04d9      	lsls	r1, r3, #19
 80107a0:	6922      	ldr	r2, [r4, #16]
 80107a2:	6022      	str	r2, [r4, #0]
 80107a4:	d504      	bpl.n	80107b0 <__sflush_r+0x7c>
 80107a6:	1c42      	adds	r2, r0, #1
 80107a8:	d101      	bne.n	80107ae <__sflush_r+0x7a>
 80107aa:	682b      	ldr	r3, [r5, #0]
 80107ac:	b903      	cbnz	r3, 80107b0 <__sflush_r+0x7c>
 80107ae:	6560      	str	r0, [r4, #84]	; 0x54
 80107b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107b2:	602f      	str	r7, [r5, #0]
 80107b4:	2900      	cmp	r1, #0
 80107b6:	d0ca      	beq.n	801074e <__sflush_r+0x1a>
 80107b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107bc:	4299      	cmp	r1, r3
 80107be:	d002      	beq.n	80107c6 <__sflush_r+0x92>
 80107c0:	4628      	mov	r0, r5
 80107c2:	f001 fa3b 	bl	8011c3c <_free_r>
 80107c6:	2000      	movs	r0, #0
 80107c8:	6360      	str	r0, [r4, #52]	; 0x34
 80107ca:	e7c1      	b.n	8010750 <__sflush_r+0x1c>
 80107cc:	6a21      	ldr	r1, [r4, #32]
 80107ce:	2301      	movs	r3, #1
 80107d0:	4628      	mov	r0, r5
 80107d2:	47b0      	blx	r6
 80107d4:	1c41      	adds	r1, r0, #1
 80107d6:	d1c7      	bne.n	8010768 <__sflush_r+0x34>
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0c4      	beq.n	8010768 <__sflush_r+0x34>
 80107de:	2b1d      	cmp	r3, #29
 80107e0:	d001      	beq.n	80107e6 <__sflush_r+0xb2>
 80107e2:	2b16      	cmp	r3, #22
 80107e4:	d101      	bne.n	80107ea <__sflush_r+0xb6>
 80107e6:	602f      	str	r7, [r5, #0]
 80107e8:	e7b1      	b.n	801074e <__sflush_r+0x1a>
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107f0:	81a3      	strh	r3, [r4, #12]
 80107f2:	e7ad      	b.n	8010750 <__sflush_r+0x1c>
 80107f4:	690f      	ldr	r7, [r1, #16]
 80107f6:	2f00      	cmp	r7, #0
 80107f8:	d0a9      	beq.n	801074e <__sflush_r+0x1a>
 80107fa:	0793      	lsls	r3, r2, #30
 80107fc:	680e      	ldr	r6, [r1, #0]
 80107fe:	bf08      	it	eq
 8010800:	694b      	ldreq	r3, [r1, #20]
 8010802:	600f      	str	r7, [r1, #0]
 8010804:	bf18      	it	ne
 8010806:	2300      	movne	r3, #0
 8010808:	eba6 0807 	sub.w	r8, r6, r7
 801080c:	608b      	str	r3, [r1, #8]
 801080e:	f1b8 0f00 	cmp.w	r8, #0
 8010812:	dd9c      	ble.n	801074e <__sflush_r+0x1a>
 8010814:	6a21      	ldr	r1, [r4, #32]
 8010816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010818:	4643      	mov	r3, r8
 801081a:	463a      	mov	r2, r7
 801081c:	4628      	mov	r0, r5
 801081e:	47b0      	blx	r6
 8010820:	2800      	cmp	r0, #0
 8010822:	dc06      	bgt.n	8010832 <__sflush_r+0xfe>
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801082a:	81a3      	strh	r3, [r4, #12]
 801082c:	f04f 30ff 	mov.w	r0, #4294967295
 8010830:	e78e      	b.n	8010750 <__sflush_r+0x1c>
 8010832:	4407      	add	r7, r0
 8010834:	eba8 0800 	sub.w	r8, r8, r0
 8010838:	e7e9      	b.n	801080e <__sflush_r+0xda>
 801083a:	bf00      	nop
 801083c:	20400001 	.word	0x20400001

08010840 <_fflush_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	690b      	ldr	r3, [r1, #16]
 8010844:	4605      	mov	r5, r0
 8010846:	460c      	mov	r4, r1
 8010848:	b913      	cbnz	r3, 8010850 <_fflush_r+0x10>
 801084a:	2500      	movs	r5, #0
 801084c:	4628      	mov	r0, r5
 801084e:	bd38      	pop	{r3, r4, r5, pc}
 8010850:	b118      	cbz	r0, 801085a <_fflush_r+0x1a>
 8010852:	6983      	ldr	r3, [r0, #24]
 8010854:	b90b      	cbnz	r3, 801085a <_fflush_r+0x1a>
 8010856:	f000 f887 	bl	8010968 <__sinit>
 801085a:	4b14      	ldr	r3, [pc, #80]	; (80108ac <_fflush_r+0x6c>)
 801085c:	429c      	cmp	r4, r3
 801085e:	d11b      	bne.n	8010898 <_fflush_r+0x58>
 8010860:	686c      	ldr	r4, [r5, #4]
 8010862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d0ef      	beq.n	801084a <_fflush_r+0xa>
 801086a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801086c:	07d0      	lsls	r0, r2, #31
 801086e:	d404      	bmi.n	801087a <_fflush_r+0x3a>
 8010870:	0599      	lsls	r1, r3, #22
 8010872:	d402      	bmi.n	801087a <_fflush_r+0x3a>
 8010874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010876:	f000 fc88 	bl	801118a <__retarget_lock_acquire_recursive>
 801087a:	4628      	mov	r0, r5
 801087c:	4621      	mov	r1, r4
 801087e:	f7ff ff59 	bl	8010734 <__sflush_r>
 8010882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010884:	07da      	lsls	r2, r3, #31
 8010886:	4605      	mov	r5, r0
 8010888:	d4e0      	bmi.n	801084c <_fflush_r+0xc>
 801088a:	89a3      	ldrh	r3, [r4, #12]
 801088c:	059b      	lsls	r3, r3, #22
 801088e:	d4dd      	bmi.n	801084c <_fflush_r+0xc>
 8010890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010892:	f000 fc7b 	bl	801118c <__retarget_lock_release_recursive>
 8010896:	e7d9      	b.n	801084c <_fflush_r+0xc>
 8010898:	4b05      	ldr	r3, [pc, #20]	; (80108b0 <_fflush_r+0x70>)
 801089a:	429c      	cmp	r4, r3
 801089c:	d101      	bne.n	80108a2 <_fflush_r+0x62>
 801089e:	68ac      	ldr	r4, [r5, #8]
 80108a0:	e7df      	b.n	8010862 <_fflush_r+0x22>
 80108a2:	4b04      	ldr	r3, [pc, #16]	; (80108b4 <_fflush_r+0x74>)
 80108a4:	429c      	cmp	r4, r3
 80108a6:	bf08      	it	eq
 80108a8:	68ec      	ldreq	r4, [r5, #12]
 80108aa:	e7da      	b.n	8010862 <_fflush_r+0x22>
 80108ac:	08014064 	.word	0x08014064
 80108b0:	08014084 	.word	0x08014084
 80108b4:	08014044 	.word	0x08014044

080108b8 <std>:
 80108b8:	2300      	movs	r3, #0
 80108ba:	b510      	push	{r4, lr}
 80108bc:	4604      	mov	r4, r0
 80108be:	e9c0 3300 	strd	r3, r3, [r0]
 80108c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108c6:	6083      	str	r3, [r0, #8]
 80108c8:	8181      	strh	r1, [r0, #12]
 80108ca:	6643      	str	r3, [r0, #100]	; 0x64
 80108cc:	81c2      	strh	r2, [r0, #14]
 80108ce:	6183      	str	r3, [r0, #24]
 80108d0:	4619      	mov	r1, r3
 80108d2:	2208      	movs	r2, #8
 80108d4:	305c      	adds	r0, #92	; 0x5c
 80108d6:	f7fd f9f7 	bl	800dcc8 <memset>
 80108da:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <std+0x38>)
 80108dc:	6263      	str	r3, [r4, #36]	; 0x24
 80108de:	4b05      	ldr	r3, [pc, #20]	; (80108f4 <std+0x3c>)
 80108e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80108e2:	4b05      	ldr	r3, [pc, #20]	; (80108f8 <std+0x40>)
 80108e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80108e6:	4b05      	ldr	r3, [pc, #20]	; (80108fc <std+0x44>)
 80108e8:	6224      	str	r4, [r4, #32]
 80108ea:	6323      	str	r3, [r4, #48]	; 0x30
 80108ec:	bd10      	pop	{r4, pc}
 80108ee:	bf00      	nop
 80108f0:	08012399 	.word	0x08012399
 80108f4:	080123bb 	.word	0x080123bb
 80108f8:	080123f3 	.word	0x080123f3
 80108fc:	08012417 	.word	0x08012417

08010900 <_cleanup_r>:
 8010900:	4901      	ldr	r1, [pc, #4]	; (8010908 <_cleanup_r+0x8>)
 8010902:	f000 b8af 	b.w	8010a64 <_fwalk_reent>
 8010906:	bf00      	nop
 8010908:	08010841 	.word	0x08010841

0801090c <__sfmoreglue>:
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	2268      	movs	r2, #104	; 0x68
 8010910:	1e4d      	subs	r5, r1, #1
 8010912:	4355      	muls	r5, r2
 8010914:	460e      	mov	r6, r1
 8010916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801091a:	f001 f9fb 	bl	8011d14 <_malloc_r>
 801091e:	4604      	mov	r4, r0
 8010920:	b140      	cbz	r0, 8010934 <__sfmoreglue+0x28>
 8010922:	2100      	movs	r1, #0
 8010924:	e9c0 1600 	strd	r1, r6, [r0]
 8010928:	300c      	adds	r0, #12
 801092a:	60a0      	str	r0, [r4, #8]
 801092c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010930:	f7fd f9ca 	bl	800dcc8 <memset>
 8010934:	4620      	mov	r0, r4
 8010936:	bd70      	pop	{r4, r5, r6, pc}

08010938 <__sfp_lock_acquire>:
 8010938:	4801      	ldr	r0, [pc, #4]	; (8010940 <__sfp_lock_acquire+0x8>)
 801093a:	f000 bc26 	b.w	801118a <__retarget_lock_acquire_recursive>
 801093e:	bf00      	nop
 8010940:	200098dd 	.word	0x200098dd

08010944 <__sfp_lock_release>:
 8010944:	4801      	ldr	r0, [pc, #4]	; (801094c <__sfp_lock_release+0x8>)
 8010946:	f000 bc21 	b.w	801118c <__retarget_lock_release_recursive>
 801094a:	bf00      	nop
 801094c:	200098dd 	.word	0x200098dd

08010950 <__sinit_lock_acquire>:
 8010950:	4801      	ldr	r0, [pc, #4]	; (8010958 <__sinit_lock_acquire+0x8>)
 8010952:	f000 bc1a 	b.w	801118a <__retarget_lock_acquire_recursive>
 8010956:	bf00      	nop
 8010958:	200098de 	.word	0x200098de

0801095c <__sinit_lock_release>:
 801095c:	4801      	ldr	r0, [pc, #4]	; (8010964 <__sinit_lock_release+0x8>)
 801095e:	f000 bc15 	b.w	801118c <__retarget_lock_release_recursive>
 8010962:	bf00      	nop
 8010964:	200098de 	.word	0x200098de

08010968 <__sinit>:
 8010968:	b510      	push	{r4, lr}
 801096a:	4604      	mov	r4, r0
 801096c:	f7ff fff0 	bl	8010950 <__sinit_lock_acquire>
 8010970:	69a3      	ldr	r3, [r4, #24]
 8010972:	b11b      	cbz	r3, 801097c <__sinit+0x14>
 8010974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010978:	f7ff bff0 	b.w	801095c <__sinit_lock_release>
 801097c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010980:	6523      	str	r3, [r4, #80]	; 0x50
 8010982:	4b13      	ldr	r3, [pc, #76]	; (80109d0 <__sinit+0x68>)
 8010984:	4a13      	ldr	r2, [pc, #76]	; (80109d4 <__sinit+0x6c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	62a2      	str	r2, [r4, #40]	; 0x28
 801098a:	42a3      	cmp	r3, r4
 801098c:	bf04      	itt	eq
 801098e:	2301      	moveq	r3, #1
 8010990:	61a3      	streq	r3, [r4, #24]
 8010992:	4620      	mov	r0, r4
 8010994:	f000 f820 	bl	80109d8 <__sfp>
 8010998:	6060      	str	r0, [r4, #4]
 801099a:	4620      	mov	r0, r4
 801099c:	f000 f81c 	bl	80109d8 <__sfp>
 80109a0:	60a0      	str	r0, [r4, #8]
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 f818 	bl	80109d8 <__sfp>
 80109a8:	2200      	movs	r2, #0
 80109aa:	60e0      	str	r0, [r4, #12]
 80109ac:	2104      	movs	r1, #4
 80109ae:	6860      	ldr	r0, [r4, #4]
 80109b0:	f7ff ff82 	bl	80108b8 <std>
 80109b4:	68a0      	ldr	r0, [r4, #8]
 80109b6:	2201      	movs	r2, #1
 80109b8:	2109      	movs	r1, #9
 80109ba:	f7ff ff7d 	bl	80108b8 <std>
 80109be:	68e0      	ldr	r0, [r4, #12]
 80109c0:	2202      	movs	r2, #2
 80109c2:	2112      	movs	r1, #18
 80109c4:	f7ff ff78 	bl	80108b8 <std>
 80109c8:	2301      	movs	r3, #1
 80109ca:	61a3      	str	r3, [r4, #24]
 80109cc:	e7d2      	b.n	8010974 <__sinit+0xc>
 80109ce:	bf00      	nop
 80109d0:	08013e20 	.word	0x08013e20
 80109d4:	08010901 	.word	0x08010901

080109d8 <__sfp>:
 80109d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109da:	4607      	mov	r7, r0
 80109dc:	f7ff ffac 	bl	8010938 <__sfp_lock_acquire>
 80109e0:	4b1e      	ldr	r3, [pc, #120]	; (8010a5c <__sfp+0x84>)
 80109e2:	681e      	ldr	r6, [r3, #0]
 80109e4:	69b3      	ldr	r3, [r6, #24]
 80109e6:	b913      	cbnz	r3, 80109ee <__sfp+0x16>
 80109e8:	4630      	mov	r0, r6
 80109ea:	f7ff ffbd 	bl	8010968 <__sinit>
 80109ee:	3648      	adds	r6, #72	; 0x48
 80109f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	d503      	bpl.n	8010a00 <__sfp+0x28>
 80109f8:	6833      	ldr	r3, [r6, #0]
 80109fa:	b30b      	cbz	r3, 8010a40 <__sfp+0x68>
 80109fc:	6836      	ldr	r6, [r6, #0]
 80109fe:	e7f7      	b.n	80109f0 <__sfp+0x18>
 8010a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a04:	b9d5      	cbnz	r5, 8010a3c <__sfp+0x64>
 8010a06:	4b16      	ldr	r3, [pc, #88]	; (8010a60 <__sfp+0x88>)
 8010a08:	60e3      	str	r3, [r4, #12]
 8010a0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a0e:	6665      	str	r5, [r4, #100]	; 0x64
 8010a10:	f000 fbba 	bl	8011188 <__retarget_lock_init_recursive>
 8010a14:	f7ff ff96 	bl	8010944 <__sfp_lock_release>
 8010a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a20:	6025      	str	r5, [r4, #0]
 8010a22:	61a5      	str	r5, [r4, #24]
 8010a24:	2208      	movs	r2, #8
 8010a26:	4629      	mov	r1, r5
 8010a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a2c:	f7fd f94c 	bl	800dcc8 <memset>
 8010a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a38:	4620      	mov	r0, r4
 8010a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a3c:	3468      	adds	r4, #104	; 0x68
 8010a3e:	e7d9      	b.n	80109f4 <__sfp+0x1c>
 8010a40:	2104      	movs	r1, #4
 8010a42:	4638      	mov	r0, r7
 8010a44:	f7ff ff62 	bl	801090c <__sfmoreglue>
 8010a48:	4604      	mov	r4, r0
 8010a4a:	6030      	str	r0, [r6, #0]
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d1d5      	bne.n	80109fc <__sfp+0x24>
 8010a50:	f7ff ff78 	bl	8010944 <__sfp_lock_release>
 8010a54:	230c      	movs	r3, #12
 8010a56:	603b      	str	r3, [r7, #0]
 8010a58:	e7ee      	b.n	8010a38 <__sfp+0x60>
 8010a5a:	bf00      	nop
 8010a5c:	08013e20 	.word	0x08013e20
 8010a60:	ffff0001 	.word	0xffff0001

08010a64 <_fwalk_reent>:
 8010a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a68:	4606      	mov	r6, r0
 8010a6a:	4688      	mov	r8, r1
 8010a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a70:	2700      	movs	r7, #0
 8010a72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a76:	f1b9 0901 	subs.w	r9, r9, #1
 8010a7a:	d505      	bpl.n	8010a88 <_fwalk_reent+0x24>
 8010a7c:	6824      	ldr	r4, [r4, #0]
 8010a7e:	2c00      	cmp	r4, #0
 8010a80:	d1f7      	bne.n	8010a72 <_fwalk_reent+0xe>
 8010a82:	4638      	mov	r0, r7
 8010a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a88:	89ab      	ldrh	r3, [r5, #12]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d907      	bls.n	8010a9e <_fwalk_reent+0x3a>
 8010a8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a92:	3301      	adds	r3, #1
 8010a94:	d003      	beq.n	8010a9e <_fwalk_reent+0x3a>
 8010a96:	4629      	mov	r1, r5
 8010a98:	4630      	mov	r0, r6
 8010a9a:	47c0      	blx	r8
 8010a9c:	4307      	orrs	r7, r0
 8010a9e:	3568      	adds	r5, #104	; 0x68
 8010aa0:	e7e9      	b.n	8010a76 <_fwalk_reent+0x12>

08010aa2 <rshift>:
 8010aa2:	6903      	ldr	r3, [r0, #16]
 8010aa4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aac:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ab0:	f100 0414 	add.w	r4, r0, #20
 8010ab4:	dd45      	ble.n	8010b42 <rshift+0xa0>
 8010ab6:	f011 011f 	ands.w	r1, r1, #31
 8010aba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010abe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ac2:	d10c      	bne.n	8010ade <rshift+0x3c>
 8010ac4:	f100 0710 	add.w	r7, r0, #16
 8010ac8:	4629      	mov	r1, r5
 8010aca:	42b1      	cmp	r1, r6
 8010acc:	d334      	bcc.n	8010b38 <rshift+0x96>
 8010ace:	1a9b      	subs	r3, r3, r2
 8010ad0:	009b      	lsls	r3, r3, #2
 8010ad2:	1eea      	subs	r2, r5, #3
 8010ad4:	4296      	cmp	r6, r2
 8010ad6:	bf38      	it	cc
 8010ad8:	2300      	movcc	r3, #0
 8010ada:	4423      	add	r3, r4
 8010adc:	e015      	b.n	8010b0a <rshift+0x68>
 8010ade:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ae2:	f1c1 0820 	rsb	r8, r1, #32
 8010ae6:	40cf      	lsrs	r7, r1
 8010ae8:	f105 0e04 	add.w	lr, r5, #4
 8010aec:	46a1      	mov	r9, r4
 8010aee:	4576      	cmp	r6, lr
 8010af0:	46f4      	mov	ip, lr
 8010af2:	d815      	bhi.n	8010b20 <rshift+0x7e>
 8010af4:	1a9a      	subs	r2, r3, r2
 8010af6:	0092      	lsls	r2, r2, #2
 8010af8:	3a04      	subs	r2, #4
 8010afa:	3501      	adds	r5, #1
 8010afc:	42ae      	cmp	r6, r5
 8010afe:	bf38      	it	cc
 8010b00:	2200      	movcc	r2, #0
 8010b02:	18a3      	adds	r3, r4, r2
 8010b04:	50a7      	str	r7, [r4, r2]
 8010b06:	b107      	cbz	r7, 8010b0a <rshift+0x68>
 8010b08:	3304      	adds	r3, #4
 8010b0a:	1b1a      	subs	r2, r3, r4
 8010b0c:	42a3      	cmp	r3, r4
 8010b0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b12:	bf08      	it	eq
 8010b14:	2300      	moveq	r3, #0
 8010b16:	6102      	str	r2, [r0, #16]
 8010b18:	bf08      	it	eq
 8010b1a:	6143      	streq	r3, [r0, #20]
 8010b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b20:	f8dc c000 	ldr.w	ip, [ip]
 8010b24:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b28:	ea4c 0707 	orr.w	r7, ip, r7
 8010b2c:	f849 7b04 	str.w	r7, [r9], #4
 8010b30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b34:	40cf      	lsrs	r7, r1
 8010b36:	e7da      	b.n	8010aee <rshift+0x4c>
 8010b38:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b40:	e7c3      	b.n	8010aca <rshift+0x28>
 8010b42:	4623      	mov	r3, r4
 8010b44:	e7e1      	b.n	8010b0a <rshift+0x68>

08010b46 <__hexdig_fun>:
 8010b46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010b4a:	2b09      	cmp	r3, #9
 8010b4c:	d802      	bhi.n	8010b54 <__hexdig_fun+0xe>
 8010b4e:	3820      	subs	r0, #32
 8010b50:	b2c0      	uxtb	r0, r0
 8010b52:	4770      	bx	lr
 8010b54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010b58:	2b05      	cmp	r3, #5
 8010b5a:	d801      	bhi.n	8010b60 <__hexdig_fun+0x1a>
 8010b5c:	3847      	subs	r0, #71	; 0x47
 8010b5e:	e7f7      	b.n	8010b50 <__hexdig_fun+0xa>
 8010b60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010b64:	2b05      	cmp	r3, #5
 8010b66:	d801      	bhi.n	8010b6c <__hexdig_fun+0x26>
 8010b68:	3827      	subs	r0, #39	; 0x27
 8010b6a:	e7f1      	b.n	8010b50 <__hexdig_fun+0xa>
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	4770      	bx	lr

08010b70 <__gethex>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	ed2d 8b02 	vpush	{d8}
 8010b78:	b089      	sub	sp, #36	; 0x24
 8010b7a:	ee08 0a10 	vmov	s16, r0
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	4bb4      	ldr	r3, [pc, #720]	; (8010e54 <__gethex+0x2e4>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	9301      	str	r3, [sp, #4]
 8010b86:	4618      	mov	r0, r3
 8010b88:	468b      	mov	fp, r1
 8010b8a:	4690      	mov	r8, r2
 8010b8c:	f7ef fb48 	bl	8000220 <strlen>
 8010b90:	9b01      	ldr	r3, [sp, #4]
 8010b92:	f8db 2000 	ldr.w	r2, [fp]
 8010b96:	4403      	add	r3, r0
 8010b98:	4682      	mov	sl, r0
 8010b9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010b9e:	9305      	str	r3, [sp, #20]
 8010ba0:	1c93      	adds	r3, r2, #2
 8010ba2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010ba6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010baa:	32fe      	adds	r2, #254	; 0xfe
 8010bac:	18d1      	adds	r1, r2, r3
 8010bae:	461f      	mov	r7, r3
 8010bb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010bb4:	9100      	str	r1, [sp, #0]
 8010bb6:	2830      	cmp	r0, #48	; 0x30
 8010bb8:	d0f8      	beq.n	8010bac <__gethex+0x3c>
 8010bba:	f7ff ffc4 	bl	8010b46 <__hexdig_fun>
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d13a      	bne.n	8010c3a <__gethex+0xca>
 8010bc4:	9901      	ldr	r1, [sp, #4]
 8010bc6:	4652      	mov	r2, sl
 8010bc8:	4638      	mov	r0, r7
 8010bca:	f001 fc28 	bl	801241e <strncmp>
 8010bce:	4605      	mov	r5, r0
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d168      	bne.n	8010ca6 <__gethex+0x136>
 8010bd4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010bd8:	eb07 060a 	add.w	r6, r7, sl
 8010bdc:	f7ff ffb3 	bl	8010b46 <__hexdig_fun>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d062      	beq.n	8010caa <__gethex+0x13a>
 8010be4:	4633      	mov	r3, r6
 8010be6:	7818      	ldrb	r0, [r3, #0]
 8010be8:	2830      	cmp	r0, #48	; 0x30
 8010bea:	461f      	mov	r7, r3
 8010bec:	f103 0301 	add.w	r3, r3, #1
 8010bf0:	d0f9      	beq.n	8010be6 <__gethex+0x76>
 8010bf2:	f7ff ffa8 	bl	8010b46 <__hexdig_fun>
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	fab0 f480 	clz	r4, r0
 8010bfc:	0964      	lsrs	r4, r4, #5
 8010bfe:	4635      	mov	r5, r6
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	463a      	mov	r2, r7
 8010c04:	4616      	mov	r6, r2
 8010c06:	3201      	adds	r2, #1
 8010c08:	7830      	ldrb	r0, [r6, #0]
 8010c0a:	f7ff ff9c 	bl	8010b46 <__hexdig_fun>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d1f8      	bne.n	8010c04 <__gethex+0x94>
 8010c12:	9901      	ldr	r1, [sp, #4]
 8010c14:	4652      	mov	r2, sl
 8010c16:	4630      	mov	r0, r6
 8010c18:	f001 fc01 	bl	801241e <strncmp>
 8010c1c:	b980      	cbnz	r0, 8010c40 <__gethex+0xd0>
 8010c1e:	b94d      	cbnz	r5, 8010c34 <__gethex+0xc4>
 8010c20:	eb06 050a 	add.w	r5, r6, sl
 8010c24:	462a      	mov	r2, r5
 8010c26:	4616      	mov	r6, r2
 8010c28:	3201      	adds	r2, #1
 8010c2a:	7830      	ldrb	r0, [r6, #0]
 8010c2c:	f7ff ff8b 	bl	8010b46 <__hexdig_fun>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d1f8      	bne.n	8010c26 <__gethex+0xb6>
 8010c34:	1bad      	subs	r5, r5, r6
 8010c36:	00ad      	lsls	r5, r5, #2
 8010c38:	e004      	b.n	8010c44 <__gethex+0xd4>
 8010c3a:	2400      	movs	r4, #0
 8010c3c:	4625      	mov	r5, r4
 8010c3e:	e7e0      	b.n	8010c02 <__gethex+0x92>
 8010c40:	2d00      	cmp	r5, #0
 8010c42:	d1f7      	bne.n	8010c34 <__gethex+0xc4>
 8010c44:	7833      	ldrb	r3, [r6, #0]
 8010c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c4a:	2b50      	cmp	r3, #80	; 0x50
 8010c4c:	d13b      	bne.n	8010cc6 <__gethex+0x156>
 8010c4e:	7873      	ldrb	r3, [r6, #1]
 8010c50:	2b2b      	cmp	r3, #43	; 0x2b
 8010c52:	d02c      	beq.n	8010cae <__gethex+0x13e>
 8010c54:	2b2d      	cmp	r3, #45	; 0x2d
 8010c56:	d02e      	beq.n	8010cb6 <__gethex+0x146>
 8010c58:	1c71      	adds	r1, r6, #1
 8010c5a:	f04f 0900 	mov.w	r9, #0
 8010c5e:	7808      	ldrb	r0, [r1, #0]
 8010c60:	f7ff ff71 	bl	8010b46 <__hexdig_fun>
 8010c64:	1e43      	subs	r3, r0, #1
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	2b18      	cmp	r3, #24
 8010c6a:	d82c      	bhi.n	8010cc6 <__gethex+0x156>
 8010c6c:	f1a0 0210 	sub.w	r2, r0, #16
 8010c70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c74:	f7ff ff67 	bl	8010b46 <__hexdig_fun>
 8010c78:	1e43      	subs	r3, r0, #1
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	2b18      	cmp	r3, #24
 8010c7e:	d91d      	bls.n	8010cbc <__gethex+0x14c>
 8010c80:	f1b9 0f00 	cmp.w	r9, #0
 8010c84:	d000      	beq.n	8010c88 <__gethex+0x118>
 8010c86:	4252      	negs	r2, r2
 8010c88:	4415      	add	r5, r2
 8010c8a:	f8cb 1000 	str.w	r1, [fp]
 8010c8e:	b1e4      	cbz	r4, 8010cca <__gethex+0x15a>
 8010c90:	9b00      	ldr	r3, [sp, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf14      	ite	ne
 8010c96:	2700      	movne	r7, #0
 8010c98:	2706      	moveq	r7, #6
 8010c9a:	4638      	mov	r0, r7
 8010c9c:	b009      	add	sp, #36	; 0x24
 8010c9e:	ecbd 8b02 	vpop	{d8}
 8010ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca6:	463e      	mov	r6, r7
 8010ca8:	4625      	mov	r5, r4
 8010caa:	2401      	movs	r4, #1
 8010cac:	e7ca      	b.n	8010c44 <__gethex+0xd4>
 8010cae:	f04f 0900 	mov.w	r9, #0
 8010cb2:	1cb1      	adds	r1, r6, #2
 8010cb4:	e7d3      	b.n	8010c5e <__gethex+0xee>
 8010cb6:	f04f 0901 	mov.w	r9, #1
 8010cba:	e7fa      	b.n	8010cb2 <__gethex+0x142>
 8010cbc:	230a      	movs	r3, #10
 8010cbe:	fb03 0202 	mla	r2, r3, r2, r0
 8010cc2:	3a10      	subs	r2, #16
 8010cc4:	e7d4      	b.n	8010c70 <__gethex+0x100>
 8010cc6:	4631      	mov	r1, r6
 8010cc8:	e7df      	b.n	8010c8a <__gethex+0x11a>
 8010cca:	1bf3      	subs	r3, r6, r7
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	4621      	mov	r1, r4
 8010cd0:	2b07      	cmp	r3, #7
 8010cd2:	dc0b      	bgt.n	8010cec <__gethex+0x17c>
 8010cd4:	ee18 0a10 	vmov	r0, s16
 8010cd8:	f000 fad8 	bl	801128c <_Balloc>
 8010cdc:	4604      	mov	r4, r0
 8010cde:	b940      	cbnz	r0, 8010cf2 <__gethex+0x182>
 8010ce0:	4b5d      	ldr	r3, [pc, #372]	; (8010e58 <__gethex+0x2e8>)
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	21de      	movs	r1, #222	; 0xde
 8010ce6:	485d      	ldr	r0, [pc, #372]	; (8010e5c <__gethex+0x2ec>)
 8010ce8:	f001 fbcc 	bl	8012484 <__assert_func>
 8010cec:	3101      	adds	r1, #1
 8010cee:	105b      	asrs	r3, r3, #1
 8010cf0:	e7ee      	b.n	8010cd0 <__gethex+0x160>
 8010cf2:	f100 0914 	add.w	r9, r0, #20
 8010cf6:	f04f 0b00 	mov.w	fp, #0
 8010cfa:	f1ca 0301 	rsb	r3, sl, #1
 8010cfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8010d02:	f8cd b000 	str.w	fp, [sp]
 8010d06:	9306      	str	r3, [sp, #24]
 8010d08:	42b7      	cmp	r7, r6
 8010d0a:	d340      	bcc.n	8010d8e <__gethex+0x21e>
 8010d0c:	9802      	ldr	r0, [sp, #8]
 8010d0e:	9b00      	ldr	r3, [sp, #0]
 8010d10:	f840 3b04 	str.w	r3, [r0], #4
 8010d14:	eba0 0009 	sub.w	r0, r0, r9
 8010d18:	1080      	asrs	r0, r0, #2
 8010d1a:	0146      	lsls	r6, r0, #5
 8010d1c:	6120      	str	r0, [r4, #16]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f000 fba6 	bl	8011470 <__hi0bits>
 8010d24:	1a30      	subs	r0, r6, r0
 8010d26:	f8d8 6000 	ldr.w	r6, [r8]
 8010d2a:	42b0      	cmp	r0, r6
 8010d2c:	dd63      	ble.n	8010df6 <__gethex+0x286>
 8010d2e:	1b87      	subs	r7, r0, r6
 8010d30:	4639      	mov	r1, r7
 8010d32:	4620      	mov	r0, r4
 8010d34:	f000 ff4a 	bl	8011bcc <__any_on>
 8010d38:	4682      	mov	sl, r0
 8010d3a:	b1a8      	cbz	r0, 8010d68 <__gethex+0x1f8>
 8010d3c:	1e7b      	subs	r3, r7, #1
 8010d3e:	1159      	asrs	r1, r3, #5
 8010d40:	f003 021f 	and.w	r2, r3, #31
 8010d44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010d48:	f04f 0a01 	mov.w	sl, #1
 8010d4c:	fa0a f202 	lsl.w	r2, sl, r2
 8010d50:	420a      	tst	r2, r1
 8010d52:	d009      	beq.n	8010d68 <__gethex+0x1f8>
 8010d54:	4553      	cmp	r3, sl
 8010d56:	dd05      	ble.n	8010d64 <__gethex+0x1f4>
 8010d58:	1eb9      	subs	r1, r7, #2
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f000 ff36 	bl	8011bcc <__any_on>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	d145      	bne.n	8010df0 <__gethex+0x280>
 8010d64:	f04f 0a02 	mov.w	sl, #2
 8010d68:	4639      	mov	r1, r7
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f7ff fe99 	bl	8010aa2 <rshift>
 8010d70:	443d      	add	r5, r7
 8010d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d76:	42ab      	cmp	r3, r5
 8010d78:	da4c      	bge.n	8010e14 <__gethex+0x2a4>
 8010d7a:	ee18 0a10 	vmov	r0, s16
 8010d7e:	4621      	mov	r1, r4
 8010d80:	f000 fac4 	bl	801130c <_Bfree>
 8010d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d86:	2300      	movs	r3, #0
 8010d88:	6013      	str	r3, [r2, #0]
 8010d8a:	27a3      	movs	r7, #163	; 0xa3
 8010d8c:	e785      	b.n	8010c9a <__gethex+0x12a>
 8010d8e:	1e73      	subs	r3, r6, #1
 8010d90:	9a05      	ldr	r2, [sp, #20]
 8010d92:	9303      	str	r3, [sp, #12]
 8010d94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d019      	beq.n	8010dd0 <__gethex+0x260>
 8010d9c:	f1bb 0f20 	cmp.w	fp, #32
 8010da0:	d107      	bne.n	8010db2 <__gethex+0x242>
 8010da2:	9b02      	ldr	r3, [sp, #8]
 8010da4:	9a00      	ldr	r2, [sp, #0]
 8010da6:	f843 2b04 	str.w	r2, [r3], #4
 8010daa:	9302      	str	r3, [sp, #8]
 8010dac:	2300      	movs	r3, #0
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	469b      	mov	fp, r3
 8010db2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010db6:	f7ff fec6 	bl	8010b46 <__hexdig_fun>
 8010dba:	9b00      	ldr	r3, [sp, #0]
 8010dbc:	f000 000f 	and.w	r0, r0, #15
 8010dc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8010dc4:	4303      	orrs	r3, r0
 8010dc6:	9300      	str	r3, [sp, #0]
 8010dc8:	f10b 0b04 	add.w	fp, fp, #4
 8010dcc:	9b03      	ldr	r3, [sp, #12]
 8010dce:	e00d      	b.n	8010dec <__gethex+0x27c>
 8010dd0:	9b03      	ldr	r3, [sp, #12]
 8010dd2:	9a06      	ldr	r2, [sp, #24]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	42bb      	cmp	r3, r7
 8010dd8:	d3e0      	bcc.n	8010d9c <__gethex+0x22c>
 8010dda:	4618      	mov	r0, r3
 8010ddc:	9901      	ldr	r1, [sp, #4]
 8010dde:	9307      	str	r3, [sp, #28]
 8010de0:	4652      	mov	r2, sl
 8010de2:	f001 fb1c 	bl	801241e <strncmp>
 8010de6:	9b07      	ldr	r3, [sp, #28]
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d1d7      	bne.n	8010d9c <__gethex+0x22c>
 8010dec:	461e      	mov	r6, r3
 8010dee:	e78b      	b.n	8010d08 <__gethex+0x198>
 8010df0:	f04f 0a03 	mov.w	sl, #3
 8010df4:	e7b8      	b.n	8010d68 <__gethex+0x1f8>
 8010df6:	da0a      	bge.n	8010e0e <__gethex+0x29e>
 8010df8:	1a37      	subs	r7, r6, r0
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	ee18 0a10 	vmov	r0, s16
 8010e00:	463a      	mov	r2, r7
 8010e02:	f000 fc9f 	bl	8011744 <__lshift>
 8010e06:	1bed      	subs	r5, r5, r7
 8010e08:	4604      	mov	r4, r0
 8010e0a:	f100 0914 	add.w	r9, r0, #20
 8010e0e:	f04f 0a00 	mov.w	sl, #0
 8010e12:	e7ae      	b.n	8010d72 <__gethex+0x202>
 8010e14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010e18:	42a8      	cmp	r0, r5
 8010e1a:	dd72      	ble.n	8010f02 <__gethex+0x392>
 8010e1c:	1b45      	subs	r5, r0, r5
 8010e1e:	42ae      	cmp	r6, r5
 8010e20:	dc36      	bgt.n	8010e90 <__gethex+0x320>
 8010e22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	d02a      	beq.n	8010e80 <__gethex+0x310>
 8010e2a:	2b03      	cmp	r3, #3
 8010e2c:	d02c      	beq.n	8010e88 <__gethex+0x318>
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d11c      	bne.n	8010e6c <__gethex+0x2fc>
 8010e32:	42ae      	cmp	r6, r5
 8010e34:	d11a      	bne.n	8010e6c <__gethex+0x2fc>
 8010e36:	2e01      	cmp	r6, #1
 8010e38:	d112      	bne.n	8010e60 <__gethex+0x2f0>
 8010e3a:	9a04      	ldr	r2, [sp, #16]
 8010e3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e40:	6013      	str	r3, [r2, #0]
 8010e42:	2301      	movs	r3, #1
 8010e44:	6123      	str	r3, [r4, #16]
 8010e46:	f8c9 3000 	str.w	r3, [r9]
 8010e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e4c:	2762      	movs	r7, #98	; 0x62
 8010e4e:	601c      	str	r4, [r3, #0]
 8010e50:	e723      	b.n	8010c9a <__gethex+0x12a>
 8010e52:	bf00      	nop
 8010e54:	0801410c 	.word	0x0801410c
 8010e58:	08014030 	.word	0x08014030
 8010e5c:	080140a4 	.word	0x080140a4
 8010e60:	1e71      	subs	r1, r6, #1
 8010e62:	4620      	mov	r0, r4
 8010e64:	f000 feb2 	bl	8011bcc <__any_on>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d1e6      	bne.n	8010e3a <__gethex+0x2ca>
 8010e6c:	ee18 0a10 	vmov	r0, s16
 8010e70:	4621      	mov	r1, r4
 8010e72:	f000 fa4b 	bl	801130c <_Bfree>
 8010e76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6013      	str	r3, [r2, #0]
 8010e7c:	2750      	movs	r7, #80	; 0x50
 8010e7e:	e70c      	b.n	8010c9a <__gethex+0x12a>
 8010e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1f2      	bne.n	8010e6c <__gethex+0x2fc>
 8010e86:	e7d8      	b.n	8010e3a <__gethex+0x2ca>
 8010e88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d1d5      	bne.n	8010e3a <__gethex+0x2ca>
 8010e8e:	e7ed      	b.n	8010e6c <__gethex+0x2fc>
 8010e90:	1e6f      	subs	r7, r5, #1
 8010e92:	f1ba 0f00 	cmp.w	sl, #0
 8010e96:	d131      	bne.n	8010efc <__gethex+0x38c>
 8010e98:	b127      	cbz	r7, 8010ea4 <__gethex+0x334>
 8010e9a:	4639      	mov	r1, r7
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 fe95 	bl	8011bcc <__any_on>
 8010ea2:	4682      	mov	sl, r0
 8010ea4:	117b      	asrs	r3, r7, #5
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010eac:	f007 071f 	and.w	r7, r7, #31
 8010eb0:	fa01 f707 	lsl.w	r7, r1, r7
 8010eb4:	421f      	tst	r7, r3
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	4620      	mov	r0, r4
 8010eba:	bf18      	it	ne
 8010ebc:	f04a 0a02 	orrne.w	sl, sl, #2
 8010ec0:	1b76      	subs	r6, r6, r5
 8010ec2:	f7ff fdee 	bl	8010aa2 <rshift>
 8010ec6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010eca:	2702      	movs	r7, #2
 8010ecc:	f1ba 0f00 	cmp.w	sl, #0
 8010ed0:	d048      	beq.n	8010f64 <__gethex+0x3f4>
 8010ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ed6:	2b02      	cmp	r3, #2
 8010ed8:	d015      	beq.n	8010f06 <__gethex+0x396>
 8010eda:	2b03      	cmp	r3, #3
 8010edc:	d017      	beq.n	8010f0e <__gethex+0x39e>
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d109      	bne.n	8010ef6 <__gethex+0x386>
 8010ee2:	f01a 0f02 	tst.w	sl, #2
 8010ee6:	d006      	beq.n	8010ef6 <__gethex+0x386>
 8010ee8:	f8d9 0000 	ldr.w	r0, [r9]
 8010eec:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ef0:	f01a 0f01 	tst.w	sl, #1
 8010ef4:	d10e      	bne.n	8010f14 <__gethex+0x3a4>
 8010ef6:	f047 0710 	orr.w	r7, r7, #16
 8010efa:	e033      	b.n	8010f64 <__gethex+0x3f4>
 8010efc:	f04f 0a01 	mov.w	sl, #1
 8010f00:	e7d0      	b.n	8010ea4 <__gethex+0x334>
 8010f02:	2701      	movs	r7, #1
 8010f04:	e7e2      	b.n	8010ecc <__gethex+0x35c>
 8010f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f08:	f1c3 0301 	rsb	r3, r3, #1
 8010f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8010f0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d0f0      	beq.n	8010ef6 <__gethex+0x386>
 8010f14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010f18:	f104 0314 	add.w	r3, r4, #20
 8010f1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010f20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010f24:	f04f 0c00 	mov.w	ip, #0
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f32:	d01c      	beq.n	8010f6e <__gethex+0x3fe>
 8010f34:	3201      	adds	r2, #1
 8010f36:	6002      	str	r2, [r0, #0]
 8010f38:	2f02      	cmp	r7, #2
 8010f3a:	f104 0314 	add.w	r3, r4, #20
 8010f3e:	d13f      	bne.n	8010fc0 <__gethex+0x450>
 8010f40:	f8d8 2000 	ldr.w	r2, [r8]
 8010f44:	3a01      	subs	r2, #1
 8010f46:	42b2      	cmp	r2, r6
 8010f48:	d10a      	bne.n	8010f60 <__gethex+0x3f0>
 8010f4a:	1171      	asrs	r1, r6, #5
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f52:	f006 061f 	and.w	r6, r6, #31
 8010f56:	fa02 f606 	lsl.w	r6, r2, r6
 8010f5a:	421e      	tst	r6, r3
 8010f5c:	bf18      	it	ne
 8010f5e:	4617      	movne	r7, r2
 8010f60:	f047 0720 	orr.w	r7, r7, #32
 8010f64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f66:	601c      	str	r4, [r3, #0]
 8010f68:	9b04      	ldr	r3, [sp, #16]
 8010f6a:	601d      	str	r5, [r3, #0]
 8010f6c:	e695      	b.n	8010c9a <__gethex+0x12a>
 8010f6e:	4299      	cmp	r1, r3
 8010f70:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f74:	d8d8      	bhi.n	8010f28 <__gethex+0x3b8>
 8010f76:	68a3      	ldr	r3, [r4, #8]
 8010f78:	459b      	cmp	fp, r3
 8010f7a:	db19      	blt.n	8010fb0 <__gethex+0x440>
 8010f7c:	6861      	ldr	r1, [r4, #4]
 8010f7e:	ee18 0a10 	vmov	r0, s16
 8010f82:	3101      	adds	r1, #1
 8010f84:	f000 f982 	bl	801128c <_Balloc>
 8010f88:	4681      	mov	r9, r0
 8010f8a:	b918      	cbnz	r0, 8010f94 <__gethex+0x424>
 8010f8c:	4b1a      	ldr	r3, [pc, #104]	; (8010ff8 <__gethex+0x488>)
 8010f8e:	4602      	mov	r2, r0
 8010f90:	2184      	movs	r1, #132	; 0x84
 8010f92:	e6a8      	b.n	8010ce6 <__gethex+0x176>
 8010f94:	6922      	ldr	r2, [r4, #16]
 8010f96:	3202      	adds	r2, #2
 8010f98:	f104 010c 	add.w	r1, r4, #12
 8010f9c:	0092      	lsls	r2, r2, #2
 8010f9e:	300c      	adds	r0, #12
 8010fa0:	f7fc fe84 	bl	800dcac <memcpy>
 8010fa4:	4621      	mov	r1, r4
 8010fa6:	ee18 0a10 	vmov	r0, s16
 8010faa:	f000 f9af 	bl	801130c <_Bfree>
 8010fae:	464c      	mov	r4, r9
 8010fb0:	6923      	ldr	r3, [r4, #16]
 8010fb2:	1c5a      	adds	r2, r3, #1
 8010fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010fb8:	6122      	str	r2, [r4, #16]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	615a      	str	r2, [r3, #20]
 8010fbe:	e7bb      	b.n	8010f38 <__gethex+0x3c8>
 8010fc0:	6922      	ldr	r2, [r4, #16]
 8010fc2:	455a      	cmp	r2, fp
 8010fc4:	dd0b      	ble.n	8010fde <__gethex+0x46e>
 8010fc6:	2101      	movs	r1, #1
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ff fd6a 	bl	8010aa2 <rshift>
 8010fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fd2:	3501      	adds	r5, #1
 8010fd4:	42ab      	cmp	r3, r5
 8010fd6:	f6ff aed0 	blt.w	8010d7a <__gethex+0x20a>
 8010fda:	2701      	movs	r7, #1
 8010fdc:	e7c0      	b.n	8010f60 <__gethex+0x3f0>
 8010fde:	f016 061f 	ands.w	r6, r6, #31
 8010fe2:	d0fa      	beq.n	8010fda <__gethex+0x46a>
 8010fe4:	4453      	add	r3, sl
 8010fe6:	f1c6 0620 	rsb	r6, r6, #32
 8010fea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010fee:	f000 fa3f 	bl	8011470 <__hi0bits>
 8010ff2:	42b0      	cmp	r0, r6
 8010ff4:	dbe7      	blt.n	8010fc6 <__gethex+0x456>
 8010ff6:	e7f0      	b.n	8010fda <__gethex+0x46a>
 8010ff8:	08014030 	.word	0x08014030

08010ffc <L_shift>:
 8010ffc:	f1c2 0208 	rsb	r2, r2, #8
 8011000:	0092      	lsls	r2, r2, #2
 8011002:	b570      	push	{r4, r5, r6, lr}
 8011004:	f1c2 0620 	rsb	r6, r2, #32
 8011008:	6843      	ldr	r3, [r0, #4]
 801100a:	6804      	ldr	r4, [r0, #0]
 801100c:	fa03 f506 	lsl.w	r5, r3, r6
 8011010:	432c      	orrs	r4, r5
 8011012:	40d3      	lsrs	r3, r2
 8011014:	6004      	str	r4, [r0, #0]
 8011016:	f840 3f04 	str.w	r3, [r0, #4]!
 801101a:	4288      	cmp	r0, r1
 801101c:	d3f4      	bcc.n	8011008 <L_shift+0xc>
 801101e:	bd70      	pop	{r4, r5, r6, pc}

08011020 <__match>:
 8011020:	b530      	push	{r4, r5, lr}
 8011022:	6803      	ldr	r3, [r0, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	f811 4b01 	ldrb.w	r4, [r1], #1
 801102a:	b914      	cbnz	r4, 8011032 <__match+0x12>
 801102c:	6003      	str	r3, [r0, #0]
 801102e:	2001      	movs	r0, #1
 8011030:	bd30      	pop	{r4, r5, pc}
 8011032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011036:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801103a:	2d19      	cmp	r5, #25
 801103c:	bf98      	it	ls
 801103e:	3220      	addls	r2, #32
 8011040:	42a2      	cmp	r2, r4
 8011042:	d0f0      	beq.n	8011026 <__match+0x6>
 8011044:	2000      	movs	r0, #0
 8011046:	e7f3      	b.n	8011030 <__match+0x10>

08011048 <__hexnan>:
 8011048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	680b      	ldr	r3, [r1, #0]
 801104e:	115e      	asrs	r6, r3, #5
 8011050:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011054:	f013 031f 	ands.w	r3, r3, #31
 8011058:	b087      	sub	sp, #28
 801105a:	bf18      	it	ne
 801105c:	3604      	addne	r6, #4
 801105e:	2500      	movs	r5, #0
 8011060:	1f37      	subs	r7, r6, #4
 8011062:	4690      	mov	r8, r2
 8011064:	6802      	ldr	r2, [r0, #0]
 8011066:	9301      	str	r3, [sp, #4]
 8011068:	4682      	mov	sl, r0
 801106a:	f846 5c04 	str.w	r5, [r6, #-4]
 801106e:	46b9      	mov	r9, r7
 8011070:	463c      	mov	r4, r7
 8011072:	9502      	str	r5, [sp, #8]
 8011074:	46ab      	mov	fp, r5
 8011076:	7851      	ldrb	r1, [r2, #1]
 8011078:	1c53      	adds	r3, r2, #1
 801107a:	9303      	str	r3, [sp, #12]
 801107c:	b341      	cbz	r1, 80110d0 <__hexnan+0x88>
 801107e:	4608      	mov	r0, r1
 8011080:	9205      	str	r2, [sp, #20]
 8011082:	9104      	str	r1, [sp, #16]
 8011084:	f7ff fd5f 	bl	8010b46 <__hexdig_fun>
 8011088:	2800      	cmp	r0, #0
 801108a:	d14f      	bne.n	801112c <__hexnan+0xe4>
 801108c:	9904      	ldr	r1, [sp, #16]
 801108e:	9a05      	ldr	r2, [sp, #20]
 8011090:	2920      	cmp	r1, #32
 8011092:	d818      	bhi.n	80110c6 <__hexnan+0x7e>
 8011094:	9b02      	ldr	r3, [sp, #8]
 8011096:	459b      	cmp	fp, r3
 8011098:	dd13      	ble.n	80110c2 <__hexnan+0x7a>
 801109a:	454c      	cmp	r4, r9
 801109c:	d206      	bcs.n	80110ac <__hexnan+0x64>
 801109e:	2d07      	cmp	r5, #7
 80110a0:	dc04      	bgt.n	80110ac <__hexnan+0x64>
 80110a2:	462a      	mov	r2, r5
 80110a4:	4649      	mov	r1, r9
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7ff ffa8 	bl	8010ffc <L_shift>
 80110ac:	4544      	cmp	r4, r8
 80110ae:	d950      	bls.n	8011152 <__hexnan+0x10a>
 80110b0:	2300      	movs	r3, #0
 80110b2:	f1a4 0904 	sub.w	r9, r4, #4
 80110b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80110ba:	f8cd b008 	str.w	fp, [sp, #8]
 80110be:	464c      	mov	r4, r9
 80110c0:	461d      	mov	r5, r3
 80110c2:	9a03      	ldr	r2, [sp, #12]
 80110c4:	e7d7      	b.n	8011076 <__hexnan+0x2e>
 80110c6:	2929      	cmp	r1, #41	; 0x29
 80110c8:	d156      	bne.n	8011178 <__hexnan+0x130>
 80110ca:	3202      	adds	r2, #2
 80110cc:	f8ca 2000 	str.w	r2, [sl]
 80110d0:	f1bb 0f00 	cmp.w	fp, #0
 80110d4:	d050      	beq.n	8011178 <__hexnan+0x130>
 80110d6:	454c      	cmp	r4, r9
 80110d8:	d206      	bcs.n	80110e8 <__hexnan+0xa0>
 80110da:	2d07      	cmp	r5, #7
 80110dc:	dc04      	bgt.n	80110e8 <__hexnan+0xa0>
 80110de:	462a      	mov	r2, r5
 80110e0:	4649      	mov	r1, r9
 80110e2:	4620      	mov	r0, r4
 80110e4:	f7ff ff8a 	bl	8010ffc <L_shift>
 80110e8:	4544      	cmp	r4, r8
 80110ea:	d934      	bls.n	8011156 <__hexnan+0x10e>
 80110ec:	f1a8 0204 	sub.w	r2, r8, #4
 80110f0:	4623      	mov	r3, r4
 80110f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80110f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80110fa:	429f      	cmp	r7, r3
 80110fc:	d2f9      	bcs.n	80110f2 <__hexnan+0xaa>
 80110fe:	1b3b      	subs	r3, r7, r4
 8011100:	f023 0303 	bic.w	r3, r3, #3
 8011104:	3304      	adds	r3, #4
 8011106:	3401      	adds	r4, #1
 8011108:	3e03      	subs	r6, #3
 801110a:	42b4      	cmp	r4, r6
 801110c:	bf88      	it	hi
 801110e:	2304      	movhi	r3, #4
 8011110:	4443      	add	r3, r8
 8011112:	2200      	movs	r2, #0
 8011114:	f843 2b04 	str.w	r2, [r3], #4
 8011118:	429f      	cmp	r7, r3
 801111a:	d2fb      	bcs.n	8011114 <__hexnan+0xcc>
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	b91b      	cbnz	r3, 8011128 <__hexnan+0xe0>
 8011120:	4547      	cmp	r7, r8
 8011122:	d127      	bne.n	8011174 <__hexnan+0x12c>
 8011124:	2301      	movs	r3, #1
 8011126:	603b      	str	r3, [r7, #0]
 8011128:	2005      	movs	r0, #5
 801112a:	e026      	b.n	801117a <__hexnan+0x132>
 801112c:	3501      	adds	r5, #1
 801112e:	2d08      	cmp	r5, #8
 8011130:	f10b 0b01 	add.w	fp, fp, #1
 8011134:	dd06      	ble.n	8011144 <__hexnan+0xfc>
 8011136:	4544      	cmp	r4, r8
 8011138:	d9c3      	bls.n	80110c2 <__hexnan+0x7a>
 801113a:	2300      	movs	r3, #0
 801113c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011140:	2501      	movs	r5, #1
 8011142:	3c04      	subs	r4, #4
 8011144:	6822      	ldr	r2, [r4, #0]
 8011146:	f000 000f 	and.w	r0, r0, #15
 801114a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801114e:	6022      	str	r2, [r4, #0]
 8011150:	e7b7      	b.n	80110c2 <__hexnan+0x7a>
 8011152:	2508      	movs	r5, #8
 8011154:	e7b5      	b.n	80110c2 <__hexnan+0x7a>
 8011156:	9b01      	ldr	r3, [sp, #4]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d0df      	beq.n	801111c <__hexnan+0xd4>
 801115c:	f04f 32ff 	mov.w	r2, #4294967295
 8011160:	f1c3 0320 	rsb	r3, r3, #32
 8011164:	fa22 f303 	lsr.w	r3, r2, r3
 8011168:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801116c:	401a      	ands	r2, r3
 801116e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011172:	e7d3      	b.n	801111c <__hexnan+0xd4>
 8011174:	3f04      	subs	r7, #4
 8011176:	e7d1      	b.n	801111c <__hexnan+0xd4>
 8011178:	2004      	movs	r0, #4
 801117a:	b007      	add	sp, #28
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011180 <_localeconv_r>:
 8011180:	4800      	ldr	r0, [pc, #0]	; (8011184 <_localeconv_r+0x4>)
 8011182:	4770      	bx	lr
 8011184:	200001a4 	.word	0x200001a4

08011188 <__retarget_lock_init_recursive>:
 8011188:	4770      	bx	lr

0801118a <__retarget_lock_acquire_recursive>:
 801118a:	4770      	bx	lr

0801118c <__retarget_lock_release_recursive>:
 801118c:	4770      	bx	lr

0801118e <__swhatbuf_r>:
 801118e:	b570      	push	{r4, r5, r6, lr}
 8011190:	460e      	mov	r6, r1
 8011192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011196:	2900      	cmp	r1, #0
 8011198:	b096      	sub	sp, #88	; 0x58
 801119a:	4614      	mov	r4, r2
 801119c:	461d      	mov	r5, r3
 801119e:	da08      	bge.n	80111b2 <__swhatbuf_r+0x24>
 80111a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80111a4:	2200      	movs	r2, #0
 80111a6:	602a      	str	r2, [r5, #0]
 80111a8:	061a      	lsls	r2, r3, #24
 80111aa:	d410      	bmi.n	80111ce <__swhatbuf_r+0x40>
 80111ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111b0:	e00e      	b.n	80111d0 <__swhatbuf_r+0x42>
 80111b2:	466a      	mov	r2, sp
 80111b4:	f001 f9a6 	bl	8012504 <_fstat_r>
 80111b8:	2800      	cmp	r0, #0
 80111ba:	dbf1      	blt.n	80111a0 <__swhatbuf_r+0x12>
 80111bc:	9a01      	ldr	r2, [sp, #4]
 80111be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80111c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80111c6:	425a      	negs	r2, r3
 80111c8:	415a      	adcs	r2, r3
 80111ca:	602a      	str	r2, [r5, #0]
 80111cc:	e7ee      	b.n	80111ac <__swhatbuf_r+0x1e>
 80111ce:	2340      	movs	r3, #64	; 0x40
 80111d0:	2000      	movs	r0, #0
 80111d2:	6023      	str	r3, [r4, #0]
 80111d4:	b016      	add	sp, #88	; 0x58
 80111d6:	bd70      	pop	{r4, r5, r6, pc}

080111d8 <__smakebuf_r>:
 80111d8:	898b      	ldrh	r3, [r1, #12]
 80111da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111dc:	079d      	lsls	r5, r3, #30
 80111de:	4606      	mov	r6, r0
 80111e0:	460c      	mov	r4, r1
 80111e2:	d507      	bpl.n	80111f4 <__smakebuf_r+0x1c>
 80111e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111e8:	6023      	str	r3, [r4, #0]
 80111ea:	6123      	str	r3, [r4, #16]
 80111ec:	2301      	movs	r3, #1
 80111ee:	6163      	str	r3, [r4, #20]
 80111f0:	b002      	add	sp, #8
 80111f2:	bd70      	pop	{r4, r5, r6, pc}
 80111f4:	ab01      	add	r3, sp, #4
 80111f6:	466a      	mov	r2, sp
 80111f8:	f7ff ffc9 	bl	801118e <__swhatbuf_r>
 80111fc:	9900      	ldr	r1, [sp, #0]
 80111fe:	4605      	mov	r5, r0
 8011200:	4630      	mov	r0, r6
 8011202:	f000 fd87 	bl	8011d14 <_malloc_r>
 8011206:	b948      	cbnz	r0, 801121c <__smakebuf_r+0x44>
 8011208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801120c:	059a      	lsls	r2, r3, #22
 801120e:	d4ef      	bmi.n	80111f0 <__smakebuf_r+0x18>
 8011210:	f023 0303 	bic.w	r3, r3, #3
 8011214:	f043 0302 	orr.w	r3, r3, #2
 8011218:	81a3      	strh	r3, [r4, #12]
 801121a:	e7e3      	b.n	80111e4 <__smakebuf_r+0xc>
 801121c:	4b0d      	ldr	r3, [pc, #52]	; (8011254 <__smakebuf_r+0x7c>)
 801121e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011220:	89a3      	ldrh	r3, [r4, #12]
 8011222:	6020      	str	r0, [r4, #0]
 8011224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011228:	81a3      	strh	r3, [r4, #12]
 801122a:	9b00      	ldr	r3, [sp, #0]
 801122c:	6163      	str	r3, [r4, #20]
 801122e:	9b01      	ldr	r3, [sp, #4]
 8011230:	6120      	str	r0, [r4, #16]
 8011232:	b15b      	cbz	r3, 801124c <__smakebuf_r+0x74>
 8011234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011238:	4630      	mov	r0, r6
 801123a:	f001 f975 	bl	8012528 <_isatty_r>
 801123e:	b128      	cbz	r0, 801124c <__smakebuf_r+0x74>
 8011240:	89a3      	ldrh	r3, [r4, #12]
 8011242:	f023 0303 	bic.w	r3, r3, #3
 8011246:	f043 0301 	orr.w	r3, r3, #1
 801124a:	81a3      	strh	r3, [r4, #12]
 801124c:	89a0      	ldrh	r0, [r4, #12]
 801124e:	4305      	orrs	r5, r0
 8011250:	81a5      	strh	r5, [r4, #12]
 8011252:	e7cd      	b.n	80111f0 <__smakebuf_r+0x18>
 8011254:	08010901 	.word	0x08010901

08011258 <malloc>:
 8011258:	4b02      	ldr	r3, [pc, #8]	; (8011264 <malloc+0xc>)
 801125a:	4601      	mov	r1, r0
 801125c:	6818      	ldr	r0, [r3, #0]
 801125e:	f000 bd59 	b.w	8011d14 <_malloc_r>
 8011262:	bf00      	nop
 8011264:	2000004c 	.word	0x2000004c

08011268 <__ascii_mbtowc>:
 8011268:	b082      	sub	sp, #8
 801126a:	b901      	cbnz	r1, 801126e <__ascii_mbtowc+0x6>
 801126c:	a901      	add	r1, sp, #4
 801126e:	b142      	cbz	r2, 8011282 <__ascii_mbtowc+0x1a>
 8011270:	b14b      	cbz	r3, 8011286 <__ascii_mbtowc+0x1e>
 8011272:	7813      	ldrb	r3, [r2, #0]
 8011274:	600b      	str	r3, [r1, #0]
 8011276:	7812      	ldrb	r2, [r2, #0]
 8011278:	1e10      	subs	r0, r2, #0
 801127a:	bf18      	it	ne
 801127c:	2001      	movne	r0, #1
 801127e:	b002      	add	sp, #8
 8011280:	4770      	bx	lr
 8011282:	4610      	mov	r0, r2
 8011284:	e7fb      	b.n	801127e <__ascii_mbtowc+0x16>
 8011286:	f06f 0001 	mvn.w	r0, #1
 801128a:	e7f8      	b.n	801127e <__ascii_mbtowc+0x16>

0801128c <_Balloc>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011290:	4604      	mov	r4, r0
 8011292:	460d      	mov	r5, r1
 8011294:	b976      	cbnz	r6, 80112b4 <_Balloc+0x28>
 8011296:	2010      	movs	r0, #16
 8011298:	f7ff ffde 	bl	8011258 <malloc>
 801129c:	4602      	mov	r2, r0
 801129e:	6260      	str	r0, [r4, #36]	; 0x24
 80112a0:	b920      	cbnz	r0, 80112ac <_Balloc+0x20>
 80112a2:	4b18      	ldr	r3, [pc, #96]	; (8011304 <_Balloc+0x78>)
 80112a4:	4818      	ldr	r0, [pc, #96]	; (8011308 <_Balloc+0x7c>)
 80112a6:	2166      	movs	r1, #102	; 0x66
 80112a8:	f001 f8ec 	bl	8012484 <__assert_func>
 80112ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112b0:	6006      	str	r6, [r0, #0]
 80112b2:	60c6      	str	r6, [r0, #12]
 80112b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80112b6:	68f3      	ldr	r3, [r6, #12]
 80112b8:	b183      	cbz	r3, 80112dc <_Balloc+0x50>
 80112ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112c2:	b9b8      	cbnz	r0, 80112f4 <_Balloc+0x68>
 80112c4:	2101      	movs	r1, #1
 80112c6:	fa01 f605 	lsl.w	r6, r1, r5
 80112ca:	1d72      	adds	r2, r6, #5
 80112cc:	0092      	lsls	r2, r2, #2
 80112ce:	4620      	mov	r0, r4
 80112d0:	f000 fc9d 	bl	8011c0e <_calloc_r>
 80112d4:	b160      	cbz	r0, 80112f0 <_Balloc+0x64>
 80112d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112da:	e00e      	b.n	80112fa <_Balloc+0x6e>
 80112dc:	2221      	movs	r2, #33	; 0x21
 80112de:	2104      	movs	r1, #4
 80112e0:	4620      	mov	r0, r4
 80112e2:	f000 fc94 	bl	8011c0e <_calloc_r>
 80112e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112e8:	60f0      	str	r0, [r6, #12]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1e4      	bne.n	80112ba <_Balloc+0x2e>
 80112f0:	2000      	movs	r0, #0
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	6802      	ldr	r2, [r0, #0]
 80112f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112fa:	2300      	movs	r3, #0
 80112fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011300:	e7f7      	b.n	80112f2 <_Balloc+0x66>
 8011302:	bf00      	nop
 8011304:	08013fbe 	.word	0x08013fbe
 8011308:	08014120 	.word	0x08014120

0801130c <_Bfree>:
 801130c:	b570      	push	{r4, r5, r6, lr}
 801130e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011310:	4605      	mov	r5, r0
 8011312:	460c      	mov	r4, r1
 8011314:	b976      	cbnz	r6, 8011334 <_Bfree+0x28>
 8011316:	2010      	movs	r0, #16
 8011318:	f7ff ff9e 	bl	8011258 <malloc>
 801131c:	4602      	mov	r2, r0
 801131e:	6268      	str	r0, [r5, #36]	; 0x24
 8011320:	b920      	cbnz	r0, 801132c <_Bfree+0x20>
 8011322:	4b09      	ldr	r3, [pc, #36]	; (8011348 <_Bfree+0x3c>)
 8011324:	4809      	ldr	r0, [pc, #36]	; (801134c <_Bfree+0x40>)
 8011326:	218a      	movs	r1, #138	; 0x8a
 8011328:	f001 f8ac 	bl	8012484 <__assert_func>
 801132c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011330:	6006      	str	r6, [r0, #0]
 8011332:	60c6      	str	r6, [r0, #12]
 8011334:	b13c      	cbz	r4, 8011346 <_Bfree+0x3a>
 8011336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011338:	6862      	ldr	r2, [r4, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011340:	6021      	str	r1, [r4, #0]
 8011342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011346:	bd70      	pop	{r4, r5, r6, pc}
 8011348:	08013fbe 	.word	0x08013fbe
 801134c:	08014120 	.word	0x08014120

08011350 <__multadd>:
 8011350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011354:	690d      	ldr	r5, [r1, #16]
 8011356:	4607      	mov	r7, r0
 8011358:	460c      	mov	r4, r1
 801135a:	461e      	mov	r6, r3
 801135c:	f101 0c14 	add.w	ip, r1, #20
 8011360:	2000      	movs	r0, #0
 8011362:	f8dc 3000 	ldr.w	r3, [ip]
 8011366:	b299      	uxth	r1, r3
 8011368:	fb02 6101 	mla	r1, r2, r1, r6
 801136c:	0c1e      	lsrs	r6, r3, #16
 801136e:	0c0b      	lsrs	r3, r1, #16
 8011370:	fb02 3306 	mla	r3, r2, r6, r3
 8011374:	b289      	uxth	r1, r1
 8011376:	3001      	adds	r0, #1
 8011378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801137c:	4285      	cmp	r5, r0
 801137e:	f84c 1b04 	str.w	r1, [ip], #4
 8011382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011386:	dcec      	bgt.n	8011362 <__multadd+0x12>
 8011388:	b30e      	cbz	r6, 80113ce <__multadd+0x7e>
 801138a:	68a3      	ldr	r3, [r4, #8]
 801138c:	42ab      	cmp	r3, r5
 801138e:	dc19      	bgt.n	80113c4 <__multadd+0x74>
 8011390:	6861      	ldr	r1, [r4, #4]
 8011392:	4638      	mov	r0, r7
 8011394:	3101      	adds	r1, #1
 8011396:	f7ff ff79 	bl	801128c <_Balloc>
 801139a:	4680      	mov	r8, r0
 801139c:	b928      	cbnz	r0, 80113aa <__multadd+0x5a>
 801139e:	4602      	mov	r2, r0
 80113a0:	4b0c      	ldr	r3, [pc, #48]	; (80113d4 <__multadd+0x84>)
 80113a2:	480d      	ldr	r0, [pc, #52]	; (80113d8 <__multadd+0x88>)
 80113a4:	21b5      	movs	r1, #181	; 0xb5
 80113a6:	f001 f86d 	bl	8012484 <__assert_func>
 80113aa:	6922      	ldr	r2, [r4, #16]
 80113ac:	3202      	adds	r2, #2
 80113ae:	f104 010c 	add.w	r1, r4, #12
 80113b2:	0092      	lsls	r2, r2, #2
 80113b4:	300c      	adds	r0, #12
 80113b6:	f7fc fc79 	bl	800dcac <memcpy>
 80113ba:	4621      	mov	r1, r4
 80113bc:	4638      	mov	r0, r7
 80113be:	f7ff ffa5 	bl	801130c <_Bfree>
 80113c2:	4644      	mov	r4, r8
 80113c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113c8:	3501      	adds	r5, #1
 80113ca:	615e      	str	r6, [r3, #20]
 80113cc:	6125      	str	r5, [r4, #16]
 80113ce:	4620      	mov	r0, r4
 80113d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113d4:	08014030 	.word	0x08014030
 80113d8:	08014120 	.word	0x08014120

080113dc <__s2b>:
 80113dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e0:	460c      	mov	r4, r1
 80113e2:	4615      	mov	r5, r2
 80113e4:	461f      	mov	r7, r3
 80113e6:	2209      	movs	r2, #9
 80113e8:	3308      	adds	r3, #8
 80113ea:	4606      	mov	r6, r0
 80113ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80113f0:	2100      	movs	r1, #0
 80113f2:	2201      	movs	r2, #1
 80113f4:	429a      	cmp	r2, r3
 80113f6:	db09      	blt.n	801140c <__s2b+0x30>
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7ff ff47 	bl	801128c <_Balloc>
 80113fe:	b940      	cbnz	r0, 8011412 <__s2b+0x36>
 8011400:	4602      	mov	r2, r0
 8011402:	4b19      	ldr	r3, [pc, #100]	; (8011468 <__s2b+0x8c>)
 8011404:	4819      	ldr	r0, [pc, #100]	; (801146c <__s2b+0x90>)
 8011406:	21ce      	movs	r1, #206	; 0xce
 8011408:	f001 f83c 	bl	8012484 <__assert_func>
 801140c:	0052      	lsls	r2, r2, #1
 801140e:	3101      	adds	r1, #1
 8011410:	e7f0      	b.n	80113f4 <__s2b+0x18>
 8011412:	9b08      	ldr	r3, [sp, #32]
 8011414:	6143      	str	r3, [r0, #20]
 8011416:	2d09      	cmp	r5, #9
 8011418:	f04f 0301 	mov.w	r3, #1
 801141c:	6103      	str	r3, [r0, #16]
 801141e:	dd16      	ble.n	801144e <__s2b+0x72>
 8011420:	f104 0909 	add.w	r9, r4, #9
 8011424:	46c8      	mov	r8, r9
 8011426:	442c      	add	r4, r5
 8011428:	f818 3b01 	ldrb.w	r3, [r8], #1
 801142c:	4601      	mov	r1, r0
 801142e:	3b30      	subs	r3, #48	; 0x30
 8011430:	220a      	movs	r2, #10
 8011432:	4630      	mov	r0, r6
 8011434:	f7ff ff8c 	bl	8011350 <__multadd>
 8011438:	45a0      	cmp	r8, r4
 801143a:	d1f5      	bne.n	8011428 <__s2b+0x4c>
 801143c:	f1a5 0408 	sub.w	r4, r5, #8
 8011440:	444c      	add	r4, r9
 8011442:	1b2d      	subs	r5, r5, r4
 8011444:	1963      	adds	r3, r4, r5
 8011446:	42bb      	cmp	r3, r7
 8011448:	db04      	blt.n	8011454 <__s2b+0x78>
 801144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801144e:	340a      	adds	r4, #10
 8011450:	2509      	movs	r5, #9
 8011452:	e7f6      	b.n	8011442 <__s2b+0x66>
 8011454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011458:	4601      	mov	r1, r0
 801145a:	3b30      	subs	r3, #48	; 0x30
 801145c:	220a      	movs	r2, #10
 801145e:	4630      	mov	r0, r6
 8011460:	f7ff ff76 	bl	8011350 <__multadd>
 8011464:	e7ee      	b.n	8011444 <__s2b+0x68>
 8011466:	bf00      	nop
 8011468:	08014030 	.word	0x08014030
 801146c:	08014120 	.word	0x08014120

08011470 <__hi0bits>:
 8011470:	0c03      	lsrs	r3, r0, #16
 8011472:	041b      	lsls	r3, r3, #16
 8011474:	b9d3      	cbnz	r3, 80114ac <__hi0bits+0x3c>
 8011476:	0400      	lsls	r0, r0, #16
 8011478:	2310      	movs	r3, #16
 801147a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801147e:	bf04      	itt	eq
 8011480:	0200      	lsleq	r0, r0, #8
 8011482:	3308      	addeq	r3, #8
 8011484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011488:	bf04      	itt	eq
 801148a:	0100      	lsleq	r0, r0, #4
 801148c:	3304      	addeq	r3, #4
 801148e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011492:	bf04      	itt	eq
 8011494:	0080      	lsleq	r0, r0, #2
 8011496:	3302      	addeq	r3, #2
 8011498:	2800      	cmp	r0, #0
 801149a:	db05      	blt.n	80114a8 <__hi0bits+0x38>
 801149c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80114a0:	f103 0301 	add.w	r3, r3, #1
 80114a4:	bf08      	it	eq
 80114a6:	2320      	moveq	r3, #32
 80114a8:	4618      	mov	r0, r3
 80114aa:	4770      	bx	lr
 80114ac:	2300      	movs	r3, #0
 80114ae:	e7e4      	b.n	801147a <__hi0bits+0xa>

080114b0 <__lo0bits>:
 80114b0:	6803      	ldr	r3, [r0, #0]
 80114b2:	f013 0207 	ands.w	r2, r3, #7
 80114b6:	4601      	mov	r1, r0
 80114b8:	d00b      	beq.n	80114d2 <__lo0bits+0x22>
 80114ba:	07da      	lsls	r2, r3, #31
 80114bc:	d423      	bmi.n	8011506 <__lo0bits+0x56>
 80114be:	0798      	lsls	r0, r3, #30
 80114c0:	bf49      	itett	mi
 80114c2:	085b      	lsrmi	r3, r3, #1
 80114c4:	089b      	lsrpl	r3, r3, #2
 80114c6:	2001      	movmi	r0, #1
 80114c8:	600b      	strmi	r3, [r1, #0]
 80114ca:	bf5c      	itt	pl
 80114cc:	600b      	strpl	r3, [r1, #0]
 80114ce:	2002      	movpl	r0, #2
 80114d0:	4770      	bx	lr
 80114d2:	b298      	uxth	r0, r3
 80114d4:	b9a8      	cbnz	r0, 8011502 <__lo0bits+0x52>
 80114d6:	0c1b      	lsrs	r3, r3, #16
 80114d8:	2010      	movs	r0, #16
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	b90a      	cbnz	r2, 80114e2 <__lo0bits+0x32>
 80114de:	3008      	adds	r0, #8
 80114e0:	0a1b      	lsrs	r3, r3, #8
 80114e2:	071a      	lsls	r2, r3, #28
 80114e4:	bf04      	itt	eq
 80114e6:	091b      	lsreq	r3, r3, #4
 80114e8:	3004      	addeq	r0, #4
 80114ea:	079a      	lsls	r2, r3, #30
 80114ec:	bf04      	itt	eq
 80114ee:	089b      	lsreq	r3, r3, #2
 80114f0:	3002      	addeq	r0, #2
 80114f2:	07da      	lsls	r2, r3, #31
 80114f4:	d403      	bmi.n	80114fe <__lo0bits+0x4e>
 80114f6:	085b      	lsrs	r3, r3, #1
 80114f8:	f100 0001 	add.w	r0, r0, #1
 80114fc:	d005      	beq.n	801150a <__lo0bits+0x5a>
 80114fe:	600b      	str	r3, [r1, #0]
 8011500:	4770      	bx	lr
 8011502:	4610      	mov	r0, r2
 8011504:	e7e9      	b.n	80114da <__lo0bits+0x2a>
 8011506:	2000      	movs	r0, #0
 8011508:	4770      	bx	lr
 801150a:	2020      	movs	r0, #32
 801150c:	4770      	bx	lr
	...

08011510 <__i2b>:
 8011510:	b510      	push	{r4, lr}
 8011512:	460c      	mov	r4, r1
 8011514:	2101      	movs	r1, #1
 8011516:	f7ff feb9 	bl	801128c <_Balloc>
 801151a:	4602      	mov	r2, r0
 801151c:	b928      	cbnz	r0, 801152a <__i2b+0x1a>
 801151e:	4b05      	ldr	r3, [pc, #20]	; (8011534 <__i2b+0x24>)
 8011520:	4805      	ldr	r0, [pc, #20]	; (8011538 <__i2b+0x28>)
 8011522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011526:	f000 ffad 	bl	8012484 <__assert_func>
 801152a:	2301      	movs	r3, #1
 801152c:	6144      	str	r4, [r0, #20]
 801152e:	6103      	str	r3, [r0, #16]
 8011530:	bd10      	pop	{r4, pc}
 8011532:	bf00      	nop
 8011534:	08014030 	.word	0x08014030
 8011538:	08014120 	.word	0x08014120

0801153c <__multiply>:
 801153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011540:	4691      	mov	r9, r2
 8011542:	690a      	ldr	r2, [r1, #16]
 8011544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011548:	429a      	cmp	r2, r3
 801154a:	bfb8      	it	lt
 801154c:	460b      	movlt	r3, r1
 801154e:	460c      	mov	r4, r1
 8011550:	bfbc      	itt	lt
 8011552:	464c      	movlt	r4, r9
 8011554:	4699      	movlt	r9, r3
 8011556:	6927      	ldr	r7, [r4, #16]
 8011558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801155c:	68a3      	ldr	r3, [r4, #8]
 801155e:	6861      	ldr	r1, [r4, #4]
 8011560:	eb07 060a 	add.w	r6, r7, sl
 8011564:	42b3      	cmp	r3, r6
 8011566:	b085      	sub	sp, #20
 8011568:	bfb8      	it	lt
 801156a:	3101      	addlt	r1, #1
 801156c:	f7ff fe8e 	bl	801128c <_Balloc>
 8011570:	b930      	cbnz	r0, 8011580 <__multiply+0x44>
 8011572:	4602      	mov	r2, r0
 8011574:	4b44      	ldr	r3, [pc, #272]	; (8011688 <__multiply+0x14c>)
 8011576:	4845      	ldr	r0, [pc, #276]	; (801168c <__multiply+0x150>)
 8011578:	f240 115d 	movw	r1, #349	; 0x15d
 801157c:	f000 ff82 	bl	8012484 <__assert_func>
 8011580:	f100 0514 	add.w	r5, r0, #20
 8011584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011588:	462b      	mov	r3, r5
 801158a:	2200      	movs	r2, #0
 801158c:	4543      	cmp	r3, r8
 801158e:	d321      	bcc.n	80115d4 <__multiply+0x98>
 8011590:	f104 0314 	add.w	r3, r4, #20
 8011594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011598:	f109 0314 	add.w	r3, r9, #20
 801159c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80115a0:	9202      	str	r2, [sp, #8]
 80115a2:	1b3a      	subs	r2, r7, r4
 80115a4:	3a15      	subs	r2, #21
 80115a6:	f022 0203 	bic.w	r2, r2, #3
 80115aa:	3204      	adds	r2, #4
 80115ac:	f104 0115 	add.w	r1, r4, #21
 80115b0:	428f      	cmp	r7, r1
 80115b2:	bf38      	it	cc
 80115b4:	2204      	movcc	r2, #4
 80115b6:	9201      	str	r2, [sp, #4]
 80115b8:	9a02      	ldr	r2, [sp, #8]
 80115ba:	9303      	str	r3, [sp, #12]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d80c      	bhi.n	80115da <__multiply+0x9e>
 80115c0:	2e00      	cmp	r6, #0
 80115c2:	dd03      	ble.n	80115cc <__multiply+0x90>
 80115c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d05a      	beq.n	8011682 <__multiply+0x146>
 80115cc:	6106      	str	r6, [r0, #16]
 80115ce:	b005      	add	sp, #20
 80115d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d4:	f843 2b04 	str.w	r2, [r3], #4
 80115d8:	e7d8      	b.n	801158c <__multiply+0x50>
 80115da:	f8b3 a000 	ldrh.w	sl, [r3]
 80115de:	f1ba 0f00 	cmp.w	sl, #0
 80115e2:	d024      	beq.n	801162e <__multiply+0xf2>
 80115e4:	f104 0e14 	add.w	lr, r4, #20
 80115e8:	46a9      	mov	r9, r5
 80115ea:	f04f 0c00 	mov.w	ip, #0
 80115ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80115f2:	f8d9 1000 	ldr.w	r1, [r9]
 80115f6:	fa1f fb82 	uxth.w	fp, r2
 80115fa:	b289      	uxth	r1, r1
 80115fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011604:	f8d9 2000 	ldr.w	r2, [r9]
 8011608:	4461      	add	r1, ip
 801160a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801160e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011616:	b289      	uxth	r1, r1
 8011618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801161c:	4577      	cmp	r7, lr
 801161e:	f849 1b04 	str.w	r1, [r9], #4
 8011622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011626:	d8e2      	bhi.n	80115ee <__multiply+0xb2>
 8011628:	9a01      	ldr	r2, [sp, #4]
 801162a:	f845 c002 	str.w	ip, [r5, r2]
 801162e:	9a03      	ldr	r2, [sp, #12]
 8011630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011634:	3304      	adds	r3, #4
 8011636:	f1b9 0f00 	cmp.w	r9, #0
 801163a:	d020      	beq.n	801167e <__multiply+0x142>
 801163c:	6829      	ldr	r1, [r5, #0]
 801163e:	f104 0c14 	add.w	ip, r4, #20
 8011642:	46ae      	mov	lr, r5
 8011644:	f04f 0a00 	mov.w	sl, #0
 8011648:	f8bc b000 	ldrh.w	fp, [ip]
 801164c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011650:	fb09 220b 	mla	r2, r9, fp, r2
 8011654:	4492      	add	sl, r2
 8011656:	b289      	uxth	r1, r1
 8011658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801165c:	f84e 1b04 	str.w	r1, [lr], #4
 8011660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011664:	f8be 1000 	ldrh.w	r1, [lr]
 8011668:	0c12      	lsrs	r2, r2, #16
 801166a:	fb09 1102 	mla	r1, r9, r2, r1
 801166e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011672:	4567      	cmp	r7, ip
 8011674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011678:	d8e6      	bhi.n	8011648 <__multiply+0x10c>
 801167a:	9a01      	ldr	r2, [sp, #4]
 801167c:	50a9      	str	r1, [r5, r2]
 801167e:	3504      	adds	r5, #4
 8011680:	e79a      	b.n	80115b8 <__multiply+0x7c>
 8011682:	3e01      	subs	r6, #1
 8011684:	e79c      	b.n	80115c0 <__multiply+0x84>
 8011686:	bf00      	nop
 8011688:	08014030 	.word	0x08014030
 801168c:	08014120 	.word	0x08014120

08011690 <__pow5mult>:
 8011690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011694:	4615      	mov	r5, r2
 8011696:	f012 0203 	ands.w	r2, r2, #3
 801169a:	4606      	mov	r6, r0
 801169c:	460f      	mov	r7, r1
 801169e:	d007      	beq.n	80116b0 <__pow5mult+0x20>
 80116a0:	4c25      	ldr	r4, [pc, #148]	; (8011738 <__pow5mult+0xa8>)
 80116a2:	3a01      	subs	r2, #1
 80116a4:	2300      	movs	r3, #0
 80116a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116aa:	f7ff fe51 	bl	8011350 <__multadd>
 80116ae:	4607      	mov	r7, r0
 80116b0:	10ad      	asrs	r5, r5, #2
 80116b2:	d03d      	beq.n	8011730 <__pow5mult+0xa0>
 80116b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80116b6:	b97c      	cbnz	r4, 80116d8 <__pow5mult+0x48>
 80116b8:	2010      	movs	r0, #16
 80116ba:	f7ff fdcd 	bl	8011258 <malloc>
 80116be:	4602      	mov	r2, r0
 80116c0:	6270      	str	r0, [r6, #36]	; 0x24
 80116c2:	b928      	cbnz	r0, 80116d0 <__pow5mult+0x40>
 80116c4:	4b1d      	ldr	r3, [pc, #116]	; (801173c <__pow5mult+0xac>)
 80116c6:	481e      	ldr	r0, [pc, #120]	; (8011740 <__pow5mult+0xb0>)
 80116c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80116cc:	f000 feda 	bl	8012484 <__assert_func>
 80116d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80116d4:	6004      	str	r4, [r0, #0]
 80116d6:	60c4      	str	r4, [r0, #12]
 80116d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80116dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80116e0:	b94c      	cbnz	r4, 80116f6 <__pow5mult+0x66>
 80116e2:	f240 2171 	movw	r1, #625	; 0x271
 80116e6:	4630      	mov	r0, r6
 80116e8:	f7ff ff12 	bl	8011510 <__i2b>
 80116ec:	2300      	movs	r3, #0
 80116ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80116f2:	4604      	mov	r4, r0
 80116f4:	6003      	str	r3, [r0, #0]
 80116f6:	f04f 0900 	mov.w	r9, #0
 80116fa:	07eb      	lsls	r3, r5, #31
 80116fc:	d50a      	bpl.n	8011714 <__pow5mult+0x84>
 80116fe:	4639      	mov	r1, r7
 8011700:	4622      	mov	r2, r4
 8011702:	4630      	mov	r0, r6
 8011704:	f7ff ff1a 	bl	801153c <__multiply>
 8011708:	4639      	mov	r1, r7
 801170a:	4680      	mov	r8, r0
 801170c:	4630      	mov	r0, r6
 801170e:	f7ff fdfd 	bl	801130c <_Bfree>
 8011712:	4647      	mov	r7, r8
 8011714:	106d      	asrs	r5, r5, #1
 8011716:	d00b      	beq.n	8011730 <__pow5mult+0xa0>
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	b938      	cbnz	r0, 801172c <__pow5mult+0x9c>
 801171c:	4622      	mov	r2, r4
 801171e:	4621      	mov	r1, r4
 8011720:	4630      	mov	r0, r6
 8011722:	f7ff ff0b 	bl	801153c <__multiply>
 8011726:	6020      	str	r0, [r4, #0]
 8011728:	f8c0 9000 	str.w	r9, [r0]
 801172c:	4604      	mov	r4, r0
 801172e:	e7e4      	b.n	80116fa <__pow5mult+0x6a>
 8011730:	4638      	mov	r0, r7
 8011732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011736:	bf00      	nop
 8011738:	08014270 	.word	0x08014270
 801173c:	08013fbe 	.word	0x08013fbe
 8011740:	08014120 	.word	0x08014120

08011744 <__lshift>:
 8011744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011748:	460c      	mov	r4, r1
 801174a:	6849      	ldr	r1, [r1, #4]
 801174c:	6923      	ldr	r3, [r4, #16]
 801174e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011752:	68a3      	ldr	r3, [r4, #8]
 8011754:	4607      	mov	r7, r0
 8011756:	4691      	mov	r9, r2
 8011758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801175c:	f108 0601 	add.w	r6, r8, #1
 8011760:	42b3      	cmp	r3, r6
 8011762:	db0b      	blt.n	801177c <__lshift+0x38>
 8011764:	4638      	mov	r0, r7
 8011766:	f7ff fd91 	bl	801128c <_Balloc>
 801176a:	4605      	mov	r5, r0
 801176c:	b948      	cbnz	r0, 8011782 <__lshift+0x3e>
 801176e:	4602      	mov	r2, r0
 8011770:	4b2a      	ldr	r3, [pc, #168]	; (801181c <__lshift+0xd8>)
 8011772:	482b      	ldr	r0, [pc, #172]	; (8011820 <__lshift+0xdc>)
 8011774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011778:	f000 fe84 	bl	8012484 <__assert_func>
 801177c:	3101      	adds	r1, #1
 801177e:	005b      	lsls	r3, r3, #1
 8011780:	e7ee      	b.n	8011760 <__lshift+0x1c>
 8011782:	2300      	movs	r3, #0
 8011784:	f100 0114 	add.w	r1, r0, #20
 8011788:	f100 0210 	add.w	r2, r0, #16
 801178c:	4618      	mov	r0, r3
 801178e:	4553      	cmp	r3, sl
 8011790:	db37      	blt.n	8011802 <__lshift+0xbe>
 8011792:	6920      	ldr	r0, [r4, #16]
 8011794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011798:	f104 0314 	add.w	r3, r4, #20
 801179c:	f019 091f 	ands.w	r9, r9, #31
 80117a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80117a8:	d02f      	beq.n	801180a <__lshift+0xc6>
 80117aa:	f1c9 0e20 	rsb	lr, r9, #32
 80117ae:	468a      	mov	sl, r1
 80117b0:	f04f 0c00 	mov.w	ip, #0
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	fa02 f209 	lsl.w	r2, r2, r9
 80117ba:	ea42 020c 	orr.w	r2, r2, ip
 80117be:	f84a 2b04 	str.w	r2, [sl], #4
 80117c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80117c6:	4298      	cmp	r0, r3
 80117c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80117cc:	d8f2      	bhi.n	80117b4 <__lshift+0x70>
 80117ce:	1b03      	subs	r3, r0, r4
 80117d0:	3b15      	subs	r3, #21
 80117d2:	f023 0303 	bic.w	r3, r3, #3
 80117d6:	3304      	adds	r3, #4
 80117d8:	f104 0215 	add.w	r2, r4, #21
 80117dc:	4290      	cmp	r0, r2
 80117de:	bf38      	it	cc
 80117e0:	2304      	movcc	r3, #4
 80117e2:	f841 c003 	str.w	ip, [r1, r3]
 80117e6:	f1bc 0f00 	cmp.w	ip, #0
 80117ea:	d001      	beq.n	80117f0 <__lshift+0xac>
 80117ec:	f108 0602 	add.w	r6, r8, #2
 80117f0:	3e01      	subs	r6, #1
 80117f2:	4638      	mov	r0, r7
 80117f4:	612e      	str	r6, [r5, #16]
 80117f6:	4621      	mov	r1, r4
 80117f8:	f7ff fd88 	bl	801130c <_Bfree>
 80117fc:	4628      	mov	r0, r5
 80117fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011802:	f842 0f04 	str.w	r0, [r2, #4]!
 8011806:	3301      	adds	r3, #1
 8011808:	e7c1      	b.n	801178e <__lshift+0x4a>
 801180a:	3904      	subs	r1, #4
 801180c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011810:	f841 2f04 	str.w	r2, [r1, #4]!
 8011814:	4298      	cmp	r0, r3
 8011816:	d8f9      	bhi.n	801180c <__lshift+0xc8>
 8011818:	e7ea      	b.n	80117f0 <__lshift+0xac>
 801181a:	bf00      	nop
 801181c:	08014030 	.word	0x08014030
 8011820:	08014120 	.word	0x08014120

08011824 <__mcmp>:
 8011824:	b530      	push	{r4, r5, lr}
 8011826:	6902      	ldr	r2, [r0, #16]
 8011828:	690c      	ldr	r4, [r1, #16]
 801182a:	1b12      	subs	r2, r2, r4
 801182c:	d10e      	bne.n	801184c <__mcmp+0x28>
 801182e:	f100 0314 	add.w	r3, r0, #20
 8011832:	3114      	adds	r1, #20
 8011834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801183c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011844:	42a5      	cmp	r5, r4
 8011846:	d003      	beq.n	8011850 <__mcmp+0x2c>
 8011848:	d305      	bcc.n	8011856 <__mcmp+0x32>
 801184a:	2201      	movs	r2, #1
 801184c:	4610      	mov	r0, r2
 801184e:	bd30      	pop	{r4, r5, pc}
 8011850:	4283      	cmp	r3, r0
 8011852:	d3f3      	bcc.n	801183c <__mcmp+0x18>
 8011854:	e7fa      	b.n	801184c <__mcmp+0x28>
 8011856:	f04f 32ff 	mov.w	r2, #4294967295
 801185a:	e7f7      	b.n	801184c <__mcmp+0x28>

0801185c <__mdiff>:
 801185c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	460c      	mov	r4, r1
 8011862:	4606      	mov	r6, r0
 8011864:	4611      	mov	r1, r2
 8011866:	4620      	mov	r0, r4
 8011868:	4690      	mov	r8, r2
 801186a:	f7ff ffdb 	bl	8011824 <__mcmp>
 801186e:	1e05      	subs	r5, r0, #0
 8011870:	d110      	bne.n	8011894 <__mdiff+0x38>
 8011872:	4629      	mov	r1, r5
 8011874:	4630      	mov	r0, r6
 8011876:	f7ff fd09 	bl	801128c <_Balloc>
 801187a:	b930      	cbnz	r0, 801188a <__mdiff+0x2e>
 801187c:	4b3a      	ldr	r3, [pc, #232]	; (8011968 <__mdiff+0x10c>)
 801187e:	4602      	mov	r2, r0
 8011880:	f240 2132 	movw	r1, #562	; 0x232
 8011884:	4839      	ldr	r0, [pc, #228]	; (801196c <__mdiff+0x110>)
 8011886:	f000 fdfd 	bl	8012484 <__assert_func>
 801188a:	2301      	movs	r3, #1
 801188c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	bfa4      	itt	ge
 8011896:	4643      	movge	r3, r8
 8011898:	46a0      	movge	r8, r4
 801189a:	4630      	mov	r0, r6
 801189c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80118a0:	bfa6      	itte	ge
 80118a2:	461c      	movge	r4, r3
 80118a4:	2500      	movge	r5, #0
 80118a6:	2501      	movlt	r5, #1
 80118a8:	f7ff fcf0 	bl	801128c <_Balloc>
 80118ac:	b920      	cbnz	r0, 80118b8 <__mdiff+0x5c>
 80118ae:	4b2e      	ldr	r3, [pc, #184]	; (8011968 <__mdiff+0x10c>)
 80118b0:	4602      	mov	r2, r0
 80118b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80118b6:	e7e5      	b.n	8011884 <__mdiff+0x28>
 80118b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80118bc:	6926      	ldr	r6, [r4, #16]
 80118be:	60c5      	str	r5, [r0, #12]
 80118c0:	f104 0914 	add.w	r9, r4, #20
 80118c4:	f108 0514 	add.w	r5, r8, #20
 80118c8:	f100 0e14 	add.w	lr, r0, #20
 80118cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80118d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80118d4:	f108 0210 	add.w	r2, r8, #16
 80118d8:	46f2      	mov	sl, lr
 80118da:	2100      	movs	r1, #0
 80118dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80118e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80118e4:	fa1f f883 	uxth.w	r8, r3
 80118e8:	fa11 f18b 	uxtah	r1, r1, fp
 80118ec:	0c1b      	lsrs	r3, r3, #16
 80118ee:	eba1 0808 	sub.w	r8, r1, r8
 80118f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80118f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80118fa:	fa1f f888 	uxth.w	r8, r8
 80118fe:	1419      	asrs	r1, r3, #16
 8011900:	454e      	cmp	r6, r9
 8011902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011906:	f84a 3b04 	str.w	r3, [sl], #4
 801190a:	d8e7      	bhi.n	80118dc <__mdiff+0x80>
 801190c:	1b33      	subs	r3, r6, r4
 801190e:	3b15      	subs	r3, #21
 8011910:	f023 0303 	bic.w	r3, r3, #3
 8011914:	3304      	adds	r3, #4
 8011916:	3415      	adds	r4, #21
 8011918:	42a6      	cmp	r6, r4
 801191a:	bf38      	it	cc
 801191c:	2304      	movcc	r3, #4
 801191e:	441d      	add	r5, r3
 8011920:	4473      	add	r3, lr
 8011922:	469e      	mov	lr, r3
 8011924:	462e      	mov	r6, r5
 8011926:	4566      	cmp	r6, ip
 8011928:	d30e      	bcc.n	8011948 <__mdiff+0xec>
 801192a:	f10c 0203 	add.w	r2, ip, #3
 801192e:	1b52      	subs	r2, r2, r5
 8011930:	f022 0203 	bic.w	r2, r2, #3
 8011934:	3d03      	subs	r5, #3
 8011936:	45ac      	cmp	ip, r5
 8011938:	bf38      	it	cc
 801193a:	2200      	movcc	r2, #0
 801193c:	441a      	add	r2, r3
 801193e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011942:	b17b      	cbz	r3, 8011964 <__mdiff+0x108>
 8011944:	6107      	str	r7, [r0, #16]
 8011946:	e7a3      	b.n	8011890 <__mdiff+0x34>
 8011948:	f856 8b04 	ldr.w	r8, [r6], #4
 801194c:	fa11 f288 	uxtah	r2, r1, r8
 8011950:	1414      	asrs	r4, r2, #16
 8011952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011956:	b292      	uxth	r2, r2
 8011958:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801195c:	f84e 2b04 	str.w	r2, [lr], #4
 8011960:	1421      	asrs	r1, r4, #16
 8011962:	e7e0      	b.n	8011926 <__mdiff+0xca>
 8011964:	3f01      	subs	r7, #1
 8011966:	e7ea      	b.n	801193e <__mdiff+0xe2>
 8011968:	08014030 	.word	0x08014030
 801196c:	08014120 	.word	0x08014120

08011970 <__ulp>:
 8011970:	b082      	sub	sp, #8
 8011972:	ed8d 0b00 	vstr	d0, [sp]
 8011976:	9b01      	ldr	r3, [sp, #4]
 8011978:	4912      	ldr	r1, [pc, #72]	; (80119c4 <__ulp+0x54>)
 801197a:	4019      	ands	r1, r3
 801197c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011980:	2900      	cmp	r1, #0
 8011982:	dd05      	ble.n	8011990 <__ulp+0x20>
 8011984:	2200      	movs	r2, #0
 8011986:	460b      	mov	r3, r1
 8011988:	ec43 2b10 	vmov	d0, r2, r3
 801198c:	b002      	add	sp, #8
 801198e:	4770      	bx	lr
 8011990:	4249      	negs	r1, r1
 8011992:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011996:	ea4f 5021 	mov.w	r0, r1, asr #20
 801199a:	f04f 0200 	mov.w	r2, #0
 801199e:	f04f 0300 	mov.w	r3, #0
 80119a2:	da04      	bge.n	80119ae <__ulp+0x3e>
 80119a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80119a8:	fa41 f300 	asr.w	r3, r1, r0
 80119ac:	e7ec      	b.n	8011988 <__ulp+0x18>
 80119ae:	f1a0 0114 	sub.w	r1, r0, #20
 80119b2:	291e      	cmp	r1, #30
 80119b4:	bfda      	itte	le
 80119b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80119ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80119be:	2101      	movgt	r1, #1
 80119c0:	460a      	mov	r2, r1
 80119c2:	e7e1      	b.n	8011988 <__ulp+0x18>
 80119c4:	7ff00000 	.word	0x7ff00000

080119c8 <__b2d>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	6905      	ldr	r5, [r0, #16]
 80119cc:	f100 0714 	add.w	r7, r0, #20
 80119d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80119d4:	1f2e      	subs	r6, r5, #4
 80119d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80119da:	4620      	mov	r0, r4
 80119dc:	f7ff fd48 	bl	8011470 <__hi0bits>
 80119e0:	f1c0 0320 	rsb	r3, r0, #32
 80119e4:	280a      	cmp	r0, #10
 80119e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011a64 <__b2d+0x9c>
 80119ea:	600b      	str	r3, [r1, #0]
 80119ec:	dc14      	bgt.n	8011a18 <__b2d+0x50>
 80119ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80119f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80119f6:	42b7      	cmp	r7, r6
 80119f8:	ea41 030c 	orr.w	r3, r1, ip
 80119fc:	bf34      	ite	cc
 80119fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011a02:	2100      	movcs	r1, #0
 8011a04:	3015      	adds	r0, #21
 8011a06:	fa04 f000 	lsl.w	r0, r4, r0
 8011a0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8011a0e:	ea40 0201 	orr.w	r2, r0, r1
 8011a12:	ec43 2b10 	vmov	d0, r2, r3
 8011a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a18:	42b7      	cmp	r7, r6
 8011a1a:	bf3a      	itte	cc
 8011a1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011a20:	f1a5 0608 	subcc.w	r6, r5, #8
 8011a24:	2100      	movcs	r1, #0
 8011a26:	380b      	subs	r0, #11
 8011a28:	d017      	beq.n	8011a5a <__b2d+0x92>
 8011a2a:	f1c0 0c20 	rsb	ip, r0, #32
 8011a2e:	fa04 f500 	lsl.w	r5, r4, r0
 8011a32:	42be      	cmp	r6, r7
 8011a34:	fa21 f40c 	lsr.w	r4, r1, ip
 8011a38:	ea45 0504 	orr.w	r5, r5, r4
 8011a3c:	bf8c      	ite	hi
 8011a3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011a42:	2400      	movls	r4, #0
 8011a44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011a48:	fa01 f000 	lsl.w	r0, r1, r0
 8011a4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011a50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011a54:	ea40 0204 	orr.w	r2, r0, r4
 8011a58:	e7db      	b.n	8011a12 <__b2d+0x4a>
 8011a5a:	ea44 030c 	orr.w	r3, r4, ip
 8011a5e:	460a      	mov	r2, r1
 8011a60:	e7d7      	b.n	8011a12 <__b2d+0x4a>
 8011a62:	bf00      	nop
 8011a64:	3ff00000 	.word	0x3ff00000

08011a68 <__d2b>:
 8011a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a6c:	4689      	mov	r9, r1
 8011a6e:	2101      	movs	r1, #1
 8011a70:	ec57 6b10 	vmov	r6, r7, d0
 8011a74:	4690      	mov	r8, r2
 8011a76:	f7ff fc09 	bl	801128c <_Balloc>
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	b930      	cbnz	r0, 8011a8c <__d2b+0x24>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	4b25      	ldr	r3, [pc, #148]	; (8011b18 <__d2b+0xb0>)
 8011a82:	4826      	ldr	r0, [pc, #152]	; (8011b1c <__d2b+0xb4>)
 8011a84:	f240 310a 	movw	r1, #778	; 0x30a
 8011a88:	f000 fcfc 	bl	8012484 <__assert_func>
 8011a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a94:	bb35      	cbnz	r5, 8011ae4 <__d2b+0x7c>
 8011a96:	2e00      	cmp	r6, #0
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	d028      	beq.n	8011aee <__d2b+0x86>
 8011a9c:	4668      	mov	r0, sp
 8011a9e:	9600      	str	r6, [sp, #0]
 8011aa0:	f7ff fd06 	bl	80114b0 <__lo0bits>
 8011aa4:	9900      	ldr	r1, [sp, #0]
 8011aa6:	b300      	cbz	r0, 8011aea <__d2b+0x82>
 8011aa8:	9a01      	ldr	r2, [sp, #4]
 8011aaa:	f1c0 0320 	rsb	r3, r0, #32
 8011aae:	fa02 f303 	lsl.w	r3, r2, r3
 8011ab2:	430b      	orrs	r3, r1
 8011ab4:	40c2      	lsrs	r2, r0
 8011ab6:	6163      	str	r3, [r4, #20]
 8011ab8:	9201      	str	r2, [sp, #4]
 8011aba:	9b01      	ldr	r3, [sp, #4]
 8011abc:	61a3      	str	r3, [r4, #24]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	bf14      	ite	ne
 8011ac2:	2202      	movne	r2, #2
 8011ac4:	2201      	moveq	r2, #1
 8011ac6:	6122      	str	r2, [r4, #16]
 8011ac8:	b1d5      	cbz	r5, 8011b00 <__d2b+0x98>
 8011aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ace:	4405      	add	r5, r0
 8011ad0:	f8c9 5000 	str.w	r5, [r9]
 8011ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ad8:	f8c8 0000 	str.w	r0, [r8]
 8011adc:	4620      	mov	r0, r4
 8011ade:	b003      	add	sp, #12
 8011ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ae8:	e7d5      	b.n	8011a96 <__d2b+0x2e>
 8011aea:	6161      	str	r1, [r4, #20]
 8011aec:	e7e5      	b.n	8011aba <__d2b+0x52>
 8011aee:	a801      	add	r0, sp, #4
 8011af0:	f7ff fcde 	bl	80114b0 <__lo0bits>
 8011af4:	9b01      	ldr	r3, [sp, #4]
 8011af6:	6163      	str	r3, [r4, #20]
 8011af8:	2201      	movs	r2, #1
 8011afa:	6122      	str	r2, [r4, #16]
 8011afc:	3020      	adds	r0, #32
 8011afe:	e7e3      	b.n	8011ac8 <__d2b+0x60>
 8011b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b08:	f8c9 0000 	str.w	r0, [r9]
 8011b0c:	6918      	ldr	r0, [r3, #16]
 8011b0e:	f7ff fcaf 	bl	8011470 <__hi0bits>
 8011b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b16:	e7df      	b.n	8011ad8 <__d2b+0x70>
 8011b18:	08014030 	.word	0x08014030
 8011b1c:	08014120 	.word	0x08014120

08011b20 <__ratio>:
 8011b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	4688      	mov	r8, r1
 8011b26:	4669      	mov	r1, sp
 8011b28:	4681      	mov	r9, r0
 8011b2a:	f7ff ff4d 	bl	80119c8 <__b2d>
 8011b2e:	a901      	add	r1, sp, #4
 8011b30:	4640      	mov	r0, r8
 8011b32:	ec55 4b10 	vmov	r4, r5, d0
 8011b36:	f7ff ff47 	bl	80119c8 <__b2d>
 8011b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011b42:	eba3 0c02 	sub.w	ip, r3, r2
 8011b46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b4a:	1a9b      	subs	r3, r3, r2
 8011b4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011b50:	ec51 0b10 	vmov	r0, r1, d0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	bfd6      	itet	le
 8011b58:	460a      	movle	r2, r1
 8011b5a:	462a      	movgt	r2, r5
 8011b5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b60:	468b      	mov	fp, r1
 8011b62:	462f      	mov	r7, r5
 8011b64:	bfd4      	ite	le
 8011b66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011b6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011b6e:	4620      	mov	r0, r4
 8011b70:	ee10 2a10 	vmov	r2, s0
 8011b74:	465b      	mov	r3, fp
 8011b76:	4639      	mov	r1, r7
 8011b78:	f7ee fe90 	bl	800089c <__aeabi_ddiv>
 8011b7c:	ec41 0b10 	vmov	d0, r0, r1
 8011b80:	b003      	add	sp, #12
 8011b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b86 <__copybits>:
 8011b86:	3901      	subs	r1, #1
 8011b88:	b570      	push	{r4, r5, r6, lr}
 8011b8a:	1149      	asrs	r1, r1, #5
 8011b8c:	6914      	ldr	r4, [r2, #16]
 8011b8e:	3101      	adds	r1, #1
 8011b90:	f102 0314 	add.w	r3, r2, #20
 8011b94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b9c:	1f05      	subs	r5, r0, #4
 8011b9e:	42a3      	cmp	r3, r4
 8011ba0:	d30c      	bcc.n	8011bbc <__copybits+0x36>
 8011ba2:	1aa3      	subs	r3, r4, r2
 8011ba4:	3b11      	subs	r3, #17
 8011ba6:	f023 0303 	bic.w	r3, r3, #3
 8011baa:	3211      	adds	r2, #17
 8011bac:	42a2      	cmp	r2, r4
 8011bae:	bf88      	it	hi
 8011bb0:	2300      	movhi	r3, #0
 8011bb2:	4418      	add	r0, r3
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	4288      	cmp	r0, r1
 8011bb8:	d305      	bcc.n	8011bc6 <__copybits+0x40>
 8011bba:	bd70      	pop	{r4, r5, r6, pc}
 8011bbc:	f853 6b04 	ldr.w	r6, [r3], #4
 8011bc0:	f845 6f04 	str.w	r6, [r5, #4]!
 8011bc4:	e7eb      	b.n	8011b9e <__copybits+0x18>
 8011bc6:	f840 3b04 	str.w	r3, [r0], #4
 8011bca:	e7f4      	b.n	8011bb6 <__copybits+0x30>

08011bcc <__any_on>:
 8011bcc:	f100 0214 	add.w	r2, r0, #20
 8011bd0:	6900      	ldr	r0, [r0, #16]
 8011bd2:	114b      	asrs	r3, r1, #5
 8011bd4:	4298      	cmp	r0, r3
 8011bd6:	b510      	push	{r4, lr}
 8011bd8:	db11      	blt.n	8011bfe <__any_on+0x32>
 8011bda:	dd0a      	ble.n	8011bf2 <__any_on+0x26>
 8011bdc:	f011 011f 	ands.w	r1, r1, #31
 8011be0:	d007      	beq.n	8011bf2 <__any_on+0x26>
 8011be2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011be6:	fa24 f001 	lsr.w	r0, r4, r1
 8011bea:	fa00 f101 	lsl.w	r1, r0, r1
 8011bee:	428c      	cmp	r4, r1
 8011bf0:	d10b      	bne.n	8011c0a <__any_on+0x3e>
 8011bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	d803      	bhi.n	8011c02 <__any_on+0x36>
 8011bfa:	2000      	movs	r0, #0
 8011bfc:	bd10      	pop	{r4, pc}
 8011bfe:	4603      	mov	r3, r0
 8011c00:	e7f7      	b.n	8011bf2 <__any_on+0x26>
 8011c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c06:	2900      	cmp	r1, #0
 8011c08:	d0f5      	beq.n	8011bf6 <__any_on+0x2a>
 8011c0a:	2001      	movs	r0, #1
 8011c0c:	e7f6      	b.n	8011bfc <__any_on+0x30>

08011c0e <_calloc_r>:
 8011c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c10:	fba1 2402 	umull	r2, r4, r1, r2
 8011c14:	b94c      	cbnz	r4, 8011c2a <_calloc_r+0x1c>
 8011c16:	4611      	mov	r1, r2
 8011c18:	9201      	str	r2, [sp, #4]
 8011c1a:	f000 f87b 	bl	8011d14 <_malloc_r>
 8011c1e:	9a01      	ldr	r2, [sp, #4]
 8011c20:	4605      	mov	r5, r0
 8011c22:	b930      	cbnz	r0, 8011c32 <_calloc_r+0x24>
 8011c24:	4628      	mov	r0, r5
 8011c26:	b003      	add	sp, #12
 8011c28:	bd30      	pop	{r4, r5, pc}
 8011c2a:	220c      	movs	r2, #12
 8011c2c:	6002      	str	r2, [r0, #0]
 8011c2e:	2500      	movs	r5, #0
 8011c30:	e7f8      	b.n	8011c24 <_calloc_r+0x16>
 8011c32:	4621      	mov	r1, r4
 8011c34:	f7fc f848 	bl	800dcc8 <memset>
 8011c38:	e7f4      	b.n	8011c24 <_calloc_r+0x16>
	...

08011c3c <_free_r>:
 8011c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c3e:	2900      	cmp	r1, #0
 8011c40:	d044      	beq.n	8011ccc <_free_r+0x90>
 8011c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c46:	9001      	str	r0, [sp, #4]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8011c4e:	bfb8      	it	lt
 8011c50:	18e4      	addlt	r4, r4, r3
 8011c52:	f000 fca5 	bl	80125a0 <__malloc_lock>
 8011c56:	4a1e      	ldr	r2, [pc, #120]	; (8011cd0 <_free_r+0x94>)
 8011c58:	9801      	ldr	r0, [sp, #4]
 8011c5a:	6813      	ldr	r3, [r2, #0]
 8011c5c:	b933      	cbnz	r3, 8011c6c <_free_r+0x30>
 8011c5e:	6063      	str	r3, [r4, #4]
 8011c60:	6014      	str	r4, [r2, #0]
 8011c62:	b003      	add	sp, #12
 8011c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c68:	f000 bca0 	b.w	80125ac <__malloc_unlock>
 8011c6c:	42a3      	cmp	r3, r4
 8011c6e:	d908      	bls.n	8011c82 <_free_r+0x46>
 8011c70:	6825      	ldr	r5, [r4, #0]
 8011c72:	1961      	adds	r1, r4, r5
 8011c74:	428b      	cmp	r3, r1
 8011c76:	bf01      	itttt	eq
 8011c78:	6819      	ldreq	r1, [r3, #0]
 8011c7a:	685b      	ldreq	r3, [r3, #4]
 8011c7c:	1949      	addeq	r1, r1, r5
 8011c7e:	6021      	streq	r1, [r4, #0]
 8011c80:	e7ed      	b.n	8011c5e <_free_r+0x22>
 8011c82:	461a      	mov	r2, r3
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	b10b      	cbz	r3, 8011c8c <_free_r+0x50>
 8011c88:	42a3      	cmp	r3, r4
 8011c8a:	d9fa      	bls.n	8011c82 <_free_r+0x46>
 8011c8c:	6811      	ldr	r1, [r2, #0]
 8011c8e:	1855      	adds	r5, r2, r1
 8011c90:	42a5      	cmp	r5, r4
 8011c92:	d10b      	bne.n	8011cac <_free_r+0x70>
 8011c94:	6824      	ldr	r4, [r4, #0]
 8011c96:	4421      	add	r1, r4
 8011c98:	1854      	adds	r4, r2, r1
 8011c9a:	42a3      	cmp	r3, r4
 8011c9c:	6011      	str	r1, [r2, #0]
 8011c9e:	d1e0      	bne.n	8011c62 <_free_r+0x26>
 8011ca0:	681c      	ldr	r4, [r3, #0]
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	6053      	str	r3, [r2, #4]
 8011ca6:	4421      	add	r1, r4
 8011ca8:	6011      	str	r1, [r2, #0]
 8011caa:	e7da      	b.n	8011c62 <_free_r+0x26>
 8011cac:	d902      	bls.n	8011cb4 <_free_r+0x78>
 8011cae:	230c      	movs	r3, #12
 8011cb0:	6003      	str	r3, [r0, #0]
 8011cb2:	e7d6      	b.n	8011c62 <_free_r+0x26>
 8011cb4:	6825      	ldr	r5, [r4, #0]
 8011cb6:	1961      	adds	r1, r4, r5
 8011cb8:	428b      	cmp	r3, r1
 8011cba:	bf04      	itt	eq
 8011cbc:	6819      	ldreq	r1, [r3, #0]
 8011cbe:	685b      	ldreq	r3, [r3, #4]
 8011cc0:	6063      	str	r3, [r4, #4]
 8011cc2:	bf04      	itt	eq
 8011cc4:	1949      	addeq	r1, r1, r5
 8011cc6:	6021      	streq	r1, [r4, #0]
 8011cc8:	6054      	str	r4, [r2, #4]
 8011cca:	e7ca      	b.n	8011c62 <_free_r+0x26>
 8011ccc:	b003      	add	sp, #12
 8011cce:	bd30      	pop	{r4, r5, pc}
 8011cd0:	200098e0 	.word	0x200098e0

08011cd4 <sbrk_aligned>:
 8011cd4:	b570      	push	{r4, r5, r6, lr}
 8011cd6:	4e0e      	ldr	r6, [pc, #56]	; (8011d10 <sbrk_aligned+0x3c>)
 8011cd8:	460c      	mov	r4, r1
 8011cda:	6831      	ldr	r1, [r6, #0]
 8011cdc:	4605      	mov	r5, r0
 8011cde:	b911      	cbnz	r1, 8011ce6 <sbrk_aligned+0x12>
 8011ce0:	f000 fb4a 	bl	8012378 <_sbrk_r>
 8011ce4:	6030      	str	r0, [r6, #0]
 8011ce6:	4621      	mov	r1, r4
 8011ce8:	4628      	mov	r0, r5
 8011cea:	f000 fb45 	bl	8012378 <_sbrk_r>
 8011cee:	1c43      	adds	r3, r0, #1
 8011cf0:	d00a      	beq.n	8011d08 <sbrk_aligned+0x34>
 8011cf2:	1cc4      	adds	r4, r0, #3
 8011cf4:	f024 0403 	bic.w	r4, r4, #3
 8011cf8:	42a0      	cmp	r0, r4
 8011cfa:	d007      	beq.n	8011d0c <sbrk_aligned+0x38>
 8011cfc:	1a21      	subs	r1, r4, r0
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f000 fb3a 	bl	8012378 <_sbrk_r>
 8011d04:	3001      	adds	r0, #1
 8011d06:	d101      	bne.n	8011d0c <sbrk_aligned+0x38>
 8011d08:	f04f 34ff 	mov.w	r4, #4294967295
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	bd70      	pop	{r4, r5, r6, pc}
 8011d10:	200098e4 	.word	0x200098e4

08011d14 <_malloc_r>:
 8011d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d18:	1ccd      	adds	r5, r1, #3
 8011d1a:	f025 0503 	bic.w	r5, r5, #3
 8011d1e:	3508      	adds	r5, #8
 8011d20:	2d0c      	cmp	r5, #12
 8011d22:	bf38      	it	cc
 8011d24:	250c      	movcc	r5, #12
 8011d26:	2d00      	cmp	r5, #0
 8011d28:	4607      	mov	r7, r0
 8011d2a:	db01      	blt.n	8011d30 <_malloc_r+0x1c>
 8011d2c:	42a9      	cmp	r1, r5
 8011d2e:	d905      	bls.n	8011d3c <_malloc_r+0x28>
 8011d30:	230c      	movs	r3, #12
 8011d32:	603b      	str	r3, [r7, #0]
 8011d34:	2600      	movs	r6, #0
 8011d36:	4630      	mov	r0, r6
 8011d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d3c:	4e2e      	ldr	r6, [pc, #184]	; (8011df8 <_malloc_r+0xe4>)
 8011d3e:	f000 fc2f 	bl	80125a0 <__malloc_lock>
 8011d42:	6833      	ldr	r3, [r6, #0]
 8011d44:	461c      	mov	r4, r3
 8011d46:	bb34      	cbnz	r4, 8011d96 <_malloc_r+0x82>
 8011d48:	4629      	mov	r1, r5
 8011d4a:	4638      	mov	r0, r7
 8011d4c:	f7ff ffc2 	bl	8011cd4 <sbrk_aligned>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	4604      	mov	r4, r0
 8011d54:	d14d      	bne.n	8011df2 <_malloc_r+0xde>
 8011d56:	6834      	ldr	r4, [r6, #0]
 8011d58:	4626      	mov	r6, r4
 8011d5a:	2e00      	cmp	r6, #0
 8011d5c:	d140      	bne.n	8011de0 <_malloc_r+0xcc>
 8011d5e:	6823      	ldr	r3, [r4, #0]
 8011d60:	4631      	mov	r1, r6
 8011d62:	4638      	mov	r0, r7
 8011d64:	eb04 0803 	add.w	r8, r4, r3
 8011d68:	f000 fb06 	bl	8012378 <_sbrk_r>
 8011d6c:	4580      	cmp	r8, r0
 8011d6e:	d13a      	bne.n	8011de6 <_malloc_r+0xd2>
 8011d70:	6821      	ldr	r1, [r4, #0]
 8011d72:	3503      	adds	r5, #3
 8011d74:	1a6d      	subs	r5, r5, r1
 8011d76:	f025 0503 	bic.w	r5, r5, #3
 8011d7a:	3508      	adds	r5, #8
 8011d7c:	2d0c      	cmp	r5, #12
 8011d7e:	bf38      	it	cc
 8011d80:	250c      	movcc	r5, #12
 8011d82:	4629      	mov	r1, r5
 8011d84:	4638      	mov	r0, r7
 8011d86:	f7ff ffa5 	bl	8011cd4 <sbrk_aligned>
 8011d8a:	3001      	adds	r0, #1
 8011d8c:	d02b      	beq.n	8011de6 <_malloc_r+0xd2>
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	442b      	add	r3, r5
 8011d92:	6023      	str	r3, [r4, #0]
 8011d94:	e00e      	b.n	8011db4 <_malloc_r+0xa0>
 8011d96:	6822      	ldr	r2, [r4, #0]
 8011d98:	1b52      	subs	r2, r2, r5
 8011d9a:	d41e      	bmi.n	8011dda <_malloc_r+0xc6>
 8011d9c:	2a0b      	cmp	r2, #11
 8011d9e:	d916      	bls.n	8011dce <_malloc_r+0xba>
 8011da0:	1961      	adds	r1, r4, r5
 8011da2:	42a3      	cmp	r3, r4
 8011da4:	6025      	str	r5, [r4, #0]
 8011da6:	bf18      	it	ne
 8011da8:	6059      	strne	r1, [r3, #4]
 8011daa:	6863      	ldr	r3, [r4, #4]
 8011dac:	bf08      	it	eq
 8011dae:	6031      	streq	r1, [r6, #0]
 8011db0:	5162      	str	r2, [r4, r5]
 8011db2:	604b      	str	r3, [r1, #4]
 8011db4:	4638      	mov	r0, r7
 8011db6:	f104 060b 	add.w	r6, r4, #11
 8011dba:	f000 fbf7 	bl	80125ac <__malloc_unlock>
 8011dbe:	f026 0607 	bic.w	r6, r6, #7
 8011dc2:	1d23      	adds	r3, r4, #4
 8011dc4:	1af2      	subs	r2, r6, r3
 8011dc6:	d0b6      	beq.n	8011d36 <_malloc_r+0x22>
 8011dc8:	1b9b      	subs	r3, r3, r6
 8011dca:	50a3      	str	r3, [r4, r2]
 8011dcc:	e7b3      	b.n	8011d36 <_malloc_r+0x22>
 8011dce:	6862      	ldr	r2, [r4, #4]
 8011dd0:	42a3      	cmp	r3, r4
 8011dd2:	bf0c      	ite	eq
 8011dd4:	6032      	streq	r2, [r6, #0]
 8011dd6:	605a      	strne	r2, [r3, #4]
 8011dd8:	e7ec      	b.n	8011db4 <_malloc_r+0xa0>
 8011dda:	4623      	mov	r3, r4
 8011ddc:	6864      	ldr	r4, [r4, #4]
 8011dde:	e7b2      	b.n	8011d46 <_malloc_r+0x32>
 8011de0:	4634      	mov	r4, r6
 8011de2:	6876      	ldr	r6, [r6, #4]
 8011de4:	e7b9      	b.n	8011d5a <_malloc_r+0x46>
 8011de6:	230c      	movs	r3, #12
 8011de8:	603b      	str	r3, [r7, #0]
 8011dea:	4638      	mov	r0, r7
 8011dec:	f000 fbde 	bl	80125ac <__malloc_unlock>
 8011df0:	e7a1      	b.n	8011d36 <_malloc_r+0x22>
 8011df2:	6025      	str	r5, [r4, #0]
 8011df4:	e7de      	b.n	8011db4 <_malloc_r+0xa0>
 8011df6:	bf00      	nop
 8011df8:	200098e0 	.word	0x200098e0

08011dfc <__ssputs_r>:
 8011dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e00:	688e      	ldr	r6, [r1, #8]
 8011e02:	429e      	cmp	r6, r3
 8011e04:	4682      	mov	sl, r0
 8011e06:	460c      	mov	r4, r1
 8011e08:	4690      	mov	r8, r2
 8011e0a:	461f      	mov	r7, r3
 8011e0c:	d838      	bhi.n	8011e80 <__ssputs_r+0x84>
 8011e0e:	898a      	ldrh	r2, [r1, #12]
 8011e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e14:	d032      	beq.n	8011e7c <__ssputs_r+0x80>
 8011e16:	6825      	ldr	r5, [r4, #0]
 8011e18:	6909      	ldr	r1, [r1, #16]
 8011e1a:	eba5 0901 	sub.w	r9, r5, r1
 8011e1e:	6965      	ldr	r5, [r4, #20]
 8011e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e28:	3301      	adds	r3, #1
 8011e2a:	444b      	add	r3, r9
 8011e2c:	106d      	asrs	r5, r5, #1
 8011e2e:	429d      	cmp	r5, r3
 8011e30:	bf38      	it	cc
 8011e32:	461d      	movcc	r5, r3
 8011e34:	0553      	lsls	r3, r2, #21
 8011e36:	d531      	bpl.n	8011e9c <__ssputs_r+0xa0>
 8011e38:	4629      	mov	r1, r5
 8011e3a:	f7ff ff6b 	bl	8011d14 <_malloc_r>
 8011e3e:	4606      	mov	r6, r0
 8011e40:	b950      	cbnz	r0, 8011e58 <__ssputs_r+0x5c>
 8011e42:	230c      	movs	r3, #12
 8011e44:	f8ca 3000 	str.w	r3, [sl]
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e58:	6921      	ldr	r1, [r4, #16]
 8011e5a:	464a      	mov	r2, r9
 8011e5c:	f7fb ff26 	bl	800dcac <memcpy>
 8011e60:	89a3      	ldrh	r3, [r4, #12]
 8011e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e6a:	81a3      	strh	r3, [r4, #12]
 8011e6c:	6126      	str	r6, [r4, #16]
 8011e6e:	6165      	str	r5, [r4, #20]
 8011e70:	444e      	add	r6, r9
 8011e72:	eba5 0509 	sub.w	r5, r5, r9
 8011e76:	6026      	str	r6, [r4, #0]
 8011e78:	60a5      	str	r5, [r4, #8]
 8011e7a:	463e      	mov	r6, r7
 8011e7c:	42be      	cmp	r6, r7
 8011e7e:	d900      	bls.n	8011e82 <__ssputs_r+0x86>
 8011e80:	463e      	mov	r6, r7
 8011e82:	6820      	ldr	r0, [r4, #0]
 8011e84:	4632      	mov	r2, r6
 8011e86:	4641      	mov	r1, r8
 8011e88:	f000 fb70 	bl	801256c <memmove>
 8011e8c:	68a3      	ldr	r3, [r4, #8]
 8011e8e:	1b9b      	subs	r3, r3, r6
 8011e90:	60a3      	str	r3, [r4, #8]
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	4433      	add	r3, r6
 8011e96:	6023      	str	r3, [r4, #0]
 8011e98:	2000      	movs	r0, #0
 8011e9a:	e7db      	b.n	8011e54 <__ssputs_r+0x58>
 8011e9c:	462a      	mov	r2, r5
 8011e9e:	f000 fb8b 	bl	80125b8 <_realloc_r>
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d1e1      	bne.n	8011e6c <__ssputs_r+0x70>
 8011ea8:	6921      	ldr	r1, [r4, #16]
 8011eaa:	4650      	mov	r0, sl
 8011eac:	f7ff fec6 	bl	8011c3c <_free_r>
 8011eb0:	e7c7      	b.n	8011e42 <__ssputs_r+0x46>
	...

08011eb4 <_svfiprintf_r>:
 8011eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb8:	4698      	mov	r8, r3
 8011eba:	898b      	ldrh	r3, [r1, #12]
 8011ebc:	061b      	lsls	r3, r3, #24
 8011ebe:	b09d      	sub	sp, #116	; 0x74
 8011ec0:	4607      	mov	r7, r0
 8011ec2:	460d      	mov	r5, r1
 8011ec4:	4614      	mov	r4, r2
 8011ec6:	d50e      	bpl.n	8011ee6 <_svfiprintf_r+0x32>
 8011ec8:	690b      	ldr	r3, [r1, #16]
 8011eca:	b963      	cbnz	r3, 8011ee6 <_svfiprintf_r+0x32>
 8011ecc:	2140      	movs	r1, #64	; 0x40
 8011ece:	f7ff ff21 	bl	8011d14 <_malloc_r>
 8011ed2:	6028      	str	r0, [r5, #0]
 8011ed4:	6128      	str	r0, [r5, #16]
 8011ed6:	b920      	cbnz	r0, 8011ee2 <_svfiprintf_r+0x2e>
 8011ed8:	230c      	movs	r3, #12
 8011eda:	603b      	str	r3, [r7, #0]
 8011edc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee0:	e0d1      	b.n	8012086 <_svfiprintf_r+0x1d2>
 8011ee2:	2340      	movs	r3, #64	; 0x40
 8011ee4:	616b      	str	r3, [r5, #20]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8011eea:	2320      	movs	r3, #32
 8011eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ef4:	2330      	movs	r3, #48	; 0x30
 8011ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120a0 <_svfiprintf_r+0x1ec>
 8011efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011efe:	f04f 0901 	mov.w	r9, #1
 8011f02:	4623      	mov	r3, r4
 8011f04:	469a      	mov	sl, r3
 8011f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f0a:	b10a      	cbz	r2, 8011f10 <_svfiprintf_r+0x5c>
 8011f0c:	2a25      	cmp	r2, #37	; 0x25
 8011f0e:	d1f9      	bne.n	8011f04 <_svfiprintf_r+0x50>
 8011f10:	ebba 0b04 	subs.w	fp, sl, r4
 8011f14:	d00b      	beq.n	8011f2e <_svfiprintf_r+0x7a>
 8011f16:	465b      	mov	r3, fp
 8011f18:	4622      	mov	r2, r4
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	4638      	mov	r0, r7
 8011f1e:	f7ff ff6d 	bl	8011dfc <__ssputs_r>
 8011f22:	3001      	adds	r0, #1
 8011f24:	f000 80aa 	beq.w	801207c <_svfiprintf_r+0x1c8>
 8011f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f2a:	445a      	add	r2, fp
 8011f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f000 80a2 	beq.w	801207c <_svfiprintf_r+0x1c8>
 8011f38:	2300      	movs	r3, #0
 8011f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f42:	f10a 0a01 	add.w	sl, sl, #1
 8011f46:	9304      	str	r3, [sp, #16]
 8011f48:	9307      	str	r3, [sp, #28]
 8011f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8011f50:	4654      	mov	r4, sl
 8011f52:	2205      	movs	r2, #5
 8011f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f58:	4851      	ldr	r0, [pc, #324]	; (80120a0 <_svfiprintf_r+0x1ec>)
 8011f5a:	f7ee f969 	bl	8000230 <memchr>
 8011f5e:	9a04      	ldr	r2, [sp, #16]
 8011f60:	b9d8      	cbnz	r0, 8011f9a <_svfiprintf_r+0xe6>
 8011f62:	06d0      	lsls	r0, r2, #27
 8011f64:	bf44      	itt	mi
 8011f66:	2320      	movmi	r3, #32
 8011f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f6c:	0711      	lsls	r1, r2, #28
 8011f6e:	bf44      	itt	mi
 8011f70:	232b      	movmi	r3, #43	; 0x2b
 8011f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f76:	f89a 3000 	ldrb.w	r3, [sl]
 8011f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f7c:	d015      	beq.n	8011faa <_svfiprintf_r+0xf6>
 8011f7e:	9a07      	ldr	r2, [sp, #28]
 8011f80:	4654      	mov	r4, sl
 8011f82:	2000      	movs	r0, #0
 8011f84:	f04f 0c0a 	mov.w	ip, #10
 8011f88:	4621      	mov	r1, r4
 8011f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f8e:	3b30      	subs	r3, #48	; 0x30
 8011f90:	2b09      	cmp	r3, #9
 8011f92:	d94e      	bls.n	8012032 <_svfiprintf_r+0x17e>
 8011f94:	b1b0      	cbz	r0, 8011fc4 <_svfiprintf_r+0x110>
 8011f96:	9207      	str	r2, [sp, #28]
 8011f98:	e014      	b.n	8011fc4 <_svfiprintf_r+0x110>
 8011f9a:	eba0 0308 	sub.w	r3, r0, r8
 8011f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	9304      	str	r3, [sp, #16]
 8011fa6:	46a2      	mov	sl, r4
 8011fa8:	e7d2      	b.n	8011f50 <_svfiprintf_r+0x9c>
 8011faa:	9b03      	ldr	r3, [sp, #12]
 8011fac:	1d19      	adds	r1, r3, #4
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	9103      	str	r1, [sp, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	bfbb      	ittet	lt
 8011fb6:	425b      	neglt	r3, r3
 8011fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8011fbc:	9307      	strge	r3, [sp, #28]
 8011fbe:	9307      	strlt	r3, [sp, #28]
 8011fc0:	bfb8      	it	lt
 8011fc2:	9204      	strlt	r2, [sp, #16]
 8011fc4:	7823      	ldrb	r3, [r4, #0]
 8011fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8011fc8:	d10c      	bne.n	8011fe4 <_svfiprintf_r+0x130>
 8011fca:	7863      	ldrb	r3, [r4, #1]
 8011fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8011fce:	d135      	bne.n	801203c <_svfiprintf_r+0x188>
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	1d1a      	adds	r2, r3, #4
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	9203      	str	r2, [sp, #12]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	bfb8      	it	lt
 8011fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fe0:	3402      	adds	r4, #2
 8011fe2:	9305      	str	r3, [sp, #20]
 8011fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80120b0 <_svfiprintf_r+0x1fc>
 8011fe8:	7821      	ldrb	r1, [r4, #0]
 8011fea:	2203      	movs	r2, #3
 8011fec:	4650      	mov	r0, sl
 8011fee:	f7ee f91f 	bl	8000230 <memchr>
 8011ff2:	b140      	cbz	r0, 8012006 <_svfiprintf_r+0x152>
 8011ff4:	2340      	movs	r3, #64	; 0x40
 8011ff6:	eba0 000a 	sub.w	r0, r0, sl
 8011ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8011ffe:	9b04      	ldr	r3, [sp, #16]
 8012000:	4303      	orrs	r3, r0
 8012002:	3401      	adds	r4, #1
 8012004:	9304      	str	r3, [sp, #16]
 8012006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801200a:	4826      	ldr	r0, [pc, #152]	; (80120a4 <_svfiprintf_r+0x1f0>)
 801200c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012010:	2206      	movs	r2, #6
 8012012:	f7ee f90d 	bl	8000230 <memchr>
 8012016:	2800      	cmp	r0, #0
 8012018:	d038      	beq.n	801208c <_svfiprintf_r+0x1d8>
 801201a:	4b23      	ldr	r3, [pc, #140]	; (80120a8 <_svfiprintf_r+0x1f4>)
 801201c:	bb1b      	cbnz	r3, 8012066 <_svfiprintf_r+0x1b2>
 801201e:	9b03      	ldr	r3, [sp, #12]
 8012020:	3307      	adds	r3, #7
 8012022:	f023 0307 	bic.w	r3, r3, #7
 8012026:	3308      	adds	r3, #8
 8012028:	9303      	str	r3, [sp, #12]
 801202a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801202c:	4433      	add	r3, r6
 801202e:	9309      	str	r3, [sp, #36]	; 0x24
 8012030:	e767      	b.n	8011f02 <_svfiprintf_r+0x4e>
 8012032:	fb0c 3202 	mla	r2, ip, r2, r3
 8012036:	460c      	mov	r4, r1
 8012038:	2001      	movs	r0, #1
 801203a:	e7a5      	b.n	8011f88 <_svfiprintf_r+0xd4>
 801203c:	2300      	movs	r3, #0
 801203e:	3401      	adds	r4, #1
 8012040:	9305      	str	r3, [sp, #20]
 8012042:	4619      	mov	r1, r3
 8012044:	f04f 0c0a 	mov.w	ip, #10
 8012048:	4620      	mov	r0, r4
 801204a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801204e:	3a30      	subs	r2, #48	; 0x30
 8012050:	2a09      	cmp	r2, #9
 8012052:	d903      	bls.n	801205c <_svfiprintf_r+0x1a8>
 8012054:	2b00      	cmp	r3, #0
 8012056:	d0c5      	beq.n	8011fe4 <_svfiprintf_r+0x130>
 8012058:	9105      	str	r1, [sp, #20]
 801205a:	e7c3      	b.n	8011fe4 <_svfiprintf_r+0x130>
 801205c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012060:	4604      	mov	r4, r0
 8012062:	2301      	movs	r3, #1
 8012064:	e7f0      	b.n	8012048 <_svfiprintf_r+0x194>
 8012066:	ab03      	add	r3, sp, #12
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	462a      	mov	r2, r5
 801206c:	4b0f      	ldr	r3, [pc, #60]	; (80120ac <_svfiprintf_r+0x1f8>)
 801206e:	a904      	add	r1, sp, #16
 8012070:	4638      	mov	r0, r7
 8012072:	f7fb fed1 	bl	800de18 <_printf_float>
 8012076:	1c42      	adds	r2, r0, #1
 8012078:	4606      	mov	r6, r0
 801207a:	d1d6      	bne.n	801202a <_svfiprintf_r+0x176>
 801207c:	89ab      	ldrh	r3, [r5, #12]
 801207e:	065b      	lsls	r3, r3, #25
 8012080:	f53f af2c 	bmi.w	8011edc <_svfiprintf_r+0x28>
 8012084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012086:	b01d      	add	sp, #116	; 0x74
 8012088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208c:	ab03      	add	r3, sp, #12
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	462a      	mov	r2, r5
 8012092:	4b06      	ldr	r3, [pc, #24]	; (80120ac <_svfiprintf_r+0x1f8>)
 8012094:	a904      	add	r1, sp, #16
 8012096:	4638      	mov	r0, r7
 8012098:	f7fc f962 	bl	800e360 <_printf_i>
 801209c:	e7eb      	b.n	8012076 <_svfiprintf_r+0x1c2>
 801209e:	bf00      	nop
 80120a0:	0801427c 	.word	0x0801427c
 80120a4:	08014286 	.word	0x08014286
 80120a8:	0800de19 	.word	0x0800de19
 80120ac:	08011dfd 	.word	0x08011dfd
 80120b0:	08014282 	.word	0x08014282

080120b4 <__sfputc_r>:
 80120b4:	6893      	ldr	r3, [r2, #8]
 80120b6:	3b01      	subs	r3, #1
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	b410      	push	{r4}
 80120bc:	6093      	str	r3, [r2, #8]
 80120be:	da08      	bge.n	80120d2 <__sfputc_r+0x1e>
 80120c0:	6994      	ldr	r4, [r2, #24]
 80120c2:	42a3      	cmp	r3, r4
 80120c4:	db01      	blt.n	80120ca <__sfputc_r+0x16>
 80120c6:	290a      	cmp	r1, #10
 80120c8:	d103      	bne.n	80120d2 <__sfputc_r+0x1e>
 80120ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ce:	f7fd bbf5 	b.w	800f8bc <__swbuf_r>
 80120d2:	6813      	ldr	r3, [r2, #0]
 80120d4:	1c58      	adds	r0, r3, #1
 80120d6:	6010      	str	r0, [r2, #0]
 80120d8:	7019      	strb	r1, [r3, #0]
 80120da:	4608      	mov	r0, r1
 80120dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <__sfputs_r>:
 80120e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e4:	4606      	mov	r6, r0
 80120e6:	460f      	mov	r7, r1
 80120e8:	4614      	mov	r4, r2
 80120ea:	18d5      	adds	r5, r2, r3
 80120ec:	42ac      	cmp	r4, r5
 80120ee:	d101      	bne.n	80120f4 <__sfputs_r+0x12>
 80120f0:	2000      	movs	r0, #0
 80120f2:	e007      	b.n	8012104 <__sfputs_r+0x22>
 80120f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f8:	463a      	mov	r2, r7
 80120fa:	4630      	mov	r0, r6
 80120fc:	f7ff ffda 	bl	80120b4 <__sfputc_r>
 8012100:	1c43      	adds	r3, r0, #1
 8012102:	d1f3      	bne.n	80120ec <__sfputs_r+0xa>
 8012104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012108 <_vfiprintf_r>:
 8012108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210c:	460d      	mov	r5, r1
 801210e:	b09d      	sub	sp, #116	; 0x74
 8012110:	4614      	mov	r4, r2
 8012112:	4698      	mov	r8, r3
 8012114:	4606      	mov	r6, r0
 8012116:	b118      	cbz	r0, 8012120 <_vfiprintf_r+0x18>
 8012118:	6983      	ldr	r3, [r0, #24]
 801211a:	b90b      	cbnz	r3, 8012120 <_vfiprintf_r+0x18>
 801211c:	f7fe fc24 	bl	8010968 <__sinit>
 8012120:	4b89      	ldr	r3, [pc, #548]	; (8012348 <_vfiprintf_r+0x240>)
 8012122:	429d      	cmp	r5, r3
 8012124:	d11b      	bne.n	801215e <_vfiprintf_r+0x56>
 8012126:	6875      	ldr	r5, [r6, #4]
 8012128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801212a:	07d9      	lsls	r1, r3, #31
 801212c:	d405      	bmi.n	801213a <_vfiprintf_r+0x32>
 801212e:	89ab      	ldrh	r3, [r5, #12]
 8012130:	059a      	lsls	r2, r3, #22
 8012132:	d402      	bmi.n	801213a <_vfiprintf_r+0x32>
 8012134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012136:	f7ff f828 	bl	801118a <__retarget_lock_acquire_recursive>
 801213a:	89ab      	ldrh	r3, [r5, #12]
 801213c:	071b      	lsls	r3, r3, #28
 801213e:	d501      	bpl.n	8012144 <_vfiprintf_r+0x3c>
 8012140:	692b      	ldr	r3, [r5, #16]
 8012142:	b9eb      	cbnz	r3, 8012180 <_vfiprintf_r+0x78>
 8012144:	4629      	mov	r1, r5
 8012146:	4630      	mov	r0, r6
 8012148:	f7fd fc0a 	bl	800f960 <__swsetup_r>
 801214c:	b1c0      	cbz	r0, 8012180 <_vfiprintf_r+0x78>
 801214e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012150:	07dc      	lsls	r4, r3, #31
 8012152:	d50e      	bpl.n	8012172 <_vfiprintf_r+0x6a>
 8012154:	f04f 30ff 	mov.w	r0, #4294967295
 8012158:	b01d      	add	sp, #116	; 0x74
 801215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215e:	4b7b      	ldr	r3, [pc, #492]	; (801234c <_vfiprintf_r+0x244>)
 8012160:	429d      	cmp	r5, r3
 8012162:	d101      	bne.n	8012168 <_vfiprintf_r+0x60>
 8012164:	68b5      	ldr	r5, [r6, #8]
 8012166:	e7df      	b.n	8012128 <_vfiprintf_r+0x20>
 8012168:	4b79      	ldr	r3, [pc, #484]	; (8012350 <_vfiprintf_r+0x248>)
 801216a:	429d      	cmp	r5, r3
 801216c:	bf08      	it	eq
 801216e:	68f5      	ldreq	r5, [r6, #12]
 8012170:	e7da      	b.n	8012128 <_vfiprintf_r+0x20>
 8012172:	89ab      	ldrh	r3, [r5, #12]
 8012174:	0598      	lsls	r0, r3, #22
 8012176:	d4ed      	bmi.n	8012154 <_vfiprintf_r+0x4c>
 8012178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801217a:	f7ff f807 	bl	801118c <__retarget_lock_release_recursive>
 801217e:	e7e9      	b.n	8012154 <_vfiprintf_r+0x4c>
 8012180:	2300      	movs	r3, #0
 8012182:	9309      	str	r3, [sp, #36]	; 0x24
 8012184:	2320      	movs	r3, #32
 8012186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801218a:	f8cd 800c 	str.w	r8, [sp, #12]
 801218e:	2330      	movs	r3, #48	; 0x30
 8012190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012354 <_vfiprintf_r+0x24c>
 8012194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012198:	f04f 0901 	mov.w	r9, #1
 801219c:	4623      	mov	r3, r4
 801219e:	469a      	mov	sl, r3
 80121a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121a4:	b10a      	cbz	r2, 80121aa <_vfiprintf_r+0xa2>
 80121a6:	2a25      	cmp	r2, #37	; 0x25
 80121a8:	d1f9      	bne.n	801219e <_vfiprintf_r+0x96>
 80121aa:	ebba 0b04 	subs.w	fp, sl, r4
 80121ae:	d00b      	beq.n	80121c8 <_vfiprintf_r+0xc0>
 80121b0:	465b      	mov	r3, fp
 80121b2:	4622      	mov	r2, r4
 80121b4:	4629      	mov	r1, r5
 80121b6:	4630      	mov	r0, r6
 80121b8:	f7ff ff93 	bl	80120e2 <__sfputs_r>
 80121bc:	3001      	adds	r0, #1
 80121be:	f000 80aa 	beq.w	8012316 <_vfiprintf_r+0x20e>
 80121c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121c4:	445a      	add	r2, fp
 80121c6:	9209      	str	r2, [sp, #36]	; 0x24
 80121c8:	f89a 3000 	ldrb.w	r3, [sl]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f000 80a2 	beq.w	8012316 <_vfiprintf_r+0x20e>
 80121d2:	2300      	movs	r3, #0
 80121d4:	f04f 32ff 	mov.w	r2, #4294967295
 80121d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121dc:	f10a 0a01 	add.w	sl, sl, #1
 80121e0:	9304      	str	r3, [sp, #16]
 80121e2:	9307      	str	r3, [sp, #28]
 80121e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121e8:	931a      	str	r3, [sp, #104]	; 0x68
 80121ea:	4654      	mov	r4, sl
 80121ec:	2205      	movs	r2, #5
 80121ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121f2:	4858      	ldr	r0, [pc, #352]	; (8012354 <_vfiprintf_r+0x24c>)
 80121f4:	f7ee f81c 	bl	8000230 <memchr>
 80121f8:	9a04      	ldr	r2, [sp, #16]
 80121fa:	b9d8      	cbnz	r0, 8012234 <_vfiprintf_r+0x12c>
 80121fc:	06d1      	lsls	r1, r2, #27
 80121fe:	bf44      	itt	mi
 8012200:	2320      	movmi	r3, #32
 8012202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012206:	0713      	lsls	r3, r2, #28
 8012208:	bf44      	itt	mi
 801220a:	232b      	movmi	r3, #43	; 0x2b
 801220c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012210:	f89a 3000 	ldrb.w	r3, [sl]
 8012214:	2b2a      	cmp	r3, #42	; 0x2a
 8012216:	d015      	beq.n	8012244 <_vfiprintf_r+0x13c>
 8012218:	9a07      	ldr	r2, [sp, #28]
 801221a:	4654      	mov	r4, sl
 801221c:	2000      	movs	r0, #0
 801221e:	f04f 0c0a 	mov.w	ip, #10
 8012222:	4621      	mov	r1, r4
 8012224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012228:	3b30      	subs	r3, #48	; 0x30
 801222a:	2b09      	cmp	r3, #9
 801222c:	d94e      	bls.n	80122cc <_vfiprintf_r+0x1c4>
 801222e:	b1b0      	cbz	r0, 801225e <_vfiprintf_r+0x156>
 8012230:	9207      	str	r2, [sp, #28]
 8012232:	e014      	b.n	801225e <_vfiprintf_r+0x156>
 8012234:	eba0 0308 	sub.w	r3, r0, r8
 8012238:	fa09 f303 	lsl.w	r3, r9, r3
 801223c:	4313      	orrs	r3, r2
 801223e:	9304      	str	r3, [sp, #16]
 8012240:	46a2      	mov	sl, r4
 8012242:	e7d2      	b.n	80121ea <_vfiprintf_r+0xe2>
 8012244:	9b03      	ldr	r3, [sp, #12]
 8012246:	1d19      	adds	r1, r3, #4
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	9103      	str	r1, [sp, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	bfbb      	ittet	lt
 8012250:	425b      	neglt	r3, r3
 8012252:	f042 0202 	orrlt.w	r2, r2, #2
 8012256:	9307      	strge	r3, [sp, #28]
 8012258:	9307      	strlt	r3, [sp, #28]
 801225a:	bfb8      	it	lt
 801225c:	9204      	strlt	r2, [sp, #16]
 801225e:	7823      	ldrb	r3, [r4, #0]
 8012260:	2b2e      	cmp	r3, #46	; 0x2e
 8012262:	d10c      	bne.n	801227e <_vfiprintf_r+0x176>
 8012264:	7863      	ldrb	r3, [r4, #1]
 8012266:	2b2a      	cmp	r3, #42	; 0x2a
 8012268:	d135      	bne.n	80122d6 <_vfiprintf_r+0x1ce>
 801226a:	9b03      	ldr	r3, [sp, #12]
 801226c:	1d1a      	adds	r2, r3, #4
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	9203      	str	r2, [sp, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	bfb8      	it	lt
 8012276:	f04f 33ff 	movlt.w	r3, #4294967295
 801227a:	3402      	adds	r4, #2
 801227c:	9305      	str	r3, [sp, #20]
 801227e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012364 <_vfiprintf_r+0x25c>
 8012282:	7821      	ldrb	r1, [r4, #0]
 8012284:	2203      	movs	r2, #3
 8012286:	4650      	mov	r0, sl
 8012288:	f7ed ffd2 	bl	8000230 <memchr>
 801228c:	b140      	cbz	r0, 80122a0 <_vfiprintf_r+0x198>
 801228e:	2340      	movs	r3, #64	; 0x40
 8012290:	eba0 000a 	sub.w	r0, r0, sl
 8012294:	fa03 f000 	lsl.w	r0, r3, r0
 8012298:	9b04      	ldr	r3, [sp, #16]
 801229a:	4303      	orrs	r3, r0
 801229c:	3401      	adds	r4, #1
 801229e:	9304      	str	r3, [sp, #16]
 80122a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122a4:	482c      	ldr	r0, [pc, #176]	; (8012358 <_vfiprintf_r+0x250>)
 80122a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122aa:	2206      	movs	r2, #6
 80122ac:	f7ed ffc0 	bl	8000230 <memchr>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d03f      	beq.n	8012334 <_vfiprintf_r+0x22c>
 80122b4:	4b29      	ldr	r3, [pc, #164]	; (801235c <_vfiprintf_r+0x254>)
 80122b6:	bb1b      	cbnz	r3, 8012300 <_vfiprintf_r+0x1f8>
 80122b8:	9b03      	ldr	r3, [sp, #12]
 80122ba:	3307      	adds	r3, #7
 80122bc:	f023 0307 	bic.w	r3, r3, #7
 80122c0:	3308      	adds	r3, #8
 80122c2:	9303      	str	r3, [sp, #12]
 80122c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c6:	443b      	add	r3, r7
 80122c8:	9309      	str	r3, [sp, #36]	; 0x24
 80122ca:	e767      	b.n	801219c <_vfiprintf_r+0x94>
 80122cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80122d0:	460c      	mov	r4, r1
 80122d2:	2001      	movs	r0, #1
 80122d4:	e7a5      	b.n	8012222 <_vfiprintf_r+0x11a>
 80122d6:	2300      	movs	r3, #0
 80122d8:	3401      	adds	r4, #1
 80122da:	9305      	str	r3, [sp, #20]
 80122dc:	4619      	mov	r1, r3
 80122de:	f04f 0c0a 	mov.w	ip, #10
 80122e2:	4620      	mov	r0, r4
 80122e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122e8:	3a30      	subs	r2, #48	; 0x30
 80122ea:	2a09      	cmp	r2, #9
 80122ec:	d903      	bls.n	80122f6 <_vfiprintf_r+0x1ee>
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d0c5      	beq.n	801227e <_vfiprintf_r+0x176>
 80122f2:	9105      	str	r1, [sp, #20]
 80122f4:	e7c3      	b.n	801227e <_vfiprintf_r+0x176>
 80122f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80122fa:	4604      	mov	r4, r0
 80122fc:	2301      	movs	r3, #1
 80122fe:	e7f0      	b.n	80122e2 <_vfiprintf_r+0x1da>
 8012300:	ab03      	add	r3, sp, #12
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	462a      	mov	r2, r5
 8012306:	4b16      	ldr	r3, [pc, #88]	; (8012360 <_vfiprintf_r+0x258>)
 8012308:	a904      	add	r1, sp, #16
 801230a:	4630      	mov	r0, r6
 801230c:	f7fb fd84 	bl	800de18 <_printf_float>
 8012310:	4607      	mov	r7, r0
 8012312:	1c78      	adds	r0, r7, #1
 8012314:	d1d6      	bne.n	80122c4 <_vfiprintf_r+0x1bc>
 8012316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012318:	07d9      	lsls	r1, r3, #31
 801231a:	d405      	bmi.n	8012328 <_vfiprintf_r+0x220>
 801231c:	89ab      	ldrh	r3, [r5, #12]
 801231e:	059a      	lsls	r2, r3, #22
 8012320:	d402      	bmi.n	8012328 <_vfiprintf_r+0x220>
 8012322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012324:	f7fe ff32 	bl	801118c <__retarget_lock_release_recursive>
 8012328:	89ab      	ldrh	r3, [r5, #12]
 801232a:	065b      	lsls	r3, r3, #25
 801232c:	f53f af12 	bmi.w	8012154 <_vfiprintf_r+0x4c>
 8012330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012332:	e711      	b.n	8012158 <_vfiprintf_r+0x50>
 8012334:	ab03      	add	r3, sp, #12
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	462a      	mov	r2, r5
 801233a:	4b09      	ldr	r3, [pc, #36]	; (8012360 <_vfiprintf_r+0x258>)
 801233c:	a904      	add	r1, sp, #16
 801233e:	4630      	mov	r0, r6
 8012340:	f7fc f80e 	bl	800e360 <_printf_i>
 8012344:	e7e4      	b.n	8012310 <_vfiprintf_r+0x208>
 8012346:	bf00      	nop
 8012348:	08014064 	.word	0x08014064
 801234c:	08014084 	.word	0x08014084
 8012350:	08014044 	.word	0x08014044
 8012354:	0801427c 	.word	0x0801427c
 8012358:	08014286 	.word	0x08014286
 801235c:	0800de19 	.word	0x0800de19
 8012360:	080120e3 	.word	0x080120e3
 8012364:	08014282 	.word	0x08014282

08012368 <nan>:
 8012368:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012370 <nan+0x8>
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	00000000 	.word	0x00000000
 8012374:	7ff80000 	.word	0x7ff80000

08012378 <_sbrk_r>:
 8012378:	b538      	push	{r3, r4, r5, lr}
 801237a:	4d06      	ldr	r5, [pc, #24]	; (8012394 <_sbrk_r+0x1c>)
 801237c:	2300      	movs	r3, #0
 801237e:	4604      	mov	r4, r0
 8012380:	4608      	mov	r0, r1
 8012382:	602b      	str	r3, [r5, #0]
 8012384:	f7f3 fb74 	bl	8005a70 <_sbrk>
 8012388:	1c43      	adds	r3, r0, #1
 801238a:	d102      	bne.n	8012392 <_sbrk_r+0x1a>
 801238c:	682b      	ldr	r3, [r5, #0]
 801238e:	b103      	cbz	r3, 8012392 <_sbrk_r+0x1a>
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	bd38      	pop	{r3, r4, r5, pc}
 8012394:	200098e8 	.word	0x200098e8

08012398 <__sread>:
 8012398:	b510      	push	{r4, lr}
 801239a:	460c      	mov	r4, r1
 801239c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123a0:	f000 f93a 	bl	8012618 <_read_r>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	bfab      	itete	ge
 80123a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123aa:	89a3      	ldrhlt	r3, [r4, #12]
 80123ac:	181b      	addge	r3, r3, r0
 80123ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123b2:	bfac      	ite	ge
 80123b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80123b6:	81a3      	strhlt	r3, [r4, #12]
 80123b8:	bd10      	pop	{r4, pc}

080123ba <__swrite>:
 80123ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123be:	461f      	mov	r7, r3
 80123c0:	898b      	ldrh	r3, [r1, #12]
 80123c2:	05db      	lsls	r3, r3, #23
 80123c4:	4605      	mov	r5, r0
 80123c6:	460c      	mov	r4, r1
 80123c8:	4616      	mov	r6, r2
 80123ca:	d505      	bpl.n	80123d8 <__swrite+0x1e>
 80123cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123d0:	2302      	movs	r3, #2
 80123d2:	2200      	movs	r2, #0
 80123d4:	f000 f8b8 	bl	8012548 <_lseek_r>
 80123d8:	89a3      	ldrh	r3, [r4, #12]
 80123da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123e2:	81a3      	strh	r3, [r4, #12]
 80123e4:	4632      	mov	r2, r6
 80123e6:	463b      	mov	r3, r7
 80123e8:	4628      	mov	r0, r5
 80123ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123ee:	f000 b837 	b.w	8012460 <_write_r>

080123f2 <__sseek>:
 80123f2:	b510      	push	{r4, lr}
 80123f4:	460c      	mov	r4, r1
 80123f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123fa:	f000 f8a5 	bl	8012548 <_lseek_r>
 80123fe:	1c43      	adds	r3, r0, #1
 8012400:	89a3      	ldrh	r3, [r4, #12]
 8012402:	bf15      	itete	ne
 8012404:	6560      	strne	r0, [r4, #84]	; 0x54
 8012406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801240a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801240e:	81a3      	strheq	r3, [r4, #12]
 8012410:	bf18      	it	ne
 8012412:	81a3      	strhne	r3, [r4, #12]
 8012414:	bd10      	pop	{r4, pc}

08012416 <__sclose>:
 8012416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801241a:	f000 b851 	b.w	80124c0 <_close_r>

0801241e <strncmp>:
 801241e:	b510      	push	{r4, lr}
 8012420:	b17a      	cbz	r2, 8012442 <strncmp+0x24>
 8012422:	4603      	mov	r3, r0
 8012424:	3901      	subs	r1, #1
 8012426:	1884      	adds	r4, r0, r2
 8012428:	f813 0b01 	ldrb.w	r0, [r3], #1
 801242c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012430:	4290      	cmp	r0, r2
 8012432:	d101      	bne.n	8012438 <strncmp+0x1a>
 8012434:	42a3      	cmp	r3, r4
 8012436:	d101      	bne.n	801243c <strncmp+0x1e>
 8012438:	1a80      	subs	r0, r0, r2
 801243a:	bd10      	pop	{r4, pc}
 801243c:	2800      	cmp	r0, #0
 801243e:	d1f3      	bne.n	8012428 <strncmp+0xa>
 8012440:	e7fa      	b.n	8012438 <strncmp+0x1a>
 8012442:	4610      	mov	r0, r2
 8012444:	e7f9      	b.n	801243a <strncmp+0x1c>

08012446 <__ascii_wctomb>:
 8012446:	b149      	cbz	r1, 801245c <__ascii_wctomb+0x16>
 8012448:	2aff      	cmp	r2, #255	; 0xff
 801244a:	bf85      	ittet	hi
 801244c:	238a      	movhi	r3, #138	; 0x8a
 801244e:	6003      	strhi	r3, [r0, #0]
 8012450:	700a      	strbls	r2, [r1, #0]
 8012452:	f04f 30ff 	movhi.w	r0, #4294967295
 8012456:	bf98      	it	ls
 8012458:	2001      	movls	r0, #1
 801245a:	4770      	bx	lr
 801245c:	4608      	mov	r0, r1
 801245e:	4770      	bx	lr

08012460 <_write_r>:
 8012460:	b538      	push	{r3, r4, r5, lr}
 8012462:	4d07      	ldr	r5, [pc, #28]	; (8012480 <_write_r+0x20>)
 8012464:	4604      	mov	r4, r0
 8012466:	4608      	mov	r0, r1
 8012468:	4611      	mov	r1, r2
 801246a:	2200      	movs	r2, #0
 801246c:	602a      	str	r2, [r5, #0]
 801246e:	461a      	mov	r2, r3
 8012470:	f7f3 faae 	bl	80059d0 <_write>
 8012474:	1c43      	adds	r3, r0, #1
 8012476:	d102      	bne.n	801247e <_write_r+0x1e>
 8012478:	682b      	ldr	r3, [r5, #0]
 801247a:	b103      	cbz	r3, 801247e <_write_r+0x1e>
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	bd38      	pop	{r3, r4, r5, pc}
 8012480:	200098e8 	.word	0x200098e8

08012484 <__assert_func>:
 8012484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012486:	4614      	mov	r4, r2
 8012488:	461a      	mov	r2, r3
 801248a:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <__assert_func+0x2c>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	4605      	mov	r5, r0
 8012490:	68d8      	ldr	r0, [r3, #12]
 8012492:	b14c      	cbz	r4, 80124a8 <__assert_func+0x24>
 8012494:	4b07      	ldr	r3, [pc, #28]	; (80124b4 <__assert_func+0x30>)
 8012496:	9100      	str	r1, [sp, #0]
 8012498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801249c:	4906      	ldr	r1, [pc, #24]	; (80124b8 <__assert_func+0x34>)
 801249e:	462b      	mov	r3, r5
 80124a0:	f000 f81e 	bl	80124e0 <fiprintf>
 80124a4:	f000 f8ca 	bl	801263c <abort>
 80124a8:	4b04      	ldr	r3, [pc, #16]	; (80124bc <__assert_func+0x38>)
 80124aa:	461c      	mov	r4, r3
 80124ac:	e7f3      	b.n	8012496 <__assert_func+0x12>
 80124ae:	bf00      	nop
 80124b0:	2000004c 	.word	0x2000004c
 80124b4:	0801428d 	.word	0x0801428d
 80124b8:	0801429a 	.word	0x0801429a
 80124bc:	080142c8 	.word	0x080142c8

080124c0 <_close_r>:
 80124c0:	b538      	push	{r3, r4, r5, lr}
 80124c2:	4d06      	ldr	r5, [pc, #24]	; (80124dc <_close_r+0x1c>)
 80124c4:	2300      	movs	r3, #0
 80124c6:	4604      	mov	r4, r0
 80124c8:	4608      	mov	r0, r1
 80124ca:	602b      	str	r3, [r5, #0]
 80124cc:	f7f3 fa9c 	bl	8005a08 <_close>
 80124d0:	1c43      	adds	r3, r0, #1
 80124d2:	d102      	bne.n	80124da <_close_r+0x1a>
 80124d4:	682b      	ldr	r3, [r5, #0]
 80124d6:	b103      	cbz	r3, 80124da <_close_r+0x1a>
 80124d8:	6023      	str	r3, [r4, #0]
 80124da:	bd38      	pop	{r3, r4, r5, pc}
 80124dc:	200098e8 	.word	0x200098e8

080124e0 <fiprintf>:
 80124e0:	b40e      	push	{r1, r2, r3}
 80124e2:	b503      	push	{r0, r1, lr}
 80124e4:	4601      	mov	r1, r0
 80124e6:	ab03      	add	r3, sp, #12
 80124e8:	4805      	ldr	r0, [pc, #20]	; (8012500 <fiprintf+0x20>)
 80124ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80124ee:	6800      	ldr	r0, [r0, #0]
 80124f0:	9301      	str	r3, [sp, #4]
 80124f2:	f7ff fe09 	bl	8012108 <_vfiprintf_r>
 80124f6:	b002      	add	sp, #8
 80124f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80124fc:	b003      	add	sp, #12
 80124fe:	4770      	bx	lr
 8012500:	2000004c 	.word	0x2000004c

08012504 <_fstat_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d07      	ldr	r5, [pc, #28]	; (8012524 <_fstat_r+0x20>)
 8012508:	2300      	movs	r3, #0
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	4611      	mov	r1, r2
 8012510:	602b      	str	r3, [r5, #0]
 8012512:	f7f3 fa85 	bl	8005a20 <_fstat>
 8012516:	1c43      	adds	r3, r0, #1
 8012518:	d102      	bne.n	8012520 <_fstat_r+0x1c>
 801251a:	682b      	ldr	r3, [r5, #0]
 801251c:	b103      	cbz	r3, 8012520 <_fstat_r+0x1c>
 801251e:	6023      	str	r3, [r4, #0]
 8012520:	bd38      	pop	{r3, r4, r5, pc}
 8012522:	bf00      	nop
 8012524:	200098e8 	.word	0x200098e8

08012528 <_isatty_r>:
 8012528:	b538      	push	{r3, r4, r5, lr}
 801252a:	4d06      	ldr	r5, [pc, #24]	; (8012544 <_isatty_r+0x1c>)
 801252c:	2300      	movs	r3, #0
 801252e:	4604      	mov	r4, r0
 8012530:	4608      	mov	r0, r1
 8012532:	602b      	str	r3, [r5, #0]
 8012534:	f7f3 fa84 	bl	8005a40 <_isatty>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_isatty_r+0x1a>
 801253c:	682b      	ldr	r3, [r5, #0]
 801253e:	b103      	cbz	r3, 8012542 <_isatty_r+0x1a>
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	200098e8 	.word	0x200098e8

08012548 <_lseek_r>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	4d07      	ldr	r5, [pc, #28]	; (8012568 <_lseek_r+0x20>)
 801254c:	4604      	mov	r4, r0
 801254e:	4608      	mov	r0, r1
 8012550:	4611      	mov	r1, r2
 8012552:	2200      	movs	r2, #0
 8012554:	602a      	str	r2, [r5, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	f7f3 fa7d 	bl	8005a56 <_lseek>
 801255c:	1c43      	adds	r3, r0, #1
 801255e:	d102      	bne.n	8012566 <_lseek_r+0x1e>
 8012560:	682b      	ldr	r3, [r5, #0]
 8012562:	b103      	cbz	r3, 8012566 <_lseek_r+0x1e>
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	bd38      	pop	{r3, r4, r5, pc}
 8012568:	200098e8 	.word	0x200098e8

0801256c <memmove>:
 801256c:	4288      	cmp	r0, r1
 801256e:	b510      	push	{r4, lr}
 8012570:	eb01 0402 	add.w	r4, r1, r2
 8012574:	d902      	bls.n	801257c <memmove+0x10>
 8012576:	4284      	cmp	r4, r0
 8012578:	4623      	mov	r3, r4
 801257a:	d807      	bhi.n	801258c <memmove+0x20>
 801257c:	1e43      	subs	r3, r0, #1
 801257e:	42a1      	cmp	r1, r4
 8012580:	d008      	beq.n	8012594 <memmove+0x28>
 8012582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012586:	f803 2f01 	strb.w	r2, [r3, #1]!
 801258a:	e7f8      	b.n	801257e <memmove+0x12>
 801258c:	4402      	add	r2, r0
 801258e:	4601      	mov	r1, r0
 8012590:	428a      	cmp	r2, r1
 8012592:	d100      	bne.n	8012596 <memmove+0x2a>
 8012594:	bd10      	pop	{r4, pc}
 8012596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801259a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801259e:	e7f7      	b.n	8012590 <memmove+0x24>

080125a0 <__malloc_lock>:
 80125a0:	4801      	ldr	r0, [pc, #4]	; (80125a8 <__malloc_lock+0x8>)
 80125a2:	f7fe bdf2 	b.w	801118a <__retarget_lock_acquire_recursive>
 80125a6:	bf00      	nop
 80125a8:	200098dc 	.word	0x200098dc

080125ac <__malloc_unlock>:
 80125ac:	4801      	ldr	r0, [pc, #4]	; (80125b4 <__malloc_unlock+0x8>)
 80125ae:	f7fe bded 	b.w	801118c <__retarget_lock_release_recursive>
 80125b2:	bf00      	nop
 80125b4:	200098dc 	.word	0x200098dc

080125b8 <_realloc_r>:
 80125b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125bc:	4680      	mov	r8, r0
 80125be:	4614      	mov	r4, r2
 80125c0:	460e      	mov	r6, r1
 80125c2:	b921      	cbnz	r1, 80125ce <_realloc_r+0x16>
 80125c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125c8:	4611      	mov	r1, r2
 80125ca:	f7ff bba3 	b.w	8011d14 <_malloc_r>
 80125ce:	b92a      	cbnz	r2, 80125dc <_realloc_r+0x24>
 80125d0:	f7ff fb34 	bl	8011c3c <_free_r>
 80125d4:	4625      	mov	r5, r4
 80125d6:	4628      	mov	r0, r5
 80125d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125dc:	f000 f835 	bl	801264a <_malloc_usable_size_r>
 80125e0:	4284      	cmp	r4, r0
 80125e2:	4607      	mov	r7, r0
 80125e4:	d802      	bhi.n	80125ec <_realloc_r+0x34>
 80125e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125ea:	d812      	bhi.n	8012612 <_realloc_r+0x5a>
 80125ec:	4621      	mov	r1, r4
 80125ee:	4640      	mov	r0, r8
 80125f0:	f7ff fb90 	bl	8011d14 <_malloc_r>
 80125f4:	4605      	mov	r5, r0
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d0ed      	beq.n	80125d6 <_realloc_r+0x1e>
 80125fa:	42bc      	cmp	r4, r7
 80125fc:	4622      	mov	r2, r4
 80125fe:	4631      	mov	r1, r6
 8012600:	bf28      	it	cs
 8012602:	463a      	movcs	r2, r7
 8012604:	f7fb fb52 	bl	800dcac <memcpy>
 8012608:	4631      	mov	r1, r6
 801260a:	4640      	mov	r0, r8
 801260c:	f7ff fb16 	bl	8011c3c <_free_r>
 8012610:	e7e1      	b.n	80125d6 <_realloc_r+0x1e>
 8012612:	4635      	mov	r5, r6
 8012614:	e7df      	b.n	80125d6 <_realloc_r+0x1e>
	...

08012618 <_read_r>:
 8012618:	b538      	push	{r3, r4, r5, lr}
 801261a:	4d07      	ldr	r5, [pc, #28]	; (8012638 <_read_r+0x20>)
 801261c:	4604      	mov	r4, r0
 801261e:	4608      	mov	r0, r1
 8012620:	4611      	mov	r1, r2
 8012622:	2200      	movs	r2, #0
 8012624:	602a      	str	r2, [r5, #0]
 8012626:	461a      	mov	r2, r3
 8012628:	f7f3 f9b5 	bl	8005996 <_read>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_read_r+0x1e>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_read_r+0x1e>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	200098e8 	.word	0x200098e8

0801263c <abort>:
 801263c:	b508      	push	{r3, lr}
 801263e:	2006      	movs	r0, #6
 8012640:	f000 f834 	bl	80126ac <raise>
 8012644:	2001      	movs	r0, #1
 8012646:	f7f3 f99c 	bl	8005982 <_exit>

0801264a <_malloc_usable_size_r>:
 801264a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801264e:	1f18      	subs	r0, r3, #4
 8012650:	2b00      	cmp	r3, #0
 8012652:	bfbc      	itt	lt
 8012654:	580b      	ldrlt	r3, [r1, r0]
 8012656:	18c0      	addlt	r0, r0, r3
 8012658:	4770      	bx	lr

0801265a <_raise_r>:
 801265a:	291f      	cmp	r1, #31
 801265c:	b538      	push	{r3, r4, r5, lr}
 801265e:	4604      	mov	r4, r0
 8012660:	460d      	mov	r5, r1
 8012662:	d904      	bls.n	801266e <_raise_r+0x14>
 8012664:	2316      	movs	r3, #22
 8012666:	6003      	str	r3, [r0, #0]
 8012668:	f04f 30ff 	mov.w	r0, #4294967295
 801266c:	bd38      	pop	{r3, r4, r5, pc}
 801266e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012670:	b112      	cbz	r2, 8012678 <_raise_r+0x1e>
 8012672:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012676:	b94b      	cbnz	r3, 801268c <_raise_r+0x32>
 8012678:	4620      	mov	r0, r4
 801267a:	f000 f831 	bl	80126e0 <_getpid_r>
 801267e:	462a      	mov	r2, r5
 8012680:	4601      	mov	r1, r0
 8012682:	4620      	mov	r0, r4
 8012684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012688:	f000 b818 	b.w	80126bc <_kill_r>
 801268c:	2b01      	cmp	r3, #1
 801268e:	d00a      	beq.n	80126a6 <_raise_r+0x4c>
 8012690:	1c59      	adds	r1, r3, #1
 8012692:	d103      	bne.n	801269c <_raise_r+0x42>
 8012694:	2316      	movs	r3, #22
 8012696:	6003      	str	r3, [r0, #0]
 8012698:	2001      	movs	r0, #1
 801269a:	e7e7      	b.n	801266c <_raise_r+0x12>
 801269c:	2400      	movs	r4, #0
 801269e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126a2:	4628      	mov	r0, r5
 80126a4:	4798      	blx	r3
 80126a6:	2000      	movs	r0, #0
 80126a8:	e7e0      	b.n	801266c <_raise_r+0x12>
	...

080126ac <raise>:
 80126ac:	4b02      	ldr	r3, [pc, #8]	; (80126b8 <raise+0xc>)
 80126ae:	4601      	mov	r1, r0
 80126b0:	6818      	ldr	r0, [r3, #0]
 80126b2:	f7ff bfd2 	b.w	801265a <_raise_r>
 80126b6:	bf00      	nop
 80126b8:	2000004c 	.word	0x2000004c

080126bc <_kill_r>:
 80126bc:	b538      	push	{r3, r4, r5, lr}
 80126be:	4d07      	ldr	r5, [pc, #28]	; (80126dc <_kill_r+0x20>)
 80126c0:	2300      	movs	r3, #0
 80126c2:	4604      	mov	r4, r0
 80126c4:	4608      	mov	r0, r1
 80126c6:	4611      	mov	r1, r2
 80126c8:	602b      	str	r3, [r5, #0]
 80126ca:	f7f3 f94a 	bl	8005962 <_kill>
 80126ce:	1c43      	adds	r3, r0, #1
 80126d0:	d102      	bne.n	80126d8 <_kill_r+0x1c>
 80126d2:	682b      	ldr	r3, [r5, #0]
 80126d4:	b103      	cbz	r3, 80126d8 <_kill_r+0x1c>
 80126d6:	6023      	str	r3, [r4, #0]
 80126d8:	bd38      	pop	{r3, r4, r5, pc}
 80126da:	bf00      	nop
 80126dc:	200098e8 	.word	0x200098e8

080126e0 <_getpid_r>:
 80126e0:	f7f3 b937 	b.w	8005952 <_getpid>

080126e4 <round>:
 80126e4:	ec51 0b10 	vmov	r0, r1, d0
 80126e8:	b570      	push	{r4, r5, r6, lr}
 80126ea:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80126ee:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80126f2:	2c13      	cmp	r4, #19
 80126f4:	ee10 2a10 	vmov	r2, s0
 80126f8:	460b      	mov	r3, r1
 80126fa:	dc19      	bgt.n	8012730 <round+0x4c>
 80126fc:	2c00      	cmp	r4, #0
 80126fe:	da09      	bge.n	8012714 <round+0x30>
 8012700:	3401      	adds	r4, #1
 8012702:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012706:	d103      	bne.n	8012710 <round+0x2c>
 8012708:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801270c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012710:	2200      	movs	r2, #0
 8012712:	e028      	b.n	8012766 <round+0x82>
 8012714:	4d15      	ldr	r5, [pc, #84]	; (801276c <round+0x88>)
 8012716:	4125      	asrs	r5, r4
 8012718:	ea01 0605 	and.w	r6, r1, r5
 801271c:	4332      	orrs	r2, r6
 801271e:	d00e      	beq.n	801273e <round+0x5a>
 8012720:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012724:	fa42 f404 	asr.w	r4, r2, r4
 8012728:	4423      	add	r3, r4
 801272a:	ea23 0305 	bic.w	r3, r3, r5
 801272e:	e7ef      	b.n	8012710 <round+0x2c>
 8012730:	2c33      	cmp	r4, #51	; 0x33
 8012732:	dd07      	ble.n	8012744 <round+0x60>
 8012734:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012738:	d101      	bne.n	801273e <round+0x5a>
 801273a:	f7ed fdcf 	bl	80002dc <__adddf3>
 801273e:	ec41 0b10 	vmov	d0, r0, r1
 8012742:	bd70      	pop	{r4, r5, r6, pc}
 8012744:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8012748:	f04f 35ff 	mov.w	r5, #4294967295
 801274c:	40f5      	lsrs	r5, r6
 801274e:	4228      	tst	r0, r5
 8012750:	d0f5      	beq.n	801273e <round+0x5a>
 8012752:	2101      	movs	r1, #1
 8012754:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012758:	fa01 f404 	lsl.w	r4, r1, r4
 801275c:	1912      	adds	r2, r2, r4
 801275e:	bf28      	it	cs
 8012760:	185b      	addcs	r3, r3, r1
 8012762:	ea22 0205 	bic.w	r2, r2, r5
 8012766:	4619      	mov	r1, r3
 8012768:	4610      	mov	r0, r2
 801276a:	e7e8      	b.n	801273e <round+0x5a>
 801276c:	000fffff 	.word	0x000fffff

08012770 <fmaxf>:
 8012770:	b508      	push	{r3, lr}
 8012772:	ed2d 8b02 	vpush	{d8}
 8012776:	eeb0 8a40 	vmov.f32	s16, s0
 801277a:	eef0 8a60 	vmov.f32	s17, s1
 801277e:	f000 f82d 	bl	80127dc <__fpclassifyf>
 8012782:	b148      	cbz	r0, 8012798 <fmaxf+0x28>
 8012784:	eeb0 0a68 	vmov.f32	s0, s17
 8012788:	f000 f828 	bl	80127dc <__fpclassifyf>
 801278c:	b130      	cbz	r0, 801279c <fmaxf+0x2c>
 801278e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012796:	dc01      	bgt.n	801279c <fmaxf+0x2c>
 8012798:	eeb0 8a68 	vmov.f32	s16, s17
 801279c:	eeb0 0a48 	vmov.f32	s0, s16
 80127a0:	ecbd 8b02 	vpop	{d8}
 80127a4:	bd08      	pop	{r3, pc}

080127a6 <fminf>:
 80127a6:	b508      	push	{r3, lr}
 80127a8:	ed2d 8b02 	vpush	{d8}
 80127ac:	eeb0 8a40 	vmov.f32	s16, s0
 80127b0:	eef0 8a60 	vmov.f32	s17, s1
 80127b4:	f000 f812 	bl	80127dc <__fpclassifyf>
 80127b8:	b148      	cbz	r0, 80127ce <fminf+0x28>
 80127ba:	eeb0 0a68 	vmov.f32	s0, s17
 80127be:	f000 f80d 	bl	80127dc <__fpclassifyf>
 80127c2:	b130      	cbz	r0, 80127d2 <fminf+0x2c>
 80127c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80127c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127cc:	d401      	bmi.n	80127d2 <fminf+0x2c>
 80127ce:	eeb0 8a68 	vmov.f32	s16, s17
 80127d2:	eeb0 0a48 	vmov.f32	s0, s16
 80127d6:	ecbd 8b02 	vpop	{d8}
 80127da:	bd08      	pop	{r3, pc}

080127dc <__fpclassifyf>:
 80127dc:	ee10 3a10 	vmov	r3, s0
 80127e0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80127e4:	d00d      	beq.n	8012802 <__fpclassifyf+0x26>
 80127e6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80127ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80127ee:	d30a      	bcc.n	8012806 <__fpclassifyf+0x2a>
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <__fpclassifyf+0x34>)
 80127f2:	1e42      	subs	r2, r0, #1
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d908      	bls.n	801280a <__fpclassifyf+0x2e>
 80127f8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80127fc:	4258      	negs	r0, r3
 80127fe:	4158      	adcs	r0, r3
 8012800:	4770      	bx	lr
 8012802:	2002      	movs	r0, #2
 8012804:	4770      	bx	lr
 8012806:	2004      	movs	r0, #4
 8012808:	4770      	bx	lr
 801280a:	2003      	movs	r0, #3
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	007ffffe 	.word	0x007ffffe
 8012814:	00000000 	.word	0x00000000

08012818 <exp>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	ed2d 8b02 	vpush	{d8}
 801281e:	ec55 4b10 	vmov	r4, r5, d0
 8012822:	f000 f881 	bl	8012928 <__ieee754_exp>
 8012826:	eeb0 8a40 	vmov.f32	s16, s0
 801282a:	eef0 8a60 	vmov.f32	s17, s1
 801282e:	ec45 4b10 	vmov	d0, r4, r5
 8012832:	f000 fab0 	bl	8012d96 <finite>
 8012836:	b168      	cbz	r0, 8012854 <exp+0x3c>
 8012838:	a317      	add	r3, pc, #92	; (adr r3, 8012898 <exp+0x80>)
 801283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283e:	4620      	mov	r0, r4
 8012840:	4629      	mov	r1, r5
 8012842:	f7ee f991 	bl	8000b68 <__aeabi_dcmpgt>
 8012846:	b160      	cbz	r0, 8012862 <exp+0x4a>
 8012848:	f7fb fa06 	bl	800dc58 <__errno>
 801284c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8012888 <exp+0x70>
 8012850:	2322      	movs	r3, #34	; 0x22
 8012852:	6003      	str	r3, [r0, #0]
 8012854:	eeb0 0a48 	vmov.f32	s0, s16
 8012858:	eef0 0a68 	vmov.f32	s1, s17
 801285c:	ecbd 8b02 	vpop	{d8}
 8012860:	bd38      	pop	{r3, r4, r5, pc}
 8012862:	a30f      	add	r3, pc, #60	; (adr r3, 80128a0 <exp+0x88>)
 8012864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012868:	4620      	mov	r0, r4
 801286a:	4629      	mov	r1, r5
 801286c:	f7ee f95e 	bl	8000b2c <__aeabi_dcmplt>
 8012870:	2800      	cmp	r0, #0
 8012872:	d0ef      	beq.n	8012854 <exp+0x3c>
 8012874:	f7fb f9f0 	bl	800dc58 <__errno>
 8012878:	2322      	movs	r3, #34	; 0x22
 801287a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8012890 <exp+0x78>
 801287e:	6003      	str	r3, [r0, #0]
 8012880:	e7e8      	b.n	8012854 <exp+0x3c>
 8012882:	bf00      	nop
 8012884:	f3af 8000 	nop.w
 8012888:	00000000 	.word	0x00000000
 801288c:	7ff00000 	.word	0x7ff00000
	...
 8012898:	fefa39ef 	.word	0xfefa39ef
 801289c:	40862e42 	.word	0x40862e42
 80128a0:	d52d3051 	.word	0xd52d3051
 80128a4:	c0874910 	.word	0xc0874910

080128a8 <fmodf>:
 80128a8:	b508      	push	{r3, lr}
 80128aa:	ed2d 8b02 	vpush	{d8}
 80128ae:	eef0 8a40 	vmov.f32	s17, s0
 80128b2:	eeb0 8a60 	vmov.f32	s16, s1
 80128b6:	f000 f9b9 	bl	8012c2c <__ieee754_fmodf>
 80128ba:	eef4 8a48 	vcmp.f32	s17, s16
 80128be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c2:	d60c      	bvs.n	80128de <fmodf+0x36>
 80128c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80128e4 <fmodf+0x3c>
 80128c8:	eeb4 8a68 	vcmp.f32	s16, s17
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d0:	d105      	bne.n	80128de <fmodf+0x36>
 80128d2:	f7fb f9c1 	bl	800dc58 <__errno>
 80128d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80128da:	2321      	movs	r3, #33	; 0x21
 80128dc:	6003      	str	r3, [r0, #0]
 80128de:	ecbd 8b02 	vpop	{d8}
 80128e2:	bd08      	pop	{r3, pc}
 80128e4:	00000000 	.word	0x00000000

080128e8 <sqrtf>:
 80128e8:	b508      	push	{r3, lr}
 80128ea:	ed2d 8b02 	vpush	{d8}
 80128ee:	eeb0 8a40 	vmov.f32	s16, s0
 80128f2:	f000 fa1d 	bl	8012d30 <__ieee754_sqrtf>
 80128f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	d60c      	bvs.n	801291a <sqrtf+0x32>
 8012900:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012920 <sqrtf+0x38>
 8012904:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290c:	d505      	bpl.n	801291a <sqrtf+0x32>
 801290e:	f7fb f9a3 	bl	800dc58 <__errno>
 8012912:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012916:	2321      	movs	r3, #33	; 0x21
 8012918:	6003      	str	r3, [r0, #0]
 801291a:	ecbd 8b02 	vpop	{d8}
 801291e:	bd08      	pop	{r3, pc}
	...

08012928 <__ieee754_exp>:
 8012928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801292c:	ec55 4b10 	vmov	r4, r5, d0
 8012930:	49b5      	ldr	r1, [pc, #724]	; (8012c08 <__ieee754_exp+0x2e0>)
 8012932:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012936:	428b      	cmp	r3, r1
 8012938:	ed2d 8b04 	vpush	{d8-d9}
 801293c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8012940:	d93d      	bls.n	80129be <__ieee754_exp+0x96>
 8012942:	49b2      	ldr	r1, [pc, #712]	; (8012c0c <__ieee754_exp+0x2e4>)
 8012944:	428b      	cmp	r3, r1
 8012946:	d918      	bls.n	801297a <__ieee754_exp+0x52>
 8012948:	ee10 3a10 	vmov	r3, s0
 801294c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8012950:	4313      	orrs	r3, r2
 8012952:	d009      	beq.n	8012968 <__ieee754_exp+0x40>
 8012954:	ee10 2a10 	vmov	r2, s0
 8012958:	462b      	mov	r3, r5
 801295a:	4620      	mov	r0, r4
 801295c:	4629      	mov	r1, r5
 801295e:	f7ed fcbd 	bl	80002dc <__adddf3>
 8012962:	4604      	mov	r4, r0
 8012964:	460d      	mov	r5, r1
 8012966:	e002      	b.n	801296e <__ieee754_exp+0x46>
 8012968:	b10e      	cbz	r6, 801296e <__ieee754_exp+0x46>
 801296a:	2400      	movs	r4, #0
 801296c:	2500      	movs	r5, #0
 801296e:	ecbd 8b04 	vpop	{d8-d9}
 8012972:	ec45 4b10 	vmov	d0, r4, r5
 8012976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801297a:	a38d      	add	r3, pc, #564	; (adr r3, 8012bb0 <__ieee754_exp+0x288>)
 801297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012980:	ee10 0a10 	vmov	r0, s0
 8012984:	4629      	mov	r1, r5
 8012986:	f7ee f8ef 	bl	8000b68 <__aeabi_dcmpgt>
 801298a:	4607      	mov	r7, r0
 801298c:	b130      	cbz	r0, 801299c <__ieee754_exp+0x74>
 801298e:	ecbd 8b04 	vpop	{d8-d9}
 8012992:	2000      	movs	r0, #0
 8012994:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012998:	f000 b9f4 	b.w	8012d84 <__math_oflow>
 801299c:	a386      	add	r3, pc, #536	; (adr r3, 8012bb8 <__ieee754_exp+0x290>)
 801299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a2:	4620      	mov	r0, r4
 80129a4:	4629      	mov	r1, r5
 80129a6:	f7ee f8c1 	bl	8000b2c <__aeabi_dcmplt>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	f000 808b 	beq.w	8012ac6 <__ieee754_exp+0x19e>
 80129b0:	ecbd 8b04 	vpop	{d8-d9}
 80129b4:	4638      	mov	r0, r7
 80129b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129ba:	f000 b9da 	b.w	8012d72 <__math_uflow>
 80129be:	4a94      	ldr	r2, [pc, #592]	; (8012c10 <__ieee754_exp+0x2e8>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	f240 80ac 	bls.w	8012b1e <__ieee754_exp+0x1f6>
 80129c6:	4a93      	ldr	r2, [pc, #588]	; (8012c14 <__ieee754_exp+0x2ec>)
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d87c      	bhi.n	8012ac6 <__ieee754_exp+0x19e>
 80129cc:	4b92      	ldr	r3, [pc, #584]	; (8012c18 <__ieee754_exp+0x2f0>)
 80129ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80129d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d6:	ee10 0a10 	vmov	r0, s0
 80129da:	4629      	mov	r1, r5
 80129dc:	f7ed fc7c 	bl	80002d8 <__aeabi_dsub>
 80129e0:	4b8e      	ldr	r3, [pc, #568]	; (8012c1c <__ieee754_exp+0x2f4>)
 80129e2:	00f7      	lsls	r7, r6, #3
 80129e4:	443b      	add	r3, r7
 80129e6:	ed93 7b00 	vldr	d7, [r3]
 80129ea:	f1c6 0a01 	rsb	sl, r6, #1
 80129ee:	4680      	mov	r8, r0
 80129f0:	4689      	mov	r9, r1
 80129f2:	ebaa 0a06 	sub.w	sl, sl, r6
 80129f6:	eeb0 8a47 	vmov.f32	s16, s14
 80129fa:	eef0 8a67 	vmov.f32	s17, s15
 80129fe:	ec53 2b18 	vmov	r2, r3, d8
 8012a02:	4640      	mov	r0, r8
 8012a04:	4649      	mov	r1, r9
 8012a06:	f7ed fc67 	bl	80002d8 <__aeabi_dsub>
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	4622      	mov	r2, r4
 8012a10:	462b      	mov	r3, r5
 8012a12:	4620      	mov	r0, r4
 8012a14:	4629      	mov	r1, r5
 8012a16:	f7ed fe17 	bl	8000648 <__aeabi_dmul>
 8012a1a:	a369      	add	r3, pc, #420	; (adr r3, 8012bc0 <__ieee754_exp+0x298>)
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	4606      	mov	r6, r0
 8012a22:	460f      	mov	r7, r1
 8012a24:	f7ed fe10 	bl	8000648 <__aeabi_dmul>
 8012a28:	a367      	add	r3, pc, #412	; (adr r3, 8012bc8 <__ieee754_exp+0x2a0>)
 8012a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2e:	f7ed fc53 	bl	80002d8 <__aeabi_dsub>
 8012a32:	4632      	mov	r2, r6
 8012a34:	463b      	mov	r3, r7
 8012a36:	f7ed fe07 	bl	8000648 <__aeabi_dmul>
 8012a3a:	a365      	add	r3, pc, #404	; (adr r3, 8012bd0 <__ieee754_exp+0x2a8>)
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	f7ed fc4c 	bl	80002dc <__adddf3>
 8012a44:	4632      	mov	r2, r6
 8012a46:	463b      	mov	r3, r7
 8012a48:	f7ed fdfe 	bl	8000648 <__aeabi_dmul>
 8012a4c:	a362      	add	r3, pc, #392	; (adr r3, 8012bd8 <__ieee754_exp+0x2b0>)
 8012a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a52:	f7ed fc41 	bl	80002d8 <__aeabi_dsub>
 8012a56:	4632      	mov	r2, r6
 8012a58:	463b      	mov	r3, r7
 8012a5a:	f7ed fdf5 	bl	8000648 <__aeabi_dmul>
 8012a5e:	a360      	add	r3, pc, #384	; (adr r3, 8012be0 <__ieee754_exp+0x2b8>)
 8012a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a64:	f7ed fc3a 	bl	80002dc <__adddf3>
 8012a68:	4632      	mov	r2, r6
 8012a6a:	463b      	mov	r3, r7
 8012a6c:	f7ed fdec 	bl	8000648 <__aeabi_dmul>
 8012a70:	4602      	mov	r2, r0
 8012a72:	460b      	mov	r3, r1
 8012a74:	4620      	mov	r0, r4
 8012a76:	4629      	mov	r1, r5
 8012a78:	f7ed fc2e 	bl	80002d8 <__aeabi_dsub>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4606      	mov	r6, r0
 8012a82:	460f      	mov	r7, r1
 8012a84:	4620      	mov	r0, r4
 8012a86:	4629      	mov	r1, r5
 8012a88:	f7ed fdde 	bl	8000648 <__aeabi_dmul>
 8012a8c:	ec41 0b19 	vmov	d9, r0, r1
 8012a90:	f1ba 0f00 	cmp.w	sl, #0
 8012a94:	d15d      	bne.n	8012b52 <__ieee754_exp+0x22a>
 8012a96:	2200      	movs	r2, #0
 8012a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	4639      	mov	r1, r7
 8012aa0:	f7ed fc1a 	bl	80002d8 <__aeabi_dsub>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	ec51 0b19 	vmov	r0, r1, d9
 8012aac:	f7ed fef6 	bl	800089c <__aeabi_ddiv>
 8012ab0:	4622      	mov	r2, r4
 8012ab2:	462b      	mov	r3, r5
 8012ab4:	f7ed fc10 	bl	80002d8 <__aeabi_dsub>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	460b      	mov	r3, r1
 8012abc:	2000      	movs	r0, #0
 8012abe:	4958      	ldr	r1, [pc, #352]	; (8012c20 <__ieee754_exp+0x2f8>)
 8012ac0:	f7ed fc0a 	bl	80002d8 <__aeabi_dsub>
 8012ac4:	e74d      	b.n	8012962 <__ieee754_exp+0x3a>
 8012ac6:	4857      	ldr	r0, [pc, #348]	; (8012c24 <__ieee754_exp+0x2fc>)
 8012ac8:	a347      	add	r3, pc, #284	; (adr r3, 8012be8 <__ieee754_exp+0x2c0>)
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	f7ed fdb7 	bl	8000648 <__aeabi_dmul>
 8012ada:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012ade:	f7ed fbfd 	bl	80002dc <__adddf3>
 8012ae2:	f7ee f861 	bl	8000ba8 <__aeabi_d2iz>
 8012ae6:	4682      	mov	sl, r0
 8012ae8:	f7ed fd44 	bl	8000574 <__aeabi_i2d>
 8012aec:	a340      	add	r3, pc, #256	; (adr r3, 8012bf0 <__ieee754_exp+0x2c8>)
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	4606      	mov	r6, r0
 8012af4:	460f      	mov	r7, r1
 8012af6:	f7ed fda7 	bl	8000648 <__aeabi_dmul>
 8012afa:	4602      	mov	r2, r0
 8012afc:	460b      	mov	r3, r1
 8012afe:	4620      	mov	r0, r4
 8012b00:	4629      	mov	r1, r5
 8012b02:	f7ed fbe9 	bl	80002d8 <__aeabi_dsub>
 8012b06:	a33c      	add	r3, pc, #240	; (adr r3, 8012bf8 <__ieee754_exp+0x2d0>)
 8012b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0c:	4680      	mov	r8, r0
 8012b0e:	4689      	mov	r9, r1
 8012b10:	4630      	mov	r0, r6
 8012b12:	4639      	mov	r1, r7
 8012b14:	f7ed fd98 	bl	8000648 <__aeabi_dmul>
 8012b18:	ec41 0b18 	vmov	d8, r0, r1
 8012b1c:	e76f      	b.n	80129fe <__ieee754_exp+0xd6>
 8012b1e:	4a42      	ldr	r2, [pc, #264]	; (8012c28 <__ieee754_exp+0x300>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d811      	bhi.n	8012b48 <__ieee754_exp+0x220>
 8012b24:	a336      	add	r3, pc, #216	; (adr r3, 8012c00 <__ieee754_exp+0x2d8>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	ee10 0a10 	vmov	r0, s0
 8012b2e:	4629      	mov	r1, r5
 8012b30:	f7ed fbd4 	bl	80002dc <__adddf3>
 8012b34:	4b3a      	ldr	r3, [pc, #232]	; (8012c20 <__ieee754_exp+0x2f8>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	f7ee f816 	bl	8000b68 <__aeabi_dcmpgt>
 8012b3c:	b138      	cbz	r0, 8012b4e <__ieee754_exp+0x226>
 8012b3e:	4b38      	ldr	r3, [pc, #224]	; (8012c20 <__ieee754_exp+0x2f8>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	4620      	mov	r0, r4
 8012b44:	4629      	mov	r1, r5
 8012b46:	e70a      	b.n	801295e <__ieee754_exp+0x36>
 8012b48:	f04f 0a00 	mov.w	sl, #0
 8012b4c:	e75f      	b.n	8012a0e <__ieee754_exp+0xe6>
 8012b4e:	4682      	mov	sl, r0
 8012b50:	e75d      	b.n	8012a0e <__ieee754_exp+0xe6>
 8012b52:	4632      	mov	r2, r6
 8012b54:	463b      	mov	r3, r7
 8012b56:	2000      	movs	r0, #0
 8012b58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012b5c:	f7ed fbbc 	bl	80002d8 <__aeabi_dsub>
 8012b60:	4602      	mov	r2, r0
 8012b62:	460b      	mov	r3, r1
 8012b64:	ec51 0b19 	vmov	r0, r1, d9
 8012b68:	f7ed fe98 	bl	800089c <__aeabi_ddiv>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	460b      	mov	r3, r1
 8012b70:	ec51 0b18 	vmov	r0, r1, d8
 8012b74:	f7ed fbb0 	bl	80002d8 <__aeabi_dsub>
 8012b78:	4642      	mov	r2, r8
 8012b7a:	464b      	mov	r3, r9
 8012b7c:	f7ed fbac 	bl	80002d8 <__aeabi_dsub>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	2000      	movs	r0, #0
 8012b86:	4926      	ldr	r1, [pc, #152]	; (8012c20 <__ieee754_exp+0x2f8>)
 8012b88:	f7ed fba6 	bl	80002d8 <__aeabi_dsub>
 8012b8c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012b90:	4592      	cmp	sl, r2
 8012b92:	db02      	blt.n	8012b9a <__ieee754_exp+0x272>
 8012b94:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012b98:	e6e3      	b.n	8012962 <__ieee754_exp+0x3a>
 8012b9a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012b9e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012ba8:	f7ed fd4e 	bl	8000648 <__aeabi_dmul>
 8012bac:	e6d9      	b.n	8012962 <__ieee754_exp+0x3a>
 8012bae:	bf00      	nop
 8012bb0:	fefa39ef 	.word	0xfefa39ef
 8012bb4:	40862e42 	.word	0x40862e42
 8012bb8:	d52d3051 	.word	0xd52d3051
 8012bbc:	c0874910 	.word	0xc0874910
 8012bc0:	72bea4d0 	.word	0x72bea4d0
 8012bc4:	3e663769 	.word	0x3e663769
 8012bc8:	c5d26bf1 	.word	0xc5d26bf1
 8012bcc:	3ebbbd41 	.word	0x3ebbbd41
 8012bd0:	af25de2c 	.word	0xaf25de2c
 8012bd4:	3f11566a 	.word	0x3f11566a
 8012bd8:	16bebd93 	.word	0x16bebd93
 8012bdc:	3f66c16c 	.word	0x3f66c16c
 8012be0:	5555553e 	.word	0x5555553e
 8012be4:	3fc55555 	.word	0x3fc55555
 8012be8:	652b82fe 	.word	0x652b82fe
 8012bec:	3ff71547 	.word	0x3ff71547
 8012bf0:	fee00000 	.word	0xfee00000
 8012bf4:	3fe62e42 	.word	0x3fe62e42
 8012bf8:	35793c76 	.word	0x35793c76
 8012bfc:	3dea39ef 	.word	0x3dea39ef
 8012c00:	8800759c 	.word	0x8800759c
 8012c04:	7e37e43c 	.word	0x7e37e43c
 8012c08:	40862e41 	.word	0x40862e41
 8012c0c:	7fefffff 	.word	0x7fefffff
 8012c10:	3fd62e42 	.word	0x3fd62e42
 8012c14:	3ff0a2b1 	.word	0x3ff0a2b1
 8012c18:	080142e0 	.word	0x080142e0
 8012c1c:	080142f0 	.word	0x080142f0
 8012c20:	3ff00000 	.word	0x3ff00000
 8012c24:	080142d0 	.word	0x080142d0
 8012c28:	3defffff 	.word	0x3defffff

08012c2c <__ieee754_fmodf>:
 8012c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c2e:	ee10 5a90 	vmov	r5, s1
 8012c32:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8012c36:	d009      	beq.n	8012c4c <__ieee754_fmodf+0x20>
 8012c38:	ee10 2a10 	vmov	r2, s0
 8012c3c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012c40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012c44:	da02      	bge.n	8012c4c <__ieee754_fmodf+0x20>
 8012c46:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012c4a:	dd04      	ble.n	8012c56 <__ieee754_fmodf+0x2a>
 8012c4c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012c50:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c56:	42a3      	cmp	r3, r4
 8012c58:	dbfc      	blt.n	8012c54 <__ieee754_fmodf+0x28>
 8012c5a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8012c5e:	d105      	bne.n	8012c6c <__ieee754_fmodf+0x40>
 8012c60:	4b32      	ldr	r3, [pc, #200]	; (8012d2c <__ieee754_fmodf+0x100>)
 8012c62:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8012c66:	ed93 0a00 	vldr	s0, [r3]
 8012c6a:	e7f3      	b.n	8012c54 <__ieee754_fmodf+0x28>
 8012c6c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8012c70:	d13f      	bne.n	8012cf2 <__ieee754_fmodf+0xc6>
 8012c72:	0219      	lsls	r1, r3, #8
 8012c74:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012c78:	2900      	cmp	r1, #0
 8012c7a:	dc37      	bgt.n	8012cec <__ieee754_fmodf+0xc0>
 8012c7c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8012c80:	d13d      	bne.n	8012cfe <__ieee754_fmodf+0xd2>
 8012c82:	0227      	lsls	r7, r4, #8
 8012c84:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8012c88:	2f00      	cmp	r7, #0
 8012c8a:	da35      	bge.n	8012cf8 <__ieee754_fmodf+0xcc>
 8012c8c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012c90:	bfbb      	ittet	lt
 8012c92:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012c96:	1a12      	sublt	r2, r2, r0
 8012c98:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8012c9c:	4093      	lsllt	r3, r2
 8012c9e:	bfa8      	it	ge
 8012ca0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8012ca4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012ca8:	bfb5      	itete	lt
 8012caa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012cae:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8012cb2:	1a52      	sublt	r2, r2, r1
 8012cb4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8012cb8:	bfb8      	it	lt
 8012cba:	4094      	lsllt	r4, r2
 8012cbc:	1a40      	subs	r0, r0, r1
 8012cbe:	1b1a      	subs	r2, r3, r4
 8012cc0:	bb00      	cbnz	r0, 8012d04 <__ieee754_fmodf+0xd8>
 8012cc2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8012cc6:	bf38      	it	cc
 8012cc8:	4613      	movcc	r3, r2
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0c8      	beq.n	8012c60 <__ieee754_fmodf+0x34>
 8012cce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012cd2:	db1f      	blt.n	8012d14 <__ieee754_fmodf+0xe8>
 8012cd4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012cd8:	db1f      	blt.n	8012d1a <__ieee754_fmodf+0xee>
 8012cda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012cde:	317f      	adds	r1, #127	; 0x7f
 8012ce0:	4333      	orrs	r3, r6
 8012ce2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012ce6:	ee00 3a10 	vmov	s0, r3
 8012cea:	e7b3      	b.n	8012c54 <__ieee754_fmodf+0x28>
 8012cec:	3801      	subs	r0, #1
 8012cee:	0049      	lsls	r1, r1, #1
 8012cf0:	e7c2      	b.n	8012c78 <__ieee754_fmodf+0x4c>
 8012cf2:	15d8      	asrs	r0, r3, #23
 8012cf4:	387f      	subs	r0, #127	; 0x7f
 8012cf6:	e7c1      	b.n	8012c7c <__ieee754_fmodf+0x50>
 8012cf8:	3901      	subs	r1, #1
 8012cfa:	007f      	lsls	r7, r7, #1
 8012cfc:	e7c4      	b.n	8012c88 <__ieee754_fmodf+0x5c>
 8012cfe:	15e1      	asrs	r1, r4, #23
 8012d00:	397f      	subs	r1, #127	; 0x7f
 8012d02:	e7c3      	b.n	8012c8c <__ieee754_fmodf+0x60>
 8012d04:	2a00      	cmp	r2, #0
 8012d06:	da02      	bge.n	8012d0e <__ieee754_fmodf+0xe2>
 8012d08:	005b      	lsls	r3, r3, #1
 8012d0a:	3801      	subs	r0, #1
 8012d0c:	e7d7      	b.n	8012cbe <__ieee754_fmodf+0x92>
 8012d0e:	d0a7      	beq.n	8012c60 <__ieee754_fmodf+0x34>
 8012d10:	0053      	lsls	r3, r2, #1
 8012d12:	e7fa      	b.n	8012d0a <__ieee754_fmodf+0xde>
 8012d14:	005b      	lsls	r3, r3, #1
 8012d16:	3901      	subs	r1, #1
 8012d18:	e7d9      	b.n	8012cce <__ieee754_fmodf+0xa2>
 8012d1a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012d1e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8012d22:	3182      	adds	r1, #130	; 0x82
 8012d24:	410b      	asrs	r3, r1
 8012d26:	4333      	orrs	r3, r6
 8012d28:	e7dd      	b.n	8012ce6 <__ieee754_fmodf+0xba>
 8012d2a:	bf00      	nop
 8012d2c:	08014300 	.word	0x08014300

08012d30 <__ieee754_sqrtf>:
 8012d30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012d34:	4770      	bx	lr

08012d36 <with_errno>:
 8012d36:	b570      	push	{r4, r5, r6, lr}
 8012d38:	4604      	mov	r4, r0
 8012d3a:	460d      	mov	r5, r1
 8012d3c:	4616      	mov	r6, r2
 8012d3e:	f7fa ff8b 	bl	800dc58 <__errno>
 8012d42:	4629      	mov	r1, r5
 8012d44:	6006      	str	r6, [r0, #0]
 8012d46:	4620      	mov	r0, r4
 8012d48:	bd70      	pop	{r4, r5, r6, pc}

08012d4a <xflow>:
 8012d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d4c:	4614      	mov	r4, r2
 8012d4e:	461d      	mov	r5, r3
 8012d50:	b108      	cbz	r0, 8012d56 <xflow+0xc>
 8012d52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012d56:	e9cd 2300 	strd	r2, r3, [sp]
 8012d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d5e:	4620      	mov	r0, r4
 8012d60:	4629      	mov	r1, r5
 8012d62:	f7ed fc71 	bl	8000648 <__aeabi_dmul>
 8012d66:	2222      	movs	r2, #34	; 0x22
 8012d68:	b003      	add	sp, #12
 8012d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d6e:	f7ff bfe2 	b.w	8012d36 <with_errno>

08012d72 <__math_uflow>:
 8012d72:	b508      	push	{r3, lr}
 8012d74:	2200      	movs	r2, #0
 8012d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012d7a:	f7ff ffe6 	bl	8012d4a <xflow>
 8012d7e:	ec41 0b10 	vmov	d0, r0, r1
 8012d82:	bd08      	pop	{r3, pc}

08012d84 <__math_oflow>:
 8012d84:	b508      	push	{r3, lr}
 8012d86:	2200      	movs	r2, #0
 8012d88:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012d8c:	f7ff ffdd 	bl	8012d4a <xflow>
 8012d90:	ec41 0b10 	vmov	d0, r0, r1
 8012d94:	bd08      	pop	{r3, pc}

08012d96 <finite>:
 8012d96:	b082      	sub	sp, #8
 8012d98:	ed8d 0b00 	vstr	d0, [sp]
 8012d9c:	9801      	ldr	r0, [sp, #4]
 8012d9e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012da2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012da6:	0fc0      	lsrs	r0, r0, #31
 8012da8:	b002      	add	sp, #8
 8012daa:	4770      	bx	lr

08012dac <_init>:
 8012dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dae:	bf00      	nop
 8012db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012db2:	bc08      	pop	{r3}
 8012db4:	469e      	mov	lr, r3
 8012db6:	4770      	bx	lr

08012db8 <_fini>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	bf00      	nop
 8012dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dbe:	bc08      	pop	{r3}
 8012dc0:	469e      	mov	lr, r3
 8012dc2:	4770      	bx	lr
