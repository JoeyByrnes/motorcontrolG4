
motorcontrolG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fb4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  08013198  08013198  00023198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146d8  080146d8  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  080146d8  080146d8  000246d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146e0  080146e0  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146e0  080146e0  000246e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080146e4  080146e4  000246e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080146e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009718  20000220  08014908  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009938  08014908  00039938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a602  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005760  00000000  00000000  0005a852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  0005ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  00061ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f1b0  00000000  00000000  00063be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000288ad  00000000  00000000  00092d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120ed8  00000000  00000000  000bb645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dc51d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d74  00000000  00000000  001dc570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801317c 	.word	0x0801317c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0801317c 	.word	0x0801317c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00d f81b 	bl	800e09c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010d2:	f005 fa53 	bl	800657c <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010dc:	f003 fe8a 	bl	8004df4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_ADC1_Init+0xe8>)
 80010ec:	f006 fac8 	bl	8007680 <HAL_ADCEx_MultiModeConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f6:	f003 fe7d 	bl	8004df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_ADC1_Init+0xec>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001106:	237f      	movs	r3, #127	; 0x7f
 8001108:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_ADC1_Init+0xe8>)
 8001118:	f005 fdea 	bl	8006cf0 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001122:	f003 fe67 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000023c 	.word	0x2000023c
 8001134:	32601000 	.word	0x32601000

08001138 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00c ffa9 	bl	800e09c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <MX_ADC2_Init+0xc4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001172:	2204      	movs	r2, #4
 8001174:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011b4:	f005 f9e2 	bl	800657c <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011be:	f003 fe19 	bl	8004df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC2_Init+0xc8>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	; 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC2_Init+0xc0>)
 80011e0:	f005 fd86 	bl	8006cf0 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011ea:	f003 fe03 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002a8 	.word	0x200002a8
 80011fc:	50000100 	.word	0x50000100
 8001200:	32601000 	.word	0x32601000

08001204 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00c ff3d 	bl	800e09c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <MX_ADC3_Init+0xe8>)
 8001226:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800122a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800122e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800124a:	2204      	movs	r2, #4
 800124c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800125c:	2201      	movs	r2, #1
 800125e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_ADC3_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_ADC3_Init+0xe4>)
 800128c:	f005 f976 	bl	800657c <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001296:	f003 fdad 	bl	8004df4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012a6:	f006 f9eb 	bl	8007680 <HAL_ADCEx_MultiModeConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f003 fda0 	bl	8004df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_ADC3_Init+0xec>)
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c0:	237f      	movs	r3, #127	; 0x7f
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC3_Init+0xe4>)
 80012d2:	f005 fd0d 	bl	8006cf0 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012dc:	f003 fd8a 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000314 	.word	0x20000314
 80012ec:	50000400 	.word	0x50000400
 80012f0:	32601000 	.word	0x32601000

080012f4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00c fecb 	bl	800e09c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <MX_ADC4_Init+0xc4>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800130e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001312:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800132e:	2204      	movs	r2, #4
 8001330:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001340:	2201      	movs	r2, #1
 8001342:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_ADC4_Init+0xc0>)
 8001370:	f005 f904 	bl	800657c <HAL_ADC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800137a:	f003 fd3b 	bl	8004df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_ADC4_Init+0xc8>)
 8001380:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001382:	2306      	movs	r3, #6
 8001384:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138a:	237f      	movs	r3, #127	; 0x7f
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138e:	2304      	movs	r3, #4
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC4_Init+0xc0>)
 800139c:	f005 fca8 	bl	8006cf0 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80013a6:	f003 fd25 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000380 	.word	0x20000380
 80013b8:	50000500 	.word	0x50000500
 80013bc:	0c900008 	.word	0x0c900008

080013c0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00c fe65 	bl	800e09c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <MX_ADC5_Init+0xc4>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013de:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC5_Init+0xc0>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001400:	2200      	movs	r2, #0
 8001402:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001406:	2200      	movs	r2, #0
 8001408:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC5_Init+0xc0>)
 800140c:	2201      	movs	r2, #1
 800140e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_ADC5_Init+0xc0>)
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC5_Init+0xc0>)
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_ADC5_Init+0xc0>)
 800143c:	f005 f89e 	bl	800657c <HAL_ADC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001446:	f003 fcd5 	bl	8004df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC5_Init+0xc8>)
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144e:	2306      	movs	r3, #6
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001456:	237f      	movs	r3, #127	; 0x7f
 8001458:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145a:	2304      	movs	r3, #4
 800145c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC5_Init+0xc0>)
 8001468:	f005 fc42 	bl	8006cf0 <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001472:	f003 fcbf 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003ec 	.word	0x200003ec
 8001484:	50000600 	.word	0x50000600
 8001488:	04300002 	.word	0x04300002

0800148c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a6      	sub	sp, #152	; 0x98
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2254      	movs	r2, #84	; 0x54
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c fdf5 	bl	800e09c <memset>
  if(adcHandle->Instance==ADC1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ba:	d16b      	bne.n	8001594 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 fb43 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014d8:	f003 fc8c 	bl	8004df4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014dc:	4b9f      	ldr	r3, [pc, #636]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a9e      	ldr	r2, [pc, #632]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014e6:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014ee:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a9b      	ldr	r2, [pc, #620]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b99      	ldr	r3, [pc, #612]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a95      	ldr	r2, [pc, #596]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001534:	4619      	mov	r1, r3
 8001536:	488b      	ldr	r0, [pc, #556]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 8001538:	f007 fb6a 	bl	8008c10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800153e:	4a8b      	ldr	r2, [pc, #556]	; (800176c <HAL_ADC_MspInit+0x2e0>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001544:	2205      	movs	r2, #5
 8001546:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001548:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001576:	487c      	ldr	r0, [pc, #496]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 8001578:	f006 fc34 	bl	8007de4 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001582:	f003 fc37 	bl	8004df4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
 800158c:	4a76      	ldr	r2, [pc, #472]	; (8001768 <HAL_ADC_MspInit+0x2dc>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001592:	e1b4      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a75      	ldr	r2, [pc, #468]	; (8001770 <HAL_ADC_MspInit+0x2e4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d16b      	bne.n	8001676 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015a8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 fad2 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0x132>
      Error_Handler();
 80015ba:	f003 fc1b 	bl	8004df4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_ADC_MspInit+0x2d0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10b      	bne.n	80015e8 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a62      	ldr	r2, [pc, #392]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a5c      	ldr	r2, [pc, #368]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001616:	4619      	mov	r1, r3
 8001618:	4852      	ldr	r0, [pc, #328]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 800161a:	f007 faf9 	bl	8008c10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_ADC_MspInit+0x2ec>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001658:	4846      	ldr	r0, [pc, #280]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800165a:	f006 fbc3 	bl	8007de4 <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001664:	f003 fbc6 	bl	8004df4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a42      	ldr	r2, [pc, #264]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
 800166e:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_ADC_MspInit+0x2e8>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001674:	e143      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_ADC_MspInit+0x2f0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 8085 	bne.w	800178c <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f008 fa60 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800169e:	f003 fba9 	bl	8004df4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_ADC_MspInit+0x2f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_ADC_MspInit+0x2d4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016fa:	4619      	mov	r1, r3
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0x2d8>)
 80016fe:	f007 fa87 	bl	8008c10 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_ADC_MspInit+0x2fc>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800170a:	2225      	movs	r2, #37	; 0x25
 800170c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 800173e:	f006 fb51 	bl	8007de4 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_ADC_MspInit+0x2c0>
      Error_Handler();
 8001748:	f003 fb54 	bl	8004df4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_ADC_MspInit+0x2f8>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001758:	e0d1      	b.n	80018fe <HAL_ADC_MspInit+0x472>
 800175a:	bf00      	nop
 800175c:	200005d8 	.word	0x200005d8
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400
 8001768:	20000458 	.word	0x20000458
 800176c:	40020008 	.word	0x40020008
 8001770:	50000100 	.word	0x50000100
 8001774:	200004b8 	.word	0x200004b8
 8001778:	4002001c 	.word	0x4002001c
 800177c:	50000400 	.word	0x50000400
 8001780:	200005dc 	.word	0x200005dc
 8001784:	20000518 	.word	0x20000518
 8001788:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_ADC_MspInit+0x47c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d16c      	bne.n	8001870 <HAL_ADC_MspInit+0x3e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800179c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 f9d6 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80017b2:	f003 fb1f 	bl	8004df4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_ADC_MspInit+0x480>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001810:	4619      	mov	r1, r3
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <HAL_ADC_MspInit+0x488>)
 8001814:	f007 f9fc 	bl	8008c10 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800181a:	4a40      	ldr	r2, [pc, #256]	; (800191c <HAL_ADC_MspInit+0x490>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001820:	2226      	movs	r2, #38	; 0x26
 8001822:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001852:	4831      	ldr	r0, [pc, #196]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001854:	f006 fac6 	bl	8007de4 <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 800185e:	f003 fac9 	bl	8004df4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_ADC_MspInit+0x48c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800186e:	e046      	b.n	80018fe <HAL_ADC_MspInit+0x472>
  else if(adcHandle->Instance==ADC5)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x494>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d141      	bne.n	80018fe <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001884:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188a:	4618      	mov	r0, r3
 800188c:	f008 f964 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_ADC_MspInit+0x40e>
      Error_Handler();
 8001896:	f003 faad 	bl	8004df4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_ADC_MspInit+0x480>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_ADC_MspInit+0x480>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0x438>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_ADC_MspInit+0x484>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f007 f989 	bl	8008c10 <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3798      	adds	r7, #152	; 0x98
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	50000500 	.word	0x50000500
 800190c:	200005dc 	.word	0x200005dc
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400
 8001918:	20000578 	.word	0x20000578
 800191c:	40020044 	.word	0x40020044
 8001920:	50000600 	.word	0x50000600

08001924 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <order_phases+0x1e8>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 8001940:	4873      	ldr	r0, [pc, #460]	; (8001b10 <order_phases+0x1ec>)
 8001942:	f00d fab3 	bl	800eeac <puts>
		cal->started = 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001b14 <order_phases+0x1f0>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 7a05 	vldr	s15, [r3, #20]
 8001976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d529      	bpl.n	80019d8 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001996:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        cal->cal_position.elec_velocity = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019a0:	461a      	mov	r2, r3
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <order_phases+0x1f4>)
 80019ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80019c4:	332c      	adds	r3, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f001 fccb 	bl	8003364 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
    	return;
 80019d6:	e096      	b.n	8001b06 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a05 	vldr	s15, [r3, #20]
 80019de:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b1c <order_phases+0x1f8>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d51d      	bpl.n	8001a28 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80019f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a12:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a1c:	332c      	adds	r3, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f001 fc9f 	bl	8003364 <commutate>
    	return;
 8001a26:	e06e      	b.n	8001b06 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f001 fbb3 	bl	8003194 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	eef0 7ae7 	vabs.f32	s15, s15
 8001a46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b20 <order_phases+0x1fc>
 8001a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a4e:	ee16 0a90 	vmov	r0, s13
 8001a52:	f7fe fda1 	bl	8000598 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f011 f829 	bl	8012ab4 <round>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8c5 	bl	8000bf8 <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd07      	ble.n	8001a9a <order_phases+0x176>
		cal->phase_order = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <order_phases+0x200>)
 8001a94:	f00d fa0a 	bl	800eeac <puts>
 8001a98:	e006      	b.n	8001aa8 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001aa2:	4821      	ldr	r0, [pc, #132]	; (8001b28 <order_phases+0x204>)
 8001aa4:	f00d fa02 	bl	800eeac <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	481f      	ldr	r0, [pc, #124]	; (8001b2c <order_phases+0x208>)
 8001ab0:	f00d f976 	bl	800eda0 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd6d 	bl	8000598 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7fe fd68 	bl	8000598 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	4816      	ldr	r0, [pc, #88]	; (8001b30 <order_phases+0x20c>)
 8001ad6:	f00d f963 	bl	800eda0 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <order_phases+0x1e8>)
 8001ae4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <order_phases+0x1f4>)
 8001af4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	20000758 	.word	0x20000758
 8001b10:	08013198 	.word	0x08013198
 8001b14:	37d1b717 	.word	0x37d1b717
 8001b18:	20000658 	.word	0x20000658
 8001b1c:	3fd06cbe 	.word	0x3fd06cbe
 8001b20:	40c90fdb 	.word	0x40c90fdb
 8001b24:	080131bc 	.word	0x080131bc
 8001b28:	080131d4 	.word	0x080131d4
 8001b2c:	080131ec 	.word	0x080131ec
 8001b30:	08013200 	.word	0x08013200

08001b34 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7c1b      	ldrb	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001b4a:	489e      	ldr	r0, [pc, #632]	; (8001dc4 <calibrate_encoder+0x290>)
 8001b4c:	f00d f9ae 	bl	800eeac <puts>
			cal->started = 1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001dc8 <calibrate_encoder+0x294>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d525      	bpl.n	8001be8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bae:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
        controller->i_d_des = I_CAL;
 8001bb2:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <calibrate_encoder+0x298>)
 8001bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001bcc:	332c      	adds	r3, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f001 fbc7 	bl	8003364 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001be6:	e259      	b.n	800209c <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <calibrate_encoder+0x298>)
 8001bf0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bf4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001dd0 <calibrate_encoder+0x29c>
 8001bf8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bfc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001c00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	f140 808f 	bpl.w	8001d36 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001c36:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001c40:	332c      	adds	r3, #44	; 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f001 fb8d 	bl	8003364 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dc00      	bgt.n	8001c62 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001c60:	e21c      	b.n	800209c <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001de8 <calibrate_encoder+0x2b4>
 8001c6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c70:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <calibrate_encoder+0x298>)
 8001c72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c76:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001dd0 <calibrate_encoder+0x29c>
 8001c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c86:	ee17 3a90 	vmov	r3, s15
 8001c8a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	13db      	asrs	r3, r3, #15
 8001c9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	f100 030a 	add.w	r3, r0, #10
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cb8:	461d      	mov	r5, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	685c      	ldr	r4, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc63 	bl	8000598 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4623      	mov	r3, r4
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4629      	mov	r1, r5
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <calibrate_encoder+0x2a4>)
 8001ce2:	f00d f85d 	bl	800eda0 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ddc <calibrate_encoder+0x2a8>
 8001cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <calibrate_encoder+0x298>)
 8001d08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d0c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001de0 <calibrate_encoder+0x2ac>
 8001d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	f000 81b7 	beq.w	8002096 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001d34:	e1b2      	b.n	800209c <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <calibrate_encoder+0x298>)
 8001d3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d42:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001de4 <calibrate_encoder+0x2b0>
 8001d46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d4a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001d4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	f140 80a9 	bpl.w	8001eb8 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d6c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dd4 <calibrate_encoder+0x2a0>
 8001d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <calibrate_encoder+0x298>)
 8001d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001d98:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		commutate(controller, &cal->cal_position);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001da2:	332c      	adds	r3, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f001 fadc 	bl	8003364 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dc14      	bgt.n	8001dec <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001dc2:	e16a      	b.n	800209a <calibrate_encoder+0x566>
 8001dc4:	0801321c 	.word	0x0801321c
 8001dc8:	37d1b717 	.word	0x37d1b717
 8001dcc:	20000658 	.word	0x20000658
 8001dd0:	40c90fdb 	.word	0x40c90fdb
 8001dd4:	3983126e 	.word	0x3983126e
 8001dd8:	08013244 	.word	0x08013244
 8001ddc:	3ba0d97c 	.word	0x3ba0d97c
 8001de0:	43000000 	.word	0x43000000
 8001de4:	41490fdb 	.word	0x41490fdb
 8001de8:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8152 	beq.w	800209a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfc:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001de8 <calibrate_encoder+0x2b4>
 8001e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e04:	4ba7      	ldr	r3, [pc, #668]	; (80020a4 <calibrate_encoder+0x570>)
 8001e06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e0a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80020a8 <calibrate_encoder+0x574>
 8001e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1a:	ee17 3a90 	vmov	r3, s15
 8001e1e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	13db      	asrs	r3, r3, #15
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001e4e:	4610      	mov	r0, r2
 8001e50:	0fda      	lsrs	r2, r3, #31
 8001e52:	4413      	add	r3, r2
 8001e54:	105b      	asrs	r3, r3, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	f100 030a 	add.w	r3, r0, #10
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e68:	461d      	mov	r5, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	330a      	adds	r3, #10
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	685c      	ldr	r4, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb8b 	bl	8000598 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9cd 2300 	strd	r2, r3, [sp]
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4886      	ldr	r0, [pc, #536]	; (80020ac <calibrate_encoder+0x578>)
 8001e92:	f00c ff85 	bl	800eda0 <iprintf>
			cal->sample_count--;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ea8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80020b0 <calibrate_encoder+0x57c>
 8001eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001eb6:	e0f0      	b.n	800209a <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f001 f96b 	bl	8003194 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec6:	e00b      	b.n	8001ee0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ecc:	330a      	adds	r3, #10
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed6:	4413      	add	r3, r2
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001edc:	3301      	adds	r3, #1
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <calibrate_encoder+0x570>)
 8001ee2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbe8      	blt.n	8001ec8 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <calibrate_encoder+0x570>)
 8001f02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f06:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80020b4 <calibrate_encoder+0x580>
 8001f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	ee17 2a90 	vmov	r2, s15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da01      	bge.n	8001f32 <calibrate_encoder+0x3fe>
 8001f2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f32:	125b      	asrs	r3, r3, #9
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f3a:	e0a0      	b.n	800207e <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	0fda      	lsrs	r2, r3, #31
 8001f44:	4413      	add	r3, r2
 8001f46:	105b      	asrs	r3, r3, #1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4c:	e068      	b.n	8002020 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <calibrate_encoder+0x570>)
 8001f5a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80020b4 <calibrate_encoder+0x580>
 8001f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6a:	eddf 6a52 	vldr	s13, [pc, #328]	; 80020b4 <calibrate_encoder+0x580>
 8001f6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da13      	bge.n	8001fb8 <calibrate_encoder+0x484>
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <calibrate_encoder+0x570>)
 8001f9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fa0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80020b4 <calibrate_encoder+0x580>
 8001fa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	e027      	b.n	8002008 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <calibrate_encoder+0x570>)
 8001fc4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fc8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80020b4 <calibrate_encoder+0x580>
 8001fcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	dd12      	ble.n	8002008 <calibrate_encoder+0x4d4>
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <calibrate_encoder+0x570>)
 8001fee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ff2:	eddf 6a30 	vldr	s13, [pc, #192]	; 80020b4 <calibrate_encoder+0x580>
 8001ff6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002002:	ee17 3a90 	vmov	r3, s15
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	330a      	adds	r3, #10
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002016:	4413      	add	r3, r2
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201c:	3301      	adds	r3, #1
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	0fda      	lsrs	r2, r3, #31
 8002024:	4413      	add	r3, r2
 8002026:	105b      	asrs	r3, r3, #1
 8002028:	461a      	mov	r2, r3
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	4293      	cmp	r3, r2
 800202e:	db8e      	blt.n	8001f4e <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8002030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	fb92 f3f3 	sdiv	r3, r2, r3
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	4413      	add	r3, r2
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	2b7f      	cmp	r3, #127	; 0x7f
 8002046:	dd02      	ble.n	800204e <calibrate_encoder+0x51a>
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	3b80      	subs	r3, #128	; 0x80
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800205e:	330a      	adds	r3, #10
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	461a      	mov	r2, r3
 8002070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002072:	4811      	ldr	r0, [pc, #68]	; (80020b8 <calibrate_encoder+0x584>)
 8002074:	f00c fe94 	bl	800eda0 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	3301      	adds	r3, #1
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002080:	2b7f      	cmp	r3, #127	; 0x7f
 8002082:	f77f af5b 	ble.w	8001f3c <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002094:	e002      	b.n	800209c <calibrate_encoder+0x568>
				return;
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <calibrate_encoder+0x568>
		return;
 800209a:	bf00      	nop
}
 800209c:	3748      	adds	r7, #72	; 0x48
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdb0      	pop	{r4, r5, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000658 	.word	0x20000658
 80020a8:	40c90fdb 	.word	0x40c90fdb
 80020ac:	08013244 	.word	0x08013244
 80020b0:	3ba0d97c 	.word	0x3ba0d97c
 80020b4:	43000000 	.word	0x43000000
 80020b8:	08013254 	.word	0x08013254

080020bc <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
//	msg->filter.FilterMaskIdLow=0;
//	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
//	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
//	msg->filter.FilterActivation=ENABLE;
//	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
//	msg->tx_header.DLC = 6; 			// message size of 8 byte
//	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
//	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
//	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2230      	movs	r2, #48	; 0x30
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00b ffd3 	bl	800e09c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_DAC1_Init+0x6c>)
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <MX_DAC1_Init+0x70>)
 80020fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020fc:	4814      	ldr	r0, [pc, #80]	; (8002150 <MX_DAC1_Init+0x6c>)
 80020fe:	f005 fca7 	bl	8007a50 <HAL_DAC_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002108:	f002 fe74 	bl	8004df4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800210c:	2302      	movs	r3, #2
 800210e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002128:	2301      	movs	r3, #1
 800212a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_DAC1_Init+0x6c>)
 8002138:	f005 fcac 	bl	8007a94 <HAL_DAC_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002142:	f002 fe57 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200005e0 	.word	0x200005e0
 8002154:	50000800 	.word	0x50000800

08002158 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_DAC_MspInit+0x74>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d124      	bne.n	80021c4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_DAC_MspInit+0x78>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021aa:	2310      	movs	r3, #16
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c0:	f006 fd26 	bl	8008c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	50000800 	.word	0x50000800
 80021d0:	40021000 	.word	0x40021000

080021d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <MX_DMA_Init+0x80>)
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <MX_DMA_Init+0x80>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6493      	str	r3, [r2, #72]	; 0x48
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_DMA_Init+0x80>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_DMA_Init+0x80>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <MX_DMA_Init+0x80>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6493      	str	r3, [r2, #72]	; 0x48
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_DMA_Init+0x80>)
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	200b      	movs	r0, #11
 8002210:	f005 fbf6 	bl	8007a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002214:	200b      	movs	r0, #11
 8002216:	f005 fc0d 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	200c      	movs	r0, #12
 8002220:	f005 fbee 	bl	8007a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002224:	200c      	movs	r0, #12
 8002226:	f005 fc05 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	200d      	movs	r0, #13
 8002230:	f005 fbe6 	bl	8007a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002234:	200d      	movs	r0, #13
 8002236:	f005 fbfd 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	200e      	movs	r0, #14
 8002240:	f005 fbde 	bl	8007a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002244:	200e      	movs	r0, #14
 8002246:	f005 fbf5 	bl	8007a34 <HAL_NVIC_EnableIRQ>

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	480f      	ldr	r0, [pc, #60]	; (80022ac <drv_spi_write+0x54>)
 8002270:	f006 fe50 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	1c9a      	adds	r2, r3, #2
 800227a:	2364      	movs	r3, #100	; 0x64
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <drv_spi_write+0x58>)
 8002282:	f007 ff62 	bl	800a14a <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8002286:	bf00      	nop
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <drv_spi_write+0x58>)
 800228a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d0f9      	beq.n	8002288 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8002294:	2201      	movs	r2, #1
 8002296:	2110      	movs	r1, #16
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <drv_spi_write+0x54>)
 800229a:	f006 fe3b 	bl	8008f14 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	885b      	ldrh	r3, [r3, #2]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	48000800 	.word	0x48000800
 80022b0:	200096e4 	.word	0x200096e4

080022b4 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	463b      	mov	r3, r7
 80022bc:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 80022c0:	463b      	mov	r3, r7
 80022c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ffc6 	bl	8002258 <drv_spi_write>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	463b      	mov	r3, r7
 80022de:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 80022e2:	463b      	mov	r3, r7
 80022e4:	f248 0101 	movw	r1, #32769	; 0x8001
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffb5 	bl	8002258 <drv_spi_write>
 80022ee:	4603      	mov	r3, r0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	e883 0003 	stmia.w	r3, {r0, r1}
 8002306:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	02db      	lsls	r3, r3, #11
 800230c:	b21b      	sxth	r3, r3
 800230e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002316:	b21b      	sxth	r3, r3
 8002318:	b29a      	uxth	r2, r3
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff99 	bl	8002258 <drv_spi_write>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	f107 0408 	add.w	r4, r7, #8
 800233a:	e884 0003 	stmia.w	r4, {r0, r1}
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	02db      	lsls	r3, r3, #11
 8002346:	b21a      	sxth	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b21b      	sxth	r3, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	b29a      	uxth	r2, r3
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff7d 	bl	8002258 <drv_spi_write>
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}

08002366 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8002366:	b590      	push	{r4, r7, lr}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	f107 0408 	add.w	r4, r7, #8
 8002370:	e884 0003 	stmia.w	r4, {r0, r1}
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	b21b      	sxth	r3, r3
 800237e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002382:	b21a      	sxth	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	01db      	lsls	r3, r3, #7
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	015b      	lsls	r3, r3, #5
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b21a      	sxth	r2, r3
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80023d4:	8afa      	ldrh	r2, [r7, #22]
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff3b 	bl	8002258 <drv_spi_write>
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b087      	sub	sp, #28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f107 0408 	add.w	r4, r7, #8
 80023f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	b21b      	sxth	r3, r3
 8002402:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002406:	b21a      	sxth	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21a      	sxth	r2, r3
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	b21b      	sxth	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b21a      	sxth	r2, r3
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	b21b      	sxth	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b21a      	sxth	r2, r3
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	b21b      	sxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b21b      	sxth	r3, r3
 800242e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002430:	8afa      	ldrh	r2, [r7, #22]
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff0d 	bl	8002258 <drv_spi_write>
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}

08002446 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002446:	b590      	push	{r4, r7, lr}
 8002448:	b087      	sub	sp, #28
 800244a:	af00      	add	r7, sp, #0
 800244c:	f107 0408 	add.w	r4, r7, #8
 8002450:	e884 0003 	stmia.w	r4, {r0, r1}
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	b21b      	sxth	r3, r3
 800245e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002462:	b21a      	sxth	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21a      	sxth	r2, r3
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	b21a      	sxth	r2, r3
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	b21b      	sxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b21a      	sxth	r2, r3
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	015b      	lsls	r3, r3, #5
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	b21b      	sxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b21a      	sxth	r2, r3
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b21a      	sxth	r2, r3
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80024b4:	8afa      	ldrh	r2, [r7, #22]
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fecb 	bl	8002258 <drv_spi_write>
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}

080024ca <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	463b      	mov	r3, r7
 80024d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80024d6:	2202      	movs	r2, #2
 80024d8:	463b      	mov	r3, r7
 80024da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024de:	f7ff ff0b 	bl	80022f8 <drv_read_register>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	2202      	movs	r2, #2
 80024ee:	4639      	mov	r1, r7
 80024f0:	c903      	ldmia	r1, {r0, r1}
 80024f2:	f7ff ff1d 	bl	8002330 <drv_write_register>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	463b      	mov	r3, r7
 8002506:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 800250a:	2202      	movs	r2, #2
 800250c:	463b      	mov	r3, r7
 800250e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002512:	f7ff fef1 	bl	80022f8 <drv_read_register>
 8002516:	4603      	mov	r3, r0
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	2202      	movs	r2, #2
 8002522:	4639      	mov	r1, r7
 8002524:	c903      	ldmia	r1, {r0, r1}
 8002526:	f7ff ff03 	bl	8002330 <drv_write_register>
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	463b      	mov	r3, r7
 800253c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8002540:	463b      	mov	r3, r7
 8002542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002546:	f7ff feb5 	bl	80022b4 <drv_read_FSR1>
 800254a:	4603      	mov	r3, r0
 800254c:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 800254e:	463b      	mov	r3, r7
 8002550:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002554:	f7ff febf 	bl	80022d6 <drv_read_FSR2>
 8002558:	4603      	mov	r3, r0
 800255a:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 800255c:	89fb      	ldrh	r3, [r7, #14]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <drv_print_faults+0x38>
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <drv_print_faults+0x190>)
 8002568:	f00c fc1a 	bl	800eda0 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <drv_print_faults+0x48>
 8002576:	4854      	ldr	r0, [pc, #336]	; (80026c8 <drv_print_faults+0x194>)
 8002578:	f00c fc12 	bl	800eda0 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <drv_print_faults+0x58>
 8002586:	4851      	ldr	r0, [pc, #324]	; (80026cc <drv_print_faults+0x198>)
 8002588:	f00c fc0a 	bl	800eda0 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <drv_print_faults+0x68>
 8002596:	484e      	ldr	r0, [pc, #312]	; (80026d0 <drv_print_faults+0x19c>)
 8002598:	f00c fc02 	bl	800eda0 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <drv_print_faults+0x78>
 80025a6:	484b      	ldr	r0, [pc, #300]	; (80026d4 <drv_print_faults+0x1a0>)
 80025a8:	f00c fbfa 	bl	800eda0 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <drv_print_faults+0x88>
 80025b6:	4848      	ldr	r0, [pc, #288]	; (80026d8 <drv_print_faults+0x1a4>)
 80025b8:	f00c fbf2 	bl	800eda0 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80025bc:	89fb      	ldrh	r3, [r7, #14]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <drv_print_faults+0x98>
 80025c6:	4845      	ldr	r0, [pc, #276]	; (80026dc <drv_print_faults+0x1a8>)
 80025c8:	f00c fbea 	bl	800eda0 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <drv_print_faults+0xa8>
 80025d6:	4842      	ldr	r0, [pc, #264]	; (80026e0 <drv_print_faults+0x1ac>)
 80025d8:	f00c fbe2 	bl	800eda0 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <drv_print_faults+0xb8>
 80025e6:	483f      	ldr	r0, [pc, #252]	; (80026e4 <drv_print_faults+0x1b0>)
 80025e8:	f00c fbda 	bl	800eda0 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <drv_print_faults+0xc8>
 80025f6:	483c      	ldr	r0, [pc, #240]	; (80026e8 <drv_print_faults+0x1b4>)
 80025f8:	f00c fbd2 	bl	800eda0 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <drv_print_faults+0xd8>
 8002606:	4839      	ldr	r0, [pc, #228]	; (80026ec <drv_print_faults+0x1b8>)
 8002608:	f00c fbca 	bl	800eda0 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 800260c:	89bb      	ldrh	r3, [r7, #12]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <drv_print_faults+0xe8>
 8002616:	4836      	ldr	r0, [pc, #216]	; (80026f0 <drv_print_faults+0x1bc>)
 8002618:	f00c fbc2 	bl	800eda0 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 800261c:	89bb      	ldrh	r3, [r7, #12]
 800261e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <drv_print_faults+0xf8>
 8002626:	4833      	ldr	r0, [pc, #204]	; (80026f4 <drv_print_faults+0x1c0>)
 8002628:	f00c fbba 	bl	800eda0 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 800262c:	89bb      	ldrh	r3, [r7, #12]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <drv_print_faults+0x108>
 8002636:	4830      	ldr	r0, [pc, #192]	; (80026f8 <drv_print_faults+0x1c4>)
 8002638:	f00c fbb2 	bl	800eda0 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 800263c:	89bb      	ldrh	r3, [r7, #12]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <drv_print_faults+0x118>
 8002646:	482d      	ldr	r0, [pc, #180]	; (80026fc <drv_print_faults+0x1c8>)
 8002648:	f00c fbaa 	bl	800eda0 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 800264c:	89bb      	ldrh	r3, [r7, #12]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <drv_print_faults+0x128>
 8002656:	482a      	ldr	r0, [pc, #168]	; (8002700 <drv_print_faults+0x1cc>)
 8002658:	f00c fba2 	bl	800eda0 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 800265c:	89bb      	ldrh	r3, [r7, #12]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <drv_print_faults+0x138>
 8002666:	4827      	ldr	r0, [pc, #156]	; (8002704 <drv_print_faults+0x1d0>)
 8002668:	f00c fb9a 	bl	800eda0 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 800266c:	89bb      	ldrh	r3, [r7, #12]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <drv_print_faults+0x148>
 8002676:	4824      	ldr	r0, [pc, #144]	; (8002708 <drv_print_faults+0x1d4>)
 8002678:	f00c fb92 	bl	800eda0 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 800267c:	89bb      	ldrh	r3, [r7, #12]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <drv_print_faults+0x158>
 8002686:	4821      	ldr	r0, [pc, #132]	; (800270c <drv_print_faults+0x1d8>)
 8002688:	f00c fb8a 	bl	800eda0 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 800268c:	89bb      	ldrh	r3, [r7, #12]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <drv_print_faults+0x168>
 8002696:	481e      	ldr	r0, [pc, #120]	; (8002710 <drv_print_faults+0x1dc>)
 8002698:	f00c fb82 	bl	800eda0 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 800269c:	89bb      	ldrh	r3, [r7, #12]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <drv_print_faults+0x178>
 80026a6:	481b      	ldr	r0, [pc, #108]	; (8002714 <drv_print_faults+0x1e0>)
 80026a8:	f00c fb7a 	bl	800eda0 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80026ac:	89bb      	ldrh	r3, [r7, #12]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <drv_print_faults+0x188>
 80026b6:	4818      	ldr	r0, [pc, #96]	; (8002718 <drv_print_faults+0x1e4>)
 80026b8:	f00c fb72 	bl	800eda0 <iprintf>

}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	08013260 	.word	0x08013260
 80026c8:	0801326c 	.word	0x0801326c
 80026cc:	08013278 	.word	0x08013278
 80026d0:	08013280 	.word	0x08013280
 80026d4:	08013288 	.word	0x08013288
 80026d8:	08013290 	.word	0x08013290
 80026dc:	0801329c 	.word	0x0801329c
 80026e0:	080132a8 	.word	0x080132a8
 80026e4:	080132b4 	.word	0x080132b4
 80026e8:	080132c0 	.word	0x080132c0
 80026ec:	080132cc 	.word	0x080132cc
 80026f0:	080132d8 	.word	0x080132d8
 80026f4:	080132e0 	.word	0x080132e0
 80026f8:	080132e8 	.word	0x080132e8
 80026fc:	080132f0 	.word	0x080132f0
 8002700:	080132f8 	.word	0x080132f8
 8002704:	08013300 	.word	0x08013300
 8002708:	0801330c 	.word	0x0801330c
 800270c:	08013318 	.word	0x08013318
 8002710:	08013324 	.word	0x08013324
 8002714:	08013330 	.word	0x08013330
 8002718:	0801333c 	.word	0x0801333c

0800271c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <MX_FDCAN1_Init+0x88>)
 8002724:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800273a:	2200      	movs	r2, #0
 800273c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002740:	2200      	movs	r2, #0
 8002742:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002746:	2200      	movs	r2, #0
 8002748:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800274c:	2210      	movs	r2, #16
 800274e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002752:	2201      	movs	r2, #1
 8002754:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002758:	2202      	movs	r2, #2
 800275a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800275e:	2202      	movs	r2, #2
 8002760:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002764:	2201      	movs	r2, #1
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800276a:	2201      	movs	r2, #1
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002770:	2201      	movs	r2, #1
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002776:	2201      	movs	r2, #1
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800277c:	2200      	movs	r2, #0
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002782:	2200      	movs	r2, #0
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 8002788:	2200      	movs	r2, #0
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_FDCAN1_Init+0x84>)
 800278e:	f005 fda3 	bl	80082d8 <HAL_FDCAN_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002798:	f002 fb2c 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200005f4 	.word	0x200005f4
 80027a4:	40006400 	.word	0x40006400

080027a8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b09e      	sub	sp, #120	; 0x78
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	2254      	movs	r2, #84	; 0x54
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f00b fc67 	bl	800e09c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_FDCAN_MspInit+0xbc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d141      	bne.n	800285c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	4618      	mov	r0, r3
 80027ea:	f007 f9b5 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80027f4:	f002 fafe 	bl	8004df4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_FDCAN_MspInit+0xc0>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <HAL_FDCAN_MspInit+0xc0>)
 80027fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_FDCAN_MspInit+0xc0>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_FDCAN_MspInit+0xc0>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_FDCAN_MspInit+0xc0>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_FDCAN_MspInit+0xc0>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002828:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800282c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800283a:	2309      	movs	r3, #9
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002848:	f006 f9e2 	bl	8008c10 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	2015      	movs	r0, #21
 8002852:	f005 f8d5 	bl	8007a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002856:	2015      	movs	r0, #21
 8002858:	f005 f8ec 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800285c:	bf00      	nop
 800285e:	3778      	adds	r7, #120	; 0x78
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40006400 	.word	0x40006400
 8002868:	40021000 	.word	0x40021000

0800286c <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b07      	cmp	r3, #7
 800287a:	d901      	bls.n	8002880 <flash_writer_init+0x14>
 800287c:	2307      	movs	r3, #7
 800287e:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <flash_writer_init+0x38>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	20000000 	.word	0x20000000

080028a8 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock(); //JB
 80028b0:	f006 f8dc 	bl	8008a6c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR /*| FLASH_FLAG_PGPERR */| FLASH_FLAG_PGSERR);
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <flash_writer_open+0x20>)
 80028b6:	22b1      	movs	r2, #177	; 0xb1
 80028b8:	611a      	str	r2, [r3, #16]
    //FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3); //JB
    fw->ready = true;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40022000 	.word	0x40022000

080028cc <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 80028cc:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	1d3c      	adds	r4, r7, #4
 80028d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028da:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, fw.base + 4 * index, un.b); //JB
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	18d1      	adds	r1, r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	4698      	mov	r8, r3
 80028ee:	4691      	mov	r9, r2
 80028f0:	4642      	mov	r2, r8
 80028f2:	464b      	mov	r3, r9
 80028f4:	2001      	movs	r0, #1
 80028f6:	f006 f863 	bl	80089c0 <HAL_FLASH_Program>
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002904 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, fw.base + 4 * index, x); //JB
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002904:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002908:	b089      	sub	sp, #36	; 0x24
 800290a:	af00      	add	r7, sp, #0
 800290c:	f107 040c 	add.w	r4, r7, #12
 8002910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, fw.base + 4 * index, un.b); //JB
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	18d1      	adds	r1, r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	2200      	movs	r2, #0
 800292a:	4698      	mov	r8, r3
 800292c:	4691      	mov	r9, r2
 800292e:	4642      	mov	r2, r8
 8002930:	464b      	mov	r3, r9
 8002932:	2001      	movs	r0, #1
 8002934:	f006 f844 	bl	80089c0 <HAL_FLASH_Program>
}
 8002938:	bf00      	nop
 800293a:	3724      	adds	r7, #36	; 0x24
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002942 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
    //FLASH_Lock(); //JB
    fw->ready = false;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 800295c:	b490      	push	{r4, r7}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	1d3c      	adds	r4, r7, #4
 8002964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002968:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <flash_read_int+0x28>)
 800296e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	681b      	ldr	r3, [r3, #0]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bc90      	pop	{r4, r7}
 8002982:	4770      	bx	lr
 8002984:	20000000 	.word	0x20000000

08002988 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 8002988:	b490      	push	{r4, r7}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	1d3c      	adds	r4, r7, #4
 8002990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002994:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <flash_read_float+0x30>)
 800299a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	ee07 3a90 	vmov	s15, r3
}
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc90      	pop	{r4, r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000

080029bc <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80029dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e4:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80029ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f6:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <set_dtc+0x140>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d136      	bne.n	8002a82 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002a14:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <set_dtc+0x144>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <set_dtc+0x144>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a32:	ee17 2a90 	vmov	r2, s15
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002a38:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <set_dtc+0x144>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <set_dtc+0x144>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a56:	ee17 2a90 	vmov	r2, s15
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <set_dtc+0x144>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <set_dtc+0x144>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a7a:	ee17 2a90 	vmov	r2, s15
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 8002a80:	e035      	b.n	8002aee <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <set_dtc+0x144>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <set_dtc+0x144>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa0:	ee17 2a90 	vmov	r2, s15
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <set_dtc+0x144>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <set_dtc+0x144>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac4:	ee17 2a90 	vmov	r2, s15
 8002ac8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <set_dtc+0x144>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <set_dtc+0x144>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae8:	ee17 2a90 	vmov	r2, s15
 8002aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000758 	.word	0x20000758
 8002b00:	200097fc 	.word	0x200097fc

08002b04 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <analog_sample+0xec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10e      	bne.n	8002b32 <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002b14:	4837      	ldr	r0, [pc, #220]	; (8002bf4 <analog_sample+0xf0>)
 8002b16:	f004 f8dd 	bl	8006cd4 <HAL_ADC_GetValue>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002b22:	4835      	ldr	r0, [pc, #212]	; (8002bf8 <analog_sample+0xf4>)
 8002b24:	f004 f8d6 	bl	8006cd4 <HAL_ADC_GetValue>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e00d      	b.n	8002b4e <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002b32:	4831      	ldr	r0, [pc, #196]	; (8002bf8 <analog_sample+0xf4>)
 8002b34:	f004 f8ce 	bl	8006cd4 <HAL_ADC_GetValue>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002b40:	482c      	ldr	r0, [pc, #176]	; (8002bf4 <analog_sample+0xf0>)
 8002b42:	f004 f8c7 	bl	8006cd4 <HAL_ADC_GetValue>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002b4e:	4829      	ldr	r0, [pc, #164]	; (8002bf4 <analog_sample+0xf0>)
 8002b50:	f003 fed6 	bl	8006900 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	4826      	ldr	r0, [pc, #152]	; (8002bf4 <analog_sample+0xf0>)
 8002b5a:	f003 ffb5 	bl	8006ac8 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002b5e:	4827      	ldr	r0, [pc, #156]	; (8002bfc <analog_sample+0xf8>)
 8002b60:	f004 f8b8 	bl	8006cd4 <HAL_ADC_GetValue>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b78:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c00 <analog_sample+0xfc>
 8002b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bd4:	eeb1 7a67 	vneg.f32	s14, s15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000758 	.word	0x20000758
 8002bf4:	2000023c 	.word	0x2000023c
 8002bf8:	200002a8 	.word	0x200002a8
 8002bfc:	20000380 	.word	0x20000380
 8002c00:	3c533318 	.word	0x3c533318

08002c04 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c12:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c16:	60b8      	str	r0, [r7, #8]
 8002c18:	6079      	str	r1, [r7, #4]
 8002c1a:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002c1c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c20:	f002 fa12 	bl	8005048 <cos_lut>
 8002c24:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002c28:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c2c:	f002 f9d2 	bl	8004fd4 <sin_lut>
 8002c30:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002c34:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c38:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c40:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002c56:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c5a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d04 <abc+0x100>
 8002c5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c7e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002d08 <abc+0x104>
 8002c82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c8a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002ca8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002d08 <abc+0x104>
 8002cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cb8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ccc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cd0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002d04 <abc+0x100>
 8002cd4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cdc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ce0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ce4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	edc3 7a00 	vstr	s15, [r3]
    }
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	3f5db3d7 	.word	0x3f5db3d7
 8002d08:	bf5db3d7 	.word	0xbf5db3d7

08002d0c <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	ed87 0a05 	vstr	s0, [r7, #20]
 8002d16:	edc7 0a04 	vstr	s1, [r7, #16]
 8002d1a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002d1e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002d26:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d2a:	f002 f98d 	bl	8005048 <cos_lut>
 8002d2e:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002d32:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d36:	f002 f94d 	bl	8004fd4 <sin_lut>
 8002d3a:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002d3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d42:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d4e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002e20 <dq0+0x114>
 8002d52:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d5a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d76:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002e24 <dq0+0x118>
 8002d7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e28 <dq0+0x11c>
 8002d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dac:	eeb1 7a67 	vneg.f32	s14, s15
 8002db0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dbc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002e24 <dq0+0x118>
 8002dc0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dc8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002dcc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002dd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ddc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002de4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002e20 <dq0+0x114>
 8002de8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dec:	edd7 7a06 	vldr	s15, [r7, #24]
 8002df0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002df4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002df8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e08:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002e28 <dq0+0x11c>
 8002e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	edc3 7a00 	vstr	s15, [r3]

    }
 8002e16:	bf00      	nop
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	3f5db3d7 	.word	0x3f5db3d7
 8002e24:	bf5db3d7 	.word	0xbf5db3d7
 8002e28:	3f2aaaab 	.word	0x3f2aaaab

08002e2c <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	ed2d 8b02 	vpush	{d8}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	ed87 0a07 	vstr	s0, [r7, #28]
 8002e3a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002e3e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002e42:	edc7 1a04 	vstr	s3, [r7, #16]
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002e4c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002e50:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e54:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e58:	f002 f83f 	bl	8004eda <fminf3>
 8002e5c:	eeb0 8a40 	vmov.f32	s16, s0
 8002e60:	ed97 1a04 	vldr	s2, [r7, #16]
 8002e64:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e68:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e6c:	f002 f801 	bl	8004e72 <fmaxf3>
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <svm+0x160>)
 8002e86:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002e88:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e9c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002f90 <svm+0x164>
 8002ea0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ea4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eac:	edd7 7a08 	vldr	s15, [r7, #32]
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002f94 <svm+0x168>
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f001 ffa1 	bl	8004e02 <fast_fmaxf>
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002f98 <svm+0x16c>
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	f001 ffb5 	bl	8004e3a <fast_fminf>
 8002ed0:	eef0 7a40 	vmov.f32	s15, s0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002eda:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ede:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eee:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f90 <svm+0x164>
 8002ef2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ef6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f06:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002f94 <svm+0x168>
 8002f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0e:	f001 ff78 	bl	8004e02 <fast_fmaxf>
 8002f12:	eef0 7a40 	vmov.f32	s15, s0
 8002f16:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002f98 <svm+0x16c>
 8002f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1e:	f001 ff8c 	bl	8004e3a <fast_fminf>
 8002f22:	eef0 7a40 	vmov.f32	s15, s0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002f2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f40:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002f90 <svm+0x164>
 8002f44:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002f94 <svm+0x168>
 8002f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f60:	f001 ff4f 	bl	8004e02 <fast_fmaxf>
 8002f64:	eef0 7a40 	vmov.f32	s15, s0
 8002f68:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002f98 <svm+0x16c>
 8002f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f70:	f001 ff63 	bl	8004e3a <fast_fminf>
 8002f74:	eef0 7a40 	vmov.f32	s15, s0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	ecbd 8b02 	vpop	{d8}
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	3ef0a3d7 	.word	0x3ef0a3d7
 8002f90:	3f933333 	.word	0x3f933333
 8002f94:	00000000 	.word	0x00000000
 8002f98:	3f70a3d7 	.word	0x3f70a3d7

08002f9c <zero_current>:

void zero_current(ControllerStruct *controller){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb0:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fcf6 	bl	80029bc <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e00f      	b.n	8002ff6 <zero_current+0x5a>
    	analog_sample(controller);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fd94 	bl	8002b04 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	dbeb      	blt.n	8002fd6 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	fb92 f2f3 	sdiv	r2, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	fb92 f2f3 	sdiv	r2, r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4b      	ldr	r2, [pc, #300]	; (800315c <init_controller_params+0x138>)
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a49      	ldr	r2, [pc, #292]	; (800315c <init_controller_params+0x138>)
 8003036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <init_controller_params+0x13c>)
 800303c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003040:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003164 <init_controller_params+0x140>
 8003044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 800304e:	4b44      	ldr	r3, [pc, #272]	; (8003160 <init_controller_params+0x13c>)
 8003050:	edd3 7a02 	vldr	s15, [r3, #8]
 8003054:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003164 <init_controller_params+0x140>
 8003058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8003062:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <init_controller_params+0x13c>)
 8003064:	edd3 7a02 	vldr	s15, [r3, #8]
 8003068:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003168 <init_controller_params+0x144>
 800306c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003070:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800316c <init_controller_params+0x148>
 8003074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800307c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800308c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800309c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003170 <init_controller_params+0x14c>
 80030a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <init_controller_params+0x150>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <init_controller_params+0x13c>)
 80030b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ba:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003178 <init_controller_params+0x154>
 80030be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	d803      	bhi.n	80030d0 <init_controller_params+0xac>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a2c      	ldr	r2, [pc, #176]	; (800317c <init_controller_params+0x158>)
 80030cc:	671a      	str	r2, [r3, #112]	; 0x70
 80030ce:	e002      	b.n	80030d6 <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <init_controller_params+0x15c>)
 80030d4:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e037      	b.n	800314c <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003184 <init_controller_params+0x160>
 80030ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ee:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003188 <init_controller_params+0x164>
 80030f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030f6:	ee16 0a90 	vmov	r0, s13
 80030fa:	f7fd fa4d 	bl	8000598 <__aeabi_f2d>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	ec43 2b10 	vmov	d0, r2, r3
 8003106:	f00f fd6f 	bl	8012be8 <exp>
 800310a:	ec51 0b10 	vmov	r0, r1, d0
 800310e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <init_controller_params+0x168>)
 8003114:	f7fd fa98 	bl	8000648 <__aeabi_dmul>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <init_controller_params+0x16c>)
 8003126:	f7fd f8d9 	bl	80002dc <__adddf3>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f7fd fd81 	bl	8000c38 <__aeabi_d2f>
 8003136:	4601      	mov	r1, r0
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	333c      	adds	r3, #60	; 0x3c
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3301      	adds	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b7f      	cmp	r3, #127	; 0x7f
 8003150:	ddc4      	ble.n	80030dc <init_controller_params+0xb8>
    }

    }
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	3d3851ec 	.word	0x3d3851ec
 8003160:	20000658 	.word	0x20000658
 8003164:	38d1b717 	.word	0x38d1b717
 8003168:	37d1b717 	.word	0x37d1b717
 800316c:	40c90fdb 	.word	0x40c90fdb
 8003170:	3dcccccd 	.word	0x3dcccccd
 8003174:	20000758 	.word	0x20000758
 8003178:	42200000 	.word	0x42200000
 800317c:	3ca4ffff 	.word	0x3ca4ffff
 8003180:	3d24ffff 	.word	0x3d24ffff
 8003184:	bc000000 	.word	0xbc000000
 8003188:	3d03126f 	.word	0x3d03126f
 800318c:	3ff33333 	.word	0x3ff33333
 8003190:	3ff00000 	.word	0x3ff00000

08003194 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <reset_foc+0xe4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	4b31      	ldr	r3, [pc, #196]	; (8003278 <reset_foc+0xe4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ba:	ee17 2a90 	vmov	r2, s15
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <reset_foc+0xe4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <reset_foc+0xe4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031de:	ee17 2a90 	vmov	r2, s15
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <reset_foc+0xe4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <reset_foc+0xe4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003202:	ee17 2a90 	vmov	r2, s15
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	200097fc 	.word	0x200097fc

0800327c <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - controller->v_ref);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	ed93 6a38 	vldr	s12, [r3, #224]	; 0xe0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800329c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 80032b4:	eddf 0a29 	vldr	s1, [pc, #164]	; 800335c <field_weaken+0xe0>
 80032b8:	eeb0 0a67 	vmov.f32	s0, s15
 80032bc:	f001 fdbd 	bl	8004e3a <fast_fminf>
 80032c0:	eeb0 7a40 	vmov.f32	s14, s0
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <field_weaken+0xe4>)
 80032c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80032ca:	eef1 7a67 	vneg.f32	s15, s15
 80032ce:	eef0 0a67 	vmov.f32	s1, s15
 80032d2:	eeb0 0a47 	vmov.f32	s0, s14
 80032d6:	f001 fd94 	bl	8004e02 <fast_fmaxf>
 80032da:	eef0 7a40 	vmov.f32	s15, s0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->i_d_des = controller->fw_int;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80032fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800330c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f00f fcce 	bl	8012cb8 <sqrtf>
 800331c:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003326:	edd7 0a03 	vldr	s1, [r7, #12]
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	f001 fd84 	bl	8004e3a <fast_fminf>
 8003332:	eeb0 7a40 	vmov.f32	s14, s0
 8003336:	edd7 7a03 	vldr	s15, [r7, #12]
 800333a:	eef1 7a67 	vneg.f32	s15, s15
 800333e:	eef0 0a67 	vmov.f32	s1, s15
 8003342:	eeb0 0a47 	vmov.f32	s0, s14
 8003346:	f001 fd5c 	bl	8004e02 <fast_fmaxf>
 800334a:	eef0 7a40 	vmov.f32	s15, s0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8


}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00000000 	.word	0x00000000
 8003360:	20000658 	.word	0x20000658

08003364 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003384:	4bd7      	ldr	r3, [pc, #860]	; (80036e4 <commutate+0x380>)
 8003386:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800338a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	edd3 6a03 	vldr	s13, [r3, #12]
 800339a:	4bd2      	ldr	r3, [pc, #840]	; (80036e4 <commutate+0x380>)
 800339c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80033a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	edd3 6a06 	vldr	s13, [r3, #24]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	ed93 6a07 	vldr	s12, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3340      	adds	r3, #64	; 0x40
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	eef0 1a46 	vmov.f32	s3, s12
 80033d4:	eeb0 1a66 	vmov.f32	s2, s13
 80033d8:	eef0 0a47 	vmov.f32	s1, s14
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	f7ff fc94 	bl	8002d0c <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80033ea:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80036e8 <commutate+0x384>
 80033ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80033f8:	eddf 6abc 	vldr	s13, [pc, #752]	; 80036ec <commutate+0x388>
 80033fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003410:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80036e8 <commutate+0x384>
 8003414:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800341e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 80036ec <commutate+0x388>
 8003422:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003436:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80036e8 <commutate+0x384>
 800343a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	edd3 7a08 	vldr	s15, [r3, #32]
 8003444:	eddf 6aa9 	vldr	s13, [pc, #676]	; 80036ec <commutate+0x388>
 8003448:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800345c:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80036f0 <commutate+0x38c>
 8003460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003464:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80036f4 <commutate+0x390>
 8003468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800346c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80036f8 <commutate+0x394>
 8003470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 800347a:	4b9a      	ldr	r3, [pc, #616]	; (80036e4 <commutate+0x380>)
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003496:	eeb0 0a67 	vmov.f32	s0, s15
 800349a:	4610      	mov	r0, r2
 800349c:	f001 fd51 	bl	8004f42 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80034c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c4:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80034da:	edd7 7a07 	vldr	s15, [r7, #28]
 80034de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80034e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003506:	eef0 0a47 	vmov.f32	s1, s14
 800350a:	eeb0 0a67 	vmov.f32	s0, s15
 800350e:	f001 fc94 	bl	8004e3a <fast_fminf>
 8003512:	eeb0 7a40 	vmov.f32	s14, s0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800351c:	eef1 7a67 	vneg.f32	s15, s15
 8003520:	eef0 0a67 	vmov.f32	s1, s15
 8003524:	eeb0 0a47 	vmov.f32	s0, s14
 8003528:	f001 fc6b 	bl	8004e02 <fast_fmaxf>
 800352c:	eef0 7a40 	vmov.f32	s15, s0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800354c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800356a:	eef0 0a47 	vmov.f32	s1, s14
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	f001 fc62 	bl	8004e3a <fast_fminf>
 8003576:	eeb0 7a40 	vmov.f32	s14, s0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003580:	eef1 7a67 	vneg.f32	s15, s15
 8003584:	eef0 0a67 	vmov.f32	s1, s15
 8003588:	eeb0 0a47 	vmov.f32	s0, s14
 800358c:	f001 fc39 	bl	8004e02 <fast_fmaxf>
 8003590:	eef0 7a40 	vmov.f32	s15, s0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80035a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80035b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035be:	eeb0 0a67 	vmov.f32	s0, s15
 80035c2:	f00f fb79 	bl	8012cb8 <sqrtf>
 80035c6:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80035d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80035de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003602:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003606:	edd7 7a06 	vldr	s15, [r7, #24]
 800360a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003624:	eef0 0a47 	vmov.f32	s1, s14
 8003628:	eeb0 0a67 	vmov.f32	s0, s15
 800362c:	f001 fc05 	bl	8004e3a <fast_fminf>
 8003630:	eeb0 7a40 	vmov.f32	s14, s0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800363a:	eef1 7a67 	vneg.f32	s15, s15
 800363e:	eef0 0a67 	vmov.f32	s1, s15
 8003642:	eeb0 0a47 	vmov.f32	s0, s14
 8003646:	f001 fbdc 	bl	8004e02 <fast_fmaxf>
 800364a:	eef0 7a40 	vmov.f32	s15, s0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003678:	eeb0 0a67 	vmov.f32	s0, s15
 800367c:	f00f fb1c 	bl	8012cb8 <sqrtf>
 8003680:	eef0 7a40 	vmov.f32	s15, s0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003690:	edd7 0a03 	vldr	s1, [r7, #12]
 8003694:	eeb0 0a67 	vmov.f32	s0, s15
 8003698:	f001 fbcf 	bl	8004e3a <fast_fminf>
 800369c:	eeb0 7a40 	vmov.f32	s14, s0
 80036a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a4:	eef1 7a67 	vneg.f32	s15, s15
 80036a8:	eef0 0a67 	vmov.f32	s1, s15
 80036ac:	eeb0 0a47 	vmov.f32	s0, s14
 80036b0:	f001 fba7 	bl	8004e02 <fast_fmaxf>
 80036b4:	eef0 7a40 	vmov.f32	s15, s0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80036d0:	eeb0 0a67 	vmov.f32	s0, s15
 80036d4:	4610      	mov	r0, r2
 80036d6:	f001 fc34 	bl	8004f42 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	e00d      	b.n	8003700 <commutate+0x39c>
 80036e4:	20000658 	.word	0x20000658
 80036e8:	3f666666 	.word	0x3f666666
 80036ec:	3dcccccd 	.word	0x3dcccccd
 80036f0:	3f933333 	.word	0x3f933333
 80036f4:	3f70a3d7 	.word	0x3f70a3d7
 80036f8:	3f13cd3a 	.word	0x3f13cd3a
 80036fc:	381d4951 	.word	0x381d4951
 8003700:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003704:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80036fc <commutate+0x398>
 8003708:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800370c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	336c      	adds	r3, #108	; 0x6c
 800372c:	461a      	mov	r2, r3
 800372e:	eeb0 1a66 	vmov.f32	s2, s13
 8003732:	eef0 0a47 	vmov.f32	s1, s14
 8003736:	eeb0 0a67 	vmov.f32	s0, s15
 800373a:	f7ff fa63 	bl	8002c04 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3360      	adds	r3, #96	; 0x60
 8003766:	461a      	mov	r2, r3
 8003768:	eef0 1a46 	vmov.f32	s3, s12
 800376c:	eeb0 1a66 	vmov.f32	s2, s13
 8003770:	eef0 0a47 	vmov.f32	s1, s14
 8003774:	eeb0 0a67 	vmov.f32	s0, s15
 8003778:	f7ff fb58 	bl	8002e2c <svm>

       set_dtc(controller);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff f91d 	bl	80029bc <set_dtc>

    }
 8003782:	bf00      	nop
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop

0800378c <torque_control>:


void torque_control(ControllerStruct *controller){
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80037a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80037b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80037ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80037ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <torque_control+0xb0>)
 80037dc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <torque_control+0xb0>)
 80037e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80037ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80037f8:	eef0 0a67 	vmov.f32	s1, s15
 80037fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003800:	f001 fb1b 	bl	8004e3a <fast_fminf>
 8003804:	eeb0 7a40 	vmov.f32	s14, s0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800380e:	eef1 7a67 	vneg.f32	s15, s15
 8003812:	eef0 0a67 	vmov.f32	s1, s15
 8003816:	eeb0 0a47 	vmov.f32	s0, s14
 800381a:	f001 faf2 	bl	8004e02 <fast_fmaxf>
 800381e:	eef0 7a40 	vmov.f32	s15, s0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000658 	.word	0x20000658

08003840 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b085      	sub	sp, #20
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	785a      	ldrb	r2, [r3, #1]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d00d      	beq.n	80038c0 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f941 	bl	8003b2c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	78db      	ldrb	r3, [r3, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	785a      	ldrb	r2, [r3, #1]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8d2 	bl	8003a64 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b06      	cmp	r3, #6
 80038c6:	f200 80b8 	bhi.w	8003a3a <run_fsm+0x1aa>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <run_fsm+0x40>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	08003a39 	.word	0x08003a39
 80038d4:	080038ed 	.word	0x080038ed
 80038d8:	080039ed 	.word	0x080039ed
 80038dc:	08003a3b 	.word	0x08003a3b
 80038e0:	08003a39 	.word	0x08003a39
 80038e4:	08003a2f 	.word	0x08003a2f
 80038e8:	08003a39 	.word	0x08003a39
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 80038ec:	4b55      	ldr	r3, [pc, #340]	; (8003a44 <run_fsm+0x1b4>)
 80038ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <run_fsm+0x1b8>)
 80038f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038fc:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <run_fsm+0x1b4>)
 80038fe:	4952      	ldr	r1, [pc, #328]	; (8003a48 <run_fsm+0x1b8>)
 8003900:	4852      	ldr	r0, [pc, #328]	; (8003a4c <run_fsm+0x1bc>)
 8003902:	f7fe f80f 	bl	8001924 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003906:	e098      	b.n	8003a3a <run_fsm+0x1aa>
			 else if(!comm_encoder_cal.done_cal){
 8003908:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <run_fsm+0x1b4>)
 800390a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003912:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <run_fsm+0x1b8>)
 8003914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003918:	4a4a      	ldr	r2, [pc, #296]	; (8003a44 <run_fsm+0x1b4>)
 800391a:	494b      	ldr	r1, [pc, #300]	; (8003a48 <run_fsm+0x1b8>)
 800391c:	484b      	ldr	r0, [pc, #300]	; (8003a4c <run_fsm+0x1bc>)
 800391e:	f7fe f909 	bl	8001b34 <calibrate_encoder>
			 break;
 8003922:	e08a      	b.n	8003a3a <run_fsm+0x1aa>
				 E_ZERO = comm_encoder_cal.ezero;
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <run_fsm+0x1b4>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4a49      	ldr	r2, [pc, #292]	; (8003a50 <run_fsm+0x1c0>)
 800392a:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800392c:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <run_fsm+0x1c0>)
 800392e:	695c      	ldr	r4, [r3, #20]
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <run_fsm+0x1bc>)
 8003932:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <run_fsm+0x1c0>)
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	425b      	negs	r3, r3
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003948:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003a54 <run_fsm+0x1c4>
 800394c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003950:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003954:	eeb0 0a47 	vmov.f32	s0, s14
 8003958:	f00f f98e 	bl	8012c78 <fmodf>
 800395c:	eef0 7a40 	vmov.f32	s15, s0
 8003960:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003a58 <run_fsm+0x1c8>
 8003964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003968:	ee17 0a90 	vmov	r0, s15
 800396c:	f7fc fe14 	bl	8000598 <__aeabi_f2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4621      	mov	r1, r4
 8003976:	4839      	ldr	r0, [pc, #228]	; (8003a5c <run_fsm+0x1cc>)
 8003978:	f00b fa12 	bl	800eda0 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <run_fsm+0x1bc>)
 800397e:	4a31      	ldr	r2, [pc, #196]	; (8003a44 <run_fsm+0x1b4>)
 8003980:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003984:	33dc      	adds	r3, #220	; 0xdc
 8003986:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 800398a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398e:	4618      	mov	r0, r3
 8003990:	f00a fb76 	bl	800e080 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <run_fsm+0x1c0>)
 8003996:	4a2b      	ldr	r2, [pc, #172]	; (8003a44 <run_fsm+0x1b4>)
 8003998:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800399c:	3318      	adds	r3, #24
 800399e:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80039a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a6:	4618      	mov	r0, r3
 80039a8:	f00a fb6a 	bl	800e080 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80039ac:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <run_fsm+0x1d0>)
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	9200      	str	r2, [sp, #0]
 80039b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039b4:	f001 fd70 	bl	8005498 <preference_writer_ready>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <run_fsm+0x13a>
 80039c4:	4826      	ldr	r0, [pc, #152]	; (8003a60 <run_fsm+0x1d0>)
 80039c6:	f001 fd58 	bl	800547a <preference_writer_open>
				 preference_writer_flush(&prefs);
 80039ca:	4825      	ldr	r0, [pc, #148]	; (8003a60 <run_fsm+0x1d0>)
 80039cc:	f001 fd72 	bl	80054b4 <preference_writer_flush>
				 preference_writer_close(&prefs);
 80039d0:	4823      	ldr	r0, [pc, #140]	; (8003a60 <run_fsm+0x1d0>)
 80039d2:	f001 fded 	bl	80055b0 <preference_writer_close>
				 preference_writer_load(prefs);
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <run_fsm+0x1d0>)
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	9200      	str	r2, [sp, #0]
 80039dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039de:	f001 fda5 	bl	800552c <preference_writer_load>
				 update_fsm(fsmstate, 27);
 80039e2:	211b      	movs	r1, #27
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8f9 	bl	8003bdc <update_fsm>
			 break;
 80039ea:	e026      	b.n	8003a3a <run_fsm+0x1aa>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <run_fsm+0x1c0>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dd0a      	ble.n	8003a0a <run_fsm+0x17a>
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <run_fsm+0x1b8>)
 80039f6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <run_fsm+0x1c0>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	dd03      	ble.n	8003a0a <run_fsm+0x17a>
				 zero_commands(&controller);
 8003a02:	4811      	ldr	r0, [pc, #68]	; (8003a48 <run_fsm+0x1b8>)
 8003a04:	f7ff ff1c 	bl	8003840 <zero_commands>
 8003a08:	e009      	b.n	8003a1e <run_fsm+0x18e>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003a0a:	480f      	ldr	r0, [pc, #60]	; (8003a48 <run_fsm+0x1b8>)
 8003a0c:	f7ff febe 	bl	800378c <torque_control>
				 field_weaken(&controller);
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <run_fsm+0x1b8>)
 8003a12:	f7ff fc33 	bl	800327c <field_weaken>
				 commutate(&controller, &comm_encoder);
 8003a16:	490d      	ldr	r1, [pc, #52]	; (8003a4c <run_fsm+0x1bc>)
 8003a18:	480b      	ldr	r0, [pc, #44]	; (8003a48 <run_fsm+0x1b8>)
 8003a1a:	f7ff fca3 	bl	8003364 <commutate>
			 }
			 controller.timeout ++;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <run_fsm+0x1b8>)
 8003a20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <run_fsm+0x1b8>)
 8003a28:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 8003a2c:	e005      	b.n	8003a3a <run_fsm+0x1aa>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003a2e:	2164      	movs	r1, #100	; 0x64
 8003a30:	4806      	ldr	r0, [pc, #24]	; (8003a4c <run_fsm+0x1bc>)
 8003a32:	f001 fccb 	bl	80053cc <ps_print>
			 break;
 8003a36:	e000      	b.n	8003a3a <run_fsm+0x1aa>
			 break;
 8003a38:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd90      	pop	{r4, r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000115c 	.word	0x2000115c
 8003a48:	20000b6c 	.word	0x20000b6c
 8003a4c:	20000e74 	.word	0x20000e74
 8003a50:	20000758 	.word	0x20000758
 8003a54:	47800000 	.word	0x47800000
 8003a58:	40c90fdb 	.word	0x40c90fdb
 8003a5c:	08013348 	.word	0x08013348
 8003a60:	20000b58 	.word	0x20000b58

08003a64 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d84b      	bhi.n	8003b0c <fsm_enter_state+0xa8>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <fsm_enter_state+0x18>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a95 	.word	0x08003a95
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003aa1 	.word	0x08003aa1
 8003a88:	08003b0d 	.word	0x08003b0d
 8003a8c:	08003a9b 	.word	0x08003a9b
 8003a90:	08003b0b 	.word	0x08003b0b
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003a94:	f000 f978 	bl	8003d88 <enter_menu_state>
				break;
 8003a98:	e038      	b.n	8003b0c <fsm_enter_state+0xa8>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003a9a:	f000 f9a1 	bl	8003de0 <enter_setup_state>
				break;
 8003a9e:	e035      	b.n	8003b0c <fsm_enter_state+0xa8>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	481b      	ldr	r0, [pc, #108]	; (8003b14 <fsm_enter_state+0xb0>)
 8003aa6:	f005 fa35 	bl	8008f14 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003aaa:	481b      	ldr	r0, [pc, #108]	; (8003b18 <fsm_enter_state+0xb4>)
 8003aac:	f7ff fb72 	bl	8003194 <reset_foc>
				drv_enable_gd(drv);
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <fsm_enter_state+0xb8>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	889a      	ldrh	r2, [r3, #4]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f362 030f 	bfi	r3, r2, #0, #16
 8003abe:	4608      	mov	r0, r1
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f7fe fd02 	bl	80024ca <drv_enable_gd>
				break;
 8003ac6:	e021      	b.n	8003b0c <fsm_enter_state+0xa8>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <fsm_enter_state+0xbc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <fsm_enter_state+0xbc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <fsm_enter_state+0xbc>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <fsm_enter_state+0xc0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aea:	2100      	movs	r1, #0
 8003aec:	480e      	ldr	r0, [pc, #56]	; (8003b28 <fsm_enter_state+0xc4>)
 8003aee:	f00a fad5 	bl	800e09c <memset>
				drv_enable_gd(drv);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <fsm_enter_state+0xb8>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4611      	mov	r1, r2
 8003af8:	889a      	ldrh	r2, [r3, #4]
 8003afa:	2300      	movs	r3, #0
 8003afc:	f362 030f 	bfi	r3, r2, #0, #16
 8003b00:	4608      	mov	r0, r1
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7fe fce1 	bl	80024ca <drv_enable_gd>
				break;
 8003b08:	e000      	b.n	8003b0c <fsm_enter_state+0xa8>
				break;
 8003b0a:	bf00      	nop

		}
 }
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	48000800 	.word	0x48000800
 8003b18:	20000b6c 	.word	0x20000b6c
 8003b1c:	20001154 	.word	0x20001154
 8003b20:	2000115c 	.word	0x2000115c
 8003b24:	20000e74 	.word	0x20000e74
 8003b28:	20000f50 	.word	0x20000f50

08003b2c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d844      	bhi.n	8003bc6 <fsm_exit_state+0x9a>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <fsm_exit_state+0x18>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b5d 	.word	0x08003b5d
 8003b48:	08003ba9 	.word	0x08003ba9
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003bc7 	.word	0x08003bc7
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b6d 	.word	0x08003b6d
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	70da      	strb	r2, [r3, #3]
				break;
 8003b62:	e030      	b.n	8003bc6 <fsm_exit_state+0x9a>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	70da      	strb	r2, [r3, #3]
				break;
 8003b6a:	e02c      	b.n	8003bc6 <fsm_exit_state+0x9a>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	70da      	strb	r2, [r3, #3]
				break;
 8003b72:	e028      	b.n	8003bc6 <fsm_exit_state+0x9a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <fsm_exit_state+0xa4>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	889a      	ldrh	r2, [r3, #4]
 8003b82:	2300      	movs	r3, #0
 8003b84:	f362 030f 	bfi	r3, r2, #0, #16
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7fe fcb7 	bl	80024fe <drv_disable_gd>
					reset_foc(&controller);
 8003b90:	4810      	ldr	r0, [pc, #64]	; (8003bd4 <fsm_exit_state+0xa8>)
 8003b92:	f7ff faff 	bl	8003194 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003b96:	2200      	movs	r2, #0
 8003b98:	2120      	movs	r1, #32
 8003b9a:	480f      	ldr	r0, [pc, #60]	; (8003bd8 <fsm_exit_state+0xac>)
 8003b9c:	f005 f9ba 	bl	8008f14 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003ba0:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <fsm_exit_state+0xa8>)
 8003ba2:	f7ff fe4d 	bl	8003840 <zero_commands>
				break;
 8003ba6:	e00e      	b.n	8003bc6 <fsm_exit_state+0x9a>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <fsm_exit_state+0xa4>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4611      	mov	r1, r2
 8003bae:	889a      	ldrh	r2, [r3, #4]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f362 030f 	bfi	r3, r2, #0, #16
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f7fe fca0 	bl	80024fe <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	70da      	strb	r2, [r3, #3]
				break;
 8003bc4:	bf00      	nop
		}

 }
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20001154 	.word	0x20001154
 8003bd4:	20000b6c 	.word	0x20000b6c
 8003bd8:	48000800 	.word	0x48000800

08003bdc <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2b1b      	cmp	r3, #27
 8003bec:	d106      	bne.n	8003bfc <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	70da      	strb	r2, [r3, #3]
		return;
 8003bfa:	e0b7      	b.n	8003d6c <update_fsm+0x190>
	}
	switch(fsmstate->state){
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	f200 80b3 	bhi.w	8003d6c <update_fsm+0x190>
 8003c06:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <update_fsm+0x30>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c25 	.word	0x08003c25
 8003c10:	08003d6d 	.word	0x08003d6d
 8003c14:	08003d6d 	.word	0x08003d6d
 8003c18:	08003d6d 	.word	0x08003d6d
 8003c1c:	08003d31 	.word	0x08003d31
 8003c20:	08003d6d 	.word	0x08003d6d
		case MENU_MODE:
			switch (fsm_input){
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	3b63      	subs	r3, #99	; 0x63
 8003c28:	2b17      	cmp	r3, #23
 8003c2a:	f200 809e 	bhi.w	8003d6a <update_fsm+0x18e>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <update_fsm+0x58>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c95 	.word	0x08003c95
 8003c38:	08003d6b 	.word	0x08003d6b
 8003c3c:	08003cb1 	.word	0x08003cb1
 8003c40:	08003d6b 	.word	0x08003d6b
 8003c44:	08003d6b 	.word	0x08003d6b
 8003c48:	08003d6b 	.word	0x08003d6b
 8003c4c:	08003d6b 	.word	0x08003d6b
 8003c50:	08003d6b 	.word	0x08003d6b
 8003c54:	08003d6b 	.word	0x08003d6b
 8003c58:	08003d6b 	.word	0x08003d6b
 8003c5c:	08003ca3 	.word	0x08003ca3
 8003c60:	08003d6b 	.word	0x08003d6b
 8003c64:	08003d6b 	.word	0x08003d6b
 8003c68:	08003d6b 	.word	0x08003d6b
 8003c6c:	08003d6b 	.word	0x08003d6b
 8003c70:	08003d6b 	.word	0x08003d6b
 8003c74:	08003cbf 	.word	0x08003cbf
 8003c78:	08003d6b 	.word	0x08003d6b
 8003c7c:	08003d6b 	.word	0x08003d6b
 8003c80:	08003d6b 	.word	0x08003d6b
 8003c84:	08003d6b 	.word	0x08003d6b
 8003c88:	08003d6b 	.word	0x08003d6b
 8003c8c:	08003d6b 	.word	0x08003d6b
 8003c90:	08003ccd 	.word	0x08003ccd
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	70da      	strb	r2, [r3, #3]
					break;
 8003ca0:	e045      	b.n	8003d2e <update_fsm+0x152>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	70da      	strb	r2, [r3, #3]
					break;
 8003cae:	e03e      	b.n	8003d2e <update_fsm+0x152>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	70da      	strb	r2, [r3, #3]
					break;
 8003cbc:	e037      	b.n	8003d2e <update_fsm+0x152>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	70da      	strb	r2, [r3, #3]
					break;
 8003cca:	e030      	b.n	8003d2e <update_fsm+0x152>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <update_fsm+0x198>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003cd4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003d78 <update_fsm+0x19c>
 8003cd8:	4826      	ldr	r0, [pc, #152]	; (8003d74 <update_fsm+0x198>)
 8003cda:	f001 fa05 	bl	80050e8 <ps_sample>
					int zero_count = comm_encoder.count;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <update_fsm+0x198>)
 8003ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce2:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <update_fsm+0x1a0>)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003cea:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <update_fsm+0x1a4>)
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	9200      	str	r2, [sp, #0]
 8003cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cf2:	f001 fbd1 	bl	8005498 <preference_writer_ready>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f083 0301 	eor.w	r3, r3, #1
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <update_fsm+0x12c>
 8003d02:	481f      	ldr	r0, [pc, #124]	; (8003d80 <update_fsm+0x1a4>)
 8003d04:	f001 fbb9 	bl	800547a <preference_writer_open>
					preference_writer_flush(&prefs);
 8003d08:	481d      	ldr	r0, [pc, #116]	; (8003d80 <update_fsm+0x1a4>)
 8003d0a:	f001 fbd3 	bl	80054b4 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003d0e:	481c      	ldr	r0, [pc, #112]	; (8003d80 <update_fsm+0x1a4>)
 8003d10:	f001 fc4e 	bl	80055b0 <preference_writer_close>
					preference_writer_load(prefs);
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <update_fsm+0x1a4>)
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	9200      	str	r2, [sp, #0]
 8003d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d1c:	f001 fc06 	bl	800552c <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003d20:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <update_fsm+0x1a0>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4619      	mov	r1, r3
 8003d26:	4817      	ldr	r0, [pc, #92]	; (8003d84 <update_fsm+0x1a8>)
 8003d28:	f00b f83a 	bl	800eda0 <iprintf>
					break;
 8003d2c:	bf00      	nop
				}
			break;
 8003d2e:	e01c      	b.n	8003d6a <update_fsm+0x18e>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	2b0d      	cmp	r3, #13
 8003d34:	d103      	bne.n	8003d3e <update_fsm+0x162>
				process_user_input(fsmstate);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9c8 	bl	80040cc <process_user_input>
				break;
 8003d3c:	e016      	b.n	8003d6c <update_fsm+0x190>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7b1b      	ldrb	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <update_fsm+0x172>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	735a      	strb	r2, [r3, #13]
 8003d4c:	e006      	b.n	8003d5c <update_fsm+0x180>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7b1b      	ldrb	r3, [r3, #12]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	7b1b      	ldrb	r3, [r3, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003d68:	e000      	b.n	8003d6c <update_fsm+0x190>
			break;
 8003d6a:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000e74 	.word	0x20000e74
 8003d78:	37d1b717 	.word	0x37d1b717
 8003d7c:	20000758 	.word	0x20000758
 8003d80:	20000b58 	.word	0x20000b58
 8003d84:	0801335c 	.word	0x0801335c

08003d88 <enter_menu_state>:


 void enter_menu_state(void){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003d8c:	480c      	ldr	r0, [pc, #48]	; (8003dc0 <enter_menu_state+0x38>)
 8003d8e:	f00b f807 	bl	800eda0 <iprintf>
	    printf(" Commands:\n\r");
 8003d92:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <enter_menu_state+0x3c>)
 8003d94:	f00b f804 	bl	800eda0 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003d98:	480b      	ldr	r0, [pc, #44]	; (8003dc8 <enter_menu_state+0x40>)
 8003d9a:	f00b f801 	bl	800eda0 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003d9e:	480b      	ldr	r0, [pc, #44]	; (8003dcc <enter_menu_state+0x44>)
 8003da0:	f00a fffe 	bl	800eda0 <iprintf>
	    printf(" s - Setup\n\r");
 8003da4:	480a      	ldr	r0, [pc, #40]	; (8003dd0 <enter_menu_state+0x48>)
 8003da6:	f00a fffb 	bl	800eda0 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003daa:	480a      	ldr	r0, [pc, #40]	; (8003dd4 <enter_menu_state+0x4c>)
 8003dac:	f00a fff8 	bl	800eda0 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <enter_menu_state+0x50>)
 8003db2:	f00a fff5 	bl	800eda0 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003db6:	4809      	ldr	r0, [pc, #36]	; (8003ddc <enter_menu_state+0x54>)
 8003db8:	f00a fff2 	bl	800eda0 <iprintf>

	    //gpio.led->write(0);
 }
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08013384 	.word	0x08013384
 8003dc4:	0801338c 	.word	0x0801338c
 8003dc8:	0801339c 	.word	0x0801339c
 8003dcc:	080133b0 	.word	0x080133b0
 8003dd0:	080133cc 	.word	0x080133cc
 8003dd4:	080133dc 	.word	0x080133dc
 8003dd8:	080133f4 	.word	0x080133f4
 8003ddc:	08013410 	.word	0x08013410

08003de0 <enter_setup_state>:

 void enter_setup_state(void){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003de6:	487d      	ldr	r0, [pc, #500]	; (8003fdc <enter_setup_state+0x1fc>)
 8003de8:	f00a ffda 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003dec:	4b7c      	ldr	r3, [pc, #496]	; (8003fe0 <enter_setup_state+0x200>)
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <enter_setup_state+0x204>)
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <enter_setup_state+0x208>)
 8003df6:	4a7d      	ldr	r2, [pc, #500]	; (8003fec <enter_setup_state+0x20c>)
 8003df8:	497d      	ldr	r1, [pc, #500]	; (8003ff0 <enter_setup_state+0x210>)
 8003dfa:	487e      	ldr	r0, [pc, #504]	; (8003ff4 <enter_setup_state+0x214>)
 8003dfc:	f00a ffd0 	bl	800eda0 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003e00:	487d      	ldr	r0, [pc, #500]	; (8003ff8 <enter_setup_state+0x218>)
 8003e02:	f00b f853 	bl	800eeac <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003e06:	4b7d      	ldr	r3, [pc, #500]	; (8003ffc <enter_setup_state+0x21c>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc fbc4 	bl	8000598 <__aeabi_f2d>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <enter_setup_state+0x220>)
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	4b79      	ldr	r3, [pc, #484]	; (8004004 <enter_setup_state+0x224>)
 8003e1e:	4a7a      	ldr	r2, [pc, #488]	; (8004008 <enter_setup_state+0x228>)
 8003e20:	497a      	ldr	r1, [pc, #488]	; (800400c <enter_setup_state+0x22c>)
 8003e22:	487b      	ldr	r0, [pc, #492]	; (8004010 <enter_setup_state+0x230>)
 8003e24:	f00a ffbc 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003e28:	4b74      	ldr	r3, [pc, #464]	; (8003ffc <enter_setup_state+0x21c>)
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fbb3 	bl	8000598 <__aeabi_f2d>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e3a:	4b71      	ldr	r3, [pc, #452]	; (8004000 <enter_setup_state+0x220>)
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	4b71      	ldr	r3, [pc, #452]	; (8004004 <enter_setup_state+0x224>)
 8003e40:	4a74      	ldr	r2, [pc, #464]	; (8004014 <enter_setup_state+0x234>)
 8003e42:	4975      	ldr	r1, [pc, #468]	; (8004018 <enter_setup_state+0x238>)
 8003e44:	4875      	ldr	r0, [pc, #468]	; (800401c <enter_setup_state+0x23c>)
 8003e46:	f00a ffab 	bl	800eda0 <iprintf>
	    printf("\r\n Control:\r\n");
 8003e4a:	4875      	ldr	r0, [pc, #468]	; (8004020 <enter_setup_state+0x240>)
 8003e4c:	f00b f82e 	bl	800eeac <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003e50:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <enter_setup_state+0x21c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb9f 	bl	8000598 <__aeabi_f2d>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e62:	4b70      	ldr	r3, [pc, #448]	; (8004024 <enter_setup_state+0x244>)
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4b70      	ldr	r3, [pc, #448]	; (8004028 <enter_setup_state+0x248>)
 8003e68:	4a70      	ldr	r2, [pc, #448]	; (800402c <enter_setup_state+0x24c>)
 8003e6a:	4971      	ldr	r1, [pc, #452]	; (8004030 <enter_setup_state+0x250>)
 8003e6c:	4871      	ldr	r0, [pc, #452]	; (8004034 <enter_setup_state+0x254>)
 8003e6e:	f00a ff97 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003e72:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <enter_setup_state+0x21c>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fb8e 	bl	8000598 <__aeabi_f2d>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e84:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <enter_setup_state+0x258>)
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	4b6c      	ldr	r3, [pc, #432]	; (800403c <enter_setup_state+0x25c>)
 8003e8a:	4a6d      	ldr	r2, [pc, #436]	; (8004040 <enter_setup_state+0x260>)
 8003e8c:	496d      	ldr	r1, [pc, #436]	; (8004044 <enter_setup_state+0x264>)
 8003e8e:	4869      	ldr	r0, [pc, #420]	; (8004034 <enter_setup_state+0x254>)
 8003e90:	f00a ff86 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003e94:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <enter_setup_state+0x21c>)
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc fb7d 	bl	8000598 <__aeabi_f2d>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <enter_setup_state+0x220>)
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4b55      	ldr	r3, [pc, #340]	; (8004000 <enter_setup_state+0x220>)
 8003eac:	4a66      	ldr	r2, [pc, #408]	; (8004048 <enter_setup_state+0x268>)
 8003eae:	4967      	ldr	r1, [pc, #412]	; (800404c <enter_setup_state+0x26c>)
 8003eb0:	4860      	ldr	r0, [pc, #384]	; (8004034 <enter_setup_state+0x254>)
 8003eb2:	f00a ff75 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <enter_setup_state+0x21c>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fb6c 	bl	8000598 <__aeabi_f2d>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ec8:	4b4d      	ldr	r3, [pc, #308]	; (8004000 <enter_setup_state+0x220>)
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <enter_setup_state+0x220>)
 8003ece:	4a60      	ldr	r2, [pc, #384]	; (8004050 <enter_setup_state+0x270>)
 8003ed0:	4960      	ldr	r1, [pc, #384]	; (8004054 <enter_setup_state+0x274>)
 8003ed2:	4858      	ldr	r0, [pc, #352]	; (8004034 <enter_setup_state+0x254>)
 8003ed4:	f00a ff64 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003ed8:	4b48      	ldr	r3, [pc, #288]	; (8003ffc <enter_setup_state+0x21c>)
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fb5b 	bl	8000598 <__aeabi_f2d>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eea:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <enter_setup_state+0x278>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	4b53      	ldr	r3, [pc, #332]	; (800403c <enter_setup_state+0x25c>)
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	; (800405c <enter_setup_state+0x27c>)
 8003ef2:	495b      	ldr	r1, [pc, #364]	; (8004060 <enter_setup_state+0x280>)
 8003ef4:	484f      	ldr	r0, [pc, #316]	; (8004034 <enter_setup_state+0x254>)
 8003ef6:	f00a ff53 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003efa:	4b40      	ldr	r3, [pc, #256]	; (8003ffc <enter_setup_state+0x21c>)
 8003efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc fb4a 	bl	8000598 <__aeabi_f2d>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f0c:	4b55      	ldr	r3, [pc, #340]	; (8004064 <enter_setup_state+0x284>)
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	4b4a      	ldr	r3, [pc, #296]	; (800403c <enter_setup_state+0x25c>)
 8003f12:	4a55      	ldr	r2, [pc, #340]	; (8004068 <enter_setup_state+0x288>)
 8003f14:	4955      	ldr	r1, [pc, #340]	; (800406c <enter_setup_state+0x28c>)
 8003f16:	4847      	ldr	r0, [pc, #284]	; (8004034 <enter_setup_state+0x254>)
 8003f18:	f00a ff42 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <enter_setup_state+0x21c>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb39 	bl	8000598 <__aeabi_f2d>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f2e:	4b50      	ldr	r3, [pc, #320]	; (8004070 <enter_setup_state+0x290>)
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	4b42      	ldr	r3, [pc, #264]	; (800403c <enter_setup_state+0x25c>)
 8003f34:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <enter_setup_state+0x294>)
 8003f36:	4950      	ldr	r1, [pc, #320]	; (8004078 <enter_setup_state+0x298>)
 8003f38:	483e      	ldr	r0, [pc, #248]	; (8004034 <enter_setup_state+0x254>)
 8003f3a:	f00a ff31 	bl	800eda0 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <enter_setup_state+0x21c>)
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fb28 	bl	8000598 <__aeabi_f2d>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f50:	4b4a      	ldr	r3, [pc, #296]	; (800407c <enter_setup_state+0x29c>)
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	4b39      	ldr	r3, [pc, #228]	; (800403c <enter_setup_state+0x25c>)
 8003f56:	4a4a      	ldr	r2, [pc, #296]	; (8004080 <enter_setup_state+0x2a0>)
 8003f58:	494a      	ldr	r1, [pc, #296]	; (8004084 <enter_setup_state+0x2a4>)
 8003f5a:	4836      	ldr	r0, [pc, #216]	; (8004034 <enter_setup_state+0x254>)
 8003f5c:	f00a ff20 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <enter_setup_state+0x21c>)
 8003f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc fb17 	bl	8000598 <__aeabi_f2d>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f72:	4b45      	ldr	r3, [pc, #276]	; (8004088 <enter_setup_state+0x2a8>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <enter_setup_state+0x25c>)
 8003f78:	4a44      	ldr	r2, [pc, #272]	; (800408c <enter_setup_state+0x2ac>)
 8003f7a:	4945      	ldr	r1, [pc, #276]	; (8004090 <enter_setup_state+0x2b0>)
 8003f7c:	482d      	ldr	r0, [pc, #180]	; (8004034 <enter_setup_state+0x254>)
 8003f7e:	f00a ff0f 	bl	800eda0 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003f82:	4844      	ldr	r0, [pc, #272]	; (8004094 <enter_setup_state+0x2b4>)
 8003f84:	f00a ff92 	bl	800eeac <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003f88:	4b43      	ldr	r3, [pc, #268]	; (8004098 <enter_setup_state+0x2b8>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <enter_setup_state+0x2bc>)
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <enter_setup_state+0x224>)
 8003f94:	4a42      	ldr	r2, [pc, #264]	; (80040a0 <enter_setup_state+0x2c0>)
 8003f96:	4943      	ldr	r1, [pc, #268]	; (80040a4 <enter_setup_state+0x2c4>)
 8003f98:	4843      	ldr	r0, [pc, #268]	; (80040a8 <enter_setup_state+0x2c8>)
 8003f9a:	f00a ff01 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <enter_setup_state+0x2b8>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	4b3d      	ldr	r3, [pc, #244]	; (800409c <enter_setup_state+0x2bc>)
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <enter_setup_state+0x224>)
 8003faa:	4a40      	ldr	r2, [pc, #256]	; (80040ac <enter_setup_state+0x2cc>)
 8003fac:	4940      	ldr	r1, [pc, #256]	; (80040b0 <enter_setup_state+0x2d0>)
 8003fae:	483e      	ldr	r0, [pc, #248]	; (80040a8 <enter_setup_state+0x2c8>)
 8003fb0:	f00a fef6 	bl	800eda0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003fb4:	4b38      	ldr	r3, [pc, #224]	; (8004098 <enter_setup_state+0x2b8>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <enter_setup_state+0x2d4>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <enter_setup_state+0x224>)
 8003fc0:	4a3d      	ldr	r2, [pc, #244]	; (80040b8 <enter_setup_state+0x2d8>)
 8003fc2:	493e      	ldr	r1, [pc, #248]	; (80040bc <enter_setup_state+0x2dc>)
 8003fc4:	483e      	ldr	r0, [pc, #248]	; (80040c0 <enter_setup_state+0x2e0>)
 8003fc6:	f00a feeb 	bl	800eda0 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003fca:	483e      	ldr	r0, [pc, #248]	; (80040c4 <enter_setup_state+0x2e4>)
 8003fcc:	f00a fee8 	bl	800eda0 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003fd0:	483d      	ldr	r0, [pc, #244]	; (80040c8 <enter_setup_state+0x2e8>)
 8003fd2:	f00a fee5 	bl	800eda0 <iprintf>
 }
 8003fd6:	bf00      	nop
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08013428 	.word	0x08013428
 8003fe0:	0801347c 	.word	0x0801347c
 8003fe4:	0801348c 	.word	0x0801348c
 8003fe8:	08013444 	.word	0x08013444
 8003fec:	08013448 	.word	0x08013448
 8003ff0:	08013454 	.word	0x08013454
 8003ff4:	0801345c 	.word	0x0801345c
 8003ff8:	08013490 	.word	0x08013490
 8003ffc:	20000658 	.word	0x20000658
 8004000:	080134d0 	.word	0x080134d0
 8004004:	0801349c 	.word	0x0801349c
 8004008:	080134a0 	.word	0x080134a0
 800400c:	080134ac 	.word	0x080134ac
 8004010:	080134b0 	.word	0x080134b0
 8004014:	080134d4 	.word	0x080134d4
 8004018:	080134ec 	.word	0x080134ec
 800401c:	080134f0 	.word	0x080134f0
 8004020:	08013510 	.word	0x08013510
 8004024:	08013560 	.word	0x08013560
 8004028:	08013520 	.word	0x08013520
 800402c:	08013524 	.word	0x08013524
 8004030:	0801353c 	.word	0x0801353c
 8004034:	08013540 	.word	0x08013540
 8004038:	08013584 	.word	0x08013584
 800403c:	08013568 	.word	0x08013568
 8004040:	0801356c 	.word	0x0801356c
 8004044:	08013580 	.word	0x08013580
 8004048:	0801358c 	.word	0x0801358c
 800404c:	080135a8 	.word	0x080135a8
 8004050:	080135ac 	.word	0x080135ac
 8004054:	080135cc 	.word	0x080135cc
 8004058:	080135f0 	.word	0x080135f0
 800405c:	080135d0 	.word	0x080135d0
 8004060:	080135ec 	.word	0x080135ec
 8004064:	0801361c 	.word	0x0801361c
 8004068:	080135f8 	.word	0x080135f8
 800406c:	08013618 	.word	0x08013618
 8004070:	0801363c 	.word	0x0801363c
 8004074:	08013620 	.word	0x08013620
 8004078:	08013638 	.word	0x08013638
 800407c:	08013660 	.word	0x08013660
 8004080:	08013644 	.word	0x08013644
 8004084:	0801365c 	.word	0x0801365c
 8004088:	08013684 	.word	0x08013684
 800408c:	08013668 	.word	0x08013668
 8004090:	08013680 	.word	0x08013680
 8004094:	0801368c 	.word	0x0801368c
 8004098:	20000758 	.word	0x20000758
 800409c:	080136c4 	.word	0x080136c4
 80040a0:	08013698 	.word	0x08013698
 80040a4:	080136a0 	.word	0x080136a0
 80040a8:	080136a4 	.word	0x080136a4
 80040ac:	080136c8 	.word	0x080136c8
 80040b0:	080136d4 	.word	0x080136d4
 80040b4:	08013718 	.word	0x08013718
 80040b8:	080136d8 	.word	0x080136d8
 80040bc:	080136f8 	.word	0x080136f8
 80040c0:	080136fc 	.word	0x080136fc
 80040c4:	08013720 	.word	0x08013720
 80040c8:	0801376c 	.word	0x0801376c

080040cc <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7b5b      	ldrb	r3, [r3, #13]
 80040d8:	3b61      	subs	r3, #97	; 0x61
 80040da:	2b17      	cmp	r3, #23
 80040dc:	f200 8268 	bhi.w	80045b0 <process_user_input+0x4e4>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <process_user_input+0x1c>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	08004347 	.word	0x08004347
 80040ec:	08004149 	.word	0x08004149
 80040f0:	080042f3 	.word	0x080042f3
 80040f4:	080044c5 	.word	0x080044c5
 80040f8:	080045b1 	.word	0x080045b1
 80040fc:	0800422d 	.word	0x0800422d
 8004100:	0800439b 	.word	0x0800439b
 8004104:	0800429f 	.word	0x0800429f
 8004108:	0800419d 	.word	0x0800419d
 800410c:	080045b1 	.word	0x080045b1
 8004110:	080043df 	.word	0x080043df
 8004114:	080041d9 	.word	0x080041d9
 8004118:	080041bb 	.word	0x080041bb
 800411c:	080045b1 	.word	0x080045b1
 8004120:	080045b1 	.word	0x080045b1
 8004124:	08004509 	.word	0x08004509
 8004128:	080045b1 	.word	0x080045b1
 800412c:	080045b1 	.word	0x080045b1
 8004130:	080045b1 	.word	0x080045b1
 8004134:	08004281 	.word	0x08004281
 8004138:	080045b1 	.word	0x080045b1
 800413c:	0800455d 	.word	0x0800455d
 8004140:	080045b1 	.word	0x080045b1
 8004144:	08004423 	.word	0x08004423
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f009 ff65 	bl	800e01c <atof>
 8004152:	ec53 2b10 	vmov	r2, r3, d0
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	f7fc fd6d 	bl	8000c38 <__aeabi_d2f>
 800415e:	4603      	mov	r3, r0
 8004160:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8004468 <process_user_input+0x39c>
 8004164:	ee00 3a10 	vmov	s0, r3
 8004168:	f00e fd05 	bl	8012b76 <fminf>
 800416c:	eef0 7a40 	vmov.f32	s15, s0
 8004170:	eddf 0abe 	vldr	s1, [pc, #760]	; 800446c <process_user_input+0x3a0>
 8004174:	eeb0 0a67 	vmov.f32	s0, s15
 8004178:	f00e fce2 	bl	8012b40 <fmaxf>
 800417c:	eef0 7a40 	vmov.f32	s15, s0
 8004180:	4bbb      	ldr	r3, [pc, #748]	; (8004470 <process_user_input+0x3a4>)
 8004182:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8004186:	4bba      	ldr	r3, [pc, #744]	; (8004470 <process_user_input+0x3a4>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc fa04 	bl	8000598 <__aeabi_f2d>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	48b7      	ldr	r0, [pc, #732]	; (8004474 <process_user_input+0x3a8>)
 8004196:	f00a fe03 	bl	800eda0 <iprintf>
			 break;
 800419a:	e210      	b.n	80045be <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f009 ff3e 	bl	800e022 <atoi>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4ab3      	ldr	r2, [pc, #716]	; (8004478 <process_user_input+0x3ac>)
 80041aa:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80041ac:	4bb2      	ldr	r3, [pc, #712]	; (8004478 <process_user_input+0x3ac>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4619      	mov	r1, r3
 80041b2:	48b2      	ldr	r0, [pc, #712]	; (800447c <process_user_input+0x3b0>)
 80041b4:	f00a fdf4 	bl	800eda0 <iprintf>
			 break;
 80041b8:	e201      	b.n	80045be <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	4618      	mov	r0, r3
 80041c0:	f009 ff2f 	bl	800e022 <atoi>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4aac      	ldr	r2, [pc, #688]	; (8004478 <process_user_input+0x3ac>)
 80041c8:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 80041ca:	4bab      	ldr	r3, [pc, #684]	; (8004478 <process_user_input+0x3ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	4619      	mov	r1, r3
 80041d0:	48ab      	ldr	r0, [pc, #684]	; (8004480 <process_user_input+0x3b4>)
 80041d2:	f00a fde5 	bl	800eda0 <iprintf>
			 break;
 80041d6:	e1f2      	b.n	80045be <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f009 ff1d 	bl	800e01c <atof>
 80041e2:	ec53 2b10 	vmov	r2, r3, d0
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	f7fc fd25 	bl	8000c38 <__aeabi_d2f>
 80041ee:	4603      	mov	r3, r0
 80041f0:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8004484 <process_user_input+0x3b8>
 80041f4:	ee00 3a10 	vmov	s0, r3
 80041f8:	f00e fcbd 	bl	8012b76 <fminf>
 80041fc:	eef0 7a40 	vmov.f32	s15, s0
 8004200:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80044c0 <process_user_input+0x3f4>
 8004204:	eeb0 0a67 	vmov.f32	s0, s15
 8004208:	f00e fc9a 	bl	8012b40 <fmaxf>
 800420c:	eef0 7a40 	vmov.f32	s15, s0
 8004210:	4b97      	ldr	r3, [pc, #604]	; (8004470 <process_user_input+0x3a4>)
 8004212:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8004216:	4b96      	ldr	r3, [pc, #600]	; (8004470 <process_user_input+0x3a4>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc f9bc 	bl	8000598 <__aeabi_f2d>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4898      	ldr	r0, [pc, #608]	; (8004488 <process_user_input+0x3bc>)
 8004226:	f00a fdbb 	bl	800eda0 <iprintf>
			 break;
 800422a:	e1c8      	b.n	80045be <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f009 fef3 	bl	800e01c <atof>
 8004236:	ec53 2b10 	vmov	r2, r3, d0
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	f7fc fcfb 	bl	8000c38 <__aeabi_d2f>
 8004242:	4603      	mov	r3, r0
 8004244:	eddf 0a91 	vldr	s1, [pc, #580]	; 800448c <process_user_input+0x3c0>
 8004248:	ee00 3a10 	vmov	s0, r3
 800424c:	f00e fc93 	bl	8012b76 <fminf>
 8004250:	eef0 7a40 	vmov.f32	s15, s0
 8004254:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80044c0 <process_user_input+0x3f4>
 8004258:	eeb0 0a67 	vmov.f32	s0, s15
 800425c:	f00e fc70 	bl	8012b40 <fmaxf>
 8004260:	eef0 7a40 	vmov.f32	s15, s0
 8004264:	4b82      	ldr	r3, [pc, #520]	; (8004470 <process_user_input+0x3a4>)
 8004266:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800426a:	4b81      	ldr	r3, [pc, #516]	; (8004470 <process_user_input+0x3a4>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc f992 	bl	8000598 <__aeabi_f2d>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4885      	ldr	r0, [pc, #532]	; (8004490 <process_user_input+0x3c4>)
 800427a:	f00a fd91 	bl	800eda0 <iprintf>
			 break;
 800427e:	e19e      	b.n	80045be <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f009 fecc 	bl	800e022 <atoi>
 800428a:	4603      	mov	r3, r0
 800428c:	4a7a      	ldr	r2, [pc, #488]	; (8004478 <process_user_input+0x3ac>)
 800428e:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8004290:	4b79      	ldr	r3, [pc, #484]	; (8004478 <process_user_input+0x3ac>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4619      	mov	r1, r3
 8004296:	487f      	ldr	r0, [pc, #508]	; (8004494 <process_user_input+0x3c8>)
 8004298:	f00a fd82 	bl	800eda0 <iprintf>
			 break;
 800429c:	e18f      	b.n	80045be <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f009 feba 	bl	800e01c <atof>
 80042a8:	ec53 2b10 	vmov	r2, r3, d0
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7fc fcc2 	bl	8000c38 <__aeabi_d2f>
 80042b4:	4603      	mov	r3, r0
 80042b6:	eddf 0a78 	vldr	s1, [pc, #480]	; 8004498 <process_user_input+0x3cc>
 80042ba:	ee00 3a10 	vmov	s0, r3
 80042be:	f00e fc5a 	bl	8012b76 <fminf>
 80042c2:	eef0 7a40 	vmov.f32	s15, s0
 80042c6:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80044c0 <process_user_input+0x3f4>
 80042ca:	eeb0 0a67 	vmov.f32	s0, s15
 80042ce:	f00e fc37 	bl	8012b40 <fmaxf>
 80042d2:	eef0 7a40 	vmov.f32	s15, s0
 80042d6:	4b66      	ldr	r3, [pc, #408]	; (8004470 <process_user_input+0x3a4>)
 80042d8:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <process_user_input+0x3a4>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f959 	bl	8000598 <__aeabi_f2d>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	486c      	ldr	r0, [pc, #432]	; (800449c <process_user_input+0x3d0>)
 80042ec:	f00a fd58 	bl	800eda0 <iprintf>
			 break;
 80042f0:	e165      	b.n	80045be <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f009 fe90 	bl	800e01c <atof>
 80042fc:	ec53 2b10 	vmov	r2, r3, d0
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f7fc fc98 	bl	8000c38 <__aeabi_d2f>
 8004308:	4603      	mov	r3, r0
 800430a:	eddf 0a65 	vldr	s1, [pc, #404]	; 80044a0 <process_user_input+0x3d4>
 800430e:	ee00 3a10 	vmov	s0, r3
 8004312:	f00e fc30 	bl	8012b76 <fminf>
 8004316:	eef0 7a40 	vmov.f32	s15, s0
 800431a:	eddf 0a69 	vldr	s1, [pc, #420]	; 80044c0 <process_user_input+0x3f4>
 800431e:	eeb0 0a67 	vmov.f32	s0, s15
 8004322:	f00e fc0d 	bl	8012b40 <fmaxf>
 8004326:	eef0 7a40 	vmov.f32	s15, s0
 800432a:	4b51      	ldr	r3, [pc, #324]	; (8004470 <process_user_input+0x3a4>)
 800432c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8004330:	4b4f      	ldr	r3, [pc, #316]	; (8004470 <process_user_input+0x3a4>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc f92f 	bl	8000598 <__aeabi_f2d>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4859      	ldr	r0, [pc, #356]	; (80044a4 <process_user_input+0x3d8>)
 8004340:	f00a fd2e 	bl	800eda0 <iprintf>
			 break;
 8004344:	e13b      	b.n	80045be <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f009 fe66 	bl	800e01c <atof>
 8004350:	ec53 2b10 	vmov	r2, r3, d0
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	f7fc fc6e 	bl	8000c38 <__aeabi_d2f>
 800435c:	4603      	mov	r3, r0
 800435e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004362:	ee00 3a10 	vmov	s0, r3
 8004366:	f00e fc06 	bl	8012b76 <fminf>
 800436a:	eef0 7a40 	vmov.f32	s15, s0
 800436e:	eddf 0a54 	vldr	s1, [pc, #336]	; 80044c0 <process_user_input+0x3f4>
 8004372:	eeb0 0a67 	vmov.f32	s0, s15
 8004376:	f00e fbe3 	bl	8012b40 <fmaxf>
 800437a:	eef0 7a40 	vmov.f32	s15, s0
 800437e:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <process_user_input+0x3a4>)
 8004380:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004384:	4b3a      	ldr	r3, [pc, #232]	; (8004470 <process_user_input+0x3a4>)
 8004386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc f905 	bl	8000598 <__aeabi_f2d>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4845      	ldr	r0, [pc, #276]	; (80044a8 <process_user_input+0x3dc>)
 8004394:	f00a fd04 	bl	800eda0 <iprintf>
			 break;
 8004398:	e111      	b.n	80045be <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	4618      	mov	r0, r3
 80043a0:	f009 fe3c 	bl	800e01c <atof>
 80043a4:	ec53 2b10 	vmov	r2, r3, d0
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fc fc44 	bl	8000c38 <__aeabi_d2f>
 80043b0:	4603      	mov	r3, r0
 80043b2:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80044ac <process_user_input+0x3e0>
 80043b6:	ee00 3a10 	vmov	s0, r3
 80043ba:	f00e fbc1 	bl	8012b40 <fmaxf>
 80043be:	eef0 7a40 	vmov.f32	s15, s0
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <process_user_input+0x3a4>)
 80043c4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 80043c8:	4b29      	ldr	r3, [pc, #164]	; (8004470 <process_user_input+0x3a4>)
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fc f8e3 	bl	8000598 <__aeabi_f2d>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4836      	ldr	r0, [pc, #216]	; (80044b0 <process_user_input+0x3e4>)
 80043d8:	f00a fce2 	bl	800eda0 <iprintf>
			 break;
 80043dc:	e0ef      	b.n	80045be <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4618      	mov	r0, r3
 80043e4:	f009 fe1a 	bl	800e01c <atof>
 80043e8:	ec53 2b10 	vmov	r2, r3, d0
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	f7fc fc22 	bl	8000c38 <__aeabi_d2f>
 80043f4:	4603      	mov	r3, r0
 80043f6:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80044b4 <process_user_input+0x3e8>
 80043fa:	ee00 3a10 	vmov	s0, r3
 80043fe:	f00e fb9f 	bl	8012b40 <fmaxf>
 8004402:	eef0 7a40 	vmov.f32	s15, s0
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <process_user_input+0x3a4>)
 8004408:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 800440c:	4b18      	ldr	r3, [pc, #96]	; (8004470 <process_user_input+0x3a4>)
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc f8c1 	bl	8000598 <__aeabi_f2d>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4827      	ldr	r0, [pc, #156]	; (80044b8 <process_user_input+0x3ec>)
 800441c:	f00a fcc0 	bl	800eda0 <iprintf>
			 break;
 8004420:	e0cd      	b.n	80045be <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f009 fdf8 	bl	800e01c <atof>
 800442c:	ec53 2b10 	vmov	r2, r3, d0
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	f7fc fc00 	bl	8000c38 <__aeabi_d2f>
 8004438:	4603      	mov	r3, r0
 800443a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80044c0 <process_user_input+0x3f4>
 800443e:	ee00 3a10 	vmov	s0, r3
 8004442:	f00e fb7d 	bl	8012b40 <fmaxf>
 8004446:	eef0 7a40 	vmov.f32	s15, s0
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <process_user_input+0x3a4>)
 800444c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <process_user_input+0x3a4>)
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc f89f 	bl	8000598 <__aeabi_f2d>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4817      	ldr	r0, [pc, #92]	; (80044bc <process_user_input+0x3f0>)
 8004460:	f00a fc9e 	bl	800eda0 <iprintf>
			 break;
 8004464:	e0ab      	b.n	80045be <process_user_input+0x4f2>
 8004466:	bf00      	nop
 8004468:	44fa0000 	.word	0x44fa0000
 800446c:	42c80000 	.word	0x42c80000
 8004470:	20000658 	.word	0x20000658
 8004474:	08013798 	.word	0x08013798
 8004478:	20000758 	.word	0x20000758
 800447c:	080137ac 	.word	0x080137ac
 8004480:	080137c0 	.word	0x080137c0
 8004484:	42700000 	.word	0x42700000
 8004488:	080137d8 	.word	0x080137d8
 800448c:	42040000 	.word	0x42040000
 8004490:	080137ec 	.word	0x080137ec
 8004494:	08013804 	.word	0x08013804
 8004498:	43160000 	.word	0x43160000
 800449c:	0801381c 	.word	0x0801381c
 80044a0:	42200000 	.word	0x42200000
 80044a4:	08013834 	.word	0x08013834
 80044a8:	0801384c 	.word	0x0801384c
 80044ac:	3a83126f 	.word	0x3a83126f
 80044b0:	08013860 	.word	0x08013860
 80044b4:	38d1b717 	.word	0x38d1b717
 80044b8:	08013870 	.word	0x08013870
 80044bc:	08013880 	.word	0x08013880
 80044c0:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f009 fda7 	bl	800e01c <atof>
 80044ce:	ec53 2b10 	vmov	r2, r3, d0
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	f7fc fbaf 	bl	8000c38 <__aeabi_d2f>
 80044da:	4603      	mov	r3, r0
 80044dc:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80044c0 <process_user_input+0x3f4>
 80044e0:	ee00 3a10 	vmov	s0, r3
 80044e4:	f00e fb2c 	bl	8012b40 <fmaxf>
 80044e8:	eef0 7a40 	vmov.f32	s15, s0
 80044ec:	4b4b      	ldr	r3, [pc, #300]	; (800461c <process_user_input+0x550>)
 80044ee:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <process_user_input+0x550>)
 80044f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f84e 	bl	8000598 <__aeabi_f2d>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4847      	ldr	r0, [pc, #284]	; (8004620 <process_user_input+0x554>)
 8004502:	f00a fc4d 	bl	800eda0 <iprintf>
			 break;
 8004506:	e05a      	b.n	80045be <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f009 fd85 	bl	800e01c <atof>
 8004512:	ec53 2b10 	vmov	r2, r3, d0
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f7fc fb8d 	bl	8000c38 <__aeabi_d2f>
 800451e:	4603      	mov	r3, r0
 8004520:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004624 <process_user_input+0x558>
 8004524:	ee00 3a10 	vmov	s0, r3
 8004528:	f00e fb0a 	bl	8012b40 <fmaxf>
 800452c:	eef0 7a40 	vmov.f32	s15, s0
 8004530:	4b3a      	ldr	r3, [pc, #232]	; (800461c <process_user_input+0x550>)
 8004532:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <process_user_input+0x550>)
 8004538:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800453c:	eef1 7a67 	vneg.f32	s15, s15
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <process_user_input+0x550>)
 8004542:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 8004546:	4b35      	ldr	r3, [pc, #212]	; (800461c <process_user_input+0x550>)
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc f824 	bl	8000598 <__aeabi_f2d>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4834      	ldr	r0, [pc, #208]	; (8004628 <process_user_input+0x55c>)
 8004556:	f00a fc23 	bl	800eda0 <iprintf>
			 break;
 800455a:	e030      	b.n	80045be <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f009 fd5b 	bl	800e01c <atof>
 8004566:	ec53 2b10 	vmov	r2, r3, d0
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	f7fc fb63 	bl	8000c38 <__aeabi_d2f>
 8004572:	4603      	mov	r3, r0
 8004574:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8004624 <process_user_input+0x558>
 8004578:	ee00 3a10 	vmov	s0, r3
 800457c:	f00e fae0 	bl	8012b40 <fmaxf>
 8004580:	eef0 7a40 	vmov.f32	s15, s0
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <process_user_input+0x550>)
 8004586:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <process_user_input+0x550>)
 800458c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004590:	eef1 7a67 	vneg.f32	s15, s15
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <process_user_input+0x550>)
 8004596:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <process_user_input+0x550>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb fffa 	bl	8000598 <__aeabi_f2d>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4820      	ldr	r0, [pc, #128]	; (800462c <process_user_input+0x560>)
 80045aa:	f00a fbf9 	bl	800eda0 <iprintf>
			 break;
 80045ae:	e006      	b.n	80045be <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	481e      	ldr	r0, [pc, #120]	; (8004630 <process_user_input+0x564>)
 80045b8:	f00a fbf2 	bl	800eda0 <iprintf>
			 break;
 80045bc:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <process_user_input+0x568>)
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	9200      	str	r2, [sp, #0]
 80045c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c6:	f000 ff67 	bl	8005498 <preference_writer_ready>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f083 0301 	eor.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <process_user_input+0x510>
 80045d6:	4817      	ldr	r0, [pc, #92]	; (8004634 <process_user_input+0x568>)
 80045d8:	f000 ff4f 	bl	800547a <preference_writer_open>
	 preference_writer_flush(&prefs);
 80045dc:	4815      	ldr	r0, [pc, #84]	; (8004634 <process_user_input+0x568>)
 80045de:	f000 ff69 	bl	80054b4 <preference_writer_flush>
	 preference_writer_close(&prefs);
 80045e2:	4814      	ldr	r0, [pc, #80]	; (8004634 <process_user_input+0x568>)
 80045e4:	f000 ffe4 	bl	80055b0 <preference_writer_close>
	 preference_writer_load(prefs);
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <process_user_input+0x568>)
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	9200      	str	r2, [sp, #0]
 80045ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f0:	f000 ff9c 	bl	800552c <preference_writer_load>

	 enter_setup_state();
 80045f4:	f7ff fbf4 	bl	8003de0 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	2208      	movs	r2, #8
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f009 fd45 	bl	800e09c <memset>
 }
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000658 	.word	0x20000658
 8004620:	08013894 	.word	0x08013894
 8004624:	00000000 	.word	0x00000000
 8004628:	080138a8 	.word	0x080138a8
 800462c:	080138bc 	.word	0x080138bc
 8004630:	080138d0 	.word	0x080138d0
 8004634:	20000b58 	.word	0x20000b58

08004638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463e:	f107 0314 	add.w	r3, r7, #20
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <MX_GPIO_Init+0x164>)
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	4a52      	ldr	r2, [pc, #328]	; (800479c <MX_GPIO_Init+0x164>)
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800465a:	4b50      	ldr	r3, [pc, #320]	; (800479c <MX_GPIO_Init+0x164>)
 800465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004666:	4b4d      	ldr	r3, [pc, #308]	; (800479c <MX_GPIO_Init+0x164>)
 8004668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466a:	4a4c      	ldr	r2, [pc, #304]	; (800479c <MX_GPIO_Init+0x164>)
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004672:	4b4a      	ldr	r3, [pc, #296]	; (800479c <MX_GPIO_Init+0x164>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <MX_GPIO_Init+0x164>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	4a46      	ldr	r2, [pc, #280]	; (800479c <MX_GPIO_Init+0x164>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800468a:	4b44      	ldr	r3, [pc, #272]	; (800479c <MX_GPIO_Init+0x164>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004696:	4b41      	ldr	r3, [pc, #260]	; (800479c <MX_GPIO_Init+0x164>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	4a40      	ldr	r2, [pc, #256]	; (800479c <MX_GPIO_Init+0x164>)
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046a2:	4b3e      	ldr	r3, [pc, #248]	; (800479c <MX_GPIO_Init+0x164>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 80046ae:	2200      	movs	r2, #0
 80046b0:	f24c 0110 	movw	r1, #49168	; 0xc010
 80046b4:	483a      	ldr	r0, [pc, #232]	; (80047a0 <MX_GPIO_Init+0x168>)
 80046b6:	f004 fc2d 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2103      	movs	r1, #3
 80046be:	4839      	ldr	r0, [pc, #228]	; (80047a4 <MX_GPIO_Init+0x16c>)
 80046c0:	f004 fc28 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2108      	movs	r1, #8
 80046c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046cc:	f004 fc22 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80046d6:	4834      	ldr	r0, [pc, #208]	; (80047a8 <MX_GPIO_Init+0x170>)
 80046d8:	f004 fc1c 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 80046dc:	f24c 0310 	movw	r3, #49168	; 0xc010
 80046e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ea:	2300      	movs	r3, #0
 80046ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	4619      	mov	r1, r3
 80046f4:	482a      	ldr	r0, [pc, #168]	; (80047a0 <MX_GPIO_Init+0x168>)
 80046f6:	f004 fa8b 	bl	8008c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046fa:	2303      	movs	r3, #3
 80046fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046fe:	2301      	movs	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004706:	2300      	movs	r3, #0
 8004708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	4619      	mov	r1, r3
 8004710:	4824      	ldr	r0, [pc, #144]	; (80047a4 <MX_GPIO_Init+0x16c>)
 8004712:	f004 fa7d 	bl	8008c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004716:	2308      	movs	r3, #8
 8004718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4619      	mov	r1, r3
 800472c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004730:	f004 fa6e 	bl	8008c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800473a:	2301      	movs	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	4619      	mov	r1, r3
 800474c:	4816      	ldr	r0, [pc, #88]	; (80047a8 <MX_GPIO_Init+0x170>)
 800474e:	f004 fa5f 	bl	8008c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004752:	2370      	movs	r3, #112	; 0x70
 8004754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	4619      	mov	r1, r3
 8004764:	4810      	ldr	r0, [pc, #64]	; (80047a8 <MX_GPIO_Init+0x170>)
 8004766:	f004 fa53 	bl	8008c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800476a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800476e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004770:	2301      	movs	r3, #1
 8004772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477c:	f107 0314 	add.w	r3, r7, #20
 8004780:	4619      	mov	r1, r3
 8004782:	4809      	ldr	r0, [pc, #36]	; (80047a8 <MX_GPIO_Init+0x170>)
 8004784:	f004 fa44 	bl	8008c10 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <MX_GPIO_Init+0x174>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a07      	ldr	r2, [pc, #28]	; (80047ac <MX_GPIO_Init+0x174>)
 800478e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004792:	6053      	str	r3, [r2, #4]

}
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	48000800 	.word	0x48000800
 80047a4:	48001400 	.word	0x48001400
 80047a8:	48000400 	.word	0x48000400
 80047ac:	40010000 	.word	0x40010000

080047b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047b6:	f001 fc58 	bl	800606a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047ba:	f000 fabb 	bl	8004d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047be:	f7ff ff3b 	bl	8004638 <MX_GPIO_Init>
  MX_DMA_Init();
 80047c2:	f7fd fd07 	bl	80021d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80047c6:	f7fc fc3f 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 80047ca:	f7fc fcb5 	bl	8001138 <MX_ADC2_Init>
  MX_ADC3_Init();
 80047ce:	f7fc fd19 	bl	8001204 <MX_ADC3_Init>
  MX_ADC5_Init();
 80047d2:	f7fc fdf5 	bl	80013c0 <MX_ADC5_Init>
  MX_DAC1_Init();
 80047d6:	f7fd fc85 	bl	80020e4 <MX_DAC1_Init>
  MX_SPI1_Init();
 80047da:	f000 fef9 	bl	80055d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80047de:	f000 ff35 	bl	800564c <MX_SPI2_Init>
  MX_TIM2_Init();
 80047e2:	f001 fa05 	bl	8005bf0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80047e6:	f001 fb45 	bl	8005e74 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80047ea:	f001 fa71 	bl	8005cd0 <MX_TIM8_Init>
  MX_ADC4_Init();
 80047ee:	f7fc fd81 	bl	80012f4 <MX_ADC4_Init>
  MX_FDCAN1_Init();
 80047f2:	f7fd ff93 	bl	800271c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 80047f6:	2106      	movs	r1, #6
 80047f8:	48ad      	ldr	r0, [pc, #692]	; (8004ab0 <main+0x300>)
 80047fa:	f000 fe2d 	bl	8005458 <preference_writer_init>
  preference_writer_load(prefs);
 80047fe:	4bac      	ldr	r3, [pc, #688]	; (8004ab0 <main+0x300>)
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	9200      	str	r2, [sp, #0]
 8004804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004806:	f000 fe91 	bl	800552c <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 800480a:	4baa      	ldr	r3, [pc, #680]	; (8004ab4 <main+0x304>)
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d102      	bne.n	800481a <main+0x6a>
 8004814:	4ba7      	ldr	r3, [pc, #668]	; (8004ab4 <main+0x304>)
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 800481a:	4ba6      	ldr	r3, [pc, #664]	; (8004ab4 <main+0x304>)
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d102      	bne.n	800482a <main+0x7a>
 8004824:	4ba3      	ldr	r3, [pc, #652]	; (8004ab4 <main+0x304>)
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800482a:	4ba3      	ldr	r3, [pc, #652]	; (8004ab8 <main+0x308>)
 800482c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004830:	eef4 7a67 	vcmp.f32	s15, s15
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	d609      	bvs.n	800484e <main+0x9e>
 800483a:	4b9f      	ldr	r3, [pc, #636]	; (8004ab8 <main+0x308>)
 800483c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004840:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004844:	eef4 7a47 	vcmp.f32	s15, s14
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	d102      	bne.n	8004854 <main+0xa4>
 800484e:	4b9a      	ldr	r3, [pc, #616]	; (8004ab8 <main+0x308>)
 8004850:	4a9a      	ldr	r2, [pc, #616]	; (8004abc <main+0x30c>)
 8004852:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004854:	4b98      	ldr	r3, [pc, #608]	; (8004ab8 <main+0x308>)
 8004856:	edd3 7a03 	vldr	s15, [r3, #12]
 800485a:	eef4 7a67 	vcmp.f32	s15, s15
 800485e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004862:	d609      	bvs.n	8004878 <main+0xc8>
 8004864:	4b94      	ldr	r3, [pc, #592]	; (8004ab8 <main+0x308>)
 8004866:	edd3 7a03 	vldr	s15, [r3, #12]
 800486a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800486e:	eef4 7a47 	vcmp.f32	s15, s14
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d102      	bne.n	800487e <main+0xce>
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <main+0x308>)
 800487a:	4a91      	ldr	r2, [pc, #580]	; (8004ac0 <main+0x310>)
 800487c:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800487e:	4b8e      	ldr	r3, [pc, #568]	; (8004ab8 <main+0x308>)
 8004880:	edd3 7a06 	vldr	s15, [r3, #24]
 8004884:	eef4 7a67 	vcmp.f32	s15, s15
 8004888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488c:	d609      	bvs.n	80048a2 <main+0xf2>
 800488e:	4b8a      	ldr	r3, [pc, #552]	; (8004ab8 <main+0x308>)
 8004890:	edd3 7a06 	vldr	s15, [r3, #24]
 8004894:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004898:	eef4 7a47 	vcmp.f32	s15, s14
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	d103      	bne.n	80048aa <main+0xfa>
 80048a2:	4b85      	ldr	r3, [pc, #532]	; (8004ab8 <main+0x308>)
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80048aa:	4b82      	ldr	r3, [pc, #520]	; (8004ab4 <main+0x304>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <main+0x10a>
 80048b4:	4b7f      	ldr	r3, [pc, #508]	; (8004ab4 <main+0x304>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80048ba:	4b7e      	ldr	r3, [pc, #504]	; (8004ab4 <main+0x304>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d102      	bne.n	80048ca <main+0x11a>
 80048c4:	4b7b      	ldr	r3, [pc, #492]	; (8004ab4 <main+0x304>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80048ca:	4b7a      	ldr	r3, [pc, #488]	; (8004ab4 <main+0x304>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d103      	bne.n	80048dc <main+0x12c>
 80048d4:	4b77      	ldr	r3, [pc, #476]	; (8004ab4 <main+0x304>)
 80048d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048da:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80048dc:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <main+0x308>)
 80048de:	edd3 7a07 	vldr	s15, [r3, #28]
 80048e2:	eef4 7a67 	vcmp.f32	s15, s15
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	d609      	bvs.n	8004900 <main+0x150>
 80048ec:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <main+0x308>)
 80048ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80048f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80048f6:	eef4 7a47 	vcmp.f32	s15, s14
 80048fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fe:	d103      	bne.n	8004908 <main+0x158>
 8004900:	4b6d      	ldr	r3, [pc, #436]	; (8004ab8 <main+0x308>)
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <main+0x308>)
 800490a:	edd3 7a08 	vldr	s15, [r3, #32]
 800490e:	eef4 7a67 	vcmp.f32	s15, s15
 8004912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004916:	d609      	bvs.n	800492c <main+0x17c>
 8004918:	4b67      	ldr	r3, [pc, #412]	; (8004ab8 <main+0x308>)
 800491a:	edd3 7a08 	vldr	s15, [r3, #32]
 800491e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004922:	eef4 7a47 	vcmp.f32	s15, s14
 8004926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492a:	d102      	bne.n	8004932 <main+0x182>
 800492c:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <main+0x308>)
 800492e:	4a65      	ldr	r2, [pc, #404]	; (8004ac4 <main+0x314>)
 8004930:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004932:	4b61      	ldr	r3, [pc, #388]	; (8004ab8 <main+0x308>)
 8004934:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004938:	eef4 7a67 	vcmp.f32	s15, s15
 800493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004940:	d609      	bvs.n	8004956 <main+0x1a6>
 8004942:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <main+0x308>)
 8004944:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004948:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800494c:	eef4 7a47 	vcmp.f32	s15, s14
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	d102      	bne.n	800495c <main+0x1ac>
 8004956:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <main+0x308>)
 8004958:	4a5b      	ldr	r2, [pc, #364]	; (8004ac8 <main+0x318>)
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800495c:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <main+0x308>)
 800495e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004962:	eef4 7a67 	vcmp.f32	s15, s15
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	d609      	bvs.n	8004980 <main+0x1d0>
 800496c:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <main+0x308>)
 800496e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004972:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004976:	eef4 7a47 	vcmp.f32	s15, s14
 800497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497e:	d102      	bne.n	8004986 <main+0x1d6>
 8004980:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <main+0x308>)
 8004982:	4a52      	ldr	r2, [pc, #328]	; (8004acc <main+0x31c>)
 8004984:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <main+0x308>)
 8004988:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800498c:	eef4 7a67 	vcmp.f32	s15, s15
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	d609      	bvs.n	80049aa <main+0x1fa>
 8004996:	4b48      	ldr	r3, [pc, #288]	; (8004ab8 <main+0x308>)
 8004998:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800499c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049a0:	eef4 7a47 	vcmp.f32	s15, s14
 80049a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a8:	d102      	bne.n	80049b0 <main+0x200>
 80049aa:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <main+0x308>)
 80049ac:	4a48      	ldr	r2, [pc, #288]	; (8004ad0 <main+0x320>)
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 80049b0:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <main+0x308>)
 80049b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80049b6:	eef4 7a67 	vcmp.f32	s15, s15
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	d609      	bvs.n	80049d4 <main+0x224>
 80049c0:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <main+0x308>)
 80049c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80049c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049ca:	eef4 7a47 	vcmp.f32	s15, s14
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	d103      	bne.n	80049dc <main+0x22c>
 80049d4:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <main+0x308>)
 80049d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80049dc:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <main+0x308>)
 80049de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80049e2:	eef4 7a67 	vcmp.f32	s15, s15
 80049e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ea:	d609      	bvs.n	8004a00 <main+0x250>
 80049ec:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <main+0x308>)
 80049ee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80049f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80049f6:	eef4 7a47 	vcmp.f32	s15, s14
 80049fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fe:	d103      	bne.n	8004a08 <main+0x258>
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <main+0x308>)
 8004a02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <main+0x308>)
 8004a0a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004a0e:	eef4 7a67 	vcmp.f32	s15, s15
 8004a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a16:	d609      	bvs.n	8004a2c <main+0x27c>
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <main+0x308>)
 8004a1a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004a1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a22:	eef4 7a47 	vcmp.f32	s15, s14
 8004a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2a:	d102      	bne.n	8004a32 <main+0x282>
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <main+0x308>)
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <main+0x324>)
 8004a30:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004a32:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <main+0x308>)
 8004a34:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a38:	eef4 7a67 	vcmp.f32	s15, s15
 8004a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a40:	d609      	bvs.n	8004a56 <main+0x2a6>
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <main+0x308>)
 8004a44:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a48:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a4c:	eef4 7a47 	vcmp.f32	s15, s14
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d102      	bne.n	8004a5c <main+0x2ac>
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <main+0x308>)
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <main+0x31c>)
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004a5c:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <main+0x308>)
 8004a5e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004a62:	eef4 7a67 	vcmp.f32	s15, s15
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d702      	bvc.n	8004a72 <main+0x2c2>
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <main+0x308>)
 8004a6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <main+0x328>)
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <main+0x308>)
 8004a74:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004a78:	eef4 7a67 	vcmp.f32	s15, s15
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d702      	bvc.n	8004a88 <main+0x2d8>
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <main+0x308>)
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <main+0x32c>)
 8004a86:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <main+0x308>)
 8004a8a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004a8e:	eef4 7a67 	vcmp.f32	s15, s15
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	d702      	bvc.n	8004a9e <main+0x2ee>
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <main+0x308>)
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <main+0x330>)
 8004a9c:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <main+0x308>)
 8004aa0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004aa4:	eef4 7a67 	vcmp.f32	s15, s15
 8004aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aac:	d71d      	bvc.n	8004aea <main+0x33a>
 8004aae:	e019      	b.n	8004ae4 <main+0x334>
 8004ab0:	20000b58 	.word	0x20000b58
 8004ab4:	20000758 	.word	0x20000758
 8004ab8:	20000658 	.word	0x20000658
 8004abc:	447a0000 	.word	0x447a0000
 8004ac0:	42200000 	.word	0x42200000
 8004ac4:	42fa0000 	.word	0x42fa0000
 8004ac8:	41600000 	.word	0x41600000
 8004acc:	40a00000 	.word	0x40a00000
 8004ad0:	41a80000 	.word	0x41a80000
 8004ad4:	43fa0000 	.word	0x43fa0000
 8004ad8:	41480000 	.word	0x41480000
 8004adc:	c1480000 	.word	0xc1480000
 8004ae0:	42820000 	.word	0x42820000
 8004ae4:	4b7e      	ldr	r3, [pc, #504]	; (8004ce0 <main+0x530>)
 8004ae6:	4a7f      	ldr	r2, [pc, #508]	; (8004ce4 <main+0x534>)
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004af2:	487d      	ldr	r0, [pc, #500]	; (8004ce8 <main+0x538>)
 8004af4:	f00a f954 	bl	800eda0 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8004af8:	487c      	ldr	r0, [pc, #496]	; (8004cec <main+0x53c>)
 8004afa:	f7fe fa93 	bl	8003024 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004afe:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004b02:	2100      	movs	r1, #0
 8004b04:	487a      	ldr	r0, [pc, #488]	; (8004cf0 <main+0x540>)
 8004b06:	f009 fac9 	bl	800e09c <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004b0a:	4b7a      	ldr	r3, [pc, #488]	; (8004cf4 <main+0x544>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	4a7a      	ldr	r2, [pc, #488]	; (8004cf8 <main+0x548>)
 8004b10:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004b14:	4b77      	ldr	r3, [pc, #476]	; (8004cf4 <main+0x544>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	4a77      	ldr	r2, [pc, #476]	; (8004cf8 <main+0x548>)
 8004b1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 8004b1e:	4b70      	ldr	r3, [pc, #448]	; (8004ce0 <main+0x530>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	4a75      	ldr	r2, [pc, #468]	; (8004cf8 <main+0x548>)
 8004b24:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	4873      	ldr	r0, [pc, #460]	; (8004cf8 <main+0x548>)
 8004b2a:	f000 faa5 	bl	8005078 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004b2e:	4b72      	ldr	r3, [pc, #456]	; (8004cf8 <main+0x548>)
 8004b30:	4a70      	ldr	r2, [pc, #448]	; (8004cf4 <main+0x544>)
 8004b32:	33dc      	adds	r3, #220	; 0xdc
 8004b34:	f102 0118 	add.w	r1, r2, #24
 8004b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f009 fa9f 	bl	800e080 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004b42:	486e      	ldr	r0, [pc, #440]	; (8004cfc <main+0x54c>)
 8004b44:	f001 fedc 	bl	8006900 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004b48:	486d      	ldr	r0, [pc, #436]	; (8004d00 <main+0x550>)
 8004b4a:	f001 fed9 	bl	8006900 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004b4e:	486d      	ldr	r0, [pc, #436]	; (8004d04 <main+0x554>)
 8004b50:	f001 fed6 	bl	8006900 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);//JB
 8004b54:	486c      	ldr	r0, [pc, #432]	; (8004d08 <main+0x558>)
 8004b56:	f001 fed3 	bl	8006900 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	2110      	movs	r1, #16
 8004b5e:	486b      	ldr	r0, [pc, #428]	; (8004d0c <main+0x55c>)
 8004b60:	f004 f9d8 	bl	8008f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004b64:	2201      	movs	r2, #1
 8004b66:	2108      	movs	r1, #8
 8004b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b6c:	f004 f9d2 	bl	8008f14 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004b70:	2001      	movs	r0, #1
 8004b72:	f001 fab1 	bl	80060d8 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004b76:	2001      	movs	r0, #1
 8004b78:	f001 faae 	bl	80060d8 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004b7c:	4964      	ldr	r1, [pc, #400]	; (8004d10 <main+0x560>)
 8004b7e:	2301      	movs	r3, #1
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9303      	str	r3, [sp, #12]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9302      	str	r3, [sp, #8]
 8004b92:	2301      	movs	r3, #1
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	c903      	ldmia	r1, {r0, r1}
 8004ba0:	f7fd fbe1 	bl	8002366 <drv_write_DCR>
  HAL_Delay(1);
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f001 fa97 	bl	80060d8 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 8004baa:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <main+0x530>)
 8004bac:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bb0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004d14 <main+0x564>
 8004bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbc:	d802      	bhi.n	8004bc4 <main+0x414>
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	e001      	b.n	8004bc8 <main+0x418>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 8004bc8:	4951      	ldr	r1, [pc, #324]	; (8004d10 <main+0x560>)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9306      	str	r3, [sp, #24]
 8004bce:	2301      	movs	r3, #1
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	9304      	str	r3, [sp, #16]
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9302      	str	r3, [sp, #8]
 8004bde:	2303      	movs	r3, #3
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	2200      	movs	r2, #0
 8004bea:	c903      	ldmia	r1, {r0, r1}
 8004bec:	f7fd fc2b 	bl	8002446 <drv_write_CSACR>
  HAL_Delay(1);
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f001 fa71 	bl	80060d8 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 8004bf6:	4946      	ldr	r1, [pc, #280]	; (8004d10 <main+0x560>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9306      	str	r3, [sp, #24]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9305      	str	r3, [sp, #20]
 8004c00:	2300      	movs	r3, #0
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9303      	str	r3, [sp, #12]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	2300      	movs	r3, #0
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2301      	movs	r3, #1
 8004c16:	2200      	movs	r2, #0
 8004c18:	c903      	ldmia	r1, {r0, r1}
 8004c1a:	f7fd fc14 	bl	8002446 <drv_write_CSACR>
  HAL_Delay(1);
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f001 fa5a 	bl	80060d8 <HAL_Delay>
  zero_current(&controller);
 8004c24:	4831      	ldr	r0, [pc, #196]	; (8004cec <main+0x53c>)
 8004c26:	f7fe f9b9 	bl	8002f9c <zero_current>
  HAL_Delay(1);
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f001 fa54 	bl	80060d8 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 8004c30:	4937      	ldr	r1, [pc, #220]	; (8004d10 <main+0x560>)
 8004c32:	2305      	movs	r3, #5
 8004c34:	9302      	str	r3, [sp, #8]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2201      	movs	r2, #1
 8004c42:	c903      	ldmia	r1, {r0, r1}
 8004c44:	f7fd fbd1 	bl	80023ea <drv_write_OCPCR>
  HAL_Delay(1);
 8004c48:	2001      	movs	r0, #1
 8004c4a:	f001 fa45 	bl	80060d8 <HAL_Delay>
  drv_disable_gd(drv);
 8004c4e:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <main+0x560>)
 8004c50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c54:	f7fd fc53 	bl	80024fe <drv_disable_gd>
  HAL_Delay(1);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f001 fa3d 	bl	80060d8 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <main+0x53c>)
 8004c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c64:	4a21      	ldr	r2, [pc, #132]	; (8004cec <main+0x53c>)
 8004c66:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	482a      	ldr	r0, [pc, #168]	; (8004d18 <main+0x568>)
 8004c6e:	f00a f897 	bl	800eda0 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004c72:	2100      	movs	r1, #0
 8004c74:	4829      	ldr	r0, [pc, #164]	; (8004d1c <main+0x56c>)
 8004c76:	f005 ff07 	bl	800aa88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004c7a:	2104      	movs	r1, #4
 8004c7c:	4827      	ldr	r0, [pc, #156]	; (8004d1c <main+0x56c>)
 8004c7e:	f005 ff03 	bl	800aa88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004c82:	2108      	movs	r1, #8
 8004c84:	4825      	ldr	r0, [pc, #148]	; (8004d1c <main+0x56c>)
 8004c86:	f005 feff 	bl	800aa88 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);//JB
 8004c8a:	4825      	ldr	r0, [pc, #148]	; (8004d20 <main+0x570>)
 8004c8c:	f7fd fa16 	bl	80020bc <can_rx_init>
  can_tx_init(&can_tx);
 8004c90:	4824      	ldr	r0, [pc, #144]	; (8004d24 <main+0x574>)
 8004c92:	f7fd fa1d 	bl	80020d0 <can_tx_init>
  //HAL_CAN_Start(&CAN_H); //start CAN//JB
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt//JB

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	201c      	movs	r0, #28
 8004c9c:	f002 feb0 	bl	8007a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	2015      	movs	r0, #21
 8004ca6:	f002 feab 	bl	8007a00 <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004caa:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <main+0x578>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004cb0:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <main+0x578>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004cb6:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <main+0x578>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	491b      	ldr	r1, [pc, #108]	; (8004d2c <main+0x57c>)
 8004cc0:	481b      	ldr	r0, [pc, #108]	; (8004d30 <main+0x580>)
 8004cc2:	f007 fa1b 	bl	800c0fc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8004cc6:	4815      	ldr	r0, [pc, #84]	; (8004d1c <main+0x56c>)
 8004cc8:	f005 fe0e 	bl	800a8e8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8004ccc:	2064      	movs	r0, #100	; 0x64
 8004cce:	f001 fa03 	bl	80060d8 <HAL_Delay>
	  drv_print_faults(drv);
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <main+0x560>)
 8004cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cd8:	f7fd fc2c 	bl	8002534 <drv_print_faults>
	  HAL_Delay(100);
 8004cdc:	e7f6      	b.n	8004ccc <main+0x51c>
 8004cde:	bf00      	nop
 8004ce0:	20000658 	.word	0x20000658
 8004ce4:	c2820000 	.word	0xc2820000
 8004ce8:	080138f8 	.word	0x080138f8
 8004cec:	20000b6c 	.word	0x20000b6c
 8004cf0:	20009388 	.word	0x20009388
 8004cf4:	20000758 	.word	0x20000758
 8004cf8:	20000e74 	.word	0x20000e74
 8004cfc:	2000023c 	.word	0x2000023c
 8004d00:	200002a8 	.word	0x200002a8
 8004d04:	20000314 	.word	0x20000314
 8004d08:	20000380 	.word	0x20000380
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	20001154 	.word	0x20001154
 8004d14:	42200000 	.word	0x42200000
 8004d18:	0801391c 	.word	0x0801391c
 8004d1c:	200097fc 	.word	0x200097fc
 8004d20:	20009694 	.word	0x20009694
 8004d24:	20009668 	.word	0x20009668
 8004d28:	20000e64 	.word	0x20000e64
 8004d2c:	200096e0 	.word	0x200096e0
 8004d30:	20009894 	.word	0x20009894

08004d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b094      	sub	sp, #80	; 0x50
 8004d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d3a:	f107 0318 	add.w	r3, r7, #24
 8004d3e:	2238      	movs	r2, #56	; 0x38
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f009 f9aa 	bl	800e09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004d56:	2000      	movs	r0, #0
 8004d58:	f004 f8f4 	bl	8008f44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8004d76:	2315      	movs	r3, #21
 8004d78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d82:	2302      	movs	r3, #2
 8004d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d86:	f107 0318 	add.w	r3, r7, #24
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f004 f97e 	bl	800908c <HAL_RCC_OscConfig>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004d96:	f000 f82d 	bl	8004df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d9a:	230f      	movs	r3, #15
 8004d9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004daa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004db2:	1d3b      	adds	r3, r7, #4
 8004db4:	2104      	movs	r1, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f004 fc80 	bl	80096bc <HAL_RCC_ClockConfig>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004dc2:	f000 f817 	bl	8004df4 <Error_Handler>
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3750      	adds	r7, #80	; 0x50
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004de2:	f001 f95b 	bl	800609c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e0c:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004e10:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e14:	edd7 7a00 	vldr	s15, [r7]
 8004e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	dd01      	ble.n	8004e26 <fast_fmaxf+0x24>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	e000      	b.n	8004e28 <fast_fmaxf+0x26>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	ee07 3a90 	vmov	s15, r3
    }
 8004e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <fast_fminf>:

float fast_fminf(float x, float y){
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e44:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004e48:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e4c:	edd7 7a00 	vldr	s15, [r7]
 8004e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	d501      	bpl.n	8004e5e <fast_fminf+0x24>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	e000      	b.n	8004e60 <fast_fminf+0x26>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	ee07 3a90 	vmov	s15, r3
    }
 8004e64:	eeb0 0a67 	vmov.f32	s0, s15
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e7c:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e80:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004e84:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	dd0c      	ble.n	8004eb0 <fmaxf3+0x3e>
 8004e96:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	dd01      	ble.n	8004eac <fmaxf3+0x3a>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	e00d      	b.n	8004ec8 <fmaxf3+0x56>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	e00b      	b.n	8004ec8 <fmaxf3+0x56>
 8004eb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	dd01      	ble.n	8004ec6 <fmaxf3+0x54>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	e000      	b.n	8004ec8 <fmaxf3+0x56>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	ee07 3a90 	vmov	s15, r3
    }
 8004ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <fminf3>:

float fminf3(float x, float y, float z){
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ee4:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ee8:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004eec:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ef0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efc:	d50c      	bpl.n	8004f18 <fminf3+0x3e>
 8004efe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	d501      	bpl.n	8004f14 <fminf3+0x3a>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	e00d      	b.n	8004f30 <fminf3+0x56>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	e00b      	b.n	8004f30 <fminf3+0x56>
 8004f18:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d501      	bpl.n	8004f2e <fminf3+0x54>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	e000      	b.n	8004f30 <fminf3+0x56>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	ee07 3a90 	vmov	s15, r3
    }
 8004f34:	eeb0 0a67 	vmov.f32	s0, s15
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	ed93 7a00 	vldr	s14, [r3]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	edd3 7a00 	vldr	s15, [r3]
 8004f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	edd3 6a00 	vldr	s13, [r3]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	edd3 7a00 	vldr	s15, [r3]
 8004f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f74:	eeb0 0a67 	vmov.f32	s0, s15
 8004f78:	f00d fe9e 	bl	8012cb8 <sqrtf>
 8004f7c:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004f80:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	dc00      	bgt.n	8004f94 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004f92:	e01b      	b.n	8004fcc <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	ed93 7a00 	vldr	s14, [r3]
 8004f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fa2:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	ed93 7a00 	vldr	s14, [r3]
 8004fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	edc3 7a00 	vstr	s15, [r3]
    }
 8004fcc:	bf00      	nop
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <sin_lut>:
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
    }

float sin_lut(float theta){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004fde:	eddf 0a17 	vldr	s1, [pc, #92]	; 800503c <sin_lut+0x68>
 8004fe2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fe6:	f00d fe47 	bl	8012c78 <fmodf>
 8004fea:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	d506      	bpl.n	800500a <sin_lut+0x36>
 8004ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005000:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800503c <sin_lut+0x68>
 8005004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005008:	e001      	b.n	800500e <sin_lut+0x3a>
 800500a:	edd7 7a01 	vldr	s15, [r7, #4]
 800500e:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8005012:	edd7 7a01 	vldr	s15, [r7, #4]
 8005016:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005040 <sin_lut+0x6c>
 800501a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800501e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005022:	ee17 3a90 	vmov	r3, s15
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <sin_lut+0x70>)
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	ee07 3a90 	vmov	s15, r3
}
 8005032:	eeb0 0a67 	vmov.f32	s0, s15
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40c90fdb 	.word	0x40c90fdb
 8005040:	42a2f983 	.word	0x42a2f983
 8005044:	080139b0 	.word	0x080139b0

08005048 <cos_lut>:

float cos_lut(float theta){
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8005052:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005074 <cos_lut+0x2c>
 8005056:	edd7 7a01 	vldr	s15, [r7, #4]
 800505a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800505e:	eeb0 0a67 	vmov.f32	s0, s15
 8005062:	f7ff ffb7 	bl	8004fd4 <sin_lut>
 8005066:	eef0 7a40 	vmov.f32	s15, s0
}
 800506a:	eeb0 0a67 	vmov.f32	s0, s15
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	3fc90fdb 	.word	0x3fc90fdb

08005078 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e021      	b.n	80050cc <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800508e:	2200      	movs	r2, #0
 8005090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005094:	4812      	ldr	r0, [pc, #72]	; (80050e0 <ps_warmup+0x68>)
 8005096:	f003 ff3d 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	2364      	movs	r3, #100	; 0x64
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2301      	movs	r3, #1
 80050a6:	480f      	ldr	r0, [pc, #60]	; (80050e4 <ps_warmup+0x6c>)
 80050a8:	f005 f84f 	bl	800a14a <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80050ac:	bf00      	nop
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <ps_warmup+0x6c>)
 80050b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d0f9      	beq.n	80050ae <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80050ba:	2201      	movs	r2, #1
 80050bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050c0:	4807      	ldr	r0, [pc, #28]	; (80050e0 <ps_warmup+0x68>)
 80050c2:	f003 ff27 	bl	8008f14 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3301      	adds	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	dbd9      	blt.n	8005088 <ps_warmup+0x10>
	}
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	48000400 	.word	0x48000400
 80050e4:	20009748 	.word	0x20009748

080050e8 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 80050fc:	2313      	movs	r3, #19
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	e011      	b.n	8005126 <ps_sample+0x3e>
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	3b01      	subs	r3, #1
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	3302      	adds	r3, #2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	3304      	adds	r3, #4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3302      	adds	r3, #2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3304      	adds	r3, #4
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	3b01      	subs	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	dcea      	bgt.n	8005102 <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8005132:	2200      	movs	r2, #0
 8005134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005138:	489d      	ldr	r0, [pc, #628]	; (80053b0 <ps_sample+0x2c8>)
 800513a:	f003 feeb 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	2364      	movs	r3, #100	; 0x64
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	2301      	movs	r3, #1
 800514a:	489a      	ldr	r0, [pc, #616]	; (80053b4 <ps_sample+0x2cc>)
 800514c:	f004 fffd 	bl	800a14a <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005150:	bf00      	nop
 8005152:	4b98      	ldr	r3, [pc, #608]	; (80053b4 <ps_sample+0x2cc>)
 8005154:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d0f9      	beq.n	8005152 <ps_sample+0x6a>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800515e:	2201      	movs	r2, #1
 8005160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005164:	4892      	ldr	r0, [pc, #584]	; (80053b0 <ps_sample+0x2c8>)
 8005166:	f003 fed5 	bl	8008f14 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	885b      	ldrh	r3, [r3, #2]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	125b      	asrs	r3, r3, #9
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	3336      	adds	r3, #54	; 0x36
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	125b      	asrs	r3, r3, #9
 800518c:	3301      	adds	r3, #1
 800518e:	425a      	negs	r2, r3
 8005190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005198:	bf58      	it	pl
 800519a:	4253      	negpl	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	3336      	adds	r3, #54	; 0x36
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	125b      	asrs	r3, r3, #9
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	441a      	add	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80051d2:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <ps_sample+0x2d0>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e0:	eddf 6a76 	vldr	s13, [pc, #472]	; 80053bc <ps_sample+0x2d4>
 80051e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80051f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f8:	ee17 3a90 	vmov	r3, s15
 80051fc:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	ed93 7a01 	vldr	s14, [r3, #4]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800520e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005212:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80053c0 <ps_sample+0x2d8>
 8005216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	edd3 7a01 	vldr	s15, [r3, #4]
 8005226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d507      	bpl.n	8005240 <ps_sample+0x158>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	edd3 7a01 	vldr	s15, [r3, #4]
 8005236:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80053c0 <ps_sample+0x2d8>
 800523a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800523e:	e002      	b.n	8005246 <ps_sample+0x15e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	edd3 7a01 	vldr	s15, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005256:	4b58      	ldr	r3, [pc, #352]	; (80053b8 <ps_sample+0x2d0>)
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005268:	eddf 6a54 	vldr	s13, [pc, #336]	; 80053bc <ps_sample+0x2d4>
 800526c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800527c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005280:	ee17 3a90 	vmov	r3, s15
 8005284:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800529a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80053c0 <ps_sample+0x2d8>
 800529e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80052ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	d507      	bpl.n	80052c8 <ps_sample+0x1e0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80052be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80053c0 <ps_sample+0x2d8>
 80052c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c6:	e002      	b.n	80052ce <ps_sample+0x1e6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	ed93 7a01 	vldr	s14, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 80052ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80052f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80053c4 <ps_sample+0x2dc>
 80052f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	dd03      	ble.n	8005306 <ps_sample+0x21e>
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	e00a      	b.n	800531c <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005306:	edd7 7a03 	vldr	s15, [r7, #12]
 800530a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80053c8 <ps_sample+0x2e0>
 800530e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005316:	d501      	bpl.n	800531c <ps_sample+0x234>
 8005318:	2301      	movs	r3, #1
 800531a:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	441a      	add	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <ps_sample+0x25e>
		encoder->turns = 0;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	ed93 7a01 	vldr	s14, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80053c0 <ps_sample+0x2d8>
 800535e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	edc3 7a03 	vstr	s15, [r3, #12]
//
//	float vel = (new_pos_avg - old_pos_avg)/(dt*9.0);



	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005378:	ee77 6a67 	vsub.f32	s13, s14, s15
 800537c:	edd7 7a00 	vldr	s15, [r7]
 8005380:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80053a8:	bf00      	nop
 80053aa:	3728      	adds	r7, #40	; 0x28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	48000400 	.word	0x48000400
 80053b4:	20009748 	.word	0x20009748
 80053b8:	20000758 	.word	0x20000758
 80053bc:	47800000 	.word	0x47800000
 80053c0:	40c90fdb 	.word	0x40c90fdb
 80053c4:	40490fdb 	.word	0x40490fdb
 80053c8:	c0490fdb 	.word	0xc0490fdb

080053cc <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053da:	4619      	mov	r1, r3
 80053dc:	4818      	ldr	r0, [pc, #96]	; (8005440 <ps_print+0x74>)
 80053de:	f009 fcdf 	bl	800eda0 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e6:	4619      	mov	r1, r3
 80053e8:	4816      	ldr	r0, [pc, #88]	; (8005444 <ps_print+0x78>)
 80053ea:	f009 fcd9 	bl	800eda0 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f8d0 	bl	8000598 <__aeabi_f2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4812      	ldr	r0, [pc, #72]	; (8005448 <ps_print+0x7c>)
 80053fe:	f009 fccf 	bl	800eda0 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fb f8c6 	bl	8000598 <__aeabi_f2d>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	480e      	ldr	r0, [pc, #56]	; (800544c <ps_print+0x80>)
 8005412:	f009 fcc5 	bl	800eda0 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	4618      	mov	r0, r3
 800541c:	f7fb f8bc 	bl	8000598 <__aeabi_f2d>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	480a      	ldr	r0, [pc, #40]	; (8005450 <ps_print+0x84>)
 8005426:	f009 fcbb 	bl	800eda0 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005430:	4619      	mov	r1, r3
 8005432:	4808      	ldr	r0, [pc, #32]	; (8005454 <ps_print+0x88>)
 8005434:	f009 fcb4 	bl	800eda0 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	08013944 	.word	0x08013944
 8005444:	0801394c 	.word	0x0801394c
 8005448:	08013964 	.word	0x08013964
 800544c:	08013978 	.word	0x08013978
 8005450:	0801398c 	.word	0x0801398c
 8005454:	080139a0 	.word	0x080139a0

08005458 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd fa00 	bl	800286c <flash_writer_init>
	pr->sector = sector;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	60da      	str	r2, [r3, #12]
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	f7fd fa0f 	bl	80028a8 <flash_writer_open>
    pr->ready = true;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	741a      	strb	r2, [r3, #16]
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005498:	b084      	sub	sp, #16
 800549a:	b490      	push	{r4, r7}
 800549c:	af00      	add	r7, sp, #0
 800549e:	f107 0408 	add.w	r4, r7, #8
 80054a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 80054a6:	7e3b      	ldrb	r3, [r7, #24]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc90      	pop	{r4, r7}
 80054ae:	b004      	add	sp, #16
 80054b0:	4770      	bx	lr
	...

080054b4 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e00d      	b.n	80054de <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	4a17      	ldr	r2, [pc, #92]	; (8005524 <preference_writer_flush+0x70>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	460b      	mov	r3, r1
 80054d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80054d4:	f7fd f9fa 	bl	80028cc <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2bff      	cmp	r3, #255	; 0xff
 80054e2:	ddee      	ble.n	80054c2 <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 80054e4:	e012      	b.n	800550c <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054ee:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <preference_writer_flush+0x74>)
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	eeb0 0a67 	vmov.f32	s0, s15
 80054fe:	460b      	mov	r3, r1
 8005500:	ca07      	ldmia	r2, {r0, r1, r2}
 8005502:	f7fd f9ff 	bl	8002904 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005512:	dbe8      	blt.n	80054e6 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	741a      	strb	r2, [r3, #16]
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000758 	.word	0x20000758
 8005528:	20000658 	.word	0x20000658

0800552c <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 800552c:	b084      	sub	sp, #16
 800552e:	b590      	push	{r4, r7, lr}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	f107 0418 	add.w	r4, r7, #24
 8005538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 800553c:	2300      	movs	r3, #0
 800553e:	607b      	str	r3, [r7, #4]
 8005540:	e00d      	b.n	800555e <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f107 0218 	add.w	r2, r7, #24
 8005548:	ca07      	ldmia	r2, {r0, r1, r2}
 800554a:	f7fd fa07 	bl	800295c <flash_read_int>
 800554e:	4602      	mov	r2, r0
 8005550:	4915      	ldr	r1, [pc, #84]	; (80055a8 <preference_writer_load+0x7c>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2bff      	cmp	r3, #255	; 0xff
 8005562:	ddee      	ble.n	8005542 <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005564:	e013      	b.n	800558e <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 800556e:	4613      	mov	r3, r2
 8005570:	f107 0218 	add.w	r2, r7, #24
 8005574:	ca07      	ldmia	r2, {r0, r1, r2}
 8005576:	f7fd fa07 	bl	8002988 <flash_read_float>
 800557a:	eef0 7a40 	vmov.f32	s15, s0
 800557e:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <preference_writer_load+0x80>)
 8005580:	00a3      	lsls	r3, r4, #2
 8005582:	4413      	add	r3, r2
 8005584:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3301      	adds	r3, #1
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005594:	dbe7      	blt.n	8005566 <preference_writer_load+0x3a>
    }
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80055a2:	b004      	add	sp, #16
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000758 	.word	0x20000758
 80055ac:	20000658 	.word	0x20000658

080055b0 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fd f9be 	bl	8002942 <flash_writer_close>
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80055d4:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <MX_SPI1_Init+0x74>)
 80055d6:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <MX_SPI1_Init+0x78>)
 80055d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055da:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <MX_SPI1_Init+0x74>)
 80055dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055e2:	4b18      	ldr	r3, [pc, #96]	; (8005644 <MX_SPI1_Init+0x74>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80055e8:	4b16      	ldr	r3, [pc, #88]	; (8005644 <MX_SPI1_Init+0x74>)
 80055ea:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80055ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055f0:	4b14      	ldr	r3, [pc, #80]	; (8005644 <MX_SPI1_Init+0x74>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <MX_SPI1_Init+0x74>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055fc:	4b11      	ldr	r3, [pc, #68]	; (8005644 <MX_SPI1_Init+0x74>)
 80055fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005602:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <MX_SPI1_Init+0x74>)
 8005606:	2228      	movs	r2, #40	; 0x28
 8005608:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800560a:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <MX_SPI1_Init+0x74>)
 800560c:	2200      	movs	r2, #0
 800560e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <MX_SPI1_Init+0x74>)
 8005612:	2200      	movs	r2, #0
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <MX_SPI1_Init+0x74>)
 8005618:	2200      	movs	r2, #0
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <MX_SPI1_Init+0x74>)
 800561e:	2207      	movs	r2, #7
 8005620:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <MX_SPI1_Init+0x74>)
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <MX_SPI1_Init+0x74>)
 800562a:	2208      	movs	r2, #8
 800562c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800562e:	4805      	ldr	r0, [pc, #20]	; (8005644 <MX_SPI1_Init+0x74>)
 8005630:	f004 fce0 	bl	8009ff4 <HAL_SPI_Init>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800563a:	f7ff fbdb 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200096e4 	.word	0x200096e4
 8005648:	40013000 	.word	0x40013000

0800564c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <MX_SPI2_Init+0x78>)
 8005654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005656:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800565c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800565e:	4b18      	ldr	r3, [pc, #96]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005660:	2200      	movs	r2, #0
 8005662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005664:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005666:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800566a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800566c:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <MX_SPI2_Init+0x74>)
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005674:	2201      	movs	r2, #1
 8005676:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <MX_SPI2_Init+0x74>)
 800567a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005682:	2210      	movs	r2, #16
 8005684:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005686:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005688:	2200      	movs	r2, #0
 800568a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <MX_SPI2_Init+0x74>)
 800568e:	2200      	movs	r2, #0
 8005690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <MX_SPI2_Init+0x74>)
 8005694:	2200      	movs	r2, #0
 8005696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <MX_SPI2_Init+0x74>)
 800569a:	2207      	movs	r2, #7
 800569c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <MX_SPI2_Init+0x74>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <MX_SPI2_Init+0x74>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80056aa:	4805      	ldr	r0, [pc, #20]	; (80056c0 <MX_SPI2_Init+0x74>)
 80056ac:	f004 fca2 	bl	8009ff4 <HAL_SPI_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80056b6:	f7ff fb9d 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20009748 	.word	0x20009748
 80056c4:	40003800 	.word	0x40003800

080056c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	; 0x30
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d0:	f107 031c 	add.w	r3, r7, #28
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <HAL_SPI_MspInit+0xdc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d129      	bne.n	800573e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056ea:	4b2f      	ldr	r3, [pc, #188]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	4a2e      	ldr	r2, [pc, #184]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 80056f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056f4:	6613      	str	r3, [r2, #96]	; 0x60
 80056f6:	4b2c      	ldr	r3, [pc, #176]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 8005704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005706:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800570e:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800571a:	23e0      	movs	r3, #224	; 0xe0
 800571c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571e:	2302      	movs	r3, #2
 8005720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005726:	2300      	movs	r3, #0
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800572a:	2305      	movs	r3, #5
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572e:	f107 031c 	add.w	r3, r7, #28
 8005732:	4619      	mov	r1, r3
 8005734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005738:	f003 fa6a 	bl	8008c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800573c:	e02d      	b.n	800579a <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_SPI_MspInit+0xe4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d128      	bne.n	800579a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005748:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 800574e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005752:	6593      	str	r3, [r2, #88]	; 0x58
 8005754:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 8005762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005764:	4a10      	ldr	r2, [pc, #64]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 8005766:	f043 0302 	orr.w	r3, r3, #2
 800576a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <HAL_SPI_MspInit+0xe0>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005778:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800577c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577e:	2302      	movs	r3, #2
 8005780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005786:	2300      	movs	r3, #0
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800578a:	2305      	movs	r3, #5
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578e:	f107 031c 	add.w	r3, r7, #28
 8005792:	4619      	mov	r1, r3
 8005794:	4806      	ldr	r0, [pc, #24]	; (80057b0 <HAL_SPI_MspInit+0xe8>)
 8005796:	f003 fa3b 	bl	8008c10 <HAL_GPIO_Init>
}
 800579a:	bf00      	nop
 800579c:	3730      	adds	r7, #48	; 0x30
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40013000 	.word	0x40013000
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40003800 	.word	0x40003800
 80057b0:	48000400 	.word	0x48000400

080057b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_MspInit+0x44>)
 80057bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <HAL_MspInit+0x44>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6613      	str	r3, [r2, #96]	; 0x60
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_MspInit+0x44>)
 80057c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_MspInit+0x44>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <HAL_MspInit+0x44>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6593      	str	r3, [r2, #88]	; 0x58
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_MspInit+0x44>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <HAL_InitTick+0xd0>)
 8005814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005816:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <HAL_InitTick+0xd0>)
 8005818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800581c:	6613      	str	r3, [r2, #96]	; 0x60
 800581e:	4b2b      	ldr	r3, [pc, #172]	; (80058cc <HAL_InitTick+0xd0>)
 8005820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800582a:	f107 020c 	add.w	r2, r7, #12
 800582e:	f107 0310 	add.w	r3, r7, #16
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f004 f917 	bl	8009a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800583a:	f004 f8ff 	bl	8009a3c <HAL_RCC_GetPCLK2Freq>
 800583e:	4603      	mov	r3, r0
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	4a22      	ldr	r2, [pc, #136]	; (80058d0 <HAL_InitTick+0xd4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	0c9b      	lsrs	r3, r3, #18
 800584e:	3b01      	subs	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005852:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <HAL_InitTick+0xd8>)
 8005854:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <HAL_InitTick+0xdc>)
 8005856:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <HAL_InitTick+0xd8>)
 800585a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800585e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_InitTick+0xd8>)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005866:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <HAL_InitTick+0xd8>)
 8005868:	2200      	movs	r2, #0
 800586a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_InitTick+0xd8>)
 800586e:	2200      	movs	r2, #0
 8005870:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8005872:	4818      	ldr	r0, [pc, #96]	; (80058d4 <HAL_InitTick+0xd8>)
 8005874:	f004 ffe0 	bl	800a838 <HAL_TIM_Base_Init>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800587e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11b      	bne.n	80058be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005886:	4813      	ldr	r0, [pc, #76]	; (80058d4 <HAL_InitTick+0xd8>)
 8005888:	f005 f82e 	bl	800a8e8 <HAL_TIM_Base_Start_IT>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005896:	2b00      	cmp	r3, #0
 8005898:	d111      	bne.n	80058be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800589a:	2019      	movs	r0, #25
 800589c:	f002 f8ca 	bl	8007a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b0f      	cmp	r3, #15
 80058a4:	d808      	bhi.n	80058b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80058a6:	2200      	movs	r2, #0
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	2019      	movs	r0, #25
 80058ac:	f002 f8a8 	bl	8007a00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <HAL_InitTick+0xe0>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e002      	b.n	80058be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80058be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3730      	adds	r7, #48	; 0x30
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000
 80058d0:	431bde83 	.word	0x431bde83
 80058d4:	200097ac 	.word	0x200097ac
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	20000024 	.word	0x20000024

080058e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80058e4:	e7fe      	b.n	80058e4 <NMI_Handler+0x4>

080058e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ea:	e7fe      	b.n	80058ea <HardFault_Handler+0x4>

080058ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058f0:	e7fe      	b.n	80058f0 <MemManage_Handler+0x4>

080058f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058f6:	e7fe      	b.n	80058f6 <BusFault_Handler+0x4>

080058f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058fc:	e7fe      	b.n	80058fc <UsageFault_Handler+0x4>

080058fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058fe:	b480      	push	{r7}
 8005900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800591a:	b480      	push	{r7}
 800591c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800592c:	bf00      	nop
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800593c:	4802      	ldr	r0, [pc, #8]	; (8005948 <DMA1_Channel1_IRQHandler+0x10>)
 800593e:	f002 fbb9 	bl	80080b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000458 	.word	0x20000458

0800594c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005950:	4802      	ldr	r0, [pc, #8]	; (800595c <DMA1_Channel2_IRQHandler+0x10>)
 8005952:	f002 fbaf 	bl	80080b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200004b8 	.word	0x200004b8

08005960 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005964:	4802      	ldr	r0, [pc, #8]	; (8005970 <DMA1_Channel3_IRQHandler+0x10>)
 8005966:	f002 fba5 	bl	80080b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000518 	.word	0x20000518

08005974 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8005978:	4802      	ldr	r0, [pc, #8]	; (8005984 <DMA1_Channel4_IRQHandler+0x10>)
 800597a:	f002 fb9b 	bl	80080b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000578 	.word	0x20000578

08005988 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800598c:	4802      	ldr	r0, [pc, #8]	; (8005998 <FDCAN1_IT0_IRQHandler+0x10>)
 800598e:	f002 fdfd 	bl	800858c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200005f4 	.word	0x200005f4

0800599c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059a0:	4802      	ldr	r0, [pc, #8]	; (80059ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80059a2:	f005 f983 	bl	800acac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200097ac 	.word	0x200097ac

080059b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/* Sample ADCs */
	analog_sample(&controller);
 80059b4:	480c      	ldr	r0, [pc, #48]	; (80059e8 <TIM2_IRQHandler+0x38>)
 80059b6:	f7fd f8a5 	bl	8002b04 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80059ba:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80059ec <TIM2_IRQHandler+0x3c>
 80059be:	480c      	ldr	r0, [pc, #48]	; (80059f0 <TIM2_IRQHandler+0x40>)
 80059c0:	f7ff fb92 	bl	80050e8 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 80059c4:	480b      	ldr	r0, [pc, #44]	; (80059f4 <TIM2_IRQHandler+0x44>)
 80059c6:	f7fd ff63 	bl	8003890 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 80059ca:	f000 f83d 	bl	8005a48 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <TIM2_IRQHandler+0x38>)
 80059d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <TIM2_IRQHandler+0x38>)
 80059d8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80059dc:	4806      	ldr	r0, [pc, #24]	; (80059f8 <TIM2_IRQHandler+0x48>)
 80059de:	f005 f965 	bl	800acac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000b6c 	.word	0x20000b6c
 80059ec:	37d1b717 	.word	0x37d1b717
 80059f0:	20000e74 	.word	0x20000e74
 80059f4:	20000e64 	.word	0x20000e64
 80059f8:	200097fc 	.word	0x200097fc

080059fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	HAL_UART_IRQHandler(&huart3);
 8005a02:	4809      	ldr	r0, [pc, #36]	; (8005a28 <USART3_IRQHandler+0x2c>)
 8005a04:	f006 fbd0 	bl	800c1a8 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <USART3_IRQHandler+0x30>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	4619      	mov	r1, r3
 8005a12:	4807      	ldr	r0, [pc, #28]	; (8005a30 <USART3_IRQHandler+0x34>)
 8005a14:	f7fe f8e2 	bl	8003bdc <update_fsm>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005a18:	4803      	ldr	r0, [pc, #12]	; (8005a28 <USART3_IRQHandler+0x2c>)
 8005a1a:	f006 fbc5 	bl	800c1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20009894 	.word	0x20009894
 8005a2c:	200096e0 	.word	0x200096e0
 8005a30:	20000e64 	.word	0x20000e64

08005a34 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005a38:	4802      	ldr	r0, [pc, #8]	; (8005a44 <TIM8_UP_IRQHandler+0x10>)
 8005a3a:	f005 f937 	bl	800acac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20009848 	.word	0x20009848

08005a48 <can_tx_rx>:

/* USER CODE BEGIN 1 */


void can_tx_rx(void){ //JB
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
//			unpack_cmd(can_rx, controller.commands);	// Unpack commands
//			controller.timeout = 0;					// Reset timeout counter
//		}
//	}

}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
	return 1;
 8005a5a:	2301      	movs	r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <_kill>:

int _kill(int pid, int sig)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a70:	f008 fadc 	bl	800e02c <__errno>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2216      	movs	r2, #22
 8005a78:	601a      	str	r2, [r3, #0]
	return -1;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <_exit>:

void _exit (int status)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff ffe7 	bl	8005a66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a98:	e7fe      	b.n	8005a98 <_exit+0x12>

08005a9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e00a      	b.n	8005ac2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005aac:	f3af 8000 	nop.w
 8005ab0:	4601      	mov	r1, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	60ba      	str	r2, [r7, #8]
 8005ab8:	b2ca      	uxtb	r2, r1
 8005aba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	dbf0      	blt.n	8005aac <_read+0x12>
	}

return len;
 8005aca:	687b      	ldr	r3, [r7, #4]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e009      	b.n	8005afa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	60ba      	str	r2, [r7, #8]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fa6e 	bl	8005fd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3301      	adds	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	dbf1      	blt.n	8005ae6 <_write+0x12>
	}
	return len;
 8005b02:	687b      	ldr	r3, [r7, #4]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_close>:

int _close(int file)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	return -1;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b34:	605a      	str	r2, [r3, #4]
	return 0;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_isatty>:

int _isatty(int file)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	return 1;
 8005b4c:	2301      	movs	r3, #1
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
	return 0;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <_sbrk+0x50>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <_sbrk+0x16>
		heap_end = &end;
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <_sbrk+0x50>)
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <_sbrk+0x54>)
 8005b88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <_sbrk+0x50>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <_sbrk+0x50>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	466a      	mov	r2, sp
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d907      	bls.n	8005bae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b9e:	f008 fa45 	bl	800e02c <__errno>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	220c      	movs	r2, #12
 8005ba6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	e006      	b.n	8005bbc <_sbrk+0x48>
	}

	heap_end += incr;
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <_sbrk+0x50>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4a03      	ldr	r2, [pc, #12]	; (8005bc4 <_sbrk+0x50>)
 8005bb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200097f8 	.word	0x200097f8
 8005bc8:	20009938 	.word	0x20009938

08005bcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <SystemInit+0x20>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	4a05      	ldr	r2, [pc, #20]	; (8005bec <SystemInit+0x20>)
 8005bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	e000ed00 	.word	0xe000ed00

08005bf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf6:	f107 031c 	add.w	r3, r7, #28
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c02:	463b      	mov	r3, r7
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	615a      	str	r2, [r3, #20]
 8005c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c14:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8005c28:	4b28      	ldr	r3, [pc, #160]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c30:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c36:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c3c:	4823      	ldr	r0, [pc, #140]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c3e:	f004 fecb 	bl	800a9d8 <HAL_TIM_PWM_Init>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005c48:	f7ff f8d4 	bl	8004df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c54:	f107 031c 	add.w	r3, r7, #28
 8005c58:	4619      	mov	r1, r3
 8005c5a:	481c      	ldr	r0, [pc, #112]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c5c:	f006 f88c 	bl	800bd78 <HAL_TIMEx_MasterConfigSynchronization>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8005c66:	f7ff f8c5 	bl	8004df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8005c6a:	2370      	movs	r3, #112	; 0x70
 8005c6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4812      	ldr	r0, [pc, #72]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c82:	f005 f993 	bl	800afac <HAL_TIM_PWM_ConfigChannel>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8005c8c:	f7ff f8b2 	bl	8004df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c90:	463b      	mov	r3, r7
 8005c92:	2204      	movs	r2, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	480d      	ldr	r0, [pc, #52]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005c98:	f005 f988 	bl	800afac <HAL_TIM_PWM_ConfigChannel>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8005ca2:	f7ff f8a7 	bl	8004df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	2208      	movs	r2, #8
 8005caa:	4619      	mov	r1, r3
 8005cac:	4807      	ldr	r0, [pc, #28]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005cae:	f005 f97d 	bl	800afac <HAL_TIM_PWM_ConfigChannel>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8005cb8:	f7ff f89c 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005cbc:	4803      	ldr	r0, [pc, #12]	; (8005ccc <MX_TIM2_Init+0xdc>)
 8005cbe:	f000 f8a5 	bl	8005e0c <HAL_TIM_MspPostInit>

}
 8005cc2:	bf00      	nop
 8005cc4:	3728      	adds	r7, #40	; 0x28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200097fc 	.word	0x200097fc

08005cd0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
 8005ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005cee:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005cf0:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <MX_TIM8_Init+0xa4>)
 8005cf2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20999;
 8005d00:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d02:	f245 2207 	movw	r2, #20999	; 0x5207
 8005d06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005d1a:	4815      	ldr	r0, [pc, #84]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d1c:	f004 fd8c 	bl	800a838 <HAL_TIM_Base_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8005d26:	f7ff f865 	bl	8004df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005d30:	f107 0310 	add.w	r3, r7, #16
 8005d34:	4619      	mov	r1, r3
 8005d36:	480e      	ldr	r0, [pc, #56]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d38:	f005 fa4c 	bl	800b1d4 <HAL_TIM_ConfigClockSource>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8005d42:	f7ff f857 	bl	8004df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4806      	ldr	r0, [pc, #24]	; (8005d70 <MX_TIM8_Init+0xa0>)
 8005d58:	f006 f80e 	bl	800bd78 <HAL_TIMEx_MasterConfigSynchronization>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005d62:	f7ff f847 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005d66:	bf00      	nop
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20009848 	.word	0x20009848
 8005d74:	40013400 	.word	0x40013400

08005d78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d113      	bne.n	8005db2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_TIM_PWM_MspInit+0x44>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <HAL_TIM_PWM_MspInit+0x44>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6593      	str	r3, [r2, #88]	; 0x58
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_TIM_PWM_MspInit+0x44>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005da2:	2200      	movs	r2, #0
 8005da4:	2100      	movs	r1, #0
 8005da6:	201c      	movs	r0, #28
 8005da8:	f001 fe2a 	bl	8007a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005dac:	201c      	movs	r0, #28
 8005dae:	f001 fe41 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40021000 	.word	0x40021000

08005dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <HAL_TIM_Base_MspInit+0x44>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d113      	bne.n	8005dfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <HAL_TIM_Base_MspInit+0x48>)
 8005dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd6:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <HAL_TIM_Base_MspInit+0x48>)
 8005dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_TIM_Base_MspInit+0x48>)
 8005de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8005dea:	2200      	movs	r2, #0
 8005dec:	2100      	movs	r1, #0
 8005dee:	202c      	movs	r0, #44	; 0x2c
 8005df0:	f001 fe06 	bl	8007a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8005df4:	202c      	movs	r0, #44	; 0x2c
 8005df6:	f001 fe1d 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	60da      	str	r2, [r3, #12]
 8005e22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d11c      	bne.n	8005e68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2e:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <HAL_TIM_MspPostInit+0x64>)
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	4a0f      	ldr	r2, [pc, #60]	; (8005e70 <HAL_TIM_MspPostInit+0x64>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_TIM_MspPostInit+0x64>)
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005e46:	2307      	movs	r3, #7
 8005e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e56:	2301      	movs	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5a:	f107 030c 	add.w	r3, r7, #12
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e64:	f002 fed4 	bl	8008c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005e68:	bf00      	nop
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40021000 	.word	0x40021000

08005e74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e78:	4b22      	ldr	r3, [pc, #136]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005e7a:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <MX_USART3_UART_Init+0x94>)
 8005e7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e7e:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e86:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e92:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005e9a:	220c      	movs	r2, #12
 8005e9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e9e:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ea4:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eaa:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ebc:	4811      	ldr	r0, [pc, #68]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005ebe:	f006 f837 	bl	800bf30 <HAL_UART_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005ec8:	f7fe ff94 	bl	8004df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ecc:	2100      	movs	r1, #0
 8005ece:	480d      	ldr	r0, [pc, #52]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005ed0:	f007 ffd9 	bl	800de86 <HAL_UARTEx_SetTxFifoThreshold>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005eda:	f7fe ff8b 	bl	8004df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4808      	ldr	r0, [pc, #32]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005ee2:	f008 f80e 	bl	800df02 <HAL_UARTEx_SetRxFifoThreshold>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005eec:	f7fe ff82 	bl	8004df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005ef0:	4804      	ldr	r0, [pc, #16]	; (8005f04 <MX_USART3_UART_Init+0x90>)
 8005ef2:	f007 ff8f 	bl	800de14 <HAL_UARTEx_DisableFifoMode>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005efc:	f7fe ff7a 	bl	8004df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f00:	bf00      	nop
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20009894 	.word	0x20009894
 8005f08:	40004800 	.word	0x40004800

08005f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b09e      	sub	sp, #120	; 0x78
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f24:	f107 0310 	add.w	r3, r7, #16
 8005f28:	2254      	movs	r2, #84	; 0x54
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f008 f8b5 	bl	800e09c <memset>
  if(uartHandle->Instance==USART3)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <HAL_UART_MspInit+0xb8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d13e      	bne.n	8005fba <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f003 fe05 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005f54:	f7fe ff4e 	bl	8004df4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f58:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_UART_MspInit+0xbc>)
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5c:	4a1a      	ldr	r2, [pc, #104]	; (8005fc8 <HAL_UART_MspInit+0xbc>)
 8005f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f62:	6593      	str	r3, [r2, #88]	; 0x58
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_UART_MspInit+0xbc>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f70:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <HAL_UART_MspInit+0xbc>)
 8005f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f74:	4a14      	ldr	r2, [pc, #80]	; (8005fc8 <HAL_UART_MspInit+0xbc>)
 8005f76:	f043 0304 	orr.w	r3, r3, #4
 8005f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f7c:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <HAL_UART_MspInit+0xbc>)
 8005f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005f8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f96:	2300      	movs	r3, #0
 8005f98:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005f9a:	2307      	movs	r3, #7
 8005f9c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4809      	ldr	r0, [pc, #36]	; (8005fcc <HAL_UART_MspInit+0xc0>)
 8005fa6:	f002 fe33 	bl	8008c10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	2027      	movs	r0, #39	; 0x27
 8005fb0:	f001 fd26 	bl	8007a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005fb4:	2027      	movs	r0, #39	; 0x27
 8005fb6:	f001 fd3d 	bl	8007a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005fba:	bf00      	nop
 8005fbc:	3778      	adds	r7, #120	; 0x78
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40004800 	.word	0x40004800
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	48000800 	.word	0x48000800

08005fd0 <__io_putchar>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xffff);
 8005fd8:	1d39      	adds	r1, r7, #4
 8005fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4803      	ldr	r0, [pc, #12]	; (8005ff0 <__io_putchar+0x20>)
 8005fe2:	f005 fff5 	bl	800bfd0 <HAL_UART_Transmit>
return 0;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20009894 	.word	0x20009894

08005ff4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart3, (uint8_t *)Serial2RxBuffer, 1);
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	4904      	ldr	r1, [pc, #16]	; (8006010 <HAL_UART_RxCpltCallback+0x1c>)
 8006000:	4804      	ldr	r0, [pc, #16]	; (8006014 <HAL_UART_RxCpltCallback+0x20>)
 8006002:	f006 f87b 	bl	800c0fc <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200096e0 	.word	0x200096e0
 8006014:	20009894 	.word	0x20009894

08006018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006018:	480d      	ldr	r0, [pc, #52]	; (8006050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800601a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800601c:	480d      	ldr	r0, [pc, #52]	; (8006054 <LoopForever+0x6>)
  ldr r1, =_edata
 800601e:	490e      	ldr	r1, [pc, #56]	; (8006058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006020:	4a0e      	ldr	r2, [pc, #56]	; (800605c <LoopForever+0xe>)
  movs r3, #0
 8006022:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006024:	e002      	b.n	800602c <LoopCopyDataInit>

08006026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800602a:	3304      	adds	r3, #4

0800602c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800602c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800602e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006030:	d3f9      	bcc.n	8006026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006032:	4a0b      	ldr	r2, [pc, #44]	; (8006060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006034:	4c0b      	ldr	r4, [pc, #44]	; (8006064 <LoopForever+0x16>)
  movs r3, #0
 8006036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006038:	e001      	b.n	800603e <LoopFillZerobss>

0800603a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800603a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800603c:	3204      	adds	r2, #4

0800603e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800603e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006040:	d3fb      	bcc.n	800603a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006042:	f7ff fdc3 	bl	8005bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006046:	f007 fff7 	bl	800e038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800604a:	f7fe fbb1 	bl	80047b0 <main>

0800604e <LoopForever>:

LoopForever:
    b LoopForever
 800604e:	e7fe      	b.n	800604e <LoopForever>
  ldr   r0, =_estack
 8006050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006058:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 800605c:	080146e8 	.word	0x080146e8
  ldr r2, =_sbss
 8006060:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006064:	20009938 	.word	0x20009938

08006068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006068:	e7fe      	b.n	8006068 <ADC1_2_IRQHandler>

0800606a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006074:	2003      	movs	r0, #3
 8006076:	f001 fcb8 	bl	80079ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800607a:	200f      	movs	r0, #15
 800607c:	f7ff fbbe 	bl	80057fc <HAL_InitTick>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	71fb      	strb	r3, [r7, #7]
 800608a:	e001      	b.n	8006090 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800608c:	f7ff fb92 	bl	80057b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006090:	79fb      	ldrb	r3, [r7, #7]

}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <HAL_IncTick+0x1c>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_IncTick+0x20>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4413      	add	r3, r2
 80060aa:	4a03      	ldr	r2, [pc, #12]	; (80060b8 <HAL_IncTick+0x1c>)
 80060ac:	6013      	str	r3, [r2, #0]
}
 80060ae:	bf00      	nop
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	20009924 	.word	0x20009924
 80060bc:	20000028 	.word	0x20000028

080060c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return uwTick;
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <HAL_GetTick+0x14>)
 80060c6:	681b      	ldr	r3, [r3, #0]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20009924 	.word	0x20009924

080060d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060e0:	f7ff ffee 	bl	80060c0 <HAL_GetTick>
 80060e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d004      	beq.n	80060fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <HAL_Delay+0x40>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060fc:	bf00      	nop
 80060fe:	f7ff ffdf 	bl	80060c0 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	429a      	cmp	r2, r3
 800610c:	d8f7      	bhi.n	80060fe <HAL_Delay+0x26>
  {
  }
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000028 	.word	0x20000028

0800611c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3360      	adds	r3, #96	; 0x60
 8006196:	461a      	mov	r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <LL_ADC_SetOffset+0x44>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	03fff000 	.word	0x03fff000

080061cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3360      	adds	r3, #96	; 0x60
 80061da:	461a      	mov	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3360      	adds	r3, #96	; 0x60
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	431a      	orrs	r2, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3360      	adds	r3, #96	; 0x60
 800623e:	461a      	mov	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	431a      	orrs	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3360      	adds	r3, #96	; 0x60
 8006274:	461a      	mov	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	431a      	orrs	r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	615a      	str	r2, [r3, #20]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b087      	sub	sp, #28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3330      	adds	r3, #48	; 0x30
 80062f6:	461a      	mov	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	0a1b      	lsrs	r3, r3, #8
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	4413      	add	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	211f      	movs	r1, #31
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	43db      	mvns	r3, r3
 8006318:	401a      	ands	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0e9b      	lsrs	r3, r3, #26
 800631e:	f003 011f 	and.w	r1, r3, #31
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3314      	adds	r3, #20
 800634e:	461a      	mov	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	0e5b      	lsrs	r3, r3, #25
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	4413      	add	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	0d1b      	lsrs	r3, r3, #20
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	2107      	movs	r1, #7
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	401a      	ands	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	0d1b      	lsrs	r3, r3, #20
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	fa01 f303 	lsl.w	r3, r1, r3
 8006382:	431a      	orrs	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10a      	bne.n	80063be <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b4:	431a      	orrs	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80063bc:	e00a      	b.n	80063d4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ca:	43db      	mvns	r3, r3
 80063cc:	401a      	ands	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80063d4:	bf00      	nop
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	407f0000 	.word	0x407f0000

080063e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 031f 	and.w	r3, r3, #31
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800642c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6093      	str	r3, [r2, #8]
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006454:	d101      	bne.n	800645a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800647c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a4:	d101      	bne.n	80064aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064cc:	f043 0201 	orr.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <LL_ADC_IsEnabled+0x18>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <LL_ADC_IsEnabled+0x1a>
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006516:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800651a:	f043 0204 	orr.w	r2, r3, #4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b04      	cmp	r3, #4
 8006540:	d101      	bne.n	8006546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d101      	bne.n	800656c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006588:	2300      	movs	r3, #0
 800658a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1af      	b.n	80068f6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fa ff71 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ff3f 	bl	8006440 <LL_ADC_IsDeepPowerDownEnabled>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff25 	bl	800641c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff ff5a 	bl	8006490 <LL_ADC_IsInternalRegulatorEnabled>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d115      	bne.n	800660e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff ff3e 	bl	8006468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065ec:	4b9f      	ldr	r3, [pc, #636]	; (800686c <HAL_ADC_Init+0x2f0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	099b      	lsrs	r3, r3, #6
 80065f2:	4a9f      	ldr	r2, [pc, #636]	; (8006870 <HAL_ADC_Init+0x2f4>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	099b      	lsrs	r3, r3, #6
 80065fa:	3301      	adds	r3, #1
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006600:	e002      	b.n	8006608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	3b01      	subs	r3, #1
 8006606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f9      	bne.n	8006602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff ff3c 	bl	8006490 <LL_ADC_IsInternalRegulatorEnabled>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f043 0210 	orr.w	r2, r3, #16
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	f043 0201 	orr.w	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ff75 	bl	800652e <LL_ADC_REG_IsConversionOngoing>
 8006644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 8148 	bne.w	80068e4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8144 	bne.w	80068e4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006664:	f043 0202 	orr.w	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff ff35 	bl	80064e0 <LL_ADC_IsEnabled>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d141      	bne.n	8006700 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006684:	d004      	beq.n	8006690 <HAL_ADC_Init+0x114>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a7a      	ldr	r2, [pc, #488]	; (8006874 <HAL_ADC_Init+0x2f8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10f      	bne.n	80066b0 <HAL_ADC_Init+0x134>
 8006690:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006694:	f7ff ff24 	bl	80064e0 <LL_ADC_IsEnabled>
 8006698:	4604      	mov	r4, r0
 800669a:	4876      	ldr	r0, [pc, #472]	; (8006874 <HAL_ADC_Init+0x2f8>)
 800669c:	f7ff ff20 	bl	80064e0 <LL_ADC_IsEnabled>
 80066a0:	4603      	mov	r3, r0
 80066a2:	4323      	orrs	r3, r4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e012      	b.n	80066d6 <HAL_ADC_Init+0x15a>
 80066b0:	4871      	ldr	r0, [pc, #452]	; (8006878 <HAL_ADC_Init+0x2fc>)
 80066b2:	f7ff ff15 	bl	80064e0 <LL_ADC_IsEnabled>
 80066b6:	4604      	mov	r4, r0
 80066b8:	4870      	ldr	r0, [pc, #448]	; (800687c <HAL_ADC_Init+0x300>)
 80066ba:	f7ff ff11 	bl	80064e0 <LL_ADC_IsEnabled>
 80066be:	4603      	mov	r3, r0
 80066c0:	431c      	orrs	r4, r3
 80066c2:	486f      	ldr	r0, [pc, #444]	; (8006880 <HAL_ADC_Init+0x304>)
 80066c4:	f7ff ff0c 	bl	80064e0 <LL_ADC_IsEnabled>
 80066c8:	4603      	mov	r3, r0
 80066ca:	4323      	orrs	r3, r4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d012      	beq.n	8006700 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066e2:	d004      	beq.n	80066ee <HAL_ADC_Init+0x172>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a62      	ldr	r2, [pc, #392]	; (8006874 <HAL_ADC_Init+0x2f8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d101      	bne.n	80066f2 <HAL_ADC_Init+0x176>
 80066ee:	4a65      	ldr	r2, [pc, #404]	; (8006884 <HAL_ADC_Init+0x308>)
 80066f0:	e000      	b.n	80066f4 <HAL_ADC_Init+0x178>
 80066f2:	4a65      	ldr	r2, [pc, #404]	; (8006888 <HAL_ADC_Init+0x30c>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f7ff fd0e 	bl	800611c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7f5b      	ldrb	r3, [r3, #29]
 8006704:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800670a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006710:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006716:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800671e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800672a:	2b01      	cmp	r3, #1
 800672c:	d106      	bne.n	800673c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	3b01      	subs	r3, #1
 8006734:	045b      	lsls	r3, r3, #17
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4313      	orrs	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	4b4b      	ldr	r3, [pc, #300]	; (800688c <HAL_ADC_Init+0x310>)
 8006760:	4013      	ands	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	69b9      	ldr	r1, [r7, #24]
 8006768:	430b      	orrs	r3, r1
 800676a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fed1 	bl	800652e <LL_ADC_REG_IsConversionOngoing>
 800678c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fede 	bl	8006554 <LL_ADC_INJ_IsConversionOngoing>
 8006798:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d17f      	bne.n	80068a0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d17c      	bne.n	80068a0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80067aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c2:	f023 0302 	bic.w	r3, r3, #2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80067e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80067f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80067f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6911      	ldr	r1, [r2, #16]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6812      	ldr	r2, [r2, #0]
 8006800:	430b      	orrs	r3, r1
 8006802:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006806:	e013      	b.n	8006830 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006816:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800682c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006836:	2b01      	cmp	r3, #1
 8006838:	d12a      	bne.n	8006890 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006844:	f023 0304 	bic.w	r3, r3, #4
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006850:	4311      	orrs	r1, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006856:	4311      	orrs	r1, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800685c:	430a      	orrs	r2, r1
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	611a      	str	r2, [r3, #16]
 800686a:	e019      	b.n	80068a0 <HAL_ADC_Init+0x324>
 800686c:	20000020 	.word	0x20000020
 8006870:	053e2d63 	.word	0x053e2d63
 8006874:	50000100 	.word	0x50000100
 8006878:	50000400 	.word	0x50000400
 800687c:	50000500 	.word	0x50000500
 8006880:	50000600 	.word	0x50000600
 8006884:	50000300 	.word	0x50000300
 8006888:	50000700 	.word	0x50000700
 800688c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d10c      	bne.n	80068c2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	f023 010f 	bic.w	r1, r3, #15
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
 80068c0:	e007      	b.n	80068d2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 020f 	bic.w	r2, r2, #15
 80068d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	f043 0201 	orr.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80068e2:	e007      	b.n	80068f4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e8:	f043 0210 	orr.w	r2, r3, #16
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80068f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3724      	adds	r7, #36	; 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd90      	pop	{r4, r7, pc}
 80068fe:	bf00      	nop

08006900 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006910:	d004      	beq.n	800691c <HAL_ADC_Start+0x1c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a67      	ldr	r2, [pc, #412]	; (8006ab4 <HAL_ADC_Start+0x1b4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d101      	bne.n	8006920 <HAL_ADC_Start+0x20>
 800691c:	4b66      	ldr	r3, [pc, #408]	; (8006ab8 <HAL_ADC_Start+0x1b8>)
 800691e:	e000      	b.n	8006922 <HAL_ADC_Start+0x22>
 8006920:	4b66      	ldr	r3, [pc, #408]	; (8006abc <HAL_ADC_Start+0x1bc>)
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fd5e 	bl	80063e4 <LL_ADC_GetMultimode>
 8006928:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fdfd 	bl	800652e <LL_ADC_REG_IsConversionOngoing>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 80b4 	bne.w	8006aa4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_ADC_Start+0x4a>
 8006946:	2302      	movs	r3, #2
 8006948:	e0af      	b.n	8006aaa <HAL_ADC_Start+0x1aa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fe0c 	bl	8007570 <ADC_Enable>
 8006958:	4603      	mov	r3, r0
 800695a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 809b 	bne.w	8006a9a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a4d      	ldr	r2, [pc, #308]	; (8006ab4 <HAL_ADC_Start+0x1b4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_ADC_Start+0x96>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a4e      	ldr	r2, [pc, #312]	; (8006ac0 <HAL_ADC_Start+0x1c0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d002      	beq.n	8006992 <HAL_ADC_Start+0x92>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	e003      	b.n	800699a <HAL_ADC_Start+0x9a>
 8006992:	4b4c      	ldr	r3, [pc, #304]	; (8006ac4 <HAL_ADC_Start+0x1c4>)
 8006994:	e001      	b.n	800699a <HAL_ADC_Start+0x9a>
 8006996:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	4293      	cmp	r3, r2
 80069a0:	d002      	beq.n	80069a8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d106      	bne.n	80069d0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c6:	f023 0206 	bic.w	r2, r3, #6
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	661a      	str	r2, [r3, #96]	; 0x60
 80069ce:	e002      	b.n	80069d6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	221c      	movs	r2, #28
 80069dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a32      	ldr	r2, [pc, #200]	; (8006ab4 <HAL_ADC_Start+0x1b4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_ADC_Start+0x104>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a32      	ldr	r2, [pc, #200]	; (8006ac0 <HAL_ADC_Start+0x1c0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d002      	beq.n	8006a00 <HAL_ADC_Start+0x100>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	e003      	b.n	8006a08 <HAL_ADC_Start+0x108>
 8006a00:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <HAL_ADC_Start+0x1c4>)
 8006a02:	e001      	b.n	8006a08 <HAL_ADC_Start+0x108>
 8006a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d008      	beq.n	8006a22 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	d002      	beq.n	8006a22 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b09      	cmp	r3, #9
 8006a20:	d114      	bne.n	8006a4c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fd5e 	bl	8006506 <LL_ADC_REG_StartConversion>
 8006a4a:	e02d      	b.n	8006aa8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_ADC_Start+0x1b4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_ADC_Start+0x176>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_ADC_Start+0x1c0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d002      	beq.n	8006a72 <HAL_ADC_Start+0x172>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	e003      	b.n	8006a7a <HAL_ADC_Start+0x17a>
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <HAL_ADC_Start+0x1c4>)
 8006a74:	e001      	b.n	8006a7a <HAL_ADC_Start+0x17a>
 8006a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a7a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00f      	beq.n	8006aa8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a98:	e006      	b.n	8006aa8 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006aa2:	e001      	b.n	8006aa8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	50000100 	.word	0x50000100
 8006ab8:	50000300 	.word	0x50000300
 8006abc:	50000700 	.word	0x50000700
 8006ac0:	50000500 	.word	0x50000500
 8006ac4:	50000400 	.word	0x50000400

08006ac8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ada:	d004      	beq.n	8006ae6 <HAL_ADC_PollForConversion+0x1e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a77      	ldr	r2, [pc, #476]	; (8006cc0 <HAL_ADC_PollForConversion+0x1f8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d101      	bne.n	8006aea <HAL_ADC_PollForConversion+0x22>
 8006ae6:	4b77      	ldr	r3, [pc, #476]	; (8006cc4 <HAL_ADC_PollForConversion+0x1fc>)
 8006ae8:	e000      	b.n	8006aec <HAL_ADC_PollForConversion+0x24>
 8006aea:	4b77      	ldr	r3, [pc, #476]	; (8006cc8 <HAL_ADC_PollForConversion+0x200>)
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fc79 	bl	80063e4 <LL_ADC_GetMultimode>
 8006af2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d102      	bne.n	8006b02 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006afc:	2308      	movs	r3, #8
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	e037      	b.n	8006b72 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	d002      	beq.n	8006b14 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d111      	bne.n	8006b38 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e0c1      	b.n	8006cb6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006b32:	2304      	movs	r3, #4
 8006b34:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006b36:	e01c      	b.n	8006b72 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b40:	d004      	beq.n	8006b4c <HAL_ADC_PollForConversion+0x84>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a5e      	ldr	r2, [pc, #376]	; (8006cc0 <HAL_ADC_PollForConversion+0x1f8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_ADC_PollForConversion+0x88>
 8006b4c:	4b5d      	ldr	r3, [pc, #372]	; (8006cc4 <HAL_ADC_PollForConversion+0x1fc>)
 8006b4e:	e000      	b.n	8006b52 <HAL_ADC_PollForConversion+0x8a>
 8006b50:	4b5d      	ldr	r3, [pc, #372]	; (8006cc8 <HAL_ADC_PollForConversion+0x200>)
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fc54 	bl	8006400 <LL_ADC_GetMultiDMATransfer>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e0a3      	b.n	8006cb6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006b6e:	2304      	movs	r3, #4
 8006b70:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006b72:	f7ff faa5 	bl	80060c0 <HAL_GetTick>
 8006b76:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b78:	e021      	b.n	8006bbe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d01d      	beq.n	8006bbe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006b82:	f7ff fa9d 	bl	80060c0 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <HAL_ADC_PollForConversion+0xd0>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d112      	bne.n	8006bbe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10b      	bne.n	8006bbe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	f043 0204 	orr.w	r2, r3, #4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e07b      	b.n	8006cb6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0d6      	beq.n	8006b7a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fb6f 	bl	80062c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01c      	beq.n	8006c22 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7f5b      	ldrb	r3, [r3, #29]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d118      	bne.n	8006c22 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d111      	bne.n	8006c22 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1a:	f043 0201 	orr.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <HAL_ADC_PollForConversion+0x1f8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_ADC_PollForConversion+0x178>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a26      	ldr	r2, [pc, #152]	; (8006ccc <HAL_ADC_PollForConversion+0x204>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d002      	beq.n	8006c3c <HAL_ADC_PollForConversion+0x174>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	e003      	b.n	8006c44 <HAL_ADC_PollForConversion+0x17c>
 8006c3c:	4b24      	ldr	r3, [pc, #144]	; (8006cd0 <HAL_ADC_PollForConversion+0x208>)
 8006c3e:	e001      	b.n	8006c44 <HAL_ADC_PollForConversion+0x17c>
 8006c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d008      	beq.n	8006c5e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b05      	cmp	r3, #5
 8006c56:	d002      	beq.n	8006c5e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b09      	cmp	r3, #9
 8006c5c:	d104      	bne.n	8006c68 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e014      	b.n	8006c92 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_ADC_PollForConversion+0x1f8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_ADC_PollForConversion+0x1be>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_ADC_PollForConversion+0x204>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d002      	beq.n	8006c82 <HAL_ADC_PollForConversion+0x1ba>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	e003      	b.n	8006c8a <HAL_ADC_PollForConversion+0x1c2>
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <HAL_ADC_PollForConversion+0x208>)
 8006c84:	e001      	b.n	8006c8a <HAL_ADC_PollForConversion+0x1c2>
 8006c86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d104      	bne.n	8006ca2 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e008      	b.n	8006cb4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	220c      	movs	r2, #12
 8006cb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	50000100 	.word	0x50000100
 8006cc4:	50000300 	.word	0x50000300
 8006cc8:	50000700 	.word	0x50000700
 8006ccc:	50000500 	.word	0x50000500
 8006cd0:	50000400 	.word	0x50000400

08006cd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b0b6      	sub	sp, #216	; 0xd8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d102      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x24>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	f000 bc13 	b.w	800753a <HAL_ADC_ConfigChannel+0x84a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fc04 	bl	800652e <LL_ADC_REG_IsConversionOngoing>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f040 83f3 	bne.w	8007514 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6859      	ldr	r1, [r3, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f7ff fad3 	bl	80062e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fbf2 	bl	800652e <LL_ADC_REG_IsConversionOngoing>
 8006d4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fbfe 	bl	8006554 <LL_ADC_INJ_IsConversionOngoing>
 8006d58:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 81d9 	bne.w	8007118 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 81d4 	bne.w	8007118 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d78:	d10f      	bne.n	8006d9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	4619      	mov	r1, r3
 8006d86:	f7ff fada 	bl	800633e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fa81 	bl	800629a <LL_ADC_SetSamplingTimeCommonConfig>
 8006d98:	e00e      	b.n	8006db8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7ff fac9 	bl	800633e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2100      	movs	r1, #0
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fa71 	bl	800629a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	08db      	lsrs	r3, r3, #3
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d022      	beq.n	8006e20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6919      	ldr	r1, [r3, #16]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dea:	f7ff f9cb 	bl	8006184 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6919      	ldr	r1, [r3, #16]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7ff fa17 	bl	800622e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	6919      	ldr	r1, [r3, #16]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	7f1b      	ldrb	r3, [r3, #28]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <HAL_ADC_ConfigChannel+0x126>
 8006e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e14:	e000      	b.n	8006e18 <HAL_ADC_ConfigChannel+0x128>
 8006e16:	2300      	movs	r3, #0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f7ff fa23 	bl	8006264 <LL_ADC_SetOffsetSaturation>
 8006e1e:	e17b      	b.n	8007118 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2100      	movs	r1, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff f9d0 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x15c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff f9c5 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006e42:	4603      	mov	r3, r0
 8006e44:	0e9b      	lsrs	r3, r3, #26
 8006e46:	f003 021f 	and.w	r2, r3, #31
 8006e4a:	e01e      	b.n	8006e8a <HAL_ADC_ConfigChannel+0x19a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff f9ba 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e62:	fa93 f3a3 	rbit	r3, r3
 8006e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	e004      	b.n	8006e88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e82:	fab3 f383 	clz	r3, r3
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <HAL_ADC_ConfigChannel+0x1b2>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	0e9b      	lsrs	r3, r3, #26
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	e018      	b.n	8006ed4 <HAL_ADC_ConfigChannel+0x1e4>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006eae:	fa93 f3a3 	rbit	r3, r3
 8006eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006ec6:	2320      	movs	r3, #32
 8006ec8:	e004      	b.n	8006ed4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ece:	fab3 f383 	clz	r3, r3
 8006ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d106      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff f989 	bl	80061f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff f96d 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <HAL_ADC_ConfigChannel+0x222>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff f962 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	0e9b      	lsrs	r3, r3, #26
 8006f0c:	f003 021f 	and.w	r2, r3, #31
 8006f10:	e01e      	b.n	8006f50 <HAL_ADC_ConfigChannel+0x260>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2101      	movs	r1, #1
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff f957 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f28:	fa93 f3a3 	rbit	r3, r3
 8006f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006f40:	2320      	movs	r3, #32
 8006f42:	e004      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f48:	fab3 f383 	clz	r3, r3
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x278>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	0e9b      	lsrs	r3, r3, #26
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	e018      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x2aa>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f74:	fa93 f3a3 	rbit	r3, r3
 8006f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	e004      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f94:	fab3 f383 	clz	r3, r3
 8006f98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d106      	bne.n	8006fac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff f926 	bl	80061f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff f90a 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x2e8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff f8ff 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	0e9b      	lsrs	r3, r3, #26
 8006fd2:	f003 021f 	and.w	r2, r3, #31
 8006fd6:	e01e      	b.n	8007016 <HAL_ADC_ConfigChannel+0x326>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff f8f4 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fee:	fa93 f3a3 	rbit	r3, r3
 8006ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8007006:	2320      	movs	r3, #32
 8007008:	e004      	b.n	8007014 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800700a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800700e:	fab3 f383 	clz	r3, r3
 8007012:	b2db      	uxtb	r3, r3
 8007014:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800701e:	2b00      	cmp	r3, #0
 8007020:	d105      	bne.n	800702e <HAL_ADC_ConfigChannel+0x33e>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	0e9b      	lsrs	r3, r3, #26
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	e016      	b.n	800705c <HAL_ADC_ConfigChannel+0x36c>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800703a:	fa93 f3a3 	rbit	r3, r3
 800703e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800704e:	2320      	movs	r3, #32
 8007050:	e004      	b.n	800705c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007056:	fab3 f383 	clz	r3, r3
 800705a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800705c:	429a      	cmp	r2, r3
 800705e:	d106      	bne.n	800706e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff f8c5 	bl	80061f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2103      	movs	r1, #3
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff f8a9 	bl	80061cc <LL_ADC_GetOffsetChannel>
 800707a:	4603      	mov	r3, r0
 800707c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <HAL_ADC_ConfigChannel+0x3aa>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2103      	movs	r1, #3
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff f89e 	bl	80061cc <LL_ADC_GetOffsetChannel>
 8007090:	4603      	mov	r3, r0
 8007092:	0e9b      	lsrs	r3, r3, #26
 8007094:	f003 021f 	and.w	r2, r3, #31
 8007098:	e017      	b.n	80070ca <HAL_ADC_ConfigChannel+0x3da>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2103      	movs	r1, #3
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff f893 	bl	80061cc <LL_ADC_GetOffsetChannel>
 80070a6:	4603      	mov	r3, r0
 80070a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ac:	fa93 f3a3 	rbit	r3, r3
 80070b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80070b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80070b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80070bc:	2320      	movs	r3, #32
 80070be:	e003      	b.n	80070c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80070c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c2:	fab3 f383 	clz	r3, r3
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d105      	bne.n	80070e2 <HAL_ADC_ConfigChannel+0x3f2>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0e9b      	lsrs	r3, r3, #26
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	e011      	b.n	8007106 <HAL_ADC_ConfigChannel+0x416>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070ea:	fa93 f3a3 	rbit	r3, r3
 80070ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80070f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80070fa:	2320      	movs	r3, #32
 80070fc:	e003      	b.n	8007106 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	fab3 f383 	clz	r3, r3
 8007104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007106:	429a      	cmp	r2, r3
 8007108:	d106      	bne.n	8007118 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	2103      	movs	r1, #3
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff f870 	bl	80061f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff f9df 	bl	80064e0 <LL_ADC_IsEnabled>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 813d 	bne.w	80073a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6819      	ldr	r1, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	461a      	mov	r2, r3
 8007138:	f7ff f92c 	bl	8006394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	4aa2      	ldr	r2, [pc, #648]	; (80073cc <HAL_ADC_ConfigChannel+0x6dc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	f040 812e 	bne.w	80073a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <HAL_ADC_ConfigChannel+0x480>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	0e9b      	lsrs	r3, r3, #26
 800715e:	3301      	adds	r3, #1
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	2b09      	cmp	r3, #9
 8007166:	bf94      	ite	ls
 8007168:	2301      	movls	r3, #1
 800716a:	2300      	movhi	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	e019      	b.n	80071a4 <HAL_ADC_ConfigChannel+0x4b4>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007178:	fa93 f3a3 	rbit	r3, r3
 800717c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800717e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007180:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007188:	2320      	movs	r3, #32
 800718a:	e003      	b.n	8007194 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800718c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800718e:	fab3 f383 	clz	r3, r3
 8007192:	b2db      	uxtb	r3, r3
 8007194:	3301      	adds	r3, #1
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2b09      	cmp	r3, #9
 800719c:	bf94      	ite	ls
 800719e:	2301      	movls	r3, #1
 80071a0:	2300      	movhi	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d079      	beq.n	800729c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d107      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x4d4>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	0e9b      	lsrs	r3, r3, #26
 80071ba:	3301      	adds	r3, #1
 80071bc:	069b      	lsls	r3, r3, #26
 80071be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071c2:	e015      	b.n	80071f0 <HAL_ADC_ConfigChannel+0x500>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071cc:	fa93 f3a3 	rbit	r3, r3
 80071d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80071d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80071d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80071dc:	2320      	movs	r3, #32
 80071de:	e003      	b.n	80071e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80071e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e2:	fab3 f383 	clz	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	3301      	adds	r3, #1
 80071ea:	069b      	lsls	r3, r3, #26
 80071ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d109      	bne.n	8007210 <HAL_ADC_ConfigChannel+0x520>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	0e9b      	lsrs	r3, r3, #26
 8007202:	3301      	adds	r3, #1
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	2101      	movs	r1, #1
 800720a:	fa01 f303 	lsl.w	r3, r1, r3
 800720e:	e017      	b.n	8007240 <HAL_ADC_ConfigChannel+0x550>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007218:	fa93 f3a3 	rbit	r3, r3
 800721c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800721e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007220:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007228:	2320      	movs	r3, #32
 800722a:	e003      	b.n	8007234 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800722c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800722e:	fab3 f383 	clz	r3, r3
 8007232:	b2db      	uxtb	r3, r3
 8007234:	3301      	adds	r3, #1
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	2101      	movs	r1, #1
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	ea42 0103 	orr.w	r1, r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x576>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	0e9b      	lsrs	r3, r3, #26
 8007256:	3301      	adds	r3, #1
 8007258:	f003 021f 	and.w	r2, r3, #31
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	051b      	lsls	r3, r3, #20
 8007264:	e018      	b.n	8007298 <HAL_ADC_ConfigChannel+0x5a8>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	fa93 f3a3 	rbit	r3, r3
 8007272:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800727e:	2320      	movs	r3, #32
 8007280:	e003      	b.n	800728a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	b2db      	uxtb	r3, r3
 800728a:	3301      	adds	r3, #1
 800728c:	f003 021f 	and.w	r2, r3, #31
 8007290:	4613      	mov	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4413      	add	r3, r2
 8007296:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007298:	430b      	orrs	r3, r1
 800729a:	e07e      	b.n	800739a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d107      	bne.n	80072b8 <HAL_ADC_ConfigChannel+0x5c8>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	0e9b      	lsrs	r3, r3, #26
 80072ae:	3301      	adds	r3, #1
 80072b0:	069b      	lsls	r3, r3, #26
 80072b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072b6:	e015      	b.n	80072e4 <HAL_ADC_ConfigChannel+0x5f4>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	fa93 f3a3 	rbit	r3, r3
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80072d0:	2320      	movs	r3, #32
 80072d2:	e003      	b.n	80072dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	3301      	adds	r3, #1
 80072de:	069b      	lsls	r3, r3, #26
 80072e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <HAL_ADC_ConfigChannel+0x614>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	0e9b      	lsrs	r3, r3, #26
 80072f6:	3301      	adds	r3, #1
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2101      	movs	r1, #1
 80072fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007302:	e017      	b.n	8007334 <HAL_ADC_ConfigChannel+0x644>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	fa93 f3a3 	rbit	r3, r3
 8007310:	61fb      	str	r3, [r7, #28]
  return result;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800731c:	2320      	movs	r3, #32
 800731e:	e003      	b.n	8007328 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	fab3 f383 	clz	r3, r3
 8007326:	b2db      	uxtb	r3, r3
 8007328:	3301      	adds	r3, #1
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2101      	movs	r1, #1
 8007330:	fa01 f303 	lsl.w	r3, r1, r3
 8007334:	ea42 0103 	orr.w	r1, r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10d      	bne.n	8007360 <HAL_ADC_ConfigChannel+0x670>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	0e9b      	lsrs	r3, r3, #26
 800734a:	3301      	adds	r3, #1
 800734c:	f003 021f 	and.w	r2, r3, #31
 8007350:	4613      	mov	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	3b1e      	subs	r3, #30
 8007358:	051b      	lsls	r3, r3, #20
 800735a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800735e:	e01b      	b.n	8007398 <HAL_ADC_ConfigChannel+0x6a8>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	fa93 f3a3 	rbit	r3, r3
 800736c:	613b      	str	r3, [r7, #16]
  return result;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007378:	2320      	movs	r3, #32
 800737a:	e003      	b.n	8007384 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	fab3 f383 	clz	r3, r3
 8007382:	b2db      	uxtb	r3, r3
 8007384:	3301      	adds	r3, #1
 8007386:	f003 021f 	and.w	r2, r3, #31
 800738a:	4613      	mov	r3, r2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	3b1e      	subs	r3, #30
 8007392:	051b      	lsls	r3, r3, #20
 8007394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007398:	430b      	orrs	r3, r1
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	6892      	ldr	r2, [r2, #8]
 800739e:	4619      	mov	r1, r3
 80073a0:	f7fe ffcd 	bl	800633e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80be 	beq.w	800752e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ba:	d004      	beq.n	80073c6 <HAL_ADC_ConfigChannel+0x6d6>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a04      	ldr	r2, [pc, #16]	; (80073d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d10a      	bne.n	80073dc <HAL_ADC_ConfigChannel+0x6ec>
 80073c6:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80073c8:	e009      	b.n	80073de <HAL_ADC_ConfigChannel+0x6ee>
 80073ca:	bf00      	nop
 80073cc:	407f0000 	.word	0x407f0000
 80073d0:	80080000 	.word	0x80080000
 80073d4:	50000100 	.word	0x50000100
 80073d8:	50000300 	.word	0x50000300
 80073dc:	4b59      	ldr	r3, [pc, #356]	; (8007544 <HAL_ADC_ConfigChannel+0x854>)
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fec2 	bl	8006168 <LL_ADC_GetCommonPathInternalCh>
 80073e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a56      	ldr	r2, [pc, #344]	; (8007548 <HAL_ADC_ConfigChannel+0x858>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_ADC_ConfigChannel+0x70c>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a55      	ldr	r2, [pc, #340]	; (800754c <HAL_ADC_ConfigChannel+0x85c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d13a      	bne.n	8007472 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80073fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d134      	bne.n	8007472 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007410:	d005      	beq.n	800741e <HAL_ADC_ConfigChannel+0x72e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <HAL_ADC_ConfigChannel+0x860>)
 8007418:	4293      	cmp	r3, r2
 800741a:	f040 8085 	bne.w	8007528 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007426:	d004      	beq.n	8007432 <HAL_ADC_ConfigChannel+0x742>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a49      	ldr	r2, [pc, #292]	; (8007554 <HAL_ADC_ConfigChannel+0x864>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_ADC_ConfigChannel+0x746>
 8007432:	4a49      	ldr	r2, [pc, #292]	; (8007558 <HAL_ADC_ConfigChannel+0x868>)
 8007434:	e000      	b.n	8007438 <HAL_ADC_ConfigChannel+0x748>
 8007436:	4a43      	ldr	r2, [pc, #268]	; (8007544 <HAL_ADC_ConfigChannel+0x854>)
 8007438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800743c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe fe7d 	bl	8006142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007448:	4b44      	ldr	r3, [pc, #272]	; (800755c <HAL_ADC_ConfigChannel+0x86c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	099b      	lsrs	r3, r3, #6
 800744e:	4a44      	ldr	r2, [pc, #272]	; (8007560 <HAL_ADC_ConfigChannel+0x870>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	099b      	lsrs	r3, r3, #6
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	4613      	mov	r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007462:	e002      	b.n	800746a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3b01      	subs	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f9      	bne.n	8007464 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007470:	e05a      	b.n	8007528 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a3b      	ldr	r2, [pc, #236]	; (8007564 <HAL_ADC_ConfigChannel+0x874>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d125      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0x7d8>
 800747c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d11f      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a31      	ldr	r2, [pc, #196]	; (8007554 <HAL_ADC_ConfigChannel+0x864>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d104      	bne.n	800749c <HAL_ADC_ConfigChannel+0x7ac>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a34      	ldr	r2, [pc, #208]	; (8007568 <HAL_ADC_ConfigChannel+0x878>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d047      	beq.n	800752c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a4:	d004      	beq.n	80074b0 <HAL_ADC_ConfigChannel+0x7c0>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a2a      	ldr	r2, [pc, #168]	; (8007554 <HAL_ADC_ConfigChannel+0x864>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d101      	bne.n	80074b4 <HAL_ADC_ConfigChannel+0x7c4>
 80074b0:	4a29      	ldr	r2, [pc, #164]	; (8007558 <HAL_ADC_ConfigChannel+0x868>)
 80074b2:	e000      	b.n	80074b6 <HAL_ADC_ConfigChannel+0x7c6>
 80074b4:	4a23      	ldr	r2, [pc, #140]	; (8007544 <HAL_ADC_ConfigChannel+0x854>)
 80074b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7fe fe3e 	bl	8006142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074c6:	e031      	b.n	800752c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a27      	ldr	r2, [pc, #156]	; (800756c <HAL_ADC_ConfigChannel+0x87c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d12d      	bne.n	800752e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80074d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d127      	bne.n	800752e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <HAL_ADC_ConfigChannel+0x864>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d022      	beq.n	800752e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074f0:	d004      	beq.n	80074fc <HAL_ADC_ConfigChannel+0x80c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a17      	ldr	r2, [pc, #92]	; (8007554 <HAL_ADC_ConfigChannel+0x864>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d101      	bne.n	8007500 <HAL_ADC_ConfigChannel+0x810>
 80074fc:	4a16      	ldr	r2, [pc, #88]	; (8007558 <HAL_ADC_ConfigChannel+0x868>)
 80074fe:	e000      	b.n	8007502 <HAL_ADC_ConfigChannel+0x812>
 8007500:	4a10      	ldr	r2, [pc, #64]	; (8007544 <HAL_ADC_ConfigChannel+0x854>)
 8007502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f7fe fe18 	bl	8006142 <LL_ADC_SetCommonPathInternalCh>
 8007512:	e00c      	b.n	800752e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007518:	f043 0220 	orr.w	r2, r3, #32
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007526:	e002      	b.n	800752e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007528:	bf00      	nop
 800752a:	e000      	b.n	800752e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800752c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007536:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800753a:	4618      	mov	r0, r3
 800753c:	37d8      	adds	r7, #216	; 0xd8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	50000700 	.word	0x50000700
 8007548:	c3210000 	.word	0xc3210000
 800754c:	90c00010 	.word	0x90c00010
 8007550:	50000600 	.word	0x50000600
 8007554:	50000100 	.word	0x50000100
 8007558:	50000300 	.word	0x50000300
 800755c:	20000020 	.word	0x20000020
 8007560:	053e2d63 	.word	0x053e2d63
 8007564:	c7520000 	.word	0xc7520000
 8007568:	50000500 	.word	0x50000500
 800756c:	cb840000 	.word	0xcb840000

08007570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe ffaf 	bl	80064e0 <LL_ADC_IsEnabled>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d14d      	bne.n	8007624 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	4b28      	ldr	r3, [pc, #160]	; (8007630 <ADC_Enable+0xc0>)
 8007590:	4013      	ands	r3, r2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759a:	f043 0210 	orr.w	r2, r3, #16
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e039      	b.n	8007626 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe ff7e 	bl	80064b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80075bc:	f7fe fd80 	bl	80060c0 <HAL_GetTick>
 80075c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80075c2:	e028      	b.n	8007616 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe ff89 	bl	80064e0 <LL_ADC_IsEnabled>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe ff6d 	bl	80064b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80075de:	f7fe fd6f 	bl	80060c0 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d914      	bls.n	8007616 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d00d      	beq.n	8007616 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	f043 0210 	orr.w	r2, r3, #16
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760a:	f043 0201 	orr.w	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e007      	b.n	8007626 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d1cf      	bne.n	80075c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	8000003f 	.word	0x8000003f

08007634 <LL_ADC_IsEnabled>:
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <LL_ADC_IsEnabled+0x18>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <LL_ADC_IsEnabled+0x1a>
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <LL_ADC_REG_IsConversionOngoing>:
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d101      	bne.n	8007672 <LL_ADC_REG_IsConversionOngoing+0x18>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007680:	b590      	push	{r4, r7, lr}
 8007682:	b0a1      	sub	sp, #132	; 0x84
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800769a:	2302      	movs	r3, #2
 800769c:	e0e7      	b.n	800786e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80076a6:	2300      	movs	r3, #0
 80076a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80076aa:	2300      	movs	r3, #0
 80076ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076b6:	d102      	bne.n	80076be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80076b8:	4b6f      	ldr	r3, [pc, #444]	; (8007878 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	e009      	b.n	80076d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a6e      	ldr	r2, [pc, #440]	; (800787c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d102      	bne.n	80076ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80076c8:	4b6d      	ldr	r3, [pc, #436]	; (8007880 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80076ca:	60bb      	str	r3, [r7, #8]
 80076cc:	e001      	b.n	80076d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076dc:	f043 0220 	orr.w	r2, r3, #32
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0be      	b.n	800786e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff ffb1 	bl	800765a <LL_ADC_REG_IsConversionOngoing>
 80076f8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff ffab 	bl	800765a <LL_ADC_REG_IsConversionOngoing>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 80a0 	bne.w	800784c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800770c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 809c 	bne.w	800784c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800771c:	d004      	beq.n	8007728 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a55      	ldr	r2, [pc, #340]	; (8007878 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d101      	bne.n	800772c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007728:	4b56      	ldr	r3, [pc, #344]	; (8007884 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800772a:	e000      	b.n	800772e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800772c:	4b56      	ldr	r3, [pc, #344]	; (8007888 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800772e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d04b      	beq.n	80077d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	6859      	ldr	r1, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800774a:	035b      	lsls	r3, r3, #13
 800774c:	430b      	orrs	r3, r1
 800774e:	431a      	orrs	r2, r3
 8007750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007752:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800775c:	d004      	beq.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a45      	ldr	r2, [pc, #276]	; (8007878 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10f      	bne.n	8007788 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007768:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800776c:	f7ff ff62 	bl	8007634 <LL_ADC_IsEnabled>
 8007770:	4604      	mov	r4, r0
 8007772:	4841      	ldr	r0, [pc, #260]	; (8007878 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007774:	f7ff ff5e 	bl	8007634 <LL_ADC_IsEnabled>
 8007778:	4603      	mov	r3, r0
 800777a:	4323      	orrs	r3, r4
 800777c:	2b00      	cmp	r3, #0
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e012      	b.n	80077ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007788:	483c      	ldr	r0, [pc, #240]	; (800787c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800778a:	f7ff ff53 	bl	8007634 <LL_ADC_IsEnabled>
 800778e:	4604      	mov	r4, r0
 8007790:	483b      	ldr	r0, [pc, #236]	; (8007880 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007792:	f7ff ff4f 	bl	8007634 <LL_ADC_IsEnabled>
 8007796:	4603      	mov	r3, r0
 8007798:	431c      	orrs	r4, r3
 800779a:	483c      	ldr	r0, [pc, #240]	; (800788c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800779c:	f7ff ff4a 	bl	8007634 <LL_ADC_IsEnabled>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4323      	orrs	r3, r4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bf0c      	ite	eq
 80077a8:	2301      	moveq	r3, #1
 80077aa:	2300      	movne	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d056      	beq.n	8007860 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80077b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	6811      	ldr	r1, [r2, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	6892      	ldr	r2, [r2, #8]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	431a      	orrs	r2, r3
 80077ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077ce:	e047      	b.n	8007860 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80077d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077e4:	d004      	beq.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a23      	ldr	r2, [pc, #140]	; (8007878 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10f      	bne.n	8007810 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80077f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80077f4:	f7ff ff1e 	bl	8007634 <LL_ADC_IsEnabled>
 80077f8:	4604      	mov	r4, r0
 80077fa:	481f      	ldr	r0, [pc, #124]	; (8007878 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077fc:	f7ff ff1a 	bl	8007634 <LL_ADC_IsEnabled>
 8007800:	4603      	mov	r3, r0
 8007802:	4323      	orrs	r3, r4
 8007804:	2b00      	cmp	r3, #0
 8007806:	bf0c      	ite	eq
 8007808:	2301      	moveq	r3, #1
 800780a:	2300      	movne	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	e012      	b.n	8007836 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007810:	481a      	ldr	r0, [pc, #104]	; (800787c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007812:	f7ff ff0f 	bl	8007634 <LL_ADC_IsEnabled>
 8007816:	4604      	mov	r4, r0
 8007818:	4819      	ldr	r0, [pc, #100]	; (8007880 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800781a:	f7ff ff0b 	bl	8007634 <LL_ADC_IsEnabled>
 800781e:	4603      	mov	r3, r0
 8007820:	431c      	orrs	r4, r3
 8007822:	481a      	ldr	r0, [pc, #104]	; (800788c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007824:	f7ff ff06 	bl	8007634 <LL_ADC_IsEnabled>
 8007828:	4603      	mov	r3, r0
 800782a:	4323      	orrs	r3, r4
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d012      	beq.n	8007860 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800783a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007842:	f023 030f 	bic.w	r3, r3, #15
 8007846:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007848:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800784a:	e009      	b.n	8007860 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	f043 0220 	orr.w	r2, r3, #32
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800785e:	e000      	b.n	8007862 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007860:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800786a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800786e:	4618      	mov	r0, r3
 8007870:	3784      	adds	r7, #132	; 0x84
 8007872:	46bd      	mov	sp, r7
 8007874:	bd90      	pop	{r4, r7, pc}
 8007876:	bf00      	nop
 8007878:	50000100 	.word	0x50000100
 800787c:	50000400 	.word	0x50000400
 8007880:	50000500 	.word	0x50000500
 8007884:	50000300 	.word	0x50000300
 8007888:	50000700 	.word	0x50000700
 800788c:	50000600 	.word	0x50000600

08007890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <__NVIC_SetPriorityGrouping+0x44>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078ac:	4013      	ands	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078c2:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <__NVIC_SetPriorityGrouping+0x44>)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	60d3      	str	r3, [r2, #12]
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	e000ed00 	.word	0xe000ed00

080078d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078dc:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <__NVIC_GetPriorityGrouping+0x18>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	0a1b      	lsrs	r3, r3, #8
 80078e2:	f003 0307 	and.w	r3, r3, #7
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	e000ed00 	.word	0xe000ed00

080078f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007902:	2b00      	cmp	r3, #0
 8007904:	db0b      	blt.n	800791e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	f003 021f 	and.w	r2, r3, #31
 800790c:	4907      	ldr	r1, [pc, #28]	; (800792c <__NVIC_EnableIRQ+0x38>)
 800790e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	2001      	movs	r0, #1
 8007916:	fa00 f202 	lsl.w	r2, r0, r2
 800791a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	e000e100 	.word	0xe000e100

08007930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800793c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db0a      	blt.n	800795a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	490c      	ldr	r1, [pc, #48]	; (800797c <__NVIC_SetPriority+0x4c>)
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	0112      	lsls	r2, r2, #4
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	440b      	add	r3, r1
 8007954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007958:	e00a      	b.n	8007970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	b2da      	uxtb	r2, r3
 800795e:	4908      	ldr	r1, [pc, #32]	; (8007980 <__NVIC_SetPriority+0x50>)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	3b04      	subs	r3, #4
 8007968:	0112      	lsls	r2, r2, #4
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	440b      	add	r3, r1
 800796e:	761a      	strb	r2, [r3, #24]
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	e000e100 	.word	0xe000e100
 8007980:	e000ed00 	.word	0xe000ed00

08007984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007984:	b480      	push	{r7}
 8007986:	b089      	sub	sp, #36	; 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f1c3 0307 	rsb	r3, r3, #7
 800799e:	2b04      	cmp	r3, #4
 80079a0:	bf28      	it	cs
 80079a2:	2304      	movcs	r3, #4
 80079a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	3304      	adds	r3, #4
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d902      	bls.n	80079b4 <NVIC_EncodePriority+0x30>
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3b03      	subs	r3, #3
 80079b2:	e000      	b.n	80079b6 <NVIC_EncodePriority+0x32>
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079b8:	f04f 32ff 	mov.w	r2, #4294967295
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	43da      	mvns	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	401a      	ands	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079cc:	f04f 31ff 	mov.w	r1, #4294967295
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	43d9      	mvns	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079dc:	4313      	orrs	r3, r2
         );
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3724      	adds	r7, #36	; 0x24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ff4c 	bl	8007890 <__NVIC_SetPriorityGrouping>
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a0e:	f7ff ff63 	bl	80078d8 <__NVIC_GetPriorityGrouping>
 8007a12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	6978      	ldr	r0, [r7, #20]
 8007a1a:	f7ff ffb3 	bl	8007984 <NVIC_EncodePriority>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a24:	4611      	mov	r1, r2
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff ff82 	bl	8007930 <__NVIC_SetPriority>
}
 8007a2c:	bf00      	nop
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff ff56 	bl	80078f4 <__NVIC_EnableIRQ>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e014      	b.n	8007a8c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fa fb70 	bl	8002158 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	795b      	ldrb	r3, [r3, #5]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_DAC_ConfigChannel+0x18>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e192      	b.n	8007dd2 <HAL_DAC_ConfigChannel+0x33e>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d174      	bne.n	8007baa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007ac0:	f7fe fafe 	bl	80060c0 <HAL_GetTick>
 8007ac4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d134      	bne.n	8007b36 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007acc:	e011      	b.n	8007af2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ace:	f7fe faf7 	bl	80060c0 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d90a      	bls.n	8007af2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f043 0208 	orr.w	r2, r3, #8
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2203      	movs	r2, #3
 8007aec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e16f      	b.n	8007dd2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e6      	bne.n	8007ace <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8007b00:	2001      	movs	r0, #1
 8007b02:	f7fe fae9 	bl	80060d8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8007b10:	e01e      	b.n	8007b50 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007b12:	f7fe fad5 	bl	80060c0 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d90a      	bls.n	8007b36 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f043 0208 	orr.w	r2, r3, #8
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2203      	movs	r2, #3
 8007b30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e14d      	b.n	8007dd2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dbe8      	blt.n	8007b12 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8007b40:	2001      	movs	r0, #1
 8007b42:	f7fe fac9 	bl	80060d8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b4e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f003 0310 	and.w	r3, r3, #16
 8007b5c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007b60:	fa01 f303 	lsl.w	r3, r1, r3
 8007b64:	43db      	mvns	r3, r3
 8007b66:	ea02 0103 	and.w	r1, r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	409a      	lsls	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	21ff      	movs	r1, #255	; 0xff
 8007b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b90:	43db      	mvns	r3, r3
 8007b92:	ea02 0103 	and.w	r1, r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	409a      	lsls	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d11d      	bne.n	8007bee <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	221f      	movs	r2, #31
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	43db      	mvns	r3, r3
 8007bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bca:	4013      	ands	r3, r2
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be2:	4313      	orrs	r3, r2
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c06:	4013      	ands	r3, r2
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d102      	bne.n	8007c18 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	e00f      	b.n	8007c38 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d102      	bne.n	8007c26 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007c20:	2301      	movs	r3, #1
 8007c22:	623b      	str	r3, [r7, #32]
 8007c24:	e008      	b.n	8007c38 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	e001      	b.n	8007c38 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	6a3a      	ldr	r2, [r7, #32]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43db      	mvns	r3, r3
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	791b      	ldrb	r3, [r3, #4]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d102      	bne.n	8007c6c <HAL_DAC_ConfigChannel+0x1d8>
 8007c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c6a:	e000      	b.n	8007c6e <HAL_DAC_ConfigChannel+0x1da>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c86:	4013      	ands	r3, r2
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	795b      	ldrb	r3, [r3, #5]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d102      	bne.n	8007c98 <HAL_DAC_ConfigChannel+0x204>
 8007c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c96:	e000      	b.n	8007c9a <HAL_DAC_ConfigChannel+0x206>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d114      	bne.n	8007cda <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007cb0:	f001 fea2 	bl	80099f8 <HAL_RCC_GetHCLKFreq>
 8007cb4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4a48      	ldr	r2, [pc, #288]	; (8007ddc <HAL_DAC_ConfigChannel+0x348>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d904      	bls.n	8007cc8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cc6:	e00f      	b.n	8007ce8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	4a45      	ldr	r2, [pc, #276]	; (8007de0 <HAL_DAC_ConfigChannel+0x34c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d90a      	bls.n	8007ce6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd8:	e006      	b.n	8007ce8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce4:	e000      	b.n	8007ce8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007ce6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f003 0310 	and.w	r3, r3, #16
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6819      	ldr	r1, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	43da      	mvns	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	400a      	ands	r2, r1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f003 0310 	and.w	r3, r3, #16
 8007d2e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	43db      	mvns	r3, r3
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f003 0310 	and.w	r3, r3, #16
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	4313      	orrs	r3, r2
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	22c0      	movs	r2, #192	; 0xc0
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	43da      	mvns	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	400a      	ands	r2, r1
 8007d78:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	089b      	lsrs	r3, r3, #2
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	089b      	lsrs	r3, r3, #2
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	43db      	mvns	r3, r3
 8007dae:	ea02 0103 	and.w	r1, r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3728      	adds	r7, #40	; 0x28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	09896800 	.word	0x09896800
 8007de0:	04c4b400 	.word	0x04c4b400

08007de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e08d      	b.n	8007f12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b47      	ldr	r3, [pc, #284]	; (8007f1c <HAL_DMA_Init+0x138>)
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d80f      	bhi.n	8007e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	4b45      	ldr	r3, [pc, #276]	; (8007f20 <HAL_DMA_Init+0x13c>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	4a45      	ldr	r2, [pc, #276]	; (8007f24 <HAL_DMA_Init+0x140>)
 8007e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e12:	091b      	lsrs	r3, r3, #4
 8007e14:	009a      	lsls	r2, r3, #2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a42      	ldr	r2, [pc, #264]	; (8007f28 <HAL_DMA_Init+0x144>)
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8007e20:	e00e      	b.n	8007e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b40      	ldr	r3, [pc, #256]	; (8007f2c <HAL_DMA_Init+0x148>)
 8007e2a:	4413      	add	r3, r2
 8007e2c:	4a3d      	ldr	r2, [pc, #244]	; (8007f24 <HAL_DMA_Init+0x140>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	091b      	lsrs	r3, r3, #4
 8007e34:	009a      	lsls	r2, r3, #2
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a3c      	ldr	r2, [pc, #240]	; (8007f30 <HAL_DMA_Init+0x14c>)
 8007e3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9be 	bl	8008214 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea0:	d102      	bne.n	8007ea8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ebc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d010      	beq.n	8007ee8 <HAL_DMA_Init+0x104>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d80c      	bhi.n	8007ee8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9de 	bl	8008290 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	e008      	b.n	8007efa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40020407 	.word	0x40020407
 8007f20:	bffdfff8 	.word	0xbffdfff8
 8007f24:	cccccccd 	.word	0xcccccccd
 8007f28:	40020000 	.word	0x40020000
 8007f2c:	bffdfbf8 	.word	0xbffdfbf8
 8007f30:	40020400 	.word	0x40020400

08007f34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d005      	beq.n	8007f58 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2204      	movs	r2, #4
 8007f50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	e037      	b.n	8007fc8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 020e 	bic.w	r2, r2, #14
 8007f66:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f76:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0201 	bic.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8c:	f003 021f 	and.w	r2, r3, #31
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	2101      	movs	r1, #1
 8007f96:	fa01 f202 	lsl.w	r2, r1, r2
 8007f9a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007fa4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fbc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007fc6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d00d      	beq.n	800801a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2204      	movs	r2, #4
 8008002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e047      	b.n	80080aa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 020e 	bic.w	r2, r2, #14
 8008028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008048:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f003 021f 	and.w	r2, r3, #31
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	2101      	movs	r1, #1
 8008058:	fa01 f202 	lsl.w	r2, r1, r2
 800805c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008066:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00c      	beq.n	800808a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800807e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008088:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
    }
  }
  return status;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	2204      	movs	r2, #4
 80080d6:	409a      	lsls	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d026      	beq.n	800812e <HAL_DMA_IRQHandler+0x7a>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d021      	beq.n	800812e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0204 	bic.w	r2, r2, #4
 8008106:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810c:	f003 021f 	and.w	r2, r3, #31
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	2104      	movs	r1, #4
 8008116:	fa01 f202 	lsl.w	r2, r1, r2
 800811a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	2b00      	cmp	r3, #0
 8008122:	d071      	beq.n	8008208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800812c:	e06c      	b.n	8008208 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008132:	f003 031f 	and.w	r3, r3, #31
 8008136:	2202      	movs	r2, #2
 8008138:	409a      	lsls	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d02e      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d029      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10b      	bne.n	8008172 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 020a 	bic.w	r2, r2, #10
 8008168:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	f003 021f 	and.w	r2, r3, #31
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	2102      	movs	r1, #2
 8008180:	fa01 f202 	lsl.w	r2, r1, r2
 8008184:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d038      	beq.n	8008208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800819e:	e033      	b.n	8008208 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	2208      	movs	r2, #8
 80081aa:	409a      	lsls	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4013      	ands	r3, r2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d02a      	beq.n	800820a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d025      	beq.n	800820a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 020e 	bic.w	r2, r2, #14
 80081cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	f003 021f 	and.w	r2, r3, #31
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	2101      	movs	r1, #1
 80081dc:	fa01 f202 	lsl.w	r2, r1, r2
 80081e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008208:	bf00      	nop
 800820a:	bf00      	nop
}
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	4b16      	ldr	r3, [pc, #88]	; (800827c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008224:	429a      	cmp	r2, r3
 8008226:	d802      	bhi.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	e001      	b.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800822e:	4b15      	ldr	r3, [pc, #84]	; (8008284 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008230:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	3b08      	subs	r3, #8
 800823e:	4a12      	ldr	r2, [pc, #72]	; (8008288 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008240:	fba2 2303 	umull	r2, r3, r2, r3
 8008244:	091b      	lsrs	r3, r3, #4
 8008246:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824c:	089b      	lsrs	r3, r3, #2
 800824e:	009a      	lsls	r2, r3, #2
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	461a      	mov	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a0b      	ldr	r2, [pc, #44]	; (800828c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800825e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 031f 	and.w	r3, r3, #31
 8008266:	2201      	movs	r2, #1
 8008268:	409a      	lsls	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800826e:	bf00      	nop
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40020407 	.word	0x40020407
 8008280:	40020800 	.word	0x40020800
 8008284:	40020820 	.word	0x40020820
 8008288:	cccccccd 	.word	0xcccccccd
 800828c:	40020880 	.word	0x40020880

08008290 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	461a      	mov	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80082b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	2201      	movs	r2, #1
 80082be:	409a      	lsls	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	1000823f 	.word	0x1000823f
 80082d4:	40020940 	.word	0x40020940

080082d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e147      	b.n	800857a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fa fa52 	bl	80027a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0210 	bic.w	r2, r2, #16
 8008312:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008314:	f7fd fed4 	bl	80060c0 <HAL_GetTick>
 8008318:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800831a:	e012      	b.n	8008342 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800831c:	f7fd fed0 	bl	80060c0 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b0a      	cmp	r3, #10
 8008328:	d90b      	bls.n	8008342 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832e:	f043 0201 	orr.w	r2, r3, #1
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2203      	movs	r2, #3
 800833a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e11b      	b.n	800857a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b08      	cmp	r3, #8
 800834e:	d0e5      	beq.n	800831c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008360:	f7fd feae 	bl	80060c0 <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008366:	e012      	b.n	800838e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008368:	f7fd feaa 	bl	80060c0 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b0a      	cmp	r3, #10
 8008374:	d90b      	bls.n	800838e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837a:	f043 0201 	orr.w	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2203      	movs	r2, #3
 8008386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e0f5      	b.n	800857a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0e5      	beq.n	8008368 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0202 	orr.w	r2, r2, #2
 80083aa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a74      	ldr	r2, [pc, #464]	; (8008584 <HAL_FDCAN_Init+0x2ac>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d103      	bne.n	80083be <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80083b6:	4a74      	ldr	r2, [pc, #464]	; (8008588 <HAL_FDCAN_Init+0x2b0>)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	7c1b      	ldrb	r3, [r3, #16]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d108      	bne.n	80083d8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d4:	619a      	str	r2, [r3, #24]
 80083d6:	e007      	b.n	80083e8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7c5b      	ldrb	r3, [r3, #17]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d108      	bne.n	8008402 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083fe:	619a      	str	r2, [r3, #24]
 8008400:	e007      	b.n	8008412 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699a      	ldr	r2, [r3, #24]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008410:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c9b      	ldrb	r3, [r3, #18]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d108      	bne.n	800842c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699a      	ldr	r2, [r3, #24]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008428:	619a      	str	r2, [r3, #24]
 800842a:	e007      	b.n	800843c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800843a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008460:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691a      	ldr	r2, [r3, #16]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0210 	bic.w	r2, r2, #16
 8008470:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d108      	bne.n	800848c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	699a      	ldr	r2, [r3, #24]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0204 	orr.w	r2, r2, #4
 8008488:	619a      	str	r2, [r3, #24]
 800848a:	e02c      	b.n	80084e6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d028      	beq.n	80084e6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d01c      	beq.n	80084d6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084aa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0210 	orr.w	r2, r2, #16
 80084ba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d110      	bne.n	80084e6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0220 	orr.w	r2, r2, #32
 80084d2:	619a      	str	r2, [r3, #24]
 80084d4:	e007      	b.n	80084e6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0220 	orr.w	r2, r2, #32
 80084e4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084f6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80084fe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	3b01      	subs	r3, #1
 8008508:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800850e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008510:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851a:	d115      	bne.n	8008548 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008520:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	3b01      	subs	r3, #1
 8008528:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800852a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	3b01      	subs	r3, #1
 8008532:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008534:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	3b01      	subs	r3, #1
 800853e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008544:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008546:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f9c2 	bl	80088e8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40006400 	.word	0x40006400
 8008588:	40006500 	.word	0x40006500

0800858c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	4013      	ands	r3, r2
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085be:	6a3a      	ldr	r2, [r7, #32]
 80085c0:	4013      	ands	r3, r2
 80085c2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ce:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	4013      	ands	r3, r2
 80085da:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80085e6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	4013      	ands	r3, r2
 80085f2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80085fe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	4013      	ands	r3, r2
 800860a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00d      	beq.n	8008636 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d006      	beq.n	8008636 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2240      	movs	r2, #64	; 0x40
 800862e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f939 	bl	80088a8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01b      	beq.n	800867c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d014      	beq.n	800867c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800865a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4013      	ands	r3, r2
 8008668:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008672:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f8f7 	bl	800886a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008688:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800868a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f8b6 	bl	80087fe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a3a      	ldr	r2, [r7, #32]
 800869e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80086a0:	6a39      	ldr	r1, [r7, #32]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f8b6 	bl	8008814 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80086b6:	69f9      	ldr	r1, [r7, #28]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f8b6 	bl	800882a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00e      	beq.n	80086ea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f8ab 	bl	8008840 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01a      	beq.n	800872e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008702:	2b00      	cmp	r3, #0
 8008704:	d013      	beq.n	800872e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800870e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4013      	ands	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2280      	movs	r2, #128	; 0x80
 8008724:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008726:	68f9      	ldr	r1, [r7, #12]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f893 	bl	8008854 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00e      	beq.n	800875a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008752:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f893 	bl	8008880 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00e      	beq.n	8008786 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800877e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f887 	bl	8008894 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d011      	beq.n	80087b8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d007      	beq.n	80087ce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80087c6:	6979      	ldr	r1, [r7, #20]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f881 	bl	80088d0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f863 	bl	80088bc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80087f6:	bf00      	nop
 80087f8:	3728      	adds	r7, #40	; 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80088f0:	4b30      	ldr	r3, [pc, #192]	; (80089b4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80088f2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2f      	ldr	r2, [pc, #188]	; (80089b8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d103      	bne.n	8008906 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008904:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a2c      	ldr	r2, [pc, #176]	; (80089bc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d103      	bne.n	8008918 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008916:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008926:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	041a      	lsls	r2, r3, #16
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800894c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	061a      	lsls	r2, r3, #24
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e005      	b.n	800899a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3304      	adds	r3, #4
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d3f3      	bcc.n	800898e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	4000a400 	.word	0x4000a400
 80089b8:	40006800 	.word	0x40006800
 80089bc:	40006c00 	.word	0x40006c00

080089c0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <HAL_FLASH_Program+0xa4>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_FLASH_Program+0x1e>
 80089da:	2302      	movs	r3, #2
 80089dc:	e03e      	b.n	8008a5c <HAL_FLASH_Program+0x9c>
 80089de:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <HAL_FLASH_Program+0xa4>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089e8:	f000 f862 	bl	8008ab0 <FLASH_WaitForLastOperation>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d12e      	bne.n	8008a54 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80089f6:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <HAL_FLASH_Program+0xa4>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a06:	68b8      	ldr	r0, [r7, #8]
 8008a08:	f000 f8a6 	bl	8008b58 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	e010      	b.n	8008a34 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d002      	beq.n	8008a1e <HAL_FLASH_Program+0x5e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d10a      	bne.n	8008a34 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	4619      	mov	r1, r3
 8008a22:	68b8      	ldr	r0, [r7, #8]
 8008a24:	f000 f8be 	bl	8008ba4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d102      	bne.n	8008a34 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008a2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a32:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a38:	f000 f83a 	bl	8008ab0 <FLASH_WaitForLastOperation>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d006      	beq.n	8008a54 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008a46:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <HAL_FLASH_Program+0xa8>)
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	43db      	mvns	r3, r3
 8008a4e:	4906      	ldr	r1, [pc, #24]	; (8008a68 <HAL_FLASH_Program+0xa8>)
 8008a50:	4013      	ands	r3, r2
 8008a52:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <HAL_FLASH_Program+0xa4>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	2000002c 	.word	0x2000002c
 8008a68:	40022000 	.word	0x40022000

08008a6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <HAL_FLASH_Unlock+0x38>)
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da0b      	bge.n	8008a96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008a7e:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <HAL_FLASH_Unlock+0x38>)
 8008a80:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <HAL_FLASH_Unlock+0x3c>)
 8008a82:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <HAL_FLASH_Unlock+0x38>)
 8008a86:	4a09      	ldr	r2, [pc, #36]	; (8008aac <HAL_FLASH_Unlock+0x40>)
 8008a88:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_FLASH_Unlock+0x38>)
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da01      	bge.n	8008a96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008a96:	79fb      	ldrb	r3, [r7, #7]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	40022000 	.word	0x40022000
 8008aa8:	45670123 	.word	0x45670123
 8008aac:	cdef89ab 	.word	0xcdef89ab

08008ab0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8008ab8:	f7fd fb02 	bl	80060c0 <HAL_GetTick>
 8008abc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008abe:	e009      	b.n	8008ad4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008ac0:	f7fd fafe 	bl	80060c0 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d201      	bcs.n	8008ad4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e038      	b.n	8008b46 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008ad4:	4b1e      	ldr	r3, [pc, #120]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae0:	d0ee      	beq.n	8008ac0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008aea:	4013      	ands	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01e      	beq.n	8008b32 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008af4:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <FLASH_WaitForLastOperation+0xa4>)
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	4a15      	ldr	r2, [pc, #84]	; (8008b54 <FLASH_WaitForLastOperation+0xa4>)
 8008afe:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d007      	beq.n	8008b1a <FLASH_WaitForLastOperation+0x6a>
 8008b0a:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b14:	490e      	ldr	r1, [pc, #56]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	618b      	str	r3, [r1, #24]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <FLASH_WaitForLastOperation+0x7e>
 8008b24:	4a0a      	ldr	r2, [pc, #40]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b2c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e009      	b.n	8008b46 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d102      	bne.n	8008b44 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008b3e:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <FLASH_WaitForLastOperation+0xa0>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	40022000 	.word	0x40022000
 8008b54:	2000002c 	.word	0x2000002c

08008b58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <FLASH_Program_DoubleWord+0x48>)
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	4a0d      	ldr	r2, [pc, #52]	; (8008ba0 <FLASH_Program_DoubleWord+0x48>)
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008b76:	f3bf 8f6f 	isb	sy
}
 8008b7a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	000a      	movs	r2, r1
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	68f9      	ldr	r1, [r7, #12]
 8008b8e:	3104      	adds	r1, #4
 8008b90:	4613      	mov	r3, r2
 8008b92:	600b      	str	r3, [r1, #0]
}
 8008b94:	bf00      	nop
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	40022000 	.word	0x40022000

08008ba4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b089      	sub	sp, #36	; 0x24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008bae:	2340      	movs	r3, #64	; 0x40
 8008bb0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008bba:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <FLASH_Program_Fast+0x68>)
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	4a13      	ldr	r2, [pc, #76]	; (8008c0c <FLASH_Program_Fast+0x68>)
 8008bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bcc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8008bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd0:	b672      	cpsid	i
}
 8008bd2:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	3304      	adds	r3, #4
 8008be0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	3304      	adds	r3, #4
 8008be6:	617b      	str	r3, [r7, #20]
    row_index--;
 8008be8:	7ffb      	ldrb	r3, [r7, #31]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8008bee:	7ffb      	ldrb	r3, [r7, #31]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1ef      	bne.n	8008bd4 <FLASH_Program_Fast+0x30>
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f383 8810 	msr	PRIMASK, r3
}
 8008bfe:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008c00:	bf00      	nop
 8008c02:	3724      	adds	r7, #36	; 0x24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40022000 	.word	0x40022000

08008c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008c1e:	e15a      	b.n	8008ed6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	2101      	movs	r1, #1
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 814c 	beq.w	8008ed0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d005      	beq.n	8008c50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d130      	bne.n	8008cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	43db      	mvns	r3, r3
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4013      	ands	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c86:	2201      	movs	r2, #1
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	43db      	mvns	r3, r3
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4013      	ands	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	091b      	lsrs	r3, r3, #4
 8008c9c:	f003 0201 	and.w	r2, r3, #1
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d017      	beq.n	8008cee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	2203      	movs	r2, #3
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d123      	bne.n	8008d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	08da      	lsrs	r2, r3, #3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3208      	adds	r2, #8
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	220f      	movs	r2, #15
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	43db      	mvns	r3, r3
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	08da      	lsrs	r2, r3, #3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3208      	adds	r2, #8
 8008d3c:	6939      	ldr	r1, [r7, #16]
 8008d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43db      	mvns	r3, r3
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4013      	ands	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f003 0203 	and.w	r2, r3, #3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 80a6 	beq.w	8008ed0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d84:	4b5b      	ldr	r3, [pc, #364]	; (8008ef4 <HAL_GPIO_Init+0x2e4>)
 8008d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d88:	4a5a      	ldr	r2, [pc, #360]	; (8008ef4 <HAL_GPIO_Init+0x2e4>)
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	6613      	str	r3, [r2, #96]	; 0x60
 8008d90:	4b58      	ldr	r3, [pc, #352]	; (8008ef4 <HAL_GPIO_Init+0x2e4>)
 8008d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	60bb      	str	r3, [r7, #8]
 8008d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d9c:	4a56      	ldr	r2, [pc, #344]	; (8008ef8 <HAL_GPIO_Init+0x2e8>)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	089b      	lsrs	r3, r3, #2
 8008da2:	3302      	adds	r3, #2
 8008da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	220f      	movs	r2, #15
 8008db4:	fa02 f303 	lsl.w	r3, r2, r3
 8008db8:	43db      	mvns	r3, r3
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008dc6:	d01f      	beq.n	8008e08 <HAL_GPIO_Init+0x1f8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a4c      	ldr	r2, [pc, #304]	; (8008efc <HAL_GPIO_Init+0x2ec>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d019      	beq.n	8008e04 <HAL_GPIO_Init+0x1f4>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a4b      	ldr	r2, [pc, #300]	; (8008f00 <HAL_GPIO_Init+0x2f0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d013      	beq.n	8008e00 <HAL_GPIO_Init+0x1f0>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a4a      	ldr	r2, [pc, #296]	; (8008f04 <HAL_GPIO_Init+0x2f4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00d      	beq.n	8008dfc <HAL_GPIO_Init+0x1ec>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a49      	ldr	r2, [pc, #292]	; (8008f08 <HAL_GPIO_Init+0x2f8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d007      	beq.n	8008df8 <HAL_GPIO_Init+0x1e8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a48      	ldr	r2, [pc, #288]	; (8008f0c <HAL_GPIO_Init+0x2fc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d101      	bne.n	8008df4 <HAL_GPIO_Init+0x1e4>
 8008df0:	2305      	movs	r3, #5
 8008df2:	e00a      	b.n	8008e0a <HAL_GPIO_Init+0x1fa>
 8008df4:	2306      	movs	r3, #6
 8008df6:	e008      	b.n	8008e0a <HAL_GPIO_Init+0x1fa>
 8008df8:	2304      	movs	r3, #4
 8008dfa:	e006      	b.n	8008e0a <HAL_GPIO_Init+0x1fa>
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e004      	b.n	8008e0a <HAL_GPIO_Init+0x1fa>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e002      	b.n	8008e0a <HAL_GPIO_Init+0x1fa>
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <HAL_GPIO_Init+0x1fa>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	f002 0203 	and.w	r2, r2, #3
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	4093      	lsls	r3, r2
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e1a:	4937      	ldr	r1, [pc, #220]	; (8008ef8 <HAL_GPIO_Init+0x2e8>)
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	089b      	lsrs	r3, r3, #2
 8008e20:	3302      	adds	r3, #2
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e28:	4b39      	ldr	r3, [pc, #228]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4013      	ands	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e4c:	4a30      	ldr	r2, [pc, #192]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008e52:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e76:	4a26      	ldr	r2, [pc, #152]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008e7c:	4b24      	ldr	r3, [pc, #144]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ea0:	4a1b      	ldr	r2, [pc, #108]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ea6:	4b1a      	ldr	r3, [pc, #104]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008eca:	4a11      	ldr	r2, [pc, #68]	; (8008f10 <HAL_GPIO_Init+0x300>)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f47f ae9d 	bne.w	8008c20 <HAL_GPIO_Init+0x10>
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	48000400 	.word	0x48000400
 8008f00:	48000800 	.word	0x48000800
 8008f04:	48000c00 	.word	0x48000c00
 8008f08:	48001000 	.word	0x48001000
 8008f0c:	48001400 	.word	0x48001400
 8008f10:	40010400 	.word	0x40010400

08008f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
 8008f20:	4613      	mov	r3, r2
 8008f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f24:	787b      	ldrb	r3, [r7, #1]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008f30:	e002      	b.n	8008f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f32:	887a      	ldrh	r2, [r7, #2]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d141      	bne.n	8008fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f52:	4b4b      	ldr	r3, [pc, #300]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f5e:	d131      	bne.n	8008fc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f60:	4b47      	ldr	r3, [pc, #284]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f66:	4a46      	ldr	r2, [pc, #280]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f70:	4b43      	ldr	r3, [pc, #268]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f78:	4a41      	ldr	r2, [pc, #260]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f80:	4b40      	ldr	r3, [pc, #256]	; (8009084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2232      	movs	r2, #50	; 0x32
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
 8008f8a:	4a3f      	ldr	r2, [pc, #252]	; (8009088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	0c9b      	lsrs	r3, r3, #18
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f96:	e002      	b.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f9e:	4b38      	ldr	r3, [pc, #224]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008faa:	d102      	bne.n	8008fb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1f2      	bne.n	8008f98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fb2:	4b33      	ldr	r3, [pc, #204]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fbe:	d158      	bne.n	8009072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e057      	b.n	8009074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fc4:	4b2e      	ldr	r3, [pc, #184]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fca:	4a2d      	ldr	r2, [pc, #180]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008fd4:	e04d      	b.n	8009072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fdc:	d141      	bne.n	8009062 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fde:	4b28      	ldr	r3, [pc, #160]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fea:	d131      	bne.n	8009050 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fec:	4b24      	ldr	r3, [pc, #144]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff2:	4a23      	ldr	r2, [pc, #140]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ffc:	4b20      	ldr	r3, [pc, #128]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009004:	4a1e      	ldr	r2, [pc, #120]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800900a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800900c:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2232      	movs	r2, #50	; 0x32
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	4a1c      	ldr	r2, [pc, #112]	; (8009088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	0c9b      	lsrs	r3, r3, #18
 800901e:	3301      	adds	r3, #1
 8009020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009022:	e002      	b.n	800902a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3b01      	subs	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800902a:	4b15      	ldr	r3, [pc, #84]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009036:	d102      	bne.n	800903e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1f2      	bne.n	8009024 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800903e:	4b10      	ldr	r3, [pc, #64]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800904a:	d112      	bne.n	8009072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e011      	b.n	8009074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009050:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009056:	4a0a      	ldr	r2, [pc, #40]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800905c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009060:	e007      	b.n	8009072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009062:	4b07      	ldr	r3, [pc, #28]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800906a:	4a05      	ldr	r2, [pc, #20]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800906c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009070:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	40007000 	.word	0x40007000
 8009084:	20000020 	.word	0x20000020
 8009088:	431bde83 	.word	0x431bde83

0800908c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e306      	b.n	80096ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d075      	beq.n	8009196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090aa:	4b97      	ldr	r3, [pc, #604]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 030c 	and.w	r3, r3, #12
 80090b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090b4:	4b94      	ldr	r3, [pc, #592]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d102      	bne.n	80090ca <HAL_RCC_OscConfig+0x3e>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d002      	beq.n	80090d0 <HAL_RCC_OscConfig+0x44>
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d10b      	bne.n	80090e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090d0:	4b8d      	ldr	r3, [pc, #564]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d05b      	beq.n	8009194 <HAL_RCC_OscConfig+0x108>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d157      	bne.n	8009194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e2e1      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f0:	d106      	bne.n	8009100 <HAL_RCC_OscConfig+0x74>
 80090f2:	4b85      	ldr	r3, [pc, #532]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a84      	ldr	r2, [pc, #528]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80090f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	e01d      	b.n	800913c <HAL_RCC_OscConfig+0xb0>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009108:	d10c      	bne.n	8009124 <HAL_RCC_OscConfig+0x98>
 800910a:	4b7f      	ldr	r3, [pc, #508]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a7e      	ldr	r2, [pc, #504]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	4b7c      	ldr	r3, [pc, #496]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a7b      	ldr	r2, [pc, #492]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 800911c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	e00b      	b.n	800913c <HAL_RCC_OscConfig+0xb0>
 8009124:	4b78      	ldr	r3, [pc, #480]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a77      	ldr	r2, [pc, #476]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 800912a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	4b75      	ldr	r3, [pc, #468]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a74      	ldr	r2, [pc, #464]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800913a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d013      	beq.n	800916c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7fc ffbc 	bl	80060c0 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800914c:	f7fc ffb8 	bl	80060c0 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b64      	cmp	r3, #100	; 0x64
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e2a6      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800915e:	4b6a      	ldr	r3, [pc, #424]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0f0      	beq.n	800914c <HAL_RCC_OscConfig+0xc0>
 800916a:	e014      	b.n	8009196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916c:	f7fc ffa8 	bl	80060c0 <HAL_GetTick>
 8009170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009172:	e008      	b.n	8009186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009174:	f7fc ffa4 	bl	80060c0 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b64      	cmp	r3, #100	; 0x64
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e292      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009186:	4b60      	ldr	r3, [pc, #384]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f0      	bne.n	8009174 <HAL_RCC_OscConfig+0xe8>
 8009192:	e000      	b.n	8009196 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d075      	beq.n	800928e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091a2:	4b59      	ldr	r3, [pc, #356]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 030c 	and.w	r3, r3, #12
 80091aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091ac:	4b56      	ldr	r3, [pc, #344]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f003 0303 	and.w	r3, r3, #3
 80091b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b0c      	cmp	r3, #12
 80091ba:	d102      	bne.n	80091c2 <HAL_RCC_OscConfig+0x136>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d002      	beq.n	80091c8 <HAL_RCC_OscConfig+0x13c>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d11f      	bne.n	8009208 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091c8:	4b4f      	ldr	r3, [pc, #316]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <HAL_RCC_OscConfig+0x154>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e265      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e0:	4b49      	ldr	r3, [pc, #292]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	061b      	lsls	r3, r3, #24
 80091ee:	4946      	ldr	r1, [pc, #280]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091f4:	4b45      	ldr	r3, [pc, #276]	; (800930c <HAL_RCC_OscConfig+0x280>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fc faff 	bl	80057fc <HAL_InitTick>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d043      	beq.n	800928c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e251      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d023      	beq.n	8009258 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009210:	4b3d      	ldr	r3, [pc, #244]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a3c      	ldr	r2, [pc, #240]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800921a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921c:	f7fc ff50 	bl	80060c0 <HAL_GetTick>
 8009220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009224:	f7fc ff4c 	bl	80060c0 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e23a      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009236:	4b34      	ldr	r3, [pc, #208]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f0      	beq.n	8009224 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	061b      	lsls	r3, r3, #24
 8009250:	492d      	ldr	r1, [pc, #180]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	604b      	str	r3, [r1, #4]
 8009256:	e01a      	b.n	800928e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009258:	4b2b      	ldr	r3, [pc, #172]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a2a      	ldr	r2, [pc, #168]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 800925e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009264:	f7fc ff2c 	bl	80060c0 <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800926a:	e008      	b.n	800927e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800926c:	f7fc ff28 	bl	80060c0 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b02      	cmp	r3, #2
 8009278:	d901      	bls.n	800927e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e216      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800927e:	4b22      	ldr	r3, [pc, #136]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f0      	bne.n	800926c <HAL_RCC_OscConfig+0x1e0>
 800928a:	e000      	b.n	800928e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800928c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d041      	beq.n	800931e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d01c      	beq.n	80092dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092a2:	4b19      	ldr	r3, [pc, #100]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80092a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092a8:	4a17      	ldr	r2, [pc, #92]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b2:	f7fc ff05 	bl	80060c0 <HAL_GetTick>
 80092b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092ba:	f7fc ff01 	bl	80060c0 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e1ef      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80092ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0ef      	beq.n	80092ba <HAL_RCC_OscConfig+0x22e>
 80092da:	e020      	b.n	800931e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80092de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092e2:	4a09      	ldr	r2, [pc, #36]	; (8009308 <HAL_RCC_OscConfig+0x27c>)
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ec:	f7fc fee8 	bl	80060c0 <HAL_GetTick>
 80092f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092f2:	e00d      	b.n	8009310 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092f4:	f7fc fee4 	bl	80060c0 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d906      	bls.n	8009310 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e1d2      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
 8009306:	bf00      	nop
 8009308:	40021000 	.word	0x40021000
 800930c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009310:	4b8c      	ldr	r3, [pc, #560]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1ea      	bne.n	80092f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 80a6 	beq.w	8009478 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800932c:	2300      	movs	r3, #0
 800932e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009330:	4b84      	ldr	r3, [pc, #528]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <HAL_RCC_OscConfig+0x2b4>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <HAL_RCC_OscConfig+0x2b6>
 8009340:	2300      	movs	r3, #0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00d      	beq.n	8009362 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009346:	4b7f      	ldr	r3, [pc, #508]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934a:	4a7e      	ldr	r2, [pc, #504]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 800934c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009350:	6593      	str	r3, [r2, #88]	; 0x58
 8009352:	4b7c      	ldr	r3, [pc, #496]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800935e:	2301      	movs	r3, #1
 8009360:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009362:	4b79      	ldr	r3, [pc, #484]	; (8009548 <HAL_RCC_OscConfig+0x4bc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936a:	2b00      	cmp	r3, #0
 800936c:	d118      	bne.n	80093a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800936e:	4b76      	ldr	r3, [pc, #472]	; (8009548 <HAL_RCC_OscConfig+0x4bc>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a75      	ldr	r2, [pc, #468]	; (8009548 <HAL_RCC_OscConfig+0x4bc>)
 8009374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800937a:	f7fc fea1 	bl	80060c0 <HAL_GetTick>
 800937e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009380:	e008      	b.n	8009394 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009382:	f7fc fe9d 	bl	80060c0 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d901      	bls.n	8009394 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e18b      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009394:	4b6c      	ldr	r3, [pc, #432]	; (8009548 <HAL_RCC_OscConfig+0x4bc>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0f0      	beq.n	8009382 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d108      	bne.n	80093ba <HAL_RCC_OscConfig+0x32e>
 80093a8:	4b66      	ldr	r3, [pc, #408]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ae:	4a65      	ldr	r2, [pc, #404]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093b0:	f043 0301 	orr.w	r3, r3, #1
 80093b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093b8:	e024      	b.n	8009404 <HAL_RCC_OscConfig+0x378>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d110      	bne.n	80093e4 <HAL_RCC_OscConfig+0x358>
 80093c2:	4b60      	ldr	r3, [pc, #384]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c8:	4a5e      	ldr	r2, [pc, #376]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093ca:	f043 0304 	orr.w	r3, r3, #4
 80093ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093d2:	4b5c      	ldr	r3, [pc, #368]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d8:	4a5a      	ldr	r2, [pc, #360]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093da:	f043 0301 	orr.w	r3, r3, #1
 80093de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093e2:	e00f      	b.n	8009404 <HAL_RCC_OscConfig+0x378>
 80093e4:	4b57      	ldr	r3, [pc, #348]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ea:	4a56      	ldr	r2, [pc, #344]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093f4:	4b53      	ldr	r3, [pc, #332]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fa:	4a52      	ldr	r2, [pc, #328]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80093fc:	f023 0304 	bic.w	r3, r3, #4
 8009400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d016      	beq.n	800943a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940c:	f7fc fe58 	bl	80060c0 <HAL_GetTick>
 8009410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009412:	e00a      	b.n	800942a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009414:	f7fc fe54 	bl	80060c0 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009422:	4293      	cmp	r3, r2
 8009424:	d901      	bls.n	800942a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e140      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800942a:	4b46      	ldr	r3, [pc, #280]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 800942c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0ed      	beq.n	8009414 <HAL_RCC_OscConfig+0x388>
 8009438:	e015      	b.n	8009466 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943a:	f7fc fe41 	bl	80060c0 <HAL_GetTick>
 800943e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009440:	e00a      	b.n	8009458 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009442:	f7fc fe3d 	bl	80060c0 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009450:	4293      	cmp	r3, r2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e129      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009458:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 800945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1ed      	bne.n	8009442 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009466:	7ffb      	ldrb	r3, [r7, #31]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d105      	bne.n	8009478 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800946c:	4b35      	ldr	r3, [pc, #212]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 800946e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009470:	4a34      	ldr	r2, [pc, #208]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b00      	cmp	r3, #0
 8009482:	d03c      	beq.n	80094fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01c      	beq.n	80094c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800948c:	4b2d      	ldr	r3, [pc, #180]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 800948e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009492:	4a2c      	ldr	r2, [pc, #176]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009494:	f043 0301 	orr.w	r3, r3, #1
 8009498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800949c:	f7fc fe10 	bl	80060c0 <HAL_GetTick>
 80094a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094a2:	e008      	b.n	80094b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094a4:	f7fc fe0c 	bl	80060c0 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d901      	bls.n	80094b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e0fa      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094b6:	4b23      	ldr	r3, [pc, #140]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80094b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0ef      	beq.n	80094a4 <HAL_RCC_OscConfig+0x418>
 80094c4:	e01b      	b.n	80094fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80094c6:	4b1f      	ldr	r3, [pc, #124]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80094c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80094ce:	f023 0301 	bic.w	r3, r3, #1
 80094d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094d6:	f7fc fdf3 	bl	80060c0 <HAL_GetTick>
 80094da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094dc:	e008      	b.n	80094f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094de:	f7fc fdef 	bl	80060c0 <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d901      	bls.n	80094f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e0dd      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094f0:	4b14      	ldr	r3, [pc, #80]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 80094f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1ef      	bne.n	80094de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80d1 	beq.w	80096aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009508:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f003 030c 	and.w	r3, r3, #12
 8009510:	2b0c      	cmp	r3, #12
 8009512:	f000 808b 	beq.w	800962c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d15e      	bne.n	80095dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800951e:	4b09      	ldr	r3, [pc, #36]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a08      	ldr	r2, [pc, #32]	; (8009544 <HAL_RCC_OscConfig+0x4b8>)
 8009524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800952a:	f7fc fdc9 	bl	80060c0 <HAL_GetTick>
 800952e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009530:	e00c      	b.n	800954c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009532:	f7fc fdc5 	bl	80060c0 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	2b02      	cmp	r3, #2
 800953e:	d905      	bls.n	800954c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e0b3      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
 8009544:	40021000 	.word	0x40021000
 8009548:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800954c:	4b59      	ldr	r3, [pc, #356]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1ec      	bne.n	8009532 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009558:	4b56      	ldr	r3, [pc, #344]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	4b56      	ldr	r3, [pc, #344]	; (80096b8 <HAL_RCC_OscConfig+0x62c>)
 800955e:	4013      	ands	r3, r2
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6a11      	ldr	r1, [r2, #32]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009568:	3a01      	subs	r2, #1
 800956a:	0112      	lsls	r2, r2, #4
 800956c:	4311      	orrs	r1, r2
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009572:	0212      	lsls	r2, r2, #8
 8009574:	4311      	orrs	r1, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800957a:	0852      	lsrs	r2, r2, #1
 800957c:	3a01      	subs	r2, #1
 800957e:	0552      	lsls	r2, r2, #21
 8009580:	4311      	orrs	r1, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009586:	0852      	lsrs	r2, r2, #1
 8009588:	3a01      	subs	r2, #1
 800958a:	0652      	lsls	r2, r2, #25
 800958c:	4311      	orrs	r1, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009592:	06d2      	lsls	r2, r2, #27
 8009594:	430a      	orrs	r2, r1
 8009596:	4947      	ldr	r1, [pc, #284]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 8009598:	4313      	orrs	r3, r2
 800959a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800959c:	4b45      	ldr	r3, [pc, #276]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a44      	ldr	r2, [pc, #272]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095a8:	4b42      	ldr	r3, [pc, #264]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4a41      	ldr	r2, [pc, #260]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b4:	f7fc fd84 	bl	80060c0 <HAL_GetTick>
 80095b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095ba:	e008      	b.n	80095ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095bc:	f7fc fd80 	bl	80060c0 <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e06e      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095ce:	4b39      	ldr	r3, [pc, #228]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0f0      	beq.n	80095bc <HAL_RCC_OscConfig+0x530>
 80095da:	e066      	b.n	80096aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095dc:	4b35      	ldr	r3, [pc, #212]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a34      	ldr	r2, [pc, #208]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80095e8:	4b32      	ldr	r3, [pc, #200]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	4a31      	ldr	r2, [pc, #196]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80095f4:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	4a2e      	ldr	r2, [pc, #184]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 80095fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80095fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009602:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009604:	f7fc fd5c 	bl	80060c0 <HAL_GetTick>
 8009608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800960a:	e008      	b.n	800961e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800960c:	f7fc fd58 	bl	80060c0 <HAL_GetTick>
 8009610:	4602      	mov	r2, r0
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	2b02      	cmp	r3, #2
 8009618:	d901      	bls.n	800961e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e046      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800961e:	4b25      	ldr	r3, [pc, #148]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1f0      	bne.n	800960c <HAL_RCC_OscConfig+0x580>
 800962a:	e03e      	b.n	80096aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e039      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009638:	4b1e      	ldr	r3, [pc, #120]	; (80096b4 <HAL_RCC_OscConfig+0x628>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f003 0203 	and.w	r2, r3, #3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	429a      	cmp	r2, r3
 800964a:	d12c      	bne.n	80096a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	3b01      	subs	r3, #1
 8009658:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800965a:	429a      	cmp	r2, r3
 800965c:	d123      	bne.n	80096a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800966a:	429a      	cmp	r2, r3
 800966c:	d11b      	bne.n	80096a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800967a:	429a      	cmp	r2, r3
 800967c:	d113      	bne.n	80096a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	085b      	lsrs	r3, r3, #1
 800968a:	3b01      	subs	r3, #1
 800968c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800968e:	429a      	cmp	r2, r3
 8009690:	d109      	bne.n	80096a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	085b      	lsrs	r3, r3, #1
 800969e:	3b01      	subs	r3, #1
 80096a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d001      	beq.n	80096aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3720      	adds	r7, #32
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	40021000 	.word	0x40021000
 80096b8:	019f800c 	.word	0x019f800c

080096bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e11e      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096d4:	4b91      	ldr	r3, [pc, #580]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d910      	bls.n	8009704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e2:	4b8e      	ldr	r3, [pc, #568]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f023 020f 	bic.w	r2, r3, #15
 80096ea:	498c      	ldr	r1, [pc, #560]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b8a      	ldr	r3, [pc, #552]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d001      	beq.n	8009704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e106      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d073      	beq.n	80097f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	2b03      	cmp	r3, #3
 8009716:	d129      	bne.n	800976c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009718:	4b81      	ldr	r3, [pc, #516]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e0f4      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009728:	f000 f9d0 	bl	8009acc <RCC_GetSysClockFreqFromPLLSource>
 800972c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	4a7c      	ldr	r2, [pc, #496]	; (8009924 <HAL_RCC_ClockConfig+0x268>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d93f      	bls.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009736:	4b7a      	ldr	r3, [pc, #488]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800974a:	2b00      	cmp	r3, #0
 800974c:	d033      	beq.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	d12f      	bne.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009756:	4b72      	ldr	r3, [pc, #456]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800975e:	4a70      	ldr	r2, [pc, #448]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009766:	2380      	movs	r3, #128	; 0x80
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e024      	b.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d107      	bne.n	8009784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009774:	4b6a      	ldr	r3, [pc, #424]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0c6      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009784:	4b66      	ldr	r3, [pc, #408]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0be      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009794:	f000 f8ce 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 8009798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4a61      	ldr	r2, [pc, #388]	; (8009924 <HAL_RCC_ClockConfig+0x268>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d909      	bls.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80097a2:	4b5f      	ldr	r3, [pc, #380]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097aa:	4a5d      	ldr	r2, [pc, #372]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80097b2:	2380      	movs	r3, #128	; 0x80
 80097b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097b6:	4b5a      	ldr	r3, [pc, #360]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f023 0203 	bic.w	r2, r3, #3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	4957      	ldr	r1, [pc, #348]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097c8:	f7fc fc7a 	bl	80060c0 <HAL_GetTick>
 80097cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ce:	e00a      	b.n	80097e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d0:	f7fc fc76 	bl	80060c0 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f241 3288 	movw	r2, #5000	; 0x1388
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e095      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097e6:	4b4e      	ldr	r3, [pc, #312]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 020c 	and.w	r2, r3, #12
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d1eb      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d023      	beq.n	800984c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d005      	beq.n	800981c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009810:	4b43      	ldr	r3, [pc, #268]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	4a42      	ldr	r2, [pc, #264]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800981a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009828:	4b3d      	ldr	r3, [pc, #244]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009830:	4a3b      	ldr	r2, [pc, #236]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009838:	4b39      	ldr	r3, [pc, #228]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	4936      	ldr	r1, [pc, #216]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009846:	4313      	orrs	r3, r2
 8009848:	608b      	str	r3, [r1, #8]
 800984a:	e008      	b.n	800985e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2b80      	cmp	r3, #128	; 0x80
 8009850:	d105      	bne.n	800985e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009852:	4b33      	ldr	r3, [pc, #204]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	4a32      	ldr	r2, [pc, #200]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800985c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800985e:	4b2f      	ldr	r3, [pc, #188]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d21d      	bcs.n	80098a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800986c:	4b2b      	ldr	r3, [pc, #172]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f023 020f 	bic.w	r2, r3, #15
 8009874:	4929      	ldr	r1, [pc, #164]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	4313      	orrs	r3, r2
 800987a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800987c:	f7fc fc20 	bl	80060c0 <HAL_GetTick>
 8009880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009882:	e00a      	b.n	800989a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009884:	f7fc fc1c 	bl	80060c0 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009892:	4293      	cmp	r3, r2
 8009894:	d901      	bls.n	800989a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e03b      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800989a:	4b20      	ldr	r3, [pc, #128]	; (800991c <HAL_RCC_ClockConfig+0x260>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d1ed      	bne.n	8009884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098b4:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4917      	ldr	r1, [pc, #92]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098d2:	4b13      	ldr	r3, [pc, #76]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	490f      	ldr	r1, [pc, #60]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098e6:	f000 f825 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 80098ea:	4602      	mov	r2, r0
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	490c      	ldr	r1, [pc, #48]	; (8009928 <HAL_RCC_ClockConfig+0x26c>)
 80098f8:	5ccb      	ldrb	r3, [r1, r3]
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	4a0a      	ldr	r2, [pc, #40]	; (800992c <HAL_RCC_ClockConfig+0x270>)
 8009904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <HAL_RCC_ClockConfig+0x274>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f7fb ff76 	bl	80057fc <HAL_InitTick>
 8009910:	4603      	mov	r3, r0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40022000 	.word	0x40022000
 8009920:	40021000 	.word	0x40021000
 8009924:	04c4b400 	.word	0x04c4b400
 8009928:	080141b0 	.word	0x080141b0
 800992c:	20000020 	.word	0x20000020
 8009930:	20000024 	.word	0x20000024

08009934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800993a:	4b2c      	ldr	r3, [pc, #176]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 030c 	and.w	r3, r3, #12
 8009942:	2b04      	cmp	r3, #4
 8009944:	d102      	bne.n	800994c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009946:	4b2a      	ldr	r3, [pc, #168]	; (80099f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	e047      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800994c:	4b27      	ldr	r3, [pc, #156]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f003 030c 	and.w	r3, r3, #12
 8009954:	2b08      	cmp	r3, #8
 8009956:	d102      	bne.n	800995e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009958:	4b26      	ldr	r3, [pc, #152]	; (80099f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	e03e      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800995e:	4b23      	ldr	r3, [pc, #140]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f003 030c 	and.w	r3, r3, #12
 8009966:	2b0c      	cmp	r3, #12
 8009968:	d136      	bne.n	80099d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800996a:	4b20      	ldr	r3, [pc, #128]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009974:	4b1d      	ldr	r3, [pc, #116]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	091b      	lsrs	r3, r3, #4
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	3301      	adds	r3, #1
 8009980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b03      	cmp	r3, #3
 8009986:	d10c      	bne.n	80099a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009988:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009990:	4a16      	ldr	r2, [pc, #88]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009992:	68d2      	ldr	r2, [r2, #12]
 8009994:	0a12      	lsrs	r2, r2, #8
 8009996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800999a:	fb02 f303 	mul.w	r3, r2, r3
 800999e:	617b      	str	r3, [r7, #20]
      break;
 80099a0:	e00c      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099a2:	4a13      	ldr	r2, [pc, #76]	; (80099f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099aa:	4a10      	ldr	r2, [pc, #64]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80099ac:	68d2      	ldr	r2, [r2, #12]
 80099ae:	0a12      	lsrs	r2, r2, #8
 80099b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]
      break;
 80099ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099bc:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	0e5b      	lsrs	r3, r3, #25
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	3301      	adds	r3, #1
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	e001      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80099dc:	693b      	ldr	r3, [r7, #16]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40021000 	.word	0x40021000
 80099f0:	00f42400 	.word	0x00f42400
 80099f4:	007a1200 	.word	0x007a1200

080099f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099f8:	b480      	push	{r7}
 80099fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099fc:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80099fe:	681b      	ldr	r3, [r3, #0]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20000020 	.word	0x20000020

08009a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a14:	f7ff fff0 	bl	80099f8 <HAL_RCC_GetHCLKFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40021000 	.word	0x40021000
 8009a38:	080141c0 	.word	0x080141c0

08009a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a40:	f7ff ffda 	bl	80099f8 <HAL_RCC_GetHCLKFreq>
 8009a44:	4602      	mov	r2, r0
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	0adb      	lsrs	r3, r3, #11
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	4904      	ldr	r1, [pc, #16]	; (8009a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a52:	5ccb      	ldrb	r3, [r1, r3]
 8009a54:	f003 031f 	and.w	r3, r3, #31
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	40021000 	.word	0x40021000
 8009a64:	080141c0 	.word	0x080141c0

08009a68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	220f      	movs	r2, #15
 8009a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009a78:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f003 0203 	and.w	r2, r3, #3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009a90:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	08db      	lsrs	r3, r3, #3
 8009aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009aaa:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <HAL_RCC_GetClockConfig+0x60>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 020f 	and.w	r2, r3, #15
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	601a      	str	r2, [r3, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	40021000 	.word	0x40021000
 8009ac8:	40022000 	.word	0x40022000

08009acc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ad2:	4b1e      	ldr	r3, [pc, #120]	; (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	091b      	lsrs	r3, r3, #4
 8009ae2:	f003 030f 	and.w	r3, r3, #15
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d10c      	bne.n	8009b0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009af0:	4a17      	ldr	r2, [pc, #92]	; (8009b50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af8:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009afa:	68d2      	ldr	r2, [r2, #12]
 8009afc:	0a12      	lsrs	r2, r2, #8
 8009afe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b02:	fb02 f303 	mul.w	r3, r2, r3
 8009b06:	617b      	str	r3, [r7, #20]
    break;
 8009b08:	e00c      	b.n	8009b24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b0a:	4a12      	ldr	r2, [pc, #72]	; (8009b54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b12:	4a0e      	ldr	r2, [pc, #56]	; (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b14:	68d2      	ldr	r2, [r2, #12]
 8009b16:	0a12      	lsrs	r2, r2, #8
 8009b18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b1c:	fb02 f303 	mul.w	r3, r2, r3
 8009b20:	617b      	str	r3, [r7, #20]
    break;
 8009b22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b24:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	0e5b      	lsrs	r3, r3, #25
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	3301      	adds	r3, #1
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009b3e:	687b      	ldr	r3, [r7, #4]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	40021000 	.word	0x40021000
 8009b50:	007a1200 	.word	0x007a1200
 8009b54:	00f42400 	.word	0x00f42400

08009b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b60:	2300      	movs	r3, #0
 8009b62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b64:	2300      	movs	r3, #0
 8009b66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8098 	beq.w	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b76:	2300      	movs	r3, #0
 8009b78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b7a:	4b43      	ldr	r3, [pc, #268]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b86:	4b40      	ldr	r3, [pc, #256]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8a:	4a3f      	ldr	r2, [pc, #252]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b90:	6593      	str	r3, [r2, #88]	; 0x58
 8009b92:	4b3d      	ldr	r3, [pc, #244]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9a:	60bb      	str	r3, [r7, #8]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ba2:	4b3a      	ldr	r3, [pc, #232]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a39      	ldr	r2, [pc, #228]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bae:	f7fc fa87 	bl	80060c0 <HAL_GetTick>
 8009bb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bb4:	e009      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bb6:	f7fc fa83 	bl	80060c0 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d902      	bls.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	74fb      	strb	r3, [r7, #19]
        break;
 8009bc8:	e005      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bca:	4b30      	ldr	r3, [pc, #192]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0ef      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009bd6:	7cfb      	ldrb	r3, [r7, #19]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d159      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bdc:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01e      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d019      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009bf8:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c04:	4b20      	ldr	r3, [pc, #128]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c0a:	4a1f      	ldr	r2, [pc, #124]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c14:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1a:	4a1b      	ldr	r2, [pc, #108]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c24:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d016      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c36:	f7fc fa43 	bl	80060c0 <HAL_GetTick>
 8009c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c3c:	e00b      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c3e:	f7fc fa3f 	bl	80060c0 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d902      	bls.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	74fb      	strb	r3, [r7, #19]
            break;
 8009c54:	e006      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5c:	f003 0302 	and.w	r3, r3, #2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0ec      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009c64:	7cfb      	ldrb	r3, [r7, #19]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	4903      	ldr	r1, [pc, #12]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009c80:	e008      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c82:	7cfb      	ldrb	r3, [r7, #19]
 8009c84:	74bb      	strb	r3, [r7, #18]
 8009c86:	e005      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009c88:	40021000 	.word	0x40021000
 8009c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c90:	7cfb      	ldrb	r3, [r7, #19]
 8009c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c94:	7c7b      	ldrb	r3, [r7, #17]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d105      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c9a:	4ba7      	ldr	r3, [pc, #668]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9e:	4aa6      	ldr	r2, [pc, #664]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cb2:	4ba1      	ldr	r3, [pc, #644]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb8:	f023 0203 	bic.w	r2, r3, #3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	499d      	ldr	r1, [pc, #628]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009cd4:	4b98      	ldr	r3, [pc, #608]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cda:	f023 020c 	bic.w	r2, r3, #12
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	4995      	ldr	r1, [pc, #596]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00a      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009cf6:	4b90      	ldr	r3, [pc, #576]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	498c      	ldr	r1, [pc, #560]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00a      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d18:	4b87      	ldr	r3, [pc, #540]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	4984      	ldr	r1, [pc, #528]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d3a:	4b7f      	ldr	r3, [pc, #508]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	497b      	ldr	r1, [pc, #492]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0320 	and.w	r3, r3, #32
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d5c:	4b76      	ldr	r3, [pc, #472]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	4973      	ldr	r1, [pc, #460]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d7e:	4b6e      	ldr	r3, [pc, #440]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	496a      	ldr	r1, [pc, #424]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009da0:	4b65      	ldr	r3, [pc, #404]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	4962      	ldr	r1, [pc, #392]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009dc2:	4b5d      	ldr	r3, [pc, #372]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	4959      	ldr	r1, [pc, #356]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009de4:	4b54      	ldr	r3, [pc, #336]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dea:	f023 0203 	bic.w	r2, r3, #3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df2:	4951      	ldr	r1, [pc, #324]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e06:	4b4c      	ldr	r3, [pc, #304]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4948      	ldr	r1, [pc, #288]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d015      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e28:	4b43      	ldr	r3, [pc, #268]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e36:	4940      	ldr	r1, [pc, #256]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e46:	d105      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e48:	4b3b      	ldr	r3, [pc, #236]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	4a3a      	ldr	r2, [pc, #232]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d015      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009e60:	4b35      	ldr	r3, [pc, #212]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	4932      	ldr	r1, [pc, #200]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e7e:	d105      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e80:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	4a2c      	ldr	r2, [pc, #176]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d015      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e98:	4b27      	ldr	r3, [pc, #156]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	4924      	ldr	r1, [pc, #144]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eb6:	d105      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009eb8:	4b1f      	ldr	r3, [pc, #124]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ec2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d015      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ed0:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ede:	4916      	ldr	r1, [pc, #88]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009eee:	d105      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ef0:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	4a10      	ldr	r2, [pc, #64]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009efa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d019      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	4908      	ldr	r1, [pc, #32]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f26:	d109      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	4a02      	ldr	r2, [pc, #8]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f32:	60d3      	str	r3, [r2, #12]
 8009f34:	e002      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009f36:	bf00      	nop
 8009f38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d015      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009f48:	4b29      	ldr	r3, [pc, #164]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f56:	4926      	ldr	r1, [pc, #152]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f66:	d105      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f68:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	4a20      	ldr	r2, [pc, #128]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d015      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009f80:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f8e:	4918      	ldr	r1, [pc, #96]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9e:	d105      	bne.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009fa0:	4b13      	ldr	r3, [pc, #76]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	4a12      	ldr	r2, [pc, #72]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009faa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d015      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc6:	490a      	ldr	r1, [pc, #40]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fd6:	d105      	bne.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	40021000 	.word	0x40021000

08009ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e09d      	b.n	800a142 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d108      	bne.n	800a020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a016:	d009      	beq.n	800a02c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	61da      	str	r2, [r3, #28]
 800a01e:	e005      	b.n	800a02c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fb fb3e 	bl	80056c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a06c:	d902      	bls.n	800a074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e002      	b.n	800a07a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a082:	d007      	beq.n	800a094 <HAL_SPI_Init+0xa0>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a08c:	d002      	beq.n	800a094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d6:	ea42 0103 	orr.w	r1, r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	0c1b      	lsrs	r3, r3, #16
 800a0f0:	f003 0204 	and.w	r2, r3, #4
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a110:	ea42 0103 	orr.w	r1, r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b08a      	sub	sp, #40	; 0x28
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a158:	2301      	movs	r3, #1
 800a15a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d101      	bne.n	800a170 <HAL_SPI_TransmitReceive+0x26>
 800a16c:	2302      	movs	r3, #2
 800a16e:	e1fb      	b.n	800a568 <HAL_SPI_TransmitReceive+0x41e>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a178:	f7fb ffa2 	bl	80060c0 <HAL_GetTick>
 800a17c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a184:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a18c:	887b      	ldrh	r3, [r7, #2]
 800a18e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a190:	887b      	ldrh	r3, [r7, #2]
 800a192:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a194:	7efb      	ldrb	r3, [r7, #27]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d00e      	beq.n	800a1b8 <HAL_SPI_TransmitReceive+0x6e>
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a0:	d106      	bne.n	800a1b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d102      	bne.n	800a1b0 <HAL_SPI_TransmitReceive+0x66>
 800a1aa:	7efb      	ldrb	r3, [r7, #27]
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d003      	beq.n	800a1b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a1b6:	e1cd      	b.n	800a554 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <HAL_SPI_TransmitReceive+0x80>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <HAL_SPI_TransmitReceive+0x80>
 800a1c4:	887b      	ldrh	r3, [r7, #2]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d103      	bne.n	800a1d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a1d0:	e1c0      	b.n	800a554 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d003      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2205      	movs	r2, #5
 800a1e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	887a      	ldrh	r2, [r7, #2]
 800a1f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	887a      	ldrh	r2, [r7, #2]
 800a1fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	887a      	ldrh	r2, [r7, #2]
 800a20c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	887a      	ldrh	r2, [r7, #2]
 800a212:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a228:	d802      	bhi.n	800a230 <HAL_SPI_TransmitReceive+0xe6>
 800a22a:	8a3b      	ldrh	r3, [r7, #16]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d908      	bls.n	800a242 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a23e:	605a      	str	r2, [r3, #4]
 800a240:	e007      	b.n	800a252 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a250:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	d007      	beq.n	800a270 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a26e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a278:	d97c      	bls.n	800a374 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <HAL_SPI_TransmitReceive+0x13e>
 800a282:	8a7b      	ldrh	r3, [r7, #18]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d169      	bne.n	800a35c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	881a      	ldrh	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	1c9a      	adds	r2, r3, #2
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2ac:	e056      	b.n	800a35c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d11b      	bne.n	800a2f4 <HAL_SPI_TransmitReceive+0x1aa>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d016      	beq.n	800a2f4 <HAL_SPI_TransmitReceive+0x1aa>
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d113      	bne.n	800a2f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	881a      	ldrh	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	1c9a      	adds	r2, r3, #2
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d11c      	bne.n	800a33c <HAL_SPI_TransmitReceive+0x1f2>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d016      	beq.n	800a33c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	b292      	uxth	r2, r2
 800a31a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	1c9a      	adds	r2, r3, #2
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a338:	2301      	movs	r3, #1
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a33c:	f7fb fec0 	bl	80060c0 <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a348:	429a      	cmp	r2, r3
 800a34a:	d807      	bhi.n	800a35c <HAL_SPI_TransmitReceive+0x212>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d003      	beq.n	800a35c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a35a:	e0fb      	b.n	800a554 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a360:	b29b      	uxth	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1a3      	bne.n	800a2ae <HAL_SPI_TransmitReceive+0x164>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d19d      	bne.n	800a2ae <HAL_SPI_TransmitReceive+0x164>
 800a372:	e0df      	b.n	800a534 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <HAL_SPI_TransmitReceive+0x23a>
 800a37c:	8a7b      	ldrh	r3, [r7, #18]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	f040 80cb 	bne.w	800a51a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a388:	b29b      	uxth	r3, r3
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d912      	bls.n	800a3b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	881a      	ldrh	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39e:	1c9a      	adds	r2, r3, #2
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	3b02      	subs	r3, #2
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a3b2:	e0b2      	b.n	800a51a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	330c      	adds	r3, #12
 800a3be:	7812      	ldrb	r2, [r2, #0]
 800a3c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3da:	e09e      	b.n	800a51a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d134      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x30a>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d02f      	beq.n	800a454 <HAL_SPI_TransmitReceive+0x30a>
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d12c      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	2b01      	cmp	r3, #1
 800a402:	d912      	bls.n	800a42a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	881a      	ldrh	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b02      	subs	r3, #2
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a428:	e012      	b.n	800a450 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	330c      	adds	r3, #12
 800a434:	7812      	ldrb	r2, [r2, #0]
 800a436:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a446:	b29b      	uxth	r3, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d148      	bne.n	800a4f4 <HAL_SPI_TransmitReceive+0x3aa>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a468:	b29b      	uxth	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d042      	beq.n	800a4f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b01      	cmp	r3, #1
 800a478:	d923      	bls.n	800a4c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	b292      	uxth	r2, r2
 800a486:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	1c9a      	adds	r2, r3, #2
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b02      	subs	r3, #2
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d81f      	bhi.n	800a4f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a4be:	605a      	str	r2, [r3, #4]
 800a4c0:	e016      	b.n	800a4f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f103 020c 	add.w	r2, r3, #12
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4f4:	f7fb fde4 	bl	80060c0 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a500:	429a      	cmp	r2, r3
 800a502:	d803      	bhi.n	800a50c <HAL_SPI_TransmitReceive+0x3c2>
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d102      	bne.n	800a512 <HAL_SPI_TransmitReceive+0x3c8>
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a518:	e01c      	b.n	800a554 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a51e:	b29b      	uxth	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	f47f af5b 	bne.w	800a3dc <HAL_SPI_TransmitReceive+0x292>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f47f af54 	bne.w	800a3dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f937 	bl	800a7ac <SPI_EndRxTxTransaction>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d006      	beq.n	800a552 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2220      	movs	r2, #32
 800a54e:	661a      	str	r2, [r3, #96]	; 0x60
 800a550:	e000      	b.n	800a554 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a552:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3728      	adds	r7, #40	; 0x28
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a580:	f7fb fd9e 	bl	80060c0 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	1a9b      	subs	r3, r3, r2
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	4413      	add	r3, r2
 800a58e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a590:	f7fb fd96 	bl	80060c0 <HAL_GetTick>
 800a594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a596:	4b39      	ldr	r3, [pc, #228]	; (800a67c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	015b      	lsls	r3, r3, #5
 800a59c:	0d1b      	lsrs	r3, r3, #20
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	fb02 f303 	mul.w	r3, r2, r3
 800a5a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5a6:	e054      	b.n	800a652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d050      	beq.n	800a652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5b0:	f7fb fd86 	bl	80060c0 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d902      	bls.n	800a5c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d13d      	bne.n	800a642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5de:	d111      	bne.n	800a604 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5e8:	d004      	beq.n	800a5f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f2:	d107      	bne.n	800a604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a60c:	d10f      	bne.n	800a62e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a62c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e017      	b.n	800a672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	3b01      	subs	r3, #1
 800a650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4013      	ands	r3, r2
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	bf0c      	ite	eq
 800a662:	2301      	moveq	r3, #1
 800a664:	2300      	movne	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d19b      	bne.n	800a5a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3720      	adds	r7, #32
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20000020 	.word	0x20000020

0800a680 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08a      	sub	sp, #40	; 0x28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a692:	f7fb fd15 	bl	80060c0 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	4413      	add	r3, r2
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a6a2:	f7fb fd0d 	bl	80060c0 <HAL_GetTick>
 800a6a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	330c      	adds	r3, #12
 800a6ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a6b0:	4b3d      	ldr	r3, [pc, #244]	; (800a7a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	00da      	lsls	r2, r3, #3
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	0d1b      	lsrs	r3, r3, #20
 800a6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a6c8:	e060      	b.n	800a78c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a6d0:	d107      	bne.n	800a6e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d104      	bne.n	800a6e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e8:	d050      	beq.n	800a78c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6ea:	f7fb fce9 	bl	80060c0 <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d902      	bls.n	800a700 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d13d      	bne.n	800a77c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a70e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a718:	d111      	bne.n	800a73e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a722:	d004      	beq.n	800a72e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a72c:	d107      	bne.n	800a73e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a73c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a746:	d10f      	bne.n	800a768 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a766:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e010      	b.n	800a79e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	3b01      	subs	r3, #1
 800a78a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	4013      	ands	r3, r2
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d196      	bne.n	800a6ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3728      	adds	r7, #40	; 0x28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000020 	.word	0x20000020

0800a7ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff ff5b 	bl	800a680 <SPI_WaitFifoStateUntilTimeout>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7d4:	f043 0220 	orr.w	r2, r3, #32
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e027      	b.n	800a830 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	2180      	movs	r1, #128	; 0x80
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fec0 	bl	800a570 <SPI_WaitFlagStateUntilTimeout>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7fa:	f043 0220 	orr.w	r2, r3, #32
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e014      	b.n	800a830 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f7ff ff34 	bl	800a680 <SPI_WaitFifoStateUntilTimeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d007      	beq.n	800a82e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a822:	f043 0220 	orr.w	r2, r3, #32
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e000      	b.n	800a830 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e049      	b.n	800a8de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7fb faae 	bl	8005dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3304      	adds	r3, #4
 800a874:	4619      	mov	r1, r3
 800a876:	4610      	mov	r0, r2
 800a878:	f000 fdea 	bl	800b450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d001      	beq.n	800a900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e054      	b.n	800a9aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0201 	orr.w	r2, r2, #1
 800a916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a26      	ldr	r2, [pc, #152]	; (800a9b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d022      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a92a:	d01d      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a22      	ldr	r2, [pc, #136]	; (800a9bc <HAL_TIM_Base_Start_IT+0xd4>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d018      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a21      	ldr	r2, [pc, #132]	; (800a9c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d013      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a1f      	ldr	r2, [pc, #124]	; (800a9c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00e      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a1e      	ldr	r2, [pc, #120]	; (800a9c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d009      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1c      	ldr	r2, [pc, #112]	; (800a9cc <HAL_TIM_Base_Start_IT+0xe4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d004      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x80>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a1b      	ldr	r2, [pc, #108]	; (800a9d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d115      	bne.n	800a994 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	4b19      	ldr	r3, [pc, #100]	; (800a9d4 <HAL_TIM_Base_Start_IT+0xec>)
 800a970:	4013      	ands	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b06      	cmp	r3, #6
 800a978:	d015      	beq.n	800a9a6 <HAL_TIM_Base_Start_IT+0xbe>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a980:	d011      	beq.n	800a9a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0201 	orr.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a992:	e008      	b.n	800a9a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0201 	orr.w	r2, r2, #1
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	e000      	b.n	800a9a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	40012c00 	.word	0x40012c00
 800a9bc:	40000400 	.word	0x40000400
 800a9c0:	40000800 	.word	0x40000800
 800a9c4:	40000c00 	.word	0x40000c00
 800a9c8:	40013400 	.word	0x40013400
 800a9cc:	40014000 	.word	0x40014000
 800a9d0:	40015000 	.word	0x40015000
 800a9d4:	00010007 	.word	0x00010007

0800a9d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e049      	b.n	800aa7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7fb f9ba 	bl	8005d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f000 fd1a 	bl	800b450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d109      	bne.n	800aaac <HAL_TIM_PWM_Start+0x24>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	bf14      	ite	ne
 800aaa4:	2301      	movne	r3, #1
 800aaa6:	2300      	moveq	r3, #0
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	e03c      	b.n	800ab26 <HAL_TIM_PWM_Start+0x9e>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d109      	bne.n	800aac6 <HAL_TIM_PWM_Start+0x3e>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	bf14      	ite	ne
 800aabe:	2301      	movne	r3, #1
 800aac0:	2300      	moveq	r3, #0
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	e02f      	b.n	800ab26 <HAL_TIM_PWM_Start+0x9e>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d109      	bne.n	800aae0 <HAL_TIM_PWM_Start+0x58>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	bf14      	ite	ne
 800aad8:	2301      	movne	r3, #1
 800aada:	2300      	moveq	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	e022      	b.n	800ab26 <HAL_TIM_PWM_Start+0x9e>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b0c      	cmp	r3, #12
 800aae4:	d109      	bne.n	800aafa <HAL_TIM_PWM_Start+0x72>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	bf14      	ite	ne
 800aaf2:	2301      	movne	r3, #1
 800aaf4:	2300      	moveq	r3, #0
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	e015      	b.n	800ab26 <HAL_TIM_PWM_Start+0x9e>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b10      	cmp	r3, #16
 800aafe:	d109      	bne.n	800ab14 <HAL_TIM_PWM_Start+0x8c>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	bf14      	ite	ne
 800ab0c:	2301      	movne	r3, #1
 800ab0e:	2300      	moveq	r3, #0
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	e008      	b.n	800ab26 <HAL_TIM_PWM_Start+0x9e>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	bf14      	ite	ne
 800ab20:	2301      	movne	r3, #1
 800ab22:	2300      	moveq	r3, #0
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e0a6      	b.n	800ac7c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <HAL_TIM_PWM_Start+0xb6>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab3c:	e023      	b.n	800ab86 <HAL_TIM_PWM_Start+0xfe>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d104      	bne.n	800ab4e <HAL_TIM_PWM_Start+0xc6>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab4c:	e01b      	b.n	800ab86 <HAL_TIM_PWM_Start+0xfe>
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d104      	bne.n	800ab5e <HAL_TIM_PWM_Start+0xd6>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2202      	movs	r2, #2
 800ab58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab5c:	e013      	b.n	800ab86 <HAL_TIM_PWM_Start+0xfe>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	2b0c      	cmp	r3, #12
 800ab62:	d104      	bne.n	800ab6e <HAL_TIM_PWM_Start+0xe6>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab6c:	e00b      	b.n	800ab86 <HAL_TIM_PWM_Start+0xfe>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b10      	cmp	r3, #16
 800ab72:	d104      	bne.n	800ab7e <HAL_TIM_PWM_Start+0xf6>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab7c:	e003      	b.n	800ab86 <HAL_TIM_PWM_Start+0xfe>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2202      	movs	r2, #2
 800ab82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 f8cc 	bl	800bd2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a3a      	ldr	r2, [pc, #232]	; (800ac84 <HAL_TIM_PWM_Start+0x1fc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d018      	beq.n	800abd0 <HAL_TIM_PWM_Start+0x148>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a39      	ldr	r2, [pc, #228]	; (800ac88 <HAL_TIM_PWM_Start+0x200>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d013      	beq.n	800abd0 <HAL_TIM_PWM_Start+0x148>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a37      	ldr	r2, [pc, #220]	; (800ac8c <HAL_TIM_PWM_Start+0x204>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d00e      	beq.n	800abd0 <HAL_TIM_PWM_Start+0x148>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a36      	ldr	r2, [pc, #216]	; (800ac90 <HAL_TIM_PWM_Start+0x208>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d009      	beq.n	800abd0 <HAL_TIM_PWM_Start+0x148>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a34      	ldr	r2, [pc, #208]	; (800ac94 <HAL_TIM_PWM_Start+0x20c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d004      	beq.n	800abd0 <HAL_TIM_PWM_Start+0x148>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a33      	ldr	r2, [pc, #204]	; (800ac98 <HAL_TIM_PWM_Start+0x210>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d101      	bne.n	800abd4 <HAL_TIM_PWM_Start+0x14c>
 800abd0:	2301      	movs	r3, #1
 800abd2:	e000      	b.n	800abd6 <HAL_TIM_PWM_Start+0x14e>
 800abd4:	2300      	movs	r3, #0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a25      	ldr	r2, [pc, #148]	; (800ac84 <HAL_TIM_PWM_Start+0x1fc>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d022      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abfc:	d01d      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a26      	ldr	r2, [pc, #152]	; (800ac9c <HAL_TIM_PWM_Start+0x214>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d018      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a24      	ldr	r2, [pc, #144]	; (800aca0 <HAL_TIM_PWM_Start+0x218>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d013      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a23      	ldr	r2, [pc, #140]	; (800aca4 <HAL_TIM_PWM_Start+0x21c>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00e      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a19      	ldr	r2, [pc, #100]	; (800ac88 <HAL_TIM_PWM_Start+0x200>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d009      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <HAL_TIM_PWM_Start+0x204>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d004      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1b2>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a18      	ldr	r2, [pc, #96]	; (800ac98 <HAL_TIM_PWM_Start+0x210>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d115      	bne.n	800ac66 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	4b19      	ldr	r3, [pc, #100]	; (800aca8 <HAL_TIM_PWM_Start+0x220>)
 800ac42:	4013      	ands	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b06      	cmp	r3, #6
 800ac4a:	d015      	beq.n	800ac78 <HAL_TIM_PWM_Start+0x1f0>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac52:	d011      	beq.n	800ac78 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f042 0201 	orr.w	r2, r2, #1
 800ac62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac64:	e008      	b.n	800ac78 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f042 0201 	orr.w	r2, r2, #1
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	e000      	b.n	800ac7a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40012c00 	.word	0x40012c00
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40014400 	.word	0x40014400
 800ac94:	40014800 	.word	0x40014800
 800ac98:	40015000 	.word	0x40015000
 800ac9c:	40000400 	.word	0x40000400
 800aca0:	40000800 	.word	0x40000800
 800aca4:	40000c00 	.word	0x40000c00
 800aca8:	00010007 	.word	0x00010007

0800acac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f003 0302 	and.w	r3, r3, #2
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d122      	bne.n	800ad08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f003 0302 	and.w	r3, r3, #2
 800accc:	2b02      	cmp	r3, #2
 800acce:	d11b      	bne.n	800ad08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f06f 0202 	mvn.w	r2, #2
 800acd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fb90 	bl	800b414 <HAL_TIM_IC_CaptureCallback>
 800acf4:	e005      	b.n	800ad02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fb82 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fb93 	bl	800b428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d122      	bne.n	800ad5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d11b      	bne.n	800ad5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f06f 0204 	mvn.w	r2, #4
 800ad2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2202      	movs	r2, #2
 800ad32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fb66 	bl	800b414 <HAL_TIM_IC_CaptureCallback>
 800ad48:	e005      	b.n	800ad56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fb58 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fb69 	bl	800b428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0308 	and.w	r3, r3, #8
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d122      	bne.n	800adb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f003 0308 	and.w	r3, r3, #8
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d11b      	bne.n	800adb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0208 	mvn.w	r2, #8
 800ad80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2204      	movs	r2, #4
 800ad86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fb3c 	bl	800b414 <HAL_TIM_IC_CaptureCallback>
 800ad9c:	e005      	b.n	800adaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fb2e 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fb3f 	bl	800b428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	f003 0310 	and.w	r3, r3, #16
 800adba:	2b10      	cmp	r3, #16
 800adbc:	d122      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0310 	and.w	r3, r3, #16
 800adc8:	2b10      	cmp	r3, #16
 800adca:	d11b      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f06f 0210 	mvn.w	r2, #16
 800add4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2208      	movs	r2, #8
 800adda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fb12 	bl	800b414 <HAL_TIM_IC_CaptureCallback>
 800adf0:	e005      	b.n	800adfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fb04 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fb15 	bl	800b428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d10e      	bne.n	800ae30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d107      	bne.n	800ae30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f06f 0201 	mvn.w	r2, #1
 800ae28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7f9 ffd0 	bl	8004dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3a:	2b80      	cmp	r3, #128	; 0x80
 800ae3c:	d10e      	bne.n	800ae5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae48:	2b80      	cmp	r3, #128	; 0x80
 800ae4a:	d107      	bne.n	800ae5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f001 f82e 	bl	800beb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae6a:	d10e      	bne.n	800ae8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae76:	2b80      	cmp	r3, #128	; 0x80
 800ae78:	d107      	bne.n	800ae8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 f821 	bl	800becc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae94:	2b40      	cmp	r3, #64	; 0x40
 800ae96:	d10e      	bne.n	800aeb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea2:	2b40      	cmp	r3, #64	; 0x40
 800aea4:	d107      	bne.n	800aeb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aeae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fac3 	bl	800b43c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b20      	cmp	r3, #32
 800aec2:	d10e      	bne.n	800aee2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d107      	bne.n	800aee2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f06f 0220 	mvn.w	r2, #32
 800aeda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 ffe1 	bl	800bea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aeec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aef0:	d10f      	bne.n	800af12 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aefc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af00:	d107      	bne.n	800af12 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800af0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 ffe7 	bl	800bee0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af20:	d10f      	bne.n	800af42 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af30:	d107      	bne.n	800af42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800af3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 ffd9 	bl	800bef4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af50:	d10f      	bne.n	800af72 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af60:	d107      	bne.n	800af72 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800af6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 ffcb 	bl	800bf08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af80:	d10f      	bne.n	800afa2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af90:	d107      	bne.n	800afa2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800af9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 ffbd 	bl	800bf1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d101      	bne.n	800afca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afc6:	2302      	movs	r3, #2
 800afc8:	e0ff      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b14      	cmp	r3, #20
 800afd6:	f200 80f0 	bhi.w	800b1ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b035 	.word	0x0800b035
 800afe4:	0800b1bb 	.word	0x0800b1bb
 800afe8:	0800b1bb 	.word	0x0800b1bb
 800afec:	0800b1bb 	.word	0x0800b1bb
 800aff0:	0800b075 	.word	0x0800b075
 800aff4:	0800b1bb 	.word	0x0800b1bb
 800aff8:	0800b1bb 	.word	0x0800b1bb
 800affc:	0800b1bb 	.word	0x0800b1bb
 800b000:	0800b0b7 	.word	0x0800b0b7
 800b004:	0800b1bb 	.word	0x0800b1bb
 800b008:	0800b1bb 	.word	0x0800b1bb
 800b00c:	0800b1bb 	.word	0x0800b1bb
 800b010:	0800b0f7 	.word	0x0800b0f7
 800b014:	0800b1bb 	.word	0x0800b1bb
 800b018:	0800b1bb 	.word	0x0800b1bb
 800b01c:	0800b1bb 	.word	0x0800b1bb
 800b020:	0800b139 	.word	0x0800b139
 800b024:	0800b1bb 	.word	0x0800b1bb
 800b028:	0800b1bb 	.word	0x0800b1bb
 800b02c:	0800b1bb 	.word	0x0800b1bb
 800b030:	0800b179 	.word	0x0800b179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68b9      	ldr	r1, [r7, #8]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fab0 	bl	800b5a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f042 0208 	orr.w	r2, r2, #8
 800b04e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	699a      	ldr	r2, [r3, #24]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0204 	bic.w	r2, r2, #4
 800b05e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6999      	ldr	r1, [r3, #24]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	691a      	ldr	r2, [r3, #16]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	619a      	str	r2, [r3, #24]
      break;
 800b072:	e0a5      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fb2a 	bl	800b6d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	699a      	ldr	r2, [r3, #24]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b08e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699a      	ldr	r2, [r3, #24]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b09e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6999      	ldr	r1, [r3, #24]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	021a      	lsls	r2, r3, #8
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	619a      	str	r2, [r3, #24]
      break;
 800b0b4:	e084      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fb9d 	bl	800b7fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f042 0208 	orr.w	r2, r2, #8
 800b0d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69da      	ldr	r2, [r3, #28]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0204 	bic.w	r2, r2, #4
 800b0e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	69d9      	ldr	r1, [r3, #28]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	691a      	ldr	r2, [r3, #16]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	61da      	str	r2, [r3, #28]
      break;
 800b0f4:	e064      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 fc0f 	bl	800b920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	69da      	ldr	r2, [r3, #28]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	69da      	ldr	r2, [r3, #28]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69d9      	ldr	r1, [r3, #28]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	021a      	lsls	r2, r3, #8
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	61da      	str	r2, [r3, #28]
      break;
 800b136:	e043      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fc82 	bl	800ba48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0208 	orr.w	r2, r2, #8
 800b152:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0204 	bic.w	r2, r2, #4
 800b162:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	691a      	ldr	r2, [r3, #16]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	430a      	orrs	r2, r1
 800b174:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b176:	e023      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68b9      	ldr	r1, [r7, #8]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fccc 	bl	800bb1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b192:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	021a      	lsls	r2, r3, #8
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	430a      	orrs	r2, r1
 800b1b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b1b8:	e002      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b1be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop

0800b1d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e0f6      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x20a>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b20e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b21a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a6f      	ldr	r2, [pc, #444]	; (800b3e8 <HAL_TIM_ConfigClockSource+0x214>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	f000 80c1 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b230:	4a6d      	ldr	r2, [pc, #436]	; (800b3e8 <HAL_TIM_ConfigClockSource+0x214>)
 800b232:	4293      	cmp	r3, r2
 800b234:	f200 80c6 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b238:	4a6c      	ldr	r2, [pc, #432]	; (800b3ec <HAL_TIM_ConfigClockSource+0x218>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	f000 80b9 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b240:	4a6a      	ldr	r2, [pc, #424]	; (800b3ec <HAL_TIM_ConfigClockSource+0x218>)
 800b242:	4293      	cmp	r3, r2
 800b244:	f200 80be 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b248:	4a69      	ldr	r2, [pc, #420]	; (800b3f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	f000 80b1 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b250:	4a67      	ldr	r2, [pc, #412]	; (800b3f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b252:	4293      	cmp	r3, r2
 800b254:	f200 80b6 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b258:	4a66      	ldr	r2, [pc, #408]	; (800b3f4 <HAL_TIM_ConfigClockSource+0x220>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	f000 80a9 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b260:	4a64      	ldr	r2, [pc, #400]	; (800b3f4 <HAL_TIM_ConfigClockSource+0x220>)
 800b262:	4293      	cmp	r3, r2
 800b264:	f200 80ae 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b268:	4a63      	ldr	r2, [pc, #396]	; (800b3f8 <HAL_TIM_ConfigClockSource+0x224>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	f000 80a1 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b270:	4a61      	ldr	r2, [pc, #388]	; (800b3f8 <HAL_TIM_ConfigClockSource+0x224>)
 800b272:	4293      	cmp	r3, r2
 800b274:	f200 80a6 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b278:	4a60      	ldr	r2, [pc, #384]	; (800b3fc <HAL_TIM_ConfigClockSource+0x228>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	f000 8099 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b280:	4a5e      	ldr	r2, [pc, #376]	; (800b3fc <HAL_TIM_ConfigClockSource+0x228>)
 800b282:	4293      	cmp	r3, r2
 800b284:	f200 809e 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b288:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b28c:	f000 8091 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b290:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b294:	f200 8096 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29c:	f000 8089 	beq.w	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b2a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2a4:	f200 808e 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2ac:	d03e      	beq.n	800b32c <HAL_TIM_ConfigClockSource+0x158>
 800b2ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2b2:	f200 8087 	bhi.w	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ba:	f000 8086 	beq.w	800b3ca <HAL_TIM_ConfigClockSource+0x1f6>
 800b2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2c2:	d87f      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2c4:	2b70      	cmp	r3, #112	; 0x70
 800b2c6:	d01a      	beq.n	800b2fe <HAL_TIM_ConfigClockSource+0x12a>
 800b2c8:	2b70      	cmp	r3, #112	; 0x70
 800b2ca:	d87b      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2cc:	2b60      	cmp	r3, #96	; 0x60
 800b2ce:	d050      	beq.n	800b372 <HAL_TIM_ConfigClockSource+0x19e>
 800b2d0:	2b60      	cmp	r3, #96	; 0x60
 800b2d2:	d877      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2d4:	2b50      	cmp	r3, #80	; 0x50
 800b2d6:	d03c      	beq.n	800b352 <HAL_TIM_ConfigClockSource+0x17e>
 800b2d8:	2b50      	cmp	r3, #80	; 0x50
 800b2da:	d873      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2dc:	2b40      	cmp	r3, #64	; 0x40
 800b2de:	d058      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1be>
 800b2e0:	2b40      	cmp	r3, #64	; 0x40
 800b2e2:	d86f      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2e4:	2b30      	cmp	r3, #48	; 0x30
 800b2e6:	d064      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b2e8:	2b30      	cmp	r3, #48	; 0x30
 800b2ea:	d86b      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2ec:	2b20      	cmp	r3, #32
 800b2ee:	d060      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	d867      	bhi.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d05c      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b2f8:	2b10      	cmp	r3, #16
 800b2fa:	d05a      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b2fc:	e062      	b.n	800b3c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	6899      	ldr	r1, [r3, #8]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f000 fced 	bl	800bcec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	609a      	str	r2, [r3, #8]
      break;
 800b32a:	e04f      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6818      	ldr	r0, [r3, #0]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	6899      	ldr	r1, [r3, #8]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f000 fcd6 	bl	800bcec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b34e:	609a      	str	r2, [r3, #8]
      break;
 800b350:	e03c      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	6859      	ldr	r1, [r3, #4]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	461a      	mov	r2, r3
 800b360:	f000 fc48 	bl	800bbf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2150      	movs	r1, #80	; 0x50
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 fca1 	bl	800bcb2 <TIM_ITRx_SetConfig>
      break;
 800b370:	e02c      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	6859      	ldr	r1, [r3, #4]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	461a      	mov	r2, r3
 800b380:	f000 fc67 	bl	800bc52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2160      	movs	r1, #96	; 0x60
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 fc91 	bl	800bcb2 <TIM_ITRx_SetConfig>
      break;
 800b390:	e01c      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6859      	ldr	r1, [r3, #4]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f000 fc28 	bl	800bbf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2140      	movs	r1, #64	; 0x40
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 fc81 	bl	800bcb2 <TIM_ITRx_SetConfig>
      break;
 800b3b0:	e00c      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4610      	mov	r0, r2
 800b3be:	f000 fc78 	bl	800bcb2 <TIM_ITRx_SetConfig>
      break;
 800b3c2:	e003      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c8:	e000      	b.n	800b3cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b3ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	00100070 	.word	0x00100070
 800b3ec:	00100060 	.word	0x00100060
 800b3f0:	00100050 	.word	0x00100050
 800b3f4:	00100040 	.word	0x00100040
 800b3f8:	00100030 	.word	0x00100030
 800b3fc:	00100020 	.word	0x00100020

0800b400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a46      	ldr	r2, [pc, #280]	; (800b57c <TIM_Base_SetConfig+0x12c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d017      	beq.n	800b498 <TIM_Base_SetConfig+0x48>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b46e:	d013      	beq.n	800b498 <TIM_Base_SetConfig+0x48>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a43      	ldr	r2, [pc, #268]	; (800b580 <TIM_Base_SetConfig+0x130>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00f      	beq.n	800b498 <TIM_Base_SetConfig+0x48>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a42      	ldr	r2, [pc, #264]	; (800b584 <TIM_Base_SetConfig+0x134>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d00b      	beq.n	800b498 <TIM_Base_SetConfig+0x48>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a41      	ldr	r2, [pc, #260]	; (800b588 <TIM_Base_SetConfig+0x138>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d007      	beq.n	800b498 <TIM_Base_SetConfig+0x48>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a40      	ldr	r2, [pc, #256]	; (800b58c <TIM_Base_SetConfig+0x13c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d003      	beq.n	800b498 <TIM_Base_SetConfig+0x48>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a3f      	ldr	r2, [pc, #252]	; (800b590 <TIM_Base_SetConfig+0x140>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d108      	bne.n	800b4aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a33      	ldr	r2, [pc, #204]	; (800b57c <TIM_Base_SetConfig+0x12c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d023      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4b8:	d01f      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a30      	ldr	r2, [pc, #192]	; (800b580 <TIM_Base_SetConfig+0x130>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d01b      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a2f      	ldr	r2, [pc, #188]	; (800b584 <TIM_Base_SetConfig+0x134>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d017      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a2e      	ldr	r2, [pc, #184]	; (800b588 <TIM_Base_SetConfig+0x138>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d013      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a2d      	ldr	r2, [pc, #180]	; (800b58c <TIM_Base_SetConfig+0x13c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00f      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a2d      	ldr	r2, [pc, #180]	; (800b594 <TIM_Base_SetConfig+0x144>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00b      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a2c      	ldr	r2, [pc, #176]	; (800b598 <TIM_Base_SetConfig+0x148>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d007      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a2b      	ldr	r2, [pc, #172]	; (800b59c <TIM_Base_SetConfig+0x14c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d003      	beq.n	800b4fa <TIM_Base_SetConfig+0xaa>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a26      	ldr	r2, [pc, #152]	; (800b590 <TIM_Base_SetConfig+0x140>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d108      	bne.n	800b50c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a12      	ldr	r2, [pc, #72]	; (800b57c <TIM_Base_SetConfig+0x12c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <TIM_Base_SetConfig+0x110>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a14      	ldr	r2, [pc, #80]	; (800b58c <TIM_Base_SetConfig+0x13c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00f      	beq.n	800b560 <TIM_Base_SetConfig+0x110>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a14      	ldr	r2, [pc, #80]	; (800b594 <TIM_Base_SetConfig+0x144>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d00b      	beq.n	800b560 <TIM_Base_SetConfig+0x110>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a13      	ldr	r2, [pc, #76]	; (800b598 <TIM_Base_SetConfig+0x148>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d007      	beq.n	800b560 <TIM_Base_SetConfig+0x110>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a12      	ldr	r2, [pc, #72]	; (800b59c <TIM_Base_SetConfig+0x14c>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_Base_SetConfig+0x110>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <TIM_Base_SetConfig+0x140>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d103      	bne.n	800b568 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	691a      	ldr	r2, [r3, #16]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	615a      	str	r2, [r3, #20]
}
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40012c00 	.word	0x40012c00
 800b580:	40000400 	.word	0x40000400
 800b584:	40000800 	.word	0x40000800
 800b588:	40000c00 	.word	0x40000c00
 800b58c:	40013400 	.word	0x40013400
 800b590:	40015000 	.word	0x40015000
 800b594:	40014000 	.word	0x40014000
 800b598:	40014400 	.word	0x40014400
 800b59c:	40014800 	.word	0x40014800

0800b5a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	f023 0201 	bic.w	r2, r3, #1
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f023 0302 	bic.w	r3, r3, #2
 800b5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a30      	ldr	r2, [pc, #192]	; (800b6bc <TIM_OC1_SetConfig+0x11c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d013      	beq.n	800b628 <TIM_OC1_SetConfig+0x88>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a2f      	ldr	r2, [pc, #188]	; (800b6c0 <TIM_OC1_SetConfig+0x120>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d00f      	beq.n	800b628 <TIM_OC1_SetConfig+0x88>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a2e      	ldr	r2, [pc, #184]	; (800b6c4 <TIM_OC1_SetConfig+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d00b      	beq.n	800b628 <TIM_OC1_SetConfig+0x88>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a2d      	ldr	r2, [pc, #180]	; (800b6c8 <TIM_OC1_SetConfig+0x128>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d007      	beq.n	800b628 <TIM_OC1_SetConfig+0x88>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a2c      	ldr	r2, [pc, #176]	; (800b6cc <TIM_OC1_SetConfig+0x12c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d003      	beq.n	800b628 <TIM_OC1_SetConfig+0x88>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a2b      	ldr	r2, [pc, #172]	; (800b6d0 <TIM_OC1_SetConfig+0x130>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d10c      	bne.n	800b642 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f023 0308 	bic.w	r3, r3, #8
 800b62e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	4313      	orrs	r3, r2
 800b638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f023 0304 	bic.w	r3, r3, #4
 800b640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a1d      	ldr	r2, [pc, #116]	; (800b6bc <TIM_OC1_SetConfig+0x11c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d013      	beq.n	800b672 <TIM_OC1_SetConfig+0xd2>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a1c      	ldr	r2, [pc, #112]	; (800b6c0 <TIM_OC1_SetConfig+0x120>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d00f      	beq.n	800b672 <TIM_OC1_SetConfig+0xd2>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a1b      	ldr	r2, [pc, #108]	; (800b6c4 <TIM_OC1_SetConfig+0x124>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d00b      	beq.n	800b672 <TIM_OC1_SetConfig+0xd2>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a1a      	ldr	r2, [pc, #104]	; (800b6c8 <TIM_OC1_SetConfig+0x128>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d007      	beq.n	800b672 <TIM_OC1_SetConfig+0xd2>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a19      	ldr	r2, [pc, #100]	; (800b6cc <TIM_OC1_SetConfig+0x12c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d003      	beq.n	800b672 <TIM_OC1_SetConfig+0xd2>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a18      	ldr	r2, [pc, #96]	; (800b6d0 <TIM_OC1_SetConfig+0x130>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d111      	bne.n	800b696 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4313      	orrs	r3, r2
 800b68a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	4313      	orrs	r3, r2
 800b694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	621a      	str	r2, [r3, #32]
}
 800b6b0:	bf00      	nop
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	40012c00 	.word	0x40012c00
 800b6c0:	40013400 	.word	0x40013400
 800b6c4:	40014000 	.word	0x40014000
 800b6c8:	40014400 	.word	0x40014400
 800b6cc:	40014800 	.word	0x40014800
 800b6d0:	40015000 	.word	0x40015000

0800b6d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b087      	sub	sp, #28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	f023 0210 	bic.w	r2, r3, #16
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	021b      	lsls	r3, r3, #8
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f023 0320 	bic.w	r3, r3, #32
 800b722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a2c      	ldr	r2, [pc, #176]	; (800b7e4 <TIM_OC2_SetConfig+0x110>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d007      	beq.n	800b748 <TIM_OC2_SetConfig+0x74>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a2b      	ldr	r2, [pc, #172]	; (800b7e8 <TIM_OC2_SetConfig+0x114>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d003      	beq.n	800b748 <TIM_OC2_SetConfig+0x74>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a2a      	ldr	r2, [pc, #168]	; (800b7ec <TIM_OC2_SetConfig+0x118>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d10d      	bne.n	800b764 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b74e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	011b      	lsls	r3, r3, #4
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4313      	orrs	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a1f      	ldr	r2, [pc, #124]	; (800b7e4 <TIM_OC2_SetConfig+0x110>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d013      	beq.n	800b794 <TIM_OC2_SetConfig+0xc0>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a1e      	ldr	r2, [pc, #120]	; (800b7e8 <TIM_OC2_SetConfig+0x114>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00f      	beq.n	800b794 <TIM_OC2_SetConfig+0xc0>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a1e      	ldr	r2, [pc, #120]	; (800b7f0 <TIM_OC2_SetConfig+0x11c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d00b      	beq.n	800b794 <TIM_OC2_SetConfig+0xc0>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a1d      	ldr	r2, [pc, #116]	; (800b7f4 <TIM_OC2_SetConfig+0x120>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d007      	beq.n	800b794 <TIM_OC2_SetConfig+0xc0>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a1c      	ldr	r2, [pc, #112]	; (800b7f8 <TIM_OC2_SetConfig+0x124>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d003      	beq.n	800b794 <TIM_OC2_SetConfig+0xc0>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a17      	ldr	r2, [pc, #92]	; (800b7ec <TIM_OC2_SetConfig+0x118>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d113      	bne.n	800b7bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b79a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	621a      	str	r2, [r3, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	371c      	adds	r7, #28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	40012c00 	.word	0x40012c00
 800b7e8:	40013400 	.word	0x40013400
 800b7ec:	40015000 	.word	0x40015000
 800b7f0:	40014000 	.word	0x40014000
 800b7f4:	40014400 	.word	0x40014400
 800b7f8:	40014800 	.word	0x40014800

0800b7fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	021b      	lsls	r3, r3, #8
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	4313      	orrs	r3, r2
 800b854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a2b      	ldr	r2, [pc, #172]	; (800b908 <TIM_OC3_SetConfig+0x10c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d007      	beq.n	800b86e <TIM_OC3_SetConfig+0x72>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a2a      	ldr	r2, [pc, #168]	; (800b90c <TIM_OC3_SetConfig+0x110>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d003      	beq.n	800b86e <TIM_OC3_SetConfig+0x72>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a29      	ldr	r2, [pc, #164]	; (800b910 <TIM_OC3_SetConfig+0x114>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d10d      	bne.n	800b88a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	021b      	lsls	r3, r3, #8
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	4313      	orrs	r3, r2
 800b880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a1e      	ldr	r2, [pc, #120]	; (800b908 <TIM_OC3_SetConfig+0x10c>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d013      	beq.n	800b8ba <TIM_OC3_SetConfig+0xbe>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a1d      	ldr	r2, [pc, #116]	; (800b90c <TIM_OC3_SetConfig+0x110>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d00f      	beq.n	800b8ba <TIM_OC3_SetConfig+0xbe>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a1d      	ldr	r2, [pc, #116]	; (800b914 <TIM_OC3_SetConfig+0x118>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d00b      	beq.n	800b8ba <TIM_OC3_SetConfig+0xbe>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a1c      	ldr	r2, [pc, #112]	; (800b918 <TIM_OC3_SetConfig+0x11c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d007      	beq.n	800b8ba <TIM_OC3_SetConfig+0xbe>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a1b      	ldr	r2, [pc, #108]	; (800b91c <TIM_OC3_SetConfig+0x120>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d003      	beq.n	800b8ba <TIM_OC3_SetConfig+0xbe>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a16      	ldr	r2, [pc, #88]	; (800b910 <TIM_OC3_SetConfig+0x114>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d113      	bne.n	800b8e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	011b      	lsls	r3, r3, #4
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	621a      	str	r2, [r3, #32]
}
 800b8fc:	bf00      	nop
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	40012c00 	.word	0x40012c00
 800b90c:	40013400 	.word	0x40013400
 800b910:	40015000 	.word	0x40015000
 800b914:	40014000 	.word	0x40014000
 800b918:	40014400 	.word	0x40014400
 800b91c:	40014800 	.word	0x40014800

0800b920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b920:	b480      	push	{r7}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	021b      	lsls	r3, r3, #8
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	4313      	orrs	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b96e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	031b      	lsls	r3, r3, #12
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4313      	orrs	r3, r2
 800b97a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a2c      	ldr	r2, [pc, #176]	; (800ba30 <TIM_OC4_SetConfig+0x110>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d007      	beq.n	800b994 <TIM_OC4_SetConfig+0x74>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a2b      	ldr	r2, [pc, #172]	; (800ba34 <TIM_OC4_SetConfig+0x114>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d003      	beq.n	800b994 <TIM_OC4_SetConfig+0x74>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a2a      	ldr	r2, [pc, #168]	; (800ba38 <TIM_OC4_SetConfig+0x118>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d10d      	bne.n	800b9b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	031b      	lsls	r3, r3, #12
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a1f      	ldr	r2, [pc, #124]	; (800ba30 <TIM_OC4_SetConfig+0x110>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d013      	beq.n	800b9e0 <TIM_OC4_SetConfig+0xc0>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ba34 <TIM_OC4_SetConfig+0x114>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00f      	beq.n	800b9e0 <TIM_OC4_SetConfig+0xc0>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ba3c <TIM_OC4_SetConfig+0x11c>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d00b      	beq.n	800b9e0 <TIM_OC4_SetConfig+0xc0>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a1d      	ldr	r2, [pc, #116]	; (800ba40 <TIM_OC4_SetConfig+0x120>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d007      	beq.n	800b9e0 <TIM_OC4_SetConfig+0xc0>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a1c      	ldr	r2, [pc, #112]	; (800ba44 <TIM_OC4_SetConfig+0x124>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d003      	beq.n	800b9e0 <TIM_OC4_SetConfig+0xc0>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a17      	ldr	r2, [pc, #92]	; (800ba38 <TIM_OC4_SetConfig+0x118>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d113      	bne.n	800ba08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	019b      	lsls	r3, r3, #6
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	019b      	lsls	r3, r3, #6
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	621a      	str	r2, [r3, #32]
}
 800ba22:	bf00      	nop
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	40012c00 	.word	0x40012c00
 800ba34:	40013400 	.word	0x40013400
 800ba38:	40015000 	.word	0x40015000
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	40014400 	.word	0x40014400
 800ba44:	40014800 	.word	0x40014800

0800ba48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	041b      	lsls	r3, r3, #16
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a19      	ldr	r2, [pc, #100]	; (800bb04 <TIM_OC5_SetConfig+0xbc>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d013      	beq.n	800baca <TIM_OC5_SetConfig+0x82>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a18      	ldr	r2, [pc, #96]	; (800bb08 <TIM_OC5_SetConfig+0xc0>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d00f      	beq.n	800baca <TIM_OC5_SetConfig+0x82>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a17      	ldr	r2, [pc, #92]	; (800bb0c <TIM_OC5_SetConfig+0xc4>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00b      	beq.n	800baca <TIM_OC5_SetConfig+0x82>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a16      	ldr	r2, [pc, #88]	; (800bb10 <TIM_OC5_SetConfig+0xc8>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d007      	beq.n	800baca <TIM_OC5_SetConfig+0x82>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a15      	ldr	r2, [pc, #84]	; (800bb14 <TIM_OC5_SetConfig+0xcc>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d003      	beq.n	800baca <TIM_OC5_SetConfig+0x82>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a14      	ldr	r2, [pc, #80]	; (800bb18 <TIM_OC5_SetConfig+0xd0>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d109      	bne.n	800bade <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	4313      	orrs	r3, r2
 800badc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	621a      	str	r2, [r3, #32]
}
 800baf8:	bf00      	nop
 800bafa:	371c      	adds	r7, #28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	40012c00 	.word	0x40012c00
 800bb08:	40013400 	.word	0x40013400
 800bb0c:	40014000 	.word	0x40014000
 800bb10:	40014400 	.word	0x40014400
 800bb14:	40014800 	.word	0x40014800
 800bb18:	40015000 	.word	0x40015000

0800bb1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	021b      	lsls	r3, r3, #8
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	051b      	lsls	r3, r3, #20
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a1a      	ldr	r2, [pc, #104]	; (800bbdc <TIM_OC6_SetConfig+0xc0>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d013      	beq.n	800bba0 <TIM_OC6_SetConfig+0x84>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a19      	ldr	r2, [pc, #100]	; (800bbe0 <TIM_OC6_SetConfig+0xc4>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d00f      	beq.n	800bba0 <TIM_OC6_SetConfig+0x84>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a18      	ldr	r2, [pc, #96]	; (800bbe4 <TIM_OC6_SetConfig+0xc8>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d00b      	beq.n	800bba0 <TIM_OC6_SetConfig+0x84>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <TIM_OC6_SetConfig+0xcc>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d007      	beq.n	800bba0 <TIM_OC6_SetConfig+0x84>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a16      	ldr	r2, [pc, #88]	; (800bbec <TIM_OC6_SetConfig+0xd0>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d003      	beq.n	800bba0 <TIM_OC6_SetConfig+0x84>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a15      	ldr	r2, [pc, #84]	; (800bbf0 <TIM_OC6_SetConfig+0xd4>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d109      	bne.n	800bbb4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	029b      	lsls	r3, r3, #10
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bf00      	nop
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	40012c00 	.word	0x40012c00
 800bbe0:	40013400 	.word	0x40013400
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	40014400 	.word	0x40014400
 800bbec:	40014800 	.word	0x40014800
 800bbf0:	40015000 	.word	0x40015000

0800bbf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6a1b      	ldr	r3, [r3, #32]
 800bc04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	f023 0201 	bic.w	r2, r3, #1
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	011b      	lsls	r3, r3, #4
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f023 030a 	bic.w	r3, r3, #10
 800bc30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	621a      	str	r2, [r3, #32]
}
 800bc46:	bf00      	nop
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b087      	sub	sp, #28
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	f023 0210 	bic.w	r2, r3, #16
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6a1b      	ldr	r3, [r3, #32]
 800bc74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	031b      	lsls	r3, r3, #12
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	011b      	lsls	r3, r3, #4
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	621a      	str	r2, [r3, #32]
}
 800bca6:	bf00      	nop
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b085      	sub	sp, #20
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bcc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	f043 0307 	orr.w	r3, r3, #7
 800bcd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	609a      	str	r2, [r3, #8]
}
 800bce0:	bf00      	nop
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	021a      	lsls	r2, r3, #8
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	609a      	str	r2, [r3, #8]
}
 800bd20:	bf00      	nop
 800bd22:	371c      	adds	r7, #28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f003 031f 	and.w	r3, r3, #31
 800bd3e:	2201      	movs	r2, #1
 800bd40:	fa02 f303 	lsl.w	r3, r2, r3
 800bd44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6a1a      	ldr	r2, [r3, #32]
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	43db      	mvns	r3, r3
 800bd4e:	401a      	ands	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6a1a      	ldr	r2, [r3, #32]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	f003 031f 	and.w	r3, r3, #31
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	fa01 f303 	lsl.w	r3, r1, r3
 800bd64:	431a      	orrs	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	621a      	str	r2, [r3, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
	...

0800bd78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d101      	bne.n	800bd90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e074      	b.n	800be7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a34      	ldr	r2, [pc, #208]	; (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d009      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a33      	ldr	r2, [pc, #204]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d004      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a31      	ldr	r2, [pc, #196]	; (800be90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d108      	bne.n	800bde0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a21      	ldr	r2, [pc, #132]	; (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d022      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be10:	d01d      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a1f      	ldr	r2, [pc, #124]	; (800be94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d018      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a1d      	ldr	r2, [pc, #116]	; (800be98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d013      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a1c      	ldr	r2, [pc, #112]	; (800be9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d00e      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a15      	ldr	r2, [pc, #84]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d009      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a18      	ldr	r2, [pc, #96]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d004      	beq.n	800be4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a11      	ldr	r2, [pc, #68]	; (800be90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d10c      	bne.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	40012c00 	.word	0x40012c00
 800be8c:	40013400 	.word	0x40013400
 800be90:	40015000 	.word	0x40015000
 800be94:	40000400 	.word	0x40000400
 800be98:	40000800 	.word	0x40000800
 800be9c:	40000c00 	.word	0x40000c00
 800bea0:	40014000 	.word	0x40014000

0800bea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e042      	b.n	800bfc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7f9 ffd9 	bl	8005f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2224      	movs	r2, #36	; 0x24
 800bf5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f022 0201 	bic.w	r2, r2, #1
 800bf70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fc50 	bl	800c818 <UART_SetConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d101      	bne.n	800bf82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e022      	b.n	800bfc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 ff40 	bl	800ce10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f042 0201 	orr.w	r2, r2, #1
 800bfbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 ffc7 	bl	800cf54 <UART_CheckIdleState>
 800bfc6:	4603      	mov	r3, r0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08a      	sub	sp, #40	; 0x28
 800bfd4:	af02      	add	r7, sp, #8
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfe6:	2b20      	cmp	r3, #32
 800bfe8:	f040 8083 	bne.w	800c0f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <HAL_UART_Transmit+0x28>
 800bff2:	88fb      	ldrh	r3, [r7, #6]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e07b      	b.n	800c0f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <HAL_UART_Transmit+0x3a>
 800c006:	2302      	movs	r3, #2
 800c008:	e074      	b.n	800c0f4 <HAL_UART_Transmit+0x124>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2221      	movs	r2, #33	; 0x21
 800c01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c022:	f7fa f84d 	bl	80060c0 <HAL_GetTick>
 800c026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	88fa      	ldrh	r2, [r7, #6]
 800c02c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	88fa      	ldrh	r2, [r7, #6]
 800c034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c040:	d108      	bne.n	800c054 <HAL_UART_Transmit+0x84>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d104      	bne.n	800c054 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	e003      	b.n	800c05c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c064:	e02c      	b.n	800c0c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2200      	movs	r2, #0
 800c06e:	2180      	movs	r1, #128	; 0x80
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 ffba 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e039      	b.n	800c0f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10b      	bne.n	800c09e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c094:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	3302      	adds	r3, #2
 800c09a:	61bb      	str	r3, [r7, #24]
 800c09c:	e007      	b.n	800c0ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1cc      	bne.n	800c066 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2140      	movs	r1, #64	; 0x40
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 ff87 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d001      	beq.n	800c0e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e006      	b.n	800c0f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e000      	b.n	800c0f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c0f2:	2302      	movs	r3, #2
  }
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3720      	adds	r7, #32
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08a      	sub	sp, #40	; 0x28
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c110:	2b20      	cmp	r3, #32
 800c112:	d142      	bne.n	800c19a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <HAL_UART_Receive_IT+0x24>
 800c11a:	88fb      	ldrh	r3, [r7, #6]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e03b      	b.n	800c19c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d101      	bne.n	800c132 <HAL_UART_Receive_IT+0x36>
 800c12e:	2302      	movs	r3, #2
 800c130:	e034      	b.n	800c19c <HAL_UART_Receive_IT+0xa0>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a17      	ldr	r2, [pc, #92]	; (800c1a4 <HAL_UART_Receive_IT+0xa8>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d01f      	beq.n	800c18a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d018      	beq.n	800c18a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	e853 3f00 	ldrex	r3, [r3]
 800c164:	613b      	str	r3, [r7, #16]
   return(result);
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	623b      	str	r3, [r7, #32]
 800c178:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17a:	69f9      	ldr	r1, [r7, #28]
 800c17c:	6a3a      	ldr	r2, [r7, #32]
 800c17e:	e841 2300 	strex	r3, r2, [r1]
 800c182:	61bb      	str	r3, [r7, #24]
   return(result);
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1e6      	bne.n	800c158 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c18a:	88fb      	ldrh	r3, [r7, #6]
 800c18c:	461a      	mov	r2, r3
 800c18e:	68b9      	ldr	r1, [r7, #8]
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f000 fff3 	bl	800d17c <UART_Start_Receive_IT>
 800c196:	4603      	mov	r3, r0
 800c198:	e000      	b.n	800c19c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c19a:	2302      	movs	r3, #2
  }
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3728      	adds	r7, #40	; 0x28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	40008000 	.word	0x40008000

0800c1a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b0ba      	sub	sp, #232	; 0xe8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c1d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c1dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d11b      	bne.n	800c21c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e8:	f003 0320 	and.w	r3, r3, #32
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d015      	beq.n	800c21c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1f4:	f003 0320 	and.w	r3, r3, #32
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d105      	bne.n	800c208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d009      	beq.n	800c21c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 82d6 	beq.w	800c7be <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
      }
      return;
 800c21a:	e2d0      	b.n	800c7be <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c220:	2b00      	cmp	r3, #0
 800c222:	f000 811f 	beq.w	800c464 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c22a:	4b8b      	ldr	r3, [pc, #556]	; (800c458 <HAL_UART_IRQHandler+0x2b0>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c236:	4b89      	ldr	r3, [pc, #548]	; (800c45c <HAL_UART_IRQHandler+0x2b4>)
 800c238:	4013      	ands	r3, r2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 8112 	beq.w	800c464 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d011      	beq.n	800c270 <HAL_UART_IRQHandler+0xc8>
 800c24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00b      	beq.n	800c270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2201      	movs	r2, #1
 800c25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c266:	f043 0201 	orr.w	r2, r3, #1
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c274:	f003 0302 	and.w	r3, r3, #2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d011      	beq.n	800c2a0 <HAL_UART_IRQHandler+0xf8>
 800c27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2202      	movs	r2, #2
 800c28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c296:	f043 0204 	orr.w	r2, r3, #4
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d011      	beq.n	800c2d0 <HAL_UART_IRQHandler+0x128>
 800c2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2204      	movs	r2, #4
 800c2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2c6:	f043 0202 	orr.w	r2, r3, #2
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2d4:	f003 0308 	and.w	r3, r3, #8
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d017      	beq.n	800c30c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2e0:	f003 0320 	and.w	r3, r3, #32
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d105      	bne.n	800c2f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c2e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c2ec:	4b5a      	ldr	r3, [pc, #360]	; (800c458 <HAL_UART_IRQHandler+0x2b0>)
 800c2ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2208      	movs	r2, #8
 800c2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c302:	f043 0208 	orr.w	r2, r3, #8
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c314:	2b00      	cmp	r3, #0
 800c316:	d012      	beq.n	800c33e <HAL_UART_IRQHandler+0x196>
 800c318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00c      	beq.n	800c33e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c32c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c334:	f043 0220 	orr.w	r2, r3, #32
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 823c 	beq.w	800c7c2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c34e:	f003 0320 	and.w	r3, r3, #32
 800c352:	2b00      	cmp	r3, #0
 800c354:	d013      	beq.n	800c37e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d105      	bne.n	800c36e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d007      	beq.n	800c37e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c392:	2b40      	cmp	r3, #64	; 0x40
 800c394:	d005      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c39a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d04f      	beq.n	800c442 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f001 f814 	bl	800d3d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d141      	bne.n	800c43a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1d9      	bne.n	800c3b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c406:	2b00      	cmp	r3, #0
 800c408:	d013      	beq.n	800c432 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c40e:	4a14      	ldr	r2, [pc, #80]	; (800c460 <HAL_UART_IRQHandler+0x2b8>)
 800c410:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c416:	4618      	mov	r0, r3
 800c418:	f7fb fde5 	bl	8007fe6 <HAL_DMA_Abort_IT>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d017      	beq.n	800c452 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c430:	e00f      	b.n	800c452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f9da 	bl	800c7ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c438:	e00b      	b.n	800c452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f9d6 	bl	800c7ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c440:	e007      	b.n	800c452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f9d2 	bl	800c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c450:	e1b7      	b.n	800c7c2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c452:	bf00      	nop
    return;
 800c454:	e1b5      	b.n	800c7c2 <HAL_UART_IRQHandler+0x61a>
 800c456:	bf00      	nop
 800c458:	10000001 	.word	0x10000001
 800c45c:	04000120 	.word	0x04000120
 800c460:	0800d49d 	.word	0x0800d49d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c468:	2b01      	cmp	r3, #1
 800c46a:	f040 814a 	bne.w	800c702 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c472:	f003 0310 	and.w	r3, r3, #16
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 8143 	beq.w	800c702 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c480:	f003 0310 	and.w	r3, r3, #16
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 813c 	beq.w	800c702 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2210      	movs	r2, #16
 800c490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c49c:	2b40      	cmp	r3, #64	; 0x40
 800c49e:	f040 80b5 	bne.w	800c60c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 8187 	beq.w	800c7c6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	f080 817f 	bcs.w	800c7c6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 8086 	bne.w	800c5f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4f0:	e853 3f00 	ldrex	r3, [r3]
 800c4f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c50e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c512:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c51a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c51e:	e841 2300 	strex	r3, r2, [r1]
 800c522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1da      	bne.n	800c4e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3308      	adds	r3, #8
 800c534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c540:	f023 0301 	bic.w	r3, r3, #1
 800c544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c55a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e1      	bne.n	800c52e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c58e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e3      	bne.n	800c56a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5c0:	f023 0310 	bic.w	r3, r3, #16
 800c5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e4      	bne.n	800c5b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fb fca2 	bl	8007f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	b29b      	uxth	r3, r3
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f8fb 	bl	800c800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c60a:	e0dc      	b.n	800c7c6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c618:	b29b      	uxth	r3, r3
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c626:	b29b      	uxth	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 80ce 	beq.w	800c7ca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c62e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 80c9 	beq.w	800c7ca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	e853 3f00 	ldrex	r3, [r3]
 800c644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c64c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c65a:	647b      	str	r3, [r7, #68]	; 0x44
 800c65c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c662:	e841 2300 	strex	r3, r2, [r1]
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e4      	bne.n	800c638 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3308      	adds	r3, #8
 800c674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	e853 3f00 	ldrex	r3, [r3]
 800c67c:	623b      	str	r3, [r7, #32]
   return(result);
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c684:	f023 0301 	bic.w	r3, r3, #1
 800c688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3308      	adds	r3, #8
 800c692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c696:	633a      	str	r2, [r7, #48]	; 0x30
 800c698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e1      	bne.n	800c66e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	e853 3f00 	ldrex	r3, [r3]
 800c6ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f023 0310 	bic.w	r3, r3, #16
 800c6d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6e0:	61fb      	str	r3, [r7, #28]
 800c6e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	69b9      	ldr	r1, [r7, #24]
 800c6e6:	69fa      	ldr	r2, [r7, #28]
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e4      	bne.n	800c6be <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f880 	bl	800c800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c700:	e063      	b.n	800c7ca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00e      	beq.n	800c72c <HAL_UART_IRQHandler+0x584>
 800c70e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d008      	beq.n	800c72c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c722:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f001 fb57 	bl	800ddd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c72a:	e051      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c734:	2b00      	cmp	r3, #0
 800c736:	d014      	beq.n	800c762 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c740:	2b00      	cmp	r3, #0
 800c742:	d105      	bne.n	800c750 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d008      	beq.n	800c762 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c754:	2b00      	cmp	r3, #0
 800c756:	d03a      	beq.n	800c7ce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	4798      	blx	r3
    }
    return;
 800c760:	e035      	b.n	800c7ce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <HAL_UART_IRQHandler+0x5da>
 800c76e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fea4 	bl	800d4c8 <UART_EndTransmit_IT>
    return;
 800c780:	e026      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d009      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x5fa>
 800c78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c792:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f001 fb30 	bl	800de00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7a0:	e016      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d010      	beq.n	800c7d0 <HAL_UART_IRQHandler+0x628>
 800c7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	da0c      	bge.n	800c7d0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f001 fb18 	bl	800ddec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7bc:	e008      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
      return;
 800c7be:	bf00      	nop
 800c7c0:	e006      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
    return;
 800c7c2:	bf00      	nop
 800c7c4:	e004      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
      return;
 800c7c6:	bf00      	nop
 800c7c8:	e002      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
      return;
 800c7ca:	bf00      	nop
 800c7cc:	e000      	b.n	800c7d0 <HAL_UART_IRQHandler+0x628>
    return;
 800c7ce:	bf00      	nop
  }
}
 800c7d0:	37e8      	adds	r7, #232	; 0xe8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop

0800c7d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7e0:	bf00      	nop
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c81c:	b08c      	sub	sp, #48	; 0x30
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	431a      	orrs	r2, r3
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	431a      	orrs	r2, r3
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	4baa      	ldr	r3, [pc, #680]	; (800caf0 <UART_SetConfig+0x2d8>)
 800c848:	4013      	ands	r3, r2
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	6812      	ldr	r2, [r2, #0]
 800c84e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c850:	430b      	orrs	r3, r1
 800c852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	68da      	ldr	r2, [r3, #12]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a9f      	ldr	r2, [pc, #636]	; (800caf4 <UART_SetConfig+0x2dc>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d004      	beq.n	800c884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c880:	4313      	orrs	r3, r2
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c88e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c898:	430b      	orrs	r3, r1
 800c89a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a2:	f023 010f 	bic.w	r1, r3, #15
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a90      	ldr	r2, [pc, #576]	; (800caf8 <UART_SetConfig+0x2e0>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d125      	bne.n	800c908 <UART_SetConfig+0xf0>
 800c8bc:	4b8f      	ldr	r3, [pc, #572]	; (800cafc <UART_SetConfig+0x2e4>)
 800c8be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8c2:	f003 0303 	and.w	r3, r3, #3
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d81a      	bhi.n	800c900 <UART_SetConfig+0xe8>
 800c8ca:	a201      	add	r2, pc, #4	; (adr r2, 800c8d0 <UART_SetConfig+0xb8>)
 800c8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d0:	0800c8e1 	.word	0x0800c8e1
 800c8d4:	0800c8f1 	.word	0x0800c8f1
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c8f9 	.word	0x0800c8f9
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8e6:	e116      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ee:	e112      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c8f0:	2304      	movs	r3, #4
 800c8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8f6:	e10e      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8fe:	e10a      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c900:	2310      	movs	r3, #16
 800c902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c906:	e106      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a7c      	ldr	r2, [pc, #496]	; (800cb00 <UART_SetConfig+0x2e8>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d138      	bne.n	800c984 <UART_SetConfig+0x16c>
 800c912:	4b7a      	ldr	r3, [pc, #488]	; (800cafc <UART_SetConfig+0x2e4>)
 800c914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c918:	f003 030c 	and.w	r3, r3, #12
 800c91c:	2b0c      	cmp	r3, #12
 800c91e:	d82d      	bhi.n	800c97c <UART_SetConfig+0x164>
 800c920:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <UART_SetConfig+0x110>)
 800c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c95d 	.word	0x0800c95d
 800c92c:	0800c97d 	.word	0x0800c97d
 800c930:	0800c97d 	.word	0x0800c97d
 800c934:	0800c97d 	.word	0x0800c97d
 800c938:	0800c96d 	.word	0x0800c96d
 800c93c:	0800c97d 	.word	0x0800c97d
 800c940:	0800c97d 	.word	0x0800c97d
 800c944:	0800c97d 	.word	0x0800c97d
 800c948:	0800c965 	.word	0x0800c965
 800c94c:	0800c97d 	.word	0x0800c97d
 800c950:	0800c97d 	.word	0x0800c97d
 800c954:	0800c97d 	.word	0x0800c97d
 800c958:	0800c975 	.word	0x0800c975
 800c95c:	2300      	movs	r3, #0
 800c95e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c962:	e0d8      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c964:	2302      	movs	r3, #2
 800c966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c96a:	e0d4      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c972:	e0d0      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c97a:	e0cc      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c982:	e0c8      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a5e      	ldr	r2, [pc, #376]	; (800cb04 <UART_SetConfig+0x2ec>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d125      	bne.n	800c9da <UART_SetConfig+0x1c2>
 800c98e:	4b5b      	ldr	r3, [pc, #364]	; (800cafc <UART_SetConfig+0x2e4>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c998:	2b30      	cmp	r3, #48	; 0x30
 800c99a:	d016      	beq.n	800c9ca <UART_SetConfig+0x1b2>
 800c99c:	2b30      	cmp	r3, #48	; 0x30
 800c99e:	d818      	bhi.n	800c9d2 <UART_SetConfig+0x1ba>
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	d00a      	beq.n	800c9ba <UART_SetConfig+0x1a2>
 800c9a4:	2b20      	cmp	r3, #32
 800c9a6:	d814      	bhi.n	800c9d2 <UART_SetConfig+0x1ba>
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <UART_SetConfig+0x19a>
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d008      	beq.n	800c9c2 <UART_SetConfig+0x1aa>
 800c9b0:	e00f      	b.n	800c9d2 <UART_SetConfig+0x1ba>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9b8:	e0ad      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9c0:	e0a9      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c9c2:	2304      	movs	r3, #4
 800c9c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9c8:	e0a5      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c9ca:	2308      	movs	r3, #8
 800c9cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9d0:	e0a1      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c9d2:	2310      	movs	r3, #16
 800c9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9d8:	e09d      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a4a      	ldr	r2, [pc, #296]	; (800cb08 <UART_SetConfig+0x2f0>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d125      	bne.n	800ca30 <UART_SetConfig+0x218>
 800c9e4:	4b45      	ldr	r3, [pc, #276]	; (800cafc <UART_SetConfig+0x2e4>)
 800c9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c9ee:	2bc0      	cmp	r3, #192	; 0xc0
 800c9f0:	d016      	beq.n	800ca20 <UART_SetConfig+0x208>
 800c9f2:	2bc0      	cmp	r3, #192	; 0xc0
 800c9f4:	d818      	bhi.n	800ca28 <UART_SetConfig+0x210>
 800c9f6:	2b80      	cmp	r3, #128	; 0x80
 800c9f8:	d00a      	beq.n	800ca10 <UART_SetConfig+0x1f8>
 800c9fa:	2b80      	cmp	r3, #128	; 0x80
 800c9fc:	d814      	bhi.n	800ca28 <UART_SetConfig+0x210>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <UART_SetConfig+0x1f0>
 800ca02:	2b40      	cmp	r3, #64	; 0x40
 800ca04:	d008      	beq.n	800ca18 <UART_SetConfig+0x200>
 800ca06:	e00f      	b.n	800ca28 <UART_SetConfig+0x210>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca0e:	e082      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca10:	2302      	movs	r3, #2
 800ca12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca16:	e07e      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca18:	2304      	movs	r3, #4
 800ca1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca1e:	e07a      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca20:	2308      	movs	r3, #8
 800ca22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca26:	e076      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca28:	2310      	movs	r3, #16
 800ca2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca2e:	e072      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a35      	ldr	r2, [pc, #212]	; (800cb0c <UART_SetConfig+0x2f4>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d12a      	bne.n	800ca90 <UART_SetConfig+0x278>
 800ca3a:	4b30      	ldr	r3, [pc, #192]	; (800cafc <UART_SetConfig+0x2e4>)
 800ca3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca48:	d01a      	beq.n	800ca80 <UART_SetConfig+0x268>
 800ca4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca4e:	d81b      	bhi.n	800ca88 <UART_SetConfig+0x270>
 800ca50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca54:	d00c      	beq.n	800ca70 <UART_SetConfig+0x258>
 800ca56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca5a:	d815      	bhi.n	800ca88 <UART_SetConfig+0x270>
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d003      	beq.n	800ca68 <UART_SetConfig+0x250>
 800ca60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca64:	d008      	beq.n	800ca78 <UART_SetConfig+0x260>
 800ca66:	e00f      	b.n	800ca88 <UART_SetConfig+0x270>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca6e:	e052      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca70:	2302      	movs	r3, #2
 800ca72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca76:	e04e      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca78:	2304      	movs	r3, #4
 800ca7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca7e:	e04a      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca80:	2308      	movs	r3, #8
 800ca82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca86:	e046      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca8e:	e042      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a17      	ldr	r2, [pc, #92]	; (800caf4 <UART_SetConfig+0x2dc>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d13a      	bne.n	800cb10 <UART_SetConfig+0x2f8>
 800ca9a:	4b18      	ldr	r3, [pc, #96]	; (800cafc <UART_SetConfig+0x2e4>)
 800ca9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800caa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800caa8:	d01a      	beq.n	800cae0 <UART_SetConfig+0x2c8>
 800caaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800caae:	d81b      	bhi.n	800cae8 <UART_SetConfig+0x2d0>
 800cab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cab4:	d00c      	beq.n	800cad0 <UART_SetConfig+0x2b8>
 800cab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caba:	d815      	bhi.n	800cae8 <UART_SetConfig+0x2d0>
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <UART_SetConfig+0x2b0>
 800cac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cac4:	d008      	beq.n	800cad8 <UART_SetConfig+0x2c0>
 800cac6:	e00f      	b.n	800cae8 <UART_SetConfig+0x2d0>
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cace:	e022      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800cad0:	2302      	movs	r3, #2
 800cad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cad6:	e01e      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cade:	e01a      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cae6:	e016      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caee:	e012      	b.n	800cb16 <UART_SetConfig+0x2fe>
 800caf0:	cfff69f3 	.word	0xcfff69f3
 800caf4:	40008000 	.word	0x40008000
 800caf8:	40013800 	.word	0x40013800
 800cafc:	40021000 	.word	0x40021000
 800cb00:	40004400 	.word	0x40004400
 800cb04:	40004800 	.word	0x40004800
 800cb08:	40004c00 	.word	0x40004c00
 800cb0c:	40005000 	.word	0x40005000
 800cb10:	2310      	movs	r3, #16
 800cb12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4aae      	ldr	r2, [pc, #696]	; (800cdd4 <UART_SetConfig+0x5bc>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	f040 8097 	bne.w	800cc50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb26:	2b08      	cmp	r3, #8
 800cb28:	d823      	bhi.n	800cb72 <UART_SetConfig+0x35a>
 800cb2a:	a201      	add	r2, pc, #4	; (adr r2, 800cb30 <UART_SetConfig+0x318>)
 800cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb30:	0800cb55 	.word	0x0800cb55
 800cb34:	0800cb73 	.word	0x0800cb73
 800cb38:	0800cb5d 	.word	0x0800cb5d
 800cb3c:	0800cb73 	.word	0x0800cb73
 800cb40:	0800cb63 	.word	0x0800cb63
 800cb44:	0800cb73 	.word	0x0800cb73
 800cb48:	0800cb73 	.word	0x0800cb73
 800cb4c:	0800cb73 	.word	0x0800cb73
 800cb50:	0800cb6b 	.word	0x0800cb6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb54:	f7fc ff5c 	bl	8009a10 <HAL_RCC_GetPCLK1Freq>
 800cb58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb5a:	e010      	b.n	800cb7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb5c:	4b9e      	ldr	r3, [pc, #632]	; (800cdd8 <UART_SetConfig+0x5c0>)
 800cb5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb60:	e00d      	b.n	800cb7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb62:	f7fc fee7 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 800cb66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb68:	e009      	b.n	800cb7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb70:	e005      	b.n	800cb7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cb7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 8130 	beq.w	800cde6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8a:	4a94      	ldr	r2, [pc, #592]	; (800cddc <UART_SetConfig+0x5c4>)
 800cb8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb90:	461a      	mov	r2, r3
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	005b      	lsls	r3, r3, #1
 800cba2:	4413      	add	r3, r2
 800cba4:	69ba      	ldr	r2, [r7, #24]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d305      	bcc.n	800cbb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbb0:	69ba      	ldr	r2, [r7, #24]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d903      	bls.n	800cbbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cbbc:	e113      	b.n	800cde6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	60bb      	str	r3, [r7, #8]
 800cbc4:	60fa      	str	r2, [r7, #12]
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbca:	4a84      	ldr	r2, [pc, #528]	; (800cddc <UART_SetConfig+0x5c4>)
 800cbcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	603b      	str	r3, [r7, #0]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cbe0:	f7f4 f87a 	bl	8000cd8 <__aeabi_uldivmod>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4610      	mov	r0, r2
 800cbea:	4619      	mov	r1, r3
 800cbec:	f04f 0200 	mov.w	r2, #0
 800cbf0:	f04f 0300 	mov.w	r3, #0
 800cbf4:	020b      	lsls	r3, r1, #8
 800cbf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbfa:	0202      	lsls	r2, r0, #8
 800cbfc:	6979      	ldr	r1, [r7, #20]
 800cbfe:	6849      	ldr	r1, [r1, #4]
 800cc00:	0849      	lsrs	r1, r1, #1
 800cc02:	2000      	movs	r0, #0
 800cc04:	460c      	mov	r4, r1
 800cc06:	4605      	mov	r5, r0
 800cc08:	eb12 0804 	adds.w	r8, r2, r4
 800cc0c:	eb43 0905 	adc.w	r9, r3, r5
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	469a      	mov	sl, r3
 800cc18:	4693      	mov	fp, r2
 800cc1a:	4652      	mov	r2, sl
 800cc1c:	465b      	mov	r3, fp
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4649      	mov	r1, r9
 800cc22:	f7f4 f859 	bl	8000cd8 <__aeabi_uldivmod>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc34:	d308      	bcc.n	800cc48 <UART_SetConfig+0x430>
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc3c:	d204      	bcs.n	800cc48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6a3a      	ldr	r2, [r7, #32]
 800cc44:	60da      	str	r2, [r3, #12]
 800cc46:	e0ce      	b.n	800cde6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc4e:	e0ca      	b.n	800cde6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	69db      	ldr	r3, [r3, #28]
 800cc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc58:	d166      	bne.n	800cd28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cc5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc5e:	2b08      	cmp	r3, #8
 800cc60:	d827      	bhi.n	800ccb2 <UART_SetConfig+0x49a>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <UART_SetConfig+0x450>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cc8d 	.word	0x0800cc8d
 800cc6c:	0800cc95 	.word	0x0800cc95
 800cc70:	0800cc9d 	.word	0x0800cc9d
 800cc74:	0800ccb3 	.word	0x0800ccb3
 800cc78:	0800cca3 	.word	0x0800cca3
 800cc7c:	0800ccb3 	.word	0x0800ccb3
 800cc80:	0800ccb3 	.word	0x0800ccb3
 800cc84:	0800ccb3 	.word	0x0800ccb3
 800cc88:	0800ccab 	.word	0x0800ccab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc8c:	f7fc fec0 	bl	8009a10 <HAL_RCC_GetPCLK1Freq>
 800cc90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc92:	e014      	b.n	800ccbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc94:	f7fc fed2 	bl	8009a3c <HAL_RCC_GetPCLK2Freq>
 800cc98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc9a:	e010      	b.n	800ccbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc9c:	4b4e      	ldr	r3, [pc, #312]	; (800cdd8 <UART_SetConfig+0x5c0>)
 800cc9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cca0:	e00d      	b.n	800ccbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cca2:	f7fc fe47 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 800cca6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cca8:	e009      	b.n	800ccbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccb0:	e005      	b.n	800ccbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ccbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 8090 	beq.w	800cde6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccca:	4a44      	ldr	r2, [pc, #272]	; (800cddc <UART_SetConfig+0x5c4>)
 800cccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccd8:	005a      	lsls	r2, r3, #1
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	085b      	lsrs	r3, r3, #1
 800cce0:	441a      	add	r2, r3
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	2b0f      	cmp	r3, #15
 800ccf0:	d916      	bls.n	800cd20 <UART_SetConfig+0x508>
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf8:	d212      	bcs.n	800cd20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	f023 030f 	bic.w	r3, r3, #15
 800cd02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	085b      	lsrs	r3, r3, #1
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	8bfb      	ldrh	r3, [r7, #30]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	8bfa      	ldrh	r2, [r7, #30]
 800cd1c:	60da      	str	r2, [r3, #12]
 800cd1e:	e062      	b.n	800cde6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cd20:	2301      	movs	r3, #1
 800cd22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cd26:	e05e      	b.n	800cde6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd2c:	2b08      	cmp	r3, #8
 800cd2e:	d828      	bhi.n	800cd82 <UART_SetConfig+0x56a>
 800cd30:	a201      	add	r2, pc, #4	; (adr r2, 800cd38 <UART_SetConfig+0x520>)
 800cd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd36:	bf00      	nop
 800cd38:	0800cd5d 	.word	0x0800cd5d
 800cd3c:	0800cd65 	.word	0x0800cd65
 800cd40:	0800cd6d 	.word	0x0800cd6d
 800cd44:	0800cd83 	.word	0x0800cd83
 800cd48:	0800cd73 	.word	0x0800cd73
 800cd4c:	0800cd83 	.word	0x0800cd83
 800cd50:	0800cd83 	.word	0x0800cd83
 800cd54:	0800cd83 	.word	0x0800cd83
 800cd58:	0800cd7b 	.word	0x0800cd7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd5c:	f7fc fe58 	bl	8009a10 <HAL_RCC_GetPCLK1Freq>
 800cd60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd62:	e014      	b.n	800cd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd64:	f7fc fe6a 	bl	8009a3c <HAL_RCC_GetPCLK2Freq>
 800cd68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd6a:	e010      	b.n	800cd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd6c:	4b1a      	ldr	r3, [pc, #104]	; (800cdd8 <UART_SetConfig+0x5c0>)
 800cd6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd70:	e00d      	b.n	800cd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd72:	f7fc fddf 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 800cd76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd78:	e009      	b.n	800cd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd80:	e005      	b.n	800cd8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cd8c:	bf00      	nop
    }

    if (pclk != 0U)
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d028      	beq.n	800cde6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	4a10      	ldr	r2, [pc, #64]	; (800cddc <UART_SetConfig+0x5c4>)
 800cd9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	085b      	lsrs	r3, r3, #1
 800cdac:	441a      	add	r2, r3
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	2b0f      	cmp	r3, #15
 800cdbc:	d910      	bls.n	800cde0 <UART_SetConfig+0x5c8>
 800cdbe:	6a3b      	ldr	r3, [r7, #32]
 800cdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdc4:	d20c      	bcs.n	800cde0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60da      	str	r2, [r3, #12]
 800cdd0:	e009      	b.n	800cde6 <UART_SetConfig+0x5ce>
 800cdd2:	bf00      	nop
 800cdd4:	40008000 	.word	0x40008000
 800cdd8:	00f42400 	.word	0x00f42400
 800cddc:	080141c8 	.word	0x080141c8
      }
      else
      {
        ret = HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ce02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3730      	adds	r7, #48	; 0x30
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ce10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00a      	beq.n	800ce3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00a      	beq.n	800ce7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00a      	beq.n	800cea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00a      	beq.n	800cec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	430a      	orrs	r2, r1
 800cee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d01a      	beq.n	800cf26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf0e:	d10a      	bne.n	800cf26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00a      	beq.n	800cf48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	605a      	str	r2, [r3, #4]
  }
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf64:	f7f9 f8ac 	bl	80060c0 <HAL_GetTick>
 800cf68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b08      	cmp	r3, #8
 800cf76:	d10e      	bne.n	800cf96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f82f 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d001      	beq.n	800cf96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e025      	b.n	800cfe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	d10e      	bne.n	800cfc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f819 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e00f      	b.n	800cfe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b09c      	sub	sp, #112	; 0x70
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	60f8      	str	r0, [r7, #12]
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	603b      	str	r3, [r7, #0]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cffa:	e0a9      	b.n	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d002:	f000 80a5 	beq.w	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d006:	f7f9 f85b 	bl	80060c0 <HAL_GetTick>
 800d00a:	4602      	mov	r2, r0
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d012:	429a      	cmp	r2, r3
 800d014:	d302      	bcc.n	800d01c <UART_WaitOnFlagUntilTimeout+0x32>
 800d016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d140      	bne.n	800d09e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d024:	e853 3f00 	ldrex	r3, [r3]
 800d028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d030:	667b      	str	r3, [r7, #100]	; 0x64
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d03c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d042:	e841 2300 	strex	r3, r2, [r1]
 800d046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1e6      	bne.n	800d01c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3308      	adds	r3, #8
 800d054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d058:	e853 3f00 	ldrex	r3, [r3]
 800d05c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	f023 0301 	bic.w	r3, r3, #1
 800d064:	663b      	str	r3, [r7, #96]	; 0x60
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3308      	adds	r3, #8
 800d06c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d06e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1e5      	bne.n	800d04e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2220      	movs	r2, #32
 800d08e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d09a:	2303      	movs	r3, #3
 800d09c:	e069      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d051      	beq.n	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0ba:	d149      	bne.n	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	e853 3f00 	ldrex	r3, [r3]
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d0da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ec:	e841 2300 	strex	r3, r2, [r1]
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1e6      	bne.n	800d0c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	e853 3f00 	ldrex	r3, [r3]
 800d106:	613b      	str	r3, [r7, #16]
   return(result);
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3308      	adds	r3, #8
 800d116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d118:	623a      	str	r2, [r7, #32]
 800d11a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11c:	69f9      	ldr	r1, [r7, #28]
 800d11e:	6a3a      	ldr	r2, [r7, #32]
 800d120:	e841 2300 	strex	r3, r2, [r1]
 800d124:	61bb      	str	r3, [r7, #24]
   return(result);
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1e5      	bne.n	800d0f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2220      	movs	r2, #32
 800d130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2220      	movs	r2, #32
 800d138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2220      	movs	r2, #32
 800d140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d14c:	2303      	movs	r3, #3
 800d14e:	e010      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	69da      	ldr	r2, [r3, #28]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	4013      	ands	r3, r2
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	bf0c      	ite	eq
 800d160:	2301      	moveq	r3, #1
 800d162:	2300      	movne	r3, #0
 800d164:	b2db      	uxtb	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f43f af46 	beq.w	800cffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3770      	adds	r7, #112	; 0x70
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b0a3      	sub	sp, #140	; 0x8c
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4613      	mov	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	88fa      	ldrh	r2, [r7, #6]
 800d194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	88fa      	ldrh	r2, [r7, #6]
 800d19c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ae:	d10e      	bne.n	800d1ce <UART_Start_Receive_IT+0x52>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d105      	bne.n	800d1c4 <UART_Start_Receive_IT+0x48>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d1be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1c2:	e02d      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	22ff      	movs	r2, #255	; 0xff
 800d1c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1cc:	e028      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10d      	bne.n	800d1f2 <UART_Start_Receive_IT+0x76>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <UART_Start_Receive_IT+0x6c>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	22ff      	movs	r2, #255	; 0xff
 800d1e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1e6:	e01b      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	227f      	movs	r2, #127	; 0x7f
 800d1ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1f0:	e016      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1fa:	d10d      	bne.n	800d218 <UART_Start_Receive_IT+0x9c>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d104      	bne.n	800d20e <UART_Start_Receive_IT+0x92>
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	227f      	movs	r2, #127	; 0x7f
 800d208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d20c:	e008      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	223f      	movs	r2, #63	; 0x3f
 800d212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d216:	e003      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2222      	movs	r2, #34	; 0x22
 800d22c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3308      	adds	r3, #8
 800d236:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d23a:	e853 3f00 	ldrex	r3, [r3]
 800d23e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d242:	f043 0301 	orr.w	r3, r3, #1
 800d246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3308      	adds	r3, #8
 800d250:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d254:	673a      	str	r2, [r7, #112]	; 0x70
 800d256:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d258:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d25a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d25c:	e841 2300 	strex	r3, r2, [r1]
 800d260:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1e3      	bne.n	800d230 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d270:	d153      	bne.n	800d31a <UART_Start_Receive_IT+0x19e>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d278:	88fa      	ldrh	r2, [r7, #6]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d34d      	bcc.n	800d31a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d286:	d107      	bne.n	800d298 <UART_Start_Receive_IT+0x11c>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d103      	bne.n	800d298 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4a4b      	ldr	r2, [pc, #300]	; (800d3c0 <UART_Start_Receive_IT+0x244>)
 800d294:	671a      	str	r2, [r3, #112]	; 0x70
 800d296:	e002      	b.n	800d29e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4a4a      	ldr	r2, [pc, #296]	; (800d3c4 <UART_Start_Receive_IT+0x248>)
 800d29c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d01a      	beq.n	800d2e4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b6:	e853 3f00 	ldrex	r3, [r3]
 800d2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d2d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2d8:	e841 2300 	strex	r3, r2, [r1]
 800d2dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1e4      	bne.n	800d2ae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	3308      	adds	r3, #8
 800d2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ee:	e853 3f00 	ldrex	r3, [r3]
 800d2f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3308      	adds	r3, #8
 800d302:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d304:	64ba      	str	r2, [r7, #72]	; 0x48
 800d306:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d308:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d30a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d30c:	e841 2300 	strex	r3, r2, [r1]
 800d310:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1e5      	bne.n	800d2e4 <UART_Start_Receive_IT+0x168>
 800d318:	e04a      	b.n	800d3b0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d322:	d107      	bne.n	800d334 <UART_Start_Receive_IT+0x1b8>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d103      	bne.n	800d334 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	4a26      	ldr	r2, [pc, #152]	; (800d3c8 <UART_Start_Receive_IT+0x24c>)
 800d330:	671a      	str	r2, [r3, #112]	; 0x70
 800d332:	e002      	b.n	800d33a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	4a25      	ldr	r2, [pc, #148]	; (800d3cc <UART_Start_Receive_IT+0x250>)
 800d338:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d019      	beq.n	800d37e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d35e:	677b      	str	r3, [r7, #116]	; 0x74
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
 800d36a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_Start_Receive_IT+0x1ce>
 800d37c:	e018      	b.n	800d3b0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	e853 3f00 	ldrex	r3, [r3]
 800d38a:	613b      	str	r3, [r7, #16]
   return(result);
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	f043 0320 	orr.w	r3, r3, #32
 800d392:	67bb      	str	r3, [r7, #120]	; 0x78
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	461a      	mov	r2, r3
 800d39a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d39c:	623b      	str	r3, [r7, #32]
 800d39e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a0:	69f9      	ldr	r1, [r7, #28]
 800d3a2:	6a3a      	ldr	r2, [r7, #32]
 800d3a4:	e841 2300 	strex	r3, r2, [r1]
 800d3a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e6      	bne.n	800d37e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	378c      	adds	r7, #140	; 0x8c
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	0800dad9 	.word	0x0800dad9
 800d3c4:	0800d7e1 	.word	0x0800d7e1
 800d3c8:	0800d67f 	.word	0x0800d67f
 800d3cc:	0800d51f 	.word	0x0800d51f

0800d3d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b095      	sub	sp, #84	; 0x54
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e0:	e853 3f00 	ldrex	r3, [r3]
 800d3e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d3f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3fe:	e841 2300 	strex	r3, r2, [r1]
 800d402:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e6      	bne.n	800d3d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	3308      	adds	r3, #8
 800d410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d412:	6a3b      	ldr	r3, [r7, #32]
 800d414:	e853 3f00 	ldrex	r3, [r3]
 800d418:	61fb      	str	r3, [r7, #28]
   return(result);
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d420:	f023 0301 	bic.w	r3, r3, #1
 800d424:	64bb      	str	r3, [r7, #72]	; 0x48
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3308      	adds	r3, #8
 800d42c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d42e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e3      	bne.n	800d40a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d446:	2b01      	cmp	r3, #1
 800d448:	d118      	bne.n	800d47c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	e853 3f00 	ldrex	r3, [r3]
 800d456:	60bb      	str	r3, [r7, #8]
   return(result);
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f023 0310 	bic.w	r3, r3, #16
 800d45e:	647b      	str	r3, [r7, #68]	; 0x44
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d468:	61bb      	str	r3, [r7, #24]
 800d46a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46c:	6979      	ldr	r1, [r7, #20]
 800d46e:	69ba      	ldr	r2, [r7, #24]
 800d470:	e841 2300 	strex	r3, r2, [r1]
 800d474:	613b      	str	r3, [r7, #16]
   return(result);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1e6      	bne.n	800d44a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2220      	movs	r2, #32
 800d480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d490:	bf00      	nop
 800d492:	3754      	adds	r7, #84	; 0x54
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f7ff f996 	bl	800c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4c0:	bf00      	nop
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	e853 3f00 	ldrex	r3, [r3]
 800d4dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e4:	61fb      	str	r3, [r7, #28]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	61bb      	str	r3, [r7, #24]
 800d4f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f2:	6979      	ldr	r1, [r7, #20]
 800d4f4:	69ba      	ldr	r2, [r7, #24]
 800d4f6:	e841 2300 	strex	r3, r2, [r1]
 800d4fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e6      	bne.n	800d4d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2220      	movs	r2, #32
 800d506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff f961 	bl	800c7d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d516:	bf00      	nop
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b096      	sub	sp, #88	; 0x58
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d52c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d536:	2b22      	cmp	r3, #34	; 0x22
 800d538:	f040 8095 	bne.w	800d666 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d542:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d546:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d54a:	b2d9      	uxtb	r1, r3
 800d54c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d550:	b2da      	uxtb	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d556:	400a      	ands	r2, r1
 800d558:	b2d2      	uxtb	r2, r2
 800d55a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d560:	1c5a      	adds	r2, r3, #1
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	3b01      	subs	r3, #1
 800d570:	b29a      	uxth	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d57e:	b29b      	uxth	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d178      	bne.n	800d676 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	e853 3f00 	ldrex	r3, [r3]
 800d590:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d598:	653b      	str	r3, [r7, #80]	; 0x50
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5a2:	647b      	str	r3, [r7, #68]	; 0x44
 800d5a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5aa:	e841 2300 	strex	r3, r2, [r1]
 800d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1e6      	bne.n	800d584 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3308      	adds	r3, #8
 800d5bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	e853 3f00 	ldrex	r3, [r3]
 800d5c4:	623b      	str	r3, [r7, #32]
   return(result);
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	f023 0301 	bic.w	r3, r3, #1
 800d5cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	3308      	adds	r3, #8
 800d5d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5d6:	633a      	str	r2, [r7, #48]	; 0x30
 800d5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5de:	e841 2300 	strex	r3, r2, [r1]
 800d5e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1e5      	bne.n	800d5b6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d12e      	bne.n	800d65e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	e853 3f00 	ldrex	r3, [r3]
 800d612:	60fb      	str	r3, [r7, #12]
   return(result);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f023 0310 	bic.w	r3, r3, #16
 800d61a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d624:	61fb      	str	r3, [r7, #28]
 800d626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d628:	69b9      	ldr	r1, [r7, #24]
 800d62a:	69fa      	ldr	r2, [r7, #28]
 800d62c:	e841 2300 	strex	r3, r2, [r1]
 800d630:	617b      	str	r3, [r7, #20]
   return(result);
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d1e6      	bne.n	800d606 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	f003 0310 	and.w	r3, r3, #16
 800d642:	2b10      	cmp	r3, #16
 800d644:	d103      	bne.n	800d64e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2210      	movs	r2, #16
 800d64c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff f8d2 	bl	800c800 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d65c:	e00b      	b.n	800d676 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7f8 fcc8 	bl	8005ff4 <HAL_UART_RxCpltCallback>
}
 800d664:	e007      	b.n	800d676 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	699a      	ldr	r2, [r3, #24]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f042 0208 	orr.w	r2, r2, #8
 800d674:	619a      	str	r2, [r3, #24]
}
 800d676:	bf00      	nop
 800d678:	3758      	adds	r7, #88	; 0x58
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b096      	sub	sp, #88	; 0x58
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d68c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d696:	2b22      	cmp	r3, #34	; 0x22
 800d698:	f040 8095 	bne.w	800d7c6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6aa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d6ac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d6b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6c0:	1c9a      	adds	r2, r3, #2
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d178      	bne.n	800d7d6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d702:	643b      	str	r3, [r7, #64]	; 0x40
 800d704:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d70a:	e841 2300 	strex	r3, r2, [r1]
 800d70e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d712:	2b00      	cmp	r3, #0
 800d714:	d1e6      	bne.n	800d6e4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3308      	adds	r3, #8
 800d71c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	e853 3f00 	ldrex	r3, [r3]
 800d724:	61fb      	str	r3, [r7, #28]
   return(result);
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	f023 0301 	bic.w	r3, r3, #1
 800d72c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3308      	adds	r3, #8
 800d734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d736:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d73a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d73e:	e841 2300 	strex	r3, r2, [r1]
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1e5      	bne.n	800d716 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2220      	movs	r2, #32
 800d74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d12e      	bne.n	800d7be <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	60bb      	str	r3, [r7, #8]
   return(result);
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	f023 0310 	bic.w	r3, r3, #16
 800d77a:	647b      	str	r3, [r7, #68]	; 0x44
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d784:	61bb      	str	r3, [r7, #24]
 800d786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6979      	ldr	r1, [r7, #20]
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	613b      	str	r3, [r7, #16]
   return(result);
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e6      	bne.n	800d766 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d103      	bne.n	800d7ae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2210      	movs	r2, #16
 800d7ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff f822 	bl	800c800 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d7bc:	e00b      	b.n	800d7d6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7f8 fc18 	bl	8005ff4 <HAL_UART_RxCpltCallback>
}
 800d7c4:	e007      	b.n	800d7d6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	699a      	ldr	r2, [r3, #24]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f042 0208 	orr.w	r2, r2, #8
 800d7d4:	619a      	str	r2, [r3, #24]
}
 800d7d6:	bf00      	nop
 800d7d8:	3758      	adds	r7, #88	; 0x58
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b0a6      	sub	sp, #152	; 0x98
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d816:	2b22      	cmp	r3, #34	; 0x22
 800d818:	f040 814f 	bne.w	800daba <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d822:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d826:	e0f6      	b.n	800da16 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d832:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d836:	b2d9      	uxtb	r1, r3
 800d838:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d842:	400a      	ands	r2, r1
 800d844:	b2d2      	uxtb	r2, r2
 800d846:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d858:	b29b      	uxth	r3, r3
 800d85a:	3b01      	subs	r3, #1
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d86e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d872:	f003 0307 	and.w	r3, r3, #7
 800d876:	2b00      	cmp	r3, #0
 800d878:	d053      	beq.n	800d922 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d87a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	d011      	beq.n	800d8aa <UART_RxISR_8BIT_FIFOEN+0xca>
 800d886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00b      	beq.n	800d8aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2201      	movs	r2, #1
 800d898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8a0:	f043 0201 	orr.w	r2, r3, #1
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8ae:	f003 0302 	and.w	r3, r3, #2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d011      	beq.n	800d8da <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d8b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8ba:	f003 0301 	and.w	r3, r3, #1
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00b      	beq.n	800d8da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8d0:	f043 0204 	orr.w	r2, r3, #4
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8de:	f003 0304 	and.w	r3, r3, #4
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d011      	beq.n	800d90a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d8e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00b      	beq.n	800d90a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2204      	movs	r2, #4
 800d8f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d900:	f043 0202 	orr.w	r2, r3, #2
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d006      	beq.n	800d922 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7fe ff69 	bl	800c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d928:	b29b      	uxth	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d173      	bne.n	800da16 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d936:	e853 3f00 	ldrex	r3, [r3]
 800d93a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d93c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d93e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d950:	66bb      	str	r3, [r7, #104]	; 0x68
 800d952:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d954:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d958:	e841 2300 	strex	r3, r2, [r1]
 800d95c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d95e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1e4      	bne.n	800d92e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3308      	adds	r3, #8
 800d96a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d96e:	e853 3f00 	ldrex	r3, [r3]
 800d972:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d97a:	f023 0301 	bic.w	r3, r3, #1
 800d97e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3308      	adds	r3, #8
 800d986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d988:	657a      	str	r2, [r7, #84]	; 0x54
 800d98a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d98e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d990:	e841 2300 	strex	r3, r2, [r1]
 800d994:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1e3      	bne.n	800d964 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d12e      	bne.n	800da10 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c0:	e853 3f00 	ldrex	r3, [r3]
 800d9c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	f023 0310 	bic.w	r3, r3, #16
 800d9cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9d6:	643b      	str	r3, [r7, #64]	; 0x40
 800d9d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9de:	e841 2300 	strex	r3, r2, [r1]
 800d9e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1e6      	bne.n	800d9b8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	69db      	ldr	r3, [r3, #28]
 800d9f0:	f003 0310 	and.w	r3, r3, #16
 800d9f4:	2b10      	cmp	r3, #16
 800d9f6:	d103      	bne.n	800da00 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2210      	movs	r2, #16
 800d9fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7fe fef9 	bl	800c800 <HAL_UARTEx_RxEventCallback>
 800da0e:	e002      	b.n	800da16 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7f8 faef 	bl	8005ff4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d006      	beq.n	800da2c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800da1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da22:	f003 0320 	and.w	r3, r3, #32
 800da26:	2b00      	cmp	r3, #0
 800da28:	f47f aefe 	bne.w	800d828 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800da36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d045      	beq.n	800daca <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800da44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800da48:	429a      	cmp	r2, r3
 800da4a:	d23e      	bcs.n	800daca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	3308      	adds	r3, #8
 800da52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	e853 3f00 	ldrex	r3, [r3]
 800da5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da62:	673b      	str	r3, [r7, #112]	; 0x70
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3308      	adds	r3, #8
 800da6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da74:	e841 2300 	strex	r3, r2, [r1]
 800da78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1e5      	bne.n	800da4c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a14      	ldr	r2, [pc, #80]	; (800dad4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800da84:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	e853 3f00 	ldrex	r3, [r3]
 800da92:	60bb      	str	r3, [r7, #8]
   return(result);
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f043 0320 	orr.w	r3, r3, #32
 800da9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	461a      	mov	r2, r3
 800daa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa4:	61bb      	str	r3, [r7, #24]
 800daa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa8:	6979      	ldr	r1, [r7, #20]
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	e841 2300 	strex	r3, r2, [r1]
 800dab0:	613b      	str	r3, [r7, #16]
   return(result);
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1e6      	bne.n	800da86 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dab8:	e007      	b.n	800daca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	699a      	ldr	r2, [r3, #24]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f042 0208 	orr.w	r2, r2, #8
 800dac8:	619a      	str	r2, [r3, #24]
}
 800daca:	bf00      	nop
 800dacc:	3798      	adds	r7, #152	; 0x98
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	0800d51f 	.word	0x0800d51f

0800dad8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b0a8      	sub	sp, #160	; 0xa0
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dae6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	69db      	ldr	r3, [r3, #28]
 800daf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	689b      	ldr	r3, [r3, #8]
 800db04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db0e:	2b22      	cmp	r3, #34	; 0x22
 800db10:	f040 8153 	bne.w	800ddba <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db1e:	e0fa      	b.n	800dd16 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800db32:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800db36:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800db3a:	4013      	ands	r3, r2
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db48:	1c9a      	adds	r2, r3, #2
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db54:	b29b      	uxth	r3, r3
 800db56:	3b01      	subs	r3, #1
 800db58:	b29a      	uxth	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	69db      	ldr	r3, [r3, #28]
 800db66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800db6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	2b00      	cmp	r3, #0
 800db74:	d053      	beq.n	800dc1e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d011      	beq.n	800dba6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800db82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00b      	beq.n	800dba6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2201      	movs	r2, #1
 800db94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db9c:	f043 0201 	orr.w	r2, r3, #1
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dba6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbaa:	f003 0302 	and.w	r3, r3, #2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d011      	beq.n	800dbd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dbb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2202      	movs	r2, #2
 800dbc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbcc:	f043 0204 	orr.w	r2, r3, #4
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbda:	f003 0304 	and.w	r3, r3, #4
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d011      	beq.n	800dc06 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dbe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00b      	beq.n	800dc06 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2204      	movs	r2, #4
 800dbf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbfc:	f043 0202 	orr.w	r2, r3, #2
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d006      	beq.n	800dc1e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7fe fdeb 	bl	800c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d175      	bne.n	800dd16 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc32:	e853 3f00 	ldrex	r3, [r3]
 800dc36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dc38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc4e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc54:	e841 2300 	strex	r3, r2, [r1]
 800dc58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1e4      	bne.n	800dc2a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	3308      	adds	r3, #8
 800dc66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6a:	e853 3f00 	ldrex	r3, [r3]
 800dc6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc76:	f023 0301 	bic.w	r3, r3, #1
 800dc7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3308      	adds	r3, #8
 800dc84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dc88:	65ba      	str	r2, [r7, #88]	; 0x58
 800dc8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc90:	e841 2300 	strex	r3, r2, [r1]
 800dc94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e1      	bne.n	800dc60 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2220      	movs	r2, #32
 800dca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d12e      	bne.n	800dd10 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc0:	e853 3f00 	ldrex	r3, [r3]
 800dcc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc8:	f023 0310 	bic.w	r3, r3, #16
 800dccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcd6:	647b      	str	r3, [r7, #68]	; 0x44
 800dcd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dcdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcde:	e841 2300 	strex	r3, r2, [r1]
 800dce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1e6      	bne.n	800dcb8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	f003 0310 	and.w	r3, r3, #16
 800dcf4:	2b10      	cmp	r3, #16
 800dcf6:	d103      	bne.n	800dd00 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2210      	movs	r2, #16
 800dcfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7fe fd79 	bl	800c800 <HAL_UARTEx_RxEventCallback>
 800dd0e:	e002      	b.n	800dd16 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7f8 f96f 	bl	8005ff4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <UART_RxISR_16BIT_FIFOEN+0x254>
 800dd1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd22:	f003 0320 	and.w	r3, r3, #32
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f47f aefa 	bne.w	800db20 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd32:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dd36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d045      	beq.n	800ddca <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd44:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d23e      	bcs.n	800ddca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3308      	adds	r3, #8
 800dd52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	e853 3f00 	ldrex	r3, [r3]
 800dd5a:	623b      	str	r3, [r7, #32]
   return(result);
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd62:	677b      	str	r3, [r7, #116]	; 0x74
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dd6c:	633a      	str	r2, [r7, #48]	; 0x30
 800dd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd74:	e841 2300 	strex	r3, r2, [r1]
 800dd78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e5      	bne.n	800dd4c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a14      	ldr	r2, [pc, #80]	; (800ddd4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800dd84:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	e853 3f00 	ldrex	r3, [r3]
 800dd92:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f043 0320 	orr.w	r3, r3, #32
 800dd9a:	673b      	str	r3, [r7, #112]	; 0x70
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	461a      	mov	r2, r3
 800dda2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dda4:	61fb      	str	r3, [r7, #28]
 800dda6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda8:	69b9      	ldr	r1, [r7, #24]
 800ddaa:	69fa      	ldr	r2, [r7, #28]
 800ddac:	e841 2300 	strex	r3, r2, [r1]
 800ddb0:	617b      	str	r3, [r7, #20]
   return(result);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1e6      	bne.n	800dd86 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ddb8:	e007      	b.n	800ddca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	699a      	ldr	r2, [r3, #24]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f042 0208 	orr.w	r2, r2, #8
 800ddc8:	619a      	str	r2, [r3, #24]
}
 800ddca:	bf00      	nop
 800ddcc:	37a0      	adds	r7, #160	; 0xa0
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	0800d67f 	.word	0x0800d67f

0800ddd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de22:	2b01      	cmp	r3, #1
 800de24:	d101      	bne.n	800de2a <HAL_UARTEx_DisableFifoMode+0x16>
 800de26:	2302      	movs	r3, #2
 800de28:	e027      	b.n	800de7a <HAL_UARTEx_DisableFifoMode+0x66>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2201      	movs	r2, #1
 800de2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2224      	movs	r2, #36	; 0x24
 800de36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f022 0201 	bic.w	r2, r2, #1
 800de50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800de58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2220      	movs	r2, #32
 800de6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3714      	adds	r7, #20
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b084      	sub	sp, #16
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
 800de8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de96:	2b01      	cmp	r3, #1
 800de98:	d101      	bne.n	800de9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de9a:	2302      	movs	r3, #2
 800de9c:	e02d      	b.n	800defa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2224      	movs	r2, #36	; 0x24
 800deaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f022 0201 	bic.w	r2, r2, #1
 800dec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	430a      	orrs	r2, r1
 800ded8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f850 	bl	800df80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2220      	movs	r2, #32
 800deec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df02:	b580      	push	{r7, lr}
 800df04:	b084      	sub	sp, #16
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
 800df0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df12:	2b01      	cmp	r3, #1
 800df14:	d101      	bne.n	800df1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df16:	2302      	movs	r3, #2
 800df18:	e02d      	b.n	800df76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2224      	movs	r2, #36	; 0x24
 800df26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f022 0201 	bic.w	r2, r2, #1
 800df40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	430a      	orrs	r2, r1
 800df54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 f812 	bl	800df80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2220      	movs	r2, #32
 800df68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d108      	bne.n	800dfa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dfa0:	e031      	b.n	800e006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dfa2:	2308      	movs	r3, #8
 800dfa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dfa6:	2308      	movs	r3, #8
 800dfa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	0e5b      	lsrs	r3, r3, #25
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	f003 0307 	and.w	r3, r3, #7
 800dfb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	0f5b      	lsrs	r3, r3, #29
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	f003 0307 	and.w	r3, r3, #7
 800dfc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfca:	7bbb      	ldrb	r3, [r7, #14]
 800dfcc:	7b3a      	ldrb	r2, [r7, #12]
 800dfce:	4911      	ldr	r1, [pc, #68]	; (800e014 <UARTEx_SetNbDataToProcess+0x94>)
 800dfd0:	5c8a      	ldrb	r2, [r1, r2]
 800dfd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dfd6:	7b3a      	ldrb	r2, [r7, #12]
 800dfd8:	490f      	ldr	r1, [pc, #60]	; (800e018 <UARTEx_SetNbDataToProcess+0x98>)
 800dfda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	7b7a      	ldrb	r2, [r7, #13]
 800dfec:	4909      	ldr	r1, [pc, #36]	; (800e014 <UARTEx_SetNbDataToProcess+0x94>)
 800dfee:	5c8a      	ldrb	r2, [r1, r2]
 800dff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dff4:	7b7a      	ldrb	r2, [r7, #13]
 800dff6:	4908      	ldr	r1, [pc, #32]	; (800e018 <UARTEx_SetNbDataToProcess+0x98>)
 800dff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dffa:	fb93 f3f2 	sdiv	r3, r3, r2
 800dffe:	b29a      	uxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e006:	bf00      	nop
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	080141e0 	.word	0x080141e0
 800e018:	080141e8 	.word	0x080141e8

0800e01c <atof>:
 800e01c:	2100      	movs	r1, #0
 800e01e:	f001 bd9b 	b.w	800fb58 <strtod>

0800e022 <atoi>:
 800e022:	220a      	movs	r2, #10
 800e024:	2100      	movs	r1, #0
 800e026:	f001 be27 	b.w	800fc78 <strtol>
	...

0800e02c <__errno>:
 800e02c:	4b01      	ldr	r3, [pc, #4]	; (800e034 <__errno+0x8>)
 800e02e:	6818      	ldr	r0, [r3, #0]
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	2000004c 	.word	0x2000004c

0800e038 <__libc_init_array>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	4d0d      	ldr	r5, [pc, #52]	; (800e070 <__libc_init_array+0x38>)
 800e03c:	4c0d      	ldr	r4, [pc, #52]	; (800e074 <__libc_init_array+0x3c>)
 800e03e:	1b64      	subs	r4, r4, r5
 800e040:	10a4      	asrs	r4, r4, #2
 800e042:	2600      	movs	r6, #0
 800e044:	42a6      	cmp	r6, r4
 800e046:	d109      	bne.n	800e05c <__libc_init_array+0x24>
 800e048:	4d0b      	ldr	r5, [pc, #44]	; (800e078 <__libc_init_array+0x40>)
 800e04a:	4c0c      	ldr	r4, [pc, #48]	; (800e07c <__libc_init_array+0x44>)
 800e04c:	f005 f896 	bl	801317c <_init>
 800e050:	1b64      	subs	r4, r4, r5
 800e052:	10a4      	asrs	r4, r4, #2
 800e054:	2600      	movs	r6, #0
 800e056:	42a6      	cmp	r6, r4
 800e058:	d105      	bne.n	800e066 <__libc_init_array+0x2e>
 800e05a:	bd70      	pop	{r4, r5, r6, pc}
 800e05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e060:	4798      	blx	r3
 800e062:	3601      	adds	r6, #1
 800e064:	e7ee      	b.n	800e044 <__libc_init_array+0xc>
 800e066:	f855 3b04 	ldr.w	r3, [r5], #4
 800e06a:	4798      	blx	r3
 800e06c:	3601      	adds	r6, #1
 800e06e:	e7f2      	b.n	800e056 <__libc_init_array+0x1e>
 800e070:	080146e0 	.word	0x080146e0
 800e074:	080146e0 	.word	0x080146e0
 800e078:	080146e0 	.word	0x080146e0
 800e07c:	080146e4 	.word	0x080146e4

0800e080 <memcpy>:
 800e080:	440a      	add	r2, r1
 800e082:	4291      	cmp	r1, r2
 800e084:	f100 33ff 	add.w	r3, r0, #4294967295
 800e088:	d100      	bne.n	800e08c <memcpy+0xc>
 800e08a:	4770      	bx	lr
 800e08c:	b510      	push	{r4, lr}
 800e08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e092:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e096:	4291      	cmp	r1, r2
 800e098:	d1f9      	bne.n	800e08e <memcpy+0xe>
 800e09a:	bd10      	pop	{r4, pc}

0800e09c <memset>:
 800e09c:	4402      	add	r2, r0
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d100      	bne.n	800e0a6 <memset+0xa>
 800e0a4:	4770      	bx	lr
 800e0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e0aa:	e7f9      	b.n	800e0a0 <memset+0x4>

0800e0ac <__cvt>:
 800e0ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b0:	ec55 4b10 	vmov	r4, r5, d0
 800e0b4:	2d00      	cmp	r5, #0
 800e0b6:	460e      	mov	r6, r1
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	462b      	mov	r3, r5
 800e0bc:	bfbb      	ittet	lt
 800e0be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e0c2:	461d      	movlt	r5, r3
 800e0c4:	2300      	movge	r3, #0
 800e0c6:	232d      	movlt	r3, #45	; 0x2d
 800e0c8:	700b      	strb	r3, [r1, #0]
 800e0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e0d0:	4691      	mov	r9, r2
 800e0d2:	f023 0820 	bic.w	r8, r3, #32
 800e0d6:	bfbc      	itt	lt
 800e0d8:	4622      	movlt	r2, r4
 800e0da:	4614      	movlt	r4, r2
 800e0dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e0e0:	d005      	beq.n	800e0ee <__cvt+0x42>
 800e0e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e0e6:	d100      	bne.n	800e0ea <__cvt+0x3e>
 800e0e8:	3601      	adds	r6, #1
 800e0ea:	2102      	movs	r1, #2
 800e0ec:	e000      	b.n	800e0f0 <__cvt+0x44>
 800e0ee:	2103      	movs	r1, #3
 800e0f0:	ab03      	add	r3, sp, #12
 800e0f2:	9301      	str	r3, [sp, #4]
 800e0f4:	ab02      	add	r3, sp, #8
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	ec45 4b10 	vmov	d0, r4, r5
 800e0fc:	4653      	mov	r3, sl
 800e0fe:	4632      	mov	r2, r6
 800e100:	f001 ff12 	bl	800ff28 <_dtoa_r>
 800e104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e108:	4607      	mov	r7, r0
 800e10a:	d102      	bne.n	800e112 <__cvt+0x66>
 800e10c:	f019 0f01 	tst.w	r9, #1
 800e110:	d022      	beq.n	800e158 <__cvt+0xac>
 800e112:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e116:	eb07 0906 	add.w	r9, r7, r6
 800e11a:	d110      	bne.n	800e13e <__cvt+0x92>
 800e11c:	783b      	ldrb	r3, [r7, #0]
 800e11e:	2b30      	cmp	r3, #48	; 0x30
 800e120:	d10a      	bne.n	800e138 <__cvt+0x8c>
 800e122:	2200      	movs	r2, #0
 800e124:	2300      	movs	r3, #0
 800e126:	4620      	mov	r0, r4
 800e128:	4629      	mov	r1, r5
 800e12a:	f7f2 fcf5 	bl	8000b18 <__aeabi_dcmpeq>
 800e12e:	b918      	cbnz	r0, 800e138 <__cvt+0x8c>
 800e130:	f1c6 0601 	rsb	r6, r6, #1
 800e134:	f8ca 6000 	str.w	r6, [sl]
 800e138:	f8da 3000 	ldr.w	r3, [sl]
 800e13c:	4499      	add	r9, r3
 800e13e:	2200      	movs	r2, #0
 800e140:	2300      	movs	r3, #0
 800e142:	4620      	mov	r0, r4
 800e144:	4629      	mov	r1, r5
 800e146:	f7f2 fce7 	bl	8000b18 <__aeabi_dcmpeq>
 800e14a:	b108      	cbz	r0, 800e150 <__cvt+0xa4>
 800e14c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e150:	2230      	movs	r2, #48	; 0x30
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	454b      	cmp	r3, r9
 800e156:	d307      	bcc.n	800e168 <__cvt+0xbc>
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e15c:	1bdb      	subs	r3, r3, r7
 800e15e:	4638      	mov	r0, r7
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	b004      	add	sp, #16
 800e164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e168:	1c59      	adds	r1, r3, #1
 800e16a:	9103      	str	r1, [sp, #12]
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	e7f0      	b.n	800e152 <__cvt+0xa6>

0800e170 <__exponent>:
 800e170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e172:	4603      	mov	r3, r0
 800e174:	2900      	cmp	r1, #0
 800e176:	bfb8      	it	lt
 800e178:	4249      	neglt	r1, r1
 800e17a:	f803 2b02 	strb.w	r2, [r3], #2
 800e17e:	bfb4      	ite	lt
 800e180:	222d      	movlt	r2, #45	; 0x2d
 800e182:	222b      	movge	r2, #43	; 0x2b
 800e184:	2909      	cmp	r1, #9
 800e186:	7042      	strb	r2, [r0, #1]
 800e188:	dd2a      	ble.n	800e1e0 <__exponent+0x70>
 800e18a:	f10d 0407 	add.w	r4, sp, #7
 800e18e:	46a4      	mov	ip, r4
 800e190:	270a      	movs	r7, #10
 800e192:	46a6      	mov	lr, r4
 800e194:	460a      	mov	r2, r1
 800e196:	fb91 f6f7 	sdiv	r6, r1, r7
 800e19a:	fb07 1516 	mls	r5, r7, r6, r1
 800e19e:	3530      	adds	r5, #48	; 0x30
 800e1a0:	2a63      	cmp	r2, #99	; 0x63
 800e1a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e1a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e1aa:	4631      	mov	r1, r6
 800e1ac:	dcf1      	bgt.n	800e192 <__exponent+0x22>
 800e1ae:	3130      	adds	r1, #48	; 0x30
 800e1b0:	f1ae 0502 	sub.w	r5, lr, #2
 800e1b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e1b8:	1c44      	adds	r4, r0, #1
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	4561      	cmp	r1, ip
 800e1be:	d30a      	bcc.n	800e1d6 <__exponent+0x66>
 800e1c0:	f10d 0209 	add.w	r2, sp, #9
 800e1c4:	eba2 020e 	sub.w	r2, r2, lr
 800e1c8:	4565      	cmp	r5, ip
 800e1ca:	bf88      	it	hi
 800e1cc:	2200      	movhi	r2, #0
 800e1ce:	4413      	add	r3, r2
 800e1d0:	1a18      	subs	r0, r3, r0
 800e1d2:	b003      	add	sp, #12
 800e1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e1de:	e7ed      	b.n	800e1bc <__exponent+0x4c>
 800e1e0:	2330      	movs	r3, #48	; 0x30
 800e1e2:	3130      	adds	r1, #48	; 0x30
 800e1e4:	7083      	strb	r3, [r0, #2]
 800e1e6:	70c1      	strb	r1, [r0, #3]
 800e1e8:	1d03      	adds	r3, r0, #4
 800e1ea:	e7f1      	b.n	800e1d0 <__exponent+0x60>

0800e1ec <_printf_float>:
 800e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	ed2d 8b02 	vpush	{d8}
 800e1f4:	b08d      	sub	sp, #52	; 0x34
 800e1f6:	460c      	mov	r4, r1
 800e1f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e1fc:	4616      	mov	r6, r2
 800e1fe:	461f      	mov	r7, r3
 800e200:	4605      	mov	r5, r0
 800e202:	f003 f9a5 	bl	8011550 <_localeconv_r>
 800e206:	f8d0 a000 	ldr.w	sl, [r0]
 800e20a:	4650      	mov	r0, sl
 800e20c:	f7f2 f808 	bl	8000220 <strlen>
 800e210:	2300      	movs	r3, #0
 800e212:	930a      	str	r3, [sp, #40]	; 0x28
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	9305      	str	r3, [sp, #20]
 800e218:	f8d8 3000 	ldr.w	r3, [r8]
 800e21c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e220:	3307      	adds	r3, #7
 800e222:	f023 0307 	bic.w	r3, r3, #7
 800e226:	f103 0208 	add.w	r2, r3, #8
 800e22a:	f8c8 2000 	str.w	r2, [r8]
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e236:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e23a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e23e:	9307      	str	r3, [sp, #28]
 800e240:	f8cd 8018 	str.w	r8, [sp, #24]
 800e244:	ee08 0a10 	vmov	s16, r0
 800e248:	4b9f      	ldr	r3, [pc, #636]	; (800e4c8 <_printf_float+0x2dc>)
 800e24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e24e:	f04f 32ff 	mov.w	r2, #4294967295
 800e252:	f7f2 fc93 	bl	8000b7c <__aeabi_dcmpun>
 800e256:	bb88      	cbnz	r0, 800e2bc <_printf_float+0xd0>
 800e258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e25c:	4b9a      	ldr	r3, [pc, #616]	; (800e4c8 <_printf_float+0x2dc>)
 800e25e:	f04f 32ff 	mov.w	r2, #4294967295
 800e262:	f7f2 fc6d 	bl	8000b40 <__aeabi_dcmple>
 800e266:	bb48      	cbnz	r0, 800e2bc <_printf_float+0xd0>
 800e268:	2200      	movs	r2, #0
 800e26a:	2300      	movs	r3, #0
 800e26c:	4640      	mov	r0, r8
 800e26e:	4649      	mov	r1, r9
 800e270:	f7f2 fc5c 	bl	8000b2c <__aeabi_dcmplt>
 800e274:	b110      	cbz	r0, 800e27c <_printf_float+0x90>
 800e276:	232d      	movs	r3, #45	; 0x2d
 800e278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e27c:	4b93      	ldr	r3, [pc, #588]	; (800e4cc <_printf_float+0x2e0>)
 800e27e:	4894      	ldr	r0, [pc, #592]	; (800e4d0 <_printf_float+0x2e4>)
 800e280:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e284:	bf94      	ite	ls
 800e286:	4698      	movls	r8, r3
 800e288:	4680      	movhi	r8, r0
 800e28a:	2303      	movs	r3, #3
 800e28c:	6123      	str	r3, [r4, #16]
 800e28e:	9b05      	ldr	r3, [sp, #20]
 800e290:	f023 0204 	bic.w	r2, r3, #4
 800e294:	6022      	str	r2, [r4, #0]
 800e296:	f04f 0900 	mov.w	r9, #0
 800e29a:	9700      	str	r7, [sp, #0]
 800e29c:	4633      	mov	r3, r6
 800e29e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f000 f9d8 	bl	800e658 <_printf_common>
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	f040 8090 	bne.w	800e3ce <_printf_float+0x1e2>
 800e2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b2:	b00d      	add	sp, #52	; 0x34
 800e2b4:	ecbd 8b02 	vpop	{d8}
 800e2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2bc:	4642      	mov	r2, r8
 800e2be:	464b      	mov	r3, r9
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	4649      	mov	r1, r9
 800e2c4:	f7f2 fc5a 	bl	8000b7c <__aeabi_dcmpun>
 800e2c8:	b140      	cbz	r0, 800e2dc <_printf_float+0xf0>
 800e2ca:	464b      	mov	r3, r9
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	bfbc      	itt	lt
 800e2d0:	232d      	movlt	r3, #45	; 0x2d
 800e2d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e2d6:	487f      	ldr	r0, [pc, #508]	; (800e4d4 <_printf_float+0x2e8>)
 800e2d8:	4b7f      	ldr	r3, [pc, #508]	; (800e4d8 <_printf_float+0x2ec>)
 800e2da:	e7d1      	b.n	800e280 <_printf_float+0x94>
 800e2dc:	6863      	ldr	r3, [r4, #4]
 800e2de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e2e2:	9206      	str	r2, [sp, #24]
 800e2e4:	1c5a      	adds	r2, r3, #1
 800e2e6:	d13f      	bne.n	800e368 <_printf_float+0x17c>
 800e2e8:	2306      	movs	r3, #6
 800e2ea:	6063      	str	r3, [r4, #4]
 800e2ec:	9b05      	ldr	r3, [sp, #20]
 800e2ee:	6861      	ldr	r1, [r4, #4]
 800e2f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9303      	str	r3, [sp, #12]
 800e2f8:	ab0a      	add	r3, sp, #40	; 0x28
 800e2fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e2fe:	ab09      	add	r3, sp, #36	; 0x24
 800e300:	ec49 8b10 	vmov	d0, r8, r9
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	6022      	str	r2, [r4, #0]
 800e308:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e30c:	4628      	mov	r0, r5
 800e30e:	f7ff fecd 	bl	800e0ac <__cvt>
 800e312:	9b06      	ldr	r3, [sp, #24]
 800e314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e316:	2b47      	cmp	r3, #71	; 0x47
 800e318:	4680      	mov	r8, r0
 800e31a:	d108      	bne.n	800e32e <_printf_float+0x142>
 800e31c:	1cc8      	adds	r0, r1, #3
 800e31e:	db02      	blt.n	800e326 <_printf_float+0x13a>
 800e320:	6863      	ldr	r3, [r4, #4]
 800e322:	4299      	cmp	r1, r3
 800e324:	dd41      	ble.n	800e3aa <_printf_float+0x1be>
 800e326:	f1ab 0b02 	sub.w	fp, fp, #2
 800e32a:	fa5f fb8b 	uxtb.w	fp, fp
 800e32e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e332:	d820      	bhi.n	800e376 <_printf_float+0x18a>
 800e334:	3901      	subs	r1, #1
 800e336:	465a      	mov	r2, fp
 800e338:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e33c:	9109      	str	r1, [sp, #36]	; 0x24
 800e33e:	f7ff ff17 	bl	800e170 <__exponent>
 800e342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e344:	1813      	adds	r3, r2, r0
 800e346:	2a01      	cmp	r2, #1
 800e348:	4681      	mov	r9, r0
 800e34a:	6123      	str	r3, [r4, #16]
 800e34c:	dc02      	bgt.n	800e354 <_printf_float+0x168>
 800e34e:	6822      	ldr	r2, [r4, #0]
 800e350:	07d2      	lsls	r2, r2, #31
 800e352:	d501      	bpl.n	800e358 <_printf_float+0x16c>
 800e354:	3301      	adds	r3, #1
 800e356:	6123      	str	r3, [r4, #16]
 800e358:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d09c      	beq.n	800e29a <_printf_float+0xae>
 800e360:	232d      	movs	r3, #45	; 0x2d
 800e362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e366:	e798      	b.n	800e29a <_printf_float+0xae>
 800e368:	9a06      	ldr	r2, [sp, #24]
 800e36a:	2a47      	cmp	r2, #71	; 0x47
 800e36c:	d1be      	bne.n	800e2ec <_printf_float+0x100>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1bc      	bne.n	800e2ec <_printf_float+0x100>
 800e372:	2301      	movs	r3, #1
 800e374:	e7b9      	b.n	800e2ea <_printf_float+0xfe>
 800e376:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e37a:	d118      	bne.n	800e3ae <_printf_float+0x1c2>
 800e37c:	2900      	cmp	r1, #0
 800e37e:	6863      	ldr	r3, [r4, #4]
 800e380:	dd0b      	ble.n	800e39a <_printf_float+0x1ae>
 800e382:	6121      	str	r1, [r4, #16]
 800e384:	b913      	cbnz	r3, 800e38c <_printf_float+0x1a0>
 800e386:	6822      	ldr	r2, [r4, #0]
 800e388:	07d0      	lsls	r0, r2, #31
 800e38a:	d502      	bpl.n	800e392 <_printf_float+0x1a6>
 800e38c:	3301      	adds	r3, #1
 800e38e:	440b      	add	r3, r1
 800e390:	6123      	str	r3, [r4, #16]
 800e392:	65a1      	str	r1, [r4, #88]	; 0x58
 800e394:	f04f 0900 	mov.w	r9, #0
 800e398:	e7de      	b.n	800e358 <_printf_float+0x16c>
 800e39a:	b913      	cbnz	r3, 800e3a2 <_printf_float+0x1b6>
 800e39c:	6822      	ldr	r2, [r4, #0]
 800e39e:	07d2      	lsls	r2, r2, #31
 800e3a0:	d501      	bpl.n	800e3a6 <_printf_float+0x1ba>
 800e3a2:	3302      	adds	r3, #2
 800e3a4:	e7f4      	b.n	800e390 <_printf_float+0x1a4>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e7f2      	b.n	800e390 <_printf_float+0x1a4>
 800e3aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b0:	4299      	cmp	r1, r3
 800e3b2:	db05      	blt.n	800e3c0 <_printf_float+0x1d4>
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	6121      	str	r1, [r4, #16]
 800e3b8:	07d8      	lsls	r0, r3, #31
 800e3ba:	d5ea      	bpl.n	800e392 <_printf_float+0x1a6>
 800e3bc:	1c4b      	adds	r3, r1, #1
 800e3be:	e7e7      	b.n	800e390 <_printf_float+0x1a4>
 800e3c0:	2900      	cmp	r1, #0
 800e3c2:	bfd4      	ite	le
 800e3c4:	f1c1 0202 	rsble	r2, r1, #2
 800e3c8:	2201      	movgt	r2, #1
 800e3ca:	4413      	add	r3, r2
 800e3cc:	e7e0      	b.n	800e390 <_printf_float+0x1a4>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	055a      	lsls	r2, r3, #21
 800e3d2:	d407      	bmi.n	800e3e4 <_printf_float+0x1f8>
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	4642      	mov	r2, r8
 800e3d8:	4631      	mov	r1, r6
 800e3da:	4628      	mov	r0, r5
 800e3dc:	47b8      	blx	r7
 800e3de:	3001      	adds	r0, #1
 800e3e0:	d12c      	bne.n	800e43c <_printf_float+0x250>
 800e3e2:	e764      	b.n	800e2ae <_printf_float+0xc2>
 800e3e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e3e8:	f240 80e0 	bls.w	800e5ac <_printf_float+0x3c0>
 800e3ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f7f2 fb90 	bl	8000b18 <__aeabi_dcmpeq>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d034      	beq.n	800e466 <_printf_float+0x27a>
 800e3fc:	4a37      	ldr	r2, [pc, #220]	; (800e4dc <_printf_float+0x2f0>)
 800e3fe:	2301      	movs	r3, #1
 800e400:	4631      	mov	r1, r6
 800e402:	4628      	mov	r0, r5
 800e404:	47b8      	blx	r7
 800e406:	3001      	adds	r0, #1
 800e408:	f43f af51 	beq.w	800e2ae <_printf_float+0xc2>
 800e40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e410:	429a      	cmp	r2, r3
 800e412:	db02      	blt.n	800e41a <_printf_float+0x22e>
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	07d8      	lsls	r0, r3, #31
 800e418:	d510      	bpl.n	800e43c <_printf_float+0x250>
 800e41a:	ee18 3a10 	vmov	r3, s16
 800e41e:	4652      	mov	r2, sl
 800e420:	4631      	mov	r1, r6
 800e422:	4628      	mov	r0, r5
 800e424:	47b8      	blx	r7
 800e426:	3001      	adds	r0, #1
 800e428:	f43f af41 	beq.w	800e2ae <_printf_float+0xc2>
 800e42c:	f04f 0800 	mov.w	r8, #0
 800e430:	f104 091a 	add.w	r9, r4, #26
 800e434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e436:	3b01      	subs	r3, #1
 800e438:	4543      	cmp	r3, r8
 800e43a:	dc09      	bgt.n	800e450 <_printf_float+0x264>
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	079b      	lsls	r3, r3, #30
 800e440:	f100 8105 	bmi.w	800e64e <_printf_float+0x462>
 800e444:	68e0      	ldr	r0, [r4, #12]
 800e446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e448:	4298      	cmp	r0, r3
 800e44a:	bfb8      	it	lt
 800e44c:	4618      	movlt	r0, r3
 800e44e:	e730      	b.n	800e2b2 <_printf_float+0xc6>
 800e450:	2301      	movs	r3, #1
 800e452:	464a      	mov	r2, r9
 800e454:	4631      	mov	r1, r6
 800e456:	4628      	mov	r0, r5
 800e458:	47b8      	blx	r7
 800e45a:	3001      	adds	r0, #1
 800e45c:	f43f af27 	beq.w	800e2ae <_printf_float+0xc2>
 800e460:	f108 0801 	add.w	r8, r8, #1
 800e464:	e7e6      	b.n	800e434 <_printf_float+0x248>
 800e466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e468:	2b00      	cmp	r3, #0
 800e46a:	dc39      	bgt.n	800e4e0 <_printf_float+0x2f4>
 800e46c:	4a1b      	ldr	r2, [pc, #108]	; (800e4dc <_printf_float+0x2f0>)
 800e46e:	2301      	movs	r3, #1
 800e470:	4631      	mov	r1, r6
 800e472:	4628      	mov	r0, r5
 800e474:	47b8      	blx	r7
 800e476:	3001      	adds	r0, #1
 800e478:	f43f af19 	beq.w	800e2ae <_printf_float+0xc2>
 800e47c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e480:	4313      	orrs	r3, r2
 800e482:	d102      	bne.n	800e48a <_printf_float+0x29e>
 800e484:	6823      	ldr	r3, [r4, #0]
 800e486:	07d9      	lsls	r1, r3, #31
 800e488:	d5d8      	bpl.n	800e43c <_printf_float+0x250>
 800e48a:	ee18 3a10 	vmov	r3, s16
 800e48e:	4652      	mov	r2, sl
 800e490:	4631      	mov	r1, r6
 800e492:	4628      	mov	r0, r5
 800e494:	47b8      	blx	r7
 800e496:	3001      	adds	r0, #1
 800e498:	f43f af09 	beq.w	800e2ae <_printf_float+0xc2>
 800e49c:	f04f 0900 	mov.w	r9, #0
 800e4a0:	f104 0a1a 	add.w	sl, r4, #26
 800e4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a6:	425b      	negs	r3, r3
 800e4a8:	454b      	cmp	r3, r9
 800e4aa:	dc01      	bgt.n	800e4b0 <_printf_float+0x2c4>
 800e4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4ae:	e792      	b.n	800e3d6 <_printf_float+0x1ea>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	4652      	mov	r2, sl
 800e4b4:	4631      	mov	r1, r6
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	47b8      	blx	r7
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	f43f aef7 	beq.w	800e2ae <_printf_float+0xc2>
 800e4c0:	f109 0901 	add.w	r9, r9, #1
 800e4c4:	e7ee      	b.n	800e4a4 <_printf_float+0x2b8>
 800e4c6:	bf00      	nop
 800e4c8:	7fefffff 	.word	0x7fefffff
 800e4cc:	080141f4 	.word	0x080141f4
 800e4d0:	080141f8 	.word	0x080141f8
 800e4d4:	08014200 	.word	0x08014200
 800e4d8:	080141fc 	.word	0x080141fc
 800e4dc:	08014204 	.word	0x08014204
 800e4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	bfa8      	it	ge
 800e4e8:	461a      	movge	r2, r3
 800e4ea:	2a00      	cmp	r2, #0
 800e4ec:	4691      	mov	r9, r2
 800e4ee:	dc37      	bgt.n	800e560 <_printf_float+0x374>
 800e4f0:	f04f 0b00 	mov.w	fp, #0
 800e4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4f8:	f104 021a 	add.w	r2, r4, #26
 800e4fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4fe:	9305      	str	r3, [sp, #20]
 800e500:	eba3 0309 	sub.w	r3, r3, r9
 800e504:	455b      	cmp	r3, fp
 800e506:	dc33      	bgt.n	800e570 <_printf_float+0x384>
 800e508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e50c:	429a      	cmp	r2, r3
 800e50e:	db3b      	blt.n	800e588 <_printf_float+0x39c>
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	07da      	lsls	r2, r3, #31
 800e514:	d438      	bmi.n	800e588 <_printf_float+0x39c>
 800e516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e518:	9a05      	ldr	r2, [sp, #20]
 800e51a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e51c:	1a9a      	subs	r2, r3, r2
 800e51e:	eba3 0901 	sub.w	r9, r3, r1
 800e522:	4591      	cmp	r9, r2
 800e524:	bfa8      	it	ge
 800e526:	4691      	movge	r9, r2
 800e528:	f1b9 0f00 	cmp.w	r9, #0
 800e52c:	dc35      	bgt.n	800e59a <_printf_float+0x3ae>
 800e52e:	f04f 0800 	mov.w	r8, #0
 800e532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e536:	f104 0a1a 	add.w	sl, r4, #26
 800e53a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e53e:	1a9b      	subs	r3, r3, r2
 800e540:	eba3 0309 	sub.w	r3, r3, r9
 800e544:	4543      	cmp	r3, r8
 800e546:	f77f af79 	ble.w	800e43c <_printf_float+0x250>
 800e54a:	2301      	movs	r3, #1
 800e54c:	4652      	mov	r2, sl
 800e54e:	4631      	mov	r1, r6
 800e550:	4628      	mov	r0, r5
 800e552:	47b8      	blx	r7
 800e554:	3001      	adds	r0, #1
 800e556:	f43f aeaa 	beq.w	800e2ae <_printf_float+0xc2>
 800e55a:	f108 0801 	add.w	r8, r8, #1
 800e55e:	e7ec      	b.n	800e53a <_printf_float+0x34e>
 800e560:	4613      	mov	r3, r2
 800e562:	4631      	mov	r1, r6
 800e564:	4642      	mov	r2, r8
 800e566:	4628      	mov	r0, r5
 800e568:	47b8      	blx	r7
 800e56a:	3001      	adds	r0, #1
 800e56c:	d1c0      	bne.n	800e4f0 <_printf_float+0x304>
 800e56e:	e69e      	b.n	800e2ae <_printf_float+0xc2>
 800e570:	2301      	movs	r3, #1
 800e572:	4631      	mov	r1, r6
 800e574:	4628      	mov	r0, r5
 800e576:	9205      	str	r2, [sp, #20]
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	f43f ae97 	beq.w	800e2ae <_printf_float+0xc2>
 800e580:	9a05      	ldr	r2, [sp, #20]
 800e582:	f10b 0b01 	add.w	fp, fp, #1
 800e586:	e7b9      	b.n	800e4fc <_printf_float+0x310>
 800e588:	ee18 3a10 	vmov	r3, s16
 800e58c:	4652      	mov	r2, sl
 800e58e:	4631      	mov	r1, r6
 800e590:	4628      	mov	r0, r5
 800e592:	47b8      	blx	r7
 800e594:	3001      	adds	r0, #1
 800e596:	d1be      	bne.n	800e516 <_printf_float+0x32a>
 800e598:	e689      	b.n	800e2ae <_printf_float+0xc2>
 800e59a:	9a05      	ldr	r2, [sp, #20]
 800e59c:	464b      	mov	r3, r9
 800e59e:	4442      	add	r2, r8
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	d1c1      	bne.n	800e52e <_printf_float+0x342>
 800e5aa:	e680      	b.n	800e2ae <_printf_float+0xc2>
 800e5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5ae:	2a01      	cmp	r2, #1
 800e5b0:	dc01      	bgt.n	800e5b6 <_printf_float+0x3ca>
 800e5b2:	07db      	lsls	r3, r3, #31
 800e5b4:	d538      	bpl.n	800e628 <_printf_float+0x43c>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	4642      	mov	r2, r8
 800e5ba:	4631      	mov	r1, r6
 800e5bc:	4628      	mov	r0, r5
 800e5be:	47b8      	blx	r7
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	f43f ae74 	beq.w	800e2ae <_printf_float+0xc2>
 800e5c6:	ee18 3a10 	vmov	r3, s16
 800e5ca:	4652      	mov	r2, sl
 800e5cc:	4631      	mov	r1, r6
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	47b8      	blx	r7
 800e5d2:	3001      	adds	r0, #1
 800e5d4:	f43f ae6b 	beq.w	800e2ae <_printf_float+0xc2>
 800e5d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f7f2 fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 800e5e4:	b9d8      	cbnz	r0, 800e61e <_printf_float+0x432>
 800e5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5e8:	f108 0201 	add.w	r2, r8, #1
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	47b8      	blx	r7
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	d10e      	bne.n	800e616 <_printf_float+0x42a>
 800e5f8:	e659      	b.n	800e2ae <_printf_float+0xc2>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	4652      	mov	r2, sl
 800e5fe:	4631      	mov	r1, r6
 800e600:	4628      	mov	r0, r5
 800e602:	47b8      	blx	r7
 800e604:	3001      	adds	r0, #1
 800e606:	f43f ae52 	beq.w	800e2ae <_printf_float+0xc2>
 800e60a:	f108 0801 	add.w	r8, r8, #1
 800e60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e610:	3b01      	subs	r3, #1
 800e612:	4543      	cmp	r3, r8
 800e614:	dcf1      	bgt.n	800e5fa <_printf_float+0x40e>
 800e616:	464b      	mov	r3, r9
 800e618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e61c:	e6dc      	b.n	800e3d8 <_printf_float+0x1ec>
 800e61e:	f04f 0800 	mov.w	r8, #0
 800e622:	f104 0a1a 	add.w	sl, r4, #26
 800e626:	e7f2      	b.n	800e60e <_printf_float+0x422>
 800e628:	2301      	movs	r3, #1
 800e62a:	4642      	mov	r2, r8
 800e62c:	e7df      	b.n	800e5ee <_printf_float+0x402>
 800e62e:	2301      	movs	r3, #1
 800e630:	464a      	mov	r2, r9
 800e632:	4631      	mov	r1, r6
 800e634:	4628      	mov	r0, r5
 800e636:	47b8      	blx	r7
 800e638:	3001      	adds	r0, #1
 800e63a:	f43f ae38 	beq.w	800e2ae <_printf_float+0xc2>
 800e63e:	f108 0801 	add.w	r8, r8, #1
 800e642:	68e3      	ldr	r3, [r4, #12]
 800e644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e646:	1a5b      	subs	r3, r3, r1
 800e648:	4543      	cmp	r3, r8
 800e64a:	dcf0      	bgt.n	800e62e <_printf_float+0x442>
 800e64c:	e6fa      	b.n	800e444 <_printf_float+0x258>
 800e64e:	f04f 0800 	mov.w	r8, #0
 800e652:	f104 0919 	add.w	r9, r4, #25
 800e656:	e7f4      	b.n	800e642 <_printf_float+0x456>

0800e658 <_printf_common>:
 800e658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e65c:	4616      	mov	r6, r2
 800e65e:	4699      	mov	r9, r3
 800e660:	688a      	ldr	r2, [r1, #8]
 800e662:	690b      	ldr	r3, [r1, #16]
 800e664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e668:	4293      	cmp	r3, r2
 800e66a:	bfb8      	it	lt
 800e66c:	4613      	movlt	r3, r2
 800e66e:	6033      	str	r3, [r6, #0]
 800e670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e674:	4607      	mov	r7, r0
 800e676:	460c      	mov	r4, r1
 800e678:	b10a      	cbz	r2, 800e67e <_printf_common+0x26>
 800e67a:	3301      	adds	r3, #1
 800e67c:	6033      	str	r3, [r6, #0]
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	0699      	lsls	r1, r3, #26
 800e682:	bf42      	ittt	mi
 800e684:	6833      	ldrmi	r3, [r6, #0]
 800e686:	3302      	addmi	r3, #2
 800e688:	6033      	strmi	r3, [r6, #0]
 800e68a:	6825      	ldr	r5, [r4, #0]
 800e68c:	f015 0506 	ands.w	r5, r5, #6
 800e690:	d106      	bne.n	800e6a0 <_printf_common+0x48>
 800e692:	f104 0a19 	add.w	sl, r4, #25
 800e696:	68e3      	ldr	r3, [r4, #12]
 800e698:	6832      	ldr	r2, [r6, #0]
 800e69a:	1a9b      	subs	r3, r3, r2
 800e69c:	42ab      	cmp	r3, r5
 800e69e:	dc26      	bgt.n	800e6ee <_printf_common+0x96>
 800e6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e6a4:	1e13      	subs	r3, r2, #0
 800e6a6:	6822      	ldr	r2, [r4, #0]
 800e6a8:	bf18      	it	ne
 800e6aa:	2301      	movne	r3, #1
 800e6ac:	0692      	lsls	r2, r2, #26
 800e6ae:	d42b      	bmi.n	800e708 <_printf_common+0xb0>
 800e6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6b4:	4649      	mov	r1, r9
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	47c0      	blx	r8
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d01e      	beq.n	800e6fc <_printf_common+0xa4>
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	68e5      	ldr	r5, [r4, #12]
 800e6c2:	6832      	ldr	r2, [r6, #0]
 800e6c4:	f003 0306 	and.w	r3, r3, #6
 800e6c8:	2b04      	cmp	r3, #4
 800e6ca:	bf08      	it	eq
 800e6cc:	1aad      	subeq	r5, r5, r2
 800e6ce:	68a3      	ldr	r3, [r4, #8]
 800e6d0:	6922      	ldr	r2, [r4, #16]
 800e6d2:	bf0c      	ite	eq
 800e6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6d8:	2500      	movne	r5, #0
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	bfc4      	itt	gt
 800e6de:	1a9b      	subgt	r3, r3, r2
 800e6e0:	18ed      	addgt	r5, r5, r3
 800e6e2:	2600      	movs	r6, #0
 800e6e4:	341a      	adds	r4, #26
 800e6e6:	42b5      	cmp	r5, r6
 800e6e8:	d11a      	bne.n	800e720 <_printf_common+0xc8>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e008      	b.n	800e700 <_printf_common+0xa8>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	4652      	mov	r2, sl
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	4638      	mov	r0, r7
 800e6f6:	47c0      	blx	r8
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	d103      	bne.n	800e704 <_printf_common+0xac>
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e704:	3501      	adds	r5, #1
 800e706:	e7c6      	b.n	800e696 <_printf_common+0x3e>
 800e708:	18e1      	adds	r1, r4, r3
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	2030      	movs	r0, #48	; 0x30
 800e70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e712:	4422      	add	r2, r4
 800e714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e71c:	3302      	adds	r3, #2
 800e71e:	e7c7      	b.n	800e6b0 <_printf_common+0x58>
 800e720:	2301      	movs	r3, #1
 800e722:	4622      	mov	r2, r4
 800e724:	4649      	mov	r1, r9
 800e726:	4638      	mov	r0, r7
 800e728:	47c0      	blx	r8
 800e72a:	3001      	adds	r0, #1
 800e72c:	d0e6      	beq.n	800e6fc <_printf_common+0xa4>
 800e72e:	3601      	adds	r6, #1
 800e730:	e7d9      	b.n	800e6e6 <_printf_common+0x8e>
	...

0800e734 <_printf_i>:
 800e734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e738:	7e0f      	ldrb	r7, [r1, #24]
 800e73a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e73c:	2f78      	cmp	r7, #120	; 0x78
 800e73e:	4691      	mov	r9, r2
 800e740:	4680      	mov	r8, r0
 800e742:	460c      	mov	r4, r1
 800e744:	469a      	mov	sl, r3
 800e746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e74a:	d807      	bhi.n	800e75c <_printf_i+0x28>
 800e74c:	2f62      	cmp	r7, #98	; 0x62
 800e74e:	d80a      	bhi.n	800e766 <_printf_i+0x32>
 800e750:	2f00      	cmp	r7, #0
 800e752:	f000 80d8 	beq.w	800e906 <_printf_i+0x1d2>
 800e756:	2f58      	cmp	r7, #88	; 0x58
 800e758:	f000 80a3 	beq.w	800e8a2 <_printf_i+0x16e>
 800e75c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e764:	e03a      	b.n	800e7dc <_printf_i+0xa8>
 800e766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e76a:	2b15      	cmp	r3, #21
 800e76c:	d8f6      	bhi.n	800e75c <_printf_i+0x28>
 800e76e:	a101      	add	r1, pc, #4	; (adr r1, 800e774 <_printf_i+0x40>)
 800e770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e774:	0800e7cd 	.word	0x0800e7cd
 800e778:	0800e7e1 	.word	0x0800e7e1
 800e77c:	0800e75d 	.word	0x0800e75d
 800e780:	0800e75d 	.word	0x0800e75d
 800e784:	0800e75d 	.word	0x0800e75d
 800e788:	0800e75d 	.word	0x0800e75d
 800e78c:	0800e7e1 	.word	0x0800e7e1
 800e790:	0800e75d 	.word	0x0800e75d
 800e794:	0800e75d 	.word	0x0800e75d
 800e798:	0800e75d 	.word	0x0800e75d
 800e79c:	0800e75d 	.word	0x0800e75d
 800e7a0:	0800e8ed 	.word	0x0800e8ed
 800e7a4:	0800e811 	.word	0x0800e811
 800e7a8:	0800e8cf 	.word	0x0800e8cf
 800e7ac:	0800e75d 	.word	0x0800e75d
 800e7b0:	0800e75d 	.word	0x0800e75d
 800e7b4:	0800e90f 	.word	0x0800e90f
 800e7b8:	0800e75d 	.word	0x0800e75d
 800e7bc:	0800e811 	.word	0x0800e811
 800e7c0:	0800e75d 	.word	0x0800e75d
 800e7c4:	0800e75d 	.word	0x0800e75d
 800e7c8:	0800e8d7 	.word	0x0800e8d7
 800e7cc:	682b      	ldr	r3, [r5, #0]
 800e7ce:	1d1a      	adds	r2, r3, #4
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	602a      	str	r2, [r5, #0]
 800e7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e0a3      	b.n	800e928 <_printf_i+0x1f4>
 800e7e0:	6820      	ldr	r0, [r4, #0]
 800e7e2:	6829      	ldr	r1, [r5, #0]
 800e7e4:	0606      	lsls	r6, r0, #24
 800e7e6:	f101 0304 	add.w	r3, r1, #4
 800e7ea:	d50a      	bpl.n	800e802 <_printf_i+0xce>
 800e7ec:	680e      	ldr	r6, [r1, #0]
 800e7ee:	602b      	str	r3, [r5, #0]
 800e7f0:	2e00      	cmp	r6, #0
 800e7f2:	da03      	bge.n	800e7fc <_printf_i+0xc8>
 800e7f4:	232d      	movs	r3, #45	; 0x2d
 800e7f6:	4276      	negs	r6, r6
 800e7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7fc:	485e      	ldr	r0, [pc, #376]	; (800e978 <_printf_i+0x244>)
 800e7fe:	230a      	movs	r3, #10
 800e800:	e019      	b.n	800e836 <_printf_i+0x102>
 800e802:	680e      	ldr	r6, [r1, #0]
 800e804:	602b      	str	r3, [r5, #0]
 800e806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e80a:	bf18      	it	ne
 800e80c:	b236      	sxthne	r6, r6
 800e80e:	e7ef      	b.n	800e7f0 <_printf_i+0xbc>
 800e810:	682b      	ldr	r3, [r5, #0]
 800e812:	6820      	ldr	r0, [r4, #0]
 800e814:	1d19      	adds	r1, r3, #4
 800e816:	6029      	str	r1, [r5, #0]
 800e818:	0601      	lsls	r1, r0, #24
 800e81a:	d501      	bpl.n	800e820 <_printf_i+0xec>
 800e81c:	681e      	ldr	r6, [r3, #0]
 800e81e:	e002      	b.n	800e826 <_printf_i+0xf2>
 800e820:	0646      	lsls	r6, r0, #25
 800e822:	d5fb      	bpl.n	800e81c <_printf_i+0xe8>
 800e824:	881e      	ldrh	r6, [r3, #0]
 800e826:	4854      	ldr	r0, [pc, #336]	; (800e978 <_printf_i+0x244>)
 800e828:	2f6f      	cmp	r7, #111	; 0x6f
 800e82a:	bf0c      	ite	eq
 800e82c:	2308      	moveq	r3, #8
 800e82e:	230a      	movne	r3, #10
 800e830:	2100      	movs	r1, #0
 800e832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e836:	6865      	ldr	r5, [r4, #4]
 800e838:	60a5      	str	r5, [r4, #8]
 800e83a:	2d00      	cmp	r5, #0
 800e83c:	bfa2      	ittt	ge
 800e83e:	6821      	ldrge	r1, [r4, #0]
 800e840:	f021 0104 	bicge.w	r1, r1, #4
 800e844:	6021      	strge	r1, [r4, #0]
 800e846:	b90e      	cbnz	r6, 800e84c <_printf_i+0x118>
 800e848:	2d00      	cmp	r5, #0
 800e84a:	d04d      	beq.n	800e8e8 <_printf_i+0x1b4>
 800e84c:	4615      	mov	r5, r2
 800e84e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e852:	fb03 6711 	mls	r7, r3, r1, r6
 800e856:	5dc7      	ldrb	r7, [r0, r7]
 800e858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e85c:	4637      	mov	r7, r6
 800e85e:	42bb      	cmp	r3, r7
 800e860:	460e      	mov	r6, r1
 800e862:	d9f4      	bls.n	800e84e <_printf_i+0x11a>
 800e864:	2b08      	cmp	r3, #8
 800e866:	d10b      	bne.n	800e880 <_printf_i+0x14c>
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	07de      	lsls	r6, r3, #31
 800e86c:	d508      	bpl.n	800e880 <_printf_i+0x14c>
 800e86e:	6923      	ldr	r3, [r4, #16]
 800e870:	6861      	ldr	r1, [r4, #4]
 800e872:	4299      	cmp	r1, r3
 800e874:	bfde      	ittt	le
 800e876:	2330      	movle	r3, #48	; 0x30
 800e878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e87c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e880:	1b52      	subs	r2, r2, r5
 800e882:	6122      	str	r2, [r4, #16]
 800e884:	f8cd a000 	str.w	sl, [sp]
 800e888:	464b      	mov	r3, r9
 800e88a:	aa03      	add	r2, sp, #12
 800e88c:	4621      	mov	r1, r4
 800e88e:	4640      	mov	r0, r8
 800e890:	f7ff fee2 	bl	800e658 <_printf_common>
 800e894:	3001      	adds	r0, #1
 800e896:	d14c      	bne.n	800e932 <_printf_i+0x1fe>
 800e898:	f04f 30ff 	mov.w	r0, #4294967295
 800e89c:	b004      	add	sp, #16
 800e89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a2:	4835      	ldr	r0, [pc, #212]	; (800e978 <_printf_i+0x244>)
 800e8a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e8a8:	6829      	ldr	r1, [r5, #0]
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800e8b0:	6029      	str	r1, [r5, #0]
 800e8b2:	061d      	lsls	r5, r3, #24
 800e8b4:	d514      	bpl.n	800e8e0 <_printf_i+0x1ac>
 800e8b6:	07df      	lsls	r7, r3, #31
 800e8b8:	bf44      	itt	mi
 800e8ba:	f043 0320 	orrmi.w	r3, r3, #32
 800e8be:	6023      	strmi	r3, [r4, #0]
 800e8c0:	b91e      	cbnz	r6, 800e8ca <_printf_i+0x196>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	f023 0320 	bic.w	r3, r3, #32
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	2310      	movs	r3, #16
 800e8cc:	e7b0      	b.n	800e830 <_printf_i+0xfc>
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	f043 0320 	orr.w	r3, r3, #32
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	2378      	movs	r3, #120	; 0x78
 800e8d8:	4828      	ldr	r0, [pc, #160]	; (800e97c <_printf_i+0x248>)
 800e8da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8de:	e7e3      	b.n	800e8a8 <_printf_i+0x174>
 800e8e0:	0659      	lsls	r1, r3, #25
 800e8e2:	bf48      	it	mi
 800e8e4:	b2b6      	uxthmi	r6, r6
 800e8e6:	e7e6      	b.n	800e8b6 <_printf_i+0x182>
 800e8e8:	4615      	mov	r5, r2
 800e8ea:	e7bb      	b.n	800e864 <_printf_i+0x130>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	6826      	ldr	r6, [r4, #0]
 800e8f0:	6961      	ldr	r1, [r4, #20]
 800e8f2:	1d18      	adds	r0, r3, #4
 800e8f4:	6028      	str	r0, [r5, #0]
 800e8f6:	0635      	lsls	r5, r6, #24
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	d501      	bpl.n	800e900 <_printf_i+0x1cc>
 800e8fc:	6019      	str	r1, [r3, #0]
 800e8fe:	e002      	b.n	800e906 <_printf_i+0x1d2>
 800e900:	0670      	lsls	r0, r6, #25
 800e902:	d5fb      	bpl.n	800e8fc <_printf_i+0x1c8>
 800e904:	8019      	strh	r1, [r3, #0]
 800e906:	2300      	movs	r3, #0
 800e908:	6123      	str	r3, [r4, #16]
 800e90a:	4615      	mov	r5, r2
 800e90c:	e7ba      	b.n	800e884 <_printf_i+0x150>
 800e90e:	682b      	ldr	r3, [r5, #0]
 800e910:	1d1a      	adds	r2, r3, #4
 800e912:	602a      	str	r2, [r5, #0]
 800e914:	681d      	ldr	r5, [r3, #0]
 800e916:	6862      	ldr	r2, [r4, #4]
 800e918:	2100      	movs	r1, #0
 800e91a:	4628      	mov	r0, r5
 800e91c:	f7f1 fc88 	bl	8000230 <memchr>
 800e920:	b108      	cbz	r0, 800e926 <_printf_i+0x1f2>
 800e922:	1b40      	subs	r0, r0, r5
 800e924:	6060      	str	r0, [r4, #4]
 800e926:	6863      	ldr	r3, [r4, #4]
 800e928:	6123      	str	r3, [r4, #16]
 800e92a:	2300      	movs	r3, #0
 800e92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e930:	e7a8      	b.n	800e884 <_printf_i+0x150>
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	462a      	mov	r2, r5
 800e936:	4649      	mov	r1, r9
 800e938:	4640      	mov	r0, r8
 800e93a:	47d0      	blx	sl
 800e93c:	3001      	adds	r0, #1
 800e93e:	d0ab      	beq.n	800e898 <_printf_i+0x164>
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	079b      	lsls	r3, r3, #30
 800e944:	d413      	bmi.n	800e96e <_printf_i+0x23a>
 800e946:	68e0      	ldr	r0, [r4, #12]
 800e948:	9b03      	ldr	r3, [sp, #12]
 800e94a:	4298      	cmp	r0, r3
 800e94c:	bfb8      	it	lt
 800e94e:	4618      	movlt	r0, r3
 800e950:	e7a4      	b.n	800e89c <_printf_i+0x168>
 800e952:	2301      	movs	r3, #1
 800e954:	4632      	mov	r2, r6
 800e956:	4649      	mov	r1, r9
 800e958:	4640      	mov	r0, r8
 800e95a:	47d0      	blx	sl
 800e95c:	3001      	adds	r0, #1
 800e95e:	d09b      	beq.n	800e898 <_printf_i+0x164>
 800e960:	3501      	adds	r5, #1
 800e962:	68e3      	ldr	r3, [r4, #12]
 800e964:	9903      	ldr	r1, [sp, #12]
 800e966:	1a5b      	subs	r3, r3, r1
 800e968:	42ab      	cmp	r3, r5
 800e96a:	dcf2      	bgt.n	800e952 <_printf_i+0x21e>
 800e96c:	e7eb      	b.n	800e946 <_printf_i+0x212>
 800e96e:	2500      	movs	r5, #0
 800e970:	f104 0619 	add.w	r6, r4, #25
 800e974:	e7f5      	b.n	800e962 <_printf_i+0x22e>
 800e976:	bf00      	nop
 800e978:	08014206 	.word	0x08014206
 800e97c:	08014217 	.word	0x08014217

0800e980 <_scanf_float>:
 800e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e984:	b087      	sub	sp, #28
 800e986:	4617      	mov	r7, r2
 800e988:	9303      	str	r3, [sp, #12]
 800e98a:	688b      	ldr	r3, [r1, #8]
 800e98c:	1e5a      	subs	r2, r3, #1
 800e98e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e992:	bf83      	ittte	hi
 800e994:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e998:	195b      	addhi	r3, r3, r5
 800e99a:	9302      	strhi	r3, [sp, #8]
 800e99c:	2300      	movls	r3, #0
 800e99e:	bf86      	itte	hi
 800e9a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e9a4:	608b      	strhi	r3, [r1, #8]
 800e9a6:	9302      	strls	r3, [sp, #8]
 800e9a8:	680b      	ldr	r3, [r1, #0]
 800e9aa:	468b      	mov	fp, r1
 800e9ac:	2500      	movs	r5, #0
 800e9ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e9b2:	f84b 3b1c 	str.w	r3, [fp], #28
 800e9b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e9ba:	4680      	mov	r8, r0
 800e9bc:	460c      	mov	r4, r1
 800e9be:	465e      	mov	r6, fp
 800e9c0:	46aa      	mov	sl, r5
 800e9c2:	46a9      	mov	r9, r5
 800e9c4:	9501      	str	r5, [sp, #4]
 800e9c6:	68a2      	ldr	r2, [r4, #8]
 800e9c8:	b152      	cbz	r2, 800e9e0 <_scanf_float+0x60>
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b4e      	cmp	r3, #78	; 0x4e
 800e9d0:	d864      	bhi.n	800ea9c <_scanf_float+0x11c>
 800e9d2:	2b40      	cmp	r3, #64	; 0x40
 800e9d4:	d83c      	bhi.n	800ea50 <_scanf_float+0xd0>
 800e9d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e9da:	b2c8      	uxtb	r0, r1
 800e9dc:	280e      	cmp	r0, #14
 800e9de:	d93a      	bls.n	800ea56 <_scanf_float+0xd6>
 800e9e0:	f1b9 0f00 	cmp.w	r9, #0
 800e9e4:	d003      	beq.n	800e9ee <_scanf_float+0x6e>
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9ec:	6023      	str	r3, [r4, #0]
 800e9ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9f2:	f1ba 0f01 	cmp.w	sl, #1
 800e9f6:	f200 8113 	bhi.w	800ec20 <_scanf_float+0x2a0>
 800e9fa:	455e      	cmp	r6, fp
 800e9fc:	f200 8105 	bhi.w	800ec0a <_scanf_float+0x28a>
 800ea00:	2501      	movs	r5, #1
 800ea02:	4628      	mov	r0, r5
 800ea04:	b007      	add	sp, #28
 800ea06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ea0e:	2a0d      	cmp	r2, #13
 800ea10:	d8e6      	bhi.n	800e9e0 <_scanf_float+0x60>
 800ea12:	a101      	add	r1, pc, #4	; (adr r1, 800ea18 <_scanf_float+0x98>)
 800ea14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea18:	0800eb57 	.word	0x0800eb57
 800ea1c:	0800e9e1 	.word	0x0800e9e1
 800ea20:	0800e9e1 	.word	0x0800e9e1
 800ea24:	0800e9e1 	.word	0x0800e9e1
 800ea28:	0800ebb7 	.word	0x0800ebb7
 800ea2c:	0800eb8f 	.word	0x0800eb8f
 800ea30:	0800e9e1 	.word	0x0800e9e1
 800ea34:	0800e9e1 	.word	0x0800e9e1
 800ea38:	0800eb65 	.word	0x0800eb65
 800ea3c:	0800e9e1 	.word	0x0800e9e1
 800ea40:	0800e9e1 	.word	0x0800e9e1
 800ea44:	0800e9e1 	.word	0x0800e9e1
 800ea48:	0800e9e1 	.word	0x0800e9e1
 800ea4c:	0800eb1d 	.word	0x0800eb1d
 800ea50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ea54:	e7db      	b.n	800ea0e <_scanf_float+0x8e>
 800ea56:	290e      	cmp	r1, #14
 800ea58:	d8c2      	bhi.n	800e9e0 <_scanf_float+0x60>
 800ea5a:	a001      	add	r0, pc, #4	; (adr r0, 800ea60 <_scanf_float+0xe0>)
 800ea5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ea60:	0800eb0f 	.word	0x0800eb0f
 800ea64:	0800e9e1 	.word	0x0800e9e1
 800ea68:	0800eb0f 	.word	0x0800eb0f
 800ea6c:	0800eba3 	.word	0x0800eba3
 800ea70:	0800e9e1 	.word	0x0800e9e1
 800ea74:	0800eabd 	.word	0x0800eabd
 800ea78:	0800eaf9 	.word	0x0800eaf9
 800ea7c:	0800eaf9 	.word	0x0800eaf9
 800ea80:	0800eaf9 	.word	0x0800eaf9
 800ea84:	0800eaf9 	.word	0x0800eaf9
 800ea88:	0800eaf9 	.word	0x0800eaf9
 800ea8c:	0800eaf9 	.word	0x0800eaf9
 800ea90:	0800eaf9 	.word	0x0800eaf9
 800ea94:	0800eaf9 	.word	0x0800eaf9
 800ea98:	0800eaf9 	.word	0x0800eaf9
 800ea9c:	2b6e      	cmp	r3, #110	; 0x6e
 800ea9e:	d809      	bhi.n	800eab4 <_scanf_float+0x134>
 800eaa0:	2b60      	cmp	r3, #96	; 0x60
 800eaa2:	d8b2      	bhi.n	800ea0a <_scanf_float+0x8a>
 800eaa4:	2b54      	cmp	r3, #84	; 0x54
 800eaa6:	d077      	beq.n	800eb98 <_scanf_float+0x218>
 800eaa8:	2b59      	cmp	r3, #89	; 0x59
 800eaaa:	d199      	bne.n	800e9e0 <_scanf_float+0x60>
 800eaac:	2d07      	cmp	r5, #7
 800eaae:	d197      	bne.n	800e9e0 <_scanf_float+0x60>
 800eab0:	2508      	movs	r5, #8
 800eab2:	e029      	b.n	800eb08 <_scanf_float+0x188>
 800eab4:	2b74      	cmp	r3, #116	; 0x74
 800eab6:	d06f      	beq.n	800eb98 <_scanf_float+0x218>
 800eab8:	2b79      	cmp	r3, #121	; 0x79
 800eaba:	e7f6      	b.n	800eaaa <_scanf_float+0x12a>
 800eabc:	6821      	ldr	r1, [r4, #0]
 800eabe:	05c8      	lsls	r0, r1, #23
 800eac0:	d51a      	bpl.n	800eaf8 <_scanf_float+0x178>
 800eac2:	9b02      	ldr	r3, [sp, #8]
 800eac4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800eac8:	6021      	str	r1, [r4, #0]
 800eaca:	f109 0901 	add.w	r9, r9, #1
 800eace:	b11b      	cbz	r3, 800ead8 <_scanf_float+0x158>
 800ead0:	3b01      	subs	r3, #1
 800ead2:	3201      	adds	r2, #1
 800ead4:	9302      	str	r3, [sp, #8]
 800ead6:	60a2      	str	r2, [r4, #8]
 800ead8:	68a3      	ldr	r3, [r4, #8]
 800eada:	3b01      	subs	r3, #1
 800eadc:	60a3      	str	r3, [r4, #8]
 800eade:	6923      	ldr	r3, [r4, #16]
 800eae0:	3301      	adds	r3, #1
 800eae2:	6123      	str	r3, [r4, #16]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	607b      	str	r3, [r7, #4]
 800eaec:	f340 8084 	ble.w	800ebf8 <_scanf_float+0x278>
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	603b      	str	r3, [r7, #0]
 800eaf6:	e766      	b.n	800e9c6 <_scanf_float+0x46>
 800eaf8:	eb1a 0f05 	cmn.w	sl, r5
 800eafc:	f47f af70 	bne.w	800e9e0 <_scanf_float+0x60>
 800eb00:	6822      	ldr	r2, [r4, #0]
 800eb02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eb06:	6022      	str	r2, [r4, #0]
 800eb08:	f806 3b01 	strb.w	r3, [r6], #1
 800eb0c:	e7e4      	b.n	800ead8 <_scanf_float+0x158>
 800eb0e:	6822      	ldr	r2, [r4, #0]
 800eb10:	0610      	lsls	r0, r2, #24
 800eb12:	f57f af65 	bpl.w	800e9e0 <_scanf_float+0x60>
 800eb16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb1a:	e7f4      	b.n	800eb06 <_scanf_float+0x186>
 800eb1c:	f1ba 0f00 	cmp.w	sl, #0
 800eb20:	d10e      	bne.n	800eb40 <_scanf_float+0x1c0>
 800eb22:	f1b9 0f00 	cmp.w	r9, #0
 800eb26:	d10e      	bne.n	800eb46 <_scanf_float+0x1c6>
 800eb28:	6822      	ldr	r2, [r4, #0]
 800eb2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb32:	d108      	bne.n	800eb46 <_scanf_float+0x1c6>
 800eb34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb38:	6022      	str	r2, [r4, #0]
 800eb3a:	f04f 0a01 	mov.w	sl, #1
 800eb3e:	e7e3      	b.n	800eb08 <_scanf_float+0x188>
 800eb40:	f1ba 0f02 	cmp.w	sl, #2
 800eb44:	d055      	beq.n	800ebf2 <_scanf_float+0x272>
 800eb46:	2d01      	cmp	r5, #1
 800eb48:	d002      	beq.n	800eb50 <_scanf_float+0x1d0>
 800eb4a:	2d04      	cmp	r5, #4
 800eb4c:	f47f af48 	bne.w	800e9e0 <_scanf_float+0x60>
 800eb50:	3501      	adds	r5, #1
 800eb52:	b2ed      	uxtb	r5, r5
 800eb54:	e7d8      	b.n	800eb08 <_scanf_float+0x188>
 800eb56:	f1ba 0f01 	cmp.w	sl, #1
 800eb5a:	f47f af41 	bne.w	800e9e0 <_scanf_float+0x60>
 800eb5e:	f04f 0a02 	mov.w	sl, #2
 800eb62:	e7d1      	b.n	800eb08 <_scanf_float+0x188>
 800eb64:	b97d      	cbnz	r5, 800eb86 <_scanf_float+0x206>
 800eb66:	f1b9 0f00 	cmp.w	r9, #0
 800eb6a:	f47f af3c 	bne.w	800e9e6 <_scanf_float+0x66>
 800eb6e:	6822      	ldr	r2, [r4, #0]
 800eb70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb78:	f47f af39 	bne.w	800e9ee <_scanf_float+0x6e>
 800eb7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb80:	6022      	str	r2, [r4, #0]
 800eb82:	2501      	movs	r5, #1
 800eb84:	e7c0      	b.n	800eb08 <_scanf_float+0x188>
 800eb86:	2d03      	cmp	r5, #3
 800eb88:	d0e2      	beq.n	800eb50 <_scanf_float+0x1d0>
 800eb8a:	2d05      	cmp	r5, #5
 800eb8c:	e7de      	b.n	800eb4c <_scanf_float+0x1cc>
 800eb8e:	2d02      	cmp	r5, #2
 800eb90:	f47f af26 	bne.w	800e9e0 <_scanf_float+0x60>
 800eb94:	2503      	movs	r5, #3
 800eb96:	e7b7      	b.n	800eb08 <_scanf_float+0x188>
 800eb98:	2d06      	cmp	r5, #6
 800eb9a:	f47f af21 	bne.w	800e9e0 <_scanf_float+0x60>
 800eb9e:	2507      	movs	r5, #7
 800eba0:	e7b2      	b.n	800eb08 <_scanf_float+0x188>
 800eba2:	6822      	ldr	r2, [r4, #0]
 800eba4:	0591      	lsls	r1, r2, #22
 800eba6:	f57f af1b 	bpl.w	800e9e0 <_scanf_float+0x60>
 800ebaa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ebae:	6022      	str	r2, [r4, #0]
 800ebb0:	f8cd 9004 	str.w	r9, [sp, #4]
 800ebb4:	e7a8      	b.n	800eb08 <_scanf_float+0x188>
 800ebb6:	6822      	ldr	r2, [r4, #0]
 800ebb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ebbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ebc0:	d006      	beq.n	800ebd0 <_scanf_float+0x250>
 800ebc2:	0550      	lsls	r0, r2, #21
 800ebc4:	f57f af0c 	bpl.w	800e9e0 <_scanf_float+0x60>
 800ebc8:	f1b9 0f00 	cmp.w	r9, #0
 800ebcc:	f43f af0f 	beq.w	800e9ee <_scanf_float+0x6e>
 800ebd0:	0591      	lsls	r1, r2, #22
 800ebd2:	bf58      	it	pl
 800ebd4:	9901      	ldrpl	r1, [sp, #4]
 800ebd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ebda:	bf58      	it	pl
 800ebdc:	eba9 0101 	subpl.w	r1, r9, r1
 800ebe0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ebe4:	bf58      	it	pl
 800ebe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ebea:	6022      	str	r2, [r4, #0]
 800ebec:	f04f 0900 	mov.w	r9, #0
 800ebf0:	e78a      	b.n	800eb08 <_scanf_float+0x188>
 800ebf2:	f04f 0a03 	mov.w	sl, #3
 800ebf6:	e787      	b.n	800eb08 <_scanf_float+0x188>
 800ebf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	4640      	mov	r0, r8
 800ec00:	4798      	blx	r3
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f43f aedf 	beq.w	800e9c6 <_scanf_float+0x46>
 800ec08:	e6ea      	b.n	800e9e0 <_scanf_float+0x60>
 800ec0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec12:	463a      	mov	r2, r7
 800ec14:	4640      	mov	r0, r8
 800ec16:	4798      	blx	r3
 800ec18:	6923      	ldr	r3, [r4, #16]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	e6ec      	b.n	800e9fa <_scanf_float+0x7a>
 800ec20:	1e6b      	subs	r3, r5, #1
 800ec22:	2b06      	cmp	r3, #6
 800ec24:	d825      	bhi.n	800ec72 <_scanf_float+0x2f2>
 800ec26:	2d02      	cmp	r5, #2
 800ec28:	d836      	bhi.n	800ec98 <_scanf_float+0x318>
 800ec2a:	455e      	cmp	r6, fp
 800ec2c:	f67f aee8 	bls.w	800ea00 <_scanf_float+0x80>
 800ec30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec38:	463a      	mov	r2, r7
 800ec3a:	4640      	mov	r0, r8
 800ec3c:	4798      	blx	r3
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	3b01      	subs	r3, #1
 800ec42:	6123      	str	r3, [r4, #16]
 800ec44:	e7f1      	b.n	800ec2a <_scanf_float+0x2aa>
 800ec46:	9802      	ldr	r0, [sp, #8]
 800ec48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ec50:	9002      	str	r0, [sp, #8]
 800ec52:	463a      	mov	r2, r7
 800ec54:	4640      	mov	r0, r8
 800ec56:	4798      	blx	r3
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	6123      	str	r3, [r4, #16]
 800ec5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec62:	fa5f fa8a 	uxtb.w	sl, sl
 800ec66:	f1ba 0f02 	cmp.w	sl, #2
 800ec6a:	d1ec      	bne.n	800ec46 <_scanf_float+0x2c6>
 800ec6c:	3d03      	subs	r5, #3
 800ec6e:	b2ed      	uxtb	r5, r5
 800ec70:	1b76      	subs	r6, r6, r5
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	05da      	lsls	r2, r3, #23
 800ec76:	d52f      	bpl.n	800ecd8 <_scanf_float+0x358>
 800ec78:	055b      	lsls	r3, r3, #21
 800ec7a:	d510      	bpl.n	800ec9e <_scanf_float+0x31e>
 800ec7c:	455e      	cmp	r6, fp
 800ec7e:	f67f aebf 	bls.w	800ea00 <_scanf_float+0x80>
 800ec82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec8a:	463a      	mov	r2, r7
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	4798      	blx	r3
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	6123      	str	r3, [r4, #16]
 800ec96:	e7f1      	b.n	800ec7c <_scanf_float+0x2fc>
 800ec98:	46aa      	mov	sl, r5
 800ec9a:	9602      	str	r6, [sp, #8]
 800ec9c:	e7df      	b.n	800ec5e <_scanf_float+0x2de>
 800ec9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eca2:	6923      	ldr	r3, [r4, #16]
 800eca4:	2965      	cmp	r1, #101	; 0x65
 800eca6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ecaa:	f106 35ff 	add.w	r5, r6, #4294967295
 800ecae:	6123      	str	r3, [r4, #16]
 800ecb0:	d00c      	beq.n	800eccc <_scanf_float+0x34c>
 800ecb2:	2945      	cmp	r1, #69	; 0x45
 800ecb4:	d00a      	beq.n	800eccc <_scanf_float+0x34c>
 800ecb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecba:	463a      	mov	r2, r7
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	4798      	blx	r3
 800ecc0:	6923      	ldr	r3, [r4, #16]
 800ecc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	1eb5      	subs	r5, r6, #2
 800ecca:	6123      	str	r3, [r4, #16]
 800eccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	4798      	blx	r3
 800ecd6:	462e      	mov	r6, r5
 800ecd8:	6825      	ldr	r5, [r4, #0]
 800ecda:	f015 0510 	ands.w	r5, r5, #16
 800ecde:	d159      	bne.n	800ed94 <_scanf_float+0x414>
 800ece0:	7035      	strb	r5, [r6, #0]
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ece8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecec:	d11b      	bne.n	800ed26 <_scanf_float+0x3a6>
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	454b      	cmp	r3, r9
 800ecf2:	eba3 0209 	sub.w	r2, r3, r9
 800ecf6:	d123      	bne.n	800ed40 <_scanf_float+0x3c0>
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	4659      	mov	r1, fp
 800ecfc:	4640      	mov	r0, r8
 800ecfe:	f000 ff25 	bl	800fb4c <_strtod_r>
 800ed02:	6822      	ldr	r2, [r4, #0]
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	f012 0f02 	tst.w	r2, #2
 800ed0a:	ec57 6b10 	vmov	r6, r7, d0
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	d021      	beq.n	800ed56 <_scanf_float+0x3d6>
 800ed12:	9903      	ldr	r1, [sp, #12]
 800ed14:	1d1a      	adds	r2, r3, #4
 800ed16:	600a      	str	r2, [r1, #0]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	e9c3 6700 	strd	r6, r7, [r3]
 800ed1e:	68e3      	ldr	r3, [r4, #12]
 800ed20:	3301      	adds	r3, #1
 800ed22:	60e3      	str	r3, [r4, #12]
 800ed24:	e66d      	b.n	800ea02 <_scanf_float+0x82>
 800ed26:	9b04      	ldr	r3, [sp, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d0e5      	beq.n	800ecf8 <_scanf_float+0x378>
 800ed2c:	9905      	ldr	r1, [sp, #20]
 800ed2e:	230a      	movs	r3, #10
 800ed30:	462a      	mov	r2, r5
 800ed32:	3101      	adds	r1, #1
 800ed34:	4640      	mov	r0, r8
 800ed36:	f000 ff9d 	bl	800fc74 <_strtol_r>
 800ed3a:	9b04      	ldr	r3, [sp, #16]
 800ed3c:	9e05      	ldr	r6, [sp, #20]
 800ed3e:	1ac2      	subs	r2, r0, r3
 800ed40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ed44:	429e      	cmp	r6, r3
 800ed46:	bf28      	it	cs
 800ed48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ed4c:	4912      	ldr	r1, [pc, #72]	; (800ed98 <_scanf_float+0x418>)
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f000 f8ba 	bl	800eec8 <siprintf>
 800ed54:	e7d0      	b.n	800ecf8 <_scanf_float+0x378>
 800ed56:	9903      	ldr	r1, [sp, #12]
 800ed58:	f012 0f04 	tst.w	r2, #4
 800ed5c:	f103 0204 	add.w	r2, r3, #4
 800ed60:	600a      	str	r2, [r1, #0]
 800ed62:	d1d9      	bne.n	800ed18 <_scanf_float+0x398>
 800ed64:	f8d3 8000 	ldr.w	r8, [r3]
 800ed68:	ee10 2a10 	vmov	r2, s0
 800ed6c:	ee10 0a10 	vmov	r0, s0
 800ed70:	463b      	mov	r3, r7
 800ed72:	4639      	mov	r1, r7
 800ed74:	f7f1 ff02 	bl	8000b7c <__aeabi_dcmpun>
 800ed78:	b128      	cbz	r0, 800ed86 <_scanf_float+0x406>
 800ed7a:	4808      	ldr	r0, [pc, #32]	; (800ed9c <_scanf_float+0x41c>)
 800ed7c:	f000 f89e 	bl	800eebc <nanf>
 800ed80:	ed88 0a00 	vstr	s0, [r8]
 800ed84:	e7cb      	b.n	800ed1e <_scanf_float+0x39e>
 800ed86:	4630      	mov	r0, r6
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 ff55 	bl	8000c38 <__aeabi_d2f>
 800ed8e:	f8c8 0000 	str.w	r0, [r8]
 800ed92:	e7c4      	b.n	800ed1e <_scanf_float+0x39e>
 800ed94:	2500      	movs	r5, #0
 800ed96:	e634      	b.n	800ea02 <_scanf_float+0x82>
 800ed98:	08014228 	.word	0x08014228
 800ed9c:	08014698 	.word	0x08014698

0800eda0 <iprintf>:
 800eda0:	b40f      	push	{r0, r1, r2, r3}
 800eda2:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <iprintf+0x2c>)
 800eda4:	b513      	push	{r0, r1, r4, lr}
 800eda6:	681c      	ldr	r4, [r3, #0]
 800eda8:	b124      	cbz	r4, 800edb4 <iprintf+0x14>
 800edaa:	69a3      	ldr	r3, [r4, #24]
 800edac:	b913      	cbnz	r3, 800edb4 <iprintf+0x14>
 800edae:	4620      	mov	r0, r4
 800edb0:	f001 ffc2 	bl	8010d38 <__sinit>
 800edb4:	ab05      	add	r3, sp, #20
 800edb6:	9a04      	ldr	r2, [sp, #16]
 800edb8:	68a1      	ldr	r1, [r4, #8]
 800edba:	9301      	str	r3, [sp, #4]
 800edbc:	4620      	mov	r0, r4
 800edbe:	f003 fb8b 	bl	80124d8 <_vfiprintf_r>
 800edc2:	b002      	add	sp, #8
 800edc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc8:	b004      	add	sp, #16
 800edca:	4770      	bx	lr
 800edcc:	2000004c 	.word	0x2000004c

0800edd0 <_puts_r>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	460e      	mov	r6, r1
 800edd4:	4605      	mov	r5, r0
 800edd6:	b118      	cbz	r0, 800ede0 <_puts_r+0x10>
 800edd8:	6983      	ldr	r3, [r0, #24]
 800edda:	b90b      	cbnz	r3, 800ede0 <_puts_r+0x10>
 800eddc:	f001 ffac 	bl	8010d38 <__sinit>
 800ede0:	69ab      	ldr	r3, [r5, #24]
 800ede2:	68ac      	ldr	r4, [r5, #8]
 800ede4:	b913      	cbnz	r3, 800edec <_puts_r+0x1c>
 800ede6:	4628      	mov	r0, r5
 800ede8:	f001 ffa6 	bl	8010d38 <__sinit>
 800edec:	4b2c      	ldr	r3, [pc, #176]	; (800eea0 <_puts_r+0xd0>)
 800edee:	429c      	cmp	r4, r3
 800edf0:	d120      	bne.n	800ee34 <_puts_r+0x64>
 800edf2:	686c      	ldr	r4, [r5, #4]
 800edf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edf6:	07db      	lsls	r3, r3, #31
 800edf8:	d405      	bmi.n	800ee06 <_puts_r+0x36>
 800edfa:	89a3      	ldrh	r3, [r4, #12]
 800edfc:	0598      	lsls	r0, r3, #22
 800edfe:	d402      	bmi.n	800ee06 <_puts_r+0x36>
 800ee00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee02:	f002 fbaa 	bl	801155a <__retarget_lock_acquire_recursive>
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	0719      	lsls	r1, r3, #28
 800ee0a:	d51d      	bpl.n	800ee48 <_puts_r+0x78>
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	b1db      	cbz	r3, 800ee48 <_puts_r+0x78>
 800ee10:	3e01      	subs	r6, #1
 800ee12:	68a3      	ldr	r3, [r4, #8]
 800ee14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	60a3      	str	r3, [r4, #8]
 800ee1c:	bb39      	cbnz	r1, 800ee6e <_puts_r+0x9e>
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	da38      	bge.n	800ee94 <_puts_r+0xc4>
 800ee22:	4622      	mov	r2, r4
 800ee24:	210a      	movs	r1, #10
 800ee26:	4628      	mov	r0, r5
 800ee28:	f000 ff30 	bl	800fc8c <__swbuf_r>
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d011      	beq.n	800ee54 <_puts_r+0x84>
 800ee30:	250a      	movs	r5, #10
 800ee32:	e011      	b.n	800ee58 <_puts_r+0x88>
 800ee34:	4b1b      	ldr	r3, [pc, #108]	; (800eea4 <_puts_r+0xd4>)
 800ee36:	429c      	cmp	r4, r3
 800ee38:	d101      	bne.n	800ee3e <_puts_r+0x6e>
 800ee3a:	68ac      	ldr	r4, [r5, #8]
 800ee3c:	e7da      	b.n	800edf4 <_puts_r+0x24>
 800ee3e:	4b1a      	ldr	r3, [pc, #104]	; (800eea8 <_puts_r+0xd8>)
 800ee40:	429c      	cmp	r4, r3
 800ee42:	bf08      	it	eq
 800ee44:	68ec      	ldreq	r4, [r5, #12]
 800ee46:	e7d5      	b.n	800edf4 <_puts_r+0x24>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 ff70 	bl	800fd30 <__swsetup_r>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d0dd      	beq.n	800ee10 <_puts_r+0x40>
 800ee54:	f04f 35ff 	mov.w	r5, #4294967295
 800ee58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee5a:	07da      	lsls	r2, r3, #31
 800ee5c:	d405      	bmi.n	800ee6a <_puts_r+0x9a>
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	059b      	lsls	r3, r3, #22
 800ee62:	d402      	bmi.n	800ee6a <_puts_r+0x9a>
 800ee64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee66:	f002 fb79 	bl	801155c <__retarget_lock_release_recursive>
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	bd70      	pop	{r4, r5, r6, pc}
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	da04      	bge.n	800ee7c <_puts_r+0xac>
 800ee72:	69a2      	ldr	r2, [r4, #24]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	dc06      	bgt.n	800ee86 <_puts_r+0xb6>
 800ee78:	290a      	cmp	r1, #10
 800ee7a:	d004      	beq.n	800ee86 <_puts_r+0xb6>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	1c5a      	adds	r2, r3, #1
 800ee80:	6022      	str	r2, [r4, #0]
 800ee82:	7019      	strb	r1, [r3, #0]
 800ee84:	e7c5      	b.n	800ee12 <_puts_r+0x42>
 800ee86:	4622      	mov	r2, r4
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f000 feff 	bl	800fc8c <__swbuf_r>
 800ee8e:	3001      	adds	r0, #1
 800ee90:	d1bf      	bne.n	800ee12 <_puts_r+0x42>
 800ee92:	e7df      	b.n	800ee54 <_puts_r+0x84>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	250a      	movs	r5, #10
 800ee98:	1c5a      	adds	r2, r3, #1
 800ee9a:	6022      	str	r2, [r4, #0]
 800ee9c:	701d      	strb	r5, [r3, #0]
 800ee9e:	e7db      	b.n	800ee58 <_puts_r+0x88>
 800eea0:	08014434 	.word	0x08014434
 800eea4:	08014454 	.word	0x08014454
 800eea8:	08014414 	.word	0x08014414

0800eeac <puts>:
 800eeac:	4b02      	ldr	r3, [pc, #8]	; (800eeb8 <puts+0xc>)
 800eeae:	4601      	mov	r1, r0
 800eeb0:	6818      	ldr	r0, [r3, #0]
 800eeb2:	f7ff bf8d 	b.w	800edd0 <_puts_r>
 800eeb6:	bf00      	nop
 800eeb8:	2000004c 	.word	0x2000004c

0800eebc <nanf>:
 800eebc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eec4 <nanf+0x8>
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	7fc00000 	.word	0x7fc00000

0800eec8 <siprintf>:
 800eec8:	b40e      	push	{r1, r2, r3}
 800eeca:	b500      	push	{lr}
 800eecc:	b09c      	sub	sp, #112	; 0x70
 800eece:	ab1d      	add	r3, sp, #116	; 0x74
 800eed0:	9002      	str	r0, [sp, #8]
 800eed2:	9006      	str	r0, [sp, #24]
 800eed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eed8:	4809      	ldr	r0, [pc, #36]	; (800ef00 <siprintf+0x38>)
 800eeda:	9107      	str	r1, [sp, #28]
 800eedc:	9104      	str	r1, [sp, #16]
 800eede:	4909      	ldr	r1, [pc, #36]	; (800ef04 <siprintf+0x3c>)
 800eee0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eee4:	9105      	str	r1, [sp, #20]
 800eee6:	6800      	ldr	r0, [r0, #0]
 800eee8:	9301      	str	r3, [sp, #4]
 800eeea:	a902      	add	r1, sp, #8
 800eeec:	f003 f9ca 	bl	8012284 <_svfiprintf_r>
 800eef0:	9b02      	ldr	r3, [sp, #8]
 800eef2:	2200      	movs	r2, #0
 800eef4:	701a      	strb	r2, [r3, #0]
 800eef6:	b01c      	add	sp, #112	; 0x70
 800eef8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eefc:	b003      	add	sp, #12
 800eefe:	4770      	bx	lr
 800ef00:	2000004c 	.word	0x2000004c
 800ef04:	ffff0208 	.word	0xffff0208

0800ef08 <sulp>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	460d      	mov	r5, r1
 800ef0e:	ec45 4b10 	vmov	d0, r4, r5
 800ef12:	4616      	mov	r6, r2
 800ef14:	f002 ff14 	bl	8011d40 <__ulp>
 800ef18:	ec51 0b10 	vmov	r0, r1, d0
 800ef1c:	b17e      	cbz	r6, 800ef3e <sulp+0x36>
 800ef1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	dd09      	ble.n	800ef3e <sulp+0x36>
 800ef2a:	051b      	lsls	r3, r3, #20
 800ef2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ef30:	2400      	movs	r4, #0
 800ef32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ef36:	4622      	mov	r2, r4
 800ef38:	462b      	mov	r3, r5
 800ef3a:	f7f1 fb85 	bl	8000648 <__aeabi_dmul>
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}

0800ef40 <_strtod_l>:
 800ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef44:	ed2d 8b02 	vpush	{d8}
 800ef48:	b09d      	sub	sp, #116	; 0x74
 800ef4a:	461f      	mov	r7, r3
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	9318      	str	r3, [sp, #96]	; 0x60
 800ef50:	4ba2      	ldr	r3, [pc, #648]	; (800f1dc <_strtod_l+0x29c>)
 800ef52:	9213      	str	r2, [sp, #76]	; 0x4c
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	9305      	str	r3, [sp, #20]
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	4688      	mov	r8, r1
 800ef5e:	f7f1 f95f 	bl	8000220 <strlen>
 800ef62:	f04f 0a00 	mov.w	sl, #0
 800ef66:	4605      	mov	r5, r0
 800ef68:	f04f 0b00 	mov.w	fp, #0
 800ef6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ef70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef72:	781a      	ldrb	r2, [r3, #0]
 800ef74:	2a2b      	cmp	r2, #43	; 0x2b
 800ef76:	d04e      	beq.n	800f016 <_strtod_l+0xd6>
 800ef78:	d83b      	bhi.n	800eff2 <_strtod_l+0xb2>
 800ef7a:	2a0d      	cmp	r2, #13
 800ef7c:	d834      	bhi.n	800efe8 <_strtod_l+0xa8>
 800ef7e:	2a08      	cmp	r2, #8
 800ef80:	d834      	bhi.n	800efec <_strtod_l+0xac>
 800ef82:	2a00      	cmp	r2, #0
 800ef84:	d03e      	beq.n	800f004 <_strtod_l+0xc4>
 800ef86:	2300      	movs	r3, #0
 800ef88:	930a      	str	r3, [sp, #40]	; 0x28
 800ef8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ef8c:	7833      	ldrb	r3, [r6, #0]
 800ef8e:	2b30      	cmp	r3, #48	; 0x30
 800ef90:	f040 80b0 	bne.w	800f0f4 <_strtod_l+0x1b4>
 800ef94:	7873      	ldrb	r3, [r6, #1]
 800ef96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef9a:	2b58      	cmp	r3, #88	; 0x58
 800ef9c:	d168      	bne.n	800f070 <_strtod_l+0x130>
 800ef9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	ab18      	add	r3, sp, #96	; 0x60
 800efa4:	9702      	str	r7, [sp, #8]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	4a8d      	ldr	r2, [pc, #564]	; (800f1e0 <_strtod_l+0x2a0>)
 800efaa:	ab19      	add	r3, sp, #100	; 0x64
 800efac:	a917      	add	r1, sp, #92	; 0x5c
 800efae:	4620      	mov	r0, r4
 800efb0:	f001 ffc6 	bl	8010f40 <__gethex>
 800efb4:	f010 0707 	ands.w	r7, r0, #7
 800efb8:	4605      	mov	r5, r0
 800efba:	d005      	beq.n	800efc8 <_strtod_l+0x88>
 800efbc:	2f06      	cmp	r7, #6
 800efbe:	d12c      	bne.n	800f01a <_strtod_l+0xda>
 800efc0:	3601      	adds	r6, #1
 800efc2:	2300      	movs	r3, #0
 800efc4:	9617      	str	r6, [sp, #92]	; 0x5c
 800efc6:	930a      	str	r3, [sp, #40]	; 0x28
 800efc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f040 8590 	bne.w	800faf0 <_strtod_l+0xbb0>
 800efd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efd2:	b1eb      	cbz	r3, 800f010 <_strtod_l+0xd0>
 800efd4:	4652      	mov	r2, sl
 800efd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800efda:	ec43 2b10 	vmov	d0, r2, r3
 800efde:	b01d      	add	sp, #116	; 0x74
 800efe0:	ecbd 8b02 	vpop	{d8}
 800efe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe8:	2a20      	cmp	r2, #32
 800efea:	d1cc      	bne.n	800ef86 <_strtod_l+0x46>
 800efec:	3301      	adds	r3, #1
 800efee:	9317      	str	r3, [sp, #92]	; 0x5c
 800eff0:	e7be      	b.n	800ef70 <_strtod_l+0x30>
 800eff2:	2a2d      	cmp	r2, #45	; 0x2d
 800eff4:	d1c7      	bne.n	800ef86 <_strtod_l+0x46>
 800eff6:	2201      	movs	r2, #1
 800eff8:	920a      	str	r2, [sp, #40]	; 0x28
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	9217      	str	r2, [sp, #92]	; 0x5c
 800effe:	785b      	ldrb	r3, [r3, #1]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1c2      	bne.n	800ef8a <_strtod_l+0x4a>
 800f004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f006:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f040 856e 	bne.w	800faec <_strtod_l+0xbac>
 800f010:	4652      	mov	r2, sl
 800f012:	465b      	mov	r3, fp
 800f014:	e7e1      	b.n	800efda <_strtod_l+0x9a>
 800f016:	2200      	movs	r2, #0
 800f018:	e7ee      	b.n	800eff8 <_strtod_l+0xb8>
 800f01a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f01c:	b13a      	cbz	r2, 800f02e <_strtod_l+0xee>
 800f01e:	2135      	movs	r1, #53	; 0x35
 800f020:	a81a      	add	r0, sp, #104	; 0x68
 800f022:	f002 ff98 	bl	8011f56 <__copybits>
 800f026:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f028:	4620      	mov	r0, r4
 800f02a:	f002 fb57 	bl	80116dc <_Bfree>
 800f02e:	3f01      	subs	r7, #1
 800f030:	2f04      	cmp	r7, #4
 800f032:	d806      	bhi.n	800f042 <_strtod_l+0x102>
 800f034:	e8df f007 	tbb	[pc, r7]
 800f038:	1714030a 	.word	0x1714030a
 800f03c:	0a          	.byte	0x0a
 800f03d:	00          	.byte	0x00
 800f03e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f042:	0728      	lsls	r0, r5, #28
 800f044:	d5c0      	bpl.n	800efc8 <_strtod_l+0x88>
 800f046:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f04a:	e7bd      	b.n	800efc8 <_strtod_l+0x88>
 800f04c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f050:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f05a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f05e:	e7f0      	b.n	800f042 <_strtod_l+0x102>
 800f060:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f1e4 <_strtod_l+0x2a4>
 800f064:	e7ed      	b.n	800f042 <_strtod_l+0x102>
 800f066:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f06a:	f04f 3aff 	mov.w	sl, #4294967295
 800f06e:	e7e8      	b.n	800f042 <_strtod_l+0x102>
 800f070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	9217      	str	r2, [sp, #92]	; 0x5c
 800f076:	785b      	ldrb	r3, [r3, #1]
 800f078:	2b30      	cmp	r3, #48	; 0x30
 800f07a:	d0f9      	beq.n	800f070 <_strtod_l+0x130>
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d0a3      	beq.n	800efc8 <_strtod_l+0x88>
 800f080:	2301      	movs	r3, #1
 800f082:	f04f 0900 	mov.w	r9, #0
 800f086:	9304      	str	r3, [sp, #16]
 800f088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f08a:	9308      	str	r3, [sp, #32]
 800f08c:	f8cd 901c 	str.w	r9, [sp, #28]
 800f090:	464f      	mov	r7, r9
 800f092:	220a      	movs	r2, #10
 800f094:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f096:	7806      	ldrb	r6, [r0, #0]
 800f098:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f09c:	b2d9      	uxtb	r1, r3
 800f09e:	2909      	cmp	r1, #9
 800f0a0:	d92a      	bls.n	800f0f8 <_strtod_l+0x1b8>
 800f0a2:	9905      	ldr	r1, [sp, #20]
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	f003 fba2 	bl	80127ee <strncmp>
 800f0aa:	b398      	cbz	r0, 800f114 <_strtod_l+0x1d4>
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	4632      	mov	r2, r6
 800f0b0:	463d      	mov	r5, r7
 800f0b2:	9005      	str	r0, [sp, #20]
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2a65      	cmp	r2, #101	; 0x65
 800f0b8:	d001      	beq.n	800f0be <_strtod_l+0x17e>
 800f0ba:	2a45      	cmp	r2, #69	; 0x45
 800f0bc:	d118      	bne.n	800f0f0 <_strtod_l+0x1b0>
 800f0be:	b91d      	cbnz	r5, 800f0c8 <_strtod_l+0x188>
 800f0c0:	9a04      	ldr	r2, [sp, #16]
 800f0c2:	4302      	orrs	r2, r0
 800f0c4:	d09e      	beq.n	800f004 <_strtod_l+0xc4>
 800f0c6:	2500      	movs	r5, #0
 800f0c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f0cc:	f108 0201 	add.w	r2, r8, #1
 800f0d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f0d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f0d6:	2a2b      	cmp	r2, #43	; 0x2b
 800f0d8:	d075      	beq.n	800f1c6 <_strtod_l+0x286>
 800f0da:	2a2d      	cmp	r2, #45	; 0x2d
 800f0dc:	d07b      	beq.n	800f1d6 <_strtod_l+0x296>
 800f0de:	f04f 0c00 	mov.w	ip, #0
 800f0e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f0e6:	2909      	cmp	r1, #9
 800f0e8:	f240 8082 	bls.w	800f1f0 <_strtod_l+0x2b0>
 800f0ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f0f0:	2600      	movs	r6, #0
 800f0f2:	e09d      	b.n	800f230 <_strtod_l+0x2f0>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	e7c4      	b.n	800f082 <_strtod_l+0x142>
 800f0f8:	2f08      	cmp	r7, #8
 800f0fa:	bfd8      	it	le
 800f0fc:	9907      	ldrle	r1, [sp, #28]
 800f0fe:	f100 0001 	add.w	r0, r0, #1
 800f102:	bfda      	itte	le
 800f104:	fb02 3301 	mlale	r3, r2, r1, r3
 800f108:	9307      	strle	r3, [sp, #28]
 800f10a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f10e:	3701      	adds	r7, #1
 800f110:	9017      	str	r0, [sp, #92]	; 0x5c
 800f112:	e7bf      	b.n	800f094 <_strtod_l+0x154>
 800f114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f116:	195a      	adds	r2, r3, r5
 800f118:	9217      	str	r2, [sp, #92]	; 0x5c
 800f11a:	5d5a      	ldrb	r2, [r3, r5]
 800f11c:	2f00      	cmp	r7, #0
 800f11e:	d037      	beq.n	800f190 <_strtod_l+0x250>
 800f120:	9005      	str	r0, [sp, #20]
 800f122:	463d      	mov	r5, r7
 800f124:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f128:	2b09      	cmp	r3, #9
 800f12a:	d912      	bls.n	800f152 <_strtod_l+0x212>
 800f12c:	2301      	movs	r3, #1
 800f12e:	e7c2      	b.n	800f0b6 <_strtod_l+0x176>
 800f130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	9217      	str	r2, [sp, #92]	; 0x5c
 800f136:	785a      	ldrb	r2, [r3, #1]
 800f138:	3001      	adds	r0, #1
 800f13a:	2a30      	cmp	r2, #48	; 0x30
 800f13c:	d0f8      	beq.n	800f130 <_strtod_l+0x1f0>
 800f13e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f142:	2b08      	cmp	r3, #8
 800f144:	f200 84d9 	bhi.w	800fafa <_strtod_l+0xbba>
 800f148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f14a:	9005      	str	r0, [sp, #20]
 800f14c:	2000      	movs	r0, #0
 800f14e:	9308      	str	r3, [sp, #32]
 800f150:	4605      	mov	r5, r0
 800f152:	3a30      	subs	r2, #48	; 0x30
 800f154:	f100 0301 	add.w	r3, r0, #1
 800f158:	d014      	beq.n	800f184 <_strtod_l+0x244>
 800f15a:	9905      	ldr	r1, [sp, #20]
 800f15c:	4419      	add	r1, r3
 800f15e:	9105      	str	r1, [sp, #20]
 800f160:	462b      	mov	r3, r5
 800f162:	eb00 0e05 	add.w	lr, r0, r5
 800f166:	210a      	movs	r1, #10
 800f168:	4573      	cmp	r3, lr
 800f16a:	d113      	bne.n	800f194 <_strtod_l+0x254>
 800f16c:	182b      	adds	r3, r5, r0
 800f16e:	2b08      	cmp	r3, #8
 800f170:	f105 0501 	add.w	r5, r5, #1
 800f174:	4405      	add	r5, r0
 800f176:	dc1c      	bgt.n	800f1b2 <_strtod_l+0x272>
 800f178:	9907      	ldr	r1, [sp, #28]
 800f17a:	230a      	movs	r3, #10
 800f17c:	fb03 2301 	mla	r3, r3, r1, r2
 800f180:	9307      	str	r3, [sp, #28]
 800f182:	2300      	movs	r3, #0
 800f184:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f186:	1c51      	adds	r1, r2, #1
 800f188:	9117      	str	r1, [sp, #92]	; 0x5c
 800f18a:	7852      	ldrb	r2, [r2, #1]
 800f18c:	4618      	mov	r0, r3
 800f18e:	e7c9      	b.n	800f124 <_strtod_l+0x1e4>
 800f190:	4638      	mov	r0, r7
 800f192:	e7d2      	b.n	800f13a <_strtod_l+0x1fa>
 800f194:	2b08      	cmp	r3, #8
 800f196:	dc04      	bgt.n	800f1a2 <_strtod_l+0x262>
 800f198:	9e07      	ldr	r6, [sp, #28]
 800f19a:	434e      	muls	r6, r1
 800f19c:	9607      	str	r6, [sp, #28]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	e7e2      	b.n	800f168 <_strtod_l+0x228>
 800f1a2:	f103 0c01 	add.w	ip, r3, #1
 800f1a6:	f1bc 0f10 	cmp.w	ip, #16
 800f1aa:	bfd8      	it	le
 800f1ac:	fb01 f909 	mulle.w	r9, r1, r9
 800f1b0:	e7f5      	b.n	800f19e <_strtod_l+0x25e>
 800f1b2:	2d10      	cmp	r5, #16
 800f1b4:	bfdc      	itt	le
 800f1b6:	230a      	movle	r3, #10
 800f1b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800f1bc:	e7e1      	b.n	800f182 <_strtod_l+0x242>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9305      	str	r3, [sp, #20]
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e77c      	b.n	800f0c0 <_strtod_l+0x180>
 800f1c6:	f04f 0c00 	mov.w	ip, #0
 800f1ca:	f108 0202 	add.w	r2, r8, #2
 800f1ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f1d4:	e785      	b.n	800f0e2 <_strtod_l+0x1a2>
 800f1d6:	f04f 0c01 	mov.w	ip, #1
 800f1da:	e7f6      	b.n	800f1ca <_strtod_l+0x28a>
 800f1dc:	080144dc 	.word	0x080144dc
 800f1e0:	08014230 	.word	0x08014230
 800f1e4:	7ff00000 	.word	0x7ff00000
 800f1e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f1ea:	1c51      	adds	r1, r2, #1
 800f1ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800f1ee:	7852      	ldrb	r2, [r2, #1]
 800f1f0:	2a30      	cmp	r2, #48	; 0x30
 800f1f2:	d0f9      	beq.n	800f1e8 <_strtod_l+0x2a8>
 800f1f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f1f8:	2908      	cmp	r1, #8
 800f1fa:	f63f af79 	bhi.w	800f0f0 <_strtod_l+0x1b0>
 800f1fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f204:	9206      	str	r2, [sp, #24]
 800f206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f208:	1c51      	adds	r1, r2, #1
 800f20a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f20c:	7852      	ldrb	r2, [r2, #1]
 800f20e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f212:	2e09      	cmp	r6, #9
 800f214:	d937      	bls.n	800f286 <_strtod_l+0x346>
 800f216:	9e06      	ldr	r6, [sp, #24]
 800f218:	1b89      	subs	r1, r1, r6
 800f21a:	2908      	cmp	r1, #8
 800f21c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f220:	dc02      	bgt.n	800f228 <_strtod_l+0x2e8>
 800f222:	4576      	cmp	r6, lr
 800f224:	bfa8      	it	ge
 800f226:	4676      	movge	r6, lr
 800f228:	f1bc 0f00 	cmp.w	ip, #0
 800f22c:	d000      	beq.n	800f230 <_strtod_l+0x2f0>
 800f22e:	4276      	negs	r6, r6
 800f230:	2d00      	cmp	r5, #0
 800f232:	d14d      	bne.n	800f2d0 <_strtod_l+0x390>
 800f234:	9904      	ldr	r1, [sp, #16]
 800f236:	4301      	orrs	r1, r0
 800f238:	f47f aec6 	bne.w	800efc8 <_strtod_l+0x88>
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f47f aee1 	bne.w	800f004 <_strtod_l+0xc4>
 800f242:	2a69      	cmp	r2, #105	; 0x69
 800f244:	d027      	beq.n	800f296 <_strtod_l+0x356>
 800f246:	dc24      	bgt.n	800f292 <_strtod_l+0x352>
 800f248:	2a49      	cmp	r2, #73	; 0x49
 800f24a:	d024      	beq.n	800f296 <_strtod_l+0x356>
 800f24c:	2a4e      	cmp	r2, #78	; 0x4e
 800f24e:	f47f aed9 	bne.w	800f004 <_strtod_l+0xc4>
 800f252:	499f      	ldr	r1, [pc, #636]	; (800f4d0 <_strtod_l+0x590>)
 800f254:	a817      	add	r0, sp, #92	; 0x5c
 800f256:	f002 f8cb 	bl	80113f0 <__match>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	f43f aed2 	beq.w	800f004 <_strtod_l+0xc4>
 800f260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b28      	cmp	r3, #40	; 0x28
 800f266:	d12d      	bne.n	800f2c4 <_strtod_l+0x384>
 800f268:	499a      	ldr	r1, [pc, #616]	; (800f4d4 <_strtod_l+0x594>)
 800f26a:	aa1a      	add	r2, sp, #104	; 0x68
 800f26c:	a817      	add	r0, sp, #92	; 0x5c
 800f26e:	f002 f8d3 	bl	8011418 <__hexnan>
 800f272:	2805      	cmp	r0, #5
 800f274:	d126      	bne.n	800f2c4 <_strtod_l+0x384>
 800f276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f278:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f27c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f280:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f284:	e6a0      	b.n	800efc8 <_strtod_l+0x88>
 800f286:	210a      	movs	r1, #10
 800f288:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f28c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f290:	e7b9      	b.n	800f206 <_strtod_l+0x2c6>
 800f292:	2a6e      	cmp	r2, #110	; 0x6e
 800f294:	e7db      	b.n	800f24e <_strtod_l+0x30e>
 800f296:	4990      	ldr	r1, [pc, #576]	; (800f4d8 <_strtod_l+0x598>)
 800f298:	a817      	add	r0, sp, #92	; 0x5c
 800f29a:	f002 f8a9 	bl	80113f0 <__match>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f43f aeb0 	beq.w	800f004 <_strtod_l+0xc4>
 800f2a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2a6:	498d      	ldr	r1, [pc, #564]	; (800f4dc <_strtod_l+0x59c>)
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	a817      	add	r0, sp, #92	; 0x5c
 800f2ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800f2ae:	f002 f89f 	bl	80113f0 <__match>
 800f2b2:	b910      	cbnz	r0, 800f2ba <_strtod_l+0x37a>
 800f2b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f2ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f4ec <_strtod_l+0x5ac>
 800f2be:	f04f 0a00 	mov.w	sl, #0
 800f2c2:	e681      	b.n	800efc8 <_strtod_l+0x88>
 800f2c4:	4886      	ldr	r0, [pc, #536]	; (800f4e0 <_strtod_l+0x5a0>)
 800f2c6:	f003 fa37 	bl	8012738 <nan>
 800f2ca:	ec5b ab10 	vmov	sl, fp, d0
 800f2ce:	e67b      	b.n	800efc8 <_strtod_l+0x88>
 800f2d0:	9b05      	ldr	r3, [sp, #20]
 800f2d2:	9807      	ldr	r0, [sp, #28]
 800f2d4:	1af3      	subs	r3, r6, r3
 800f2d6:	2f00      	cmp	r7, #0
 800f2d8:	bf08      	it	eq
 800f2da:	462f      	moveq	r7, r5
 800f2dc:	2d10      	cmp	r5, #16
 800f2de:	9306      	str	r3, [sp, #24]
 800f2e0:	46a8      	mov	r8, r5
 800f2e2:	bfa8      	it	ge
 800f2e4:	f04f 0810 	movge.w	r8, #16
 800f2e8:	f7f1 f934 	bl	8000554 <__aeabi_ui2d>
 800f2ec:	2d09      	cmp	r5, #9
 800f2ee:	4682      	mov	sl, r0
 800f2f0:	468b      	mov	fp, r1
 800f2f2:	dd13      	ble.n	800f31c <_strtod_l+0x3dc>
 800f2f4:	4b7b      	ldr	r3, [pc, #492]	; (800f4e4 <_strtod_l+0x5a4>)
 800f2f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f2fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f2fe:	f7f1 f9a3 	bl	8000648 <__aeabi_dmul>
 800f302:	4682      	mov	sl, r0
 800f304:	4648      	mov	r0, r9
 800f306:	468b      	mov	fp, r1
 800f308:	f7f1 f924 	bl	8000554 <__aeabi_ui2d>
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	4650      	mov	r0, sl
 800f312:	4659      	mov	r1, fp
 800f314:	f7f0 ffe2 	bl	80002dc <__adddf3>
 800f318:	4682      	mov	sl, r0
 800f31a:	468b      	mov	fp, r1
 800f31c:	2d0f      	cmp	r5, #15
 800f31e:	dc38      	bgt.n	800f392 <_strtod_l+0x452>
 800f320:	9b06      	ldr	r3, [sp, #24]
 800f322:	2b00      	cmp	r3, #0
 800f324:	f43f ae50 	beq.w	800efc8 <_strtod_l+0x88>
 800f328:	dd24      	ble.n	800f374 <_strtod_l+0x434>
 800f32a:	2b16      	cmp	r3, #22
 800f32c:	dc0b      	bgt.n	800f346 <_strtod_l+0x406>
 800f32e:	496d      	ldr	r1, [pc, #436]	; (800f4e4 <_strtod_l+0x5a4>)
 800f330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f338:	4652      	mov	r2, sl
 800f33a:	465b      	mov	r3, fp
 800f33c:	f7f1 f984 	bl	8000648 <__aeabi_dmul>
 800f340:	4682      	mov	sl, r0
 800f342:	468b      	mov	fp, r1
 800f344:	e640      	b.n	800efc8 <_strtod_l+0x88>
 800f346:	9a06      	ldr	r2, [sp, #24]
 800f348:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f34c:	4293      	cmp	r3, r2
 800f34e:	db20      	blt.n	800f392 <_strtod_l+0x452>
 800f350:	4c64      	ldr	r4, [pc, #400]	; (800f4e4 <_strtod_l+0x5a4>)
 800f352:	f1c5 050f 	rsb	r5, r5, #15
 800f356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f35a:	4652      	mov	r2, sl
 800f35c:	465b      	mov	r3, fp
 800f35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f362:	f7f1 f971 	bl	8000648 <__aeabi_dmul>
 800f366:	9b06      	ldr	r3, [sp, #24]
 800f368:	1b5d      	subs	r5, r3, r5
 800f36a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f36e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f372:	e7e3      	b.n	800f33c <_strtod_l+0x3fc>
 800f374:	9b06      	ldr	r3, [sp, #24]
 800f376:	3316      	adds	r3, #22
 800f378:	db0b      	blt.n	800f392 <_strtod_l+0x452>
 800f37a:	9b05      	ldr	r3, [sp, #20]
 800f37c:	1b9e      	subs	r6, r3, r6
 800f37e:	4b59      	ldr	r3, [pc, #356]	; (800f4e4 <_strtod_l+0x5a4>)
 800f380:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f384:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f388:	4650      	mov	r0, sl
 800f38a:	4659      	mov	r1, fp
 800f38c:	f7f1 fa86 	bl	800089c <__aeabi_ddiv>
 800f390:	e7d6      	b.n	800f340 <_strtod_l+0x400>
 800f392:	9b06      	ldr	r3, [sp, #24]
 800f394:	eba5 0808 	sub.w	r8, r5, r8
 800f398:	4498      	add	r8, r3
 800f39a:	f1b8 0f00 	cmp.w	r8, #0
 800f39e:	dd74      	ble.n	800f48a <_strtod_l+0x54a>
 800f3a0:	f018 030f 	ands.w	r3, r8, #15
 800f3a4:	d00a      	beq.n	800f3bc <_strtod_l+0x47c>
 800f3a6:	494f      	ldr	r1, [pc, #316]	; (800f4e4 <_strtod_l+0x5a4>)
 800f3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3ac:	4652      	mov	r2, sl
 800f3ae:	465b      	mov	r3, fp
 800f3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b4:	f7f1 f948 	bl	8000648 <__aeabi_dmul>
 800f3b8:	4682      	mov	sl, r0
 800f3ba:	468b      	mov	fp, r1
 800f3bc:	f038 080f 	bics.w	r8, r8, #15
 800f3c0:	d04f      	beq.n	800f462 <_strtod_l+0x522>
 800f3c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f3c6:	dd22      	ble.n	800f40e <_strtod_l+0x4ce>
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	462e      	mov	r6, r5
 800f3cc:	9507      	str	r5, [sp, #28]
 800f3ce:	9505      	str	r5, [sp, #20]
 800f3d0:	2322      	movs	r3, #34	; 0x22
 800f3d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f4ec <_strtod_l+0x5ac>
 800f3d6:	6023      	str	r3, [r4, #0]
 800f3d8:	f04f 0a00 	mov.w	sl, #0
 800f3dc:	9b07      	ldr	r3, [sp, #28]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f43f adf2 	beq.w	800efc8 <_strtod_l+0x88>
 800f3e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f002 f978 	bl	80116dc <_Bfree>
 800f3ec:	9905      	ldr	r1, [sp, #20]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f002 f974 	bl	80116dc <_Bfree>
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f002 f970 	bl	80116dc <_Bfree>
 800f3fc:	9907      	ldr	r1, [sp, #28]
 800f3fe:	4620      	mov	r0, r4
 800f400:	f002 f96c 	bl	80116dc <_Bfree>
 800f404:	4629      	mov	r1, r5
 800f406:	4620      	mov	r0, r4
 800f408:	f002 f968 	bl	80116dc <_Bfree>
 800f40c:	e5dc      	b.n	800efc8 <_strtod_l+0x88>
 800f40e:	4b36      	ldr	r3, [pc, #216]	; (800f4e8 <_strtod_l+0x5a8>)
 800f410:	9304      	str	r3, [sp, #16]
 800f412:	2300      	movs	r3, #0
 800f414:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f418:	4650      	mov	r0, sl
 800f41a:	4659      	mov	r1, fp
 800f41c:	4699      	mov	r9, r3
 800f41e:	f1b8 0f01 	cmp.w	r8, #1
 800f422:	dc21      	bgt.n	800f468 <_strtod_l+0x528>
 800f424:	b10b      	cbz	r3, 800f42a <_strtod_l+0x4ea>
 800f426:	4682      	mov	sl, r0
 800f428:	468b      	mov	fp, r1
 800f42a:	4b2f      	ldr	r3, [pc, #188]	; (800f4e8 <_strtod_l+0x5a8>)
 800f42c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f430:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f434:	4652      	mov	r2, sl
 800f436:	465b      	mov	r3, fp
 800f438:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f43c:	f7f1 f904 	bl	8000648 <__aeabi_dmul>
 800f440:	4b2a      	ldr	r3, [pc, #168]	; (800f4ec <_strtod_l+0x5ac>)
 800f442:	460a      	mov	r2, r1
 800f444:	400b      	ands	r3, r1
 800f446:	492a      	ldr	r1, [pc, #168]	; (800f4f0 <_strtod_l+0x5b0>)
 800f448:	428b      	cmp	r3, r1
 800f44a:	4682      	mov	sl, r0
 800f44c:	d8bc      	bhi.n	800f3c8 <_strtod_l+0x488>
 800f44e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f452:	428b      	cmp	r3, r1
 800f454:	bf86      	itte	hi
 800f456:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f4f4 <_strtod_l+0x5b4>
 800f45a:	f04f 3aff 	movhi.w	sl, #4294967295
 800f45e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f462:	2300      	movs	r3, #0
 800f464:	9304      	str	r3, [sp, #16]
 800f466:	e084      	b.n	800f572 <_strtod_l+0x632>
 800f468:	f018 0f01 	tst.w	r8, #1
 800f46c:	d005      	beq.n	800f47a <_strtod_l+0x53a>
 800f46e:	9b04      	ldr	r3, [sp, #16]
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	f7f1 f8e8 	bl	8000648 <__aeabi_dmul>
 800f478:	2301      	movs	r3, #1
 800f47a:	9a04      	ldr	r2, [sp, #16]
 800f47c:	3208      	adds	r2, #8
 800f47e:	f109 0901 	add.w	r9, r9, #1
 800f482:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f486:	9204      	str	r2, [sp, #16]
 800f488:	e7c9      	b.n	800f41e <_strtod_l+0x4de>
 800f48a:	d0ea      	beq.n	800f462 <_strtod_l+0x522>
 800f48c:	f1c8 0800 	rsb	r8, r8, #0
 800f490:	f018 020f 	ands.w	r2, r8, #15
 800f494:	d00a      	beq.n	800f4ac <_strtod_l+0x56c>
 800f496:	4b13      	ldr	r3, [pc, #76]	; (800f4e4 <_strtod_l+0x5a4>)
 800f498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f49c:	4650      	mov	r0, sl
 800f49e:	4659      	mov	r1, fp
 800f4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a4:	f7f1 f9fa 	bl	800089c <__aeabi_ddiv>
 800f4a8:	4682      	mov	sl, r0
 800f4aa:	468b      	mov	fp, r1
 800f4ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f4b0:	d0d7      	beq.n	800f462 <_strtod_l+0x522>
 800f4b2:	f1b8 0f1f 	cmp.w	r8, #31
 800f4b6:	dd1f      	ble.n	800f4f8 <_strtod_l+0x5b8>
 800f4b8:	2500      	movs	r5, #0
 800f4ba:	462e      	mov	r6, r5
 800f4bc:	9507      	str	r5, [sp, #28]
 800f4be:	9505      	str	r5, [sp, #20]
 800f4c0:	2322      	movs	r3, #34	; 0x22
 800f4c2:	f04f 0a00 	mov.w	sl, #0
 800f4c6:	f04f 0b00 	mov.w	fp, #0
 800f4ca:	6023      	str	r3, [r4, #0]
 800f4cc:	e786      	b.n	800f3dc <_strtod_l+0x49c>
 800f4ce:	bf00      	nop
 800f4d0:	08014201 	.word	0x08014201
 800f4d4:	08014244 	.word	0x08014244
 800f4d8:	080141f9 	.word	0x080141f9
 800f4dc:	08014384 	.word	0x08014384
 800f4e0:	08014698 	.word	0x08014698
 800f4e4:	08014578 	.word	0x08014578
 800f4e8:	08014550 	.word	0x08014550
 800f4ec:	7ff00000 	.word	0x7ff00000
 800f4f0:	7ca00000 	.word	0x7ca00000
 800f4f4:	7fefffff 	.word	0x7fefffff
 800f4f8:	f018 0310 	ands.w	r3, r8, #16
 800f4fc:	bf18      	it	ne
 800f4fe:	236a      	movne	r3, #106	; 0x6a
 800f500:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f8b0 <_strtod_l+0x970>
 800f504:	9304      	str	r3, [sp, #16]
 800f506:	4650      	mov	r0, sl
 800f508:	4659      	mov	r1, fp
 800f50a:	2300      	movs	r3, #0
 800f50c:	f018 0f01 	tst.w	r8, #1
 800f510:	d004      	beq.n	800f51c <_strtod_l+0x5dc>
 800f512:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f516:	f7f1 f897 	bl	8000648 <__aeabi_dmul>
 800f51a:	2301      	movs	r3, #1
 800f51c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f520:	f109 0908 	add.w	r9, r9, #8
 800f524:	d1f2      	bne.n	800f50c <_strtod_l+0x5cc>
 800f526:	b10b      	cbz	r3, 800f52c <_strtod_l+0x5ec>
 800f528:	4682      	mov	sl, r0
 800f52a:	468b      	mov	fp, r1
 800f52c:	9b04      	ldr	r3, [sp, #16]
 800f52e:	b1c3      	cbz	r3, 800f562 <_strtod_l+0x622>
 800f530:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f534:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f538:	2b00      	cmp	r3, #0
 800f53a:	4659      	mov	r1, fp
 800f53c:	dd11      	ble.n	800f562 <_strtod_l+0x622>
 800f53e:	2b1f      	cmp	r3, #31
 800f540:	f340 8124 	ble.w	800f78c <_strtod_l+0x84c>
 800f544:	2b34      	cmp	r3, #52	; 0x34
 800f546:	bfde      	ittt	le
 800f548:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f54c:	f04f 33ff 	movle.w	r3, #4294967295
 800f550:	fa03 f202 	lslle.w	r2, r3, r2
 800f554:	f04f 0a00 	mov.w	sl, #0
 800f558:	bfcc      	ite	gt
 800f55a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f55e:	ea02 0b01 	andle.w	fp, r2, r1
 800f562:	2200      	movs	r2, #0
 800f564:	2300      	movs	r3, #0
 800f566:	4650      	mov	r0, sl
 800f568:	4659      	mov	r1, fp
 800f56a:	f7f1 fad5 	bl	8000b18 <__aeabi_dcmpeq>
 800f56e:	2800      	cmp	r0, #0
 800f570:	d1a2      	bne.n	800f4b8 <_strtod_l+0x578>
 800f572:	9b07      	ldr	r3, [sp, #28]
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	9908      	ldr	r1, [sp, #32]
 800f578:	462b      	mov	r3, r5
 800f57a:	463a      	mov	r2, r7
 800f57c:	4620      	mov	r0, r4
 800f57e:	f002 f915 	bl	80117ac <__s2b>
 800f582:	9007      	str	r0, [sp, #28]
 800f584:	2800      	cmp	r0, #0
 800f586:	f43f af1f 	beq.w	800f3c8 <_strtod_l+0x488>
 800f58a:	9b05      	ldr	r3, [sp, #20]
 800f58c:	1b9e      	subs	r6, r3, r6
 800f58e:	9b06      	ldr	r3, [sp, #24]
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfb4      	ite	lt
 800f594:	4633      	movlt	r3, r6
 800f596:	2300      	movge	r3, #0
 800f598:	930c      	str	r3, [sp, #48]	; 0x30
 800f59a:	9b06      	ldr	r3, [sp, #24]
 800f59c:	2500      	movs	r5, #0
 800f59e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5a2:	9312      	str	r3, [sp, #72]	; 0x48
 800f5a4:	462e      	mov	r6, r5
 800f5a6:	9b07      	ldr	r3, [sp, #28]
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	6859      	ldr	r1, [r3, #4]
 800f5ac:	f002 f856 	bl	801165c <_Balloc>
 800f5b0:	9005      	str	r0, [sp, #20]
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f43f af0c 	beq.w	800f3d0 <_strtod_l+0x490>
 800f5b8:	9b07      	ldr	r3, [sp, #28]
 800f5ba:	691a      	ldr	r2, [r3, #16]
 800f5bc:	3202      	adds	r2, #2
 800f5be:	f103 010c 	add.w	r1, r3, #12
 800f5c2:	0092      	lsls	r2, r2, #2
 800f5c4:	300c      	adds	r0, #12
 800f5c6:	f7fe fd5b 	bl	800e080 <memcpy>
 800f5ca:	ec4b ab10 	vmov	d0, sl, fp
 800f5ce:	aa1a      	add	r2, sp, #104	; 0x68
 800f5d0:	a919      	add	r1, sp, #100	; 0x64
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f002 fc30 	bl	8011e38 <__d2b>
 800f5d8:	ec4b ab18 	vmov	d8, sl, fp
 800f5dc:	9018      	str	r0, [sp, #96]	; 0x60
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f43f aef6 	beq.w	800f3d0 <_strtod_l+0x490>
 800f5e4:	2101      	movs	r1, #1
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f002 f97a 	bl	80118e0 <__i2b>
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	f43f aeee 	beq.w	800f3d0 <_strtod_l+0x490>
 800f5f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f5f6:	9904      	ldr	r1, [sp, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	bfab      	itete	ge
 800f5fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f5fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f600:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f602:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f606:	bfac      	ite	ge
 800f608:	eb03 0902 	addge.w	r9, r3, r2
 800f60c:	1ad7      	sublt	r7, r2, r3
 800f60e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f610:	eba3 0801 	sub.w	r8, r3, r1
 800f614:	4490      	add	r8, r2
 800f616:	4ba1      	ldr	r3, [pc, #644]	; (800f89c <_strtod_l+0x95c>)
 800f618:	f108 38ff 	add.w	r8, r8, #4294967295
 800f61c:	4598      	cmp	r8, r3
 800f61e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f622:	f280 80c7 	bge.w	800f7b4 <_strtod_l+0x874>
 800f626:	eba3 0308 	sub.w	r3, r3, r8
 800f62a:	2b1f      	cmp	r3, #31
 800f62c:	eba2 0203 	sub.w	r2, r2, r3
 800f630:	f04f 0101 	mov.w	r1, #1
 800f634:	f300 80b1 	bgt.w	800f79a <_strtod_l+0x85a>
 800f638:	fa01 f303 	lsl.w	r3, r1, r3
 800f63c:	930d      	str	r3, [sp, #52]	; 0x34
 800f63e:	2300      	movs	r3, #0
 800f640:	9308      	str	r3, [sp, #32]
 800f642:	eb09 0802 	add.w	r8, r9, r2
 800f646:	9b04      	ldr	r3, [sp, #16]
 800f648:	45c1      	cmp	r9, r8
 800f64a:	4417      	add	r7, r2
 800f64c:	441f      	add	r7, r3
 800f64e:	464b      	mov	r3, r9
 800f650:	bfa8      	it	ge
 800f652:	4643      	movge	r3, r8
 800f654:	42bb      	cmp	r3, r7
 800f656:	bfa8      	it	ge
 800f658:	463b      	movge	r3, r7
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	bfc2      	ittt	gt
 800f65e:	eba8 0803 	subgt.w	r8, r8, r3
 800f662:	1aff      	subgt	r7, r7, r3
 800f664:	eba9 0903 	subgt.w	r9, r9, r3
 800f668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	dd17      	ble.n	800f69e <_strtod_l+0x75e>
 800f66e:	4631      	mov	r1, r6
 800f670:	461a      	mov	r2, r3
 800f672:	4620      	mov	r0, r4
 800f674:	f002 f9f4 	bl	8011a60 <__pow5mult>
 800f678:	4606      	mov	r6, r0
 800f67a:	2800      	cmp	r0, #0
 800f67c:	f43f aea8 	beq.w	800f3d0 <_strtod_l+0x490>
 800f680:	4601      	mov	r1, r0
 800f682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f684:	4620      	mov	r0, r4
 800f686:	f002 f941 	bl	801190c <__multiply>
 800f68a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f68c:	2800      	cmp	r0, #0
 800f68e:	f43f ae9f 	beq.w	800f3d0 <_strtod_l+0x490>
 800f692:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f694:	4620      	mov	r0, r4
 800f696:	f002 f821 	bl	80116dc <_Bfree>
 800f69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f69c:	9318      	str	r3, [sp, #96]	; 0x60
 800f69e:	f1b8 0f00 	cmp.w	r8, #0
 800f6a2:	f300 808c 	bgt.w	800f7be <_strtod_l+0x87e>
 800f6a6:	9b06      	ldr	r3, [sp, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	dd08      	ble.n	800f6be <_strtod_l+0x77e>
 800f6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6ae:	9905      	ldr	r1, [sp, #20]
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f002 f9d5 	bl	8011a60 <__pow5mult>
 800f6b6:	9005      	str	r0, [sp, #20]
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f43f ae89 	beq.w	800f3d0 <_strtod_l+0x490>
 800f6be:	2f00      	cmp	r7, #0
 800f6c0:	dd08      	ble.n	800f6d4 <_strtod_l+0x794>
 800f6c2:	9905      	ldr	r1, [sp, #20]
 800f6c4:	463a      	mov	r2, r7
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f002 fa24 	bl	8011b14 <__lshift>
 800f6cc:	9005      	str	r0, [sp, #20]
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	f43f ae7e 	beq.w	800f3d0 <_strtod_l+0x490>
 800f6d4:	f1b9 0f00 	cmp.w	r9, #0
 800f6d8:	dd08      	ble.n	800f6ec <_strtod_l+0x7ac>
 800f6da:	4631      	mov	r1, r6
 800f6dc:	464a      	mov	r2, r9
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f002 fa18 	bl	8011b14 <__lshift>
 800f6e4:	4606      	mov	r6, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	f43f ae72 	beq.w	800f3d0 <_strtod_l+0x490>
 800f6ec:	9a05      	ldr	r2, [sp, #20]
 800f6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f002 fa9b 	bl	8011c2c <__mdiff>
 800f6f6:	4605      	mov	r5, r0
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	f43f ae69 	beq.w	800f3d0 <_strtod_l+0x490>
 800f6fe:	68c3      	ldr	r3, [r0, #12]
 800f700:	930b      	str	r3, [sp, #44]	; 0x2c
 800f702:	2300      	movs	r3, #0
 800f704:	60c3      	str	r3, [r0, #12]
 800f706:	4631      	mov	r1, r6
 800f708:	f002 fa74 	bl	8011bf4 <__mcmp>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	da60      	bge.n	800f7d2 <_strtod_l+0x892>
 800f710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f712:	ea53 030a 	orrs.w	r3, r3, sl
 800f716:	f040 8082 	bne.w	800f81e <_strtod_l+0x8de>
 800f71a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d17d      	bne.n	800f81e <_strtod_l+0x8de>
 800f722:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f726:	0d1b      	lsrs	r3, r3, #20
 800f728:	051b      	lsls	r3, r3, #20
 800f72a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f72e:	d976      	bls.n	800f81e <_strtod_l+0x8de>
 800f730:	696b      	ldr	r3, [r5, #20]
 800f732:	b913      	cbnz	r3, 800f73a <_strtod_l+0x7fa>
 800f734:	692b      	ldr	r3, [r5, #16]
 800f736:	2b01      	cmp	r3, #1
 800f738:	dd71      	ble.n	800f81e <_strtod_l+0x8de>
 800f73a:	4629      	mov	r1, r5
 800f73c:	2201      	movs	r2, #1
 800f73e:	4620      	mov	r0, r4
 800f740:	f002 f9e8 	bl	8011b14 <__lshift>
 800f744:	4631      	mov	r1, r6
 800f746:	4605      	mov	r5, r0
 800f748:	f002 fa54 	bl	8011bf4 <__mcmp>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	dd66      	ble.n	800f81e <_strtod_l+0x8de>
 800f750:	9904      	ldr	r1, [sp, #16]
 800f752:	4a53      	ldr	r2, [pc, #332]	; (800f8a0 <_strtod_l+0x960>)
 800f754:	465b      	mov	r3, fp
 800f756:	2900      	cmp	r1, #0
 800f758:	f000 8081 	beq.w	800f85e <_strtod_l+0x91e>
 800f75c:	ea02 010b 	and.w	r1, r2, fp
 800f760:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f764:	dc7b      	bgt.n	800f85e <_strtod_l+0x91e>
 800f766:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f76a:	f77f aea9 	ble.w	800f4c0 <_strtod_l+0x580>
 800f76e:	4b4d      	ldr	r3, [pc, #308]	; (800f8a4 <_strtod_l+0x964>)
 800f770:	4650      	mov	r0, sl
 800f772:	4659      	mov	r1, fp
 800f774:	2200      	movs	r2, #0
 800f776:	f7f0 ff67 	bl	8000648 <__aeabi_dmul>
 800f77a:	460b      	mov	r3, r1
 800f77c:	4303      	orrs	r3, r0
 800f77e:	bf08      	it	eq
 800f780:	2322      	moveq	r3, #34	; 0x22
 800f782:	4682      	mov	sl, r0
 800f784:	468b      	mov	fp, r1
 800f786:	bf08      	it	eq
 800f788:	6023      	streq	r3, [r4, #0]
 800f78a:	e62b      	b.n	800f3e4 <_strtod_l+0x4a4>
 800f78c:	f04f 32ff 	mov.w	r2, #4294967295
 800f790:	fa02 f303 	lsl.w	r3, r2, r3
 800f794:	ea03 0a0a 	and.w	sl, r3, sl
 800f798:	e6e3      	b.n	800f562 <_strtod_l+0x622>
 800f79a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f79e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f7a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f7a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f7aa:	fa01 f308 	lsl.w	r3, r1, r8
 800f7ae:	9308      	str	r3, [sp, #32]
 800f7b0:	910d      	str	r1, [sp, #52]	; 0x34
 800f7b2:	e746      	b.n	800f642 <_strtod_l+0x702>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	9308      	str	r3, [sp, #32]
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800f7bc:	e741      	b.n	800f642 <_strtod_l+0x702>
 800f7be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f7c0:	4642      	mov	r2, r8
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f002 f9a6 	bl	8011b14 <__lshift>
 800f7c8:	9018      	str	r0, [sp, #96]	; 0x60
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	f47f af6b 	bne.w	800f6a6 <_strtod_l+0x766>
 800f7d0:	e5fe      	b.n	800f3d0 <_strtod_l+0x490>
 800f7d2:	465f      	mov	r7, fp
 800f7d4:	d16e      	bne.n	800f8b4 <_strtod_l+0x974>
 800f7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7dc:	b342      	cbz	r2, 800f830 <_strtod_l+0x8f0>
 800f7de:	4a32      	ldr	r2, [pc, #200]	; (800f8a8 <_strtod_l+0x968>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d128      	bne.n	800f836 <_strtod_l+0x8f6>
 800f7e4:	9b04      	ldr	r3, [sp, #16]
 800f7e6:	4651      	mov	r1, sl
 800f7e8:	b1eb      	cbz	r3, 800f826 <_strtod_l+0x8e6>
 800f7ea:	4b2d      	ldr	r3, [pc, #180]	; (800f8a0 <_strtod_l+0x960>)
 800f7ec:	403b      	ands	r3, r7
 800f7ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f6:	d819      	bhi.n	800f82c <_strtod_l+0x8ec>
 800f7f8:	0d1b      	lsrs	r3, r3, #20
 800f7fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f802:	4299      	cmp	r1, r3
 800f804:	d117      	bne.n	800f836 <_strtod_l+0x8f6>
 800f806:	4b29      	ldr	r3, [pc, #164]	; (800f8ac <_strtod_l+0x96c>)
 800f808:	429f      	cmp	r7, r3
 800f80a:	d102      	bne.n	800f812 <_strtod_l+0x8d2>
 800f80c:	3101      	adds	r1, #1
 800f80e:	f43f addf 	beq.w	800f3d0 <_strtod_l+0x490>
 800f812:	4b23      	ldr	r3, [pc, #140]	; (800f8a0 <_strtod_l+0x960>)
 800f814:	403b      	ands	r3, r7
 800f816:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f81a:	f04f 0a00 	mov.w	sl, #0
 800f81e:	9b04      	ldr	r3, [sp, #16]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1a4      	bne.n	800f76e <_strtod_l+0x82e>
 800f824:	e5de      	b.n	800f3e4 <_strtod_l+0x4a4>
 800f826:	f04f 33ff 	mov.w	r3, #4294967295
 800f82a:	e7ea      	b.n	800f802 <_strtod_l+0x8c2>
 800f82c:	4613      	mov	r3, r2
 800f82e:	e7e8      	b.n	800f802 <_strtod_l+0x8c2>
 800f830:	ea53 030a 	orrs.w	r3, r3, sl
 800f834:	d08c      	beq.n	800f750 <_strtod_l+0x810>
 800f836:	9b08      	ldr	r3, [sp, #32]
 800f838:	b1db      	cbz	r3, 800f872 <_strtod_l+0x932>
 800f83a:	423b      	tst	r3, r7
 800f83c:	d0ef      	beq.n	800f81e <_strtod_l+0x8de>
 800f83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f840:	9a04      	ldr	r2, [sp, #16]
 800f842:	4650      	mov	r0, sl
 800f844:	4659      	mov	r1, fp
 800f846:	b1c3      	cbz	r3, 800f87a <_strtod_l+0x93a>
 800f848:	f7ff fb5e 	bl	800ef08 <sulp>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	ec51 0b18 	vmov	r0, r1, d8
 800f854:	f7f0 fd42 	bl	80002dc <__adddf3>
 800f858:	4682      	mov	sl, r0
 800f85a:	468b      	mov	fp, r1
 800f85c:	e7df      	b.n	800f81e <_strtod_l+0x8de>
 800f85e:	4013      	ands	r3, r2
 800f860:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f864:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f868:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f86c:	f04f 3aff 	mov.w	sl, #4294967295
 800f870:	e7d5      	b.n	800f81e <_strtod_l+0x8de>
 800f872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f874:	ea13 0f0a 	tst.w	r3, sl
 800f878:	e7e0      	b.n	800f83c <_strtod_l+0x8fc>
 800f87a:	f7ff fb45 	bl	800ef08 <sulp>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	ec51 0b18 	vmov	r0, r1, d8
 800f886:	f7f0 fd27 	bl	80002d8 <__aeabi_dsub>
 800f88a:	2200      	movs	r2, #0
 800f88c:	2300      	movs	r3, #0
 800f88e:	4682      	mov	sl, r0
 800f890:	468b      	mov	fp, r1
 800f892:	f7f1 f941 	bl	8000b18 <__aeabi_dcmpeq>
 800f896:	2800      	cmp	r0, #0
 800f898:	d0c1      	beq.n	800f81e <_strtod_l+0x8de>
 800f89a:	e611      	b.n	800f4c0 <_strtod_l+0x580>
 800f89c:	fffffc02 	.word	0xfffffc02
 800f8a0:	7ff00000 	.word	0x7ff00000
 800f8a4:	39500000 	.word	0x39500000
 800f8a8:	000fffff 	.word	0x000fffff
 800f8ac:	7fefffff 	.word	0x7fefffff
 800f8b0:	08014258 	.word	0x08014258
 800f8b4:	4631      	mov	r1, r6
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	f002 fb1a 	bl	8011ef0 <__ratio>
 800f8bc:	ec59 8b10 	vmov	r8, r9, d0
 800f8c0:	ee10 0a10 	vmov	r0, s0
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	f7f1 f938 	bl	8000b40 <__aeabi_dcmple>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d07a      	beq.n	800f9ca <_strtod_l+0xa8a>
 800f8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d04a      	beq.n	800f970 <_strtod_l+0xa30>
 800f8da:	4b95      	ldr	r3, [pc, #596]	; (800fb30 <_strtod_l+0xbf0>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f8e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fb30 <_strtod_l+0xbf0>
 800f8e6:	f04f 0800 	mov.w	r8, #0
 800f8ea:	4b92      	ldr	r3, [pc, #584]	; (800fb34 <_strtod_l+0xbf4>)
 800f8ec:	403b      	ands	r3, r7
 800f8ee:	930d      	str	r3, [sp, #52]	; 0x34
 800f8f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8f2:	4b91      	ldr	r3, [pc, #580]	; (800fb38 <_strtod_l+0xbf8>)
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	f040 80b0 	bne.w	800fa5a <_strtod_l+0xb1a>
 800f8fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f902:	ec4b ab10 	vmov	d0, sl, fp
 800f906:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f90a:	f002 fa19 	bl	8011d40 <__ulp>
 800f90e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f912:	ec53 2b10 	vmov	r2, r3, d0
 800f916:	f7f0 fe97 	bl	8000648 <__aeabi_dmul>
 800f91a:	4652      	mov	r2, sl
 800f91c:	465b      	mov	r3, fp
 800f91e:	f7f0 fcdd 	bl	80002dc <__adddf3>
 800f922:	460b      	mov	r3, r1
 800f924:	4983      	ldr	r1, [pc, #524]	; (800fb34 <_strtod_l+0xbf4>)
 800f926:	4a85      	ldr	r2, [pc, #532]	; (800fb3c <_strtod_l+0xbfc>)
 800f928:	4019      	ands	r1, r3
 800f92a:	4291      	cmp	r1, r2
 800f92c:	4682      	mov	sl, r0
 800f92e:	d960      	bls.n	800f9f2 <_strtod_l+0xab2>
 800f930:	ee18 3a90 	vmov	r3, s17
 800f934:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f938:	4293      	cmp	r3, r2
 800f93a:	d104      	bne.n	800f946 <_strtod_l+0xa06>
 800f93c:	ee18 3a10 	vmov	r3, s16
 800f940:	3301      	adds	r3, #1
 800f942:	f43f ad45 	beq.w	800f3d0 <_strtod_l+0x490>
 800f946:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fb48 <_strtod_l+0xc08>
 800f94a:	f04f 3aff 	mov.w	sl, #4294967295
 800f94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f950:	4620      	mov	r0, r4
 800f952:	f001 fec3 	bl	80116dc <_Bfree>
 800f956:	9905      	ldr	r1, [sp, #20]
 800f958:	4620      	mov	r0, r4
 800f95a:	f001 febf 	bl	80116dc <_Bfree>
 800f95e:	4631      	mov	r1, r6
 800f960:	4620      	mov	r0, r4
 800f962:	f001 febb 	bl	80116dc <_Bfree>
 800f966:	4629      	mov	r1, r5
 800f968:	4620      	mov	r0, r4
 800f96a:	f001 feb7 	bl	80116dc <_Bfree>
 800f96e:	e61a      	b.n	800f5a6 <_strtod_l+0x666>
 800f970:	f1ba 0f00 	cmp.w	sl, #0
 800f974:	d11b      	bne.n	800f9ae <_strtod_l+0xa6e>
 800f976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f97a:	b9f3      	cbnz	r3, 800f9ba <_strtod_l+0xa7a>
 800f97c:	4b6c      	ldr	r3, [pc, #432]	; (800fb30 <_strtod_l+0xbf0>)
 800f97e:	2200      	movs	r2, #0
 800f980:	4640      	mov	r0, r8
 800f982:	4649      	mov	r1, r9
 800f984:	f7f1 f8d2 	bl	8000b2c <__aeabi_dcmplt>
 800f988:	b9d0      	cbnz	r0, 800f9c0 <_strtod_l+0xa80>
 800f98a:	4640      	mov	r0, r8
 800f98c:	4649      	mov	r1, r9
 800f98e:	4b6c      	ldr	r3, [pc, #432]	; (800fb40 <_strtod_l+0xc00>)
 800f990:	2200      	movs	r2, #0
 800f992:	f7f0 fe59 	bl	8000648 <__aeabi_dmul>
 800f996:	4680      	mov	r8, r0
 800f998:	4689      	mov	r9, r1
 800f99a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f99e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f9a2:	9315      	str	r3, [sp, #84]	; 0x54
 800f9a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f9a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f9ac:	e79d      	b.n	800f8ea <_strtod_l+0x9aa>
 800f9ae:	f1ba 0f01 	cmp.w	sl, #1
 800f9b2:	d102      	bne.n	800f9ba <_strtod_l+0xa7a>
 800f9b4:	2f00      	cmp	r7, #0
 800f9b6:	f43f ad83 	beq.w	800f4c0 <_strtod_l+0x580>
 800f9ba:	4b62      	ldr	r3, [pc, #392]	; (800fb44 <_strtod_l+0xc04>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	e78e      	b.n	800f8de <_strtod_l+0x99e>
 800f9c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fb40 <_strtod_l+0xc00>
 800f9c4:	f04f 0800 	mov.w	r8, #0
 800f9c8:	e7e7      	b.n	800f99a <_strtod_l+0xa5a>
 800f9ca:	4b5d      	ldr	r3, [pc, #372]	; (800fb40 <_strtod_l+0xc00>)
 800f9cc:	4640      	mov	r0, r8
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f7f0 fe39 	bl	8000648 <__aeabi_dmul>
 800f9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9d8:	4680      	mov	r8, r0
 800f9da:	4689      	mov	r9, r1
 800f9dc:	b933      	cbnz	r3, 800f9ec <_strtod_l+0xaac>
 800f9de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9e2:	900e      	str	r0, [sp, #56]	; 0x38
 800f9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f9ea:	e7dd      	b.n	800f9a8 <_strtod_l+0xa68>
 800f9ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f9f0:	e7f9      	b.n	800f9e6 <_strtod_l+0xaa6>
 800f9f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f9f6:	9b04      	ldr	r3, [sp, #16]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1a8      	bne.n	800f94e <_strtod_l+0xa0e>
 800f9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa02:	0d1b      	lsrs	r3, r3, #20
 800fa04:	051b      	lsls	r3, r3, #20
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d1a1      	bne.n	800f94e <_strtod_l+0xa0e>
 800fa0a:	4640      	mov	r0, r8
 800fa0c:	4649      	mov	r1, r9
 800fa0e:	f7f1 f97b 	bl	8000d08 <__aeabi_d2lz>
 800fa12:	f7f0 fdeb 	bl	80005ec <__aeabi_l2d>
 800fa16:	4602      	mov	r2, r0
 800fa18:	460b      	mov	r3, r1
 800fa1a:	4640      	mov	r0, r8
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	f7f0 fc5b 	bl	80002d8 <__aeabi_dsub>
 800fa22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa28:	ea43 030a 	orr.w	r3, r3, sl
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	4680      	mov	r8, r0
 800fa30:	4689      	mov	r9, r1
 800fa32:	d055      	beq.n	800fae0 <_strtod_l+0xba0>
 800fa34:	a336      	add	r3, pc, #216	; (adr r3, 800fb10 <_strtod_l+0xbd0>)
 800fa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3a:	f7f1 f877 	bl	8000b2c <__aeabi_dcmplt>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	f47f acd0 	bne.w	800f3e4 <_strtod_l+0x4a4>
 800fa44:	a334      	add	r3, pc, #208	; (adr r3, 800fb18 <_strtod_l+0xbd8>)
 800fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	f7f1 f88b 	bl	8000b68 <__aeabi_dcmpgt>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	f43f af7b 	beq.w	800f94e <_strtod_l+0xa0e>
 800fa58:	e4c4      	b.n	800f3e4 <_strtod_l+0x4a4>
 800fa5a:	9b04      	ldr	r3, [sp, #16]
 800fa5c:	b333      	cbz	r3, 800faac <_strtod_l+0xb6c>
 800fa5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fa64:	d822      	bhi.n	800faac <_strtod_l+0xb6c>
 800fa66:	a32e      	add	r3, pc, #184	; (adr r3, 800fb20 <_strtod_l+0xbe0>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	4640      	mov	r0, r8
 800fa6e:	4649      	mov	r1, r9
 800fa70:	f7f1 f866 	bl	8000b40 <__aeabi_dcmple>
 800fa74:	b1a0      	cbz	r0, 800faa0 <_strtod_l+0xb60>
 800fa76:	4649      	mov	r1, r9
 800fa78:	4640      	mov	r0, r8
 800fa7a:	f7f1 f8bd 	bl	8000bf8 <__aeabi_d2uiz>
 800fa7e:	2801      	cmp	r0, #1
 800fa80:	bf38      	it	cc
 800fa82:	2001      	movcc	r0, #1
 800fa84:	f7f0 fd66 	bl	8000554 <__aeabi_ui2d>
 800fa88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa8a:	4680      	mov	r8, r0
 800fa8c:	4689      	mov	r9, r1
 800fa8e:	bb23      	cbnz	r3, 800fada <_strtod_l+0xb9a>
 800fa90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa94:	9010      	str	r0, [sp, #64]	; 0x40
 800fa96:	9311      	str	r3, [sp, #68]	; 0x44
 800fa98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800faa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800faa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800faa8:	1a9b      	subs	r3, r3, r2
 800faaa:	9309      	str	r3, [sp, #36]	; 0x24
 800faac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fab0:	eeb0 0a48 	vmov.f32	s0, s16
 800fab4:	eef0 0a68 	vmov.f32	s1, s17
 800fab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fabc:	f002 f940 	bl	8011d40 <__ulp>
 800fac0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fac4:	ec53 2b10 	vmov	r2, r3, d0
 800fac8:	f7f0 fdbe 	bl	8000648 <__aeabi_dmul>
 800facc:	ec53 2b18 	vmov	r2, r3, d8
 800fad0:	f7f0 fc04 	bl	80002dc <__adddf3>
 800fad4:	4682      	mov	sl, r0
 800fad6:	468b      	mov	fp, r1
 800fad8:	e78d      	b.n	800f9f6 <_strtod_l+0xab6>
 800fada:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fade:	e7db      	b.n	800fa98 <_strtod_l+0xb58>
 800fae0:	a311      	add	r3, pc, #68	; (adr r3, 800fb28 <_strtod_l+0xbe8>)
 800fae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae6:	f7f1 f821 	bl	8000b2c <__aeabi_dcmplt>
 800faea:	e7b2      	b.n	800fa52 <_strtod_l+0xb12>
 800faec:	2300      	movs	r3, #0
 800faee:	930a      	str	r3, [sp, #40]	; 0x28
 800faf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800faf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faf4:	6013      	str	r3, [r2, #0]
 800faf6:	f7ff ba6b 	b.w	800efd0 <_strtod_l+0x90>
 800fafa:	2a65      	cmp	r2, #101	; 0x65
 800fafc:	f43f ab5f 	beq.w	800f1be <_strtod_l+0x27e>
 800fb00:	2a45      	cmp	r2, #69	; 0x45
 800fb02:	f43f ab5c 	beq.w	800f1be <_strtod_l+0x27e>
 800fb06:	2301      	movs	r3, #1
 800fb08:	f7ff bb94 	b.w	800f234 <_strtod_l+0x2f4>
 800fb0c:	f3af 8000 	nop.w
 800fb10:	94a03595 	.word	0x94a03595
 800fb14:	3fdfffff 	.word	0x3fdfffff
 800fb18:	35afe535 	.word	0x35afe535
 800fb1c:	3fe00000 	.word	0x3fe00000
 800fb20:	ffc00000 	.word	0xffc00000
 800fb24:	41dfffff 	.word	0x41dfffff
 800fb28:	94a03595 	.word	0x94a03595
 800fb2c:	3fcfffff 	.word	0x3fcfffff
 800fb30:	3ff00000 	.word	0x3ff00000
 800fb34:	7ff00000 	.word	0x7ff00000
 800fb38:	7fe00000 	.word	0x7fe00000
 800fb3c:	7c9fffff 	.word	0x7c9fffff
 800fb40:	3fe00000 	.word	0x3fe00000
 800fb44:	bff00000 	.word	0xbff00000
 800fb48:	7fefffff 	.word	0x7fefffff

0800fb4c <_strtod_r>:
 800fb4c:	4b01      	ldr	r3, [pc, #4]	; (800fb54 <_strtod_r+0x8>)
 800fb4e:	f7ff b9f7 	b.w	800ef40 <_strtod_l>
 800fb52:	bf00      	nop
 800fb54:	200000b4 	.word	0x200000b4

0800fb58 <strtod>:
 800fb58:	460a      	mov	r2, r1
 800fb5a:	4601      	mov	r1, r0
 800fb5c:	4802      	ldr	r0, [pc, #8]	; (800fb68 <strtod+0x10>)
 800fb5e:	4b03      	ldr	r3, [pc, #12]	; (800fb6c <strtod+0x14>)
 800fb60:	6800      	ldr	r0, [r0, #0]
 800fb62:	f7ff b9ed 	b.w	800ef40 <_strtod_l>
 800fb66:	bf00      	nop
 800fb68:	2000004c 	.word	0x2000004c
 800fb6c:	200000b4 	.word	0x200000b4

0800fb70 <_strtol_l.constprop.0>:
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb76:	d001      	beq.n	800fb7c <_strtol_l.constprop.0+0xc>
 800fb78:	2b24      	cmp	r3, #36	; 0x24
 800fb7a:	d906      	bls.n	800fb8a <_strtol_l.constprop.0+0x1a>
 800fb7c:	f7fe fa56 	bl	800e02c <__errno>
 800fb80:	2316      	movs	r3, #22
 800fb82:	6003      	str	r3, [r0, #0]
 800fb84:	2000      	movs	r0, #0
 800fb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fc70 <_strtol_l.constprop.0+0x100>
 800fb8e:	460d      	mov	r5, r1
 800fb90:	462e      	mov	r6, r5
 800fb92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb96:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fb9a:	f017 0708 	ands.w	r7, r7, #8
 800fb9e:	d1f7      	bne.n	800fb90 <_strtol_l.constprop.0+0x20>
 800fba0:	2c2d      	cmp	r4, #45	; 0x2d
 800fba2:	d132      	bne.n	800fc0a <_strtol_l.constprop.0+0x9a>
 800fba4:	782c      	ldrb	r4, [r5, #0]
 800fba6:	2701      	movs	r7, #1
 800fba8:	1cb5      	adds	r5, r6, #2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d05b      	beq.n	800fc66 <_strtol_l.constprop.0+0xf6>
 800fbae:	2b10      	cmp	r3, #16
 800fbb0:	d109      	bne.n	800fbc6 <_strtol_l.constprop.0+0x56>
 800fbb2:	2c30      	cmp	r4, #48	; 0x30
 800fbb4:	d107      	bne.n	800fbc6 <_strtol_l.constprop.0+0x56>
 800fbb6:	782c      	ldrb	r4, [r5, #0]
 800fbb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fbbc:	2c58      	cmp	r4, #88	; 0x58
 800fbbe:	d14d      	bne.n	800fc5c <_strtol_l.constprop.0+0xec>
 800fbc0:	786c      	ldrb	r4, [r5, #1]
 800fbc2:	2310      	movs	r3, #16
 800fbc4:	3502      	adds	r5, #2
 800fbc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fbca:	f108 38ff 	add.w	r8, r8, #4294967295
 800fbce:	f04f 0c00 	mov.w	ip, #0
 800fbd2:	fbb8 f9f3 	udiv	r9, r8, r3
 800fbd6:	4666      	mov	r6, ip
 800fbd8:	fb03 8a19 	mls	sl, r3, r9, r8
 800fbdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fbe0:	f1be 0f09 	cmp.w	lr, #9
 800fbe4:	d816      	bhi.n	800fc14 <_strtol_l.constprop.0+0xa4>
 800fbe6:	4674      	mov	r4, lr
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	dd24      	ble.n	800fc36 <_strtol_l.constprop.0+0xc6>
 800fbec:	f1bc 0f00 	cmp.w	ip, #0
 800fbf0:	db1e      	blt.n	800fc30 <_strtol_l.constprop.0+0xc0>
 800fbf2:	45b1      	cmp	r9, r6
 800fbf4:	d31c      	bcc.n	800fc30 <_strtol_l.constprop.0+0xc0>
 800fbf6:	d101      	bne.n	800fbfc <_strtol_l.constprop.0+0x8c>
 800fbf8:	45a2      	cmp	sl, r4
 800fbfa:	db19      	blt.n	800fc30 <_strtol_l.constprop.0+0xc0>
 800fbfc:	fb06 4603 	mla	r6, r6, r3, r4
 800fc00:	f04f 0c01 	mov.w	ip, #1
 800fc04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc08:	e7e8      	b.n	800fbdc <_strtol_l.constprop.0+0x6c>
 800fc0a:	2c2b      	cmp	r4, #43	; 0x2b
 800fc0c:	bf04      	itt	eq
 800fc0e:	782c      	ldrbeq	r4, [r5, #0]
 800fc10:	1cb5      	addeq	r5, r6, #2
 800fc12:	e7ca      	b.n	800fbaa <_strtol_l.constprop.0+0x3a>
 800fc14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fc18:	f1be 0f19 	cmp.w	lr, #25
 800fc1c:	d801      	bhi.n	800fc22 <_strtol_l.constprop.0+0xb2>
 800fc1e:	3c37      	subs	r4, #55	; 0x37
 800fc20:	e7e2      	b.n	800fbe8 <_strtol_l.constprop.0+0x78>
 800fc22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fc26:	f1be 0f19 	cmp.w	lr, #25
 800fc2a:	d804      	bhi.n	800fc36 <_strtol_l.constprop.0+0xc6>
 800fc2c:	3c57      	subs	r4, #87	; 0x57
 800fc2e:	e7db      	b.n	800fbe8 <_strtol_l.constprop.0+0x78>
 800fc30:	f04f 3cff 	mov.w	ip, #4294967295
 800fc34:	e7e6      	b.n	800fc04 <_strtol_l.constprop.0+0x94>
 800fc36:	f1bc 0f00 	cmp.w	ip, #0
 800fc3a:	da05      	bge.n	800fc48 <_strtol_l.constprop.0+0xd8>
 800fc3c:	2322      	movs	r3, #34	; 0x22
 800fc3e:	6003      	str	r3, [r0, #0]
 800fc40:	4646      	mov	r6, r8
 800fc42:	b942      	cbnz	r2, 800fc56 <_strtol_l.constprop.0+0xe6>
 800fc44:	4630      	mov	r0, r6
 800fc46:	e79e      	b.n	800fb86 <_strtol_l.constprop.0+0x16>
 800fc48:	b107      	cbz	r7, 800fc4c <_strtol_l.constprop.0+0xdc>
 800fc4a:	4276      	negs	r6, r6
 800fc4c:	2a00      	cmp	r2, #0
 800fc4e:	d0f9      	beq.n	800fc44 <_strtol_l.constprop.0+0xd4>
 800fc50:	f1bc 0f00 	cmp.w	ip, #0
 800fc54:	d000      	beq.n	800fc58 <_strtol_l.constprop.0+0xe8>
 800fc56:	1e69      	subs	r1, r5, #1
 800fc58:	6011      	str	r1, [r2, #0]
 800fc5a:	e7f3      	b.n	800fc44 <_strtol_l.constprop.0+0xd4>
 800fc5c:	2430      	movs	r4, #48	; 0x30
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1b1      	bne.n	800fbc6 <_strtol_l.constprop.0+0x56>
 800fc62:	2308      	movs	r3, #8
 800fc64:	e7af      	b.n	800fbc6 <_strtol_l.constprop.0+0x56>
 800fc66:	2c30      	cmp	r4, #48	; 0x30
 800fc68:	d0a5      	beq.n	800fbb6 <_strtol_l.constprop.0+0x46>
 800fc6a:	230a      	movs	r3, #10
 800fc6c:	e7ab      	b.n	800fbc6 <_strtol_l.constprop.0+0x56>
 800fc6e:	bf00      	nop
 800fc70:	08014281 	.word	0x08014281

0800fc74 <_strtol_r>:
 800fc74:	f7ff bf7c 	b.w	800fb70 <_strtol_l.constprop.0>

0800fc78 <strtol>:
 800fc78:	4613      	mov	r3, r2
 800fc7a:	460a      	mov	r2, r1
 800fc7c:	4601      	mov	r1, r0
 800fc7e:	4802      	ldr	r0, [pc, #8]	; (800fc88 <strtol+0x10>)
 800fc80:	6800      	ldr	r0, [r0, #0]
 800fc82:	f7ff bf75 	b.w	800fb70 <_strtol_l.constprop.0>
 800fc86:	bf00      	nop
 800fc88:	2000004c 	.word	0x2000004c

0800fc8c <__swbuf_r>:
 800fc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc8e:	460e      	mov	r6, r1
 800fc90:	4614      	mov	r4, r2
 800fc92:	4605      	mov	r5, r0
 800fc94:	b118      	cbz	r0, 800fc9e <__swbuf_r+0x12>
 800fc96:	6983      	ldr	r3, [r0, #24]
 800fc98:	b90b      	cbnz	r3, 800fc9e <__swbuf_r+0x12>
 800fc9a:	f001 f84d 	bl	8010d38 <__sinit>
 800fc9e:	4b21      	ldr	r3, [pc, #132]	; (800fd24 <__swbuf_r+0x98>)
 800fca0:	429c      	cmp	r4, r3
 800fca2:	d12b      	bne.n	800fcfc <__swbuf_r+0x70>
 800fca4:	686c      	ldr	r4, [r5, #4]
 800fca6:	69a3      	ldr	r3, [r4, #24]
 800fca8:	60a3      	str	r3, [r4, #8]
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	071a      	lsls	r2, r3, #28
 800fcae:	d52f      	bpl.n	800fd10 <__swbuf_r+0x84>
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	b36b      	cbz	r3, 800fd10 <__swbuf_r+0x84>
 800fcb4:	6923      	ldr	r3, [r4, #16]
 800fcb6:	6820      	ldr	r0, [r4, #0]
 800fcb8:	1ac0      	subs	r0, r0, r3
 800fcba:	6963      	ldr	r3, [r4, #20]
 800fcbc:	b2f6      	uxtb	r6, r6
 800fcbe:	4283      	cmp	r3, r0
 800fcc0:	4637      	mov	r7, r6
 800fcc2:	dc04      	bgt.n	800fcce <__swbuf_r+0x42>
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f000 ffa2 	bl	8010c10 <_fflush_r>
 800fccc:	bb30      	cbnz	r0, 800fd1c <__swbuf_r+0x90>
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	60a3      	str	r3, [r4, #8]
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	1c5a      	adds	r2, r3, #1
 800fcd8:	6022      	str	r2, [r4, #0]
 800fcda:	701e      	strb	r6, [r3, #0]
 800fcdc:	6963      	ldr	r3, [r4, #20]
 800fcde:	3001      	adds	r0, #1
 800fce0:	4283      	cmp	r3, r0
 800fce2:	d004      	beq.n	800fcee <__swbuf_r+0x62>
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	07db      	lsls	r3, r3, #31
 800fce8:	d506      	bpl.n	800fcf8 <__swbuf_r+0x6c>
 800fcea:	2e0a      	cmp	r6, #10
 800fcec:	d104      	bne.n	800fcf8 <__swbuf_r+0x6c>
 800fcee:	4621      	mov	r1, r4
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	f000 ff8d 	bl	8010c10 <_fflush_r>
 800fcf6:	b988      	cbnz	r0, 800fd1c <__swbuf_r+0x90>
 800fcf8:	4638      	mov	r0, r7
 800fcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcfc:	4b0a      	ldr	r3, [pc, #40]	; (800fd28 <__swbuf_r+0x9c>)
 800fcfe:	429c      	cmp	r4, r3
 800fd00:	d101      	bne.n	800fd06 <__swbuf_r+0x7a>
 800fd02:	68ac      	ldr	r4, [r5, #8]
 800fd04:	e7cf      	b.n	800fca6 <__swbuf_r+0x1a>
 800fd06:	4b09      	ldr	r3, [pc, #36]	; (800fd2c <__swbuf_r+0xa0>)
 800fd08:	429c      	cmp	r4, r3
 800fd0a:	bf08      	it	eq
 800fd0c:	68ec      	ldreq	r4, [r5, #12]
 800fd0e:	e7ca      	b.n	800fca6 <__swbuf_r+0x1a>
 800fd10:	4621      	mov	r1, r4
 800fd12:	4628      	mov	r0, r5
 800fd14:	f000 f80c 	bl	800fd30 <__swsetup_r>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d0cb      	beq.n	800fcb4 <__swbuf_r+0x28>
 800fd1c:	f04f 37ff 	mov.w	r7, #4294967295
 800fd20:	e7ea      	b.n	800fcf8 <__swbuf_r+0x6c>
 800fd22:	bf00      	nop
 800fd24:	08014434 	.word	0x08014434
 800fd28:	08014454 	.word	0x08014454
 800fd2c:	08014414 	.word	0x08014414

0800fd30 <__swsetup_r>:
 800fd30:	4b32      	ldr	r3, [pc, #200]	; (800fdfc <__swsetup_r+0xcc>)
 800fd32:	b570      	push	{r4, r5, r6, lr}
 800fd34:	681d      	ldr	r5, [r3, #0]
 800fd36:	4606      	mov	r6, r0
 800fd38:	460c      	mov	r4, r1
 800fd3a:	b125      	cbz	r5, 800fd46 <__swsetup_r+0x16>
 800fd3c:	69ab      	ldr	r3, [r5, #24]
 800fd3e:	b913      	cbnz	r3, 800fd46 <__swsetup_r+0x16>
 800fd40:	4628      	mov	r0, r5
 800fd42:	f000 fff9 	bl	8010d38 <__sinit>
 800fd46:	4b2e      	ldr	r3, [pc, #184]	; (800fe00 <__swsetup_r+0xd0>)
 800fd48:	429c      	cmp	r4, r3
 800fd4a:	d10f      	bne.n	800fd6c <__swsetup_r+0x3c>
 800fd4c:	686c      	ldr	r4, [r5, #4]
 800fd4e:	89a3      	ldrh	r3, [r4, #12]
 800fd50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd54:	0719      	lsls	r1, r3, #28
 800fd56:	d42c      	bmi.n	800fdb2 <__swsetup_r+0x82>
 800fd58:	06dd      	lsls	r5, r3, #27
 800fd5a:	d411      	bmi.n	800fd80 <__swsetup_r+0x50>
 800fd5c:	2309      	movs	r3, #9
 800fd5e:	6033      	str	r3, [r6, #0]
 800fd60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	f04f 30ff 	mov.w	r0, #4294967295
 800fd6a:	e03e      	b.n	800fdea <__swsetup_r+0xba>
 800fd6c:	4b25      	ldr	r3, [pc, #148]	; (800fe04 <__swsetup_r+0xd4>)
 800fd6e:	429c      	cmp	r4, r3
 800fd70:	d101      	bne.n	800fd76 <__swsetup_r+0x46>
 800fd72:	68ac      	ldr	r4, [r5, #8]
 800fd74:	e7eb      	b.n	800fd4e <__swsetup_r+0x1e>
 800fd76:	4b24      	ldr	r3, [pc, #144]	; (800fe08 <__swsetup_r+0xd8>)
 800fd78:	429c      	cmp	r4, r3
 800fd7a:	bf08      	it	eq
 800fd7c:	68ec      	ldreq	r4, [r5, #12]
 800fd7e:	e7e6      	b.n	800fd4e <__swsetup_r+0x1e>
 800fd80:	0758      	lsls	r0, r3, #29
 800fd82:	d512      	bpl.n	800fdaa <__swsetup_r+0x7a>
 800fd84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd86:	b141      	cbz	r1, 800fd9a <__swsetup_r+0x6a>
 800fd88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd8c:	4299      	cmp	r1, r3
 800fd8e:	d002      	beq.n	800fd96 <__swsetup_r+0x66>
 800fd90:	4630      	mov	r0, r6
 800fd92:	f002 f93b 	bl	801200c <_free_r>
 800fd96:	2300      	movs	r3, #0
 800fd98:	6363      	str	r3, [r4, #52]	; 0x34
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fda0:	81a3      	strh	r3, [r4, #12]
 800fda2:	2300      	movs	r3, #0
 800fda4:	6063      	str	r3, [r4, #4]
 800fda6:	6923      	ldr	r3, [r4, #16]
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f043 0308 	orr.w	r3, r3, #8
 800fdb0:	81a3      	strh	r3, [r4, #12]
 800fdb2:	6923      	ldr	r3, [r4, #16]
 800fdb4:	b94b      	cbnz	r3, 800fdca <__swsetup_r+0x9a>
 800fdb6:	89a3      	ldrh	r3, [r4, #12]
 800fdb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fdbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdc0:	d003      	beq.n	800fdca <__swsetup_r+0x9a>
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f001 fbef 	bl	80115a8 <__smakebuf_r>
 800fdca:	89a0      	ldrh	r0, [r4, #12]
 800fdcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdd0:	f010 0301 	ands.w	r3, r0, #1
 800fdd4:	d00a      	beq.n	800fdec <__swsetup_r+0xbc>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	60a3      	str	r3, [r4, #8]
 800fdda:	6963      	ldr	r3, [r4, #20]
 800fddc:	425b      	negs	r3, r3
 800fdde:	61a3      	str	r3, [r4, #24]
 800fde0:	6923      	ldr	r3, [r4, #16]
 800fde2:	b943      	cbnz	r3, 800fdf6 <__swsetup_r+0xc6>
 800fde4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fde8:	d1ba      	bne.n	800fd60 <__swsetup_r+0x30>
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	0781      	lsls	r1, r0, #30
 800fdee:	bf58      	it	pl
 800fdf0:	6963      	ldrpl	r3, [r4, #20]
 800fdf2:	60a3      	str	r3, [r4, #8]
 800fdf4:	e7f4      	b.n	800fde0 <__swsetup_r+0xb0>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	e7f7      	b.n	800fdea <__swsetup_r+0xba>
 800fdfa:	bf00      	nop
 800fdfc:	2000004c 	.word	0x2000004c
 800fe00:	08014434 	.word	0x08014434
 800fe04:	08014454 	.word	0x08014454
 800fe08:	08014414 	.word	0x08014414

0800fe0c <quorem>:
 800fe0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe10:	6903      	ldr	r3, [r0, #16]
 800fe12:	690c      	ldr	r4, [r1, #16]
 800fe14:	42a3      	cmp	r3, r4
 800fe16:	4607      	mov	r7, r0
 800fe18:	f2c0 8081 	blt.w	800ff1e <quorem+0x112>
 800fe1c:	3c01      	subs	r4, #1
 800fe1e:	f101 0814 	add.w	r8, r1, #20
 800fe22:	f100 0514 	add.w	r5, r0, #20
 800fe26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe34:	3301      	adds	r3, #1
 800fe36:	429a      	cmp	r2, r3
 800fe38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe40:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe44:	d331      	bcc.n	800feaa <quorem+0x9e>
 800fe46:	f04f 0e00 	mov.w	lr, #0
 800fe4a:	4640      	mov	r0, r8
 800fe4c:	46ac      	mov	ip, r5
 800fe4e:	46f2      	mov	sl, lr
 800fe50:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe54:	b293      	uxth	r3, r2
 800fe56:	fb06 e303 	mla	r3, r6, r3, lr
 800fe5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	ebaa 0303 	sub.w	r3, sl, r3
 800fe64:	f8dc a000 	ldr.w	sl, [ip]
 800fe68:	0c12      	lsrs	r2, r2, #16
 800fe6a:	fa13 f38a 	uxtah	r3, r3, sl
 800fe6e:	fb06 e202 	mla	r2, r6, r2, lr
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	9b00      	ldr	r3, [sp, #0]
 800fe76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe7a:	b292      	uxth	r2, r2
 800fe7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe84:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe88:	4581      	cmp	r9, r0
 800fe8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe8e:	f84c 3b04 	str.w	r3, [ip], #4
 800fe92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe96:	d2db      	bcs.n	800fe50 <quorem+0x44>
 800fe98:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe9c:	b92b      	cbnz	r3, 800feaa <quorem+0x9e>
 800fe9e:	9b01      	ldr	r3, [sp, #4]
 800fea0:	3b04      	subs	r3, #4
 800fea2:	429d      	cmp	r5, r3
 800fea4:	461a      	mov	r2, r3
 800fea6:	d32e      	bcc.n	800ff06 <quorem+0xfa>
 800fea8:	613c      	str	r4, [r7, #16]
 800feaa:	4638      	mov	r0, r7
 800feac:	f001 fea2 	bl	8011bf4 <__mcmp>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	db24      	blt.n	800fefe <quorem+0xf2>
 800feb4:	3601      	adds	r6, #1
 800feb6:	4628      	mov	r0, r5
 800feb8:	f04f 0c00 	mov.w	ip, #0
 800febc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fec0:	f8d0 e000 	ldr.w	lr, [r0]
 800fec4:	b293      	uxth	r3, r2
 800fec6:	ebac 0303 	sub.w	r3, ip, r3
 800feca:	0c12      	lsrs	r2, r2, #16
 800fecc:	fa13 f38e 	uxtah	r3, r3, lr
 800fed0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fed8:	b29b      	uxth	r3, r3
 800feda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fede:	45c1      	cmp	r9, r8
 800fee0:	f840 3b04 	str.w	r3, [r0], #4
 800fee4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fee8:	d2e8      	bcs.n	800febc <quorem+0xb0>
 800feea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800feee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fef2:	b922      	cbnz	r2, 800fefe <quorem+0xf2>
 800fef4:	3b04      	subs	r3, #4
 800fef6:	429d      	cmp	r5, r3
 800fef8:	461a      	mov	r2, r3
 800fefa:	d30a      	bcc.n	800ff12 <quorem+0x106>
 800fefc:	613c      	str	r4, [r7, #16]
 800fefe:	4630      	mov	r0, r6
 800ff00:	b003      	add	sp, #12
 800ff02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff06:	6812      	ldr	r2, [r2, #0]
 800ff08:	3b04      	subs	r3, #4
 800ff0a:	2a00      	cmp	r2, #0
 800ff0c:	d1cc      	bne.n	800fea8 <quorem+0x9c>
 800ff0e:	3c01      	subs	r4, #1
 800ff10:	e7c7      	b.n	800fea2 <quorem+0x96>
 800ff12:	6812      	ldr	r2, [r2, #0]
 800ff14:	3b04      	subs	r3, #4
 800ff16:	2a00      	cmp	r2, #0
 800ff18:	d1f0      	bne.n	800fefc <quorem+0xf0>
 800ff1a:	3c01      	subs	r4, #1
 800ff1c:	e7eb      	b.n	800fef6 <quorem+0xea>
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e7ee      	b.n	800ff00 <quorem+0xf4>
 800ff22:	0000      	movs	r0, r0
 800ff24:	0000      	movs	r0, r0
	...

0800ff28 <_dtoa_r>:
 800ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff2c:	ed2d 8b04 	vpush	{d8-d9}
 800ff30:	ec57 6b10 	vmov	r6, r7, d0
 800ff34:	b093      	sub	sp, #76	; 0x4c
 800ff36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ff3c:	9106      	str	r1, [sp, #24]
 800ff3e:	ee10 aa10 	vmov	sl, s0
 800ff42:	4604      	mov	r4, r0
 800ff44:	9209      	str	r2, [sp, #36]	; 0x24
 800ff46:	930c      	str	r3, [sp, #48]	; 0x30
 800ff48:	46bb      	mov	fp, r7
 800ff4a:	b975      	cbnz	r5, 800ff6a <_dtoa_r+0x42>
 800ff4c:	2010      	movs	r0, #16
 800ff4e:	f001 fb6b 	bl	8011628 <malloc>
 800ff52:	4602      	mov	r2, r0
 800ff54:	6260      	str	r0, [r4, #36]	; 0x24
 800ff56:	b920      	cbnz	r0, 800ff62 <_dtoa_r+0x3a>
 800ff58:	4ba7      	ldr	r3, [pc, #668]	; (80101f8 <_dtoa_r+0x2d0>)
 800ff5a:	21ea      	movs	r1, #234	; 0xea
 800ff5c:	48a7      	ldr	r0, [pc, #668]	; (80101fc <_dtoa_r+0x2d4>)
 800ff5e:	f002 fc79 	bl	8012854 <__assert_func>
 800ff62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff66:	6005      	str	r5, [r0, #0]
 800ff68:	60c5      	str	r5, [r0, #12]
 800ff6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff6c:	6819      	ldr	r1, [r3, #0]
 800ff6e:	b151      	cbz	r1, 800ff86 <_dtoa_r+0x5e>
 800ff70:	685a      	ldr	r2, [r3, #4]
 800ff72:	604a      	str	r2, [r1, #4]
 800ff74:	2301      	movs	r3, #1
 800ff76:	4093      	lsls	r3, r2
 800ff78:	608b      	str	r3, [r1, #8]
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f001 fbae 	bl	80116dc <_Bfree>
 800ff80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff82:	2200      	movs	r2, #0
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	1e3b      	subs	r3, r7, #0
 800ff88:	bfaa      	itet	ge
 800ff8a:	2300      	movge	r3, #0
 800ff8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ff90:	f8c8 3000 	strge.w	r3, [r8]
 800ff94:	4b9a      	ldr	r3, [pc, #616]	; (8010200 <_dtoa_r+0x2d8>)
 800ff96:	bfbc      	itt	lt
 800ff98:	2201      	movlt	r2, #1
 800ff9a:	f8c8 2000 	strlt.w	r2, [r8]
 800ff9e:	ea33 030b 	bics.w	r3, r3, fp
 800ffa2:	d11b      	bne.n	800ffdc <_dtoa_r+0xb4>
 800ffa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffa6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ffaa:	6013      	str	r3, [r2, #0]
 800ffac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffb0:	4333      	orrs	r3, r6
 800ffb2:	f000 8592 	beq.w	8010ada <_dtoa_r+0xbb2>
 800ffb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffb8:	b963      	cbnz	r3, 800ffd4 <_dtoa_r+0xac>
 800ffba:	4b92      	ldr	r3, [pc, #584]	; (8010204 <_dtoa_r+0x2dc>)
 800ffbc:	e022      	b.n	8010004 <_dtoa_r+0xdc>
 800ffbe:	4b92      	ldr	r3, [pc, #584]	; (8010208 <_dtoa_r+0x2e0>)
 800ffc0:	9301      	str	r3, [sp, #4]
 800ffc2:	3308      	adds	r3, #8
 800ffc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffc6:	6013      	str	r3, [r2, #0]
 800ffc8:	9801      	ldr	r0, [sp, #4]
 800ffca:	b013      	add	sp, #76	; 0x4c
 800ffcc:	ecbd 8b04 	vpop	{d8-d9}
 800ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd4:	4b8b      	ldr	r3, [pc, #556]	; (8010204 <_dtoa_r+0x2dc>)
 800ffd6:	9301      	str	r3, [sp, #4]
 800ffd8:	3303      	adds	r3, #3
 800ffda:	e7f3      	b.n	800ffc4 <_dtoa_r+0x9c>
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2300      	movs	r3, #0
 800ffe0:	4650      	mov	r0, sl
 800ffe2:	4659      	mov	r1, fp
 800ffe4:	f7f0 fd98 	bl	8000b18 <__aeabi_dcmpeq>
 800ffe8:	ec4b ab19 	vmov	d9, sl, fp
 800ffec:	4680      	mov	r8, r0
 800ffee:	b158      	cbz	r0, 8010008 <_dtoa_r+0xe0>
 800fff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fff2:	2301      	movs	r3, #1
 800fff4:	6013      	str	r3, [r2, #0]
 800fff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f000 856b 	beq.w	8010ad4 <_dtoa_r+0xbac>
 800fffe:	4883      	ldr	r0, [pc, #524]	; (801020c <_dtoa_r+0x2e4>)
 8010000:	6018      	str	r0, [r3, #0]
 8010002:	1e43      	subs	r3, r0, #1
 8010004:	9301      	str	r3, [sp, #4]
 8010006:	e7df      	b.n	800ffc8 <_dtoa_r+0xa0>
 8010008:	ec4b ab10 	vmov	d0, sl, fp
 801000c:	aa10      	add	r2, sp, #64	; 0x40
 801000e:	a911      	add	r1, sp, #68	; 0x44
 8010010:	4620      	mov	r0, r4
 8010012:	f001 ff11 	bl	8011e38 <__d2b>
 8010016:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801001a:	ee08 0a10 	vmov	s16, r0
 801001e:	2d00      	cmp	r5, #0
 8010020:	f000 8084 	beq.w	801012c <_dtoa_r+0x204>
 8010024:	ee19 3a90 	vmov	r3, s19
 8010028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801002c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010030:	4656      	mov	r6, sl
 8010032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801003a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801003e:	4b74      	ldr	r3, [pc, #464]	; (8010210 <_dtoa_r+0x2e8>)
 8010040:	2200      	movs	r2, #0
 8010042:	4630      	mov	r0, r6
 8010044:	4639      	mov	r1, r7
 8010046:	f7f0 f947 	bl	80002d8 <__aeabi_dsub>
 801004a:	a365      	add	r3, pc, #404	; (adr r3, 80101e0 <_dtoa_r+0x2b8>)
 801004c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010050:	f7f0 fafa 	bl	8000648 <__aeabi_dmul>
 8010054:	a364      	add	r3, pc, #400	; (adr r3, 80101e8 <_dtoa_r+0x2c0>)
 8010056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005a:	f7f0 f93f 	bl	80002dc <__adddf3>
 801005e:	4606      	mov	r6, r0
 8010060:	4628      	mov	r0, r5
 8010062:	460f      	mov	r7, r1
 8010064:	f7f0 fa86 	bl	8000574 <__aeabi_i2d>
 8010068:	a361      	add	r3, pc, #388	; (adr r3, 80101f0 <_dtoa_r+0x2c8>)
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	f7f0 faeb 	bl	8000648 <__aeabi_dmul>
 8010072:	4602      	mov	r2, r0
 8010074:	460b      	mov	r3, r1
 8010076:	4630      	mov	r0, r6
 8010078:	4639      	mov	r1, r7
 801007a:	f7f0 f92f 	bl	80002dc <__adddf3>
 801007e:	4606      	mov	r6, r0
 8010080:	460f      	mov	r7, r1
 8010082:	f7f0 fd91 	bl	8000ba8 <__aeabi_d2iz>
 8010086:	2200      	movs	r2, #0
 8010088:	9000      	str	r0, [sp, #0]
 801008a:	2300      	movs	r3, #0
 801008c:	4630      	mov	r0, r6
 801008e:	4639      	mov	r1, r7
 8010090:	f7f0 fd4c 	bl	8000b2c <__aeabi_dcmplt>
 8010094:	b150      	cbz	r0, 80100ac <_dtoa_r+0x184>
 8010096:	9800      	ldr	r0, [sp, #0]
 8010098:	f7f0 fa6c 	bl	8000574 <__aeabi_i2d>
 801009c:	4632      	mov	r2, r6
 801009e:	463b      	mov	r3, r7
 80100a0:	f7f0 fd3a 	bl	8000b18 <__aeabi_dcmpeq>
 80100a4:	b910      	cbnz	r0, 80100ac <_dtoa_r+0x184>
 80100a6:	9b00      	ldr	r3, [sp, #0]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	9b00      	ldr	r3, [sp, #0]
 80100ae:	2b16      	cmp	r3, #22
 80100b0:	d85a      	bhi.n	8010168 <_dtoa_r+0x240>
 80100b2:	9a00      	ldr	r2, [sp, #0]
 80100b4:	4b57      	ldr	r3, [pc, #348]	; (8010214 <_dtoa_r+0x2ec>)
 80100b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100be:	ec51 0b19 	vmov	r0, r1, d9
 80100c2:	f7f0 fd33 	bl	8000b2c <__aeabi_dcmplt>
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d050      	beq.n	801016c <_dtoa_r+0x244>
 80100ca:	9b00      	ldr	r3, [sp, #0]
 80100cc:	3b01      	subs	r3, #1
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	2300      	movs	r3, #0
 80100d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80100d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100d6:	1b5d      	subs	r5, r3, r5
 80100d8:	1e6b      	subs	r3, r5, #1
 80100da:	9305      	str	r3, [sp, #20]
 80100dc:	bf45      	ittet	mi
 80100de:	f1c5 0301 	rsbmi	r3, r5, #1
 80100e2:	9304      	strmi	r3, [sp, #16]
 80100e4:	2300      	movpl	r3, #0
 80100e6:	2300      	movmi	r3, #0
 80100e8:	bf4c      	ite	mi
 80100ea:	9305      	strmi	r3, [sp, #20]
 80100ec:	9304      	strpl	r3, [sp, #16]
 80100ee:	9b00      	ldr	r3, [sp, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	db3d      	blt.n	8010170 <_dtoa_r+0x248>
 80100f4:	9b05      	ldr	r3, [sp, #20]
 80100f6:	9a00      	ldr	r2, [sp, #0]
 80100f8:	920a      	str	r2, [sp, #40]	; 0x28
 80100fa:	4413      	add	r3, r2
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	2300      	movs	r3, #0
 8010100:	9307      	str	r3, [sp, #28]
 8010102:	9b06      	ldr	r3, [sp, #24]
 8010104:	2b09      	cmp	r3, #9
 8010106:	f200 8089 	bhi.w	801021c <_dtoa_r+0x2f4>
 801010a:	2b05      	cmp	r3, #5
 801010c:	bfc4      	itt	gt
 801010e:	3b04      	subgt	r3, #4
 8010110:	9306      	strgt	r3, [sp, #24]
 8010112:	9b06      	ldr	r3, [sp, #24]
 8010114:	f1a3 0302 	sub.w	r3, r3, #2
 8010118:	bfcc      	ite	gt
 801011a:	2500      	movgt	r5, #0
 801011c:	2501      	movle	r5, #1
 801011e:	2b03      	cmp	r3, #3
 8010120:	f200 8087 	bhi.w	8010232 <_dtoa_r+0x30a>
 8010124:	e8df f003 	tbb	[pc, r3]
 8010128:	59383a2d 	.word	0x59383a2d
 801012c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010130:	441d      	add	r5, r3
 8010132:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010136:	2b20      	cmp	r3, #32
 8010138:	bfc1      	itttt	gt
 801013a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801013e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010142:	fa0b f303 	lslgt.w	r3, fp, r3
 8010146:	fa26 f000 	lsrgt.w	r0, r6, r0
 801014a:	bfda      	itte	le
 801014c:	f1c3 0320 	rsble	r3, r3, #32
 8010150:	fa06 f003 	lslle.w	r0, r6, r3
 8010154:	4318      	orrgt	r0, r3
 8010156:	f7f0 f9fd 	bl	8000554 <__aeabi_ui2d>
 801015a:	2301      	movs	r3, #1
 801015c:	4606      	mov	r6, r0
 801015e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010162:	3d01      	subs	r5, #1
 8010164:	930e      	str	r3, [sp, #56]	; 0x38
 8010166:	e76a      	b.n	801003e <_dtoa_r+0x116>
 8010168:	2301      	movs	r3, #1
 801016a:	e7b2      	b.n	80100d2 <_dtoa_r+0x1aa>
 801016c:	900b      	str	r0, [sp, #44]	; 0x2c
 801016e:	e7b1      	b.n	80100d4 <_dtoa_r+0x1ac>
 8010170:	9b04      	ldr	r3, [sp, #16]
 8010172:	9a00      	ldr	r2, [sp, #0]
 8010174:	1a9b      	subs	r3, r3, r2
 8010176:	9304      	str	r3, [sp, #16]
 8010178:	4253      	negs	r3, r2
 801017a:	9307      	str	r3, [sp, #28]
 801017c:	2300      	movs	r3, #0
 801017e:	930a      	str	r3, [sp, #40]	; 0x28
 8010180:	e7bf      	b.n	8010102 <_dtoa_r+0x1da>
 8010182:	2300      	movs	r3, #0
 8010184:	9308      	str	r3, [sp, #32]
 8010186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010188:	2b00      	cmp	r3, #0
 801018a:	dc55      	bgt.n	8010238 <_dtoa_r+0x310>
 801018c:	2301      	movs	r3, #1
 801018e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010192:	461a      	mov	r2, r3
 8010194:	9209      	str	r2, [sp, #36]	; 0x24
 8010196:	e00c      	b.n	80101b2 <_dtoa_r+0x28a>
 8010198:	2301      	movs	r3, #1
 801019a:	e7f3      	b.n	8010184 <_dtoa_r+0x25c>
 801019c:	2300      	movs	r3, #0
 801019e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101a0:	9308      	str	r3, [sp, #32]
 80101a2:	9b00      	ldr	r3, [sp, #0]
 80101a4:	4413      	add	r3, r2
 80101a6:	9302      	str	r3, [sp, #8]
 80101a8:	3301      	adds	r3, #1
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	9303      	str	r3, [sp, #12]
 80101ae:	bfb8      	it	lt
 80101b0:	2301      	movlt	r3, #1
 80101b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80101b4:	2200      	movs	r2, #0
 80101b6:	6042      	str	r2, [r0, #4]
 80101b8:	2204      	movs	r2, #4
 80101ba:	f102 0614 	add.w	r6, r2, #20
 80101be:	429e      	cmp	r6, r3
 80101c0:	6841      	ldr	r1, [r0, #4]
 80101c2:	d93d      	bls.n	8010240 <_dtoa_r+0x318>
 80101c4:	4620      	mov	r0, r4
 80101c6:	f001 fa49 	bl	801165c <_Balloc>
 80101ca:	9001      	str	r0, [sp, #4]
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d13b      	bne.n	8010248 <_dtoa_r+0x320>
 80101d0:	4b11      	ldr	r3, [pc, #68]	; (8010218 <_dtoa_r+0x2f0>)
 80101d2:	4602      	mov	r2, r0
 80101d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80101d8:	e6c0      	b.n	800ff5c <_dtoa_r+0x34>
 80101da:	2301      	movs	r3, #1
 80101dc:	e7df      	b.n	801019e <_dtoa_r+0x276>
 80101de:	bf00      	nop
 80101e0:	636f4361 	.word	0x636f4361
 80101e4:	3fd287a7 	.word	0x3fd287a7
 80101e8:	8b60c8b3 	.word	0x8b60c8b3
 80101ec:	3fc68a28 	.word	0x3fc68a28
 80101f0:	509f79fb 	.word	0x509f79fb
 80101f4:	3fd34413 	.word	0x3fd34413
 80101f8:	0801438e 	.word	0x0801438e
 80101fc:	080143a5 	.word	0x080143a5
 8010200:	7ff00000 	.word	0x7ff00000
 8010204:	0801438a 	.word	0x0801438a
 8010208:	08014381 	.word	0x08014381
 801020c:	08014205 	.word	0x08014205
 8010210:	3ff80000 	.word	0x3ff80000
 8010214:	08014578 	.word	0x08014578
 8010218:	08014400 	.word	0x08014400
 801021c:	2501      	movs	r5, #1
 801021e:	2300      	movs	r3, #0
 8010220:	9306      	str	r3, [sp, #24]
 8010222:	9508      	str	r5, [sp, #32]
 8010224:	f04f 33ff 	mov.w	r3, #4294967295
 8010228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801022c:	2200      	movs	r2, #0
 801022e:	2312      	movs	r3, #18
 8010230:	e7b0      	b.n	8010194 <_dtoa_r+0x26c>
 8010232:	2301      	movs	r3, #1
 8010234:	9308      	str	r3, [sp, #32]
 8010236:	e7f5      	b.n	8010224 <_dtoa_r+0x2fc>
 8010238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801023a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801023e:	e7b8      	b.n	80101b2 <_dtoa_r+0x28a>
 8010240:	3101      	adds	r1, #1
 8010242:	6041      	str	r1, [r0, #4]
 8010244:	0052      	lsls	r2, r2, #1
 8010246:	e7b8      	b.n	80101ba <_dtoa_r+0x292>
 8010248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801024a:	9a01      	ldr	r2, [sp, #4]
 801024c:	601a      	str	r2, [r3, #0]
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	2b0e      	cmp	r3, #14
 8010252:	f200 809d 	bhi.w	8010390 <_dtoa_r+0x468>
 8010256:	2d00      	cmp	r5, #0
 8010258:	f000 809a 	beq.w	8010390 <_dtoa_r+0x468>
 801025c:	9b00      	ldr	r3, [sp, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	dd32      	ble.n	80102c8 <_dtoa_r+0x3a0>
 8010262:	4ab7      	ldr	r2, [pc, #732]	; (8010540 <_dtoa_r+0x618>)
 8010264:	f003 030f 	and.w	r3, r3, #15
 8010268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801026c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010270:	9b00      	ldr	r3, [sp, #0]
 8010272:	05d8      	lsls	r0, r3, #23
 8010274:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010278:	d516      	bpl.n	80102a8 <_dtoa_r+0x380>
 801027a:	4bb2      	ldr	r3, [pc, #712]	; (8010544 <_dtoa_r+0x61c>)
 801027c:	ec51 0b19 	vmov	r0, r1, d9
 8010280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010284:	f7f0 fb0a 	bl	800089c <__aeabi_ddiv>
 8010288:	f007 070f 	and.w	r7, r7, #15
 801028c:	4682      	mov	sl, r0
 801028e:	468b      	mov	fp, r1
 8010290:	2503      	movs	r5, #3
 8010292:	4eac      	ldr	r6, [pc, #688]	; (8010544 <_dtoa_r+0x61c>)
 8010294:	b957      	cbnz	r7, 80102ac <_dtoa_r+0x384>
 8010296:	4642      	mov	r2, r8
 8010298:	464b      	mov	r3, r9
 801029a:	4650      	mov	r0, sl
 801029c:	4659      	mov	r1, fp
 801029e:	f7f0 fafd 	bl	800089c <__aeabi_ddiv>
 80102a2:	4682      	mov	sl, r0
 80102a4:	468b      	mov	fp, r1
 80102a6:	e028      	b.n	80102fa <_dtoa_r+0x3d2>
 80102a8:	2502      	movs	r5, #2
 80102aa:	e7f2      	b.n	8010292 <_dtoa_r+0x36a>
 80102ac:	07f9      	lsls	r1, r7, #31
 80102ae:	d508      	bpl.n	80102c2 <_dtoa_r+0x39a>
 80102b0:	4640      	mov	r0, r8
 80102b2:	4649      	mov	r1, r9
 80102b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102b8:	f7f0 f9c6 	bl	8000648 <__aeabi_dmul>
 80102bc:	3501      	adds	r5, #1
 80102be:	4680      	mov	r8, r0
 80102c0:	4689      	mov	r9, r1
 80102c2:	107f      	asrs	r7, r7, #1
 80102c4:	3608      	adds	r6, #8
 80102c6:	e7e5      	b.n	8010294 <_dtoa_r+0x36c>
 80102c8:	f000 809b 	beq.w	8010402 <_dtoa_r+0x4da>
 80102cc:	9b00      	ldr	r3, [sp, #0]
 80102ce:	4f9d      	ldr	r7, [pc, #628]	; (8010544 <_dtoa_r+0x61c>)
 80102d0:	425e      	negs	r6, r3
 80102d2:	4b9b      	ldr	r3, [pc, #620]	; (8010540 <_dtoa_r+0x618>)
 80102d4:	f006 020f 	and.w	r2, r6, #15
 80102d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e0:	ec51 0b19 	vmov	r0, r1, d9
 80102e4:	f7f0 f9b0 	bl	8000648 <__aeabi_dmul>
 80102e8:	1136      	asrs	r6, r6, #4
 80102ea:	4682      	mov	sl, r0
 80102ec:	468b      	mov	fp, r1
 80102ee:	2300      	movs	r3, #0
 80102f0:	2502      	movs	r5, #2
 80102f2:	2e00      	cmp	r6, #0
 80102f4:	d17a      	bne.n	80103ec <_dtoa_r+0x4c4>
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1d3      	bne.n	80102a2 <_dtoa_r+0x37a>
 80102fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 8082 	beq.w	8010406 <_dtoa_r+0x4de>
 8010302:	4b91      	ldr	r3, [pc, #580]	; (8010548 <_dtoa_r+0x620>)
 8010304:	2200      	movs	r2, #0
 8010306:	4650      	mov	r0, sl
 8010308:	4659      	mov	r1, fp
 801030a:	f7f0 fc0f 	bl	8000b2c <__aeabi_dcmplt>
 801030e:	2800      	cmp	r0, #0
 8010310:	d079      	beq.n	8010406 <_dtoa_r+0x4de>
 8010312:	9b03      	ldr	r3, [sp, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d076      	beq.n	8010406 <_dtoa_r+0x4de>
 8010318:	9b02      	ldr	r3, [sp, #8]
 801031a:	2b00      	cmp	r3, #0
 801031c:	dd36      	ble.n	801038c <_dtoa_r+0x464>
 801031e:	9b00      	ldr	r3, [sp, #0]
 8010320:	4650      	mov	r0, sl
 8010322:	4659      	mov	r1, fp
 8010324:	1e5f      	subs	r7, r3, #1
 8010326:	2200      	movs	r2, #0
 8010328:	4b88      	ldr	r3, [pc, #544]	; (801054c <_dtoa_r+0x624>)
 801032a:	f7f0 f98d 	bl	8000648 <__aeabi_dmul>
 801032e:	9e02      	ldr	r6, [sp, #8]
 8010330:	4682      	mov	sl, r0
 8010332:	468b      	mov	fp, r1
 8010334:	3501      	adds	r5, #1
 8010336:	4628      	mov	r0, r5
 8010338:	f7f0 f91c 	bl	8000574 <__aeabi_i2d>
 801033c:	4652      	mov	r2, sl
 801033e:	465b      	mov	r3, fp
 8010340:	f7f0 f982 	bl	8000648 <__aeabi_dmul>
 8010344:	4b82      	ldr	r3, [pc, #520]	; (8010550 <_dtoa_r+0x628>)
 8010346:	2200      	movs	r2, #0
 8010348:	f7ef ffc8 	bl	80002dc <__adddf3>
 801034c:	46d0      	mov	r8, sl
 801034e:	46d9      	mov	r9, fp
 8010350:	4682      	mov	sl, r0
 8010352:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010356:	2e00      	cmp	r6, #0
 8010358:	d158      	bne.n	801040c <_dtoa_r+0x4e4>
 801035a:	4b7e      	ldr	r3, [pc, #504]	; (8010554 <_dtoa_r+0x62c>)
 801035c:	2200      	movs	r2, #0
 801035e:	4640      	mov	r0, r8
 8010360:	4649      	mov	r1, r9
 8010362:	f7ef ffb9 	bl	80002d8 <__aeabi_dsub>
 8010366:	4652      	mov	r2, sl
 8010368:	465b      	mov	r3, fp
 801036a:	4680      	mov	r8, r0
 801036c:	4689      	mov	r9, r1
 801036e:	f7f0 fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8010372:	2800      	cmp	r0, #0
 8010374:	f040 8295 	bne.w	80108a2 <_dtoa_r+0x97a>
 8010378:	4652      	mov	r2, sl
 801037a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801037e:	4640      	mov	r0, r8
 8010380:	4649      	mov	r1, r9
 8010382:	f7f0 fbd3 	bl	8000b2c <__aeabi_dcmplt>
 8010386:	2800      	cmp	r0, #0
 8010388:	f040 8289 	bne.w	801089e <_dtoa_r+0x976>
 801038c:	ec5b ab19 	vmov	sl, fp, d9
 8010390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010392:	2b00      	cmp	r3, #0
 8010394:	f2c0 8148 	blt.w	8010628 <_dtoa_r+0x700>
 8010398:	9a00      	ldr	r2, [sp, #0]
 801039a:	2a0e      	cmp	r2, #14
 801039c:	f300 8144 	bgt.w	8010628 <_dtoa_r+0x700>
 80103a0:	4b67      	ldr	r3, [pc, #412]	; (8010540 <_dtoa_r+0x618>)
 80103a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80103aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f280 80d5 	bge.w	801055c <_dtoa_r+0x634>
 80103b2:	9b03      	ldr	r3, [sp, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f300 80d1 	bgt.w	801055c <_dtoa_r+0x634>
 80103ba:	f040 826f 	bne.w	801089c <_dtoa_r+0x974>
 80103be:	4b65      	ldr	r3, [pc, #404]	; (8010554 <_dtoa_r+0x62c>)
 80103c0:	2200      	movs	r2, #0
 80103c2:	4640      	mov	r0, r8
 80103c4:	4649      	mov	r1, r9
 80103c6:	f7f0 f93f 	bl	8000648 <__aeabi_dmul>
 80103ca:	4652      	mov	r2, sl
 80103cc:	465b      	mov	r3, fp
 80103ce:	f7f0 fbc1 	bl	8000b54 <__aeabi_dcmpge>
 80103d2:	9e03      	ldr	r6, [sp, #12]
 80103d4:	4637      	mov	r7, r6
 80103d6:	2800      	cmp	r0, #0
 80103d8:	f040 8245 	bne.w	8010866 <_dtoa_r+0x93e>
 80103dc:	9d01      	ldr	r5, [sp, #4]
 80103de:	2331      	movs	r3, #49	; 0x31
 80103e0:	f805 3b01 	strb.w	r3, [r5], #1
 80103e4:	9b00      	ldr	r3, [sp, #0]
 80103e6:	3301      	adds	r3, #1
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	e240      	b.n	801086e <_dtoa_r+0x946>
 80103ec:	07f2      	lsls	r2, r6, #31
 80103ee:	d505      	bpl.n	80103fc <_dtoa_r+0x4d4>
 80103f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103f4:	f7f0 f928 	bl	8000648 <__aeabi_dmul>
 80103f8:	3501      	adds	r5, #1
 80103fa:	2301      	movs	r3, #1
 80103fc:	1076      	asrs	r6, r6, #1
 80103fe:	3708      	adds	r7, #8
 8010400:	e777      	b.n	80102f2 <_dtoa_r+0x3ca>
 8010402:	2502      	movs	r5, #2
 8010404:	e779      	b.n	80102fa <_dtoa_r+0x3d2>
 8010406:	9f00      	ldr	r7, [sp, #0]
 8010408:	9e03      	ldr	r6, [sp, #12]
 801040a:	e794      	b.n	8010336 <_dtoa_r+0x40e>
 801040c:	9901      	ldr	r1, [sp, #4]
 801040e:	4b4c      	ldr	r3, [pc, #304]	; (8010540 <_dtoa_r+0x618>)
 8010410:	4431      	add	r1, r6
 8010412:	910d      	str	r1, [sp, #52]	; 0x34
 8010414:	9908      	ldr	r1, [sp, #32]
 8010416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801041a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801041e:	2900      	cmp	r1, #0
 8010420:	d043      	beq.n	80104aa <_dtoa_r+0x582>
 8010422:	494d      	ldr	r1, [pc, #308]	; (8010558 <_dtoa_r+0x630>)
 8010424:	2000      	movs	r0, #0
 8010426:	f7f0 fa39 	bl	800089c <__aeabi_ddiv>
 801042a:	4652      	mov	r2, sl
 801042c:	465b      	mov	r3, fp
 801042e:	f7ef ff53 	bl	80002d8 <__aeabi_dsub>
 8010432:	9d01      	ldr	r5, [sp, #4]
 8010434:	4682      	mov	sl, r0
 8010436:	468b      	mov	fp, r1
 8010438:	4649      	mov	r1, r9
 801043a:	4640      	mov	r0, r8
 801043c:	f7f0 fbb4 	bl	8000ba8 <__aeabi_d2iz>
 8010440:	4606      	mov	r6, r0
 8010442:	f7f0 f897 	bl	8000574 <__aeabi_i2d>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	4640      	mov	r0, r8
 801044c:	4649      	mov	r1, r9
 801044e:	f7ef ff43 	bl	80002d8 <__aeabi_dsub>
 8010452:	3630      	adds	r6, #48	; 0x30
 8010454:	f805 6b01 	strb.w	r6, [r5], #1
 8010458:	4652      	mov	r2, sl
 801045a:	465b      	mov	r3, fp
 801045c:	4680      	mov	r8, r0
 801045e:	4689      	mov	r9, r1
 8010460:	f7f0 fb64 	bl	8000b2c <__aeabi_dcmplt>
 8010464:	2800      	cmp	r0, #0
 8010466:	d163      	bne.n	8010530 <_dtoa_r+0x608>
 8010468:	4642      	mov	r2, r8
 801046a:	464b      	mov	r3, r9
 801046c:	4936      	ldr	r1, [pc, #216]	; (8010548 <_dtoa_r+0x620>)
 801046e:	2000      	movs	r0, #0
 8010470:	f7ef ff32 	bl	80002d8 <__aeabi_dsub>
 8010474:	4652      	mov	r2, sl
 8010476:	465b      	mov	r3, fp
 8010478:	f7f0 fb58 	bl	8000b2c <__aeabi_dcmplt>
 801047c:	2800      	cmp	r0, #0
 801047e:	f040 80b5 	bne.w	80105ec <_dtoa_r+0x6c4>
 8010482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010484:	429d      	cmp	r5, r3
 8010486:	d081      	beq.n	801038c <_dtoa_r+0x464>
 8010488:	4b30      	ldr	r3, [pc, #192]	; (801054c <_dtoa_r+0x624>)
 801048a:	2200      	movs	r2, #0
 801048c:	4650      	mov	r0, sl
 801048e:	4659      	mov	r1, fp
 8010490:	f7f0 f8da 	bl	8000648 <__aeabi_dmul>
 8010494:	4b2d      	ldr	r3, [pc, #180]	; (801054c <_dtoa_r+0x624>)
 8010496:	4682      	mov	sl, r0
 8010498:	468b      	mov	fp, r1
 801049a:	4640      	mov	r0, r8
 801049c:	4649      	mov	r1, r9
 801049e:	2200      	movs	r2, #0
 80104a0:	f7f0 f8d2 	bl	8000648 <__aeabi_dmul>
 80104a4:	4680      	mov	r8, r0
 80104a6:	4689      	mov	r9, r1
 80104a8:	e7c6      	b.n	8010438 <_dtoa_r+0x510>
 80104aa:	4650      	mov	r0, sl
 80104ac:	4659      	mov	r1, fp
 80104ae:	f7f0 f8cb 	bl	8000648 <__aeabi_dmul>
 80104b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104b4:	9d01      	ldr	r5, [sp, #4]
 80104b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80104b8:	4682      	mov	sl, r0
 80104ba:	468b      	mov	fp, r1
 80104bc:	4649      	mov	r1, r9
 80104be:	4640      	mov	r0, r8
 80104c0:	f7f0 fb72 	bl	8000ba8 <__aeabi_d2iz>
 80104c4:	4606      	mov	r6, r0
 80104c6:	f7f0 f855 	bl	8000574 <__aeabi_i2d>
 80104ca:	3630      	adds	r6, #48	; 0x30
 80104cc:	4602      	mov	r2, r0
 80104ce:	460b      	mov	r3, r1
 80104d0:	4640      	mov	r0, r8
 80104d2:	4649      	mov	r1, r9
 80104d4:	f7ef ff00 	bl	80002d8 <__aeabi_dsub>
 80104d8:	f805 6b01 	strb.w	r6, [r5], #1
 80104dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104de:	429d      	cmp	r5, r3
 80104e0:	4680      	mov	r8, r0
 80104e2:	4689      	mov	r9, r1
 80104e4:	f04f 0200 	mov.w	r2, #0
 80104e8:	d124      	bne.n	8010534 <_dtoa_r+0x60c>
 80104ea:	4b1b      	ldr	r3, [pc, #108]	; (8010558 <_dtoa_r+0x630>)
 80104ec:	4650      	mov	r0, sl
 80104ee:	4659      	mov	r1, fp
 80104f0:	f7ef fef4 	bl	80002dc <__adddf3>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	4640      	mov	r0, r8
 80104fa:	4649      	mov	r1, r9
 80104fc:	f7f0 fb34 	bl	8000b68 <__aeabi_dcmpgt>
 8010500:	2800      	cmp	r0, #0
 8010502:	d173      	bne.n	80105ec <_dtoa_r+0x6c4>
 8010504:	4652      	mov	r2, sl
 8010506:	465b      	mov	r3, fp
 8010508:	4913      	ldr	r1, [pc, #76]	; (8010558 <_dtoa_r+0x630>)
 801050a:	2000      	movs	r0, #0
 801050c:	f7ef fee4 	bl	80002d8 <__aeabi_dsub>
 8010510:	4602      	mov	r2, r0
 8010512:	460b      	mov	r3, r1
 8010514:	4640      	mov	r0, r8
 8010516:	4649      	mov	r1, r9
 8010518:	f7f0 fb08 	bl	8000b2c <__aeabi_dcmplt>
 801051c:	2800      	cmp	r0, #0
 801051e:	f43f af35 	beq.w	801038c <_dtoa_r+0x464>
 8010522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010524:	1e6b      	subs	r3, r5, #1
 8010526:	930f      	str	r3, [sp, #60]	; 0x3c
 8010528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801052c:	2b30      	cmp	r3, #48	; 0x30
 801052e:	d0f8      	beq.n	8010522 <_dtoa_r+0x5fa>
 8010530:	9700      	str	r7, [sp, #0]
 8010532:	e049      	b.n	80105c8 <_dtoa_r+0x6a0>
 8010534:	4b05      	ldr	r3, [pc, #20]	; (801054c <_dtoa_r+0x624>)
 8010536:	f7f0 f887 	bl	8000648 <__aeabi_dmul>
 801053a:	4680      	mov	r8, r0
 801053c:	4689      	mov	r9, r1
 801053e:	e7bd      	b.n	80104bc <_dtoa_r+0x594>
 8010540:	08014578 	.word	0x08014578
 8010544:	08014550 	.word	0x08014550
 8010548:	3ff00000 	.word	0x3ff00000
 801054c:	40240000 	.word	0x40240000
 8010550:	401c0000 	.word	0x401c0000
 8010554:	40140000 	.word	0x40140000
 8010558:	3fe00000 	.word	0x3fe00000
 801055c:	9d01      	ldr	r5, [sp, #4]
 801055e:	4656      	mov	r6, sl
 8010560:	465f      	mov	r7, fp
 8010562:	4642      	mov	r2, r8
 8010564:	464b      	mov	r3, r9
 8010566:	4630      	mov	r0, r6
 8010568:	4639      	mov	r1, r7
 801056a:	f7f0 f997 	bl	800089c <__aeabi_ddiv>
 801056e:	f7f0 fb1b 	bl	8000ba8 <__aeabi_d2iz>
 8010572:	4682      	mov	sl, r0
 8010574:	f7ef fffe 	bl	8000574 <__aeabi_i2d>
 8010578:	4642      	mov	r2, r8
 801057a:	464b      	mov	r3, r9
 801057c:	f7f0 f864 	bl	8000648 <__aeabi_dmul>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4630      	mov	r0, r6
 8010586:	4639      	mov	r1, r7
 8010588:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801058c:	f7ef fea4 	bl	80002d8 <__aeabi_dsub>
 8010590:	f805 6b01 	strb.w	r6, [r5], #1
 8010594:	9e01      	ldr	r6, [sp, #4]
 8010596:	9f03      	ldr	r7, [sp, #12]
 8010598:	1bae      	subs	r6, r5, r6
 801059a:	42b7      	cmp	r7, r6
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	d135      	bne.n	801060e <_dtoa_r+0x6e6>
 80105a2:	f7ef fe9b 	bl	80002dc <__adddf3>
 80105a6:	4642      	mov	r2, r8
 80105a8:	464b      	mov	r3, r9
 80105aa:	4606      	mov	r6, r0
 80105ac:	460f      	mov	r7, r1
 80105ae:	f7f0 fadb 	bl	8000b68 <__aeabi_dcmpgt>
 80105b2:	b9d0      	cbnz	r0, 80105ea <_dtoa_r+0x6c2>
 80105b4:	4642      	mov	r2, r8
 80105b6:	464b      	mov	r3, r9
 80105b8:	4630      	mov	r0, r6
 80105ba:	4639      	mov	r1, r7
 80105bc:	f7f0 faac 	bl	8000b18 <__aeabi_dcmpeq>
 80105c0:	b110      	cbz	r0, 80105c8 <_dtoa_r+0x6a0>
 80105c2:	f01a 0f01 	tst.w	sl, #1
 80105c6:	d110      	bne.n	80105ea <_dtoa_r+0x6c2>
 80105c8:	4620      	mov	r0, r4
 80105ca:	ee18 1a10 	vmov	r1, s16
 80105ce:	f001 f885 	bl	80116dc <_Bfree>
 80105d2:	2300      	movs	r3, #0
 80105d4:	9800      	ldr	r0, [sp, #0]
 80105d6:	702b      	strb	r3, [r5, #0]
 80105d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105da:	3001      	adds	r0, #1
 80105dc:	6018      	str	r0, [r3, #0]
 80105de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f43f acf1 	beq.w	800ffc8 <_dtoa_r+0xa0>
 80105e6:	601d      	str	r5, [r3, #0]
 80105e8:	e4ee      	b.n	800ffc8 <_dtoa_r+0xa0>
 80105ea:	9f00      	ldr	r7, [sp, #0]
 80105ec:	462b      	mov	r3, r5
 80105ee:	461d      	mov	r5, r3
 80105f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105f4:	2a39      	cmp	r2, #57	; 0x39
 80105f6:	d106      	bne.n	8010606 <_dtoa_r+0x6de>
 80105f8:	9a01      	ldr	r2, [sp, #4]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d1f7      	bne.n	80105ee <_dtoa_r+0x6c6>
 80105fe:	9901      	ldr	r1, [sp, #4]
 8010600:	2230      	movs	r2, #48	; 0x30
 8010602:	3701      	adds	r7, #1
 8010604:	700a      	strb	r2, [r1, #0]
 8010606:	781a      	ldrb	r2, [r3, #0]
 8010608:	3201      	adds	r2, #1
 801060a:	701a      	strb	r2, [r3, #0]
 801060c:	e790      	b.n	8010530 <_dtoa_r+0x608>
 801060e:	4ba6      	ldr	r3, [pc, #664]	; (80108a8 <_dtoa_r+0x980>)
 8010610:	2200      	movs	r2, #0
 8010612:	f7f0 f819 	bl	8000648 <__aeabi_dmul>
 8010616:	2200      	movs	r2, #0
 8010618:	2300      	movs	r3, #0
 801061a:	4606      	mov	r6, r0
 801061c:	460f      	mov	r7, r1
 801061e:	f7f0 fa7b 	bl	8000b18 <__aeabi_dcmpeq>
 8010622:	2800      	cmp	r0, #0
 8010624:	d09d      	beq.n	8010562 <_dtoa_r+0x63a>
 8010626:	e7cf      	b.n	80105c8 <_dtoa_r+0x6a0>
 8010628:	9a08      	ldr	r2, [sp, #32]
 801062a:	2a00      	cmp	r2, #0
 801062c:	f000 80d7 	beq.w	80107de <_dtoa_r+0x8b6>
 8010630:	9a06      	ldr	r2, [sp, #24]
 8010632:	2a01      	cmp	r2, #1
 8010634:	f300 80ba 	bgt.w	80107ac <_dtoa_r+0x884>
 8010638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801063a:	2a00      	cmp	r2, #0
 801063c:	f000 80b2 	beq.w	80107a4 <_dtoa_r+0x87c>
 8010640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010644:	9e07      	ldr	r6, [sp, #28]
 8010646:	9d04      	ldr	r5, [sp, #16]
 8010648:	9a04      	ldr	r2, [sp, #16]
 801064a:	441a      	add	r2, r3
 801064c:	9204      	str	r2, [sp, #16]
 801064e:	9a05      	ldr	r2, [sp, #20]
 8010650:	2101      	movs	r1, #1
 8010652:	441a      	add	r2, r3
 8010654:	4620      	mov	r0, r4
 8010656:	9205      	str	r2, [sp, #20]
 8010658:	f001 f942 	bl	80118e0 <__i2b>
 801065c:	4607      	mov	r7, r0
 801065e:	2d00      	cmp	r5, #0
 8010660:	dd0c      	ble.n	801067c <_dtoa_r+0x754>
 8010662:	9b05      	ldr	r3, [sp, #20]
 8010664:	2b00      	cmp	r3, #0
 8010666:	dd09      	ble.n	801067c <_dtoa_r+0x754>
 8010668:	42ab      	cmp	r3, r5
 801066a:	9a04      	ldr	r2, [sp, #16]
 801066c:	bfa8      	it	ge
 801066e:	462b      	movge	r3, r5
 8010670:	1ad2      	subs	r2, r2, r3
 8010672:	9204      	str	r2, [sp, #16]
 8010674:	9a05      	ldr	r2, [sp, #20]
 8010676:	1aed      	subs	r5, r5, r3
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	9305      	str	r3, [sp, #20]
 801067c:	9b07      	ldr	r3, [sp, #28]
 801067e:	b31b      	cbz	r3, 80106c8 <_dtoa_r+0x7a0>
 8010680:	9b08      	ldr	r3, [sp, #32]
 8010682:	2b00      	cmp	r3, #0
 8010684:	f000 80af 	beq.w	80107e6 <_dtoa_r+0x8be>
 8010688:	2e00      	cmp	r6, #0
 801068a:	dd13      	ble.n	80106b4 <_dtoa_r+0x78c>
 801068c:	4639      	mov	r1, r7
 801068e:	4632      	mov	r2, r6
 8010690:	4620      	mov	r0, r4
 8010692:	f001 f9e5 	bl	8011a60 <__pow5mult>
 8010696:	ee18 2a10 	vmov	r2, s16
 801069a:	4601      	mov	r1, r0
 801069c:	4607      	mov	r7, r0
 801069e:	4620      	mov	r0, r4
 80106a0:	f001 f934 	bl	801190c <__multiply>
 80106a4:	ee18 1a10 	vmov	r1, s16
 80106a8:	4680      	mov	r8, r0
 80106aa:	4620      	mov	r0, r4
 80106ac:	f001 f816 	bl	80116dc <_Bfree>
 80106b0:	ee08 8a10 	vmov	s16, r8
 80106b4:	9b07      	ldr	r3, [sp, #28]
 80106b6:	1b9a      	subs	r2, r3, r6
 80106b8:	d006      	beq.n	80106c8 <_dtoa_r+0x7a0>
 80106ba:	ee18 1a10 	vmov	r1, s16
 80106be:	4620      	mov	r0, r4
 80106c0:	f001 f9ce 	bl	8011a60 <__pow5mult>
 80106c4:	ee08 0a10 	vmov	s16, r0
 80106c8:	2101      	movs	r1, #1
 80106ca:	4620      	mov	r0, r4
 80106cc:	f001 f908 	bl	80118e0 <__i2b>
 80106d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	4606      	mov	r6, r0
 80106d6:	f340 8088 	ble.w	80107ea <_dtoa_r+0x8c2>
 80106da:	461a      	mov	r2, r3
 80106dc:	4601      	mov	r1, r0
 80106de:	4620      	mov	r0, r4
 80106e0:	f001 f9be 	bl	8011a60 <__pow5mult>
 80106e4:	9b06      	ldr	r3, [sp, #24]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	4606      	mov	r6, r0
 80106ea:	f340 8081 	ble.w	80107f0 <_dtoa_r+0x8c8>
 80106ee:	f04f 0800 	mov.w	r8, #0
 80106f2:	6933      	ldr	r3, [r6, #16]
 80106f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106f8:	6918      	ldr	r0, [r3, #16]
 80106fa:	f001 f8a1 	bl	8011840 <__hi0bits>
 80106fe:	f1c0 0020 	rsb	r0, r0, #32
 8010702:	9b05      	ldr	r3, [sp, #20]
 8010704:	4418      	add	r0, r3
 8010706:	f010 001f 	ands.w	r0, r0, #31
 801070a:	f000 8092 	beq.w	8010832 <_dtoa_r+0x90a>
 801070e:	f1c0 0320 	rsb	r3, r0, #32
 8010712:	2b04      	cmp	r3, #4
 8010714:	f340 808a 	ble.w	801082c <_dtoa_r+0x904>
 8010718:	f1c0 001c 	rsb	r0, r0, #28
 801071c:	9b04      	ldr	r3, [sp, #16]
 801071e:	4403      	add	r3, r0
 8010720:	9304      	str	r3, [sp, #16]
 8010722:	9b05      	ldr	r3, [sp, #20]
 8010724:	4403      	add	r3, r0
 8010726:	4405      	add	r5, r0
 8010728:	9305      	str	r3, [sp, #20]
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	dd07      	ble.n	8010740 <_dtoa_r+0x818>
 8010730:	ee18 1a10 	vmov	r1, s16
 8010734:	461a      	mov	r2, r3
 8010736:	4620      	mov	r0, r4
 8010738:	f001 f9ec 	bl	8011b14 <__lshift>
 801073c:	ee08 0a10 	vmov	s16, r0
 8010740:	9b05      	ldr	r3, [sp, #20]
 8010742:	2b00      	cmp	r3, #0
 8010744:	dd05      	ble.n	8010752 <_dtoa_r+0x82a>
 8010746:	4631      	mov	r1, r6
 8010748:	461a      	mov	r2, r3
 801074a:	4620      	mov	r0, r4
 801074c:	f001 f9e2 	bl	8011b14 <__lshift>
 8010750:	4606      	mov	r6, r0
 8010752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010754:	2b00      	cmp	r3, #0
 8010756:	d06e      	beq.n	8010836 <_dtoa_r+0x90e>
 8010758:	ee18 0a10 	vmov	r0, s16
 801075c:	4631      	mov	r1, r6
 801075e:	f001 fa49 	bl	8011bf4 <__mcmp>
 8010762:	2800      	cmp	r0, #0
 8010764:	da67      	bge.n	8010836 <_dtoa_r+0x90e>
 8010766:	9b00      	ldr	r3, [sp, #0]
 8010768:	3b01      	subs	r3, #1
 801076a:	ee18 1a10 	vmov	r1, s16
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	220a      	movs	r2, #10
 8010772:	2300      	movs	r3, #0
 8010774:	4620      	mov	r0, r4
 8010776:	f000 ffd3 	bl	8011720 <__multadd>
 801077a:	9b08      	ldr	r3, [sp, #32]
 801077c:	ee08 0a10 	vmov	s16, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 81b1 	beq.w	8010ae8 <_dtoa_r+0xbc0>
 8010786:	2300      	movs	r3, #0
 8010788:	4639      	mov	r1, r7
 801078a:	220a      	movs	r2, #10
 801078c:	4620      	mov	r0, r4
 801078e:	f000 ffc7 	bl	8011720 <__multadd>
 8010792:	9b02      	ldr	r3, [sp, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	4607      	mov	r7, r0
 8010798:	f300 808e 	bgt.w	80108b8 <_dtoa_r+0x990>
 801079c:	9b06      	ldr	r3, [sp, #24]
 801079e:	2b02      	cmp	r3, #2
 80107a0:	dc51      	bgt.n	8010846 <_dtoa_r+0x91e>
 80107a2:	e089      	b.n	80108b8 <_dtoa_r+0x990>
 80107a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80107a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80107aa:	e74b      	b.n	8010644 <_dtoa_r+0x71c>
 80107ac:	9b03      	ldr	r3, [sp, #12]
 80107ae:	1e5e      	subs	r6, r3, #1
 80107b0:	9b07      	ldr	r3, [sp, #28]
 80107b2:	42b3      	cmp	r3, r6
 80107b4:	bfbf      	itttt	lt
 80107b6:	9b07      	ldrlt	r3, [sp, #28]
 80107b8:	9607      	strlt	r6, [sp, #28]
 80107ba:	1af2      	sublt	r2, r6, r3
 80107bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80107be:	bfb6      	itet	lt
 80107c0:	189b      	addlt	r3, r3, r2
 80107c2:	1b9e      	subge	r6, r3, r6
 80107c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80107c6:	9b03      	ldr	r3, [sp, #12]
 80107c8:	bfb8      	it	lt
 80107ca:	2600      	movlt	r6, #0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	bfb7      	itett	lt
 80107d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80107d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80107d8:	1a9d      	sublt	r5, r3, r2
 80107da:	2300      	movlt	r3, #0
 80107dc:	e734      	b.n	8010648 <_dtoa_r+0x720>
 80107de:	9e07      	ldr	r6, [sp, #28]
 80107e0:	9d04      	ldr	r5, [sp, #16]
 80107e2:	9f08      	ldr	r7, [sp, #32]
 80107e4:	e73b      	b.n	801065e <_dtoa_r+0x736>
 80107e6:	9a07      	ldr	r2, [sp, #28]
 80107e8:	e767      	b.n	80106ba <_dtoa_r+0x792>
 80107ea:	9b06      	ldr	r3, [sp, #24]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	dc18      	bgt.n	8010822 <_dtoa_r+0x8fa>
 80107f0:	f1ba 0f00 	cmp.w	sl, #0
 80107f4:	d115      	bne.n	8010822 <_dtoa_r+0x8fa>
 80107f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107fa:	b993      	cbnz	r3, 8010822 <_dtoa_r+0x8fa>
 80107fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010800:	0d1b      	lsrs	r3, r3, #20
 8010802:	051b      	lsls	r3, r3, #20
 8010804:	b183      	cbz	r3, 8010828 <_dtoa_r+0x900>
 8010806:	9b04      	ldr	r3, [sp, #16]
 8010808:	3301      	adds	r3, #1
 801080a:	9304      	str	r3, [sp, #16]
 801080c:	9b05      	ldr	r3, [sp, #20]
 801080e:	3301      	adds	r3, #1
 8010810:	9305      	str	r3, [sp, #20]
 8010812:	f04f 0801 	mov.w	r8, #1
 8010816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010818:	2b00      	cmp	r3, #0
 801081a:	f47f af6a 	bne.w	80106f2 <_dtoa_r+0x7ca>
 801081e:	2001      	movs	r0, #1
 8010820:	e76f      	b.n	8010702 <_dtoa_r+0x7da>
 8010822:	f04f 0800 	mov.w	r8, #0
 8010826:	e7f6      	b.n	8010816 <_dtoa_r+0x8ee>
 8010828:	4698      	mov	r8, r3
 801082a:	e7f4      	b.n	8010816 <_dtoa_r+0x8ee>
 801082c:	f43f af7d 	beq.w	801072a <_dtoa_r+0x802>
 8010830:	4618      	mov	r0, r3
 8010832:	301c      	adds	r0, #28
 8010834:	e772      	b.n	801071c <_dtoa_r+0x7f4>
 8010836:	9b03      	ldr	r3, [sp, #12]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dc37      	bgt.n	80108ac <_dtoa_r+0x984>
 801083c:	9b06      	ldr	r3, [sp, #24]
 801083e:	2b02      	cmp	r3, #2
 8010840:	dd34      	ble.n	80108ac <_dtoa_r+0x984>
 8010842:	9b03      	ldr	r3, [sp, #12]
 8010844:	9302      	str	r3, [sp, #8]
 8010846:	9b02      	ldr	r3, [sp, #8]
 8010848:	b96b      	cbnz	r3, 8010866 <_dtoa_r+0x93e>
 801084a:	4631      	mov	r1, r6
 801084c:	2205      	movs	r2, #5
 801084e:	4620      	mov	r0, r4
 8010850:	f000 ff66 	bl	8011720 <__multadd>
 8010854:	4601      	mov	r1, r0
 8010856:	4606      	mov	r6, r0
 8010858:	ee18 0a10 	vmov	r0, s16
 801085c:	f001 f9ca 	bl	8011bf4 <__mcmp>
 8010860:	2800      	cmp	r0, #0
 8010862:	f73f adbb 	bgt.w	80103dc <_dtoa_r+0x4b4>
 8010866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010868:	9d01      	ldr	r5, [sp, #4]
 801086a:	43db      	mvns	r3, r3
 801086c:	9300      	str	r3, [sp, #0]
 801086e:	f04f 0800 	mov.w	r8, #0
 8010872:	4631      	mov	r1, r6
 8010874:	4620      	mov	r0, r4
 8010876:	f000 ff31 	bl	80116dc <_Bfree>
 801087a:	2f00      	cmp	r7, #0
 801087c:	f43f aea4 	beq.w	80105c8 <_dtoa_r+0x6a0>
 8010880:	f1b8 0f00 	cmp.w	r8, #0
 8010884:	d005      	beq.n	8010892 <_dtoa_r+0x96a>
 8010886:	45b8      	cmp	r8, r7
 8010888:	d003      	beq.n	8010892 <_dtoa_r+0x96a>
 801088a:	4641      	mov	r1, r8
 801088c:	4620      	mov	r0, r4
 801088e:	f000 ff25 	bl	80116dc <_Bfree>
 8010892:	4639      	mov	r1, r7
 8010894:	4620      	mov	r0, r4
 8010896:	f000 ff21 	bl	80116dc <_Bfree>
 801089a:	e695      	b.n	80105c8 <_dtoa_r+0x6a0>
 801089c:	2600      	movs	r6, #0
 801089e:	4637      	mov	r7, r6
 80108a0:	e7e1      	b.n	8010866 <_dtoa_r+0x93e>
 80108a2:	9700      	str	r7, [sp, #0]
 80108a4:	4637      	mov	r7, r6
 80108a6:	e599      	b.n	80103dc <_dtoa_r+0x4b4>
 80108a8:	40240000 	.word	0x40240000
 80108ac:	9b08      	ldr	r3, [sp, #32]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 80ca 	beq.w	8010a48 <_dtoa_r+0xb20>
 80108b4:	9b03      	ldr	r3, [sp, #12]
 80108b6:	9302      	str	r3, [sp, #8]
 80108b8:	2d00      	cmp	r5, #0
 80108ba:	dd05      	ble.n	80108c8 <_dtoa_r+0x9a0>
 80108bc:	4639      	mov	r1, r7
 80108be:	462a      	mov	r2, r5
 80108c0:	4620      	mov	r0, r4
 80108c2:	f001 f927 	bl	8011b14 <__lshift>
 80108c6:	4607      	mov	r7, r0
 80108c8:	f1b8 0f00 	cmp.w	r8, #0
 80108cc:	d05b      	beq.n	8010986 <_dtoa_r+0xa5e>
 80108ce:	6879      	ldr	r1, [r7, #4]
 80108d0:	4620      	mov	r0, r4
 80108d2:	f000 fec3 	bl	801165c <_Balloc>
 80108d6:	4605      	mov	r5, r0
 80108d8:	b928      	cbnz	r0, 80108e6 <_dtoa_r+0x9be>
 80108da:	4b87      	ldr	r3, [pc, #540]	; (8010af8 <_dtoa_r+0xbd0>)
 80108dc:	4602      	mov	r2, r0
 80108de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80108e2:	f7ff bb3b 	b.w	800ff5c <_dtoa_r+0x34>
 80108e6:	693a      	ldr	r2, [r7, #16]
 80108e8:	3202      	adds	r2, #2
 80108ea:	0092      	lsls	r2, r2, #2
 80108ec:	f107 010c 	add.w	r1, r7, #12
 80108f0:	300c      	adds	r0, #12
 80108f2:	f7fd fbc5 	bl	800e080 <memcpy>
 80108f6:	2201      	movs	r2, #1
 80108f8:	4629      	mov	r1, r5
 80108fa:	4620      	mov	r0, r4
 80108fc:	f001 f90a 	bl	8011b14 <__lshift>
 8010900:	9b01      	ldr	r3, [sp, #4]
 8010902:	f103 0901 	add.w	r9, r3, #1
 8010906:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801090a:	4413      	add	r3, r2
 801090c:	9305      	str	r3, [sp, #20]
 801090e:	f00a 0301 	and.w	r3, sl, #1
 8010912:	46b8      	mov	r8, r7
 8010914:	9304      	str	r3, [sp, #16]
 8010916:	4607      	mov	r7, r0
 8010918:	4631      	mov	r1, r6
 801091a:	ee18 0a10 	vmov	r0, s16
 801091e:	f7ff fa75 	bl	800fe0c <quorem>
 8010922:	4641      	mov	r1, r8
 8010924:	9002      	str	r0, [sp, #8]
 8010926:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801092a:	ee18 0a10 	vmov	r0, s16
 801092e:	f001 f961 	bl	8011bf4 <__mcmp>
 8010932:	463a      	mov	r2, r7
 8010934:	9003      	str	r0, [sp, #12]
 8010936:	4631      	mov	r1, r6
 8010938:	4620      	mov	r0, r4
 801093a:	f001 f977 	bl	8011c2c <__mdiff>
 801093e:	68c2      	ldr	r2, [r0, #12]
 8010940:	f109 3bff 	add.w	fp, r9, #4294967295
 8010944:	4605      	mov	r5, r0
 8010946:	bb02      	cbnz	r2, 801098a <_dtoa_r+0xa62>
 8010948:	4601      	mov	r1, r0
 801094a:	ee18 0a10 	vmov	r0, s16
 801094e:	f001 f951 	bl	8011bf4 <__mcmp>
 8010952:	4602      	mov	r2, r0
 8010954:	4629      	mov	r1, r5
 8010956:	4620      	mov	r0, r4
 8010958:	9207      	str	r2, [sp, #28]
 801095a:	f000 febf 	bl	80116dc <_Bfree>
 801095e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010962:	ea43 0102 	orr.w	r1, r3, r2
 8010966:	9b04      	ldr	r3, [sp, #16]
 8010968:	430b      	orrs	r3, r1
 801096a:	464d      	mov	r5, r9
 801096c:	d10f      	bne.n	801098e <_dtoa_r+0xa66>
 801096e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010972:	d02a      	beq.n	80109ca <_dtoa_r+0xaa2>
 8010974:	9b03      	ldr	r3, [sp, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	dd02      	ble.n	8010980 <_dtoa_r+0xa58>
 801097a:	9b02      	ldr	r3, [sp, #8]
 801097c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010980:	f88b a000 	strb.w	sl, [fp]
 8010984:	e775      	b.n	8010872 <_dtoa_r+0x94a>
 8010986:	4638      	mov	r0, r7
 8010988:	e7ba      	b.n	8010900 <_dtoa_r+0x9d8>
 801098a:	2201      	movs	r2, #1
 801098c:	e7e2      	b.n	8010954 <_dtoa_r+0xa2c>
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	2b00      	cmp	r3, #0
 8010992:	db04      	blt.n	801099e <_dtoa_r+0xa76>
 8010994:	9906      	ldr	r1, [sp, #24]
 8010996:	430b      	orrs	r3, r1
 8010998:	9904      	ldr	r1, [sp, #16]
 801099a:	430b      	orrs	r3, r1
 801099c:	d122      	bne.n	80109e4 <_dtoa_r+0xabc>
 801099e:	2a00      	cmp	r2, #0
 80109a0:	ddee      	ble.n	8010980 <_dtoa_r+0xa58>
 80109a2:	ee18 1a10 	vmov	r1, s16
 80109a6:	2201      	movs	r2, #1
 80109a8:	4620      	mov	r0, r4
 80109aa:	f001 f8b3 	bl	8011b14 <__lshift>
 80109ae:	4631      	mov	r1, r6
 80109b0:	ee08 0a10 	vmov	s16, r0
 80109b4:	f001 f91e 	bl	8011bf4 <__mcmp>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	dc03      	bgt.n	80109c4 <_dtoa_r+0xa9c>
 80109bc:	d1e0      	bne.n	8010980 <_dtoa_r+0xa58>
 80109be:	f01a 0f01 	tst.w	sl, #1
 80109c2:	d0dd      	beq.n	8010980 <_dtoa_r+0xa58>
 80109c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80109c8:	d1d7      	bne.n	801097a <_dtoa_r+0xa52>
 80109ca:	2339      	movs	r3, #57	; 0x39
 80109cc:	f88b 3000 	strb.w	r3, [fp]
 80109d0:	462b      	mov	r3, r5
 80109d2:	461d      	mov	r5, r3
 80109d4:	3b01      	subs	r3, #1
 80109d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80109da:	2a39      	cmp	r2, #57	; 0x39
 80109dc:	d071      	beq.n	8010ac2 <_dtoa_r+0xb9a>
 80109de:	3201      	adds	r2, #1
 80109e0:	701a      	strb	r2, [r3, #0]
 80109e2:	e746      	b.n	8010872 <_dtoa_r+0x94a>
 80109e4:	2a00      	cmp	r2, #0
 80109e6:	dd07      	ble.n	80109f8 <_dtoa_r+0xad0>
 80109e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80109ec:	d0ed      	beq.n	80109ca <_dtoa_r+0xaa2>
 80109ee:	f10a 0301 	add.w	r3, sl, #1
 80109f2:	f88b 3000 	strb.w	r3, [fp]
 80109f6:	e73c      	b.n	8010872 <_dtoa_r+0x94a>
 80109f8:	9b05      	ldr	r3, [sp, #20]
 80109fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80109fe:	4599      	cmp	r9, r3
 8010a00:	d047      	beq.n	8010a92 <_dtoa_r+0xb6a>
 8010a02:	ee18 1a10 	vmov	r1, s16
 8010a06:	2300      	movs	r3, #0
 8010a08:	220a      	movs	r2, #10
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f000 fe88 	bl	8011720 <__multadd>
 8010a10:	45b8      	cmp	r8, r7
 8010a12:	ee08 0a10 	vmov	s16, r0
 8010a16:	f04f 0300 	mov.w	r3, #0
 8010a1a:	f04f 020a 	mov.w	r2, #10
 8010a1e:	4641      	mov	r1, r8
 8010a20:	4620      	mov	r0, r4
 8010a22:	d106      	bne.n	8010a32 <_dtoa_r+0xb0a>
 8010a24:	f000 fe7c 	bl	8011720 <__multadd>
 8010a28:	4680      	mov	r8, r0
 8010a2a:	4607      	mov	r7, r0
 8010a2c:	f109 0901 	add.w	r9, r9, #1
 8010a30:	e772      	b.n	8010918 <_dtoa_r+0x9f0>
 8010a32:	f000 fe75 	bl	8011720 <__multadd>
 8010a36:	4639      	mov	r1, r7
 8010a38:	4680      	mov	r8, r0
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	220a      	movs	r2, #10
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f000 fe6e 	bl	8011720 <__multadd>
 8010a44:	4607      	mov	r7, r0
 8010a46:	e7f1      	b.n	8010a2c <_dtoa_r+0xb04>
 8010a48:	9b03      	ldr	r3, [sp, #12]
 8010a4a:	9302      	str	r3, [sp, #8]
 8010a4c:	9d01      	ldr	r5, [sp, #4]
 8010a4e:	ee18 0a10 	vmov	r0, s16
 8010a52:	4631      	mov	r1, r6
 8010a54:	f7ff f9da 	bl	800fe0c <quorem>
 8010a58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010a5c:	9b01      	ldr	r3, [sp, #4]
 8010a5e:	f805 ab01 	strb.w	sl, [r5], #1
 8010a62:	1aea      	subs	r2, r5, r3
 8010a64:	9b02      	ldr	r3, [sp, #8]
 8010a66:	4293      	cmp	r3, r2
 8010a68:	dd09      	ble.n	8010a7e <_dtoa_r+0xb56>
 8010a6a:	ee18 1a10 	vmov	r1, s16
 8010a6e:	2300      	movs	r3, #0
 8010a70:	220a      	movs	r2, #10
 8010a72:	4620      	mov	r0, r4
 8010a74:	f000 fe54 	bl	8011720 <__multadd>
 8010a78:	ee08 0a10 	vmov	s16, r0
 8010a7c:	e7e7      	b.n	8010a4e <_dtoa_r+0xb26>
 8010a7e:	9b02      	ldr	r3, [sp, #8]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	bfc8      	it	gt
 8010a84:	461d      	movgt	r5, r3
 8010a86:	9b01      	ldr	r3, [sp, #4]
 8010a88:	bfd8      	it	le
 8010a8a:	2501      	movle	r5, #1
 8010a8c:	441d      	add	r5, r3
 8010a8e:	f04f 0800 	mov.w	r8, #0
 8010a92:	ee18 1a10 	vmov	r1, s16
 8010a96:	2201      	movs	r2, #1
 8010a98:	4620      	mov	r0, r4
 8010a9a:	f001 f83b 	bl	8011b14 <__lshift>
 8010a9e:	4631      	mov	r1, r6
 8010aa0:	ee08 0a10 	vmov	s16, r0
 8010aa4:	f001 f8a6 	bl	8011bf4 <__mcmp>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	dc91      	bgt.n	80109d0 <_dtoa_r+0xaa8>
 8010aac:	d102      	bne.n	8010ab4 <_dtoa_r+0xb8c>
 8010aae:	f01a 0f01 	tst.w	sl, #1
 8010ab2:	d18d      	bne.n	80109d0 <_dtoa_r+0xaa8>
 8010ab4:	462b      	mov	r3, r5
 8010ab6:	461d      	mov	r5, r3
 8010ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010abc:	2a30      	cmp	r2, #48	; 0x30
 8010abe:	d0fa      	beq.n	8010ab6 <_dtoa_r+0xb8e>
 8010ac0:	e6d7      	b.n	8010872 <_dtoa_r+0x94a>
 8010ac2:	9a01      	ldr	r2, [sp, #4]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d184      	bne.n	80109d2 <_dtoa_r+0xaaa>
 8010ac8:	9b00      	ldr	r3, [sp, #0]
 8010aca:	3301      	adds	r3, #1
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	2331      	movs	r3, #49	; 0x31
 8010ad0:	7013      	strb	r3, [r2, #0]
 8010ad2:	e6ce      	b.n	8010872 <_dtoa_r+0x94a>
 8010ad4:	4b09      	ldr	r3, [pc, #36]	; (8010afc <_dtoa_r+0xbd4>)
 8010ad6:	f7ff ba95 	b.w	8010004 <_dtoa_r+0xdc>
 8010ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f47f aa6e 	bne.w	800ffbe <_dtoa_r+0x96>
 8010ae2:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <_dtoa_r+0xbd8>)
 8010ae4:	f7ff ba8e 	b.w	8010004 <_dtoa_r+0xdc>
 8010ae8:	9b02      	ldr	r3, [sp, #8]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	dcae      	bgt.n	8010a4c <_dtoa_r+0xb24>
 8010aee:	9b06      	ldr	r3, [sp, #24]
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	f73f aea8 	bgt.w	8010846 <_dtoa_r+0x91e>
 8010af6:	e7a9      	b.n	8010a4c <_dtoa_r+0xb24>
 8010af8:	08014400 	.word	0x08014400
 8010afc:	08014204 	.word	0x08014204
 8010b00:	08014381 	.word	0x08014381

08010b04 <__sflush_r>:
 8010b04:	898a      	ldrh	r2, [r1, #12]
 8010b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	0710      	lsls	r0, r2, #28
 8010b0e:	460c      	mov	r4, r1
 8010b10:	d458      	bmi.n	8010bc4 <__sflush_r+0xc0>
 8010b12:	684b      	ldr	r3, [r1, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	dc05      	bgt.n	8010b24 <__sflush_r+0x20>
 8010b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	dc02      	bgt.n	8010b24 <__sflush_r+0x20>
 8010b1e:	2000      	movs	r0, #0
 8010b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b26:	2e00      	cmp	r6, #0
 8010b28:	d0f9      	beq.n	8010b1e <__sflush_r+0x1a>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b30:	682f      	ldr	r7, [r5, #0]
 8010b32:	602b      	str	r3, [r5, #0]
 8010b34:	d032      	beq.n	8010b9c <__sflush_r+0x98>
 8010b36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b38:	89a3      	ldrh	r3, [r4, #12]
 8010b3a:	075a      	lsls	r2, r3, #29
 8010b3c:	d505      	bpl.n	8010b4a <__sflush_r+0x46>
 8010b3e:	6863      	ldr	r3, [r4, #4]
 8010b40:	1ac0      	subs	r0, r0, r3
 8010b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b44:	b10b      	cbz	r3, 8010b4a <__sflush_r+0x46>
 8010b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b48:	1ac0      	subs	r0, r0, r3
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b50:	6a21      	ldr	r1, [r4, #32]
 8010b52:	4628      	mov	r0, r5
 8010b54:	47b0      	blx	r6
 8010b56:	1c43      	adds	r3, r0, #1
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	d106      	bne.n	8010b6a <__sflush_r+0x66>
 8010b5c:	6829      	ldr	r1, [r5, #0]
 8010b5e:	291d      	cmp	r1, #29
 8010b60:	d82c      	bhi.n	8010bbc <__sflush_r+0xb8>
 8010b62:	4a2a      	ldr	r2, [pc, #168]	; (8010c0c <__sflush_r+0x108>)
 8010b64:	40ca      	lsrs	r2, r1
 8010b66:	07d6      	lsls	r6, r2, #31
 8010b68:	d528      	bpl.n	8010bbc <__sflush_r+0xb8>
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	6062      	str	r2, [r4, #4]
 8010b6e:	04d9      	lsls	r1, r3, #19
 8010b70:	6922      	ldr	r2, [r4, #16]
 8010b72:	6022      	str	r2, [r4, #0]
 8010b74:	d504      	bpl.n	8010b80 <__sflush_r+0x7c>
 8010b76:	1c42      	adds	r2, r0, #1
 8010b78:	d101      	bne.n	8010b7e <__sflush_r+0x7a>
 8010b7a:	682b      	ldr	r3, [r5, #0]
 8010b7c:	b903      	cbnz	r3, 8010b80 <__sflush_r+0x7c>
 8010b7e:	6560      	str	r0, [r4, #84]	; 0x54
 8010b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b82:	602f      	str	r7, [r5, #0]
 8010b84:	2900      	cmp	r1, #0
 8010b86:	d0ca      	beq.n	8010b1e <__sflush_r+0x1a>
 8010b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b8c:	4299      	cmp	r1, r3
 8010b8e:	d002      	beq.n	8010b96 <__sflush_r+0x92>
 8010b90:	4628      	mov	r0, r5
 8010b92:	f001 fa3b 	bl	801200c <_free_r>
 8010b96:	2000      	movs	r0, #0
 8010b98:	6360      	str	r0, [r4, #52]	; 0x34
 8010b9a:	e7c1      	b.n	8010b20 <__sflush_r+0x1c>
 8010b9c:	6a21      	ldr	r1, [r4, #32]
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	47b0      	blx	r6
 8010ba4:	1c41      	adds	r1, r0, #1
 8010ba6:	d1c7      	bne.n	8010b38 <__sflush_r+0x34>
 8010ba8:	682b      	ldr	r3, [r5, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d0c4      	beq.n	8010b38 <__sflush_r+0x34>
 8010bae:	2b1d      	cmp	r3, #29
 8010bb0:	d001      	beq.n	8010bb6 <__sflush_r+0xb2>
 8010bb2:	2b16      	cmp	r3, #22
 8010bb4:	d101      	bne.n	8010bba <__sflush_r+0xb6>
 8010bb6:	602f      	str	r7, [r5, #0]
 8010bb8:	e7b1      	b.n	8010b1e <__sflush_r+0x1a>
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bc0:	81a3      	strh	r3, [r4, #12]
 8010bc2:	e7ad      	b.n	8010b20 <__sflush_r+0x1c>
 8010bc4:	690f      	ldr	r7, [r1, #16]
 8010bc6:	2f00      	cmp	r7, #0
 8010bc8:	d0a9      	beq.n	8010b1e <__sflush_r+0x1a>
 8010bca:	0793      	lsls	r3, r2, #30
 8010bcc:	680e      	ldr	r6, [r1, #0]
 8010bce:	bf08      	it	eq
 8010bd0:	694b      	ldreq	r3, [r1, #20]
 8010bd2:	600f      	str	r7, [r1, #0]
 8010bd4:	bf18      	it	ne
 8010bd6:	2300      	movne	r3, #0
 8010bd8:	eba6 0807 	sub.w	r8, r6, r7
 8010bdc:	608b      	str	r3, [r1, #8]
 8010bde:	f1b8 0f00 	cmp.w	r8, #0
 8010be2:	dd9c      	ble.n	8010b1e <__sflush_r+0x1a>
 8010be4:	6a21      	ldr	r1, [r4, #32]
 8010be6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010be8:	4643      	mov	r3, r8
 8010bea:	463a      	mov	r2, r7
 8010bec:	4628      	mov	r0, r5
 8010bee:	47b0      	blx	r6
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	dc06      	bgt.n	8010c02 <__sflush_r+0xfe>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bfa:	81a3      	strh	r3, [r4, #12]
 8010bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010c00:	e78e      	b.n	8010b20 <__sflush_r+0x1c>
 8010c02:	4407      	add	r7, r0
 8010c04:	eba8 0800 	sub.w	r8, r8, r0
 8010c08:	e7e9      	b.n	8010bde <__sflush_r+0xda>
 8010c0a:	bf00      	nop
 8010c0c:	20400001 	.word	0x20400001

08010c10 <_fflush_r>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	690b      	ldr	r3, [r1, #16]
 8010c14:	4605      	mov	r5, r0
 8010c16:	460c      	mov	r4, r1
 8010c18:	b913      	cbnz	r3, 8010c20 <_fflush_r+0x10>
 8010c1a:	2500      	movs	r5, #0
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	b118      	cbz	r0, 8010c2a <_fflush_r+0x1a>
 8010c22:	6983      	ldr	r3, [r0, #24]
 8010c24:	b90b      	cbnz	r3, 8010c2a <_fflush_r+0x1a>
 8010c26:	f000 f887 	bl	8010d38 <__sinit>
 8010c2a:	4b14      	ldr	r3, [pc, #80]	; (8010c7c <_fflush_r+0x6c>)
 8010c2c:	429c      	cmp	r4, r3
 8010c2e:	d11b      	bne.n	8010c68 <_fflush_r+0x58>
 8010c30:	686c      	ldr	r4, [r5, #4]
 8010c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d0ef      	beq.n	8010c1a <_fflush_r+0xa>
 8010c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c3c:	07d0      	lsls	r0, r2, #31
 8010c3e:	d404      	bmi.n	8010c4a <_fflush_r+0x3a>
 8010c40:	0599      	lsls	r1, r3, #22
 8010c42:	d402      	bmi.n	8010c4a <_fflush_r+0x3a>
 8010c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c46:	f000 fc88 	bl	801155a <__retarget_lock_acquire_recursive>
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	f7ff ff59 	bl	8010b04 <__sflush_r>
 8010c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c54:	07da      	lsls	r2, r3, #31
 8010c56:	4605      	mov	r5, r0
 8010c58:	d4e0      	bmi.n	8010c1c <_fflush_r+0xc>
 8010c5a:	89a3      	ldrh	r3, [r4, #12]
 8010c5c:	059b      	lsls	r3, r3, #22
 8010c5e:	d4dd      	bmi.n	8010c1c <_fflush_r+0xc>
 8010c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c62:	f000 fc7b 	bl	801155c <__retarget_lock_release_recursive>
 8010c66:	e7d9      	b.n	8010c1c <_fflush_r+0xc>
 8010c68:	4b05      	ldr	r3, [pc, #20]	; (8010c80 <_fflush_r+0x70>)
 8010c6a:	429c      	cmp	r4, r3
 8010c6c:	d101      	bne.n	8010c72 <_fflush_r+0x62>
 8010c6e:	68ac      	ldr	r4, [r5, #8]
 8010c70:	e7df      	b.n	8010c32 <_fflush_r+0x22>
 8010c72:	4b04      	ldr	r3, [pc, #16]	; (8010c84 <_fflush_r+0x74>)
 8010c74:	429c      	cmp	r4, r3
 8010c76:	bf08      	it	eq
 8010c78:	68ec      	ldreq	r4, [r5, #12]
 8010c7a:	e7da      	b.n	8010c32 <_fflush_r+0x22>
 8010c7c:	08014434 	.word	0x08014434
 8010c80:	08014454 	.word	0x08014454
 8010c84:	08014414 	.word	0x08014414

08010c88 <std>:
 8010c88:	2300      	movs	r3, #0
 8010c8a:	b510      	push	{r4, lr}
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8010c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c96:	6083      	str	r3, [r0, #8]
 8010c98:	8181      	strh	r1, [r0, #12]
 8010c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8010c9c:	81c2      	strh	r2, [r0, #14]
 8010c9e:	6183      	str	r3, [r0, #24]
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	2208      	movs	r2, #8
 8010ca4:	305c      	adds	r0, #92	; 0x5c
 8010ca6:	f7fd f9f9 	bl	800e09c <memset>
 8010caa:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <std+0x38>)
 8010cac:	6263      	str	r3, [r4, #36]	; 0x24
 8010cae:	4b05      	ldr	r3, [pc, #20]	; (8010cc4 <std+0x3c>)
 8010cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cb2:	4b05      	ldr	r3, [pc, #20]	; (8010cc8 <std+0x40>)
 8010cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cb6:	4b05      	ldr	r3, [pc, #20]	; (8010ccc <std+0x44>)
 8010cb8:	6224      	str	r4, [r4, #32]
 8010cba:	6323      	str	r3, [r4, #48]	; 0x30
 8010cbc:	bd10      	pop	{r4, pc}
 8010cbe:	bf00      	nop
 8010cc0:	08012769 	.word	0x08012769
 8010cc4:	0801278b 	.word	0x0801278b
 8010cc8:	080127c3 	.word	0x080127c3
 8010ccc:	080127e7 	.word	0x080127e7

08010cd0 <_cleanup_r>:
 8010cd0:	4901      	ldr	r1, [pc, #4]	; (8010cd8 <_cleanup_r+0x8>)
 8010cd2:	f000 b8af 	b.w	8010e34 <_fwalk_reent>
 8010cd6:	bf00      	nop
 8010cd8:	08010c11 	.word	0x08010c11

08010cdc <__sfmoreglue>:
 8010cdc:	b570      	push	{r4, r5, r6, lr}
 8010cde:	2268      	movs	r2, #104	; 0x68
 8010ce0:	1e4d      	subs	r5, r1, #1
 8010ce2:	4355      	muls	r5, r2
 8010ce4:	460e      	mov	r6, r1
 8010ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010cea:	f001 f9fb 	bl	80120e4 <_malloc_r>
 8010cee:	4604      	mov	r4, r0
 8010cf0:	b140      	cbz	r0, 8010d04 <__sfmoreglue+0x28>
 8010cf2:	2100      	movs	r1, #0
 8010cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8010cf8:	300c      	adds	r0, #12
 8010cfa:	60a0      	str	r0, [r4, #8]
 8010cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d00:	f7fd f9cc 	bl	800e09c <memset>
 8010d04:	4620      	mov	r0, r4
 8010d06:	bd70      	pop	{r4, r5, r6, pc}

08010d08 <__sfp_lock_acquire>:
 8010d08:	4801      	ldr	r0, [pc, #4]	; (8010d10 <__sfp_lock_acquire+0x8>)
 8010d0a:	f000 bc26 	b.w	801155a <__retarget_lock_acquire_recursive>
 8010d0e:	bf00      	nop
 8010d10:	20009929 	.word	0x20009929

08010d14 <__sfp_lock_release>:
 8010d14:	4801      	ldr	r0, [pc, #4]	; (8010d1c <__sfp_lock_release+0x8>)
 8010d16:	f000 bc21 	b.w	801155c <__retarget_lock_release_recursive>
 8010d1a:	bf00      	nop
 8010d1c:	20009929 	.word	0x20009929

08010d20 <__sinit_lock_acquire>:
 8010d20:	4801      	ldr	r0, [pc, #4]	; (8010d28 <__sinit_lock_acquire+0x8>)
 8010d22:	f000 bc1a 	b.w	801155a <__retarget_lock_acquire_recursive>
 8010d26:	bf00      	nop
 8010d28:	2000992a 	.word	0x2000992a

08010d2c <__sinit_lock_release>:
 8010d2c:	4801      	ldr	r0, [pc, #4]	; (8010d34 <__sinit_lock_release+0x8>)
 8010d2e:	f000 bc15 	b.w	801155c <__retarget_lock_release_recursive>
 8010d32:	bf00      	nop
 8010d34:	2000992a 	.word	0x2000992a

08010d38 <__sinit>:
 8010d38:	b510      	push	{r4, lr}
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	f7ff fff0 	bl	8010d20 <__sinit_lock_acquire>
 8010d40:	69a3      	ldr	r3, [r4, #24]
 8010d42:	b11b      	cbz	r3, 8010d4c <__sinit+0x14>
 8010d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d48:	f7ff bff0 	b.w	8010d2c <__sinit_lock_release>
 8010d4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d50:	6523      	str	r3, [r4, #80]	; 0x50
 8010d52:	4b13      	ldr	r3, [pc, #76]	; (8010da0 <__sinit+0x68>)
 8010d54:	4a13      	ldr	r2, [pc, #76]	; (8010da4 <__sinit+0x6c>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d5a:	42a3      	cmp	r3, r4
 8010d5c:	bf04      	itt	eq
 8010d5e:	2301      	moveq	r3, #1
 8010d60:	61a3      	streq	r3, [r4, #24]
 8010d62:	4620      	mov	r0, r4
 8010d64:	f000 f820 	bl	8010da8 <__sfp>
 8010d68:	6060      	str	r0, [r4, #4]
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f000 f81c 	bl	8010da8 <__sfp>
 8010d70:	60a0      	str	r0, [r4, #8]
 8010d72:	4620      	mov	r0, r4
 8010d74:	f000 f818 	bl	8010da8 <__sfp>
 8010d78:	2200      	movs	r2, #0
 8010d7a:	60e0      	str	r0, [r4, #12]
 8010d7c:	2104      	movs	r1, #4
 8010d7e:	6860      	ldr	r0, [r4, #4]
 8010d80:	f7ff ff82 	bl	8010c88 <std>
 8010d84:	68a0      	ldr	r0, [r4, #8]
 8010d86:	2201      	movs	r2, #1
 8010d88:	2109      	movs	r1, #9
 8010d8a:	f7ff ff7d 	bl	8010c88 <std>
 8010d8e:	68e0      	ldr	r0, [r4, #12]
 8010d90:	2202      	movs	r2, #2
 8010d92:	2112      	movs	r1, #18
 8010d94:	f7ff ff78 	bl	8010c88 <std>
 8010d98:	2301      	movs	r3, #1
 8010d9a:	61a3      	str	r3, [r4, #24]
 8010d9c:	e7d2      	b.n	8010d44 <__sinit+0xc>
 8010d9e:	bf00      	nop
 8010da0:	080141f0 	.word	0x080141f0
 8010da4:	08010cd1 	.word	0x08010cd1

08010da8 <__sfp>:
 8010da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010daa:	4607      	mov	r7, r0
 8010dac:	f7ff ffac 	bl	8010d08 <__sfp_lock_acquire>
 8010db0:	4b1e      	ldr	r3, [pc, #120]	; (8010e2c <__sfp+0x84>)
 8010db2:	681e      	ldr	r6, [r3, #0]
 8010db4:	69b3      	ldr	r3, [r6, #24]
 8010db6:	b913      	cbnz	r3, 8010dbe <__sfp+0x16>
 8010db8:	4630      	mov	r0, r6
 8010dba:	f7ff ffbd 	bl	8010d38 <__sinit>
 8010dbe:	3648      	adds	r6, #72	; 0x48
 8010dc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	d503      	bpl.n	8010dd0 <__sfp+0x28>
 8010dc8:	6833      	ldr	r3, [r6, #0]
 8010dca:	b30b      	cbz	r3, 8010e10 <__sfp+0x68>
 8010dcc:	6836      	ldr	r6, [r6, #0]
 8010dce:	e7f7      	b.n	8010dc0 <__sfp+0x18>
 8010dd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010dd4:	b9d5      	cbnz	r5, 8010e0c <__sfp+0x64>
 8010dd6:	4b16      	ldr	r3, [pc, #88]	; (8010e30 <__sfp+0x88>)
 8010dd8:	60e3      	str	r3, [r4, #12]
 8010dda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010dde:	6665      	str	r5, [r4, #100]	; 0x64
 8010de0:	f000 fbba 	bl	8011558 <__retarget_lock_init_recursive>
 8010de4:	f7ff ff96 	bl	8010d14 <__sfp_lock_release>
 8010de8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010dec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010df0:	6025      	str	r5, [r4, #0]
 8010df2:	61a5      	str	r5, [r4, #24]
 8010df4:	2208      	movs	r2, #8
 8010df6:	4629      	mov	r1, r5
 8010df8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010dfc:	f7fd f94e 	bl	800e09c <memset>
 8010e00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e08:	4620      	mov	r0, r4
 8010e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0c:	3468      	adds	r4, #104	; 0x68
 8010e0e:	e7d9      	b.n	8010dc4 <__sfp+0x1c>
 8010e10:	2104      	movs	r1, #4
 8010e12:	4638      	mov	r0, r7
 8010e14:	f7ff ff62 	bl	8010cdc <__sfmoreglue>
 8010e18:	4604      	mov	r4, r0
 8010e1a:	6030      	str	r0, [r6, #0]
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d1d5      	bne.n	8010dcc <__sfp+0x24>
 8010e20:	f7ff ff78 	bl	8010d14 <__sfp_lock_release>
 8010e24:	230c      	movs	r3, #12
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	e7ee      	b.n	8010e08 <__sfp+0x60>
 8010e2a:	bf00      	nop
 8010e2c:	080141f0 	.word	0x080141f0
 8010e30:	ffff0001 	.word	0xffff0001

08010e34 <_fwalk_reent>:
 8010e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e38:	4606      	mov	r6, r0
 8010e3a:	4688      	mov	r8, r1
 8010e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e40:	2700      	movs	r7, #0
 8010e42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e46:	f1b9 0901 	subs.w	r9, r9, #1
 8010e4a:	d505      	bpl.n	8010e58 <_fwalk_reent+0x24>
 8010e4c:	6824      	ldr	r4, [r4, #0]
 8010e4e:	2c00      	cmp	r4, #0
 8010e50:	d1f7      	bne.n	8010e42 <_fwalk_reent+0xe>
 8010e52:	4638      	mov	r0, r7
 8010e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e58:	89ab      	ldrh	r3, [r5, #12]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d907      	bls.n	8010e6e <_fwalk_reent+0x3a>
 8010e5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e62:	3301      	adds	r3, #1
 8010e64:	d003      	beq.n	8010e6e <_fwalk_reent+0x3a>
 8010e66:	4629      	mov	r1, r5
 8010e68:	4630      	mov	r0, r6
 8010e6a:	47c0      	blx	r8
 8010e6c:	4307      	orrs	r7, r0
 8010e6e:	3568      	adds	r5, #104	; 0x68
 8010e70:	e7e9      	b.n	8010e46 <_fwalk_reent+0x12>

08010e72 <rshift>:
 8010e72:	6903      	ldr	r3, [r0, #16]
 8010e74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e80:	f100 0414 	add.w	r4, r0, #20
 8010e84:	dd45      	ble.n	8010f12 <rshift+0xa0>
 8010e86:	f011 011f 	ands.w	r1, r1, #31
 8010e8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e92:	d10c      	bne.n	8010eae <rshift+0x3c>
 8010e94:	f100 0710 	add.w	r7, r0, #16
 8010e98:	4629      	mov	r1, r5
 8010e9a:	42b1      	cmp	r1, r6
 8010e9c:	d334      	bcc.n	8010f08 <rshift+0x96>
 8010e9e:	1a9b      	subs	r3, r3, r2
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	1eea      	subs	r2, r5, #3
 8010ea4:	4296      	cmp	r6, r2
 8010ea6:	bf38      	it	cc
 8010ea8:	2300      	movcc	r3, #0
 8010eaa:	4423      	add	r3, r4
 8010eac:	e015      	b.n	8010eda <rshift+0x68>
 8010eae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010eb2:	f1c1 0820 	rsb	r8, r1, #32
 8010eb6:	40cf      	lsrs	r7, r1
 8010eb8:	f105 0e04 	add.w	lr, r5, #4
 8010ebc:	46a1      	mov	r9, r4
 8010ebe:	4576      	cmp	r6, lr
 8010ec0:	46f4      	mov	ip, lr
 8010ec2:	d815      	bhi.n	8010ef0 <rshift+0x7e>
 8010ec4:	1a9a      	subs	r2, r3, r2
 8010ec6:	0092      	lsls	r2, r2, #2
 8010ec8:	3a04      	subs	r2, #4
 8010eca:	3501      	adds	r5, #1
 8010ecc:	42ae      	cmp	r6, r5
 8010ece:	bf38      	it	cc
 8010ed0:	2200      	movcc	r2, #0
 8010ed2:	18a3      	adds	r3, r4, r2
 8010ed4:	50a7      	str	r7, [r4, r2]
 8010ed6:	b107      	cbz	r7, 8010eda <rshift+0x68>
 8010ed8:	3304      	adds	r3, #4
 8010eda:	1b1a      	subs	r2, r3, r4
 8010edc:	42a3      	cmp	r3, r4
 8010ede:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010ee2:	bf08      	it	eq
 8010ee4:	2300      	moveq	r3, #0
 8010ee6:	6102      	str	r2, [r0, #16]
 8010ee8:	bf08      	it	eq
 8010eea:	6143      	streq	r3, [r0, #20]
 8010eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ef0:	f8dc c000 	ldr.w	ip, [ip]
 8010ef4:	fa0c fc08 	lsl.w	ip, ip, r8
 8010ef8:	ea4c 0707 	orr.w	r7, ip, r7
 8010efc:	f849 7b04 	str.w	r7, [r9], #4
 8010f00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f04:	40cf      	lsrs	r7, r1
 8010f06:	e7da      	b.n	8010ebe <rshift+0x4c>
 8010f08:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f10:	e7c3      	b.n	8010e9a <rshift+0x28>
 8010f12:	4623      	mov	r3, r4
 8010f14:	e7e1      	b.n	8010eda <rshift+0x68>

08010f16 <__hexdig_fun>:
 8010f16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010f1a:	2b09      	cmp	r3, #9
 8010f1c:	d802      	bhi.n	8010f24 <__hexdig_fun+0xe>
 8010f1e:	3820      	subs	r0, #32
 8010f20:	b2c0      	uxtb	r0, r0
 8010f22:	4770      	bx	lr
 8010f24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010f28:	2b05      	cmp	r3, #5
 8010f2a:	d801      	bhi.n	8010f30 <__hexdig_fun+0x1a>
 8010f2c:	3847      	subs	r0, #71	; 0x47
 8010f2e:	e7f7      	b.n	8010f20 <__hexdig_fun+0xa>
 8010f30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010f34:	2b05      	cmp	r3, #5
 8010f36:	d801      	bhi.n	8010f3c <__hexdig_fun+0x26>
 8010f38:	3827      	subs	r0, #39	; 0x27
 8010f3a:	e7f1      	b.n	8010f20 <__hexdig_fun+0xa>
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	4770      	bx	lr

08010f40 <__gethex>:
 8010f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f44:	ed2d 8b02 	vpush	{d8}
 8010f48:	b089      	sub	sp, #36	; 0x24
 8010f4a:	ee08 0a10 	vmov	s16, r0
 8010f4e:	9304      	str	r3, [sp, #16]
 8010f50:	4bb4      	ldr	r3, [pc, #720]	; (8011224 <__gethex+0x2e4>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	9301      	str	r3, [sp, #4]
 8010f56:	4618      	mov	r0, r3
 8010f58:	468b      	mov	fp, r1
 8010f5a:	4690      	mov	r8, r2
 8010f5c:	f7ef f960 	bl	8000220 <strlen>
 8010f60:	9b01      	ldr	r3, [sp, #4]
 8010f62:	f8db 2000 	ldr.w	r2, [fp]
 8010f66:	4403      	add	r3, r0
 8010f68:	4682      	mov	sl, r0
 8010f6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010f6e:	9305      	str	r3, [sp, #20]
 8010f70:	1c93      	adds	r3, r2, #2
 8010f72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010f76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010f7a:	32fe      	adds	r2, #254	; 0xfe
 8010f7c:	18d1      	adds	r1, r2, r3
 8010f7e:	461f      	mov	r7, r3
 8010f80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010f84:	9100      	str	r1, [sp, #0]
 8010f86:	2830      	cmp	r0, #48	; 0x30
 8010f88:	d0f8      	beq.n	8010f7c <__gethex+0x3c>
 8010f8a:	f7ff ffc4 	bl	8010f16 <__hexdig_fun>
 8010f8e:	4604      	mov	r4, r0
 8010f90:	2800      	cmp	r0, #0
 8010f92:	d13a      	bne.n	801100a <__gethex+0xca>
 8010f94:	9901      	ldr	r1, [sp, #4]
 8010f96:	4652      	mov	r2, sl
 8010f98:	4638      	mov	r0, r7
 8010f9a:	f001 fc28 	bl	80127ee <strncmp>
 8010f9e:	4605      	mov	r5, r0
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d168      	bne.n	8011076 <__gethex+0x136>
 8010fa4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010fa8:	eb07 060a 	add.w	r6, r7, sl
 8010fac:	f7ff ffb3 	bl	8010f16 <__hexdig_fun>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	d062      	beq.n	801107a <__gethex+0x13a>
 8010fb4:	4633      	mov	r3, r6
 8010fb6:	7818      	ldrb	r0, [r3, #0]
 8010fb8:	2830      	cmp	r0, #48	; 0x30
 8010fba:	461f      	mov	r7, r3
 8010fbc:	f103 0301 	add.w	r3, r3, #1
 8010fc0:	d0f9      	beq.n	8010fb6 <__gethex+0x76>
 8010fc2:	f7ff ffa8 	bl	8010f16 <__hexdig_fun>
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	fab0 f480 	clz	r4, r0
 8010fcc:	0964      	lsrs	r4, r4, #5
 8010fce:	4635      	mov	r5, r6
 8010fd0:	9300      	str	r3, [sp, #0]
 8010fd2:	463a      	mov	r2, r7
 8010fd4:	4616      	mov	r6, r2
 8010fd6:	3201      	adds	r2, #1
 8010fd8:	7830      	ldrb	r0, [r6, #0]
 8010fda:	f7ff ff9c 	bl	8010f16 <__hexdig_fun>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d1f8      	bne.n	8010fd4 <__gethex+0x94>
 8010fe2:	9901      	ldr	r1, [sp, #4]
 8010fe4:	4652      	mov	r2, sl
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f001 fc01 	bl	80127ee <strncmp>
 8010fec:	b980      	cbnz	r0, 8011010 <__gethex+0xd0>
 8010fee:	b94d      	cbnz	r5, 8011004 <__gethex+0xc4>
 8010ff0:	eb06 050a 	add.w	r5, r6, sl
 8010ff4:	462a      	mov	r2, r5
 8010ff6:	4616      	mov	r6, r2
 8010ff8:	3201      	adds	r2, #1
 8010ffa:	7830      	ldrb	r0, [r6, #0]
 8010ffc:	f7ff ff8b 	bl	8010f16 <__hexdig_fun>
 8011000:	2800      	cmp	r0, #0
 8011002:	d1f8      	bne.n	8010ff6 <__gethex+0xb6>
 8011004:	1bad      	subs	r5, r5, r6
 8011006:	00ad      	lsls	r5, r5, #2
 8011008:	e004      	b.n	8011014 <__gethex+0xd4>
 801100a:	2400      	movs	r4, #0
 801100c:	4625      	mov	r5, r4
 801100e:	e7e0      	b.n	8010fd2 <__gethex+0x92>
 8011010:	2d00      	cmp	r5, #0
 8011012:	d1f7      	bne.n	8011004 <__gethex+0xc4>
 8011014:	7833      	ldrb	r3, [r6, #0]
 8011016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801101a:	2b50      	cmp	r3, #80	; 0x50
 801101c:	d13b      	bne.n	8011096 <__gethex+0x156>
 801101e:	7873      	ldrb	r3, [r6, #1]
 8011020:	2b2b      	cmp	r3, #43	; 0x2b
 8011022:	d02c      	beq.n	801107e <__gethex+0x13e>
 8011024:	2b2d      	cmp	r3, #45	; 0x2d
 8011026:	d02e      	beq.n	8011086 <__gethex+0x146>
 8011028:	1c71      	adds	r1, r6, #1
 801102a:	f04f 0900 	mov.w	r9, #0
 801102e:	7808      	ldrb	r0, [r1, #0]
 8011030:	f7ff ff71 	bl	8010f16 <__hexdig_fun>
 8011034:	1e43      	subs	r3, r0, #1
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b18      	cmp	r3, #24
 801103a:	d82c      	bhi.n	8011096 <__gethex+0x156>
 801103c:	f1a0 0210 	sub.w	r2, r0, #16
 8011040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011044:	f7ff ff67 	bl	8010f16 <__hexdig_fun>
 8011048:	1e43      	subs	r3, r0, #1
 801104a:	b2db      	uxtb	r3, r3
 801104c:	2b18      	cmp	r3, #24
 801104e:	d91d      	bls.n	801108c <__gethex+0x14c>
 8011050:	f1b9 0f00 	cmp.w	r9, #0
 8011054:	d000      	beq.n	8011058 <__gethex+0x118>
 8011056:	4252      	negs	r2, r2
 8011058:	4415      	add	r5, r2
 801105a:	f8cb 1000 	str.w	r1, [fp]
 801105e:	b1e4      	cbz	r4, 801109a <__gethex+0x15a>
 8011060:	9b00      	ldr	r3, [sp, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	bf14      	ite	ne
 8011066:	2700      	movne	r7, #0
 8011068:	2706      	moveq	r7, #6
 801106a:	4638      	mov	r0, r7
 801106c:	b009      	add	sp, #36	; 0x24
 801106e:	ecbd 8b02 	vpop	{d8}
 8011072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011076:	463e      	mov	r6, r7
 8011078:	4625      	mov	r5, r4
 801107a:	2401      	movs	r4, #1
 801107c:	e7ca      	b.n	8011014 <__gethex+0xd4>
 801107e:	f04f 0900 	mov.w	r9, #0
 8011082:	1cb1      	adds	r1, r6, #2
 8011084:	e7d3      	b.n	801102e <__gethex+0xee>
 8011086:	f04f 0901 	mov.w	r9, #1
 801108a:	e7fa      	b.n	8011082 <__gethex+0x142>
 801108c:	230a      	movs	r3, #10
 801108e:	fb03 0202 	mla	r2, r3, r2, r0
 8011092:	3a10      	subs	r2, #16
 8011094:	e7d4      	b.n	8011040 <__gethex+0x100>
 8011096:	4631      	mov	r1, r6
 8011098:	e7df      	b.n	801105a <__gethex+0x11a>
 801109a:	1bf3      	subs	r3, r6, r7
 801109c:	3b01      	subs	r3, #1
 801109e:	4621      	mov	r1, r4
 80110a0:	2b07      	cmp	r3, #7
 80110a2:	dc0b      	bgt.n	80110bc <__gethex+0x17c>
 80110a4:	ee18 0a10 	vmov	r0, s16
 80110a8:	f000 fad8 	bl	801165c <_Balloc>
 80110ac:	4604      	mov	r4, r0
 80110ae:	b940      	cbnz	r0, 80110c2 <__gethex+0x182>
 80110b0:	4b5d      	ldr	r3, [pc, #372]	; (8011228 <__gethex+0x2e8>)
 80110b2:	4602      	mov	r2, r0
 80110b4:	21de      	movs	r1, #222	; 0xde
 80110b6:	485d      	ldr	r0, [pc, #372]	; (801122c <__gethex+0x2ec>)
 80110b8:	f001 fbcc 	bl	8012854 <__assert_func>
 80110bc:	3101      	adds	r1, #1
 80110be:	105b      	asrs	r3, r3, #1
 80110c0:	e7ee      	b.n	80110a0 <__gethex+0x160>
 80110c2:	f100 0914 	add.w	r9, r0, #20
 80110c6:	f04f 0b00 	mov.w	fp, #0
 80110ca:	f1ca 0301 	rsb	r3, sl, #1
 80110ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80110d2:	f8cd b000 	str.w	fp, [sp]
 80110d6:	9306      	str	r3, [sp, #24]
 80110d8:	42b7      	cmp	r7, r6
 80110da:	d340      	bcc.n	801115e <__gethex+0x21e>
 80110dc:	9802      	ldr	r0, [sp, #8]
 80110de:	9b00      	ldr	r3, [sp, #0]
 80110e0:	f840 3b04 	str.w	r3, [r0], #4
 80110e4:	eba0 0009 	sub.w	r0, r0, r9
 80110e8:	1080      	asrs	r0, r0, #2
 80110ea:	0146      	lsls	r6, r0, #5
 80110ec:	6120      	str	r0, [r4, #16]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f000 fba6 	bl	8011840 <__hi0bits>
 80110f4:	1a30      	subs	r0, r6, r0
 80110f6:	f8d8 6000 	ldr.w	r6, [r8]
 80110fa:	42b0      	cmp	r0, r6
 80110fc:	dd63      	ble.n	80111c6 <__gethex+0x286>
 80110fe:	1b87      	subs	r7, r0, r6
 8011100:	4639      	mov	r1, r7
 8011102:	4620      	mov	r0, r4
 8011104:	f000 ff4a 	bl	8011f9c <__any_on>
 8011108:	4682      	mov	sl, r0
 801110a:	b1a8      	cbz	r0, 8011138 <__gethex+0x1f8>
 801110c:	1e7b      	subs	r3, r7, #1
 801110e:	1159      	asrs	r1, r3, #5
 8011110:	f003 021f 	and.w	r2, r3, #31
 8011114:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011118:	f04f 0a01 	mov.w	sl, #1
 801111c:	fa0a f202 	lsl.w	r2, sl, r2
 8011120:	420a      	tst	r2, r1
 8011122:	d009      	beq.n	8011138 <__gethex+0x1f8>
 8011124:	4553      	cmp	r3, sl
 8011126:	dd05      	ble.n	8011134 <__gethex+0x1f4>
 8011128:	1eb9      	subs	r1, r7, #2
 801112a:	4620      	mov	r0, r4
 801112c:	f000 ff36 	bl	8011f9c <__any_on>
 8011130:	2800      	cmp	r0, #0
 8011132:	d145      	bne.n	80111c0 <__gethex+0x280>
 8011134:	f04f 0a02 	mov.w	sl, #2
 8011138:	4639      	mov	r1, r7
 801113a:	4620      	mov	r0, r4
 801113c:	f7ff fe99 	bl	8010e72 <rshift>
 8011140:	443d      	add	r5, r7
 8011142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011146:	42ab      	cmp	r3, r5
 8011148:	da4c      	bge.n	80111e4 <__gethex+0x2a4>
 801114a:	ee18 0a10 	vmov	r0, s16
 801114e:	4621      	mov	r1, r4
 8011150:	f000 fac4 	bl	80116dc <_Bfree>
 8011154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011156:	2300      	movs	r3, #0
 8011158:	6013      	str	r3, [r2, #0]
 801115a:	27a3      	movs	r7, #163	; 0xa3
 801115c:	e785      	b.n	801106a <__gethex+0x12a>
 801115e:	1e73      	subs	r3, r6, #1
 8011160:	9a05      	ldr	r2, [sp, #20]
 8011162:	9303      	str	r3, [sp, #12]
 8011164:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011168:	4293      	cmp	r3, r2
 801116a:	d019      	beq.n	80111a0 <__gethex+0x260>
 801116c:	f1bb 0f20 	cmp.w	fp, #32
 8011170:	d107      	bne.n	8011182 <__gethex+0x242>
 8011172:	9b02      	ldr	r3, [sp, #8]
 8011174:	9a00      	ldr	r2, [sp, #0]
 8011176:	f843 2b04 	str.w	r2, [r3], #4
 801117a:	9302      	str	r3, [sp, #8]
 801117c:	2300      	movs	r3, #0
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	469b      	mov	fp, r3
 8011182:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011186:	f7ff fec6 	bl	8010f16 <__hexdig_fun>
 801118a:	9b00      	ldr	r3, [sp, #0]
 801118c:	f000 000f 	and.w	r0, r0, #15
 8011190:	fa00 f00b 	lsl.w	r0, r0, fp
 8011194:	4303      	orrs	r3, r0
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	f10b 0b04 	add.w	fp, fp, #4
 801119c:	9b03      	ldr	r3, [sp, #12]
 801119e:	e00d      	b.n	80111bc <__gethex+0x27c>
 80111a0:	9b03      	ldr	r3, [sp, #12]
 80111a2:	9a06      	ldr	r2, [sp, #24]
 80111a4:	4413      	add	r3, r2
 80111a6:	42bb      	cmp	r3, r7
 80111a8:	d3e0      	bcc.n	801116c <__gethex+0x22c>
 80111aa:	4618      	mov	r0, r3
 80111ac:	9901      	ldr	r1, [sp, #4]
 80111ae:	9307      	str	r3, [sp, #28]
 80111b0:	4652      	mov	r2, sl
 80111b2:	f001 fb1c 	bl	80127ee <strncmp>
 80111b6:	9b07      	ldr	r3, [sp, #28]
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d1d7      	bne.n	801116c <__gethex+0x22c>
 80111bc:	461e      	mov	r6, r3
 80111be:	e78b      	b.n	80110d8 <__gethex+0x198>
 80111c0:	f04f 0a03 	mov.w	sl, #3
 80111c4:	e7b8      	b.n	8011138 <__gethex+0x1f8>
 80111c6:	da0a      	bge.n	80111de <__gethex+0x29e>
 80111c8:	1a37      	subs	r7, r6, r0
 80111ca:	4621      	mov	r1, r4
 80111cc:	ee18 0a10 	vmov	r0, s16
 80111d0:	463a      	mov	r2, r7
 80111d2:	f000 fc9f 	bl	8011b14 <__lshift>
 80111d6:	1bed      	subs	r5, r5, r7
 80111d8:	4604      	mov	r4, r0
 80111da:	f100 0914 	add.w	r9, r0, #20
 80111de:	f04f 0a00 	mov.w	sl, #0
 80111e2:	e7ae      	b.n	8011142 <__gethex+0x202>
 80111e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80111e8:	42a8      	cmp	r0, r5
 80111ea:	dd72      	ble.n	80112d2 <__gethex+0x392>
 80111ec:	1b45      	subs	r5, r0, r5
 80111ee:	42ae      	cmp	r6, r5
 80111f0:	dc36      	bgt.n	8011260 <__gethex+0x320>
 80111f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111f6:	2b02      	cmp	r3, #2
 80111f8:	d02a      	beq.n	8011250 <__gethex+0x310>
 80111fa:	2b03      	cmp	r3, #3
 80111fc:	d02c      	beq.n	8011258 <__gethex+0x318>
 80111fe:	2b01      	cmp	r3, #1
 8011200:	d11c      	bne.n	801123c <__gethex+0x2fc>
 8011202:	42ae      	cmp	r6, r5
 8011204:	d11a      	bne.n	801123c <__gethex+0x2fc>
 8011206:	2e01      	cmp	r6, #1
 8011208:	d112      	bne.n	8011230 <__gethex+0x2f0>
 801120a:	9a04      	ldr	r2, [sp, #16]
 801120c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011210:	6013      	str	r3, [r2, #0]
 8011212:	2301      	movs	r3, #1
 8011214:	6123      	str	r3, [r4, #16]
 8011216:	f8c9 3000 	str.w	r3, [r9]
 801121a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801121c:	2762      	movs	r7, #98	; 0x62
 801121e:	601c      	str	r4, [r3, #0]
 8011220:	e723      	b.n	801106a <__gethex+0x12a>
 8011222:	bf00      	nop
 8011224:	080144dc 	.word	0x080144dc
 8011228:	08014400 	.word	0x08014400
 801122c:	08014474 	.word	0x08014474
 8011230:	1e71      	subs	r1, r6, #1
 8011232:	4620      	mov	r0, r4
 8011234:	f000 feb2 	bl	8011f9c <__any_on>
 8011238:	2800      	cmp	r0, #0
 801123a:	d1e6      	bne.n	801120a <__gethex+0x2ca>
 801123c:	ee18 0a10 	vmov	r0, s16
 8011240:	4621      	mov	r1, r4
 8011242:	f000 fa4b 	bl	80116dc <_Bfree>
 8011246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011248:	2300      	movs	r3, #0
 801124a:	6013      	str	r3, [r2, #0]
 801124c:	2750      	movs	r7, #80	; 0x50
 801124e:	e70c      	b.n	801106a <__gethex+0x12a>
 8011250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1f2      	bne.n	801123c <__gethex+0x2fc>
 8011256:	e7d8      	b.n	801120a <__gethex+0x2ca>
 8011258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801125a:	2b00      	cmp	r3, #0
 801125c:	d1d5      	bne.n	801120a <__gethex+0x2ca>
 801125e:	e7ed      	b.n	801123c <__gethex+0x2fc>
 8011260:	1e6f      	subs	r7, r5, #1
 8011262:	f1ba 0f00 	cmp.w	sl, #0
 8011266:	d131      	bne.n	80112cc <__gethex+0x38c>
 8011268:	b127      	cbz	r7, 8011274 <__gethex+0x334>
 801126a:	4639      	mov	r1, r7
 801126c:	4620      	mov	r0, r4
 801126e:	f000 fe95 	bl	8011f9c <__any_on>
 8011272:	4682      	mov	sl, r0
 8011274:	117b      	asrs	r3, r7, #5
 8011276:	2101      	movs	r1, #1
 8011278:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801127c:	f007 071f 	and.w	r7, r7, #31
 8011280:	fa01 f707 	lsl.w	r7, r1, r7
 8011284:	421f      	tst	r7, r3
 8011286:	4629      	mov	r1, r5
 8011288:	4620      	mov	r0, r4
 801128a:	bf18      	it	ne
 801128c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011290:	1b76      	subs	r6, r6, r5
 8011292:	f7ff fdee 	bl	8010e72 <rshift>
 8011296:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801129a:	2702      	movs	r7, #2
 801129c:	f1ba 0f00 	cmp.w	sl, #0
 80112a0:	d048      	beq.n	8011334 <__gethex+0x3f4>
 80112a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112a6:	2b02      	cmp	r3, #2
 80112a8:	d015      	beq.n	80112d6 <__gethex+0x396>
 80112aa:	2b03      	cmp	r3, #3
 80112ac:	d017      	beq.n	80112de <__gethex+0x39e>
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d109      	bne.n	80112c6 <__gethex+0x386>
 80112b2:	f01a 0f02 	tst.w	sl, #2
 80112b6:	d006      	beq.n	80112c6 <__gethex+0x386>
 80112b8:	f8d9 0000 	ldr.w	r0, [r9]
 80112bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80112c0:	f01a 0f01 	tst.w	sl, #1
 80112c4:	d10e      	bne.n	80112e4 <__gethex+0x3a4>
 80112c6:	f047 0710 	orr.w	r7, r7, #16
 80112ca:	e033      	b.n	8011334 <__gethex+0x3f4>
 80112cc:	f04f 0a01 	mov.w	sl, #1
 80112d0:	e7d0      	b.n	8011274 <__gethex+0x334>
 80112d2:	2701      	movs	r7, #1
 80112d4:	e7e2      	b.n	801129c <__gethex+0x35c>
 80112d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112d8:	f1c3 0301 	rsb	r3, r3, #1
 80112dc:	9315      	str	r3, [sp, #84]	; 0x54
 80112de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d0f0      	beq.n	80112c6 <__gethex+0x386>
 80112e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80112e8:	f104 0314 	add.w	r3, r4, #20
 80112ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80112f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80112f4:	f04f 0c00 	mov.w	ip, #0
 80112f8:	4618      	mov	r0, r3
 80112fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80112fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011302:	d01c      	beq.n	801133e <__gethex+0x3fe>
 8011304:	3201      	adds	r2, #1
 8011306:	6002      	str	r2, [r0, #0]
 8011308:	2f02      	cmp	r7, #2
 801130a:	f104 0314 	add.w	r3, r4, #20
 801130e:	d13f      	bne.n	8011390 <__gethex+0x450>
 8011310:	f8d8 2000 	ldr.w	r2, [r8]
 8011314:	3a01      	subs	r2, #1
 8011316:	42b2      	cmp	r2, r6
 8011318:	d10a      	bne.n	8011330 <__gethex+0x3f0>
 801131a:	1171      	asrs	r1, r6, #5
 801131c:	2201      	movs	r2, #1
 801131e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011322:	f006 061f 	and.w	r6, r6, #31
 8011326:	fa02 f606 	lsl.w	r6, r2, r6
 801132a:	421e      	tst	r6, r3
 801132c:	bf18      	it	ne
 801132e:	4617      	movne	r7, r2
 8011330:	f047 0720 	orr.w	r7, r7, #32
 8011334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011336:	601c      	str	r4, [r3, #0]
 8011338:	9b04      	ldr	r3, [sp, #16]
 801133a:	601d      	str	r5, [r3, #0]
 801133c:	e695      	b.n	801106a <__gethex+0x12a>
 801133e:	4299      	cmp	r1, r3
 8011340:	f843 cc04 	str.w	ip, [r3, #-4]
 8011344:	d8d8      	bhi.n	80112f8 <__gethex+0x3b8>
 8011346:	68a3      	ldr	r3, [r4, #8]
 8011348:	459b      	cmp	fp, r3
 801134a:	db19      	blt.n	8011380 <__gethex+0x440>
 801134c:	6861      	ldr	r1, [r4, #4]
 801134e:	ee18 0a10 	vmov	r0, s16
 8011352:	3101      	adds	r1, #1
 8011354:	f000 f982 	bl	801165c <_Balloc>
 8011358:	4681      	mov	r9, r0
 801135a:	b918      	cbnz	r0, 8011364 <__gethex+0x424>
 801135c:	4b1a      	ldr	r3, [pc, #104]	; (80113c8 <__gethex+0x488>)
 801135e:	4602      	mov	r2, r0
 8011360:	2184      	movs	r1, #132	; 0x84
 8011362:	e6a8      	b.n	80110b6 <__gethex+0x176>
 8011364:	6922      	ldr	r2, [r4, #16]
 8011366:	3202      	adds	r2, #2
 8011368:	f104 010c 	add.w	r1, r4, #12
 801136c:	0092      	lsls	r2, r2, #2
 801136e:	300c      	adds	r0, #12
 8011370:	f7fc fe86 	bl	800e080 <memcpy>
 8011374:	4621      	mov	r1, r4
 8011376:	ee18 0a10 	vmov	r0, s16
 801137a:	f000 f9af 	bl	80116dc <_Bfree>
 801137e:	464c      	mov	r4, r9
 8011380:	6923      	ldr	r3, [r4, #16]
 8011382:	1c5a      	adds	r2, r3, #1
 8011384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011388:	6122      	str	r2, [r4, #16]
 801138a:	2201      	movs	r2, #1
 801138c:	615a      	str	r2, [r3, #20]
 801138e:	e7bb      	b.n	8011308 <__gethex+0x3c8>
 8011390:	6922      	ldr	r2, [r4, #16]
 8011392:	455a      	cmp	r2, fp
 8011394:	dd0b      	ble.n	80113ae <__gethex+0x46e>
 8011396:	2101      	movs	r1, #1
 8011398:	4620      	mov	r0, r4
 801139a:	f7ff fd6a 	bl	8010e72 <rshift>
 801139e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113a2:	3501      	adds	r5, #1
 80113a4:	42ab      	cmp	r3, r5
 80113a6:	f6ff aed0 	blt.w	801114a <__gethex+0x20a>
 80113aa:	2701      	movs	r7, #1
 80113ac:	e7c0      	b.n	8011330 <__gethex+0x3f0>
 80113ae:	f016 061f 	ands.w	r6, r6, #31
 80113b2:	d0fa      	beq.n	80113aa <__gethex+0x46a>
 80113b4:	4453      	add	r3, sl
 80113b6:	f1c6 0620 	rsb	r6, r6, #32
 80113ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80113be:	f000 fa3f 	bl	8011840 <__hi0bits>
 80113c2:	42b0      	cmp	r0, r6
 80113c4:	dbe7      	blt.n	8011396 <__gethex+0x456>
 80113c6:	e7f0      	b.n	80113aa <__gethex+0x46a>
 80113c8:	08014400 	.word	0x08014400

080113cc <L_shift>:
 80113cc:	f1c2 0208 	rsb	r2, r2, #8
 80113d0:	0092      	lsls	r2, r2, #2
 80113d2:	b570      	push	{r4, r5, r6, lr}
 80113d4:	f1c2 0620 	rsb	r6, r2, #32
 80113d8:	6843      	ldr	r3, [r0, #4]
 80113da:	6804      	ldr	r4, [r0, #0]
 80113dc:	fa03 f506 	lsl.w	r5, r3, r6
 80113e0:	432c      	orrs	r4, r5
 80113e2:	40d3      	lsrs	r3, r2
 80113e4:	6004      	str	r4, [r0, #0]
 80113e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80113ea:	4288      	cmp	r0, r1
 80113ec:	d3f4      	bcc.n	80113d8 <L_shift+0xc>
 80113ee:	bd70      	pop	{r4, r5, r6, pc}

080113f0 <__match>:
 80113f0:	b530      	push	{r4, r5, lr}
 80113f2:	6803      	ldr	r3, [r0, #0]
 80113f4:	3301      	adds	r3, #1
 80113f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113fa:	b914      	cbnz	r4, 8011402 <__match+0x12>
 80113fc:	6003      	str	r3, [r0, #0]
 80113fe:	2001      	movs	r0, #1
 8011400:	bd30      	pop	{r4, r5, pc}
 8011402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801140a:	2d19      	cmp	r5, #25
 801140c:	bf98      	it	ls
 801140e:	3220      	addls	r2, #32
 8011410:	42a2      	cmp	r2, r4
 8011412:	d0f0      	beq.n	80113f6 <__match+0x6>
 8011414:	2000      	movs	r0, #0
 8011416:	e7f3      	b.n	8011400 <__match+0x10>

08011418 <__hexnan>:
 8011418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141c:	680b      	ldr	r3, [r1, #0]
 801141e:	115e      	asrs	r6, r3, #5
 8011420:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011424:	f013 031f 	ands.w	r3, r3, #31
 8011428:	b087      	sub	sp, #28
 801142a:	bf18      	it	ne
 801142c:	3604      	addne	r6, #4
 801142e:	2500      	movs	r5, #0
 8011430:	1f37      	subs	r7, r6, #4
 8011432:	4690      	mov	r8, r2
 8011434:	6802      	ldr	r2, [r0, #0]
 8011436:	9301      	str	r3, [sp, #4]
 8011438:	4682      	mov	sl, r0
 801143a:	f846 5c04 	str.w	r5, [r6, #-4]
 801143e:	46b9      	mov	r9, r7
 8011440:	463c      	mov	r4, r7
 8011442:	9502      	str	r5, [sp, #8]
 8011444:	46ab      	mov	fp, r5
 8011446:	7851      	ldrb	r1, [r2, #1]
 8011448:	1c53      	adds	r3, r2, #1
 801144a:	9303      	str	r3, [sp, #12]
 801144c:	b341      	cbz	r1, 80114a0 <__hexnan+0x88>
 801144e:	4608      	mov	r0, r1
 8011450:	9205      	str	r2, [sp, #20]
 8011452:	9104      	str	r1, [sp, #16]
 8011454:	f7ff fd5f 	bl	8010f16 <__hexdig_fun>
 8011458:	2800      	cmp	r0, #0
 801145a:	d14f      	bne.n	80114fc <__hexnan+0xe4>
 801145c:	9904      	ldr	r1, [sp, #16]
 801145e:	9a05      	ldr	r2, [sp, #20]
 8011460:	2920      	cmp	r1, #32
 8011462:	d818      	bhi.n	8011496 <__hexnan+0x7e>
 8011464:	9b02      	ldr	r3, [sp, #8]
 8011466:	459b      	cmp	fp, r3
 8011468:	dd13      	ble.n	8011492 <__hexnan+0x7a>
 801146a:	454c      	cmp	r4, r9
 801146c:	d206      	bcs.n	801147c <__hexnan+0x64>
 801146e:	2d07      	cmp	r5, #7
 8011470:	dc04      	bgt.n	801147c <__hexnan+0x64>
 8011472:	462a      	mov	r2, r5
 8011474:	4649      	mov	r1, r9
 8011476:	4620      	mov	r0, r4
 8011478:	f7ff ffa8 	bl	80113cc <L_shift>
 801147c:	4544      	cmp	r4, r8
 801147e:	d950      	bls.n	8011522 <__hexnan+0x10a>
 8011480:	2300      	movs	r3, #0
 8011482:	f1a4 0904 	sub.w	r9, r4, #4
 8011486:	f844 3c04 	str.w	r3, [r4, #-4]
 801148a:	f8cd b008 	str.w	fp, [sp, #8]
 801148e:	464c      	mov	r4, r9
 8011490:	461d      	mov	r5, r3
 8011492:	9a03      	ldr	r2, [sp, #12]
 8011494:	e7d7      	b.n	8011446 <__hexnan+0x2e>
 8011496:	2929      	cmp	r1, #41	; 0x29
 8011498:	d156      	bne.n	8011548 <__hexnan+0x130>
 801149a:	3202      	adds	r2, #2
 801149c:	f8ca 2000 	str.w	r2, [sl]
 80114a0:	f1bb 0f00 	cmp.w	fp, #0
 80114a4:	d050      	beq.n	8011548 <__hexnan+0x130>
 80114a6:	454c      	cmp	r4, r9
 80114a8:	d206      	bcs.n	80114b8 <__hexnan+0xa0>
 80114aa:	2d07      	cmp	r5, #7
 80114ac:	dc04      	bgt.n	80114b8 <__hexnan+0xa0>
 80114ae:	462a      	mov	r2, r5
 80114b0:	4649      	mov	r1, r9
 80114b2:	4620      	mov	r0, r4
 80114b4:	f7ff ff8a 	bl	80113cc <L_shift>
 80114b8:	4544      	cmp	r4, r8
 80114ba:	d934      	bls.n	8011526 <__hexnan+0x10e>
 80114bc:	f1a8 0204 	sub.w	r2, r8, #4
 80114c0:	4623      	mov	r3, r4
 80114c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80114c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80114ca:	429f      	cmp	r7, r3
 80114cc:	d2f9      	bcs.n	80114c2 <__hexnan+0xaa>
 80114ce:	1b3b      	subs	r3, r7, r4
 80114d0:	f023 0303 	bic.w	r3, r3, #3
 80114d4:	3304      	adds	r3, #4
 80114d6:	3401      	adds	r4, #1
 80114d8:	3e03      	subs	r6, #3
 80114da:	42b4      	cmp	r4, r6
 80114dc:	bf88      	it	hi
 80114de:	2304      	movhi	r3, #4
 80114e0:	4443      	add	r3, r8
 80114e2:	2200      	movs	r2, #0
 80114e4:	f843 2b04 	str.w	r2, [r3], #4
 80114e8:	429f      	cmp	r7, r3
 80114ea:	d2fb      	bcs.n	80114e4 <__hexnan+0xcc>
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	b91b      	cbnz	r3, 80114f8 <__hexnan+0xe0>
 80114f0:	4547      	cmp	r7, r8
 80114f2:	d127      	bne.n	8011544 <__hexnan+0x12c>
 80114f4:	2301      	movs	r3, #1
 80114f6:	603b      	str	r3, [r7, #0]
 80114f8:	2005      	movs	r0, #5
 80114fa:	e026      	b.n	801154a <__hexnan+0x132>
 80114fc:	3501      	adds	r5, #1
 80114fe:	2d08      	cmp	r5, #8
 8011500:	f10b 0b01 	add.w	fp, fp, #1
 8011504:	dd06      	ble.n	8011514 <__hexnan+0xfc>
 8011506:	4544      	cmp	r4, r8
 8011508:	d9c3      	bls.n	8011492 <__hexnan+0x7a>
 801150a:	2300      	movs	r3, #0
 801150c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011510:	2501      	movs	r5, #1
 8011512:	3c04      	subs	r4, #4
 8011514:	6822      	ldr	r2, [r4, #0]
 8011516:	f000 000f 	and.w	r0, r0, #15
 801151a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801151e:	6022      	str	r2, [r4, #0]
 8011520:	e7b7      	b.n	8011492 <__hexnan+0x7a>
 8011522:	2508      	movs	r5, #8
 8011524:	e7b5      	b.n	8011492 <__hexnan+0x7a>
 8011526:	9b01      	ldr	r3, [sp, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d0df      	beq.n	80114ec <__hexnan+0xd4>
 801152c:	f04f 32ff 	mov.w	r2, #4294967295
 8011530:	f1c3 0320 	rsb	r3, r3, #32
 8011534:	fa22 f303 	lsr.w	r3, r2, r3
 8011538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801153c:	401a      	ands	r2, r3
 801153e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011542:	e7d3      	b.n	80114ec <__hexnan+0xd4>
 8011544:	3f04      	subs	r7, #4
 8011546:	e7d1      	b.n	80114ec <__hexnan+0xd4>
 8011548:	2004      	movs	r0, #4
 801154a:	b007      	add	sp, #28
 801154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011550 <_localeconv_r>:
 8011550:	4800      	ldr	r0, [pc, #0]	; (8011554 <_localeconv_r+0x4>)
 8011552:	4770      	bx	lr
 8011554:	200001a4 	.word	0x200001a4

08011558 <__retarget_lock_init_recursive>:
 8011558:	4770      	bx	lr

0801155a <__retarget_lock_acquire_recursive>:
 801155a:	4770      	bx	lr

0801155c <__retarget_lock_release_recursive>:
 801155c:	4770      	bx	lr

0801155e <__swhatbuf_r>:
 801155e:	b570      	push	{r4, r5, r6, lr}
 8011560:	460e      	mov	r6, r1
 8011562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011566:	2900      	cmp	r1, #0
 8011568:	b096      	sub	sp, #88	; 0x58
 801156a:	4614      	mov	r4, r2
 801156c:	461d      	mov	r5, r3
 801156e:	da08      	bge.n	8011582 <__swhatbuf_r+0x24>
 8011570:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011574:	2200      	movs	r2, #0
 8011576:	602a      	str	r2, [r5, #0]
 8011578:	061a      	lsls	r2, r3, #24
 801157a:	d410      	bmi.n	801159e <__swhatbuf_r+0x40>
 801157c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011580:	e00e      	b.n	80115a0 <__swhatbuf_r+0x42>
 8011582:	466a      	mov	r2, sp
 8011584:	f001 f9a6 	bl	80128d4 <_fstat_r>
 8011588:	2800      	cmp	r0, #0
 801158a:	dbf1      	blt.n	8011570 <__swhatbuf_r+0x12>
 801158c:	9a01      	ldr	r2, [sp, #4]
 801158e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011596:	425a      	negs	r2, r3
 8011598:	415a      	adcs	r2, r3
 801159a:	602a      	str	r2, [r5, #0]
 801159c:	e7ee      	b.n	801157c <__swhatbuf_r+0x1e>
 801159e:	2340      	movs	r3, #64	; 0x40
 80115a0:	2000      	movs	r0, #0
 80115a2:	6023      	str	r3, [r4, #0]
 80115a4:	b016      	add	sp, #88	; 0x58
 80115a6:	bd70      	pop	{r4, r5, r6, pc}

080115a8 <__smakebuf_r>:
 80115a8:	898b      	ldrh	r3, [r1, #12]
 80115aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115ac:	079d      	lsls	r5, r3, #30
 80115ae:	4606      	mov	r6, r0
 80115b0:	460c      	mov	r4, r1
 80115b2:	d507      	bpl.n	80115c4 <__smakebuf_r+0x1c>
 80115b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	6123      	str	r3, [r4, #16]
 80115bc:	2301      	movs	r3, #1
 80115be:	6163      	str	r3, [r4, #20]
 80115c0:	b002      	add	sp, #8
 80115c2:	bd70      	pop	{r4, r5, r6, pc}
 80115c4:	ab01      	add	r3, sp, #4
 80115c6:	466a      	mov	r2, sp
 80115c8:	f7ff ffc9 	bl	801155e <__swhatbuf_r>
 80115cc:	9900      	ldr	r1, [sp, #0]
 80115ce:	4605      	mov	r5, r0
 80115d0:	4630      	mov	r0, r6
 80115d2:	f000 fd87 	bl	80120e4 <_malloc_r>
 80115d6:	b948      	cbnz	r0, 80115ec <__smakebuf_r+0x44>
 80115d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115dc:	059a      	lsls	r2, r3, #22
 80115de:	d4ef      	bmi.n	80115c0 <__smakebuf_r+0x18>
 80115e0:	f023 0303 	bic.w	r3, r3, #3
 80115e4:	f043 0302 	orr.w	r3, r3, #2
 80115e8:	81a3      	strh	r3, [r4, #12]
 80115ea:	e7e3      	b.n	80115b4 <__smakebuf_r+0xc>
 80115ec:	4b0d      	ldr	r3, [pc, #52]	; (8011624 <__smakebuf_r+0x7c>)
 80115ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80115f0:	89a3      	ldrh	r3, [r4, #12]
 80115f2:	6020      	str	r0, [r4, #0]
 80115f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115f8:	81a3      	strh	r3, [r4, #12]
 80115fa:	9b00      	ldr	r3, [sp, #0]
 80115fc:	6163      	str	r3, [r4, #20]
 80115fe:	9b01      	ldr	r3, [sp, #4]
 8011600:	6120      	str	r0, [r4, #16]
 8011602:	b15b      	cbz	r3, 801161c <__smakebuf_r+0x74>
 8011604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011608:	4630      	mov	r0, r6
 801160a:	f001 f975 	bl	80128f8 <_isatty_r>
 801160e:	b128      	cbz	r0, 801161c <__smakebuf_r+0x74>
 8011610:	89a3      	ldrh	r3, [r4, #12]
 8011612:	f023 0303 	bic.w	r3, r3, #3
 8011616:	f043 0301 	orr.w	r3, r3, #1
 801161a:	81a3      	strh	r3, [r4, #12]
 801161c:	89a0      	ldrh	r0, [r4, #12]
 801161e:	4305      	orrs	r5, r0
 8011620:	81a5      	strh	r5, [r4, #12]
 8011622:	e7cd      	b.n	80115c0 <__smakebuf_r+0x18>
 8011624:	08010cd1 	.word	0x08010cd1

08011628 <malloc>:
 8011628:	4b02      	ldr	r3, [pc, #8]	; (8011634 <malloc+0xc>)
 801162a:	4601      	mov	r1, r0
 801162c:	6818      	ldr	r0, [r3, #0]
 801162e:	f000 bd59 	b.w	80120e4 <_malloc_r>
 8011632:	bf00      	nop
 8011634:	2000004c 	.word	0x2000004c

08011638 <__ascii_mbtowc>:
 8011638:	b082      	sub	sp, #8
 801163a:	b901      	cbnz	r1, 801163e <__ascii_mbtowc+0x6>
 801163c:	a901      	add	r1, sp, #4
 801163e:	b142      	cbz	r2, 8011652 <__ascii_mbtowc+0x1a>
 8011640:	b14b      	cbz	r3, 8011656 <__ascii_mbtowc+0x1e>
 8011642:	7813      	ldrb	r3, [r2, #0]
 8011644:	600b      	str	r3, [r1, #0]
 8011646:	7812      	ldrb	r2, [r2, #0]
 8011648:	1e10      	subs	r0, r2, #0
 801164a:	bf18      	it	ne
 801164c:	2001      	movne	r0, #1
 801164e:	b002      	add	sp, #8
 8011650:	4770      	bx	lr
 8011652:	4610      	mov	r0, r2
 8011654:	e7fb      	b.n	801164e <__ascii_mbtowc+0x16>
 8011656:	f06f 0001 	mvn.w	r0, #1
 801165a:	e7f8      	b.n	801164e <__ascii_mbtowc+0x16>

0801165c <_Balloc>:
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011660:	4604      	mov	r4, r0
 8011662:	460d      	mov	r5, r1
 8011664:	b976      	cbnz	r6, 8011684 <_Balloc+0x28>
 8011666:	2010      	movs	r0, #16
 8011668:	f7ff ffde 	bl	8011628 <malloc>
 801166c:	4602      	mov	r2, r0
 801166e:	6260      	str	r0, [r4, #36]	; 0x24
 8011670:	b920      	cbnz	r0, 801167c <_Balloc+0x20>
 8011672:	4b18      	ldr	r3, [pc, #96]	; (80116d4 <_Balloc+0x78>)
 8011674:	4818      	ldr	r0, [pc, #96]	; (80116d8 <_Balloc+0x7c>)
 8011676:	2166      	movs	r1, #102	; 0x66
 8011678:	f001 f8ec 	bl	8012854 <__assert_func>
 801167c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011680:	6006      	str	r6, [r0, #0]
 8011682:	60c6      	str	r6, [r0, #12]
 8011684:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011686:	68f3      	ldr	r3, [r6, #12]
 8011688:	b183      	cbz	r3, 80116ac <_Balloc+0x50>
 801168a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011692:	b9b8      	cbnz	r0, 80116c4 <_Balloc+0x68>
 8011694:	2101      	movs	r1, #1
 8011696:	fa01 f605 	lsl.w	r6, r1, r5
 801169a:	1d72      	adds	r2, r6, #5
 801169c:	0092      	lsls	r2, r2, #2
 801169e:	4620      	mov	r0, r4
 80116a0:	f000 fc9d 	bl	8011fde <_calloc_r>
 80116a4:	b160      	cbz	r0, 80116c0 <_Balloc+0x64>
 80116a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116aa:	e00e      	b.n	80116ca <_Balloc+0x6e>
 80116ac:	2221      	movs	r2, #33	; 0x21
 80116ae:	2104      	movs	r1, #4
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fc94 	bl	8011fde <_calloc_r>
 80116b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116b8:	60f0      	str	r0, [r6, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d1e4      	bne.n	801168a <_Balloc+0x2e>
 80116c0:	2000      	movs	r0, #0
 80116c2:	bd70      	pop	{r4, r5, r6, pc}
 80116c4:	6802      	ldr	r2, [r0, #0]
 80116c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116ca:	2300      	movs	r3, #0
 80116cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80116d0:	e7f7      	b.n	80116c2 <_Balloc+0x66>
 80116d2:	bf00      	nop
 80116d4:	0801438e 	.word	0x0801438e
 80116d8:	080144f0 	.word	0x080144f0

080116dc <_Bfree>:
 80116dc:	b570      	push	{r4, r5, r6, lr}
 80116de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80116e0:	4605      	mov	r5, r0
 80116e2:	460c      	mov	r4, r1
 80116e4:	b976      	cbnz	r6, 8011704 <_Bfree+0x28>
 80116e6:	2010      	movs	r0, #16
 80116e8:	f7ff ff9e 	bl	8011628 <malloc>
 80116ec:	4602      	mov	r2, r0
 80116ee:	6268      	str	r0, [r5, #36]	; 0x24
 80116f0:	b920      	cbnz	r0, 80116fc <_Bfree+0x20>
 80116f2:	4b09      	ldr	r3, [pc, #36]	; (8011718 <_Bfree+0x3c>)
 80116f4:	4809      	ldr	r0, [pc, #36]	; (801171c <_Bfree+0x40>)
 80116f6:	218a      	movs	r1, #138	; 0x8a
 80116f8:	f001 f8ac 	bl	8012854 <__assert_func>
 80116fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011700:	6006      	str	r6, [r0, #0]
 8011702:	60c6      	str	r6, [r0, #12]
 8011704:	b13c      	cbz	r4, 8011716 <_Bfree+0x3a>
 8011706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011708:	6862      	ldr	r2, [r4, #4]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011710:	6021      	str	r1, [r4, #0]
 8011712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011716:	bd70      	pop	{r4, r5, r6, pc}
 8011718:	0801438e 	.word	0x0801438e
 801171c:	080144f0 	.word	0x080144f0

08011720 <__multadd>:
 8011720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011724:	690d      	ldr	r5, [r1, #16]
 8011726:	4607      	mov	r7, r0
 8011728:	460c      	mov	r4, r1
 801172a:	461e      	mov	r6, r3
 801172c:	f101 0c14 	add.w	ip, r1, #20
 8011730:	2000      	movs	r0, #0
 8011732:	f8dc 3000 	ldr.w	r3, [ip]
 8011736:	b299      	uxth	r1, r3
 8011738:	fb02 6101 	mla	r1, r2, r1, r6
 801173c:	0c1e      	lsrs	r6, r3, #16
 801173e:	0c0b      	lsrs	r3, r1, #16
 8011740:	fb02 3306 	mla	r3, r2, r6, r3
 8011744:	b289      	uxth	r1, r1
 8011746:	3001      	adds	r0, #1
 8011748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801174c:	4285      	cmp	r5, r0
 801174e:	f84c 1b04 	str.w	r1, [ip], #4
 8011752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011756:	dcec      	bgt.n	8011732 <__multadd+0x12>
 8011758:	b30e      	cbz	r6, 801179e <__multadd+0x7e>
 801175a:	68a3      	ldr	r3, [r4, #8]
 801175c:	42ab      	cmp	r3, r5
 801175e:	dc19      	bgt.n	8011794 <__multadd+0x74>
 8011760:	6861      	ldr	r1, [r4, #4]
 8011762:	4638      	mov	r0, r7
 8011764:	3101      	adds	r1, #1
 8011766:	f7ff ff79 	bl	801165c <_Balloc>
 801176a:	4680      	mov	r8, r0
 801176c:	b928      	cbnz	r0, 801177a <__multadd+0x5a>
 801176e:	4602      	mov	r2, r0
 8011770:	4b0c      	ldr	r3, [pc, #48]	; (80117a4 <__multadd+0x84>)
 8011772:	480d      	ldr	r0, [pc, #52]	; (80117a8 <__multadd+0x88>)
 8011774:	21b5      	movs	r1, #181	; 0xb5
 8011776:	f001 f86d 	bl	8012854 <__assert_func>
 801177a:	6922      	ldr	r2, [r4, #16]
 801177c:	3202      	adds	r2, #2
 801177e:	f104 010c 	add.w	r1, r4, #12
 8011782:	0092      	lsls	r2, r2, #2
 8011784:	300c      	adds	r0, #12
 8011786:	f7fc fc7b 	bl	800e080 <memcpy>
 801178a:	4621      	mov	r1, r4
 801178c:	4638      	mov	r0, r7
 801178e:	f7ff ffa5 	bl	80116dc <_Bfree>
 8011792:	4644      	mov	r4, r8
 8011794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011798:	3501      	adds	r5, #1
 801179a:	615e      	str	r6, [r3, #20]
 801179c:	6125      	str	r5, [r4, #16]
 801179e:	4620      	mov	r0, r4
 80117a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a4:	08014400 	.word	0x08014400
 80117a8:	080144f0 	.word	0x080144f0

080117ac <__s2b>:
 80117ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117b0:	460c      	mov	r4, r1
 80117b2:	4615      	mov	r5, r2
 80117b4:	461f      	mov	r7, r3
 80117b6:	2209      	movs	r2, #9
 80117b8:	3308      	adds	r3, #8
 80117ba:	4606      	mov	r6, r0
 80117bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80117c0:	2100      	movs	r1, #0
 80117c2:	2201      	movs	r2, #1
 80117c4:	429a      	cmp	r2, r3
 80117c6:	db09      	blt.n	80117dc <__s2b+0x30>
 80117c8:	4630      	mov	r0, r6
 80117ca:	f7ff ff47 	bl	801165c <_Balloc>
 80117ce:	b940      	cbnz	r0, 80117e2 <__s2b+0x36>
 80117d0:	4602      	mov	r2, r0
 80117d2:	4b19      	ldr	r3, [pc, #100]	; (8011838 <__s2b+0x8c>)
 80117d4:	4819      	ldr	r0, [pc, #100]	; (801183c <__s2b+0x90>)
 80117d6:	21ce      	movs	r1, #206	; 0xce
 80117d8:	f001 f83c 	bl	8012854 <__assert_func>
 80117dc:	0052      	lsls	r2, r2, #1
 80117de:	3101      	adds	r1, #1
 80117e0:	e7f0      	b.n	80117c4 <__s2b+0x18>
 80117e2:	9b08      	ldr	r3, [sp, #32]
 80117e4:	6143      	str	r3, [r0, #20]
 80117e6:	2d09      	cmp	r5, #9
 80117e8:	f04f 0301 	mov.w	r3, #1
 80117ec:	6103      	str	r3, [r0, #16]
 80117ee:	dd16      	ble.n	801181e <__s2b+0x72>
 80117f0:	f104 0909 	add.w	r9, r4, #9
 80117f4:	46c8      	mov	r8, r9
 80117f6:	442c      	add	r4, r5
 80117f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80117fc:	4601      	mov	r1, r0
 80117fe:	3b30      	subs	r3, #48	; 0x30
 8011800:	220a      	movs	r2, #10
 8011802:	4630      	mov	r0, r6
 8011804:	f7ff ff8c 	bl	8011720 <__multadd>
 8011808:	45a0      	cmp	r8, r4
 801180a:	d1f5      	bne.n	80117f8 <__s2b+0x4c>
 801180c:	f1a5 0408 	sub.w	r4, r5, #8
 8011810:	444c      	add	r4, r9
 8011812:	1b2d      	subs	r5, r5, r4
 8011814:	1963      	adds	r3, r4, r5
 8011816:	42bb      	cmp	r3, r7
 8011818:	db04      	blt.n	8011824 <__s2b+0x78>
 801181a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801181e:	340a      	adds	r4, #10
 8011820:	2509      	movs	r5, #9
 8011822:	e7f6      	b.n	8011812 <__s2b+0x66>
 8011824:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011828:	4601      	mov	r1, r0
 801182a:	3b30      	subs	r3, #48	; 0x30
 801182c:	220a      	movs	r2, #10
 801182e:	4630      	mov	r0, r6
 8011830:	f7ff ff76 	bl	8011720 <__multadd>
 8011834:	e7ee      	b.n	8011814 <__s2b+0x68>
 8011836:	bf00      	nop
 8011838:	08014400 	.word	0x08014400
 801183c:	080144f0 	.word	0x080144f0

08011840 <__hi0bits>:
 8011840:	0c03      	lsrs	r3, r0, #16
 8011842:	041b      	lsls	r3, r3, #16
 8011844:	b9d3      	cbnz	r3, 801187c <__hi0bits+0x3c>
 8011846:	0400      	lsls	r0, r0, #16
 8011848:	2310      	movs	r3, #16
 801184a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801184e:	bf04      	itt	eq
 8011850:	0200      	lsleq	r0, r0, #8
 8011852:	3308      	addeq	r3, #8
 8011854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011858:	bf04      	itt	eq
 801185a:	0100      	lsleq	r0, r0, #4
 801185c:	3304      	addeq	r3, #4
 801185e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011862:	bf04      	itt	eq
 8011864:	0080      	lsleq	r0, r0, #2
 8011866:	3302      	addeq	r3, #2
 8011868:	2800      	cmp	r0, #0
 801186a:	db05      	blt.n	8011878 <__hi0bits+0x38>
 801186c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011870:	f103 0301 	add.w	r3, r3, #1
 8011874:	bf08      	it	eq
 8011876:	2320      	moveq	r3, #32
 8011878:	4618      	mov	r0, r3
 801187a:	4770      	bx	lr
 801187c:	2300      	movs	r3, #0
 801187e:	e7e4      	b.n	801184a <__hi0bits+0xa>

08011880 <__lo0bits>:
 8011880:	6803      	ldr	r3, [r0, #0]
 8011882:	f013 0207 	ands.w	r2, r3, #7
 8011886:	4601      	mov	r1, r0
 8011888:	d00b      	beq.n	80118a2 <__lo0bits+0x22>
 801188a:	07da      	lsls	r2, r3, #31
 801188c:	d423      	bmi.n	80118d6 <__lo0bits+0x56>
 801188e:	0798      	lsls	r0, r3, #30
 8011890:	bf49      	itett	mi
 8011892:	085b      	lsrmi	r3, r3, #1
 8011894:	089b      	lsrpl	r3, r3, #2
 8011896:	2001      	movmi	r0, #1
 8011898:	600b      	strmi	r3, [r1, #0]
 801189a:	bf5c      	itt	pl
 801189c:	600b      	strpl	r3, [r1, #0]
 801189e:	2002      	movpl	r0, #2
 80118a0:	4770      	bx	lr
 80118a2:	b298      	uxth	r0, r3
 80118a4:	b9a8      	cbnz	r0, 80118d2 <__lo0bits+0x52>
 80118a6:	0c1b      	lsrs	r3, r3, #16
 80118a8:	2010      	movs	r0, #16
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	b90a      	cbnz	r2, 80118b2 <__lo0bits+0x32>
 80118ae:	3008      	adds	r0, #8
 80118b0:	0a1b      	lsrs	r3, r3, #8
 80118b2:	071a      	lsls	r2, r3, #28
 80118b4:	bf04      	itt	eq
 80118b6:	091b      	lsreq	r3, r3, #4
 80118b8:	3004      	addeq	r0, #4
 80118ba:	079a      	lsls	r2, r3, #30
 80118bc:	bf04      	itt	eq
 80118be:	089b      	lsreq	r3, r3, #2
 80118c0:	3002      	addeq	r0, #2
 80118c2:	07da      	lsls	r2, r3, #31
 80118c4:	d403      	bmi.n	80118ce <__lo0bits+0x4e>
 80118c6:	085b      	lsrs	r3, r3, #1
 80118c8:	f100 0001 	add.w	r0, r0, #1
 80118cc:	d005      	beq.n	80118da <__lo0bits+0x5a>
 80118ce:	600b      	str	r3, [r1, #0]
 80118d0:	4770      	bx	lr
 80118d2:	4610      	mov	r0, r2
 80118d4:	e7e9      	b.n	80118aa <__lo0bits+0x2a>
 80118d6:	2000      	movs	r0, #0
 80118d8:	4770      	bx	lr
 80118da:	2020      	movs	r0, #32
 80118dc:	4770      	bx	lr
	...

080118e0 <__i2b>:
 80118e0:	b510      	push	{r4, lr}
 80118e2:	460c      	mov	r4, r1
 80118e4:	2101      	movs	r1, #1
 80118e6:	f7ff feb9 	bl	801165c <_Balloc>
 80118ea:	4602      	mov	r2, r0
 80118ec:	b928      	cbnz	r0, 80118fa <__i2b+0x1a>
 80118ee:	4b05      	ldr	r3, [pc, #20]	; (8011904 <__i2b+0x24>)
 80118f0:	4805      	ldr	r0, [pc, #20]	; (8011908 <__i2b+0x28>)
 80118f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80118f6:	f000 ffad 	bl	8012854 <__assert_func>
 80118fa:	2301      	movs	r3, #1
 80118fc:	6144      	str	r4, [r0, #20]
 80118fe:	6103      	str	r3, [r0, #16]
 8011900:	bd10      	pop	{r4, pc}
 8011902:	bf00      	nop
 8011904:	08014400 	.word	0x08014400
 8011908:	080144f0 	.word	0x080144f0

0801190c <__multiply>:
 801190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011910:	4691      	mov	r9, r2
 8011912:	690a      	ldr	r2, [r1, #16]
 8011914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011918:	429a      	cmp	r2, r3
 801191a:	bfb8      	it	lt
 801191c:	460b      	movlt	r3, r1
 801191e:	460c      	mov	r4, r1
 8011920:	bfbc      	itt	lt
 8011922:	464c      	movlt	r4, r9
 8011924:	4699      	movlt	r9, r3
 8011926:	6927      	ldr	r7, [r4, #16]
 8011928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801192c:	68a3      	ldr	r3, [r4, #8]
 801192e:	6861      	ldr	r1, [r4, #4]
 8011930:	eb07 060a 	add.w	r6, r7, sl
 8011934:	42b3      	cmp	r3, r6
 8011936:	b085      	sub	sp, #20
 8011938:	bfb8      	it	lt
 801193a:	3101      	addlt	r1, #1
 801193c:	f7ff fe8e 	bl	801165c <_Balloc>
 8011940:	b930      	cbnz	r0, 8011950 <__multiply+0x44>
 8011942:	4602      	mov	r2, r0
 8011944:	4b44      	ldr	r3, [pc, #272]	; (8011a58 <__multiply+0x14c>)
 8011946:	4845      	ldr	r0, [pc, #276]	; (8011a5c <__multiply+0x150>)
 8011948:	f240 115d 	movw	r1, #349	; 0x15d
 801194c:	f000 ff82 	bl	8012854 <__assert_func>
 8011950:	f100 0514 	add.w	r5, r0, #20
 8011954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011958:	462b      	mov	r3, r5
 801195a:	2200      	movs	r2, #0
 801195c:	4543      	cmp	r3, r8
 801195e:	d321      	bcc.n	80119a4 <__multiply+0x98>
 8011960:	f104 0314 	add.w	r3, r4, #20
 8011964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011968:	f109 0314 	add.w	r3, r9, #20
 801196c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011970:	9202      	str	r2, [sp, #8]
 8011972:	1b3a      	subs	r2, r7, r4
 8011974:	3a15      	subs	r2, #21
 8011976:	f022 0203 	bic.w	r2, r2, #3
 801197a:	3204      	adds	r2, #4
 801197c:	f104 0115 	add.w	r1, r4, #21
 8011980:	428f      	cmp	r7, r1
 8011982:	bf38      	it	cc
 8011984:	2204      	movcc	r2, #4
 8011986:	9201      	str	r2, [sp, #4]
 8011988:	9a02      	ldr	r2, [sp, #8]
 801198a:	9303      	str	r3, [sp, #12]
 801198c:	429a      	cmp	r2, r3
 801198e:	d80c      	bhi.n	80119aa <__multiply+0x9e>
 8011990:	2e00      	cmp	r6, #0
 8011992:	dd03      	ble.n	801199c <__multiply+0x90>
 8011994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011998:	2b00      	cmp	r3, #0
 801199a:	d05a      	beq.n	8011a52 <__multiply+0x146>
 801199c:	6106      	str	r6, [r0, #16]
 801199e:	b005      	add	sp, #20
 80119a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a4:	f843 2b04 	str.w	r2, [r3], #4
 80119a8:	e7d8      	b.n	801195c <__multiply+0x50>
 80119aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80119ae:	f1ba 0f00 	cmp.w	sl, #0
 80119b2:	d024      	beq.n	80119fe <__multiply+0xf2>
 80119b4:	f104 0e14 	add.w	lr, r4, #20
 80119b8:	46a9      	mov	r9, r5
 80119ba:	f04f 0c00 	mov.w	ip, #0
 80119be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119c2:	f8d9 1000 	ldr.w	r1, [r9]
 80119c6:	fa1f fb82 	uxth.w	fp, r2
 80119ca:	b289      	uxth	r1, r1
 80119cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80119d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119d4:	f8d9 2000 	ldr.w	r2, [r9]
 80119d8:	4461      	add	r1, ip
 80119da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119de:	fb0a c20b 	mla	r2, sl, fp, ip
 80119e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119e6:	b289      	uxth	r1, r1
 80119e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119ec:	4577      	cmp	r7, lr
 80119ee:	f849 1b04 	str.w	r1, [r9], #4
 80119f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119f6:	d8e2      	bhi.n	80119be <__multiply+0xb2>
 80119f8:	9a01      	ldr	r2, [sp, #4]
 80119fa:	f845 c002 	str.w	ip, [r5, r2]
 80119fe:	9a03      	ldr	r2, [sp, #12]
 8011a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a04:	3304      	adds	r3, #4
 8011a06:	f1b9 0f00 	cmp.w	r9, #0
 8011a0a:	d020      	beq.n	8011a4e <__multiply+0x142>
 8011a0c:	6829      	ldr	r1, [r5, #0]
 8011a0e:	f104 0c14 	add.w	ip, r4, #20
 8011a12:	46ae      	mov	lr, r5
 8011a14:	f04f 0a00 	mov.w	sl, #0
 8011a18:	f8bc b000 	ldrh.w	fp, [ip]
 8011a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a20:	fb09 220b 	mla	r2, r9, fp, r2
 8011a24:	4492      	add	sl, r2
 8011a26:	b289      	uxth	r1, r1
 8011a28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8011a30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011a34:	f8be 1000 	ldrh.w	r1, [lr]
 8011a38:	0c12      	lsrs	r2, r2, #16
 8011a3a:	fb09 1102 	mla	r1, r9, r2, r1
 8011a3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011a42:	4567      	cmp	r7, ip
 8011a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a48:	d8e6      	bhi.n	8011a18 <__multiply+0x10c>
 8011a4a:	9a01      	ldr	r2, [sp, #4]
 8011a4c:	50a9      	str	r1, [r5, r2]
 8011a4e:	3504      	adds	r5, #4
 8011a50:	e79a      	b.n	8011988 <__multiply+0x7c>
 8011a52:	3e01      	subs	r6, #1
 8011a54:	e79c      	b.n	8011990 <__multiply+0x84>
 8011a56:	bf00      	nop
 8011a58:	08014400 	.word	0x08014400
 8011a5c:	080144f0 	.word	0x080144f0

08011a60 <__pow5mult>:
 8011a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a64:	4615      	mov	r5, r2
 8011a66:	f012 0203 	ands.w	r2, r2, #3
 8011a6a:	4606      	mov	r6, r0
 8011a6c:	460f      	mov	r7, r1
 8011a6e:	d007      	beq.n	8011a80 <__pow5mult+0x20>
 8011a70:	4c25      	ldr	r4, [pc, #148]	; (8011b08 <__pow5mult+0xa8>)
 8011a72:	3a01      	subs	r2, #1
 8011a74:	2300      	movs	r3, #0
 8011a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a7a:	f7ff fe51 	bl	8011720 <__multadd>
 8011a7e:	4607      	mov	r7, r0
 8011a80:	10ad      	asrs	r5, r5, #2
 8011a82:	d03d      	beq.n	8011b00 <__pow5mult+0xa0>
 8011a84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a86:	b97c      	cbnz	r4, 8011aa8 <__pow5mult+0x48>
 8011a88:	2010      	movs	r0, #16
 8011a8a:	f7ff fdcd 	bl	8011628 <malloc>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	6270      	str	r0, [r6, #36]	; 0x24
 8011a92:	b928      	cbnz	r0, 8011aa0 <__pow5mult+0x40>
 8011a94:	4b1d      	ldr	r3, [pc, #116]	; (8011b0c <__pow5mult+0xac>)
 8011a96:	481e      	ldr	r0, [pc, #120]	; (8011b10 <__pow5mult+0xb0>)
 8011a98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011a9c:	f000 feda 	bl	8012854 <__assert_func>
 8011aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011aa4:	6004      	str	r4, [r0, #0]
 8011aa6:	60c4      	str	r4, [r0, #12]
 8011aa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ab0:	b94c      	cbnz	r4, 8011ac6 <__pow5mult+0x66>
 8011ab2:	f240 2171 	movw	r1, #625	; 0x271
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f7ff ff12 	bl	80118e0 <__i2b>
 8011abc:	2300      	movs	r3, #0
 8011abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	6003      	str	r3, [r0, #0]
 8011ac6:	f04f 0900 	mov.w	r9, #0
 8011aca:	07eb      	lsls	r3, r5, #31
 8011acc:	d50a      	bpl.n	8011ae4 <__pow5mult+0x84>
 8011ace:	4639      	mov	r1, r7
 8011ad0:	4622      	mov	r2, r4
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	f7ff ff1a 	bl	801190c <__multiply>
 8011ad8:	4639      	mov	r1, r7
 8011ada:	4680      	mov	r8, r0
 8011adc:	4630      	mov	r0, r6
 8011ade:	f7ff fdfd 	bl	80116dc <_Bfree>
 8011ae2:	4647      	mov	r7, r8
 8011ae4:	106d      	asrs	r5, r5, #1
 8011ae6:	d00b      	beq.n	8011b00 <__pow5mult+0xa0>
 8011ae8:	6820      	ldr	r0, [r4, #0]
 8011aea:	b938      	cbnz	r0, 8011afc <__pow5mult+0x9c>
 8011aec:	4622      	mov	r2, r4
 8011aee:	4621      	mov	r1, r4
 8011af0:	4630      	mov	r0, r6
 8011af2:	f7ff ff0b 	bl	801190c <__multiply>
 8011af6:	6020      	str	r0, [r4, #0]
 8011af8:	f8c0 9000 	str.w	r9, [r0]
 8011afc:	4604      	mov	r4, r0
 8011afe:	e7e4      	b.n	8011aca <__pow5mult+0x6a>
 8011b00:	4638      	mov	r0, r7
 8011b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b06:	bf00      	nop
 8011b08:	08014640 	.word	0x08014640
 8011b0c:	0801438e 	.word	0x0801438e
 8011b10:	080144f0 	.word	0x080144f0

08011b14 <__lshift>:
 8011b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b18:	460c      	mov	r4, r1
 8011b1a:	6849      	ldr	r1, [r1, #4]
 8011b1c:	6923      	ldr	r3, [r4, #16]
 8011b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b22:	68a3      	ldr	r3, [r4, #8]
 8011b24:	4607      	mov	r7, r0
 8011b26:	4691      	mov	r9, r2
 8011b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b2c:	f108 0601 	add.w	r6, r8, #1
 8011b30:	42b3      	cmp	r3, r6
 8011b32:	db0b      	blt.n	8011b4c <__lshift+0x38>
 8011b34:	4638      	mov	r0, r7
 8011b36:	f7ff fd91 	bl	801165c <_Balloc>
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	b948      	cbnz	r0, 8011b52 <__lshift+0x3e>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	4b2a      	ldr	r3, [pc, #168]	; (8011bec <__lshift+0xd8>)
 8011b42:	482b      	ldr	r0, [pc, #172]	; (8011bf0 <__lshift+0xdc>)
 8011b44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b48:	f000 fe84 	bl	8012854 <__assert_func>
 8011b4c:	3101      	adds	r1, #1
 8011b4e:	005b      	lsls	r3, r3, #1
 8011b50:	e7ee      	b.n	8011b30 <__lshift+0x1c>
 8011b52:	2300      	movs	r3, #0
 8011b54:	f100 0114 	add.w	r1, r0, #20
 8011b58:	f100 0210 	add.w	r2, r0, #16
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	4553      	cmp	r3, sl
 8011b60:	db37      	blt.n	8011bd2 <__lshift+0xbe>
 8011b62:	6920      	ldr	r0, [r4, #16]
 8011b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b68:	f104 0314 	add.w	r3, r4, #20
 8011b6c:	f019 091f 	ands.w	r9, r9, #31
 8011b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011b78:	d02f      	beq.n	8011bda <__lshift+0xc6>
 8011b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8011b7e:	468a      	mov	sl, r1
 8011b80:	f04f 0c00 	mov.w	ip, #0
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	fa02 f209 	lsl.w	r2, r2, r9
 8011b8a:	ea42 020c 	orr.w	r2, r2, ip
 8011b8e:	f84a 2b04 	str.w	r2, [sl], #4
 8011b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b96:	4298      	cmp	r0, r3
 8011b98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011b9c:	d8f2      	bhi.n	8011b84 <__lshift+0x70>
 8011b9e:	1b03      	subs	r3, r0, r4
 8011ba0:	3b15      	subs	r3, #21
 8011ba2:	f023 0303 	bic.w	r3, r3, #3
 8011ba6:	3304      	adds	r3, #4
 8011ba8:	f104 0215 	add.w	r2, r4, #21
 8011bac:	4290      	cmp	r0, r2
 8011bae:	bf38      	it	cc
 8011bb0:	2304      	movcc	r3, #4
 8011bb2:	f841 c003 	str.w	ip, [r1, r3]
 8011bb6:	f1bc 0f00 	cmp.w	ip, #0
 8011bba:	d001      	beq.n	8011bc0 <__lshift+0xac>
 8011bbc:	f108 0602 	add.w	r6, r8, #2
 8011bc0:	3e01      	subs	r6, #1
 8011bc2:	4638      	mov	r0, r7
 8011bc4:	612e      	str	r6, [r5, #16]
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	f7ff fd88 	bl	80116dc <_Bfree>
 8011bcc:	4628      	mov	r0, r5
 8011bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	e7c1      	b.n	8011b5e <__lshift+0x4a>
 8011bda:	3904      	subs	r1, #4
 8011bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011be0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011be4:	4298      	cmp	r0, r3
 8011be6:	d8f9      	bhi.n	8011bdc <__lshift+0xc8>
 8011be8:	e7ea      	b.n	8011bc0 <__lshift+0xac>
 8011bea:	bf00      	nop
 8011bec:	08014400 	.word	0x08014400
 8011bf0:	080144f0 	.word	0x080144f0

08011bf4 <__mcmp>:
 8011bf4:	b530      	push	{r4, r5, lr}
 8011bf6:	6902      	ldr	r2, [r0, #16]
 8011bf8:	690c      	ldr	r4, [r1, #16]
 8011bfa:	1b12      	subs	r2, r2, r4
 8011bfc:	d10e      	bne.n	8011c1c <__mcmp+0x28>
 8011bfe:	f100 0314 	add.w	r3, r0, #20
 8011c02:	3114      	adds	r1, #20
 8011c04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c14:	42a5      	cmp	r5, r4
 8011c16:	d003      	beq.n	8011c20 <__mcmp+0x2c>
 8011c18:	d305      	bcc.n	8011c26 <__mcmp+0x32>
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	bd30      	pop	{r4, r5, pc}
 8011c20:	4283      	cmp	r3, r0
 8011c22:	d3f3      	bcc.n	8011c0c <__mcmp+0x18>
 8011c24:	e7fa      	b.n	8011c1c <__mcmp+0x28>
 8011c26:	f04f 32ff 	mov.w	r2, #4294967295
 8011c2a:	e7f7      	b.n	8011c1c <__mcmp+0x28>

08011c2c <__mdiff>:
 8011c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c30:	460c      	mov	r4, r1
 8011c32:	4606      	mov	r6, r0
 8011c34:	4611      	mov	r1, r2
 8011c36:	4620      	mov	r0, r4
 8011c38:	4690      	mov	r8, r2
 8011c3a:	f7ff ffdb 	bl	8011bf4 <__mcmp>
 8011c3e:	1e05      	subs	r5, r0, #0
 8011c40:	d110      	bne.n	8011c64 <__mdiff+0x38>
 8011c42:	4629      	mov	r1, r5
 8011c44:	4630      	mov	r0, r6
 8011c46:	f7ff fd09 	bl	801165c <_Balloc>
 8011c4a:	b930      	cbnz	r0, 8011c5a <__mdiff+0x2e>
 8011c4c:	4b3a      	ldr	r3, [pc, #232]	; (8011d38 <__mdiff+0x10c>)
 8011c4e:	4602      	mov	r2, r0
 8011c50:	f240 2132 	movw	r1, #562	; 0x232
 8011c54:	4839      	ldr	r0, [pc, #228]	; (8011d3c <__mdiff+0x110>)
 8011c56:	f000 fdfd 	bl	8012854 <__assert_func>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c64:	bfa4      	itt	ge
 8011c66:	4643      	movge	r3, r8
 8011c68:	46a0      	movge	r8, r4
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c70:	bfa6      	itte	ge
 8011c72:	461c      	movge	r4, r3
 8011c74:	2500      	movge	r5, #0
 8011c76:	2501      	movlt	r5, #1
 8011c78:	f7ff fcf0 	bl	801165c <_Balloc>
 8011c7c:	b920      	cbnz	r0, 8011c88 <__mdiff+0x5c>
 8011c7e:	4b2e      	ldr	r3, [pc, #184]	; (8011d38 <__mdiff+0x10c>)
 8011c80:	4602      	mov	r2, r0
 8011c82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c86:	e7e5      	b.n	8011c54 <__mdiff+0x28>
 8011c88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c8c:	6926      	ldr	r6, [r4, #16]
 8011c8e:	60c5      	str	r5, [r0, #12]
 8011c90:	f104 0914 	add.w	r9, r4, #20
 8011c94:	f108 0514 	add.w	r5, r8, #20
 8011c98:	f100 0e14 	add.w	lr, r0, #20
 8011c9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ca4:	f108 0210 	add.w	r2, r8, #16
 8011ca8:	46f2      	mov	sl, lr
 8011caa:	2100      	movs	r1, #0
 8011cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011cb4:	fa1f f883 	uxth.w	r8, r3
 8011cb8:	fa11 f18b 	uxtah	r1, r1, fp
 8011cbc:	0c1b      	lsrs	r3, r3, #16
 8011cbe:	eba1 0808 	sub.w	r8, r1, r8
 8011cc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cca:	fa1f f888 	uxth.w	r8, r8
 8011cce:	1419      	asrs	r1, r3, #16
 8011cd0:	454e      	cmp	r6, r9
 8011cd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011cd6:	f84a 3b04 	str.w	r3, [sl], #4
 8011cda:	d8e7      	bhi.n	8011cac <__mdiff+0x80>
 8011cdc:	1b33      	subs	r3, r6, r4
 8011cde:	3b15      	subs	r3, #21
 8011ce0:	f023 0303 	bic.w	r3, r3, #3
 8011ce4:	3304      	adds	r3, #4
 8011ce6:	3415      	adds	r4, #21
 8011ce8:	42a6      	cmp	r6, r4
 8011cea:	bf38      	it	cc
 8011cec:	2304      	movcc	r3, #4
 8011cee:	441d      	add	r5, r3
 8011cf0:	4473      	add	r3, lr
 8011cf2:	469e      	mov	lr, r3
 8011cf4:	462e      	mov	r6, r5
 8011cf6:	4566      	cmp	r6, ip
 8011cf8:	d30e      	bcc.n	8011d18 <__mdiff+0xec>
 8011cfa:	f10c 0203 	add.w	r2, ip, #3
 8011cfe:	1b52      	subs	r2, r2, r5
 8011d00:	f022 0203 	bic.w	r2, r2, #3
 8011d04:	3d03      	subs	r5, #3
 8011d06:	45ac      	cmp	ip, r5
 8011d08:	bf38      	it	cc
 8011d0a:	2200      	movcc	r2, #0
 8011d0c:	441a      	add	r2, r3
 8011d0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d12:	b17b      	cbz	r3, 8011d34 <__mdiff+0x108>
 8011d14:	6107      	str	r7, [r0, #16]
 8011d16:	e7a3      	b.n	8011c60 <__mdiff+0x34>
 8011d18:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d1c:	fa11 f288 	uxtah	r2, r1, r8
 8011d20:	1414      	asrs	r4, r2, #16
 8011d22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d26:	b292      	uxth	r2, r2
 8011d28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d2c:	f84e 2b04 	str.w	r2, [lr], #4
 8011d30:	1421      	asrs	r1, r4, #16
 8011d32:	e7e0      	b.n	8011cf6 <__mdiff+0xca>
 8011d34:	3f01      	subs	r7, #1
 8011d36:	e7ea      	b.n	8011d0e <__mdiff+0xe2>
 8011d38:	08014400 	.word	0x08014400
 8011d3c:	080144f0 	.word	0x080144f0

08011d40 <__ulp>:
 8011d40:	b082      	sub	sp, #8
 8011d42:	ed8d 0b00 	vstr	d0, [sp]
 8011d46:	9b01      	ldr	r3, [sp, #4]
 8011d48:	4912      	ldr	r1, [pc, #72]	; (8011d94 <__ulp+0x54>)
 8011d4a:	4019      	ands	r1, r3
 8011d4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011d50:	2900      	cmp	r1, #0
 8011d52:	dd05      	ble.n	8011d60 <__ulp+0x20>
 8011d54:	2200      	movs	r2, #0
 8011d56:	460b      	mov	r3, r1
 8011d58:	ec43 2b10 	vmov	d0, r2, r3
 8011d5c:	b002      	add	sp, #8
 8011d5e:	4770      	bx	lr
 8011d60:	4249      	negs	r1, r1
 8011d62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011d66:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011d6a:	f04f 0200 	mov.w	r2, #0
 8011d6e:	f04f 0300 	mov.w	r3, #0
 8011d72:	da04      	bge.n	8011d7e <__ulp+0x3e>
 8011d74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011d78:	fa41 f300 	asr.w	r3, r1, r0
 8011d7c:	e7ec      	b.n	8011d58 <__ulp+0x18>
 8011d7e:	f1a0 0114 	sub.w	r1, r0, #20
 8011d82:	291e      	cmp	r1, #30
 8011d84:	bfda      	itte	le
 8011d86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011d8a:	fa20 f101 	lsrle.w	r1, r0, r1
 8011d8e:	2101      	movgt	r1, #1
 8011d90:	460a      	mov	r2, r1
 8011d92:	e7e1      	b.n	8011d58 <__ulp+0x18>
 8011d94:	7ff00000 	.word	0x7ff00000

08011d98 <__b2d>:
 8011d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9a:	6905      	ldr	r5, [r0, #16]
 8011d9c:	f100 0714 	add.w	r7, r0, #20
 8011da0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011da4:	1f2e      	subs	r6, r5, #4
 8011da6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011daa:	4620      	mov	r0, r4
 8011dac:	f7ff fd48 	bl	8011840 <__hi0bits>
 8011db0:	f1c0 0320 	rsb	r3, r0, #32
 8011db4:	280a      	cmp	r0, #10
 8011db6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011e34 <__b2d+0x9c>
 8011dba:	600b      	str	r3, [r1, #0]
 8011dbc:	dc14      	bgt.n	8011de8 <__b2d+0x50>
 8011dbe:	f1c0 0e0b 	rsb	lr, r0, #11
 8011dc2:	fa24 f10e 	lsr.w	r1, r4, lr
 8011dc6:	42b7      	cmp	r7, r6
 8011dc8:	ea41 030c 	orr.w	r3, r1, ip
 8011dcc:	bf34      	ite	cc
 8011dce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011dd2:	2100      	movcs	r1, #0
 8011dd4:	3015      	adds	r0, #21
 8011dd6:	fa04 f000 	lsl.w	r0, r4, r0
 8011dda:	fa21 f10e 	lsr.w	r1, r1, lr
 8011dde:	ea40 0201 	orr.w	r2, r0, r1
 8011de2:	ec43 2b10 	vmov	d0, r2, r3
 8011de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de8:	42b7      	cmp	r7, r6
 8011dea:	bf3a      	itte	cc
 8011dec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011df0:	f1a5 0608 	subcc.w	r6, r5, #8
 8011df4:	2100      	movcs	r1, #0
 8011df6:	380b      	subs	r0, #11
 8011df8:	d017      	beq.n	8011e2a <__b2d+0x92>
 8011dfa:	f1c0 0c20 	rsb	ip, r0, #32
 8011dfe:	fa04 f500 	lsl.w	r5, r4, r0
 8011e02:	42be      	cmp	r6, r7
 8011e04:	fa21 f40c 	lsr.w	r4, r1, ip
 8011e08:	ea45 0504 	orr.w	r5, r5, r4
 8011e0c:	bf8c      	ite	hi
 8011e0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011e12:	2400      	movls	r4, #0
 8011e14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011e18:	fa01 f000 	lsl.w	r0, r1, r0
 8011e1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011e20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011e24:	ea40 0204 	orr.w	r2, r0, r4
 8011e28:	e7db      	b.n	8011de2 <__b2d+0x4a>
 8011e2a:	ea44 030c 	orr.w	r3, r4, ip
 8011e2e:	460a      	mov	r2, r1
 8011e30:	e7d7      	b.n	8011de2 <__b2d+0x4a>
 8011e32:	bf00      	nop
 8011e34:	3ff00000 	.word	0x3ff00000

08011e38 <__d2b>:
 8011e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e3c:	4689      	mov	r9, r1
 8011e3e:	2101      	movs	r1, #1
 8011e40:	ec57 6b10 	vmov	r6, r7, d0
 8011e44:	4690      	mov	r8, r2
 8011e46:	f7ff fc09 	bl	801165c <_Balloc>
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	b930      	cbnz	r0, 8011e5c <__d2b+0x24>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	4b25      	ldr	r3, [pc, #148]	; (8011ee8 <__d2b+0xb0>)
 8011e52:	4826      	ldr	r0, [pc, #152]	; (8011eec <__d2b+0xb4>)
 8011e54:	f240 310a 	movw	r1, #778	; 0x30a
 8011e58:	f000 fcfc 	bl	8012854 <__assert_func>
 8011e5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011e64:	bb35      	cbnz	r5, 8011eb4 <__d2b+0x7c>
 8011e66:	2e00      	cmp	r6, #0
 8011e68:	9301      	str	r3, [sp, #4]
 8011e6a:	d028      	beq.n	8011ebe <__d2b+0x86>
 8011e6c:	4668      	mov	r0, sp
 8011e6e:	9600      	str	r6, [sp, #0]
 8011e70:	f7ff fd06 	bl	8011880 <__lo0bits>
 8011e74:	9900      	ldr	r1, [sp, #0]
 8011e76:	b300      	cbz	r0, 8011eba <__d2b+0x82>
 8011e78:	9a01      	ldr	r2, [sp, #4]
 8011e7a:	f1c0 0320 	rsb	r3, r0, #32
 8011e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e82:	430b      	orrs	r3, r1
 8011e84:	40c2      	lsrs	r2, r0
 8011e86:	6163      	str	r3, [r4, #20]
 8011e88:	9201      	str	r2, [sp, #4]
 8011e8a:	9b01      	ldr	r3, [sp, #4]
 8011e8c:	61a3      	str	r3, [r4, #24]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	bf14      	ite	ne
 8011e92:	2202      	movne	r2, #2
 8011e94:	2201      	moveq	r2, #1
 8011e96:	6122      	str	r2, [r4, #16]
 8011e98:	b1d5      	cbz	r5, 8011ed0 <__d2b+0x98>
 8011e9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011e9e:	4405      	add	r5, r0
 8011ea0:	f8c9 5000 	str.w	r5, [r9]
 8011ea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ea8:	f8c8 0000 	str.w	r0, [r8]
 8011eac:	4620      	mov	r0, r4
 8011eae:	b003      	add	sp, #12
 8011eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011eb8:	e7d5      	b.n	8011e66 <__d2b+0x2e>
 8011eba:	6161      	str	r1, [r4, #20]
 8011ebc:	e7e5      	b.n	8011e8a <__d2b+0x52>
 8011ebe:	a801      	add	r0, sp, #4
 8011ec0:	f7ff fcde 	bl	8011880 <__lo0bits>
 8011ec4:	9b01      	ldr	r3, [sp, #4]
 8011ec6:	6163      	str	r3, [r4, #20]
 8011ec8:	2201      	movs	r2, #1
 8011eca:	6122      	str	r2, [r4, #16]
 8011ecc:	3020      	adds	r0, #32
 8011ece:	e7e3      	b.n	8011e98 <__d2b+0x60>
 8011ed0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ed8:	f8c9 0000 	str.w	r0, [r9]
 8011edc:	6918      	ldr	r0, [r3, #16]
 8011ede:	f7ff fcaf 	bl	8011840 <__hi0bits>
 8011ee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ee6:	e7df      	b.n	8011ea8 <__d2b+0x70>
 8011ee8:	08014400 	.word	0x08014400
 8011eec:	080144f0 	.word	0x080144f0

08011ef0 <__ratio>:
 8011ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	4688      	mov	r8, r1
 8011ef6:	4669      	mov	r1, sp
 8011ef8:	4681      	mov	r9, r0
 8011efa:	f7ff ff4d 	bl	8011d98 <__b2d>
 8011efe:	a901      	add	r1, sp, #4
 8011f00:	4640      	mov	r0, r8
 8011f02:	ec55 4b10 	vmov	r4, r5, d0
 8011f06:	f7ff ff47 	bl	8011d98 <__b2d>
 8011f0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f12:	eba3 0c02 	sub.w	ip, r3, r2
 8011f16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011f1a:	1a9b      	subs	r3, r3, r2
 8011f1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011f20:	ec51 0b10 	vmov	r0, r1, d0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	bfd6      	itet	le
 8011f28:	460a      	movle	r2, r1
 8011f2a:	462a      	movgt	r2, r5
 8011f2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011f30:	468b      	mov	fp, r1
 8011f32:	462f      	mov	r7, r5
 8011f34:	bfd4      	ite	le
 8011f36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011f3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011f3e:	4620      	mov	r0, r4
 8011f40:	ee10 2a10 	vmov	r2, s0
 8011f44:	465b      	mov	r3, fp
 8011f46:	4639      	mov	r1, r7
 8011f48:	f7ee fca8 	bl	800089c <__aeabi_ddiv>
 8011f4c:	ec41 0b10 	vmov	d0, r0, r1
 8011f50:	b003      	add	sp, #12
 8011f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f56 <__copybits>:
 8011f56:	3901      	subs	r1, #1
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	1149      	asrs	r1, r1, #5
 8011f5c:	6914      	ldr	r4, [r2, #16]
 8011f5e:	3101      	adds	r1, #1
 8011f60:	f102 0314 	add.w	r3, r2, #20
 8011f64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f6c:	1f05      	subs	r5, r0, #4
 8011f6e:	42a3      	cmp	r3, r4
 8011f70:	d30c      	bcc.n	8011f8c <__copybits+0x36>
 8011f72:	1aa3      	subs	r3, r4, r2
 8011f74:	3b11      	subs	r3, #17
 8011f76:	f023 0303 	bic.w	r3, r3, #3
 8011f7a:	3211      	adds	r2, #17
 8011f7c:	42a2      	cmp	r2, r4
 8011f7e:	bf88      	it	hi
 8011f80:	2300      	movhi	r3, #0
 8011f82:	4418      	add	r0, r3
 8011f84:	2300      	movs	r3, #0
 8011f86:	4288      	cmp	r0, r1
 8011f88:	d305      	bcc.n	8011f96 <__copybits+0x40>
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}
 8011f8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011f90:	f845 6f04 	str.w	r6, [r5, #4]!
 8011f94:	e7eb      	b.n	8011f6e <__copybits+0x18>
 8011f96:	f840 3b04 	str.w	r3, [r0], #4
 8011f9a:	e7f4      	b.n	8011f86 <__copybits+0x30>

08011f9c <__any_on>:
 8011f9c:	f100 0214 	add.w	r2, r0, #20
 8011fa0:	6900      	ldr	r0, [r0, #16]
 8011fa2:	114b      	asrs	r3, r1, #5
 8011fa4:	4298      	cmp	r0, r3
 8011fa6:	b510      	push	{r4, lr}
 8011fa8:	db11      	blt.n	8011fce <__any_on+0x32>
 8011faa:	dd0a      	ble.n	8011fc2 <__any_on+0x26>
 8011fac:	f011 011f 	ands.w	r1, r1, #31
 8011fb0:	d007      	beq.n	8011fc2 <__any_on+0x26>
 8011fb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011fb6:	fa24 f001 	lsr.w	r0, r4, r1
 8011fba:	fa00 f101 	lsl.w	r1, r0, r1
 8011fbe:	428c      	cmp	r4, r1
 8011fc0:	d10b      	bne.n	8011fda <__any_on+0x3e>
 8011fc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d803      	bhi.n	8011fd2 <__any_on+0x36>
 8011fca:	2000      	movs	r0, #0
 8011fcc:	bd10      	pop	{r4, pc}
 8011fce:	4603      	mov	r3, r0
 8011fd0:	e7f7      	b.n	8011fc2 <__any_on+0x26>
 8011fd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011fd6:	2900      	cmp	r1, #0
 8011fd8:	d0f5      	beq.n	8011fc6 <__any_on+0x2a>
 8011fda:	2001      	movs	r0, #1
 8011fdc:	e7f6      	b.n	8011fcc <__any_on+0x30>

08011fde <_calloc_r>:
 8011fde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fe0:	fba1 2402 	umull	r2, r4, r1, r2
 8011fe4:	b94c      	cbnz	r4, 8011ffa <_calloc_r+0x1c>
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	9201      	str	r2, [sp, #4]
 8011fea:	f000 f87b 	bl	80120e4 <_malloc_r>
 8011fee:	9a01      	ldr	r2, [sp, #4]
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	b930      	cbnz	r0, 8012002 <_calloc_r+0x24>
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	b003      	add	sp, #12
 8011ff8:	bd30      	pop	{r4, r5, pc}
 8011ffa:	220c      	movs	r2, #12
 8011ffc:	6002      	str	r2, [r0, #0]
 8011ffe:	2500      	movs	r5, #0
 8012000:	e7f8      	b.n	8011ff4 <_calloc_r+0x16>
 8012002:	4621      	mov	r1, r4
 8012004:	f7fc f84a 	bl	800e09c <memset>
 8012008:	e7f4      	b.n	8011ff4 <_calloc_r+0x16>
	...

0801200c <_free_r>:
 801200c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801200e:	2900      	cmp	r1, #0
 8012010:	d044      	beq.n	801209c <_free_r+0x90>
 8012012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012016:	9001      	str	r0, [sp, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	f1a1 0404 	sub.w	r4, r1, #4
 801201e:	bfb8      	it	lt
 8012020:	18e4      	addlt	r4, r4, r3
 8012022:	f000 fca5 	bl	8012970 <__malloc_lock>
 8012026:	4a1e      	ldr	r2, [pc, #120]	; (80120a0 <_free_r+0x94>)
 8012028:	9801      	ldr	r0, [sp, #4]
 801202a:	6813      	ldr	r3, [r2, #0]
 801202c:	b933      	cbnz	r3, 801203c <_free_r+0x30>
 801202e:	6063      	str	r3, [r4, #4]
 8012030:	6014      	str	r4, [r2, #0]
 8012032:	b003      	add	sp, #12
 8012034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012038:	f000 bca0 	b.w	801297c <__malloc_unlock>
 801203c:	42a3      	cmp	r3, r4
 801203e:	d908      	bls.n	8012052 <_free_r+0x46>
 8012040:	6825      	ldr	r5, [r4, #0]
 8012042:	1961      	adds	r1, r4, r5
 8012044:	428b      	cmp	r3, r1
 8012046:	bf01      	itttt	eq
 8012048:	6819      	ldreq	r1, [r3, #0]
 801204a:	685b      	ldreq	r3, [r3, #4]
 801204c:	1949      	addeq	r1, r1, r5
 801204e:	6021      	streq	r1, [r4, #0]
 8012050:	e7ed      	b.n	801202e <_free_r+0x22>
 8012052:	461a      	mov	r2, r3
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	b10b      	cbz	r3, 801205c <_free_r+0x50>
 8012058:	42a3      	cmp	r3, r4
 801205a:	d9fa      	bls.n	8012052 <_free_r+0x46>
 801205c:	6811      	ldr	r1, [r2, #0]
 801205e:	1855      	adds	r5, r2, r1
 8012060:	42a5      	cmp	r5, r4
 8012062:	d10b      	bne.n	801207c <_free_r+0x70>
 8012064:	6824      	ldr	r4, [r4, #0]
 8012066:	4421      	add	r1, r4
 8012068:	1854      	adds	r4, r2, r1
 801206a:	42a3      	cmp	r3, r4
 801206c:	6011      	str	r1, [r2, #0]
 801206e:	d1e0      	bne.n	8012032 <_free_r+0x26>
 8012070:	681c      	ldr	r4, [r3, #0]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	6053      	str	r3, [r2, #4]
 8012076:	4421      	add	r1, r4
 8012078:	6011      	str	r1, [r2, #0]
 801207a:	e7da      	b.n	8012032 <_free_r+0x26>
 801207c:	d902      	bls.n	8012084 <_free_r+0x78>
 801207e:	230c      	movs	r3, #12
 8012080:	6003      	str	r3, [r0, #0]
 8012082:	e7d6      	b.n	8012032 <_free_r+0x26>
 8012084:	6825      	ldr	r5, [r4, #0]
 8012086:	1961      	adds	r1, r4, r5
 8012088:	428b      	cmp	r3, r1
 801208a:	bf04      	itt	eq
 801208c:	6819      	ldreq	r1, [r3, #0]
 801208e:	685b      	ldreq	r3, [r3, #4]
 8012090:	6063      	str	r3, [r4, #4]
 8012092:	bf04      	itt	eq
 8012094:	1949      	addeq	r1, r1, r5
 8012096:	6021      	streq	r1, [r4, #0]
 8012098:	6054      	str	r4, [r2, #4]
 801209a:	e7ca      	b.n	8012032 <_free_r+0x26>
 801209c:	b003      	add	sp, #12
 801209e:	bd30      	pop	{r4, r5, pc}
 80120a0:	2000992c 	.word	0x2000992c

080120a4 <sbrk_aligned>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	4e0e      	ldr	r6, [pc, #56]	; (80120e0 <sbrk_aligned+0x3c>)
 80120a8:	460c      	mov	r4, r1
 80120aa:	6831      	ldr	r1, [r6, #0]
 80120ac:	4605      	mov	r5, r0
 80120ae:	b911      	cbnz	r1, 80120b6 <sbrk_aligned+0x12>
 80120b0:	f000 fb4a 	bl	8012748 <_sbrk_r>
 80120b4:	6030      	str	r0, [r6, #0]
 80120b6:	4621      	mov	r1, r4
 80120b8:	4628      	mov	r0, r5
 80120ba:	f000 fb45 	bl	8012748 <_sbrk_r>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	d00a      	beq.n	80120d8 <sbrk_aligned+0x34>
 80120c2:	1cc4      	adds	r4, r0, #3
 80120c4:	f024 0403 	bic.w	r4, r4, #3
 80120c8:	42a0      	cmp	r0, r4
 80120ca:	d007      	beq.n	80120dc <sbrk_aligned+0x38>
 80120cc:	1a21      	subs	r1, r4, r0
 80120ce:	4628      	mov	r0, r5
 80120d0:	f000 fb3a 	bl	8012748 <_sbrk_r>
 80120d4:	3001      	adds	r0, #1
 80120d6:	d101      	bne.n	80120dc <sbrk_aligned+0x38>
 80120d8:	f04f 34ff 	mov.w	r4, #4294967295
 80120dc:	4620      	mov	r0, r4
 80120de:	bd70      	pop	{r4, r5, r6, pc}
 80120e0:	20009930 	.word	0x20009930

080120e4 <_malloc_r>:
 80120e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e8:	1ccd      	adds	r5, r1, #3
 80120ea:	f025 0503 	bic.w	r5, r5, #3
 80120ee:	3508      	adds	r5, #8
 80120f0:	2d0c      	cmp	r5, #12
 80120f2:	bf38      	it	cc
 80120f4:	250c      	movcc	r5, #12
 80120f6:	2d00      	cmp	r5, #0
 80120f8:	4607      	mov	r7, r0
 80120fa:	db01      	blt.n	8012100 <_malloc_r+0x1c>
 80120fc:	42a9      	cmp	r1, r5
 80120fe:	d905      	bls.n	801210c <_malloc_r+0x28>
 8012100:	230c      	movs	r3, #12
 8012102:	603b      	str	r3, [r7, #0]
 8012104:	2600      	movs	r6, #0
 8012106:	4630      	mov	r0, r6
 8012108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210c:	4e2e      	ldr	r6, [pc, #184]	; (80121c8 <_malloc_r+0xe4>)
 801210e:	f000 fc2f 	bl	8012970 <__malloc_lock>
 8012112:	6833      	ldr	r3, [r6, #0]
 8012114:	461c      	mov	r4, r3
 8012116:	bb34      	cbnz	r4, 8012166 <_malloc_r+0x82>
 8012118:	4629      	mov	r1, r5
 801211a:	4638      	mov	r0, r7
 801211c:	f7ff ffc2 	bl	80120a4 <sbrk_aligned>
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	4604      	mov	r4, r0
 8012124:	d14d      	bne.n	80121c2 <_malloc_r+0xde>
 8012126:	6834      	ldr	r4, [r6, #0]
 8012128:	4626      	mov	r6, r4
 801212a:	2e00      	cmp	r6, #0
 801212c:	d140      	bne.n	80121b0 <_malloc_r+0xcc>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	4631      	mov	r1, r6
 8012132:	4638      	mov	r0, r7
 8012134:	eb04 0803 	add.w	r8, r4, r3
 8012138:	f000 fb06 	bl	8012748 <_sbrk_r>
 801213c:	4580      	cmp	r8, r0
 801213e:	d13a      	bne.n	80121b6 <_malloc_r+0xd2>
 8012140:	6821      	ldr	r1, [r4, #0]
 8012142:	3503      	adds	r5, #3
 8012144:	1a6d      	subs	r5, r5, r1
 8012146:	f025 0503 	bic.w	r5, r5, #3
 801214a:	3508      	adds	r5, #8
 801214c:	2d0c      	cmp	r5, #12
 801214e:	bf38      	it	cc
 8012150:	250c      	movcc	r5, #12
 8012152:	4629      	mov	r1, r5
 8012154:	4638      	mov	r0, r7
 8012156:	f7ff ffa5 	bl	80120a4 <sbrk_aligned>
 801215a:	3001      	adds	r0, #1
 801215c:	d02b      	beq.n	80121b6 <_malloc_r+0xd2>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	442b      	add	r3, r5
 8012162:	6023      	str	r3, [r4, #0]
 8012164:	e00e      	b.n	8012184 <_malloc_r+0xa0>
 8012166:	6822      	ldr	r2, [r4, #0]
 8012168:	1b52      	subs	r2, r2, r5
 801216a:	d41e      	bmi.n	80121aa <_malloc_r+0xc6>
 801216c:	2a0b      	cmp	r2, #11
 801216e:	d916      	bls.n	801219e <_malloc_r+0xba>
 8012170:	1961      	adds	r1, r4, r5
 8012172:	42a3      	cmp	r3, r4
 8012174:	6025      	str	r5, [r4, #0]
 8012176:	bf18      	it	ne
 8012178:	6059      	strne	r1, [r3, #4]
 801217a:	6863      	ldr	r3, [r4, #4]
 801217c:	bf08      	it	eq
 801217e:	6031      	streq	r1, [r6, #0]
 8012180:	5162      	str	r2, [r4, r5]
 8012182:	604b      	str	r3, [r1, #4]
 8012184:	4638      	mov	r0, r7
 8012186:	f104 060b 	add.w	r6, r4, #11
 801218a:	f000 fbf7 	bl	801297c <__malloc_unlock>
 801218e:	f026 0607 	bic.w	r6, r6, #7
 8012192:	1d23      	adds	r3, r4, #4
 8012194:	1af2      	subs	r2, r6, r3
 8012196:	d0b6      	beq.n	8012106 <_malloc_r+0x22>
 8012198:	1b9b      	subs	r3, r3, r6
 801219a:	50a3      	str	r3, [r4, r2]
 801219c:	e7b3      	b.n	8012106 <_malloc_r+0x22>
 801219e:	6862      	ldr	r2, [r4, #4]
 80121a0:	42a3      	cmp	r3, r4
 80121a2:	bf0c      	ite	eq
 80121a4:	6032      	streq	r2, [r6, #0]
 80121a6:	605a      	strne	r2, [r3, #4]
 80121a8:	e7ec      	b.n	8012184 <_malloc_r+0xa0>
 80121aa:	4623      	mov	r3, r4
 80121ac:	6864      	ldr	r4, [r4, #4]
 80121ae:	e7b2      	b.n	8012116 <_malloc_r+0x32>
 80121b0:	4634      	mov	r4, r6
 80121b2:	6876      	ldr	r6, [r6, #4]
 80121b4:	e7b9      	b.n	801212a <_malloc_r+0x46>
 80121b6:	230c      	movs	r3, #12
 80121b8:	603b      	str	r3, [r7, #0]
 80121ba:	4638      	mov	r0, r7
 80121bc:	f000 fbde 	bl	801297c <__malloc_unlock>
 80121c0:	e7a1      	b.n	8012106 <_malloc_r+0x22>
 80121c2:	6025      	str	r5, [r4, #0]
 80121c4:	e7de      	b.n	8012184 <_malloc_r+0xa0>
 80121c6:	bf00      	nop
 80121c8:	2000992c 	.word	0x2000992c

080121cc <__ssputs_r>:
 80121cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121d0:	688e      	ldr	r6, [r1, #8]
 80121d2:	429e      	cmp	r6, r3
 80121d4:	4682      	mov	sl, r0
 80121d6:	460c      	mov	r4, r1
 80121d8:	4690      	mov	r8, r2
 80121da:	461f      	mov	r7, r3
 80121dc:	d838      	bhi.n	8012250 <__ssputs_r+0x84>
 80121de:	898a      	ldrh	r2, [r1, #12]
 80121e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80121e4:	d032      	beq.n	801224c <__ssputs_r+0x80>
 80121e6:	6825      	ldr	r5, [r4, #0]
 80121e8:	6909      	ldr	r1, [r1, #16]
 80121ea:	eba5 0901 	sub.w	r9, r5, r1
 80121ee:	6965      	ldr	r5, [r4, #20]
 80121f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121f8:	3301      	adds	r3, #1
 80121fa:	444b      	add	r3, r9
 80121fc:	106d      	asrs	r5, r5, #1
 80121fe:	429d      	cmp	r5, r3
 8012200:	bf38      	it	cc
 8012202:	461d      	movcc	r5, r3
 8012204:	0553      	lsls	r3, r2, #21
 8012206:	d531      	bpl.n	801226c <__ssputs_r+0xa0>
 8012208:	4629      	mov	r1, r5
 801220a:	f7ff ff6b 	bl	80120e4 <_malloc_r>
 801220e:	4606      	mov	r6, r0
 8012210:	b950      	cbnz	r0, 8012228 <__ssputs_r+0x5c>
 8012212:	230c      	movs	r3, #12
 8012214:	f8ca 3000 	str.w	r3, [sl]
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801221e:	81a3      	strh	r3, [r4, #12]
 8012220:	f04f 30ff 	mov.w	r0, #4294967295
 8012224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012228:	6921      	ldr	r1, [r4, #16]
 801222a:	464a      	mov	r2, r9
 801222c:	f7fb ff28 	bl	800e080 <memcpy>
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801223a:	81a3      	strh	r3, [r4, #12]
 801223c:	6126      	str	r6, [r4, #16]
 801223e:	6165      	str	r5, [r4, #20]
 8012240:	444e      	add	r6, r9
 8012242:	eba5 0509 	sub.w	r5, r5, r9
 8012246:	6026      	str	r6, [r4, #0]
 8012248:	60a5      	str	r5, [r4, #8]
 801224a:	463e      	mov	r6, r7
 801224c:	42be      	cmp	r6, r7
 801224e:	d900      	bls.n	8012252 <__ssputs_r+0x86>
 8012250:	463e      	mov	r6, r7
 8012252:	6820      	ldr	r0, [r4, #0]
 8012254:	4632      	mov	r2, r6
 8012256:	4641      	mov	r1, r8
 8012258:	f000 fb70 	bl	801293c <memmove>
 801225c:	68a3      	ldr	r3, [r4, #8]
 801225e:	1b9b      	subs	r3, r3, r6
 8012260:	60a3      	str	r3, [r4, #8]
 8012262:	6823      	ldr	r3, [r4, #0]
 8012264:	4433      	add	r3, r6
 8012266:	6023      	str	r3, [r4, #0]
 8012268:	2000      	movs	r0, #0
 801226a:	e7db      	b.n	8012224 <__ssputs_r+0x58>
 801226c:	462a      	mov	r2, r5
 801226e:	f000 fb8b 	bl	8012988 <_realloc_r>
 8012272:	4606      	mov	r6, r0
 8012274:	2800      	cmp	r0, #0
 8012276:	d1e1      	bne.n	801223c <__ssputs_r+0x70>
 8012278:	6921      	ldr	r1, [r4, #16]
 801227a:	4650      	mov	r0, sl
 801227c:	f7ff fec6 	bl	801200c <_free_r>
 8012280:	e7c7      	b.n	8012212 <__ssputs_r+0x46>
	...

08012284 <_svfiprintf_r>:
 8012284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012288:	4698      	mov	r8, r3
 801228a:	898b      	ldrh	r3, [r1, #12]
 801228c:	061b      	lsls	r3, r3, #24
 801228e:	b09d      	sub	sp, #116	; 0x74
 8012290:	4607      	mov	r7, r0
 8012292:	460d      	mov	r5, r1
 8012294:	4614      	mov	r4, r2
 8012296:	d50e      	bpl.n	80122b6 <_svfiprintf_r+0x32>
 8012298:	690b      	ldr	r3, [r1, #16]
 801229a:	b963      	cbnz	r3, 80122b6 <_svfiprintf_r+0x32>
 801229c:	2140      	movs	r1, #64	; 0x40
 801229e:	f7ff ff21 	bl	80120e4 <_malloc_r>
 80122a2:	6028      	str	r0, [r5, #0]
 80122a4:	6128      	str	r0, [r5, #16]
 80122a6:	b920      	cbnz	r0, 80122b2 <_svfiprintf_r+0x2e>
 80122a8:	230c      	movs	r3, #12
 80122aa:	603b      	str	r3, [r7, #0]
 80122ac:	f04f 30ff 	mov.w	r0, #4294967295
 80122b0:	e0d1      	b.n	8012456 <_svfiprintf_r+0x1d2>
 80122b2:	2340      	movs	r3, #64	; 0x40
 80122b4:	616b      	str	r3, [r5, #20]
 80122b6:	2300      	movs	r3, #0
 80122b8:	9309      	str	r3, [sp, #36]	; 0x24
 80122ba:	2320      	movs	r3, #32
 80122bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80122c4:	2330      	movs	r3, #48	; 0x30
 80122c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012470 <_svfiprintf_r+0x1ec>
 80122ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122ce:	f04f 0901 	mov.w	r9, #1
 80122d2:	4623      	mov	r3, r4
 80122d4:	469a      	mov	sl, r3
 80122d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122da:	b10a      	cbz	r2, 80122e0 <_svfiprintf_r+0x5c>
 80122dc:	2a25      	cmp	r2, #37	; 0x25
 80122de:	d1f9      	bne.n	80122d4 <_svfiprintf_r+0x50>
 80122e0:	ebba 0b04 	subs.w	fp, sl, r4
 80122e4:	d00b      	beq.n	80122fe <_svfiprintf_r+0x7a>
 80122e6:	465b      	mov	r3, fp
 80122e8:	4622      	mov	r2, r4
 80122ea:	4629      	mov	r1, r5
 80122ec:	4638      	mov	r0, r7
 80122ee:	f7ff ff6d 	bl	80121cc <__ssputs_r>
 80122f2:	3001      	adds	r0, #1
 80122f4:	f000 80aa 	beq.w	801244c <_svfiprintf_r+0x1c8>
 80122f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122fa:	445a      	add	r2, fp
 80122fc:	9209      	str	r2, [sp, #36]	; 0x24
 80122fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012302:	2b00      	cmp	r3, #0
 8012304:	f000 80a2 	beq.w	801244c <_svfiprintf_r+0x1c8>
 8012308:	2300      	movs	r3, #0
 801230a:	f04f 32ff 	mov.w	r2, #4294967295
 801230e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012312:	f10a 0a01 	add.w	sl, sl, #1
 8012316:	9304      	str	r3, [sp, #16]
 8012318:	9307      	str	r3, [sp, #28]
 801231a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801231e:	931a      	str	r3, [sp, #104]	; 0x68
 8012320:	4654      	mov	r4, sl
 8012322:	2205      	movs	r2, #5
 8012324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012328:	4851      	ldr	r0, [pc, #324]	; (8012470 <_svfiprintf_r+0x1ec>)
 801232a:	f7ed ff81 	bl	8000230 <memchr>
 801232e:	9a04      	ldr	r2, [sp, #16]
 8012330:	b9d8      	cbnz	r0, 801236a <_svfiprintf_r+0xe6>
 8012332:	06d0      	lsls	r0, r2, #27
 8012334:	bf44      	itt	mi
 8012336:	2320      	movmi	r3, #32
 8012338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801233c:	0711      	lsls	r1, r2, #28
 801233e:	bf44      	itt	mi
 8012340:	232b      	movmi	r3, #43	; 0x2b
 8012342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012346:	f89a 3000 	ldrb.w	r3, [sl]
 801234a:	2b2a      	cmp	r3, #42	; 0x2a
 801234c:	d015      	beq.n	801237a <_svfiprintf_r+0xf6>
 801234e:	9a07      	ldr	r2, [sp, #28]
 8012350:	4654      	mov	r4, sl
 8012352:	2000      	movs	r0, #0
 8012354:	f04f 0c0a 	mov.w	ip, #10
 8012358:	4621      	mov	r1, r4
 801235a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801235e:	3b30      	subs	r3, #48	; 0x30
 8012360:	2b09      	cmp	r3, #9
 8012362:	d94e      	bls.n	8012402 <_svfiprintf_r+0x17e>
 8012364:	b1b0      	cbz	r0, 8012394 <_svfiprintf_r+0x110>
 8012366:	9207      	str	r2, [sp, #28]
 8012368:	e014      	b.n	8012394 <_svfiprintf_r+0x110>
 801236a:	eba0 0308 	sub.w	r3, r0, r8
 801236e:	fa09 f303 	lsl.w	r3, r9, r3
 8012372:	4313      	orrs	r3, r2
 8012374:	9304      	str	r3, [sp, #16]
 8012376:	46a2      	mov	sl, r4
 8012378:	e7d2      	b.n	8012320 <_svfiprintf_r+0x9c>
 801237a:	9b03      	ldr	r3, [sp, #12]
 801237c:	1d19      	adds	r1, r3, #4
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	9103      	str	r1, [sp, #12]
 8012382:	2b00      	cmp	r3, #0
 8012384:	bfbb      	ittet	lt
 8012386:	425b      	neglt	r3, r3
 8012388:	f042 0202 	orrlt.w	r2, r2, #2
 801238c:	9307      	strge	r3, [sp, #28]
 801238e:	9307      	strlt	r3, [sp, #28]
 8012390:	bfb8      	it	lt
 8012392:	9204      	strlt	r2, [sp, #16]
 8012394:	7823      	ldrb	r3, [r4, #0]
 8012396:	2b2e      	cmp	r3, #46	; 0x2e
 8012398:	d10c      	bne.n	80123b4 <_svfiprintf_r+0x130>
 801239a:	7863      	ldrb	r3, [r4, #1]
 801239c:	2b2a      	cmp	r3, #42	; 0x2a
 801239e:	d135      	bne.n	801240c <_svfiprintf_r+0x188>
 80123a0:	9b03      	ldr	r3, [sp, #12]
 80123a2:	1d1a      	adds	r2, r3, #4
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	9203      	str	r2, [sp, #12]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	bfb8      	it	lt
 80123ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80123b0:	3402      	adds	r4, #2
 80123b2:	9305      	str	r3, [sp, #20]
 80123b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012480 <_svfiprintf_r+0x1fc>
 80123b8:	7821      	ldrb	r1, [r4, #0]
 80123ba:	2203      	movs	r2, #3
 80123bc:	4650      	mov	r0, sl
 80123be:	f7ed ff37 	bl	8000230 <memchr>
 80123c2:	b140      	cbz	r0, 80123d6 <_svfiprintf_r+0x152>
 80123c4:	2340      	movs	r3, #64	; 0x40
 80123c6:	eba0 000a 	sub.w	r0, r0, sl
 80123ca:	fa03 f000 	lsl.w	r0, r3, r0
 80123ce:	9b04      	ldr	r3, [sp, #16]
 80123d0:	4303      	orrs	r3, r0
 80123d2:	3401      	adds	r4, #1
 80123d4:	9304      	str	r3, [sp, #16]
 80123d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123da:	4826      	ldr	r0, [pc, #152]	; (8012474 <_svfiprintf_r+0x1f0>)
 80123dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123e0:	2206      	movs	r2, #6
 80123e2:	f7ed ff25 	bl	8000230 <memchr>
 80123e6:	2800      	cmp	r0, #0
 80123e8:	d038      	beq.n	801245c <_svfiprintf_r+0x1d8>
 80123ea:	4b23      	ldr	r3, [pc, #140]	; (8012478 <_svfiprintf_r+0x1f4>)
 80123ec:	bb1b      	cbnz	r3, 8012436 <_svfiprintf_r+0x1b2>
 80123ee:	9b03      	ldr	r3, [sp, #12]
 80123f0:	3307      	adds	r3, #7
 80123f2:	f023 0307 	bic.w	r3, r3, #7
 80123f6:	3308      	adds	r3, #8
 80123f8:	9303      	str	r3, [sp, #12]
 80123fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123fc:	4433      	add	r3, r6
 80123fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012400:	e767      	b.n	80122d2 <_svfiprintf_r+0x4e>
 8012402:	fb0c 3202 	mla	r2, ip, r2, r3
 8012406:	460c      	mov	r4, r1
 8012408:	2001      	movs	r0, #1
 801240a:	e7a5      	b.n	8012358 <_svfiprintf_r+0xd4>
 801240c:	2300      	movs	r3, #0
 801240e:	3401      	adds	r4, #1
 8012410:	9305      	str	r3, [sp, #20]
 8012412:	4619      	mov	r1, r3
 8012414:	f04f 0c0a 	mov.w	ip, #10
 8012418:	4620      	mov	r0, r4
 801241a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801241e:	3a30      	subs	r2, #48	; 0x30
 8012420:	2a09      	cmp	r2, #9
 8012422:	d903      	bls.n	801242c <_svfiprintf_r+0x1a8>
 8012424:	2b00      	cmp	r3, #0
 8012426:	d0c5      	beq.n	80123b4 <_svfiprintf_r+0x130>
 8012428:	9105      	str	r1, [sp, #20]
 801242a:	e7c3      	b.n	80123b4 <_svfiprintf_r+0x130>
 801242c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012430:	4604      	mov	r4, r0
 8012432:	2301      	movs	r3, #1
 8012434:	e7f0      	b.n	8012418 <_svfiprintf_r+0x194>
 8012436:	ab03      	add	r3, sp, #12
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	462a      	mov	r2, r5
 801243c:	4b0f      	ldr	r3, [pc, #60]	; (801247c <_svfiprintf_r+0x1f8>)
 801243e:	a904      	add	r1, sp, #16
 8012440:	4638      	mov	r0, r7
 8012442:	f7fb fed3 	bl	800e1ec <_printf_float>
 8012446:	1c42      	adds	r2, r0, #1
 8012448:	4606      	mov	r6, r0
 801244a:	d1d6      	bne.n	80123fa <_svfiprintf_r+0x176>
 801244c:	89ab      	ldrh	r3, [r5, #12]
 801244e:	065b      	lsls	r3, r3, #25
 8012450:	f53f af2c 	bmi.w	80122ac <_svfiprintf_r+0x28>
 8012454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012456:	b01d      	add	sp, #116	; 0x74
 8012458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801245c:	ab03      	add	r3, sp, #12
 801245e:	9300      	str	r3, [sp, #0]
 8012460:	462a      	mov	r2, r5
 8012462:	4b06      	ldr	r3, [pc, #24]	; (801247c <_svfiprintf_r+0x1f8>)
 8012464:	a904      	add	r1, sp, #16
 8012466:	4638      	mov	r0, r7
 8012468:	f7fc f964 	bl	800e734 <_printf_i>
 801246c:	e7eb      	b.n	8012446 <_svfiprintf_r+0x1c2>
 801246e:	bf00      	nop
 8012470:	0801464c 	.word	0x0801464c
 8012474:	08014656 	.word	0x08014656
 8012478:	0800e1ed 	.word	0x0800e1ed
 801247c:	080121cd 	.word	0x080121cd
 8012480:	08014652 	.word	0x08014652

08012484 <__sfputc_r>:
 8012484:	6893      	ldr	r3, [r2, #8]
 8012486:	3b01      	subs	r3, #1
 8012488:	2b00      	cmp	r3, #0
 801248a:	b410      	push	{r4}
 801248c:	6093      	str	r3, [r2, #8]
 801248e:	da08      	bge.n	80124a2 <__sfputc_r+0x1e>
 8012490:	6994      	ldr	r4, [r2, #24]
 8012492:	42a3      	cmp	r3, r4
 8012494:	db01      	blt.n	801249a <__sfputc_r+0x16>
 8012496:	290a      	cmp	r1, #10
 8012498:	d103      	bne.n	80124a2 <__sfputc_r+0x1e>
 801249a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801249e:	f7fd bbf5 	b.w	800fc8c <__swbuf_r>
 80124a2:	6813      	ldr	r3, [r2, #0]
 80124a4:	1c58      	adds	r0, r3, #1
 80124a6:	6010      	str	r0, [r2, #0]
 80124a8:	7019      	strb	r1, [r3, #0]
 80124aa:	4608      	mov	r0, r1
 80124ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <__sfputs_r>:
 80124b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b4:	4606      	mov	r6, r0
 80124b6:	460f      	mov	r7, r1
 80124b8:	4614      	mov	r4, r2
 80124ba:	18d5      	adds	r5, r2, r3
 80124bc:	42ac      	cmp	r4, r5
 80124be:	d101      	bne.n	80124c4 <__sfputs_r+0x12>
 80124c0:	2000      	movs	r0, #0
 80124c2:	e007      	b.n	80124d4 <__sfputs_r+0x22>
 80124c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c8:	463a      	mov	r2, r7
 80124ca:	4630      	mov	r0, r6
 80124cc:	f7ff ffda 	bl	8012484 <__sfputc_r>
 80124d0:	1c43      	adds	r3, r0, #1
 80124d2:	d1f3      	bne.n	80124bc <__sfputs_r+0xa>
 80124d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124d8 <_vfiprintf_r>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	460d      	mov	r5, r1
 80124de:	b09d      	sub	sp, #116	; 0x74
 80124e0:	4614      	mov	r4, r2
 80124e2:	4698      	mov	r8, r3
 80124e4:	4606      	mov	r6, r0
 80124e6:	b118      	cbz	r0, 80124f0 <_vfiprintf_r+0x18>
 80124e8:	6983      	ldr	r3, [r0, #24]
 80124ea:	b90b      	cbnz	r3, 80124f0 <_vfiprintf_r+0x18>
 80124ec:	f7fe fc24 	bl	8010d38 <__sinit>
 80124f0:	4b89      	ldr	r3, [pc, #548]	; (8012718 <_vfiprintf_r+0x240>)
 80124f2:	429d      	cmp	r5, r3
 80124f4:	d11b      	bne.n	801252e <_vfiprintf_r+0x56>
 80124f6:	6875      	ldr	r5, [r6, #4]
 80124f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124fa:	07d9      	lsls	r1, r3, #31
 80124fc:	d405      	bmi.n	801250a <_vfiprintf_r+0x32>
 80124fe:	89ab      	ldrh	r3, [r5, #12]
 8012500:	059a      	lsls	r2, r3, #22
 8012502:	d402      	bmi.n	801250a <_vfiprintf_r+0x32>
 8012504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012506:	f7ff f828 	bl	801155a <__retarget_lock_acquire_recursive>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	071b      	lsls	r3, r3, #28
 801250e:	d501      	bpl.n	8012514 <_vfiprintf_r+0x3c>
 8012510:	692b      	ldr	r3, [r5, #16]
 8012512:	b9eb      	cbnz	r3, 8012550 <_vfiprintf_r+0x78>
 8012514:	4629      	mov	r1, r5
 8012516:	4630      	mov	r0, r6
 8012518:	f7fd fc0a 	bl	800fd30 <__swsetup_r>
 801251c:	b1c0      	cbz	r0, 8012550 <_vfiprintf_r+0x78>
 801251e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012520:	07dc      	lsls	r4, r3, #31
 8012522:	d50e      	bpl.n	8012542 <_vfiprintf_r+0x6a>
 8012524:	f04f 30ff 	mov.w	r0, #4294967295
 8012528:	b01d      	add	sp, #116	; 0x74
 801252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252e:	4b7b      	ldr	r3, [pc, #492]	; (801271c <_vfiprintf_r+0x244>)
 8012530:	429d      	cmp	r5, r3
 8012532:	d101      	bne.n	8012538 <_vfiprintf_r+0x60>
 8012534:	68b5      	ldr	r5, [r6, #8]
 8012536:	e7df      	b.n	80124f8 <_vfiprintf_r+0x20>
 8012538:	4b79      	ldr	r3, [pc, #484]	; (8012720 <_vfiprintf_r+0x248>)
 801253a:	429d      	cmp	r5, r3
 801253c:	bf08      	it	eq
 801253e:	68f5      	ldreq	r5, [r6, #12]
 8012540:	e7da      	b.n	80124f8 <_vfiprintf_r+0x20>
 8012542:	89ab      	ldrh	r3, [r5, #12]
 8012544:	0598      	lsls	r0, r3, #22
 8012546:	d4ed      	bmi.n	8012524 <_vfiprintf_r+0x4c>
 8012548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801254a:	f7ff f807 	bl	801155c <__retarget_lock_release_recursive>
 801254e:	e7e9      	b.n	8012524 <_vfiprintf_r+0x4c>
 8012550:	2300      	movs	r3, #0
 8012552:	9309      	str	r3, [sp, #36]	; 0x24
 8012554:	2320      	movs	r3, #32
 8012556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801255a:	f8cd 800c 	str.w	r8, [sp, #12]
 801255e:	2330      	movs	r3, #48	; 0x30
 8012560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012724 <_vfiprintf_r+0x24c>
 8012564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012568:	f04f 0901 	mov.w	r9, #1
 801256c:	4623      	mov	r3, r4
 801256e:	469a      	mov	sl, r3
 8012570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012574:	b10a      	cbz	r2, 801257a <_vfiprintf_r+0xa2>
 8012576:	2a25      	cmp	r2, #37	; 0x25
 8012578:	d1f9      	bne.n	801256e <_vfiprintf_r+0x96>
 801257a:	ebba 0b04 	subs.w	fp, sl, r4
 801257e:	d00b      	beq.n	8012598 <_vfiprintf_r+0xc0>
 8012580:	465b      	mov	r3, fp
 8012582:	4622      	mov	r2, r4
 8012584:	4629      	mov	r1, r5
 8012586:	4630      	mov	r0, r6
 8012588:	f7ff ff93 	bl	80124b2 <__sfputs_r>
 801258c:	3001      	adds	r0, #1
 801258e:	f000 80aa 	beq.w	80126e6 <_vfiprintf_r+0x20e>
 8012592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012594:	445a      	add	r2, fp
 8012596:	9209      	str	r2, [sp, #36]	; 0x24
 8012598:	f89a 3000 	ldrb.w	r3, [sl]
 801259c:	2b00      	cmp	r3, #0
 801259e:	f000 80a2 	beq.w	80126e6 <_vfiprintf_r+0x20e>
 80125a2:	2300      	movs	r3, #0
 80125a4:	f04f 32ff 	mov.w	r2, #4294967295
 80125a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125ac:	f10a 0a01 	add.w	sl, sl, #1
 80125b0:	9304      	str	r3, [sp, #16]
 80125b2:	9307      	str	r3, [sp, #28]
 80125b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125b8:	931a      	str	r3, [sp, #104]	; 0x68
 80125ba:	4654      	mov	r4, sl
 80125bc:	2205      	movs	r2, #5
 80125be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125c2:	4858      	ldr	r0, [pc, #352]	; (8012724 <_vfiprintf_r+0x24c>)
 80125c4:	f7ed fe34 	bl	8000230 <memchr>
 80125c8:	9a04      	ldr	r2, [sp, #16]
 80125ca:	b9d8      	cbnz	r0, 8012604 <_vfiprintf_r+0x12c>
 80125cc:	06d1      	lsls	r1, r2, #27
 80125ce:	bf44      	itt	mi
 80125d0:	2320      	movmi	r3, #32
 80125d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125d6:	0713      	lsls	r3, r2, #28
 80125d8:	bf44      	itt	mi
 80125da:	232b      	movmi	r3, #43	; 0x2b
 80125dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125e0:	f89a 3000 	ldrb.w	r3, [sl]
 80125e4:	2b2a      	cmp	r3, #42	; 0x2a
 80125e6:	d015      	beq.n	8012614 <_vfiprintf_r+0x13c>
 80125e8:	9a07      	ldr	r2, [sp, #28]
 80125ea:	4654      	mov	r4, sl
 80125ec:	2000      	movs	r0, #0
 80125ee:	f04f 0c0a 	mov.w	ip, #10
 80125f2:	4621      	mov	r1, r4
 80125f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125f8:	3b30      	subs	r3, #48	; 0x30
 80125fa:	2b09      	cmp	r3, #9
 80125fc:	d94e      	bls.n	801269c <_vfiprintf_r+0x1c4>
 80125fe:	b1b0      	cbz	r0, 801262e <_vfiprintf_r+0x156>
 8012600:	9207      	str	r2, [sp, #28]
 8012602:	e014      	b.n	801262e <_vfiprintf_r+0x156>
 8012604:	eba0 0308 	sub.w	r3, r0, r8
 8012608:	fa09 f303 	lsl.w	r3, r9, r3
 801260c:	4313      	orrs	r3, r2
 801260e:	9304      	str	r3, [sp, #16]
 8012610:	46a2      	mov	sl, r4
 8012612:	e7d2      	b.n	80125ba <_vfiprintf_r+0xe2>
 8012614:	9b03      	ldr	r3, [sp, #12]
 8012616:	1d19      	adds	r1, r3, #4
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	9103      	str	r1, [sp, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	bfbb      	ittet	lt
 8012620:	425b      	neglt	r3, r3
 8012622:	f042 0202 	orrlt.w	r2, r2, #2
 8012626:	9307      	strge	r3, [sp, #28]
 8012628:	9307      	strlt	r3, [sp, #28]
 801262a:	bfb8      	it	lt
 801262c:	9204      	strlt	r2, [sp, #16]
 801262e:	7823      	ldrb	r3, [r4, #0]
 8012630:	2b2e      	cmp	r3, #46	; 0x2e
 8012632:	d10c      	bne.n	801264e <_vfiprintf_r+0x176>
 8012634:	7863      	ldrb	r3, [r4, #1]
 8012636:	2b2a      	cmp	r3, #42	; 0x2a
 8012638:	d135      	bne.n	80126a6 <_vfiprintf_r+0x1ce>
 801263a:	9b03      	ldr	r3, [sp, #12]
 801263c:	1d1a      	adds	r2, r3, #4
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	9203      	str	r2, [sp, #12]
 8012642:	2b00      	cmp	r3, #0
 8012644:	bfb8      	it	lt
 8012646:	f04f 33ff 	movlt.w	r3, #4294967295
 801264a:	3402      	adds	r4, #2
 801264c:	9305      	str	r3, [sp, #20]
 801264e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012734 <_vfiprintf_r+0x25c>
 8012652:	7821      	ldrb	r1, [r4, #0]
 8012654:	2203      	movs	r2, #3
 8012656:	4650      	mov	r0, sl
 8012658:	f7ed fdea 	bl	8000230 <memchr>
 801265c:	b140      	cbz	r0, 8012670 <_vfiprintf_r+0x198>
 801265e:	2340      	movs	r3, #64	; 0x40
 8012660:	eba0 000a 	sub.w	r0, r0, sl
 8012664:	fa03 f000 	lsl.w	r0, r3, r0
 8012668:	9b04      	ldr	r3, [sp, #16]
 801266a:	4303      	orrs	r3, r0
 801266c:	3401      	adds	r4, #1
 801266e:	9304      	str	r3, [sp, #16]
 8012670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012674:	482c      	ldr	r0, [pc, #176]	; (8012728 <_vfiprintf_r+0x250>)
 8012676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801267a:	2206      	movs	r2, #6
 801267c:	f7ed fdd8 	bl	8000230 <memchr>
 8012680:	2800      	cmp	r0, #0
 8012682:	d03f      	beq.n	8012704 <_vfiprintf_r+0x22c>
 8012684:	4b29      	ldr	r3, [pc, #164]	; (801272c <_vfiprintf_r+0x254>)
 8012686:	bb1b      	cbnz	r3, 80126d0 <_vfiprintf_r+0x1f8>
 8012688:	9b03      	ldr	r3, [sp, #12]
 801268a:	3307      	adds	r3, #7
 801268c:	f023 0307 	bic.w	r3, r3, #7
 8012690:	3308      	adds	r3, #8
 8012692:	9303      	str	r3, [sp, #12]
 8012694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012696:	443b      	add	r3, r7
 8012698:	9309      	str	r3, [sp, #36]	; 0x24
 801269a:	e767      	b.n	801256c <_vfiprintf_r+0x94>
 801269c:	fb0c 3202 	mla	r2, ip, r2, r3
 80126a0:	460c      	mov	r4, r1
 80126a2:	2001      	movs	r0, #1
 80126a4:	e7a5      	b.n	80125f2 <_vfiprintf_r+0x11a>
 80126a6:	2300      	movs	r3, #0
 80126a8:	3401      	adds	r4, #1
 80126aa:	9305      	str	r3, [sp, #20]
 80126ac:	4619      	mov	r1, r3
 80126ae:	f04f 0c0a 	mov.w	ip, #10
 80126b2:	4620      	mov	r0, r4
 80126b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126b8:	3a30      	subs	r2, #48	; 0x30
 80126ba:	2a09      	cmp	r2, #9
 80126bc:	d903      	bls.n	80126c6 <_vfiprintf_r+0x1ee>
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d0c5      	beq.n	801264e <_vfiprintf_r+0x176>
 80126c2:	9105      	str	r1, [sp, #20]
 80126c4:	e7c3      	b.n	801264e <_vfiprintf_r+0x176>
 80126c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80126ca:	4604      	mov	r4, r0
 80126cc:	2301      	movs	r3, #1
 80126ce:	e7f0      	b.n	80126b2 <_vfiprintf_r+0x1da>
 80126d0:	ab03      	add	r3, sp, #12
 80126d2:	9300      	str	r3, [sp, #0]
 80126d4:	462a      	mov	r2, r5
 80126d6:	4b16      	ldr	r3, [pc, #88]	; (8012730 <_vfiprintf_r+0x258>)
 80126d8:	a904      	add	r1, sp, #16
 80126da:	4630      	mov	r0, r6
 80126dc:	f7fb fd86 	bl	800e1ec <_printf_float>
 80126e0:	4607      	mov	r7, r0
 80126e2:	1c78      	adds	r0, r7, #1
 80126e4:	d1d6      	bne.n	8012694 <_vfiprintf_r+0x1bc>
 80126e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126e8:	07d9      	lsls	r1, r3, #31
 80126ea:	d405      	bmi.n	80126f8 <_vfiprintf_r+0x220>
 80126ec:	89ab      	ldrh	r3, [r5, #12]
 80126ee:	059a      	lsls	r2, r3, #22
 80126f0:	d402      	bmi.n	80126f8 <_vfiprintf_r+0x220>
 80126f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126f4:	f7fe ff32 	bl	801155c <__retarget_lock_release_recursive>
 80126f8:	89ab      	ldrh	r3, [r5, #12]
 80126fa:	065b      	lsls	r3, r3, #25
 80126fc:	f53f af12 	bmi.w	8012524 <_vfiprintf_r+0x4c>
 8012700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012702:	e711      	b.n	8012528 <_vfiprintf_r+0x50>
 8012704:	ab03      	add	r3, sp, #12
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	462a      	mov	r2, r5
 801270a:	4b09      	ldr	r3, [pc, #36]	; (8012730 <_vfiprintf_r+0x258>)
 801270c:	a904      	add	r1, sp, #16
 801270e:	4630      	mov	r0, r6
 8012710:	f7fc f810 	bl	800e734 <_printf_i>
 8012714:	e7e4      	b.n	80126e0 <_vfiprintf_r+0x208>
 8012716:	bf00      	nop
 8012718:	08014434 	.word	0x08014434
 801271c:	08014454 	.word	0x08014454
 8012720:	08014414 	.word	0x08014414
 8012724:	0801464c 	.word	0x0801464c
 8012728:	08014656 	.word	0x08014656
 801272c:	0800e1ed 	.word	0x0800e1ed
 8012730:	080124b3 	.word	0x080124b3
 8012734:	08014652 	.word	0x08014652

08012738 <nan>:
 8012738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012740 <nan+0x8>
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	00000000 	.word	0x00000000
 8012744:	7ff80000 	.word	0x7ff80000

08012748 <_sbrk_r>:
 8012748:	b538      	push	{r3, r4, r5, lr}
 801274a:	4d06      	ldr	r5, [pc, #24]	; (8012764 <_sbrk_r+0x1c>)
 801274c:	2300      	movs	r3, #0
 801274e:	4604      	mov	r4, r0
 8012750:	4608      	mov	r0, r1
 8012752:	602b      	str	r3, [r5, #0]
 8012754:	f7f3 fa0e 	bl	8005b74 <_sbrk>
 8012758:	1c43      	adds	r3, r0, #1
 801275a:	d102      	bne.n	8012762 <_sbrk_r+0x1a>
 801275c:	682b      	ldr	r3, [r5, #0]
 801275e:	b103      	cbz	r3, 8012762 <_sbrk_r+0x1a>
 8012760:	6023      	str	r3, [r4, #0]
 8012762:	bd38      	pop	{r3, r4, r5, pc}
 8012764:	20009934 	.word	0x20009934

08012768 <__sread>:
 8012768:	b510      	push	{r4, lr}
 801276a:	460c      	mov	r4, r1
 801276c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012770:	f000 f93a 	bl	80129e8 <_read_r>
 8012774:	2800      	cmp	r0, #0
 8012776:	bfab      	itete	ge
 8012778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801277a:	89a3      	ldrhlt	r3, [r4, #12]
 801277c:	181b      	addge	r3, r3, r0
 801277e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012782:	bfac      	ite	ge
 8012784:	6563      	strge	r3, [r4, #84]	; 0x54
 8012786:	81a3      	strhlt	r3, [r4, #12]
 8012788:	bd10      	pop	{r4, pc}

0801278a <__swrite>:
 801278a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801278e:	461f      	mov	r7, r3
 8012790:	898b      	ldrh	r3, [r1, #12]
 8012792:	05db      	lsls	r3, r3, #23
 8012794:	4605      	mov	r5, r0
 8012796:	460c      	mov	r4, r1
 8012798:	4616      	mov	r6, r2
 801279a:	d505      	bpl.n	80127a8 <__swrite+0x1e>
 801279c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127a0:	2302      	movs	r3, #2
 80127a2:	2200      	movs	r2, #0
 80127a4:	f000 f8b8 	bl	8012918 <_lseek_r>
 80127a8:	89a3      	ldrh	r3, [r4, #12]
 80127aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127b2:	81a3      	strh	r3, [r4, #12]
 80127b4:	4632      	mov	r2, r6
 80127b6:	463b      	mov	r3, r7
 80127b8:	4628      	mov	r0, r5
 80127ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127be:	f000 b837 	b.w	8012830 <_write_r>

080127c2 <__sseek>:
 80127c2:	b510      	push	{r4, lr}
 80127c4:	460c      	mov	r4, r1
 80127c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ca:	f000 f8a5 	bl	8012918 <_lseek_r>
 80127ce:	1c43      	adds	r3, r0, #1
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	bf15      	itete	ne
 80127d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80127d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80127de:	81a3      	strheq	r3, [r4, #12]
 80127e0:	bf18      	it	ne
 80127e2:	81a3      	strhne	r3, [r4, #12]
 80127e4:	bd10      	pop	{r4, pc}

080127e6 <__sclose>:
 80127e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ea:	f000 b851 	b.w	8012890 <_close_r>

080127ee <strncmp>:
 80127ee:	b510      	push	{r4, lr}
 80127f0:	b17a      	cbz	r2, 8012812 <strncmp+0x24>
 80127f2:	4603      	mov	r3, r0
 80127f4:	3901      	subs	r1, #1
 80127f6:	1884      	adds	r4, r0, r2
 80127f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80127fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012800:	4290      	cmp	r0, r2
 8012802:	d101      	bne.n	8012808 <strncmp+0x1a>
 8012804:	42a3      	cmp	r3, r4
 8012806:	d101      	bne.n	801280c <strncmp+0x1e>
 8012808:	1a80      	subs	r0, r0, r2
 801280a:	bd10      	pop	{r4, pc}
 801280c:	2800      	cmp	r0, #0
 801280e:	d1f3      	bne.n	80127f8 <strncmp+0xa>
 8012810:	e7fa      	b.n	8012808 <strncmp+0x1a>
 8012812:	4610      	mov	r0, r2
 8012814:	e7f9      	b.n	801280a <strncmp+0x1c>

08012816 <__ascii_wctomb>:
 8012816:	b149      	cbz	r1, 801282c <__ascii_wctomb+0x16>
 8012818:	2aff      	cmp	r2, #255	; 0xff
 801281a:	bf85      	ittet	hi
 801281c:	238a      	movhi	r3, #138	; 0x8a
 801281e:	6003      	strhi	r3, [r0, #0]
 8012820:	700a      	strbls	r2, [r1, #0]
 8012822:	f04f 30ff 	movhi.w	r0, #4294967295
 8012826:	bf98      	it	ls
 8012828:	2001      	movls	r0, #1
 801282a:	4770      	bx	lr
 801282c:	4608      	mov	r0, r1
 801282e:	4770      	bx	lr

08012830 <_write_r>:
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	4d07      	ldr	r5, [pc, #28]	; (8012850 <_write_r+0x20>)
 8012834:	4604      	mov	r4, r0
 8012836:	4608      	mov	r0, r1
 8012838:	4611      	mov	r1, r2
 801283a:	2200      	movs	r2, #0
 801283c:	602a      	str	r2, [r5, #0]
 801283e:	461a      	mov	r2, r3
 8012840:	f7f3 f948 	bl	8005ad4 <_write>
 8012844:	1c43      	adds	r3, r0, #1
 8012846:	d102      	bne.n	801284e <_write_r+0x1e>
 8012848:	682b      	ldr	r3, [r5, #0]
 801284a:	b103      	cbz	r3, 801284e <_write_r+0x1e>
 801284c:	6023      	str	r3, [r4, #0]
 801284e:	bd38      	pop	{r3, r4, r5, pc}
 8012850:	20009934 	.word	0x20009934

08012854 <__assert_func>:
 8012854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012856:	4614      	mov	r4, r2
 8012858:	461a      	mov	r2, r3
 801285a:	4b09      	ldr	r3, [pc, #36]	; (8012880 <__assert_func+0x2c>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	4605      	mov	r5, r0
 8012860:	68d8      	ldr	r0, [r3, #12]
 8012862:	b14c      	cbz	r4, 8012878 <__assert_func+0x24>
 8012864:	4b07      	ldr	r3, [pc, #28]	; (8012884 <__assert_func+0x30>)
 8012866:	9100      	str	r1, [sp, #0]
 8012868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801286c:	4906      	ldr	r1, [pc, #24]	; (8012888 <__assert_func+0x34>)
 801286e:	462b      	mov	r3, r5
 8012870:	f000 f81e 	bl	80128b0 <fiprintf>
 8012874:	f000 f8ca 	bl	8012a0c <abort>
 8012878:	4b04      	ldr	r3, [pc, #16]	; (801288c <__assert_func+0x38>)
 801287a:	461c      	mov	r4, r3
 801287c:	e7f3      	b.n	8012866 <__assert_func+0x12>
 801287e:	bf00      	nop
 8012880:	2000004c 	.word	0x2000004c
 8012884:	0801465d 	.word	0x0801465d
 8012888:	0801466a 	.word	0x0801466a
 801288c:	08014698 	.word	0x08014698

08012890 <_close_r>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4d06      	ldr	r5, [pc, #24]	; (80128ac <_close_r+0x1c>)
 8012894:	2300      	movs	r3, #0
 8012896:	4604      	mov	r4, r0
 8012898:	4608      	mov	r0, r1
 801289a:	602b      	str	r3, [r5, #0]
 801289c:	f7f3 f936 	bl	8005b0c <_close>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_close_r+0x1a>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_close_r+0x1a>
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	20009934 	.word	0x20009934

080128b0 <fiprintf>:
 80128b0:	b40e      	push	{r1, r2, r3}
 80128b2:	b503      	push	{r0, r1, lr}
 80128b4:	4601      	mov	r1, r0
 80128b6:	ab03      	add	r3, sp, #12
 80128b8:	4805      	ldr	r0, [pc, #20]	; (80128d0 <fiprintf+0x20>)
 80128ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80128be:	6800      	ldr	r0, [r0, #0]
 80128c0:	9301      	str	r3, [sp, #4]
 80128c2:	f7ff fe09 	bl	80124d8 <_vfiprintf_r>
 80128c6:	b002      	add	sp, #8
 80128c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80128cc:	b003      	add	sp, #12
 80128ce:	4770      	bx	lr
 80128d0:	2000004c 	.word	0x2000004c

080128d4 <_fstat_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4d07      	ldr	r5, [pc, #28]	; (80128f4 <_fstat_r+0x20>)
 80128d8:	2300      	movs	r3, #0
 80128da:	4604      	mov	r4, r0
 80128dc:	4608      	mov	r0, r1
 80128de:	4611      	mov	r1, r2
 80128e0:	602b      	str	r3, [r5, #0]
 80128e2:	f7f3 f91f 	bl	8005b24 <_fstat>
 80128e6:	1c43      	adds	r3, r0, #1
 80128e8:	d102      	bne.n	80128f0 <_fstat_r+0x1c>
 80128ea:	682b      	ldr	r3, [r5, #0]
 80128ec:	b103      	cbz	r3, 80128f0 <_fstat_r+0x1c>
 80128ee:	6023      	str	r3, [r4, #0]
 80128f0:	bd38      	pop	{r3, r4, r5, pc}
 80128f2:	bf00      	nop
 80128f4:	20009934 	.word	0x20009934

080128f8 <_isatty_r>:
 80128f8:	b538      	push	{r3, r4, r5, lr}
 80128fa:	4d06      	ldr	r5, [pc, #24]	; (8012914 <_isatty_r+0x1c>)
 80128fc:	2300      	movs	r3, #0
 80128fe:	4604      	mov	r4, r0
 8012900:	4608      	mov	r0, r1
 8012902:	602b      	str	r3, [r5, #0]
 8012904:	f7f3 f91e 	bl	8005b44 <_isatty>
 8012908:	1c43      	adds	r3, r0, #1
 801290a:	d102      	bne.n	8012912 <_isatty_r+0x1a>
 801290c:	682b      	ldr	r3, [r5, #0]
 801290e:	b103      	cbz	r3, 8012912 <_isatty_r+0x1a>
 8012910:	6023      	str	r3, [r4, #0]
 8012912:	bd38      	pop	{r3, r4, r5, pc}
 8012914:	20009934 	.word	0x20009934

08012918 <_lseek_r>:
 8012918:	b538      	push	{r3, r4, r5, lr}
 801291a:	4d07      	ldr	r5, [pc, #28]	; (8012938 <_lseek_r+0x20>)
 801291c:	4604      	mov	r4, r0
 801291e:	4608      	mov	r0, r1
 8012920:	4611      	mov	r1, r2
 8012922:	2200      	movs	r2, #0
 8012924:	602a      	str	r2, [r5, #0]
 8012926:	461a      	mov	r2, r3
 8012928:	f7f3 f917 	bl	8005b5a <_lseek>
 801292c:	1c43      	adds	r3, r0, #1
 801292e:	d102      	bne.n	8012936 <_lseek_r+0x1e>
 8012930:	682b      	ldr	r3, [r5, #0]
 8012932:	b103      	cbz	r3, 8012936 <_lseek_r+0x1e>
 8012934:	6023      	str	r3, [r4, #0]
 8012936:	bd38      	pop	{r3, r4, r5, pc}
 8012938:	20009934 	.word	0x20009934

0801293c <memmove>:
 801293c:	4288      	cmp	r0, r1
 801293e:	b510      	push	{r4, lr}
 8012940:	eb01 0402 	add.w	r4, r1, r2
 8012944:	d902      	bls.n	801294c <memmove+0x10>
 8012946:	4284      	cmp	r4, r0
 8012948:	4623      	mov	r3, r4
 801294a:	d807      	bhi.n	801295c <memmove+0x20>
 801294c:	1e43      	subs	r3, r0, #1
 801294e:	42a1      	cmp	r1, r4
 8012950:	d008      	beq.n	8012964 <memmove+0x28>
 8012952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012956:	f803 2f01 	strb.w	r2, [r3, #1]!
 801295a:	e7f8      	b.n	801294e <memmove+0x12>
 801295c:	4402      	add	r2, r0
 801295e:	4601      	mov	r1, r0
 8012960:	428a      	cmp	r2, r1
 8012962:	d100      	bne.n	8012966 <memmove+0x2a>
 8012964:	bd10      	pop	{r4, pc}
 8012966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801296a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801296e:	e7f7      	b.n	8012960 <memmove+0x24>

08012970 <__malloc_lock>:
 8012970:	4801      	ldr	r0, [pc, #4]	; (8012978 <__malloc_lock+0x8>)
 8012972:	f7fe bdf2 	b.w	801155a <__retarget_lock_acquire_recursive>
 8012976:	bf00      	nop
 8012978:	20009928 	.word	0x20009928

0801297c <__malloc_unlock>:
 801297c:	4801      	ldr	r0, [pc, #4]	; (8012984 <__malloc_unlock+0x8>)
 801297e:	f7fe bded 	b.w	801155c <__retarget_lock_release_recursive>
 8012982:	bf00      	nop
 8012984:	20009928 	.word	0x20009928

08012988 <_realloc_r>:
 8012988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801298c:	4680      	mov	r8, r0
 801298e:	4614      	mov	r4, r2
 8012990:	460e      	mov	r6, r1
 8012992:	b921      	cbnz	r1, 801299e <_realloc_r+0x16>
 8012994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012998:	4611      	mov	r1, r2
 801299a:	f7ff bba3 	b.w	80120e4 <_malloc_r>
 801299e:	b92a      	cbnz	r2, 80129ac <_realloc_r+0x24>
 80129a0:	f7ff fb34 	bl	801200c <_free_r>
 80129a4:	4625      	mov	r5, r4
 80129a6:	4628      	mov	r0, r5
 80129a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ac:	f000 f835 	bl	8012a1a <_malloc_usable_size_r>
 80129b0:	4284      	cmp	r4, r0
 80129b2:	4607      	mov	r7, r0
 80129b4:	d802      	bhi.n	80129bc <_realloc_r+0x34>
 80129b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80129ba:	d812      	bhi.n	80129e2 <_realloc_r+0x5a>
 80129bc:	4621      	mov	r1, r4
 80129be:	4640      	mov	r0, r8
 80129c0:	f7ff fb90 	bl	80120e4 <_malloc_r>
 80129c4:	4605      	mov	r5, r0
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d0ed      	beq.n	80129a6 <_realloc_r+0x1e>
 80129ca:	42bc      	cmp	r4, r7
 80129cc:	4622      	mov	r2, r4
 80129ce:	4631      	mov	r1, r6
 80129d0:	bf28      	it	cs
 80129d2:	463a      	movcs	r2, r7
 80129d4:	f7fb fb54 	bl	800e080 <memcpy>
 80129d8:	4631      	mov	r1, r6
 80129da:	4640      	mov	r0, r8
 80129dc:	f7ff fb16 	bl	801200c <_free_r>
 80129e0:	e7e1      	b.n	80129a6 <_realloc_r+0x1e>
 80129e2:	4635      	mov	r5, r6
 80129e4:	e7df      	b.n	80129a6 <_realloc_r+0x1e>
	...

080129e8 <_read_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	4d07      	ldr	r5, [pc, #28]	; (8012a08 <_read_r+0x20>)
 80129ec:	4604      	mov	r4, r0
 80129ee:	4608      	mov	r0, r1
 80129f0:	4611      	mov	r1, r2
 80129f2:	2200      	movs	r2, #0
 80129f4:	602a      	str	r2, [r5, #0]
 80129f6:	461a      	mov	r2, r3
 80129f8:	f7f3 f84f 	bl	8005a9a <_read>
 80129fc:	1c43      	adds	r3, r0, #1
 80129fe:	d102      	bne.n	8012a06 <_read_r+0x1e>
 8012a00:	682b      	ldr	r3, [r5, #0]
 8012a02:	b103      	cbz	r3, 8012a06 <_read_r+0x1e>
 8012a04:	6023      	str	r3, [r4, #0]
 8012a06:	bd38      	pop	{r3, r4, r5, pc}
 8012a08:	20009934 	.word	0x20009934

08012a0c <abort>:
 8012a0c:	b508      	push	{r3, lr}
 8012a0e:	2006      	movs	r0, #6
 8012a10:	f000 f834 	bl	8012a7c <raise>
 8012a14:	2001      	movs	r0, #1
 8012a16:	f7f3 f836 	bl	8005a86 <_exit>

08012a1a <_malloc_usable_size_r>:
 8012a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a1e:	1f18      	subs	r0, r3, #4
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	bfbc      	itt	lt
 8012a24:	580b      	ldrlt	r3, [r1, r0]
 8012a26:	18c0      	addlt	r0, r0, r3
 8012a28:	4770      	bx	lr

08012a2a <_raise_r>:
 8012a2a:	291f      	cmp	r1, #31
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	4604      	mov	r4, r0
 8012a30:	460d      	mov	r5, r1
 8012a32:	d904      	bls.n	8012a3e <_raise_r+0x14>
 8012a34:	2316      	movs	r3, #22
 8012a36:	6003      	str	r3, [r0, #0]
 8012a38:	f04f 30ff 	mov.w	r0, #4294967295
 8012a3c:	bd38      	pop	{r3, r4, r5, pc}
 8012a3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a40:	b112      	cbz	r2, 8012a48 <_raise_r+0x1e>
 8012a42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a46:	b94b      	cbnz	r3, 8012a5c <_raise_r+0x32>
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f000 f831 	bl	8012ab0 <_getpid_r>
 8012a4e:	462a      	mov	r2, r5
 8012a50:	4601      	mov	r1, r0
 8012a52:	4620      	mov	r0, r4
 8012a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a58:	f000 b818 	b.w	8012a8c <_kill_r>
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d00a      	beq.n	8012a76 <_raise_r+0x4c>
 8012a60:	1c59      	adds	r1, r3, #1
 8012a62:	d103      	bne.n	8012a6c <_raise_r+0x42>
 8012a64:	2316      	movs	r3, #22
 8012a66:	6003      	str	r3, [r0, #0]
 8012a68:	2001      	movs	r0, #1
 8012a6a:	e7e7      	b.n	8012a3c <_raise_r+0x12>
 8012a6c:	2400      	movs	r4, #0
 8012a6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a72:	4628      	mov	r0, r5
 8012a74:	4798      	blx	r3
 8012a76:	2000      	movs	r0, #0
 8012a78:	e7e0      	b.n	8012a3c <_raise_r+0x12>
	...

08012a7c <raise>:
 8012a7c:	4b02      	ldr	r3, [pc, #8]	; (8012a88 <raise+0xc>)
 8012a7e:	4601      	mov	r1, r0
 8012a80:	6818      	ldr	r0, [r3, #0]
 8012a82:	f7ff bfd2 	b.w	8012a2a <_raise_r>
 8012a86:	bf00      	nop
 8012a88:	2000004c 	.word	0x2000004c

08012a8c <_kill_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d07      	ldr	r5, [pc, #28]	; (8012aac <_kill_r+0x20>)
 8012a90:	2300      	movs	r3, #0
 8012a92:	4604      	mov	r4, r0
 8012a94:	4608      	mov	r0, r1
 8012a96:	4611      	mov	r1, r2
 8012a98:	602b      	str	r3, [r5, #0]
 8012a9a:	f7f2 ffe4 	bl	8005a66 <_kill>
 8012a9e:	1c43      	adds	r3, r0, #1
 8012aa0:	d102      	bne.n	8012aa8 <_kill_r+0x1c>
 8012aa2:	682b      	ldr	r3, [r5, #0]
 8012aa4:	b103      	cbz	r3, 8012aa8 <_kill_r+0x1c>
 8012aa6:	6023      	str	r3, [r4, #0]
 8012aa8:	bd38      	pop	{r3, r4, r5, pc}
 8012aaa:	bf00      	nop
 8012aac:	20009934 	.word	0x20009934

08012ab0 <_getpid_r>:
 8012ab0:	f7f2 bfd1 	b.w	8005a56 <_getpid>

08012ab4 <round>:
 8012ab4:	ec51 0b10 	vmov	r0, r1, d0
 8012ab8:	b570      	push	{r4, r5, r6, lr}
 8012aba:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8012abe:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8012ac2:	2c13      	cmp	r4, #19
 8012ac4:	ee10 2a10 	vmov	r2, s0
 8012ac8:	460b      	mov	r3, r1
 8012aca:	dc19      	bgt.n	8012b00 <round+0x4c>
 8012acc:	2c00      	cmp	r4, #0
 8012ace:	da09      	bge.n	8012ae4 <round+0x30>
 8012ad0:	3401      	adds	r4, #1
 8012ad2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012ad6:	d103      	bne.n	8012ae0 <round+0x2c>
 8012ad8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012adc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	e028      	b.n	8012b36 <round+0x82>
 8012ae4:	4d15      	ldr	r5, [pc, #84]	; (8012b3c <round+0x88>)
 8012ae6:	4125      	asrs	r5, r4
 8012ae8:	ea01 0605 	and.w	r6, r1, r5
 8012aec:	4332      	orrs	r2, r6
 8012aee:	d00e      	beq.n	8012b0e <round+0x5a>
 8012af0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012af4:	fa42 f404 	asr.w	r4, r2, r4
 8012af8:	4423      	add	r3, r4
 8012afa:	ea23 0305 	bic.w	r3, r3, r5
 8012afe:	e7ef      	b.n	8012ae0 <round+0x2c>
 8012b00:	2c33      	cmp	r4, #51	; 0x33
 8012b02:	dd07      	ble.n	8012b14 <round+0x60>
 8012b04:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012b08:	d101      	bne.n	8012b0e <round+0x5a>
 8012b0a:	f7ed fbe7 	bl	80002dc <__adddf3>
 8012b0e:	ec41 0b10 	vmov	d0, r0, r1
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8012b18:	f04f 35ff 	mov.w	r5, #4294967295
 8012b1c:	40f5      	lsrs	r5, r6
 8012b1e:	4228      	tst	r0, r5
 8012b20:	d0f5      	beq.n	8012b0e <round+0x5a>
 8012b22:	2101      	movs	r1, #1
 8012b24:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012b28:	fa01 f404 	lsl.w	r4, r1, r4
 8012b2c:	1912      	adds	r2, r2, r4
 8012b2e:	bf28      	it	cs
 8012b30:	185b      	addcs	r3, r3, r1
 8012b32:	ea22 0205 	bic.w	r2, r2, r5
 8012b36:	4619      	mov	r1, r3
 8012b38:	4610      	mov	r0, r2
 8012b3a:	e7e8      	b.n	8012b0e <round+0x5a>
 8012b3c:	000fffff 	.word	0x000fffff

08012b40 <fmaxf>:
 8012b40:	b508      	push	{r3, lr}
 8012b42:	ed2d 8b02 	vpush	{d8}
 8012b46:	eeb0 8a40 	vmov.f32	s16, s0
 8012b4a:	eef0 8a60 	vmov.f32	s17, s1
 8012b4e:	f000 f82d 	bl	8012bac <__fpclassifyf>
 8012b52:	b148      	cbz	r0, 8012b68 <fmaxf+0x28>
 8012b54:	eeb0 0a68 	vmov.f32	s0, s17
 8012b58:	f000 f828 	bl	8012bac <__fpclassifyf>
 8012b5c:	b130      	cbz	r0, 8012b6c <fmaxf+0x2c>
 8012b5e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	dc01      	bgt.n	8012b6c <fmaxf+0x2c>
 8012b68:	eeb0 8a68 	vmov.f32	s16, s17
 8012b6c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b70:	ecbd 8b02 	vpop	{d8}
 8012b74:	bd08      	pop	{r3, pc}

08012b76 <fminf>:
 8012b76:	b508      	push	{r3, lr}
 8012b78:	ed2d 8b02 	vpush	{d8}
 8012b7c:	eeb0 8a40 	vmov.f32	s16, s0
 8012b80:	eef0 8a60 	vmov.f32	s17, s1
 8012b84:	f000 f812 	bl	8012bac <__fpclassifyf>
 8012b88:	b148      	cbz	r0, 8012b9e <fminf+0x28>
 8012b8a:	eeb0 0a68 	vmov.f32	s0, s17
 8012b8e:	f000 f80d 	bl	8012bac <__fpclassifyf>
 8012b92:	b130      	cbz	r0, 8012ba2 <fminf+0x2c>
 8012b94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9c:	d401      	bmi.n	8012ba2 <fminf+0x2c>
 8012b9e:	eeb0 8a68 	vmov.f32	s16, s17
 8012ba2:	eeb0 0a48 	vmov.f32	s0, s16
 8012ba6:	ecbd 8b02 	vpop	{d8}
 8012baa:	bd08      	pop	{r3, pc}

08012bac <__fpclassifyf>:
 8012bac:	ee10 3a10 	vmov	r3, s0
 8012bb0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8012bb4:	d00d      	beq.n	8012bd2 <__fpclassifyf+0x26>
 8012bb6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8012bba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012bbe:	d30a      	bcc.n	8012bd6 <__fpclassifyf+0x2a>
 8012bc0:	4b07      	ldr	r3, [pc, #28]	; (8012be0 <__fpclassifyf+0x34>)
 8012bc2:	1e42      	subs	r2, r0, #1
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d908      	bls.n	8012bda <__fpclassifyf+0x2e>
 8012bc8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8012bcc:	4258      	negs	r0, r3
 8012bce:	4158      	adcs	r0, r3
 8012bd0:	4770      	bx	lr
 8012bd2:	2002      	movs	r0, #2
 8012bd4:	4770      	bx	lr
 8012bd6:	2004      	movs	r0, #4
 8012bd8:	4770      	bx	lr
 8012bda:	2003      	movs	r0, #3
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop
 8012be0:	007ffffe 	.word	0x007ffffe
 8012be4:	00000000 	.word	0x00000000

08012be8 <exp>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	ed2d 8b02 	vpush	{d8}
 8012bee:	ec55 4b10 	vmov	r4, r5, d0
 8012bf2:	f000 f881 	bl	8012cf8 <__ieee754_exp>
 8012bf6:	eeb0 8a40 	vmov.f32	s16, s0
 8012bfa:	eef0 8a60 	vmov.f32	s17, s1
 8012bfe:	ec45 4b10 	vmov	d0, r4, r5
 8012c02:	f000 fab0 	bl	8013166 <finite>
 8012c06:	b168      	cbz	r0, 8012c24 <exp+0x3c>
 8012c08:	a317      	add	r3, pc, #92	; (adr r3, 8012c68 <exp+0x80>)
 8012c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0e:	4620      	mov	r0, r4
 8012c10:	4629      	mov	r1, r5
 8012c12:	f7ed ffa9 	bl	8000b68 <__aeabi_dcmpgt>
 8012c16:	b160      	cbz	r0, 8012c32 <exp+0x4a>
 8012c18:	f7fb fa08 	bl	800e02c <__errno>
 8012c1c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8012c58 <exp+0x70>
 8012c20:	2322      	movs	r3, #34	; 0x22
 8012c22:	6003      	str	r3, [r0, #0]
 8012c24:	eeb0 0a48 	vmov.f32	s0, s16
 8012c28:	eef0 0a68 	vmov.f32	s1, s17
 8012c2c:	ecbd 8b02 	vpop	{d8}
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	a30f      	add	r3, pc, #60	; (adr r3, 8012c70 <exp+0x88>)
 8012c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c38:	4620      	mov	r0, r4
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	f7ed ff76 	bl	8000b2c <__aeabi_dcmplt>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	d0ef      	beq.n	8012c24 <exp+0x3c>
 8012c44:	f7fb f9f2 	bl	800e02c <__errno>
 8012c48:	2322      	movs	r3, #34	; 0x22
 8012c4a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8012c60 <exp+0x78>
 8012c4e:	6003      	str	r3, [r0, #0]
 8012c50:	e7e8      	b.n	8012c24 <exp+0x3c>
 8012c52:	bf00      	nop
 8012c54:	f3af 8000 	nop.w
 8012c58:	00000000 	.word	0x00000000
 8012c5c:	7ff00000 	.word	0x7ff00000
	...
 8012c68:	fefa39ef 	.word	0xfefa39ef
 8012c6c:	40862e42 	.word	0x40862e42
 8012c70:	d52d3051 	.word	0xd52d3051
 8012c74:	c0874910 	.word	0xc0874910

08012c78 <fmodf>:
 8012c78:	b508      	push	{r3, lr}
 8012c7a:	ed2d 8b02 	vpush	{d8}
 8012c7e:	eef0 8a40 	vmov.f32	s17, s0
 8012c82:	eeb0 8a60 	vmov.f32	s16, s1
 8012c86:	f000 f9b9 	bl	8012ffc <__ieee754_fmodf>
 8012c8a:	eef4 8a48 	vcmp.f32	s17, s16
 8012c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c92:	d60c      	bvs.n	8012cae <fmodf+0x36>
 8012c94:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012cb4 <fmodf+0x3c>
 8012c98:	eeb4 8a68 	vcmp.f32	s16, s17
 8012c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca0:	d105      	bne.n	8012cae <fmodf+0x36>
 8012ca2:	f7fb f9c3 	bl	800e02c <__errno>
 8012ca6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012caa:	2321      	movs	r3, #33	; 0x21
 8012cac:	6003      	str	r3, [r0, #0]
 8012cae:	ecbd 8b02 	vpop	{d8}
 8012cb2:	bd08      	pop	{r3, pc}
 8012cb4:	00000000 	.word	0x00000000

08012cb8 <sqrtf>:
 8012cb8:	b508      	push	{r3, lr}
 8012cba:	ed2d 8b02 	vpush	{d8}
 8012cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8012cc2:	f000 fa1d 	bl	8013100 <__ieee754_sqrtf>
 8012cc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8012cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cce:	d60c      	bvs.n	8012cea <sqrtf+0x32>
 8012cd0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012cf0 <sqrtf+0x38>
 8012cd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cdc:	d505      	bpl.n	8012cea <sqrtf+0x32>
 8012cde:	f7fb f9a5 	bl	800e02c <__errno>
 8012ce2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012ce6:	2321      	movs	r3, #33	; 0x21
 8012ce8:	6003      	str	r3, [r0, #0]
 8012cea:	ecbd 8b02 	vpop	{d8}
 8012cee:	bd08      	pop	{r3, pc}
	...

08012cf8 <__ieee754_exp>:
 8012cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cfc:	ec55 4b10 	vmov	r4, r5, d0
 8012d00:	49b5      	ldr	r1, [pc, #724]	; (8012fd8 <__ieee754_exp+0x2e0>)
 8012d02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012d06:	428b      	cmp	r3, r1
 8012d08:	ed2d 8b04 	vpush	{d8-d9}
 8012d0c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8012d10:	d93d      	bls.n	8012d8e <__ieee754_exp+0x96>
 8012d12:	49b2      	ldr	r1, [pc, #712]	; (8012fdc <__ieee754_exp+0x2e4>)
 8012d14:	428b      	cmp	r3, r1
 8012d16:	d918      	bls.n	8012d4a <__ieee754_exp+0x52>
 8012d18:	ee10 3a10 	vmov	r3, s0
 8012d1c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8012d20:	4313      	orrs	r3, r2
 8012d22:	d009      	beq.n	8012d38 <__ieee754_exp+0x40>
 8012d24:	ee10 2a10 	vmov	r2, s0
 8012d28:	462b      	mov	r3, r5
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	f7ed fad5 	bl	80002dc <__adddf3>
 8012d32:	4604      	mov	r4, r0
 8012d34:	460d      	mov	r5, r1
 8012d36:	e002      	b.n	8012d3e <__ieee754_exp+0x46>
 8012d38:	b10e      	cbz	r6, 8012d3e <__ieee754_exp+0x46>
 8012d3a:	2400      	movs	r4, #0
 8012d3c:	2500      	movs	r5, #0
 8012d3e:	ecbd 8b04 	vpop	{d8-d9}
 8012d42:	ec45 4b10 	vmov	d0, r4, r5
 8012d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d4a:	a38d      	add	r3, pc, #564	; (adr r3, 8012f80 <__ieee754_exp+0x288>)
 8012d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d50:	ee10 0a10 	vmov	r0, s0
 8012d54:	4629      	mov	r1, r5
 8012d56:	f7ed ff07 	bl	8000b68 <__aeabi_dcmpgt>
 8012d5a:	4607      	mov	r7, r0
 8012d5c:	b130      	cbz	r0, 8012d6c <__ieee754_exp+0x74>
 8012d5e:	ecbd 8b04 	vpop	{d8-d9}
 8012d62:	2000      	movs	r0, #0
 8012d64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d68:	f000 b9f4 	b.w	8013154 <__math_oflow>
 8012d6c:	a386      	add	r3, pc, #536	; (adr r3, 8012f88 <__ieee754_exp+0x290>)
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	4620      	mov	r0, r4
 8012d74:	4629      	mov	r1, r5
 8012d76:	f7ed fed9 	bl	8000b2c <__aeabi_dcmplt>
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	f000 808b 	beq.w	8012e96 <__ieee754_exp+0x19e>
 8012d80:	ecbd 8b04 	vpop	{d8-d9}
 8012d84:	4638      	mov	r0, r7
 8012d86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d8a:	f000 b9da 	b.w	8013142 <__math_uflow>
 8012d8e:	4a94      	ldr	r2, [pc, #592]	; (8012fe0 <__ieee754_exp+0x2e8>)
 8012d90:	4293      	cmp	r3, r2
 8012d92:	f240 80ac 	bls.w	8012eee <__ieee754_exp+0x1f6>
 8012d96:	4a93      	ldr	r2, [pc, #588]	; (8012fe4 <__ieee754_exp+0x2ec>)
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	d87c      	bhi.n	8012e96 <__ieee754_exp+0x19e>
 8012d9c:	4b92      	ldr	r3, [pc, #584]	; (8012fe8 <__ieee754_exp+0x2f0>)
 8012d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da6:	ee10 0a10 	vmov	r0, s0
 8012daa:	4629      	mov	r1, r5
 8012dac:	f7ed fa94 	bl	80002d8 <__aeabi_dsub>
 8012db0:	4b8e      	ldr	r3, [pc, #568]	; (8012fec <__ieee754_exp+0x2f4>)
 8012db2:	00f7      	lsls	r7, r6, #3
 8012db4:	443b      	add	r3, r7
 8012db6:	ed93 7b00 	vldr	d7, [r3]
 8012dba:	f1c6 0a01 	rsb	sl, r6, #1
 8012dbe:	4680      	mov	r8, r0
 8012dc0:	4689      	mov	r9, r1
 8012dc2:	ebaa 0a06 	sub.w	sl, sl, r6
 8012dc6:	eeb0 8a47 	vmov.f32	s16, s14
 8012dca:	eef0 8a67 	vmov.f32	s17, s15
 8012dce:	ec53 2b18 	vmov	r2, r3, d8
 8012dd2:	4640      	mov	r0, r8
 8012dd4:	4649      	mov	r1, r9
 8012dd6:	f7ed fa7f 	bl	80002d8 <__aeabi_dsub>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	460d      	mov	r5, r1
 8012dde:	4622      	mov	r2, r4
 8012de0:	462b      	mov	r3, r5
 8012de2:	4620      	mov	r0, r4
 8012de4:	4629      	mov	r1, r5
 8012de6:	f7ed fc2f 	bl	8000648 <__aeabi_dmul>
 8012dea:	a369      	add	r3, pc, #420	; (adr r3, 8012f90 <__ieee754_exp+0x298>)
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	4606      	mov	r6, r0
 8012df2:	460f      	mov	r7, r1
 8012df4:	f7ed fc28 	bl	8000648 <__aeabi_dmul>
 8012df8:	a367      	add	r3, pc, #412	; (adr r3, 8012f98 <__ieee754_exp+0x2a0>)
 8012dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfe:	f7ed fa6b 	bl	80002d8 <__aeabi_dsub>
 8012e02:	4632      	mov	r2, r6
 8012e04:	463b      	mov	r3, r7
 8012e06:	f7ed fc1f 	bl	8000648 <__aeabi_dmul>
 8012e0a:	a365      	add	r3, pc, #404	; (adr r3, 8012fa0 <__ieee754_exp+0x2a8>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e10:	f7ed fa64 	bl	80002dc <__adddf3>
 8012e14:	4632      	mov	r2, r6
 8012e16:	463b      	mov	r3, r7
 8012e18:	f7ed fc16 	bl	8000648 <__aeabi_dmul>
 8012e1c:	a362      	add	r3, pc, #392	; (adr r3, 8012fa8 <__ieee754_exp+0x2b0>)
 8012e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e22:	f7ed fa59 	bl	80002d8 <__aeabi_dsub>
 8012e26:	4632      	mov	r2, r6
 8012e28:	463b      	mov	r3, r7
 8012e2a:	f7ed fc0d 	bl	8000648 <__aeabi_dmul>
 8012e2e:	a360      	add	r3, pc, #384	; (adr r3, 8012fb0 <__ieee754_exp+0x2b8>)
 8012e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e34:	f7ed fa52 	bl	80002dc <__adddf3>
 8012e38:	4632      	mov	r2, r6
 8012e3a:	463b      	mov	r3, r7
 8012e3c:	f7ed fc04 	bl	8000648 <__aeabi_dmul>
 8012e40:	4602      	mov	r2, r0
 8012e42:	460b      	mov	r3, r1
 8012e44:	4620      	mov	r0, r4
 8012e46:	4629      	mov	r1, r5
 8012e48:	f7ed fa46 	bl	80002d8 <__aeabi_dsub>
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	460b      	mov	r3, r1
 8012e50:	4606      	mov	r6, r0
 8012e52:	460f      	mov	r7, r1
 8012e54:	4620      	mov	r0, r4
 8012e56:	4629      	mov	r1, r5
 8012e58:	f7ed fbf6 	bl	8000648 <__aeabi_dmul>
 8012e5c:	ec41 0b19 	vmov	d9, r0, r1
 8012e60:	f1ba 0f00 	cmp.w	sl, #0
 8012e64:	d15d      	bne.n	8012f22 <__ieee754_exp+0x22a>
 8012e66:	2200      	movs	r2, #0
 8012e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	4639      	mov	r1, r7
 8012e70:	f7ed fa32 	bl	80002d8 <__aeabi_dsub>
 8012e74:	4602      	mov	r2, r0
 8012e76:	460b      	mov	r3, r1
 8012e78:	ec51 0b19 	vmov	r0, r1, d9
 8012e7c:	f7ed fd0e 	bl	800089c <__aeabi_ddiv>
 8012e80:	4622      	mov	r2, r4
 8012e82:	462b      	mov	r3, r5
 8012e84:	f7ed fa28 	bl	80002d8 <__aeabi_dsub>
 8012e88:	4602      	mov	r2, r0
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	4958      	ldr	r1, [pc, #352]	; (8012ff0 <__ieee754_exp+0x2f8>)
 8012e90:	f7ed fa22 	bl	80002d8 <__aeabi_dsub>
 8012e94:	e74d      	b.n	8012d32 <__ieee754_exp+0x3a>
 8012e96:	4857      	ldr	r0, [pc, #348]	; (8012ff4 <__ieee754_exp+0x2fc>)
 8012e98:	a347      	add	r3, pc, #284	; (adr r3, 8012fb8 <__ieee754_exp+0x2c0>)
 8012e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f7ed fbcf 	bl	8000648 <__aeabi_dmul>
 8012eaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012eae:	f7ed fa15 	bl	80002dc <__adddf3>
 8012eb2:	f7ed fe79 	bl	8000ba8 <__aeabi_d2iz>
 8012eb6:	4682      	mov	sl, r0
 8012eb8:	f7ed fb5c 	bl	8000574 <__aeabi_i2d>
 8012ebc:	a340      	add	r3, pc, #256	; (adr r3, 8012fc0 <__ieee754_exp+0x2c8>)
 8012ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec2:	4606      	mov	r6, r0
 8012ec4:	460f      	mov	r7, r1
 8012ec6:	f7ed fbbf 	bl	8000648 <__aeabi_dmul>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	460b      	mov	r3, r1
 8012ece:	4620      	mov	r0, r4
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	f7ed fa01 	bl	80002d8 <__aeabi_dsub>
 8012ed6:	a33c      	add	r3, pc, #240	; (adr r3, 8012fc8 <__ieee754_exp+0x2d0>)
 8012ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012edc:	4680      	mov	r8, r0
 8012ede:	4689      	mov	r9, r1
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	4639      	mov	r1, r7
 8012ee4:	f7ed fbb0 	bl	8000648 <__aeabi_dmul>
 8012ee8:	ec41 0b18 	vmov	d8, r0, r1
 8012eec:	e76f      	b.n	8012dce <__ieee754_exp+0xd6>
 8012eee:	4a42      	ldr	r2, [pc, #264]	; (8012ff8 <__ieee754_exp+0x300>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d811      	bhi.n	8012f18 <__ieee754_exp+0x220>
 8012ef4:	a336      	add	r3, pc, #216	; (adr r3, 8012fd0 <__ieee754_exp+0x2d8>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	ee10 0a10 	vmov	r0, s0
 8012efe:	4629      	mov	r1, r5
 8012f00:	f7ed f9ec 	bl	80002dc <__adddf3>
 8012f04:	4b3a      	ldr	r3, [pc, #232]	; (8012ff0 <__ieee754_exp+0x2f8>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	f7ed fe2e 	bl	8000b68 <__aeabi_dcmpgt>
 8012f0c:	b138      	cbz	r0, 8012f1e <__ieee754_exp+0x226>
 8012f0e:	4b38      	ldr	r3, [pc, #224]	; (8012ff0 <__ieee754_exp+0x2f8>)
 8012f10:	2200      	movs	r2, #0
 8012f12:	4620      	mov	r0, r4
 8012f14:	4629      	mov	r1, r5
 8012f16:	e70a      	b.n	8012d2e <__ieee754_exp+0x36>
 8012f18:	f04f 0a00 	mov.w	sl, #0
 8012f1c:	e75f      	b.n	8012dde <__ieee754_exp+0xe6>
 8012f1e:	4682      	mov	sl, r0
 8012f20:	e75d      	b.n	8012dde <__ieee754_exp+0xe6>
 8012f22:	4632      	mov	r2, r6
 8012f24:	463b      	mov	r3, r7
 8012f26:	2000      	movs	r0, #0
 8012f28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012f2c:	f7ed f9d4 	bl	80002d8 <__aeabi_dsub>
 8012f30:	4602      	mov	r2, r0
 8012f32:	460b      	mov	r3, r1
 8012f34:	ec51 0b19 	vmov	r0, r1, d9
 8012f38:	f7ed fcb0 	bl	800089c <__aeabi_ddiv>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	460b      	mov	r3, r1
 8012f40:	ec51 0b18 	vmov	r0, r1, d8
 8012f44:	f7ed f9c8 	bl	80002d8 <__aeabi_dsub>
 8012f48:	4642      	mov	r2, r8
 8012f4a:	464b      	mov	r3, r9
 8012f4c:	f7ed f9c4 	bl	80002d8 <__aeabi_dsub>
 8012f50:	4602      	mov	r2, r0
 8012f52:	460b      	mov	r3, r1
 8012f54:	2000      	movs	r0, #0
 8012f56:	4926      	ldr	r1, [pc, #152]	; (8012ff0 <__ieee754_exp+0x2f8>)
 8012f58:	f7ed f9be 	bl	80002d8 <__aeabi_dsub>
 8012f5c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012f60:	4592      	cmp	sl, r2
 8012f62:	db02      	blt.n	8012f6a <__ieee754_exp+0x272>
 8012f64:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012f68:	e6e3      	b.n	8012d32 <__ieee754_exp+0x3a>
 8012f6a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012f6e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012f72:	2200      	movs	r2, #0
 8012f74:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012f78:	f7ed fb66 	bl	8000648 <__aeabi_dmul>
 8012f7c:	e6d9      	b.n	8012d32 <__ieee754_exp+0x3a>
 8012f7e:	bf00      	nop
 8012f80:	fefa39ef 	.word	0xfefa39ef
 8012f84:	40862e42 	.word	0x40862e42
 8012f88:	d52d3051 	.word	0xd52d3051
 8012f8c:	c0874910 	.word	0xc0874910
 8012f90:	72bea4d0 	.word	0x72bea4d0
 8012f94:	3e663769 	.word	0x3e663769
 8012f98:	c5d26bf1 	.word	0xc5d26bf1
 8012f9c:	3ebbbd41 	.word	0x3ebbbd41
 8012fa0:	af25de2c 	.word	0xaf25de2c
 8012fa4:	3f11566a 	.word	0x3f11566a
 8012fa8:	16bebd93 	.word	0x16bebd93
 8012fac:	3f66c16c 	.word	0x3f66c16c
 8012fb0:	5555553e 	.word	0x5555553e
 8012fb4:	3fc55555 	.word	0x3fc55555
 8012fb8:	652b82fe 	.word	0x652b82fe
 8012fbc:	3ff71547 	.word	0x3ff71547
 8012fc0:	fee00000 	.word	0xfee00000
 8012fc4:	3fe62e42 	.word	0x3fe62e42
 8012fc8:	35793c76 	.word	0x35793c76
 8012fcc:	3dea39ef 	.word	0x3dea39ef
 8012fd0:	8800759c 	.word	0x8800759c
 8012fd4:	7e37e43c 	.word	0x7e37e43c
 8012fd8:	40862e41 	.word	0x40862e41
 8012fdc:	7fefffff 	.word	0x7fefffff
 8012fe0:	3fd62e42 	.word	0x3fd62e42
 8012fe4:	3ff0a2b1 	.word	0x3ff0a2b1
 8012fe8:	080146b0 	.word	0x080146b0
 8012fec:	080146c0 	.word	0x080146c0
 8012ff0:	3ff00000 	.word	0x3ff00000
 8012ff4:	080146a0 	.word	0x080146a0
 8012ff8:	3defffff 	.word	0x3defffff

08012ffc <__ieee754_fmodf>:
 8012ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ffe:	ee10 5a90 	vmov	r5, s1
 8013002:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8013006:	d009      	beq.n	801301c <__ieee754_fmodf+0x20>
 8013008:	ee10 2a10 	vmov	r2, s0
 801300c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013010:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013014:	da02      	bge.n	801301c <__ieee754_fmodf+0x20>
 8013016:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801301a:	dd04      	ble.n	8013026 <__ieee754_fmodf+0x2a>
 801301c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013020:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013026:	42a3      	cmp	r3, r4
 8013028:	dbfc      	blt.n	8013024 <__ieee754_fmodf+0x28>
 801302a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801302e:	d105      	bne.n	801303c <__ieee754_fmodf+0x40>
 8013030:	4b32      	ldr	r3, [pc, #200]	; (80130fc <__ieee754_fmodf+0x100>)
 8013032:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8013036:	ed93 0a00 	vldr	s0, [r3]
 801303a:	e7f3      	b.n	8013024 <__ieee754_fmodf+0x28>
 801303c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8013040:	d13f      	bne.n	80130c2 <__ieee754_fmodf+0xc6>
 8013042:	0219      	lsls	r1, r3, #8
 8013044:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8013048:	2900      	cmp	r1, #0
 801304a:	dc37      	bgt.n	80130bc <__ieee754_fmodf+0xc0>
 801304c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8013050:	d13d      	bne.n	80130ce <__ieee754_fmodf+0xd2>
 8013052:	0227      	lsls	r7, r4, #8
 8013054:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8013058:	2f00      	cmp	r7, #0
 801305a:	da35      	bge.n	80130c8 <__ieee754_fmodf+0xcc>
 801305c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8013060:	bfbb      	ittet	lt
 8013062:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8013066:	1a12      	sublt	r2, r2, r0
 8013068:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801306c:	4093      	lsllt	r3, r2
 801306e:	bfa8      	it	ge
 8013070:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8013074:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8013078:	bfb5      	itete	lt
 801307a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801307e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8013082:	1a52      	sublt	r2, r2, r1
 8013084:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8013088:	bfb8      	it	lt
 801308a:	4094      	lsllt	r4, r2
 801308c:	1a40      	subs	r0, r0, r1
 801308e:	1b1a      	subs	r2, r3, r4
 8013090:	bb00      	cbnz	r0, 80130d4 <__ieee754_fmodf+0xd8>
 8013092:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8013096:	bf38      	it	cc
 8013098:	4613      	movcc	r3, r2
 801309a:	2b00      	cmp	r3, #0
 801309c:	d0c8      	beq.n	8013030 <__ieee754_fmodf+0x34>
 801309e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80130a2:	db1f      	blt.n	80130e4 <__ieee754_fmodf+0xe8>
 80130a4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80130a8:	db1f      	blt.n	80130ea <__ieee754_fmodf+0xee>
 80130aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80130ae:	317f      	adds	r1, #127	; 0x7f
 80130b0:	4333      	orrs	r3, r6
 80130b2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80130b6:	ee00 3a10 	vmov	s0, r3
 80130ba:	e7b3      	b.n	8013024 <__ieee754_fmodf+0x28>
 80130bc:	3801      	subs	r0, #1
 80130be:	0049      	lsls	r1, r1, #1
 80130c0:	e7c2      	b.n	8013048 <__ieee754_fmodf+0x4c>
 80130c2:	15d8      	asrs	r0, r3, #23
 80130c4:	387f      	subs	r0, #127	; 0x7f
 80130c6:	e7c1      	b.n	801304c <__ieee754_fmodf+0x50>
 80130c8:	3901      	subs	r1, #1
 80130ca:	007f      	lsls	r7, r7, #1
 80130cc:	e7c4      	b.n	8013058 <__ieee754_fmodf+0x5c>
 80130ce:	15e1      	asrs	r1, r4, #23
 80130d0:	397f      	subs	r1, #127	; 0x7f
 80130d2:	e7c3      	b.n	801305c <__ieee754_fmodf+0x60>
 80130d4:	2a00      	cmp	r2, #0
 80130d6:	da02      	bge.n	80130de <__ieee754_fmodf+0xe2>
 80130d8:	005b      	lsls	r3, r3, #1
 80130da:	3801      	subs	r0, #1
 80130dc:	e7d7      	b.n	801308e <__ieee754_fmodf+0x92>
 80130de:	d0a7      	beq.n	8013030 <__ieee754_fmodf+0x34>
 80130e0:	0053      	lsls	r3, r2, #1
 80130e2:	e7fa      	b.n	80130da <__ieee754_fmodf+0xde>
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	3901      	subs	r1, #1
 80130e8:	e7d9      	b.n	801309e <__ieee754_fmodf+0xa2>
 80130ea:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80130ee:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80130f2:	3182      	adds	r1, #130	; 0x82
 80130f4:	410b      	asrs	r3, r1
 80130f6:	4333      	orrs	r3, r6
 80130f8:	e7dd      	b.n	80130b6 <__ieee754_fmodf+0xba>
 80130fa:	bf00      	nop
 80130fc:	080146d0 	.word	0x080146d0

08013100 <__ieee754_sqrtf>:
 8013100:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013104:	4770      	bx	lr

08013106 <with_errno>:
 8013106:	b570      	push	{r4, r5, r6, lr}
 8013108:	4604      	mov	r4, r0
 801310a:	460d      	mov	r5, r1
 801310c:	4616      	mov	r6, r2
 801310e:	f7fa ff8d 	bl	800e02c <__errno>
 8013112:	4629      	mov	r1, r5
 8013114:	6006      	str	r6, [r0, #0]
 8013116:	4620      	mov	r0, r4
 8013118:	bd70      	pop	{r4, r5, r6, pc}

0801311a <xflow>:
 801311a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801311c:	4614      	mov	r4, r2
 801311e:	461d      	mov	r5, r3
 8013120:	b108      	cbz	r0, 8013126 <xflow+0xc>
 8013122:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013126:	e9cd 2300 	strd	r2, r3, [sp]
 801312a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801312e:	4620      	mov	r0, r4
 8013130:	4629      	mov	r1, r5
 8013132:	f7ed fa89 	bl	8000648 <__aeabi_dmul>
 8013136:	2222      	movs	r2, #34	; 0x22
 8013138:	b003      	add	sp, #12
 801313a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801313e:	f7ff bfe2 	b.w	8013106 <with_errno>

08013142 <__math_uflow>:
 8013142:	b508      	push	{r3, lr}
 8013144:	2200      	movs	r2, #0
 8013146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801314a:	f7ff ffe6 	bl	801311a <xflow>
 801314e:	ec41 0b10 	vmov	d0, r0, r1
 8013152:	bd08      	pop	{r3, pc}

08013154 <__math_oflow>:
 8013154:	b508      	push	{r3, lr}
 8013156:	2200      	movs	r2, #0
 8013158:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801315c:	f7ff ffdd 	bl	801311a <xflow>
 8013160:	ec41 0b10 	vmov	d0, r0, r1
 8013164:	bd08      	pop	{r3, pc}

08013166 <finite>:
 8013166:	b082      	sub	sp, #8
 8013168:	ed8d 0b00 	vstr	d0, [sp]
 801316c:	9801      	ldr	r0, [sp, #4]
 801316e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013172:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013176:	0fc0      	lsrs	r0, r0, #31
 8013178:	b002      	add	sp, #8
 801317a:	4770      	bx	lr

0801317c <_init>:
 801317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801317e:	bf00      	nop
 8013180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013182:	bc08      	pop	{r3}
 8013184:	469e      	mov	lr, r3
 8013186:	4770      	bx	lr

08013188 <_fini>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	bf00      	nop
 801318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318e:	bc08      	pop	{r3}
 8013190:	469e      	mov	lr, r3
 8013192:	4770      	bx	lr
